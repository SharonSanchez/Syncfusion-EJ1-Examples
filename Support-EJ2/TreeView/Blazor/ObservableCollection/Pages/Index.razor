@page "/"

@using System.Collections.ObjectModel
@using  Syncfusion.EJ2.Blazor.Navigations


<h4 class="sample-title">Simple Treeview with ObservableCollection</h4>



<div class="control-section">
    <div class="control_wrapper">
        @if (parentitem != null)
        {
        <EjsTreeView TValue="Parentitem">
            <TreeViewFieldsSettings DataSource="@parentitem" Id="nodeId" ParentID="pid" Text="nodeText" HasChildren="hasChild" Expanded="expanded" Child="@child"></TreeViewFieldsSettings>
        </EjsTreeView>
        }
    </div>
</div>



@code{
    object child;
    ObservableCollection<Parentitem> parentitem = new ObservableCollection<Parentitem>();

    //protected override void OnInitialized()
    //{
    //    base.OnInitialized();
    //    this.parentitem.Add(new Parentitem
    //    {
    //        nodeId = "01",
    //        nodeText = "Local Disk (C:)",
    //        expanded = true,
    //        child = new ObservableCollection<Childitem>()
    //    {
    //        new Childitem { nodeId = "01-01", nodeText = "Program Files" },
    //        new Childitem { nodeId = "01-02", nodeText = "Users", expanded = true },
    //        new Childitem { nodeId = "01-03", nodeText = "Windows" }
    //    },
    //    });

    //    this.parentitem.Add(new Parentitem
    //    {
    //        nodeId = "02",
    //        nodeText = "Local Disk (D:)",
    //        child = new ObservableCollection<Childitem>()
    //    {
    //        new Childitem { nodeId = "02-01", nodeText = "Personals" },
    //        new Childitem { nodeId = "02-02", nodeText = "Projects" },
    //        new Childitem { nodeId = "02-02", nodeText = "Office" }
    //    },
    //    });

    //    this.parentitem.Add(new Parentitem
    //    {
    //        nodeId = "03",
    //        nodeText = "Local Disk (E:)",
    //        child = new ObservableCollection<Childitem>()
    //    {
    //        new Childitem { nodeId = "03-01", nodeText = "Pictures" },
    //        new Childitem { nodeId = "03-02", nodeText = "Documents", icon = "docx" },
    //        new Childitem { nodeId = "03-03", nodeText = "Study Materials" }
    //    },
    //    });
    //    //this.child = "child";
    //}


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            this.parentitem.Add(new Parentitem
            {
                nodeId = "01",
                nodeText = "Local Disk (C:)",
                //expanded = true,
                child = new ObservableCollection<Childitem>()
            {
                new Childitem { nodeId = "01-01", nodeText = "Program Files" },
                new Childitem { nodeId = "01-02", nodeText = "Users" },
                new Childitem { nodeId = "01-03", nodeText = "Windows" }
            },
            });

            this.parentitem.Add(new Parentitem
            {
                nodeId = "02",
                nodeText = "Local Disk (D:)",
                child = new ObservableCollection<Childitem>()
            {
                new Childitem { nodeId = "02-01", nodeText = "Personals" },
                new Childitem { nodeId = "02-02", nodeText = "Projects" },
                new Childitem { nodeId = "02-02", nodeText = "Office" }
            },
            });

            this.parentitem.Add(new Parentitem
            {
                nodeId = "03",
                nodeText = "Local Disk (E:)",
                child = new ObservableCollection<Childitem>()
            {
                new Childitem { nodeId = "03-01", nodeText = "Pictures" },
                new Childitem { nodeId = "03-02", nodeText = "Documents", icon = "docx" },
                new Childitem { nodeId = "03-03", nodeText = "Study Materials" }
            },
            });
            //this.child = "child";
            this.StateHasChanged();
        }

    }
    public class Parentitem
    {
        public string nodeId { get; set; }
        public string nodeText { get; set; }
        public string icon { get; set; }
        public bool expanded { get; set; }
        public bool selected { get; set; }
        public ObservableCollection<Childitem> child { get; set; }
    }
    public class Childitem
    {
        public string nodeId { get; set; }
        public string nodeText { get; set; }
        public string icon { get; set; }
        public bool expanded { get; set; }
        public bool selected { get; set; }
    }
}



<style>




    .control_wrapper {
        max-width: 500px;
        margin: auto;
        border: 1px solid #dddddd;
        border-radius: 3px;
    }
</style>