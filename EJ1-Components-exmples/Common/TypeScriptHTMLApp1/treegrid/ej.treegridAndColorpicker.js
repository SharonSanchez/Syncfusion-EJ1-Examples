/*!
*  filename: ej.treegrindAndColorpicker.js
*  version : 17.4.0.39
*  Copyright Syncfusion Inc. 2001 - 2020. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/


window.ej = window.Syncfusion = window.Syncfusion || {};


(function ($, ej, undefined) {
    'use strict';

    ej.version = "17.4.0.39";

    ej.consts = {
        NamespaceJoin: '-'
    };
    ej.TextAlign = {
        Center: 'center',
        Justify: 'justify',
        Left: 'left',
        Right: 'right'
    };
    ej.Orientation = { Horizontal: "horizontal", Vertical: "vertical" };

    ej.serverTimezoneOffset = 0;

    ej.parseDateInUTC = false;

    ej.persistStateVersion = null;

    ej.locales = ej.locales || [];

    if (!Object.prototype.hasOwnProperty) {
        Object.prototype.hasOwnProperty = function (obj, prop) {
            return obj[prop] !== undefined;
        };
    }

    //to support toISOString() in IE8
    if (!Date.prototype.toISOString) {
        (function () {
            function pad(number) {
                var r = String(number);
                if (r.length === 1) {
                    r = '0' + r;
                }
                return r;
            }
            Date.prototype.toISOString = function () {
                return this.getUTCFullYear()
                    + '-' + pad(this.getUTCMonth() + 1)
                    + '-' + pad(this.getUTCDate())
                    + 'T' + pad(this.getUTCHours())
                    + ':' + pad(this.getUTCMinutes())
                    + ':' + pad(this.getUTCSeconds())
                    + '.' + String((this.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)
                    + 'Z';
            };
        }());
    }

    String.format = function () {
        var source = arguments[0];
        for (var i = 0; i < arguments.length - 1; i++)
            source = source.replace(new RegExp("\\{" + i + "\\}", "gm"), arguments[i + 1]);

        source = source.replace(/\{[0-9]\}/g, "");
        return source;
    };

    jQuery.uaMatch = function (ua) {
        ua = ua.toLowerCase();

        var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
            /(webkit)[ \/]([\w.]+)/.exec(ua) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
            /(msie) ([\w.]+)/.exec(ua) ||
            ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
            [];

        return {
            browser: match[1] || "",
            version: match[2] || "0"
        };
    };
    // Function to create new class
    ej.defineClass = function (className, constructor, proto, replace) {
        /// <summary>Creates the javascript class with given namespace & class name & constructor etc</summary>
        /// <param name="className" type="String">class name prefixed with namespace</param>
        /// <param name="constructor" type="Function">constructor function</param>
        /// <param name="proto" type="Object">prototype for the class</param>
        /// <param name="replace" type="Boolean">[Optional]Replace existing class if exists</param>
        /// <returns type="Function">returns the class function</returns>
        if (!className || !proto) return undefined;

        var parts = className.split(".");

        // Object creation
        var obj = window, i = 0;
        for (; i < parts.length - 1; i++) {

            if (ej.isNullOrUndefined(obj[parts[i]]))
                obj[parts[i]] = {};

            obj = obj[parts[i]];
        }

        if (replace || ej.isNullOrUndefined(obj[parts[i]])) {

            //constructor
            constructor = typeof constructor === "function" ? constructor : function () {
            };

            obj[parts[i]] = constructor;

            // prototype
            obj[parts[i]].prototype = proto;
        }

        return obj[parts[i]];
    };

    ej.util = {
        getNameSpace: function (className) {
            /// <summary>Internal function, this will create namespace for plugins using class name</summary>
            /// <param name="className" type="String"></param>
            /// <returns type="String"></returns>
            var splits = className.toLowerCase().split(".");
            splits[0] === "ej" && (splits[0] = "e");

            return splits.join(ej.consts.NamespaceJoin);
        },

        getObject: function (nameSpace, from) {
            if (!from || !nameSpace) return undefined;
			(typeof(nameSpace) != "string") && (nameSpace = JSON.stringify(nameSpace));
            var value = from, splits = nameSpace.split('.');

            for (var i = 0; i < splits.length; i++) {

                if (ej.util.isNullOrUndefined(value)) break;

                value = value[splits[i]];
            }

            return value;
        },

        createObject: function (nameSpace, value, initIn) {
            var splits = nameSpace.split('.'), start = initIn || window, from = start, i, t, length = splits.length;

            for (i = 0; i < length; i++) {
                t = splits[i];
                if (i + 1 == length)
                    from[t] = value;
                else if (ej.isNullOrUndefined(from[t]))
                    from[t] = {};

                from = from[t];
            }

            return start;
        },

        isNullOrUndefined: function (value) {
            /// <summary>Util to check null or undefined</summary>
            /// <param name="value" type="Object"></param>
            /// <returns type="Boolean"></returns>
            return value === undefined || value === null;
        },
        exportAll: function (action, controlIds) {
            var inputAttr = [], widget, locale = [], index, controlEle, controlInstance, controlObject, modelClone;
            var attr = { action: action, method: 'post', "data-ajax": "false" };
            var form = ej.buildTag('form', "", null, attr);
            if (controlIds.length != 0) {
                for (var i = 0; i < controlIds.length; i++) {
                    index = i;
                    controlEle = $("#" + controlIds[i]);
                    controlInstance = $("#" + controlIds[i]).data();
                    widget = controlInstance["ejWidgets"];
                    controlObject = $(controlEle).data(widget[0]);
                    locale.push({ id: controlObject._id, locale: controlObject.model.locale });
                    if (!ej.isNullOrUndefined(controlObject)) {
                        modelClone = controlObject._getExportModel(controlObject.model);
                        inputAttr.push({ name: widget[0], type: 'hidden', value: controlObject.stringify(modelClone) });
                        var input = ej.buildTag('input', "", null, inputAttr[index]);
                        form.append(input);
                    }
                }
                $('body').append(form);
                form.submit();
                setTimeout(function () {
                    var ctrlInstance, ctrlObject;
                    if (locale.length) {
                        for (var j = 0; j < locale.length; j++) {
                            if (!ej.isNullOrUndefined(locale[j].locale)) {
                                ctrlInstance = $("#" + locale[j].id).data();
                                widget = ctrlInstance["ejWidgets"];
                                ctrlObject = $("#" + locale[j].id).data(widget[0]);
                                ctrlObject.model.locale = locale[j].locale;
                            }
                        }
                    }
                }, 0);
                form.remove();
            }
            return true;
        },
        print: function (element, printWin) {
            var $div = ej.buildTag('div')
            var elementClone = element.clone();
            $div.append(elementClone);
            if (!printWin)
                var printWin = window.open('', 'print', "height=452,width=1024,tabbar=no");
            printWin.document.write('<!DOCTYPE html>');
            var links = $('head').find('link').add("style");
            if (ej.browserInfo().name === "msie") {
                var a = ""
                links.each(function (index, obj) {
                    if (obj.tagName == "LINK")
                        $(obj).attr('href', obj.href);
                    a += obj.outerHTML;
                });
                printWin.document.write('<html><head></head><body>' + a + $div[0].innerHTML + '</body></html>');
            }
            else {
                var a = ""
                printWin.document.write('<html><head>')
                links.each(function (index, obj) {
                    if (obj.tagName == "LINK")
                        $(obj).attr('href', obj.href);
                    a += obj.outerHTML;
                });
                printWin.document.writeln(a + '</head><body>')
                printWin.document.writeln($div[0].innerHTML + '</body></html>')
            }
            printWin.document.close();
            printWin.focus();
            setTimeout(function () {
                if (!ej.isNullOrUndefined(printWin.window)) {
                    printWin.print();
                    setTimeout(function () { printWin.close() }, 1000);
                }
            }, 1000);
        },
        ieClearRemover: function (element) {
            var searchBoxHeight = $(element).height();
            element.style.paddingTop = parseFloat(searchBoxHeight / 2) + "px";
            element.style.paddingBottom = parseFloat(searchBoxHeight / 2) + "px";
            element.style.height = "1px";
            element.style.lineHeight = "1px";
        },
        //To send ajax request
        sendAjaxRequest: function (ajaxOptions) {
            $.ajax({
                type: ajaxOptions.type,
                cache: ajaxOptions.cache,
                url: ajaxOptions.url,
                dataType: ajaxOptions.dataType,
                data: ajaxOptions.data,
                contentType: ajaxOptions.contentType,
                async: ajaxOptions.async,
                success: ajaxOptions.successHandler,
                error: ajaxOptions.errorHandler,
                beforeSend: ajaxOptions.beforeSendHandler,
                complete: ajaxOptions.completeHandler
            });
        },

        buildTag: function (tag, innerHtml, styles, attrs) {
            /// <summary>Helper to build jQuery element</summary>
            /// <param name="tag" type="String">tagName#id.cssClass</param>
            /// <param name="innerHtml" type="String"></param>
            /// <param name="styles" type="Object">A set of key/value pairs that configure styles</param>
            /// <param name="attrs" type="Object">A set of key/value pairs that configure attributes</param>
            /// <returns type="jQuery"></returns>
            var tagName = /^[a-z]*[0-9a-z]+/ig.exec(tag)[0];

           var id = /#([_a-z0-9-&@\/\\,+()$~%:*?<>{}\[\]]+\S)/ig.exec(tag);
            id = id ? id[id.length - 1].replace(/[&@\/\\,+()$~%.:*?<>{}\[\]]/g, ''): undefined;

            var className = /\.([a-z]+[-_0-9a-z ]+)/ig.exec(tag);
            className = className ? className[className.length - 1] : undefined;

            return $(document.createElement(tagName))
                .attr(id ? { "id": id } : {})
                .addClass(className || "")
                .css(styles || {})
                .attr(attrs || {})
                .html(innerHtml || "");
        },
        _preventDefaultException: function (el, exceptions) {
            if (el) {
                for (var i in exceptions) {
                    if (exceptions[i].test(el[i])) {
                        return true;
                    }
                }
            }

            return false;
        },

        //Gets the maximum z-index in the document
        getMaxZindex: function () {
            var maxZ = 1;
            maxZ = Math.max.apply(null, $.map($('body *'), function (e, n) {
                if ($(e).css('position') == 'absolute' || $(e).css('position') == 'fixed')
                    return parseInt($(e).css('z-index')) || 1;
            })
            );
            if (maxZ == undefined || maxZ == null)
                maxZ = 1;
            return maxZ;
        },

        //To prevent default actions for the element
        blockDefaultActions: function (e) {
            e.cancelBubble = true;
            e.returnValue = false;
            if (e.preventDefault) e.preventDefault();
            if (e.stopPropagation) e.stopPropagation();
        },

        //To get dimensions of the element when its hidden
        getDimension: function (element, method) {
            var value;
            var $hidden = $(element).parents().andSelf().filter(':hidden');
            if ($hidden) {
                var prop = { visibility: 'hidden', display: 'block' };
                var tmp = [];
                $hidden.each(function () {
                    var temp = {}, name;
                    for (name in prop) {
                        temp[name] = this.style[name];
                        this.style[name] = prop[name];
                    }
                    tmp.push(temp);
                });
                value = /(outer)/g.test(method) ?
                $(element)[method](true) :
               $(element)[method]();

                $hidden.each(function (i) {
                    var temp = tmp[i], name;
                    for (name in prop) {
                        this.style[name] = temp[name];
                    }
                });
            }
            return value;
        },
        //Get triggers when transition End
        transitionEndEvent: function () {
            var transitionEnd = {
                '': 'transitionend',
                'webkit': 'webkitTransitionEnd',
                'Moz': 'transitionend',
                'O': 'otransitionend',
                'ms': 'MSTransitionEnd'
            };

            return transitionEnd[ej.userAgent()];
        },
        //Get triggers when transition End
        animationEndEvent: function () {
            var animationEnd = {
                '': 'animationend',
                'webkit': 'webkitAnimationEnd',
                'Moz': 'animationend',
                'O': 'webkitAnimationEnd',
                'ms': 'animationend'
            };

            return animationEnd[ej.userAgent()];
        },
        //To return the start event to bind for element
        startEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "touchstart" : "mousedown";
        },
        //To return end event to bind for element
        endEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "touchend" : "mouseup"
        },
        //To return move event to bind for element
        moveEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? ($.support.hasPointer && !ej.isMobile()) ? "ejtouchmove" : "touchmove" : "mousemove";
        },
        //To return cancel event to bind for element
        cancelEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "touchcancel" : "mousecancel";
        },
        //To return tap event to bind for element
        tapEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "tap" : "click";
        },
        //To return tap hold event to bind for element
        tapHoldEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "taphold" : "click";
        },
        //To check whether its Device
        isDevice: function () {
            if (ej.getBooleanVal($('head'), 'data-ej-forceset', false))
                return ej.getBooleanVal($('head'), 'data-ej-device', this._device());
            else
                return this._device();
        },
        //To check whether its portrait or landscape mode
        isPortrait: function () {
            var elem = document.documentElement;
            return (elem) && ((elem.clientWidth / elem.clientHeight) < 1.1);
        },
        //To check whether its in lower resolution
        isLowerResolution: function () {
            return ((window.innerWidth <= 640 && ej.isPortrait() && ej.isDevice()) || (window.innerWidth <= 800 && !ej.isDevice()) || (window.innerWidth <= 800 && !ej.isPortrait() && ej.isWindows() && ej.isDevice()) || ej.isMobile());
        },
        //To check whether its iOS web view
        isIOSWebView: function () {
            return (/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent));
        },
        //To check whether its Android web view
        isAndroidWebView: function () {
            return (!(typeof (Android) === "undefined"));
        },
        //To check whether its windows web view
        isWindowsWebView: function () {
            return location.href.indexOf("x-wmapp") != -1;
        },
        _device: function () {
            return (/Android|BlackBerry|iPhone|iPad|iPod|IEMobile|kindle|windows\sce|palm|smartphone|iemobile|mobile|pad|xoom|sch-i800|playbook/i.test(navigator.userAgent.toLowerCase()));
        },
        //To check whether its Mobile
        isMobile: function () {
            return ((/iphone|ipod|android|blackberry|opera|mini|windows\sce|palm|smartphone|iemobile/i.test(navigator.userAgent.toLowerCase()) && /mobile/i.test(navigator.userAgent.toLowerCase()))) || (ej.getBooleanVal($('head'), 'data-ej-mobile', false) === true);
        },
        //To check whether its Tablet
        isTablet: function () {
            return (/ipad|xoom|sch-i800|playbook|tablet|kindle/i.test(navigator.userAgent.toLowerCase())) || (ej.getBooleanVal($('head'), 'data-ej-tablet', false) === true) || (!ej.isMobile() && ej.isDevice());
        },
        //To check whether its Touch Device
        isTouchDevice: function () {
            return (('ontouchstart' in window || (window.navigator.msPointerEnabled && ej.isMobile())) && this.isDevice());
        },
        //To get the outerHTML string for object
        getClearString: function (string) {
            return $.trim(string.replace(/\s+/g, " ").replace(/(\r\n|\n|\r)/gm, "").replace(new RegExp("\>[\n\t ]+\<", "g"), "><"));
        },
        //Get the attribute value with boolean type of element
        getBooleanVal: function (ele, val, option) {
            /// <summary>Util to get the property from data attributes</summary>
            /// <param name="ele" type="Object"></param>
            /// <param name="val" type="String"></param>
            /// <param name="option" type="GenericType"></param>
            /// <returns type="GenericType"></returns>
            var value = $(ele).attr(val);
            if (value != null)
                return value.toLowerCase() == "true";
            else
                return option;
        },
        //Gets the Skew class based on the element current position
        _getSkewClass: function (item, pageX, pageY) {
            var itemwidth = item.width();
            var itemheight = item.height();
            var leftOffset = item.offset().left;
            var rightOffset = item.offset().left + itemwidth;
            var topOffset = item.offset().top;
            var bottomOffset = item.offset().top + itemheight;
            var widthoffset = itemwidth * 0.3;
            var heightoffset = itemheight * 0.3;
            if (pageX < leftOffset + widthoffset && pageY < topOffset + heightoffset)
                return "e-m-skew-topleft";
            if (pageX > rightOffset - widthoffset && pageY < topOffset + heightoffset)
                return "e-m-skew-topright";
            if (pageX > rightOffset - widthoffset && pageY > bottomOffset - heightoffset)
                return "e-m-skew-bottomright";
            if (pageX < leftOffset + widthoffset && pageY > bottomOffset - heightoffset)
                return "e-m-skew-bottomleft";
            if (pageX > leftOffset + widthoffset && pageY < topOffset + heightoffset && pageX < rightOffset - widthoffset)
                return "e-m-skew-top";
            if (pageX < leftOffset + widthoffset)
                return "e-m-skew-left";
            if (pageX > rightOffset - widthoffset)
                return "e-m-skew-right";
            if (pageY > bottomOffset - heightoffset)
                return "e-m-skew-bottom";
            return "e-m-skew-center";
        },
        //Removes the added Skew class on the element
        _removeSkewClass: function (element) {
            $(element).removeClass("e-m-skew-top e-m-skew-bottom e-m-skew-left e-m-skew-right e-m-skew-topleft e-m-skew-topright e-m-skew-bottomleft e-m-skew-bottomright e-m-skew-center e-skew-top e-skew-bottom e-skew-left e-skew-right e-skew-topleft e-skew-topright e-skew-bottomleft e-skew-bottomright e-skew-center");
        },
        //Object.keys  method to support all the browser including IE8.
        _getObjectKeys: function (obj) {
            var i, keys = [];
            obj = Object.prototype.toString.call(obj) === Object.prototype.toString() ? obj : {};
            if (!Object.keys) {
                for (i in obj) {
                    if (obj.hasOwnProperty(i))
                        keys.push(i);
                }
                return keys;
            }
            if (Object.keys)
                return Object.keys(obj);
        },
        _touchStartPoints: function (evt, object) {
            if (evt) {
                var point = evt.touches ? evt.touches[0] : evt;
                object._distX = 0;
                object._distY = 0;
                object._moved = false;
                object._pointX = point.pageX;
                object._pointY = point.pageY;
            }
        },
        _isTouchMoved: function (evt, object) {
            if (evt) {
                var point = evt.touches ? evt.touches[0] : evt,
                deltaX = point.pageX - object._pointX,
                deltaY = point.pageY - object._pointY,
                timestamp = Date.now(),
                newX, newY,
                absDistX, absDistY;
                object._pointX = point.pageX;
                object._pointY = point.pageY;
                object._distX += deltaX;
                object._distY += deltaY;
                absDistX = Math.abs(object._distX);
                absDistY = Math.abs(object._distY);
                return !(absDistX < 5 && absDistY < 5);
            }
        },
        //To bind events for element
        listenEvents: function (selectors, eventTypes, handlers, remove, pluginObj, disableMouse) {
            for (var i = 0; i < selectors.length; i++) {
                ej.listenTouchEvent(selectors[i], eventTypes[i], handlers[i], remove, pluginObj, disableMouse);
            }
        },
        //To bind touch events for element
        listenTouchEvent: function (selector, eventType, handler, remove, pluginObj, disableMouse) {
            var event = remove ? "removeEventListener" : "addEventListener";
            var jqueryEvent = remove ? "off" : "on";
            var elements = $(selector);
            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];
                switch (eventType) {
                    case "touchstart":
                        ej._bindEvent(element, event, eventType, handler, "mousedown", "MSPointerDown", "pointerdown", disableMouse);
                        break;
                    case "touchmove":
                        ej._bindEvent(element, event, eventType, handler, "mousemove", "MSPointerMove", "pointermove", disableMouse);
                        break;
                    case "touchend":
                        ej._bindEvent(element, event, eventType, handler, "mouseup", "MSPointerUp", "pointerup", disableMouse);
                        break;
                    case "touchcancel":
                        ej._bindEvent(element, event, eventType, handler, "mousecancel", "MSPointerCancel", "pointercancel", disableMouse);
                        break;
                    case "tap": case "taphold": case "ejtouchmove": case "click":
                        $(element)[jqueryEvent](eventType, handler);
                        break;
                    default:
                        if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9)
                            pluginObj["_on"]($(element), eventType, handler);
                        else
                            element[event](eventType, handler, true);
                        break;
                }
            }
        },
        //To bind events for element
        _bindEvent: function (element, event, eventType, handler, mouseEvent, pointerEvent, ie11pointerEvent, disableMouse) {
            if ($.support.hasPointer)
                element[event](window.navigator.pointerEnabled ? ie11pointerEvent : pointerEvent, handler, true);
            else
                element[event](eventType, handler, true);
        },
        _browser: function () {
            return (/webkit/i).test(navigator.appVersion) ? 'webkit' : (/firefox/i).test(navigator.userAgent) ? 'Moz' : (/trident/i).test(navigator.userAgent) ? 'ms' : 'opera' in window ? 'O' : '';
        },
        styles: document.createElement('div').style,
        /**
       * To get the userAgent Name     
       * @example             
       * &lt;script&gt;
       *       ej.userAgent();//return user agent name
       * &lt;/script&gt         
       * @memberof AppView
       * @instance
       */
        userAgent: function () {
            var agents = 'webkitT,t,MozT,msT,OT'.split(','),
            t,
            i = 0,
            l = agents.length;

            for (; i < l; i++) {
                t = agents[i] + 'ransform';
                if (t in ej.styles) {
                    return agents[i].substr(0, agents[i].length - 1);
                }
            }

            return false;
        },
        addPrefix: function (style) {
            if (ej.userAgent() === '') return style;

            style = style.charAt(0).toUpperCase() + style.substr(1);
            return ej.userAgent() + style;
        },
        //To Prevent Default Exception

        //To destroy the mobile widgets
        destroyWidgets: function (element) {
            var dataEl = $(element).find("[data-role *= ejm]");
            dataEl.each(function (index, element) {
                var $element = $(element);
                var plugin = $element.data("ejWidgets");
                if (plugin)
                    $element[plugin]("destroy");
            });
        },
        //Get the attribute value of element
        getAttrVal: function (ele, val, option) {
            /// <summary>Util to get the property from data attributes</summary>
            /// <param name="ele" type="Object"></param>
            /// <param name="val" type="String"></param>
            /// <param name="option" type="GenericType"></param>
            /// <returns type="GenericType"></returns>
            var value = $(ele).attr(val);
            if (value != null)
                return value;
            else
                return option;
        },

        // Get the offset value of element
        getOffset: function (ele) {
            var pos = {};
            var offsetObj = ele.offset() || { left: 0, top: 0 };
            $.extend(true, pos, offsetObj);
            if ($("body").css("position") != "static") {
                var bodyPos = $("body").offset();
                pos.left -= bodyPos.left;
                pos.top -= bodyPos.top;
            }
            return pos;
        },

        // Z-index calculation for the element
        getZindexPartial: function (element, popupEle) {
            if (!ej.isNullOrUndefined(element) && element.length > 0) {
                var parents = element.parents(), bodyEle;
                bodyEle = $('body').children();
                if (!ej.isNullOrUndefined(element) && element.length > 0)
                    bodyEle.splice(bodyEle.index(popupEle), 1);
                $(bodyEle).each(function (i, ele) { parents.push(ele); });

                var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                    if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
                }));
                if (!maxZ || maxZ < 10000) maxZ = 10000;
                else maxZ += 1;
                return maxZ;
            }
        },

        isValidAttr: function (element, attribute) {
            var element = $(element)[0];
            if (typeof element[attribute] != "undefined")
                return true;
            else {
                var _isValid = false;
                $.each(element, function (key) {
                    if (key.toLowerCase() == attribute.toLowerCase()) {
                        _isValid = true;
                        return false;
                    }
                });
            }
            return _isValid;
        }

    };

    $.extend(ej, ej.util);

    // base class for all ej widgets. It will automatically inhertied
    ej.widgetBase = {
        droppables: { 'default': [] },
        resizables: { 'default': [] },

        _renderEjTemplate: function (selector, data, index, prop, ngTemplateType) {
            var type = null;
            if (typeof selector === "object" || selector.startsWith("#") || selector.startsWith("."))
                type = $(selector).attr("type");
            if (type) {
                type = type.toLowerCase();
                if (ej.template[type])
                    return ej.template[type](this, selector, data, index, prop);
            }
            // For ejGrid Angular2 Template Support
            else if (!ej.isNullOrUndefined(ngTemplateType))
                 return ej.template['text/x-'+ ngTemplateType](this, selector, data, index, prop);
            return ej.template.render(this, selector, data, index, prop);
        },

        destroy: function () {

            if (this._trigger("destroy"))
                return;

            if (this.model.enablePersistence) {
                this.persistState();
                $(window).off("unload", this._persistHandler);
            }

            try {
                this._destroy();
            } catch (e) { }

            var arr = this.element.data("ejWidgets") || [];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == this.pluginName) {
                    arr.splice(i, 1);
                }
            }
            if (!arr.length)
                this.element.removeData("ejWidgets");

            while (this._events) {
                var item = this._events.pop(), args = [];

                if (!item)
                    break;

                for (var i = 0; i < item[1].length; i++)
                    if (!$.isPlainObject(item[1][i]))
                        args.push(item[1][i]);

                $.fn.off.apply(item[0], args);
            }

            this._events = null;

            this.element
                .removeClass(ej.util.getNameSpace(this.sfType))
                .removeClass("e-js")
                .removeData(this.pluginName);

            this.element = null;
            this.model = null;
        },

        _on: function (element) {
            if (!this._events)
                this._events = [];
            var args = [].splice.call(arguments, 1, arguments.length - 1);

            var handler = {}, i = args.length;
            while (handler && typeof handler !== "function") {
                handler = args[--i];
            }

            args[i] = ej.proxy(args[i], this);

            this._events.push([element, args, handler, args[i]]);

            $.fn.on.apply(element, args);

            return this;
        },

        _off: function (element, eventName, selector, handlerObject) {
            var e = this._events, temp;
            if (!e || !e.length)
                return this;
            if (typeof selector == "function") {
                temp = handlerObject;
                handlerObject = selector;
                selector = temp;
            }
            var t = (eventName.match(/\S+/g) || [""]);
            for (var i = 0; i < e.length; i++) {
                var arg = e[i],
                r = arg[0].length && (!handlerObject || arg[2] === handlerObject) && (arg[1][0] === eventName || t[0]) && (!selector || arg[1][1] === selector) && $.inArray(element[0], arg[0]) > -1;
                if (r) {
                    $.fn.off.apply(element, handlerObject ? [eventName, selector, arg[3]] : [eventName, selector]);
                    e.splice(i, 1);
                    break;
                }
            }

            return this;
        },

        // Client side events wire-up / trigger helper.
        _trigger: function (eventName, eventProp) {
            var fn = null, returnValue, args, clientProp = {};
            $.extend(clientProp, eventProp)

            if (eventName in this.model)
                fn = this.model[eventName];

            if (fn) {
                if (typeof fn === "string") {
                    fn = ej.util.getObject(fn, window);
                }

                if ($.isFunction(fn)) {

                    args = ej.event(eventName, this.model, eventProp);

                    
                    returnValue = fn.call(this, args);

                    // sending changes back - deep copy option should not be enabled for this $.extend 
                    if (eventProp) $.extend(eventProp, args);

                    if (args.cancel || !ej.isNullOrUndefined(returnValue))
                        return returnValue === false || args.cancel;
                }
            }

            var isPropDefined = Boolean(eventProp);
            eventProp = eventProp || {};
            eventProp.originalEventType = eventName;
            eventProp.type = this.pluginName + eventName;

            args = $.Event(eventProp.type, ej.event(eventProp.type, this.model, eventProp));

            this.element && this.element.trigger(args);

            // sending changes back - deep copy option should not be enabled for this $.extend 
            if (isPropDefined) $.extend(eventProp, args);

            if (ej.isOnWebForms && args.cancel == false && this.model.serverEvents && this.model.serverEvents.length)
                ej.raiseWebFormsServerEvents(eventName, eventProp, clientProp);

            return args.cancel;
        },

        setModel: function (options, forceSet) {
            // check for whether to apply values are not. if _setModel function is defined in child,
            //  this will call that function and validate it using return value

            if (this._trigger("modelChange", { "changes": options }))
                return;

            for (var prop in options) {
                if (!forceSet) {
                    if (this.model[prop] === options[prop]) {
                        delete options[prop];
                        continue;
                    }
                    if ($.isPlainObject(options[prop])) {
                        iterateAndRemoveProps(this.model[prop], options[prop]);
                        if ($.isEmptyObject(options[prop])) {
                            delete options[prop];
                            continue;
                        }
                    }
                }

                if (this.dataTypes) {
                    var returnValue = this._isValidModelValue(prop, this.dataTypes, options);
                    if (returnValue !== true)
                        throw "setModel - Invalid input for property :" + prop + " - " + returnValue;
                }
                if (this.model.notifyOnEachPropertyChanges && this.model[prop] !== options[prop]) {
                    var arg = {
                        oldValue: this.model[prop],
                        newValue: options[prop]
                    };

                    options[prop] = this._trigger(prop + "Change", arg) ? this.model[prop] : arg.newValue;
                }
            }
            if ($.isEmptyObject(options))
                return;

            if (this._setFirst) {
                var ds = options.dataSource;
                if (ds) delete options.dataSource;

                $.extend(true, this.model, options);
                if (ds) {
                    this.model.dataSource = (ds instanceof Array) ? ds.slice() : ds;
                    options["dataSource"] = this.model.dataSource;
                }
                !this._setModel || this._setModel(options);

            } else if (!this._setModel || this._setModel(options) !== false) {
                $.extend(true, this.model, options);
            }
            if ("enablePersistence" in options) {
                this._setState(options.enablePersistence);
            }
        },
        option: function (prop, value, forceSet) {
            if (!prop)
                return this.model;

            if ($.isPlainObject(prop))
                return this.setModel(prop, forceSet);

            if (typeof prop === "string") {
                prop = prop.replace(/^model\./, "");
                var oldValue = ej.getObject(prop, this.model);

                if (value === undefined && !forceSet)
                    return oldValue;

                if (prop === "enablePersistence")
                    return this._setState(value);

                if (forceSet && value === ej.extensions.modelGUID) {
                    return this._setModel(ej.createObject(prop, ej.getObject(prop, this.model), {}));
                }

                if (forceSet || ej.getObject(prop, this.model) !== value)
                    return this.setModel(ej.createObject(prop, value, {}), forceSet);
            }
            return undefined;
        },

        _isValidModelValue: function (prop, types, options) {
            var value = types[prop], option = options[prop], returnValue;

            if (!value)
                return true;

            if (typeof value === "string") {
                if (value == "enum") {
                    options[prop] = option ? option.toString().toLowerCase() : option;
                    value = "string";
                }

                if (value === "array") {
                    if (Object.prototype.toString.call(option) === '[object Array]')
                        return true;
                }
                else if (value === "data") {
                    return true;
                }
                else if (value === "parent") {
                    return true;
                }
                else if (typeof option === value)
                    return true;

                return "Expected type - " + value;
            }

            if (option instanceof Array) {
                for (var i = 0; i < option.length; i++) {
                    returnValue = this._isValidModelValue(prop, types, option[i]);
                    if (returnValue !== true) {
                        return " [" + i + "] - " + returnValue;
                    }
                }
                return true;
            }

            for (var innerProp in option) {
                returnValue = this._isValidModelValue(innerProp, value, option);
                if (returnValue !== true)
                    return innerProp + " : " + returnValue;
            }

            return true;
        },

        _returnFn: function (obj, propName) {
            if (propName.indexOf('.') != -1) {
                this._returnFn(obj[propName.split('.')[0]], propName.split('.').slice(1).join('.'));
            }
            else
                obj[propName] = obj[propName].call(obj.propName);
        },

        _removeCircularRef: function (obj) {
            var seen = [];
            function detect(obj, key, parent) {
                if (typeof obj != 'object') { return; }
                if (!Array.prototype.indexOf) {
                    Array.prototype.indexOf = function (val) {
                        return jQuery.inArray(val, this);
                    };
                }
                if (seen.indexOf(obj) >= 0) {
                    delete parent[key];
                    return;
                }
                seen.push(obj);
                for (var k in obj) { //dive on the object's children
                    if (obj.hasOwnProperty(k)) { detect(obj[k], k, obj); }
                }
                seen.pop();
                return;
            }
            detect(obj, 'obj', null);
            return obj;
        },

        stringify: function (model, removeCircular) {
            var observables = this.observables;
            for (var k = 0; k < observables.length; k++) {
                var val = ej.getObject(observables[k], model);
                if (!ej.isNullOrUndefined(val) && typeof (val) === "function")
                    this._returnFn(model, observables[k]);
            }
            if (removeCircular) model = this._removeCircularRef(model);
            return JSON.stringify(model);
        },

        _setState: function (val) {
            if (val === true) {
                this._persistHandler = ej.proxy(this.persistState, this);
                $(window).on("unload", this._persistHandler);
            } else {
                this.deleteState();
                $(window).off("unload", this._persistHandler);
            }
        },

        _removeProp: function (obj, propName) {
            if (!ej.isNullOrUndefined(obj)) {
                if (propName.indexOf('.') != -1) {
                    this._removeProp(obj[propName.split('.')[0]], propName.split('.').slice(1).join('.'));
                }
                else
                    delete obj[propName];
            }
        },

        persistState: function () {
            var model;

            if (this._ignoreOnPersist) {
                model = copyObject({}, this.model);
                for (var i = 0; i < this._ignoreOnPersist.length; i++) {
                    this._removeProp(model, this._ignoreOnPersist[i]);
                }
                model.ignoreOnPersist = this._ignoreOnPersist;
            } else if (this._addToPersist) {
                model = {};
                for (var i = 0; i < this._addToPersist.length; i++) {
                    ej.createObject(this._addToPersist[i], ej.getObject(this._addToPersist[i], this.model), model);
                }
                model.addToPersist = this._addToPersist;
            } else {
                model = copyObject({}, this.model);
            }

            if (this._persistState) {
                model.customPersists = {};
                this._persistState(model.customPersists);
            }

            if (window.localStorage) {
                if (!ej.isNullOrUndefined(ej.persistStateVersion) && window.localStorage.getItem("persistKey") == null)
                    window.localStorage.setItem("persistKey", ej.persistStateVersion);
                window.localStorage.setItem("$ej$" + this.pluginName + this._id, JSON.stringify(model));
            }
            else if (document.cookie) {
                if (!ej.isNullOrUndefined(ej.persistStateVersion) && ej.cookie.get("persistKey") == null)
                    ej.cookie.set("persistKey", ej.persistStateVersion);
                ej.cookie.set("$ej$" + this.pluginName + this._id, model);
            }
        },

        deleteState: function () {
            var model;
            if (window.localStorage)
                window.localStorage.removeItem("$ej$" + this.pluginName + this._id);
            else if (document.cookie)
                ej.cookie.set("$ej$" + this.pluginName + this._id, model, new Date());
        },

        restoreState: function (silent) {
            var value = null;
            if (window.localStorage)
                value = window.localStorage.getItem("$ej$" + this.pluginName + this._id);
            else if (document.cookie)
                value = ej.cookie.get("$ej$" + this.pluginName + this._id);

            if (value) {
                var model = JSON.parse(value);

                if (this._restoreState) {
                    this._restoreState(model.customPersists);
                    delete model.customPersists;
                }

                if (ej.isNullOrUndefined(model) === false)
                    if (!ej.isNullOrUndefined(model.ignoreOnPersist)) {
                        this._ignoreOnPersist = model.ignoreOnPersist;
                        delete model.ignoreOnPersist;
                    } else if (!ej.isNullOrUndefined(model.addToPersist)) {
                        this._addToPersist = model.addToPersist;
                        delete model.addToPersist;
                    }
            }
            if (!ej.isNullOrUndefined(model) && !ej.isNullOrUndefined(this._ignoreOnPersist)) {
                for(var i = 0, len =  this._ignoreOnPersist.length; i < len; i++) {
					if (this._ignoreOnPersist[i].indexOf('.') !== -1)
                        ej.createObject(this._ignoreOnPersist[i], ej.getObject(this._ignoreOnPersist[i], this.model), model);
                    else
                        model[this._ignoreOnPersist[i]] = this.model[this._ignoreOnPersist[i]];
				}
                this.model = model;
            }
            else
                this.model = $.extend(true, this.model, model);

            if (!silent && value && this._setModel)
                this._setModel(this.model);
        },

        //to prevent persistence
        ignoreOnPersist: function (properties) {
            var collection = [];
            if (typeof (properties) == "object")
                collection = properties;
            else if (typeof (properties) == 'string')
                collection.push(properties);
            if (this._addToPersist === undefined) {
                this._ignoreOnPersist = this._ignoreOnPersist || [];
                for (var i = 0; i < collection.length; i++) {
                    this._ignoreOnPersist.push(collection[i]);
                }
            } else {
                for (var i = 0; i < collection.length; i++) {
                    var index = this._addToPersist.indexOf(collection[i]);
                    this._addToPersist.splice(index, 1);
                }
            }
        },

        //to maintain persistence
        addToPersist: function (properties) {
            var collection = [];
            if (typeof (properties) == "object")
                collection = properties;
            else if (typeof (properties) == 'string')
                collection.push(properties);
            if (this._addToPersist === undefined) {
                this._ignoreOnPersist = this._ignoreOnPersist || [];
                for (var i = 0; i < collection.length; i++) {
                    var index = this._ignoreOnPersist.indexOf(collection[i]);
                    this._ignoreOnPersist.splice(index, 1);
                }
            } else {
                for (var i = 0; i < collection.length; i++) {
                    if ($.inArray(collection[i], this._addToPersist) === -1)
                        this._addToPersist.push(collection[i]);
                }
            }
        },

        // Get formatted text 
        formatting: function (formatstring, str, locale) {
            formatstring = formatstring.replace(/%280/g, "\"").replace(/&lt;/g, "<").replace(/&gt;/g, ">");
            locale = ej.preferredCulture(locale) ? locale : "en-US";
            var s = formatstring;
            var frontHtmlidx, FrontHtml, RearHtml, lastidxval;
            frontHtmlidx = formatstring.split("{0:");
            lastidxval = formatstring.split("}");
            FrontHtml = frontHtmlidx[0];
            RearHtml = lastidxval[1];
            if (typeof (str) == "string" && $.isNumeric(str))
                str = Number(str);
            if (formatstring.indexOf("{0:") != -1) {
                var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                var formatVal = toformat.exec(formatstring);
                if (formatVal != null && str != null) {
                    if (FrontHtml != null && RearHtml != null)
                        str = FrontHtml + ej.format(str, formatVal[2], locale) + RearHtml;
                    else
                        str = ej.format(str, formatVal[2], locale);
                } else if (str != null)
                    str = str;
                else
                    str = "";
                return str;
            } else if (s.startsWith("{") && !s.startsWith("{0:")) {
                var fVal = s.split(""), str = (str || "") + "", strSplt = str.split(""), formats = /[0aA\*CN<>\?]/gm;
                for (var f = 0, f, val = 0; f < fVal.length; f++)
                    fVal[f] = formats.test(fVal[f]) ? "{" + val++ + "}" : fVal[f];
                return String.format.apply(String, [fVal.join("")].concat(strSplt)).replace('{', '').replace('}', '');
            } else if (this.data != null && this.data.Value == null) {
                $.each(this.data, function (dataIndex, dataValue) {
                    s = s.replace(new RegExp('\\{' + dataIndex + '\\}', 'gm'), dataValue);
                });
                return s;
            } else {
                return this.data.Value;
            }
        },
    };

    ej.WidgetBase = function () {
    }

    var iterateAndRemoveProps = function (source, target) {
		if(source instanceof Array) {
			for (var i = 0, len = source.length; i < len; i++) {
				prop = source[i];
				if(prop === target[prop])
					delete target[prop];
				if ($.isPlainObject(target[prop]) && $.isPlainObject(prop))
					iterateAndRemoveProps(prop, target[prop]);
			}
		}
		else {
			for (var prop in source) {
				if (source[prop] === target[prop])
					delete target[prop];
				if ($.isPlainObject(target[prop]) && $.isPlainObject(source[prop]))
					iterateAndRemoveProps(source[prop], target[prop]);
			}
		}
    }

    ej.widget = function (pluginName, className, proto) {
        /// <summary>Widget helper for developers, this set have predefined function to jQuery plug-ins</summary>
        /// <param name="pluginName" type="String">the plugin name that will be added in jquery.fn</param>
        /// <param name="className" type="String">the class name for your plugin, this will help create default cssClas</param>
        /// <param name="proto" type="Object">prototype for of the plug-in</param>

        if (typeof pluginName === "object") {
            proto = className;
            for (var prop in pluginName) {
                var name = pluginName[prop];

                if (name instanceof Array) {
                    proto._rootCSS = name[1];
                    name = name[0];
                }

                ej.widget(prop, name, proto);

                if (pluginName[prop] instanceof Array)
                    proto._rootCSS = "";
            }

            return;
        }

        var nameSpace = proto._rootCSS || ej.getNameSpace(className);

        proto = ej.defineClass(className, function (element, options) {

            this.sfType = className;
            this.pluginName = pluginName;
            this.instance = pInstance;

            if (ej.isNullOrUndefined(this._setFirst))
                this._setFirst = true;

            this["ob.values"] = {};

            $.extend(this, ej.widgetBase);

            if (this.dataTypes) {
                for (var property in options) {
                    var returnValue = this._isValidModelValue(property, this.dataTypes, options);
                    if (returnValue !== true)
                        throw "setModel - Invalid input for property :" + property + " - " + returnValue;
                }
            }

            var arr = (element.data("ejWidgets") || []);
            arr.push(pluginName);
            element.data("ejWidgets", arr);

            for (var i = 0; ej.widget.observables && this.observables && i < this.observables.length; i++) {
                var t = ej.getObject(this.observables[i], options);
                if (t) ej.createObject(this.observables[i], ej.widget.observables.register(t, this.observables[i], this, element), options);
            }

            this.element = element.jquery ? element : $(element);
            this.model = copyObject(true, {}, proto.prototype.defaults, options);
            this.model.keyConfigs = copyObject(this.keyConfigs);

            this.element.addClass(nameSpace + " e-js").data(pluginName, this);

            this._id = element[0].id;

            if (this.model.enablePersistence) {
                if (window.localStorage && !ej.isNullOrUndefined(ej.persistStateVersion) && window.localStorage.getItem("persistKey") != ej.persistStateVersion) {
                    for (var i in window.localStorage) {
                        if (i.indexOf("$ej$") != -1) {
                            window.localStorage.removeItem(i); //removing the previously stored plugin item from local storage
							window.localStorage.setItem("persistKey", ej.persistStateVersion);
						}				
                    }
                }
                else if (document.cookie && !ej.isNullOrUndefined(ej.persistStateVersion) && ej.cookie.get("persistKey") != ej.persistStateVersion) {
                    var model;
                    var splits = document.cookie.split(/; */);
                    for (var k in splits) {
                        if (k.indexOf("$ej$") != -1) {
                            ej.cookie.set(k.split("=")[0], model, new Date()); //removing the previously stored plugin item from local storage
							ej.cookie.set("persistKey", ej.persistStateVersion);
						}		
                    }
                }
                this._persistHandler = ej.proxy(this.persistState, this);
                $(window).on("unload", this._persistHandler);
                this.restoreState(true);
            }

            this._init(options);

            if (typeof this.model.keyConfigs === "object" && !(this.model.keyConfigs instanceof Array)) {
                var requiresEvt = false;
                if (this.model.keyConfigs.focus)
                    this.element.attr("accesskey", this.model.keyConfigs.focus);

                for (var keyProps in this.model.keyConfigs) {
                    if (keyProps !== "focus") {
                        requiresEvt = true;
                        break;
                    }
                }

                if (requiresEvt && this._keyPressed) {
                    var el = element, evt = "keydown";

                    if (this.keySettings) {
                        el = this.keySettings.getElement ? this.keySettings.getElement() || el : el;
                        evt = this.keySettings.event || evt;
                    }

                    this._on(el, evt, function (e) {
                        if (!this.model.keyConfigs) return;

                        var action = keyFn.getActionFromCode(this.model.keyConfigs, e.which, e.ctrlKey, e.shiftKey, e.altKey);
                        var arg = {
                            code: e.which,
                            ctrl: e.ctrlKey,
                            alt: e.altKey,
                            shift: e.shiftKey
                        };
                        if (!action) return;

                        if (this._keyPressed(action, e.target, arg, e) === false)
                            e.preventDefault();
                    });
                }
            }
            this._trigger("create");
        }, proto);

        $.fn[pluginName] = function (options) {
            var opt = options, args;
            for (var i = 0; i < this.length; i++) {

                var $this = $(this[i]),
                    pluginObj = $this.data(pluginName),
                    isAlreadyExists = pluginObj && $this.hasClass(nameSpace),
                    obj = null;

                if (this.length > 0 && $.isPlainObject(opt))
                    options = ej.copyObject({}, opt);

                // ----- plug-in creation/init
                if (!isAlreadyExists) {
                    if (proto.prototype._requiresID === true && !$(this[i]).attr("id")) {
                        $this.attr("id", getUid("ejControl_"));
                    }
                    if (!options || typeof options === "object") {
                        if (proto.prototype.defaults && !ej.isNullOrUndefined(ej.setCulture) && "locale" in proto.prototype.defaults && pluginName != "ejChart") {
                            if (options && !("locale" in options)) options.locale = ej.setCulture().name;
                            else if (ej.isNullOrUndefined(options)) {
                                options = {}; options.locale = ej.setCulture().name;
                            }
                        }
                        new proto($this, options);
                    }
                    else {
                        throwError(pluginName + ": methods/properties can be accessed only after plugin creation");
                    }
                    continue;
                }

                if (!options) continue;

                args = [].slice.call(arguments, 1);

                if (this.length > 0 && args[0] && opt === "option" && $.isPlainObject(args[0])) {
                    args[0] = ej.copyObject({}, args[0]);
                }

                // --- Function/property set/access
                if ($.isPlainObject(options)) {
                    // setModel using JSON object
                    pluginObj.setModel(options);
                }

                    // function/property name starts with "_" is private so ignore it.
                else if (options.indexOf('_') !== 0
                    && !ej.isNullOrUndefined(obj = ej.getObject(options, pluginObj))
                    || options.indexOf("model.") === 0) {

                    if (!obj || !$.isFunction(obj)) {

                        // if property is accessed, then break the jquery chain
                        if (arguments.length == 1)
                            return obj;

                        //setModel using string input
                        pluginObj.option(options, arguments[1]);

                        continue;
                    }

                    var value = obj.apply(pluginObj, args);

                    // If function call returns any value, then break the jquery chain
                    if (value !== undefined)
                        return value;

                } else {
                    throwError(className + ": function/property - " + options + " does not exist");
                }
            }
            if (pluginName.indexOf("ejm") != -1)
                ej.widget.registerInstance($this, pluginName, className, proto.prototype);
            // maintaining jquery chain
            return this;
        };

        ej.widget.register(pluginName, className, proto.prototype);
        ej.loadLocale(pluginName);
    };

    ej.loadLocale = function (pluginName) {
        var i, len, locales = ej.locales;
        for (i = 0, len = locales.length; i < len; i++)
            $.fn["Locale_" + locales[i]](pluginName);
    };


    $.extend(ej.widget, (function () {
        var _widgets = {}, _registeredInstances = [],

        register = function (pluginName, className, prototype) {
            if (!ej.isNullOrUndefined(_widgets[pluginName]))
                throwError("ej.widget : The widget named " + pluginName + " is trying to register twice.");

            _widgets[pluginName] = { name: pluginName, className: className, proto: prototype };

            ej.widget.extensions && ej.widget.extensions.registerWidget(pluginName);
        },
        registerInstance = function (element, pluginName, className, prototype) {
            _registeredInstances.push({ element: element, pluginName: pluginName, className: className, proto: prototype });
        }

        return {
            register: register,
            registerInstance: registerInstance,
            registeredWidgets: _widgets,
            registeredInstances: _registeredInstances
        };

    })());

    ej.widget.destroyAll = function (elements) {
        if (!elements || !elements.length) return;

        for (var i = 0; i < elements.length; i++) {
            var data = elements.eq(i).data(), wds = data["ejWidgets"];
            if (wds && wds.length) {
                for (var j = 0; j < wds.length; j++) {
                    if (data[wds[j]] && data[wds[j]].destroy)
                        data[wds[j]].destroy();
                }
            }
        }
    };

    ej.cookie = {
        get: function (name) {
            var value = RegExp(name + "=([^;]+)").exec(document.cookie);

            if (value && value.length > 1)
                return value[1];

            return undefined;
        },
        set: function (name, value, expiryDate) {
            if (typeof value === "object")
                value = JSON.stringify(value);

            value = escape(value) + ((expiryDate == null) ? "" : "; expires=" + expiryDate.toUTCString());
            document.cookie = name + "=" + value;
        }
    };

    var keyFn = {
        getActionFromCode: function (keyConfigs, keyCode, isCtrl, isShift, isAlt) {
            isCtrl = isCtrl || false;
            isShift = isShift || false;
            isAlt = isAlt || false;

            for (var keys in keyConfigs) {
                if (keys === "focus") continue;

                var key = keyFn.getKeyObject(keyConfigs[keys]);
                for (var i = 0; i < key.length; i++) {
                    if (keyCode === key[i].code && isCtrl == key[i].isCtrl && isShift == key[i].isShift && isAlt == key[i].isAlt)
                        return keys;
                }
            }
            return null;
        },
        getKeyObject: function (key) {
            var res = {
                isCtrl: false,
                isShift: false,
                isAlt: false
            };
            var tempRes = $.extend(true, {}, res);
            var $key = key.split(","), $res = [];
            for (var i = 0; i < $key.length; i++) {
                var rslt = null;
                if ($key[i].indexOf("+") != -1) {
                    var k = $key[i].split("+");
                    for (var j = 0; j < k.length; j++) {
                        rslt = keyFn.getResult($.trim(k[j]), res);
                    }
                }
                else {
                    rslt = keyFn.getResult($.trim($key[i]), $.extend(true, {}, tempRes));
                }
                $res.push(rslt);
            }
            return $res;
        },
        getResult: function (key, res) {
            if (key === "ctrl")
                res.isCtrl = true;
            else if (key === "shift")
                res.isShift = true;
            else if (key === "alt")
                res.isAlt = true;
            else res.code = parseInt(key, 10);
            return res;
        }
    };

    ej.getScrollableParents = function (element) {
        return $(element).parentsUntil("html").filter(function () {
            return $(this).css("overflow") != "visible";
        }).add($(window));
    }
    ej.browserInfo = function () {
        var browser = {}, clientInfo = [],
        browserClients = {
            opera: /(opera|opr)(?:.*version|)[ \/]([\w.]+)/i, edge: /(edge)(?:.*version|)[ \/]([\w.]+)/i, webkit: /(chrome)[ \/]([\w.]+)/i, safari: /(webkit)[ \/]([\w.]+)/i, msie: /(msie|trident) ([\w.]+)/i, mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
        };
        for (var client in browserClients) {
            if (browserClients.hasOwnProperty(client)) {
                clientInfo = navigator.userAgent.match(browserClients[client]);
                if (clientInfo) {
                    browser.name = clientInfo[1].toLowerCase() == "opr" ? "opera" : clientInfo[1].toLowerCase();
                    browser.version = clientInfo[2];
                    browser.culture = {};
                    browser.culture.name = browser.culture.language = navigator.language || navigator.userLanguage;
                    if (typeof (ej.globalize) != 'undefined') {
                        var oldCulture = ej.preferredCulture().name;
                        var culture = (navigator.language || navigator.userLanguage) ? ej.preferredCulture(navigator.language || navigator.userLanguage) : ej.preferredCulture("en-US");
                        for (var i = 0; (navigator.languages) && i < navigator.languages.length; i++) {
                            culture = ej.preferredCulture(navigator.languages[i]);
                            if (culture.language == navigator.languages[i])
                                break;
                        }
                        ej.preferredCulture(oldCulture);
                        $.extend(true, browser.culture, culture);
                    }
                    if (!!navigator.userAgent.match(/Trident\/7\./)) {
                        browser.name = "msie";
                    }
                    break;
                }
            }
        }
        browser.isMSPointerEnabled = (browser.name == 'msie') && browser.version > 9 && window.navigator.msPointerEnabled;
        browser.pointerEnabled = window.navigator.pointerEnabled;
        return browser;
    };
    ej.eventType = {
        mouseDown: "mousedown touchstart",
        mouseMove: "mousemove touchmove",
        mouseUp: "mouseup touchend",
        mouseLeave: "mouseleave touchcancel",
        click: "click touchend"
    };

    ej.event = function (type, data, eventProp) {

        var e = $.extend(eventProp || {},
            {
                "type": type,
                "model": data,
                "cancel": false
            });

        return e;
    };

    ej.proxy = function (fn, context, arg) {
        if (!fn || typeof fn !== "function")
            return null;

        if ('on' in fn && context)
            return arg ? fn.on(context, arg) : fn.on(context);

        return function () {
            var args = arg ? [arg] : []; args.push.apply(args, arguments);
            return fn.apply(context || this, args);
        };
    };

    ej.hasStyle = function (prop) {
        var style = document.documentElement.style;

        if (prop in style) return true;

        var prefixs = ['ms', 'Moz', 'Webkit', 'O', 'Khtml'];

        prop = prop[0].toUpperCase() + prop.slice(1);

        for (var i = 0; i < prefixs.length; i++) {
            if (prefixs[i] + prop in style)
                return true;
        }

        return false;
    };

    Array.prototype.indexOf = Array.prototype.indexOf || function (searchElement) {
        var len = this.length;

        if (len === 0) return -1;

        for (var i = 0; i < len; i++) {
            if (i in this && this[i] === searchElement)
                return i;
        }
        return -1;
    };

    String.prototype.startsWith = String.prototype.startsWith || function (key) {
        return this.slice(0, key.length) === key;
    };
    var copyObject = ej.copyObject = function (isDeepCopy, target) {
        var start = 2, current, source;
        if (typeof isDeepCopy !== "boolean") {
            start = 1;
        }
        var objects = [].slice.call(arguments, start);
        if (start === 1) {
            target = isDeepCopy;
            isDeepCopy = undefined;
        }

        for (var i = 0; i < objects.length; i++) {
            for (var prop in objects[i]) {
                current = target[prop], source = objects[i][prop];

                if (source === undefined || current === source || objects[i] === source || target === source)
                    continue;
                if (source instanceof Array) {
                    if (i === 0 && isDeepCopy) {
                        if (prop === "dataSource" || prop === "data" || prop === "predicates")
                            target[prop] = source.slice();
					  else  {
                        target[prop] = new Array();
                        for (var j = 0; j < source.length; j++) {
                            copyObject(true, target[prop], source);
                        }
					  }
                    }
                    else
                        target[prop] = source.slice();
                }
                else if (ej.isPlainObject(source)) {
                    target[prop] = current || {};
                    if (isDeepCopy)
                        copyObject(isDeepCopy, target[prop], source);
                    else
                        copyObject(target[prop], source);
                } else
                    target[prop] = source;
            }
        }
        return target;
    };
    var pInstance = function () {
        return this;
    }

    var _uid = 0;
    var getUid = function (prefix) {
        return prefix + _uid++;
    }

    ej.template = {};

    ej.template.render = ej.template["text/x-jsrender"] = function (self, selector, data, index, prop) {
        if (selector.slice(0, 1) !== "#")
            selector = ["<div>", selector, "</div>"].join("");
        var property = { prop: prop, index: index };
        return $(selector).render(data, property);
    }

    ej.isPlainObject = function (obj) {
        if (!obj) return false;
        if (ej.DataManager !== undefined && obj instanceof ej.DataManager) return false;
        if (typeof obj !== "object" || obj.nodeType || jQuery.isWindow(obj)) return false;
        try {
            if (obj.constructor &&
                !obj.constructor.prototype.hasOwnProperty("isPrototypeOf")) {
                return false;
            }
        } catch (e) {
            return false;
        }

        var key, ownLast = ej.support.isOwnLast;
        for (key in obj) {
            if (ownLast) break;
        }

        return key === undefined || obj.hasOwnProperty(key);
    };
    var getValueFn = false;
    ej.util.valueFunction = function (prop) {
        return function (value, getObservable) {
            var val = ej.getObject(prop, this.model);

            if (getValueFn === false)
                getValueFn = ej.getObject("observables.getValue", ej.widget);

            if (value === undefined) {
                if (!ej.isNullOrUndefined(getValueFn)) {
                    return getValueFn(val, getObservable);
                }
                return typeof val === "function" ? val.call(this) : val;
            }

            if (typeof val === "function") {
                this["ob.values"][prop] = value;
                val.call(this, value);
            }
            else
                ej.createObject(prop, value, this.model);
        }
    };
    ej.util.getVal = function (val) {
        if (typeof val === "function")
            return val();
        return val;
    };
    ej.support = {
        isOwnLast: function () {
            var fn = function () { this.a = 1; };
            fn.prototype.b = 1;

            for (var p in new fn()) {
                return p === "b";
            }
        }(),
        outerHTML: function () {
            return document.createElement("div").outerHTML !== undefined;
        }()
    };

    var throwError = ej.throwError = function (er) {
        try {
            throw new Error(er);
        } catch (e) {
            throw e.message + "\n" + e.stack;
        }
    };

    ej.getRandomValue = function (min, max) {
        if (min === undefined || max === undefined)
            return ej.throwError("Min and Max values are required for generating a random number");

        var rand;
        if ("crypto" in window && "getRandomValues" in crypto) {
            var arr = new Uint16Array(1);
            window.crypto.getRandomValues(arr);
            rand = arr[0] % (max - min) + min;
        }
        else rand = Math.random() * (max - min) + min;
        return rand | 0;
    }

    ej.extensions = {};
    ej.extensions.modelGUID = "{0B1051BA-1CCB-42C2-A3B5-635389B92A50}";
})(window.jQuery, window.Syncfusion);
(function () {
    $.fn.addEleAttrs = function (json) {
        var $this = $(this);
        $.each(json, function (i, attr) {
            if (attr && attr.specified) {
                $this.attr(attr.name, attr.value);
            }
        });

    };
    $.fn.removeEleAttrs = function (regex) {
        return this.each(function () {
            var $this = $(this),
                names = [],
                attrs = $(this.attributes).clone();
            $.each(attrs, function (i, attr) {
                if (attr && attr.specified && regex.test(attr.name)) {
                    $this.removeAttr(attr.name);
                }
            });
        });
    };
    $.fn.attrNotStartsWith = function (regex) {
        var proxy = this;
        var attributes = [], attrs;
        this.each(function () {
            attrs = $(this.attributes).clone();
        });
        for ( var i = 0; i < attrs.length; i++) {
            if (attrs[i] && attrs[i].specified && regex.test(attrs[i].name)) {
                continue
            }
            else
                attributes.push(attrs[i])
        }
        return attributes;

    }
    $.fn.removeEleEmptyAttrs = function () {
        return this.each(function () {
            var $this = $(this),
                names = [],
                attrs = $(this.attributes).clone();
            $.each(attrs, function (i, attr) {
                if (attr && attr.specified && attr.value === "") {
                    $this.removeAttr(attr.name);
                }
            });
        });
    };
    $.extend($.support, {
        has3d: ej.addPrefix('perspective') in ej.styles,
        hasTouch: 'ontouchstart' in window,
        hasPointer: navigator.msPointerEnabled,
        hasTransform: ej.userAgent() !== false,
        pushstate: "pushState" in history &&
        "replaceState" in history,
        hasTransition: ej.addPrefix('transition') in ej.styles
    });
    //Ensuring elements having attribute starts with 'ejm-' 
    $.extend($.expr[':'], {
        attrNotStartsWith: function (element, index, match) {
            var i, attrs = element.attributes;
            for (i = 0; i < attrs.length; i++) {
                if (attrs[i].nodeName.indexOf(match[3]) === 0) {
                    return false;
                }
            }
            return true;
        }
    });
    //addBack() is supported from Jquery >1.8 and andSelf() supports later version< 1.8. support for both the method is provided by extending the JQuery function.
    var oldSelf = $.fn.andSelf || $.fn.addBack;
    $.fn.andSelf = $.fn.addBack = function () {
        return oldSelf.apply(this, arguments);
    };
})();;
;
(function($, undefined){
    
ej.globalize = {};
ej.cultures = {};

ej.cultures['default'] = ej.cultures['en-US'] = $.extend(true, {
    name: 'en-US',
    englishName: "English",
    nativeName: "English",
    language: 'en',
    isRTL: false,
    numberFormat: {
        pattern: ["-n"],
        decimals: 2,
        ',': ",",
        '.': ".",
        groupSizes: [3],
        '+': "+",
        '-': "-",
        percent: {
            pattern: ["-n %", "n %"],
            decimals: 2,
            groupSizes: [3],
            ',': ",",
            '.': ".",
            symbol: '%'
        },
        currency: {
            pattern: ["($n)", "$n"],
            decimals: 2,
            groupSizes: [3],
            ',': ",",
            '.': ".",
            symbol: '$'
        }
    },
    calendars: {
    	standard: {
	        '/': '/',
	        ':': ':',
	        firstDay: 0,
			week:{
			name:"Week",
			nameAbbr:"Wek",
			nameShort:"Wk"
			},
	        days: {
	            names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	            namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	            namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
	        },
	        months: {
	            names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
	            namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""]
	        },
	        AM: ['AM', 'am', 'AM'],
	        PM: ['PM', 'pm', 'PM'],
            twoDigitYearMax: 2029,
	        patterns: {
                d: "M/d/yyyy",
                D: "dddd, MMMM dd, yyyy",
                t: "h:mm tt",
                T: "h:mm:ss tt",
                f: "dddd, MMMM dd, yyyy h:mm tt",
                F: "dddd, MMMM dd, yyyy h:mm:ss tt",
                M: "MMMM dd",
                Y: "yyyy MMMM",
                S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss"

	        }
    	}
    }
}, ej.cultures['en-US']);

ej.cultures['en-US'].calendar = ej.cultures['en-US'].calendar || ej.cultures['en-US'].calendars.standard; 



// *************************************** Numbers ***************************************
var regexTrim = /^\s+|\s+$/g,
    regexInfinity = /^[+-]?infinity$/i,
    regexHex = /^0x[a-f0-9]+$/i,
    regexParseFloat = /^[+-]?\d*\.?\d*(e[+-]?\d+)?$/;
var charMap =  {
                '9': "[0-9 ]",
				'0': "[0-9 ]",
                'a': "[A-Za-z0-9 ]",
                'A': "[A-Za-z0-9]",
                'N': "[0-9]",
                '#': "[0-9]",
                '&': '[^\x7f]+',
                '<': "",
                '>': "",
                'C': "[A-Za-z ]",
                '?': "[A-Za-z]",
            };

function  formatMapper (format, value) {
    var mask = format || "", rules = charMap, value = value.toString(), isDecimal = value.indexOf(".") > -1 || format.indexOf(".") > -1, diff = 0, stIdx = 0, preFormat = "", escFormat = "",
		separator = format.split(","), newChar = "0", expValue, exponentIdx = format.toLowerCase().indexOf("e"), valueColl, formatColl, hashIdx = mask.indexOf("#");
	if(format.indexOf("\\") > -1) {
		escFormat = format.substr(0, format.lastIndexOf("\\") + 1);
		format = format.substr(format.lastIndexOf("\\") + 1, format.length);
		hashIdx = format.indexOf("#");
	}
	if(exponentIdx > -1) {
		var maskFirst = "", mask = "";
		formatColl = format.toLowerCase().split("e");
		expValue = format.indexOf("+") > -1 ? format.split("+")[1] : format.split("-")[1];
		value = parseInt(value).toExponential();
		valueColl = value.split("e");
		diff = formatColl[1].length - valueColl[1].length;
		for(var k = formatColl[1].length - 1; k > 0; k--) {
			if(formatColl[1][k] != "0")
				mask += formatColl[1][k];
			else if(diff > 1) {
				mask += "#";
				diff--;
			}
			else
				mask += "0";
		}
		var oprMask = (format.indexOf("+") > -1) ? "+" : "";
		mask = oprMask + mask.split("").reverse().join("");
		for(var k = 0; k < valueColl[0].length; k++)
			maskFirst = (valueColl[0][k] != ".") ? maskFirst.concat("#") : maskFirst.concat(".");
		if(maskFirst.length > formatColl[0].length)
			maskFirst = formatColl[0];
		mask = escFormat + maskFirst + "e" + mask;
	}
	else if(isDecimal) {
		formatColl = format.split(".");
		valueColl = value.split(".");
		formatColl[1] = formatColl[1].replace(/[,.]/g, "");
		diff = formatColl[0].replace(/[,.]/g, "").length - valueColl[0].replace(/[,.]/g, "").length;
		if(diff < 0 && ej.isNullOrUndefined(format.match(/[\[\(\)\]]/g))) {
			separator = formatColl[0].split(",");
			preFormat = formatColl[0].split(",")
			for(var j = separator.length - 1;j >= 0; j--) {
				if(separator[j]) {
					var cnt = separator[j].length;
					for(var k = 0, len = Math.abs(diff); k < len; k++) {
						if(cnt === 3) {
							break;
							cnt = 0;
						}
						preFormat[j] = "0" + preFormat[j];
						cnt++;
						diff++;
					}
				}
			}
			preFormat = preFormat.join();
			if(diff < 0) {
				(!ej.isNullOrUndefined(cnt) && cnt != 3) && (preFormat = "," + preFormat);
				for(var k = 0, len = Math.abs(diff); k < len; k++) {
					if(cnt === 3) {
						preFormat = "," + preFormat;
						cnt = 0;
					}
					preFormat = "0" + preFormat;
					cnt++;
				}
			}
			diff = 0;
			mask = escFormat + preFormat + "." + formatColl[1];
		}
		else if(ej.isNullOrUndefined(format.match(/[\[\(\)\]]/g))){
			preFormat = formatColl[0].replace(/[,.]/g, "");
			var postFormat = "";
			var cnt = 0;
			for(var i = preFormat.length - 1; i >= 0; i--) {
				if(cnt === 3) {
					postFormat = "," + postFormat;
					cnt = 0;
				}
				else
					cnt++;
				postFormat = preFormat[i] + postFormat;
			}
			mask = escFormat + postFormat + "." + formatColl[1];
		}
	}
	else {
		var hashCount = 0, separatorColl = separator.splice(1, separator.length);
		diff = format.replace(/[,.\[\(\]\)]/g, "").length - value.replace(/[,.]/g, "").length;
		if(hashIdx > -1) {
			for(var f = 0, len = format.length; f < len; f++)
				(format[f] === "#") && hashCount++;
			if(hashCount === 1 || (separator[1] && hashCount === 2))
				newChar = "#";
			(hashCount === 1) && (separatorColl = separator[0]);
		}
		if(diff < 0) {
			formatColl = mask.split(",");
			preFormat = formatColl.splice(1, formatColl.length);	
			for(var j = separator.length - 1;j >= 0; j--) {
				if(separatorColl[j]) {
					var cnt = separatorColl[j].length;
					!preFormat[j] && (preFormat[j] = "");
					for(var k = 0, len = Math.abs(diff) + 1; k < len; k++) {
						if(hashCount != 1 && cnt === 3) {
							cnt = 0;
							break;
						}
						preFormat[j] = preFormat[j].concat(newChar);
						cnt++;
						diff++;
					}
				}
			}
			preFormat = preFormat.join();
			if(diff < 0) {
				(!ej.isNullOrUndefined(cnt) && cnt != 3) && (preFormat = "," + preFormat);
				for(var k = 0, len = Math.abs(diff) + 1; k < len; k++) {
					if(hashCount != 1 && cnt === 3) {
						preFormat = "," + preFormat;
						cnt = 0;
					}
					preFormat = newChar + preFormat;
					cnt++;
				}
			}
			diff = 0;
			mask = escFormat + preFormat;
		}
		stIdx = 0;
	}
	var mapper = [], maskChars = mask.split(""), mapperIdx = 0, i = 0, idx = 0, chr, rule, isEscChar = false, isExp = false, escIdx = format.indexOf("\\");
    for (; i < mask.length; i++) {
        chr = maskChars[i];
		if(chr === "e")
			isExp = true;
        if((chr === "0" && hashIdx < 0)) {
			if((diff > 0 && stIdx <= i)) {
				diff--;
				stIdx++;
			}
			else if(diff > 0)
				diff--;
			else
				rule = rules[chr];
		}
		else if(chr != "0" || (!isExp && chr == "0")) 
			rule = rules[chr];
		if(chr === "0" && escIdx > -1) 
			rule = rules[chr];
		if(i === mask.lastIndexOf("\\"))
			isEscChar = false;
        if (rule && !isEscChar) {
            mapper[mapperIdx] = { rule: rule };
            mapperIdx += 1;
        } else {
            if (chr === "\\") {
                chr = "";
				!(i === mask.lastIndexOf("\\")) && (isEscChar = true);
            }
            chr = chr.split("");
            for (var j = 0; j < chr.length; j++) {
                mapper[mapperIdx] = chr[j];
                mapperIdx += 1;
            }
        }
    }
    rules = mapper;
	return {"rules": rules, "format": mask};
}

function customFormat(value, format, locale) {
	if(ej.isNullOrUndefined(value) || typeof value === "string" || !format)
		throw "Bad Number Format Exception";
	var formatLength, formatObj, formatModel, rules, orgFormat = format;
	formatObj = formatMapper(format, value);
	rules = formatObj.rules;
	format = formatObj.format;
    if (!(format.indexOf("\\") >= 0))
        formatModel = format.replace(/[9?CANa#&]/g, '_');
    else {
		var escIdx = format.lastIndexOf("\\"), first = format.slice(0, escIdx), second = format.slice(escIdx + 1, format.length), altFormat;
		second = second.replace(/[9?CANa#&]/g, '_');
		altFormat = first + second;
        formatModel = altFormat.replace(/[\\]/g, "");
		format = format.replace(/[\\]/g, "");
	}
    formatModel = changeCulture(formatModel, locale);
    return validateValue(value, format, formatModel, rules, locale, orgFormat);
}

function changeCulture(formatModel, locale) {
	if (formatModel.length != 0) {
        var preferredlocale = ej.preferredCulture(locale), groupSep, currecySymbol, decimalSep,unmask = "";
        groupSep = preferredlocale.numberFormat[','];
        currecySymbol = preferredlocale.numberFormat.currency.symbol;
        decimalSep = preferredlocale.numberFormat['.'];
        for (var i = 0; i < formatModel.length; i++) {
            if (formatModel[i] == ",")
                unmask += groupSep;
            else if (formatModel[i] == ".")
                unmask += decimalSep;
            else if (formatModel[i] == "$")
                unmask += currecySymbol;
            else
                unmask += formatModel[i];
        }
        formatModel = unmask;
    }
	return formatModel;
}

function validateValue(value, format, formatModel, rules, locale, orgFormat) {
	if(ej.isNullOrUndefined(value))
		return;
	if(format.toLowerCase().indexOf("e") > -1) {
		var expValue = orgFormat.indexOf("+") > -1 ? orgFormat.split("+")[1] : orgFormat.split("-")[1];
		value = value.toExponential();
		(orgFormat.indexOf("-") > -1) && (value = value.replace("+", "")); 
    }
    var oldvalue, replacestring, i, tvalue;
	var tempValue = oldvalue = replacestring = value.toString(), tempModel = formatModel, maskIndex = i = 0, chr, prompt = "_", rule,
		strBefore, strAfter, charValue, isBracket = format.match(/[\(\[\]\)]/g);
    if (!format.indexOf("\\") >= 0)
        tempValue = value = replacestring.replace(/[\(\)-]/g, "");
    else
        tempValue = tvalue;
	var j = rules.length - 1;
	var v = oldvalue.length - 1;
	if(!ej.isNullOrUndefined(isBracket)) {
		while (j >= 0) {
			chr = oldvalue[v];
			rule = rules[j];
			if (chr == undefined) break;
			if (chr === rule || chr === prompt || (chr === "e" && (chr === rule.toLowerCase()))) {
				chr === prompt ? prompt : "";
				strBefore = tempModel.substring(0, j+1);
				strAfter = tempModel.substring(j+1);
				chr = changeCulture(chr, locale);
				tempModel = strBefore.substr(0, strBefore.length - 1)  + chr + strAfter;
				j--;
				v--;
			}
			else if (rules[j].rule != undefined ) {
				var charCode = oldvalue.charCodeAt(v);
				if (validateChars(format, charCode, j)) {
					strBefore = tempModel.substring(0, j +1);
					strAfter = tempModel.substring(j+1);
					charValue = getRoundValue(oldvalue, v, j, format, formatModel);
					tempModel = strBefore.substr(0, strBefore.length - 1) + charValue + strAfter;
					j--;
					v--;
				} else 
					j--;
			} 
			else
				j--;
			if (i > tempValue.length || j<0) break;
		}
	}
	else {
		while (maskIndex < rules.length) {
			chr = oldvalue[i];
			rule = rules[maskIndex];
			if (chr == undefined) break;
			if (chr === rule || chr === prompt || (chr === "e" && (chr === rule.toLowerCase()))) {
				chr === prompt ? prompt : "";
				strBefore = tempModel.substring(0, maskIndex);
				strAfter = tempModel.substring(maskIndex);
				chr = changeCulture(chr, locale);
				tempModel = strBefore + chr + strAfter.substr(1, strAfter.length);
				i += 1;
				maskIndex += 1;
			}
			else if (rules[maskIndex].rule != undefined ) {
				var charCode = oldvalue.charCodeAt(i);
				if (validateChars(format, charCode, maskIndex)) {
					strBefore = tempModel.substring(0, maskIndex);
					strAfter = tempModel.substring(maskIndex);
					charValue = getRoundValue(oldvalue, i, maskIndex, format, formatModel);
					tempModel = strBefore + charValue + strAfter.substr(1, strAfter.length);
					maskIndex++;
					i++;
				} else
					maskIndex++;
			} 
			else {
				if(rule === "e")
					i = oldvalue.indexOf("e") + 1;
				maskIndex++;
			}
			if (i > tempValue.length || j<0) break;
		}
	}
    if (value) {
		if((tempModel.indexOf("_") - tempModel.indexOf(",") === 1) || (tempModel.indexOf("_") - tempModel.indexOf(".") === 1))
			tempModel = tempModel.slice(0, tempModel.indexOf("_")-1);
        var strippedValue = $.trim(tempModel.replace(/[_]/g, "")) == "" ? null : tempModel.replace(/[_]/g, "");
		return strippedValue;
	}
}

function validateChars (format, keyChar, caretPos){
	var charmap = charMap, match = false, maskChar = format.substr(caretPos, 1), actualkey = String.fromCharCode(keyChar);
    $.each(charmap, function (key, value) {
        if (maskChar == key) {
            if (actualkey.match(new RegExp(value))) match = true;
                else match = false;
        }
    });
    return match;
}

function getRoundValue(value, valIdx, maskIndex, format, formatModel) {
	var isCeil = false;
	if(format.indexOf(".") > -1 && (maskIndex === formatModel.length - 1))
		(value[valIdx + 1] > 5) && (isCeil = true);
	return (isCeil ? (parseInt(value[valIdx]) + 1).toString() : value[valIdx]);
}

function patternStartsWith(value, pattern) {
    return value.indexOf( pattern ) === 0;
}

function patternEndsWith(value, pattern) {
    return value.substr( value.length - pattern.length ) === pattern;
}

function trim(value) {
    return (value+"").replace( regexTrim, "" );
}

function truncate(value){
    if(isNaN(value))
        return NaN;
    
    return Math[value < 0 ? "ceil" : "floor"](value);
}

function padWithZero(str, count, left) {
    for (var l = str.length; l < count; l++) {
        str = (left ? ('0' + str) : (str + '0'));
    }
    return str;
}

function parseNumberWithNegativePattern(value, nf, negativePattern) {
    var neg = nf["-"],
        pos = nf["+"],
        ret;
    switch (negativePattern) {
        case "n -":
            neg = ' ' + neg;
            pos = ' ' + pos;
            // fall through
        case "n-":
            if ( patternEndsWith( value, neg ) ) {
                ret = [ '-', value.substr( 0, value.length - neg.length ) ];
            }
            else if ( patternEndsWith( value, pos ) ) {
                ret = [ '+', value.substr( 0, value.length - pos.length ) ];
            }
            break;
        case "- n":
            neg += ' ';
            pos += ' ';
            // fall through
        case "-n":
            if ( patternStartsWith( value, neg ) ) {
                ret = [ '-', value.substr( neg.length ) ];
            }
            else if ( patternStartsWith(value, pos) ) {
                ret = [ '+', value.substr( pos.length ) ];
            }
            break;
        case "(n)":
            if ( patternStartsWith( value, '(' ) && patternEndsWith( value, ')' ) ) {
                ret = [ '-', value.substr( 1, value.length - 2 ) ];
            }
            break;
    }
    return ret || [ '', value ];
}

function getFullNumber(number, precision, formatInfo) {
    var groupSizes = formatInfo.groupSizes || [3],
        curSize = groupSizes[0],
        curGroupIndex = 1,
        rounded = ej._round(number, precision);
    if (!isFinite(rounded)) {
        rounded = number;
    }
    number = rounded;

    var numberString = number + "",
        right = "",
        split = numberString.split(/e/i),
        exponent = split.length > 1 ? parseInt(split[1], 10) : 0;
    numberString = split[0];
    split = numberString.split(".");
    numberString = split[0];
    right = split.length > 1 ? split[1] : "";

    var l;
    if (exponent > 0) {
        right = padWithZero(right, exponent, false);
        numberString += right.slice(0, exponent);
        right = right.substr(exponent);
    } else if (exponent < 0) {
        exponent = -exponent;
        numberString = padWithZero(numberString, exponent + 1, true);
        right = numberString.slice(-exponent, numberString.length) + right;
        numberString = numberString.slice(0, -exponent);
    }

    var dot = formatInfo['.'] || '.';
    if (precision > 0) {
        right = dot +
            ((right.length > precision) ? right.slice(0, precision) : padWithZero(right, precision));
    } else {
        right = "";
    }

    var stringIndex = numberString.length - 1,
        sep = formatInfo[","] || ',',
        ret = "";

    while (stringIndex >= 0) {
        if (curSize === 0 || curSize > stringIndex) {
            return numberString.slice(0, stringIndex + 1) + (ret.length ? (sep + ret + right) : right);
        }
        ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1) + (ret.length ? (sep + ret) : "");

        stringIndex -= curSize;

        if (curGroupIndex < groupSizes.length) {
            curSize = groupSizes[curGroupIndex];
            curGroupIndex++;
        }
    }
    return numberString.slice(0, stringIndex + 1) + sep + ret + right;
}

function formatNumberToCulture(value, format, culture) {
    if (!format || format === 'i') {
        return culture.name.length ? value.toLocaleString() : value.toString();
    }
    format = format || "D";

    var nf = culture.numberFormat,
        number = Math.abs(value),
        precision = -1,
        pattern;

    if (format.length > 1) precision = parseInt(format.slice(1), 10);

    var current = format.charAt(0).toUpperCase(),
        formatInfo;

    switch (current) {
        case 'D':
            pattern = 'n';
            number = truncate(number);
            if (precision !== -1) {
                number = padWithZero("" + number, precision, true);
            }
            if (value < 0) number = -number;
            break;
        case 'N':
            formatInfo = nf;
            formatInfo.pattern = formatInfo.pattern || ['-n'];
            // fall through
        case 'C':
            formatInfo = formatInfo || nf.currency;
            formatInfo.pattern = formatInfo.pattern || ['-$n', '$n'];
            // fall through
        case 'P':
            formatInfo = formatInfo || nf.percent;
            formatInfo.pattern = formatInfo.pattern || ['-n %', 'n %'];
            pattern = value < 0 ? (formatInfo.pattern[0] || "-n") : (formatInfo.pattern[1] || "n");
            if (precision === -1) precision = formatInfo.decimals;
            number = getFullNumber(number * (current === "P" ? 100 : 1), precision, formatInfo);
            break;
        default:
			return customFormat(value, format, culture);
    }

    return matchNumberToPattern(number, pattern, nf);
}



function matchNumberToPattern(number, pattern, nf){
    var patternParts = /n|\$|-|%/g,
        ret = "";
    for (;;) {
        var index = patternParts.lastIndex,
            ar = patternParts.exec(pattern);

        ret += pattern.slice(index, ar ? ar.index : pattern.length);

        if (!ar) {
            break;
        }

        switch (ar[0]) {
            case "n":
                ret += number;
                break;
            case "$":
                ret += nf.currency.symbol || "$";
                break;
            case "-":
                // don't make 0 negative
                if (/[1-9]/.test(number)) {
                    ret += nf["-"] || "-";
                }
                break;
            case "%":
                ret += nf.percent.symbol || "%";
                break;
        }
    }

    return ret;
}

function parseValue(value, culture, radix ) {
		// make radix optional
    if (typeof radix === "string") {
        culture = radix;
        radix = 10;
    }
    culture = ej.globalize.findCulture(culture);
    var ret = NaN, nf = culture.numberFormat, npattern = culture.numberFormat.pattern[0];
    value = value.replace(/ /g, '');
    if (value.indexOf(culture.numberFormat.currency.symbol) > -1) {
        // remove currency symbol
        value = value.replace(culture.numberFormat.currency.symbol || "$", "");
        // replace decimal seperator
        value = value.replace(culture.numberFormat.currency["."] || ".", culture.numberFormat["."] || ".");
        // pattern of the currency
        npattern = trim(culture.numberFormat.currency.pattern[0].replace("$", ""));
    } else if (value.indexOf(culture.numberFormat.percent.symbol) > -1) {
        // remove percentage symbol
        value = value.replace(culture.numberFormat.percent.symbol || "%", "");
        // replace decimal seperator
        value = value.replace(culture.numberFormat.percent["."] || ".", culture.numberFormat["."] || ".");
        // pattern of the percent
        npattern = trim(culture.numberFormat.percent.pattern[0].replace("%", ""));
    }

    // trim leading and trailing whitespace
    value = trim( value );

    // allow infinity or hexidecimal
    if (regexInfinity.test(value)) {
        ret = parseFloat(value, "" ,radix);
    }
    else if (regexHex.test(value)) {
        ret = parseInt(value, 16);
    }
    else {
        var signInfo = parseNumberWithNegativePattern( value, nf, npattern ),
            sign = signInfo[0],
            num = signInfo[1];
        // determine sign and number
        if ( sign === "" && nf.pattern[0] !== "-n" ) {
            signInfo = parseNumberWithNegativePattern( value, nf, "-n" );
            sign = signInfo[0];
            num = signInfo[1];
        }
        sign = sign || "+";
        // determine exponent and number
        var exponent,
            intAndFraction,
            exponentPos = num.indexOf( 'e' );
        if ( exponentPos < 0 ) exponentPos = num.indexOf( 'E' );
        if ( exponentPos < 0 ) {
            intAndFraction = num;
            exponent = null;
        }
        else {
            intAndFraction = num.substr( 0, exponentPos );
            exponent = num.substr( exponentPos + 1 );
        }
        // determine decimal position
        var integer,
            fraction,
            decSep = nf['.'] || '.',
            decimalPos = intAndFraction.indexOf( decSep );
        if ( decimalPos < 0 ) {
            integer = intAndFraction;
            fraction = null;
        }
        else {
            integer = intAndFraction.substr( 0, decimalPos );
            fraction = intAndFraction.substr( decimalPos + decSep.length );
        }
        // handle groups (e.g. 1,000,000)
        var groupSep = nf[","] || ",";
        integer = integer.split(groupSep).join('');
        var altGroupSep = groupSep.replace(/\u00A0/g, " ");
        if ( groupSep !== altGroupSep ) {
            integer = integer.split(altGroupSep).join('');
        }
        // build a natively parsable number string
        var p = sign + integer;
        if ( fraction !== null ) {
            p += '.' + fraction;
        }
        if ( exponent !== null ) {
            // exponent itself may have a number patternd
            var expSignInfo = parseNumberWithNegativePattern( exponent, nf, npattern );
            p += 'e' + (expSignInfo[0] || "+") + expSignInfo[1];
        }
        if ( !radix && regexParseFloat.test( p ) ) {
            ret = parseFloat( p );
        }
		else if(radix)
			ret = parseInt(p, radix);
    }
    return ret;
}

// *************************************** Dates ***************************************

var dateFormat = {
    DAY_OF_WEEK_THREE_LETTER : "ddd",
    DAY_OF_WEEK_FULL_NAME : "dddd",
    DAY_OF_MONTH_SINGLE_DIGIT : "d",
    DAY_OF_MONTH_DOUBLE_DIGIT : "dd",
    MONTH_THREE_LETTER : "MMM",
    MONTH_FULL_NAME : "MMMM",
    MONTH_SINGLE_DIGIT : "M",
    MONTH_DOUBLE_DIGIT : "MM",
    YEAR_SINGLE_DIGIT : "y",
    YEAR_DOUBLE_DIGIT : "yy",
    YEAR_FULL : "yyyy",
    HOURS_SINGLE_DIGIT_12_HOUR_CLOCK : "h",
    HOURS_DOUBLE_DIGIT_12_HOUR_CLOCK : "hh",
    HOURS_SINGLE_DIGIT_24_HOUR_CLOCK : "H",
    HOURS_DOUBLE_DIGIT_24_HOUR_CLOCK : "HH",
    MINUTES_SINGLE_DIGIT : "m",
    MINUTES_DOUBLE_DIGIT : "mm",
    SECONDS_SINGLE_DIGIT : "s",
    SECONDS_DOUBLE_DIGIT : "ss",
    MERIDIAN_INDICATOR_SINGLE : "t",
    MERIDIAN_INDICATOR_FULL : "tt",
    DECISECONDS : "f",
    CENTISECONDS: "ff",
    MILLISECONDS : "fff",
    TIME_ZONE_OFFSET_SINGLE_DIGIT : "z",
    TIME_ZONE_OFFSET_DOUBLE_DIGIT : "zz",
    TIME_ZONE_OFFSET_FULL : "zzz",
    DATE_SEPARATOR : "/"
};

function valueOutOfRange(value, low, high) {
    return value < low || value > high;
}

function expandYear(cal, year) {
    // expands 2-digit year into 4 digits.
    var now = new Date();
    if ( year < 100 ) {
        var twoDigitYearMax = cal.twoDigitYearMax;
        twoDigitYearMax = typeof twoDigitYearMax === 'string' ? new Date().getFullYear() % 100 + parseInt( twoDigitYearMax, 10 ) : twoDigitYearMax;
        var curr = now.getFullYear();
        year += curr - ( curr % 100 );
        if ( year > twoDigitYearMax ) {
            year -= 100;
        }
    }
    return year;
}

function arrayIndexOf( array, item ) {
    if ( array.indexOf ) {
        return array.indexOf( item );
    }
    for ( var i = 0, length = array.length; i < length; i++ ) {
        if ( array[ i ] === item ) return i;
    }
    return -1;
}

function toUpper(value) {
    // 'he-IL' has non-breaking space in weekday names.
    return value.split( "\u00A0" ).join(' ').toUpperCase();
}

function toUpperArray(arr) {
    var results = [];
    for ( var i = 0, l = arr.length; i < l; i++ ) {
        results[i] = toUpper(arr[i]);
    }
    return results;
}

function getIndexOfDay(cal, value, abbr) {
    var ret,
        days = cal.days,
        upperDays = cal._upperDays;
    if ( !upperDays ) {
        cal._upperDays = upperDays = [
            toUpperArray( days.names ),
            toUpperArray( days.namesAbbr ),
            toUpperArray( days.namesShort )
        ];
    }
    value = toUpper( value );
    if ( abbr ) {
        ret = arrayIndexOf( upperDays[ 1 ], value );
        if ( ret === -1 ) {
            ret = arrayIndexOf( upperDays[ 2 ], value );
        }
    }
    else {
        ret = arrayIndexOf( upperDays[ 0 ], value );
    }
    return ret;
}

function getIndexOfMonth(cal, value, abbr) {
    var months = cal.months,
        monthsGen = cal.monthsGenitive || cal.months,
        upperMonths = cal._upperMonths,
        upperMonthsGen = cal._upperMonthsGen;
    if ( !upperMonths ) {
        cal._upperMonths = upperMonths = [
            toUpperArray( months.names ),
            toUpperArray( months.namesAbbr )
        ];
        cal._upperMonthsGen = upperMonthsGen = [
            toUpperArray( monthsGen.names ),
            toUpperArray( monthsGen.namesAbbr )
        ];
    }
    value = toUpper( value );
    var i = arrayIndexOf( abbr ? upperMonths[ 1 ] : upperMonths[ 0 ], value );
    if ( i < 0 ) {
        i = arrayIndexOf( abbr ? upperMonthsGen[ 1 ] : upperMonthsGen[ 0 ], value );
    }
    return i;
}

function appendMatchStringCount(preMatch, strings) {
    var quoteCount = 0,
        escaped = false;
    for ( var i = 0, il = preMatch.length; i < il; i++ ) {
        var c = preMatch.charAt( i );
        if(c == '\''){
            escaped ? strings.push( "'" ) : quoteCount++;
            escaped = false;
        } else if( c == '\\'){
            if (escaped) strings.push( "\\" );
            escaped = !escaped;
        } else {
            strings.push( c );
            escaped = false;
        }
    }
    return quoteCount;
}


function parseDayByInt(value, format, culture, cal) {
    if (!value) {
        return null;
    }
    var index = 0, valueX = 0, day = null;
    format = format.split("");
    var length = format.length;
    var countDays = function (match) {
        var i = 0;
        while (format[index] === match) {
            i++;
            index++;
        }
        if (i > 0) {
            index -= 1;
        }
        return i;
    },
    getNumber = function (size) {
        var rg = new RegExp('^\\d{1,' + size + '}'),
            match = value.substr(valueX, size).match(rg);

        if (match) {
            match = match[0];
            valueX += match.length;
            return parseInt(match, 10);
        }
        return null;
    },
    getName = function (names, lower) {
        var i = 0,
            length = names.length,
            name, nameLength,
            subValue;

        for (; i < length; i++) {
            name = names[i];
            nameLength = name.length;
            subValue = value.substr(valueX, nameLength);

            if (lower) {
                subValue = subValue.toLowerCase();
            }

            if (subValue == name) {
                valueX += nameLength;
                return i + 1;
            }
        }
        return null;
    },
     lowerArray = function (data) {
         var index = 0,
             length = data.length,
             array = [];

         for (; index < length; index++) {
             array[index] = (data[index] + "").toLowerCase();
         }

         return array;
     },
     lowerInfo = function (localInfo) {
         var newLocalInfo = {}, property;

         for (property in localInfo) {
             newLocalInfo[property] = lowerArray(localInfo[property]);
         }

         return newLocalInfo;
     };
    for (; index < length; index++) {
        var ch = format[index];
        if (ch === "d") {
            var count = countDays("d");
            if (!cal._lowerDays) {
                cal._lowerDays = lowerInfo(cal.days);
            }
            day = count < 3 ? getNumber(2) : getName(cal._lowerDays[count == 3 ? "namesAbbr" : "names"], true)
        }
    }
    return day;
}


function getFullDateFormat(cal, format) {
    // expands unspecified or single character date formats into the full pattern.
    format = format || "F";
    var pattern,
        patterns = cal.patterns,
        len = format.length;
    if ( len === 1 ) {
        pattern = patterns[ format ];
        if ( !pattern ) {
            throw "Invalid date format string '" + format + "'.";
        }
        format = pattern;
    }
    else if ( len === 2  && format.charAt(0) === "%" ) {
        // %X escape format -- intended as a custom format string that is only one character, not a built-in format.
        format = format.charAt( 1 );
    }
    return format;
}

ej.globalize._getDateParseRegExp = function (cal, format) {
    // converts a format string into a regular expression with groups that
    // can be used to extract date fields from a date string.
    // check for a cached parse regex.
    var re = cal._parseRegExp;
    if ( !re ) {
        cal._parseRegExp = re = {};
    }
    else {
        var reFormat = re[ format ];
        if ( reFormat ) {
            return reFormat;
        }
    }

    // expand single digit formats, then escape regular expression characters.
    var expFormat = getFullDateFormat( cal, format ).replace( /([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1" ),
        regexp = ["^"],
        groups = [],
        index = 0,
        quoteCount = 0,
        tokenRegExp = /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g,
        match;

    // iterate through each date token found.
    while ( (match = tokenRegExp.exec( expFormat )) !== null ) {
        var preMatch = expFormat.slice( index, match.index );
        index = tokenRegExp.lastIndex;

        // don't replace any matches that occur inside a string literal.
        quoteCount += appendMatchStringCount( preMatch, regexp );
        if ( quoteCount % 2 ) {
            regexp.push( match[ 0 ] );
            continue;
        }

        // add a regex group for the token.
        var m = match[ 0 ],
            len = m.length,
            add;
            
        switch ( m ) {
            case dateFormat.DAY_OF_WEEK_THREE_LETTER: case dateFormat.DAY_OF_WEEK_FULL_NAME:
            case dateFormat.MONTH_FULL_NAME: case dateFormat.MONTH_THREE_LETTER:
                add = "(\\D+)";
                break;
            case dateFormat.MERIDIAN_INDICATOR_FULL: case dateFormat.MERIDIAN_INDICATOR_SINGLE:
                add = "(\\D*)";
                break;
            case dateFormat.YEAR_FULL:
            case dateFormat.MILLISECONDS:
            case dateFormat.CENTISECONDS:
            case dateFormat.DECISECONDS:
                add = "(\\d{" + len + "})";
                break;
            case dateFormat.DAY_OF_MONTH_DOUBLE_DIGIT: case dateFormat.DAY_OF_MONTH_SINGLE_DIGIT:
            case dateFormat.MONTH_DOUBLE_DIGIT: case dateFormat.MONTH_SINGLE_DIGIT:
            case dateFormat.YEAR_DOUBLE_DIGIT: case dateFormat.YEAR_SINGLE_DIGIT:
            case dateFormat.HOURS_DOUBLE_DIGIT_24_HOUR_CLOCK: case dateFormat.HOURS_SINGLE_DIGIT_24_HOUR_CLOCK:
            case dateFormat.HOURS_DOUBLE_DIGIT_12_HOUR_CLOCK: case dateFormat.HOURS_SINGLE_DIGIT_12_HOUR_CLOCK:
            case dateFormat.MINUTES_DOUBLE_DIGIT: case dateFormat.MINUTES_SINGLE_DIGIT:
            case dateFormat.SECONDS_DOUBLE_DIGIT: case dateFormat.SECONDS_SINGLE_DIGIT:
                add = "(\\d\\d?)";
                break;
            case dateFormat.TIME_ZONE_OFFSET_FULL:
                add = "([+-]?\\d\\d?:\\d{2})";
                break;
            case dateFormat.TIME_ZONE_OFFSET_DOUBLE_DIGIT: case dateFormat.TIME_ZONE_OFFSET_SINGLE_DIGIT:
                add = "([+-]?\\d\\d?)";
                break;
            case dateFormat.DATE_SEPARATOR:
                add = "(\\" + cal["/"] + ")";
                break;
            default:
                throw "Invalid date format pattern '" + m + "'.";
                break;
        }
        if ( add ) {
            regexp.push( add );
        }
        groups.push( match[ 0 ] );
    }
    appendMatchStringCount( expFormat.slice( index ), regexp );
    regexp.push( "$" );

    // allow whitespace to differ when matching formats.
    var regexpStr = regexp.join( '' ).replace( /\s+/g, "\\s+" ),
        parseRegExp = {'regExp': regexpStr, 'groups': groups};

    // cache the regex for this format.
    return re[ format ] = parseRegExp;
}

function getParsedDate(value, format, culture) {
    // try to parse the date string by matching against the format string
    // while using the specified culture for date field names.
    value = trim( value );
    format = trim(format);
    var cal = culture.calendar,
        // convert date formats into regular expressions with groupings.
        parseInfo = ej.globalize._getDateParseRegExp(cal, format),
        match = new RegExp(parseInfo.regExp).exec(value);
    if (match === null) {
        return null;
    }
    // found a date format that matches the input.
    var groups = parseInfo.groups,
        year = null, month = null, date = null, weekDay = null,
        hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null,
        pmHour = false;
    // iterate the format groups to extract and set the date fields.
    for ( var j = 0, jl = groups.length; j < jl; j++ ) {
        var matchGroup = match[ j + 1 ];
        if ( matchGroup ) {
            var current = groups[ j ],
                clength = current.length,
                matchInt = parseInt( matchGroup, 10 );
            
            switch ( current ) {
                case dateFormat.DAY_OF_MONTH_DOUBLE_DIGIT: case dateFormat.DAY_OF_MONTH_SINGLE_DIGIT:
                    date = matchInt;
                    if ( valueOutOfRange( date, 1, 31 ) ) return null;
                    break;
                case dateFormat.MONTH_THREE_LETTER:
                case dateFormat.MONTH_FULL_NAME:
                    month = getIndexOfMonth( cal, matchGroup, clength === 3 );
                    if ( valueOutOfRange( month, 0, 11 ) ) return null;
                    break;
                case dateFormat.MONTH_SINGLE_DIGIT: case dateFormat.MONTH_DOUBLE_DIGIT:
                    month = matchInt - 1;
                    if ( valueOutOfRange( month, 0, 11 ) ) return null;
                    break;
                case dateFormat.YEAR_SINGLE_DIGIT: case dateFormat.YEAR_DOUBLE_DIGIT:
                case dateFormat.YEAR_FULL:
                    year = clength < 4 ? expandYear( cal, matchInt ) : matchInt;
                    if ( valueOutOfRange( year, 0, 9999 ) ) return null;
                    break;
                case dateFormat.HOURS_SINGLE_DIGIT_12_HOUR_CLOCK: case dateFormat.HOURS_DOUBLE_DIGIT_12_HOUR_CLOCK:
                    hour = matchInt;
                    if ( hour === 12 ) hour = 0;
                    if ( valueOutOfRange( hour, 0, 11 ) ) return null;
                    break;
                case dateFormat.HOURS_SINGLE_DIGIT_24_HOUR_CLOCK: case dateFormat.HOURS_DOUBLE_DIGIT_24_HOUR_CLOCK:
                    hour = matchInt;
                    if ( valueOutOfRange( hour, 0, 23 ) ) return null;
                    break;
                case dateFormat.MINUTES_SINGLE_DIGIT: case dateFormat.MINUTES_DOUBLE_DIGIT:
                    min = matchInt;
                    if ( valueOutOfRange( min, 0, 59 ) ) return null;
                    break;
                case dateFormat.SECONDS_SINGLE_DIGIT: case dateFormat.SECONDS_DOUBLE_DIGIT:
                    sec = matchInt;
                    if ( valueOutOfRange( sec, 0, 59 ) ) return null;
                    break;
                case dateFormat.MERIDIAN_INDICATOR_FULL: case dateFormat.MERIDIAN_INDICATOR_SINGLE:
                    pmHour = cal.PM && ( matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2] );
                    if ( !pmHour && ( !cal.AM || (matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2]) ) ) return null;
                    break;
                case dateFormat.DECISECONDS:
                case dateFormat.CENTISECONDS:
                case dateFormat.MILLISECONDS:
                    msec = matchInt * Math.pow( 10, 3-clength );
                    if ( valueOutOfRange( msec, 0, 999 ) ) return null;
                    break;
                case dateFormat.DAY_OF_WEEK_THREE_LETTER:
                    date = parseDayByInt(value, format, culture, cal);
                    break;
                case dateFormat.DAY_OF_WEEK_FULL_NAME:
                     getIndexOfDay( cal, matchGroup, clength === 3 );
                    if ( valueOutOfRange( weekDay, 0, 6 ) ) return null;
                    break;
                case dateFormat.TIME_ZONE_OFFSET_FULL:
                    var offsets = matchGroup.split( /:/ );
                    if ( offsets.length !== 2 ) return null;

                    hourOffset = parseInt( offsets[ 0 ], 10 );
                    if ( valueOutOfRange( hourOffset, -12, 13 ) ) return null;
                    
                    var minOffset = parseInt( offsets[ 1 ], 10 );
                    if ( valueOutOfRange( minOffset, 0, 59 ) ) return null;
                    
                    tzMinOffset = (hourOffset * 60) + (patternStartsWith( matchGroup, '-' ) ? -minOffset : minOffset);
                    break;
                case dateFormat.TIME_ZONE_OFFSET_SINGLE_DIGIT: case dateFormat.TIME_ZONE_OFFSET_DOUBLE_DIGIT:
                    // Time zone offset in +/- hours.
                    hourOffset = matchInt;
                    if ( valueOutOfRange( hourOffset, -12, 13 ) ) return null;
                    tzMinOffset = hourOffset * 60;
                    break;
            }
        }
    }
    var result = new Date(), defaultYear, convert = cal.convert;
    defaultYear = convert ? convert.fromGregorian( result )[ 0 ] : result.getFullYear();
    if ( year === null ) {
        year = defaultYear;
    }
    
    // set default day and month to 1 and January, so if unspecified, these are the defaults
    // instead of the current day/month.
    if ( month === null ) {
        month = 0;
    }
    if ( date === null ) {
        date = 1;
    }
    // now have year, month, and date, but in the culture's calendar.
    if ( convert ) {
        result = convert.toGregorian( year, month, date );
        if ( result === null ) return null;
    }
    else {
        // have to set year, month and date together to avoid overflow based on current date.
        result.setFullYear( year, month, date );
        // check to see if date overflowed for specified month (only checked 1-31 above).
        if ( result.getDate() !== date ) return null;
        // invalid day of week.
        if ( weekDay !== null && result.getDay() !== weekDay ) {
            return null;
        }
    }
    // if pm designator token was found make sure the hours fit the 24-hour clock.
    if ( pmHour && hour < 12 ) {
        hour += 12;
    }
    result.setHours( hour, min, sec, msec );
    if ( tzMinOffset !== null ) {
        var adjustedMin = result.getMinutes() - ( tzMinOffset + result.getTimezoneOffset() );
        result.setHours( result.getHours() + parseInt( adjustedMin / 60, 10 ), adjustedMin % 60 );
    }
    return result;
}


function formatDateToCulture(value, format, culture) {
    var cal = culture.calendar,
        convert = cal.convert;
    if ( !format || !format.length || format === 'i' ) {
        var ret;
        if ( culture && culture.name.length ) {
            if ( convert ) {
                // non-gregorian calendar, so we cannot use built-in toLocaleString()
                ret = formatDateToCulture( value, cal.patterns.F, culture );
            }
            else {
                ret = value.toLocaleString();
            }
        }
        else {
            ret = value.toString();
        }
        return ret;
    }

    var sortable = format === "s";
        format = getFullDateFormat(cal, format);


    // Start with an empty string
    ret = [];
    var hour,
        zeros = ['0','00','000'],
        foundDay,
        checkedDay,
        dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g,
        quoteCount = 0,
        tokenRegExp = /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g,
        converted;

    function padWithZeros(num, c) {
        var r, s = num+'';
        if ( c > 1 && s.length < c ) {
            r = ( zeros[ c - 2 ] + s);
            return r.substr( r.length - c, c );
        }
        else {
            r = s;
        }
        return r;
    }

    function hasDay() {
        if ( foundDay || checkedDay ) {
            return foundDay;
        }
        foundDay = dayPartRegExp.test( format );
        checkedDay = true;
        return foundDay;
    }

    if ( !sortable && convert ) {
        converted = convert.fromGregorian( value );
    }

    for (;;) {
        // Save the current index
        var index = tokenRegExp.lastIndex,
            // Look for the next pattern
            ar = tokenRegExp.exec( format );

        // Append the text before the pattern (or the end of the string if not found)
        var preMatch = format.slice( index, ar ? ar.index : format.length );
        quoteCount += appendMatchStringCount( preMatch, ret );

        if ( !ar ) {
            break;
        }

        // do not replace any matches that occur inside a string literal.
        if ( quoteCount % 2 ) {
            ret.push( ar[ 0 ] );
            continue;
        }

        var current = ar[ 0 ],
            clength = current.length;


        switch ( current ) {
            case dateFormat.DAY_OF_WEEK_THREE_LETTER:
            case dateFormat.DAY_OF_WEEK_FULL_NAME:
                var names = (clength === 3) ? cal.days.namesAbbr : cal.days.names;
                ret.push( names[ value.getDay() ] );
                break;
            case dateFormat.DAY_OF_MONTH_SINGLE_DIGIT:
            case dateFormat.DAY_OF_MONTH_DOUBLE_DIGIT:
                foundDay = true;
                ret.push( padWithZeros( (converted ? converted[2] : value.getDate()), clength ) );
                break;
            case dateFormat.MONTH_THREE_LETTER:
            case dateFormat.MONTH_FULL_NAME:
                var part = converted ? converted[1] : value.getMonth();
                ret.push( (cal.monthsGenitive && hasDay())
                    ? cal.monthsGenitive[ clength === 3 ? "namesAbbr" : "names" ][ part ]
                    : cal.months[ clength === 3 ? "namesAbbr" : "names" ][ part ] );
                break;
            case dateFormat.MONTH_SINGLE_DIGIT:
            case dateFormat.MONTH_DOUBLE_DIGIT:
                ret.push( padWithZeros((converted ? converted[1] : value.getMonth()) + 1, clength ) );
                break;
            case dateFormat.YEAR_SINGLE_DIGIT:
            case dateFormat.YEAR_DOUBLE_DIGIT:
            case dateFormat.YEAR_FULL:
                part = converted ? converted[ 0 ] : value.getFullYear();
                if ( clength < 4 ) {
                    part = part % 100;
                }
                ret.push( padWithZeros( part, clength ) );
                break;
            case dateFormat.HOURS_SINGLE_DIGIT_12_HOUR_CLOCK:
            case dateFormat.HOURS_DOUBLE_DIGIT_12_HOUR_CLOCK:
                hour = value.getHours() % 12;
                if ( hour === 0 ) hour = 12;
                ret.push( padWithZeros( hour, clength ) );
                break;
            case dateFormat.HOURS_SINGLE_DIGIT_24_HOUR_CLOCK:
            case dateFormat.HOURS_DOUBLE_DIGIT_24_HOUR_CLOCK:
                ret.push( padWithZeros( value.getHours(), clength ) );
                break;
            case dateFormat.MINUTES_SINGLE_DIGIT:
            case dateFormat.MINUTES_DOUBLE_DIGIT:
                ret.push( padWithZeros( value.getMinutes(), clength ) );
                break;
            case dateFormat.SECONDS_SINGLE_DIGIT:
            case dateFormat.SECONDS_DOUBLE_DIGIT:
                ret.push( padWithZeros(value .getSeconds(), clength ) );
                break;
            case dateFormat.MERIDIAN_INDICATOR_SINGLE:
            case dateFormat.MERIDIAN_INDICATOR_FULL:
                part = value.getHours() < 12 ? (cal.AM ? cal.AM[0] : " ") : (cal.PM ? cal.PM[0] : " ");
                ret.push( clength === 1 ? part.charAt( 0 ) : part );
                break;
            case dateFormat.DECISECONDS:
            case dateFormat.CENTISECONDS:
            case dateFormat.MILLISECONDS:
                ret.push( padWithZeros( value.getMilliseconds(), 3 ).substr( 0, clength ) );
                break;
            case dateFormat.TIME_ZONE_OFFSET_SINGLE_DIGIT:
            case dateFormat.TIME_ZONE_OFFSET_DOUBLE_DIGIT:
                hour = value.getTimezoneOffset() / 60;
                ret.push( (hour <= 0 ? '+' : '-') + padWithZeros( Math.floor( Math.abs( hour ) ), clength ) );
                break;
            case dateFormat.TIME_ZONE_OFFSET_FULL:
                hour = value.getTimezoneOffset() / 60;
                ret.push( (hour <= 0 ? '+' : '-') + padWithZeros( Math.floor( Math.abs( hour ) ), 2 ) +
                    ":" + padWithZeros( Math.abs( value.getTimezoneOffset() % 60 ), 2 ) );
                break;
            case dateFormat.DATE_SEPARATOR:
                ret.push( cal["/"] || "/" );
                break;
            default:
                throw "Invalid date format pattern '" + current + "'.";
                break;
        }
    }
    return ret.join( '' );
}

//add new culture into ej 
ej.globalize.addCulture = function (name, culture) {
    ej.cultures[name] = $.extend(true, $.extend(true, {}, ej.cultures['default'], culture), ej.cultures[name]);
	ej.cultures[name].calendar = ej.cultures[name].calendars.standard;
}

//return the specified culture or default if not found
ej.globalize.preferredCulture = function (culture) {
    culture = (typeof culture != "undefined" && typeof culture === typeof this.cultureObject) ? culture.name : culture;
    this.cultureObject = ej.globalize.findCulture(culture);
    return this.cultureObject;
}
ej.globalize.setCulture = function (culture) {
	if (ej.isNullOrUndefined(this.globalCultureObject)) this.globalCultureObject = ej.globalize.findCulture(culture);
	culture = (typeof culture != "undefined" && typeof culture === typeof this.globalCultureObject) ? culture.name : culture;
    if (culture) this.globalCultureObject = ej.globalize.findCulture(culture);
    ej.cultures.current = this.globalCultureObject;
    return this.globalCultureObject;
}
ej.globalize.culture=function(name){
    ej.cultures.current = ej.globalize.findCulture(name);
}

//return the specified culture or current else default if not found
ej.globalize.findCulture = function (culture) {
    var cultureObject;
    if (culture) {

        if ($.isPlainObject(culture) && culture.numberFormat) {
            cultureObject = culture;
        }
        if (typeof culture === "string") {
            var cultures = ej.cultures;
            if (cultures[culture]) {
                return cultures[culture];
            }
            else {
                if (culture.indexOf("-") > -1) {
                    var cultureShortName = culture.split("-")[0];
                    if (cultures[cultureShortName]) {
                        return cultures[cultureShortName];
                    }
                }
                else {
                    var cultureArray = $.map(cultures, function (el) { return el });
                    for (var i = 0; i < cultureArray.length; i++) {
                        var shortName = cultureArray[i].name.split("-")[0];
                        if (shortName === culture) {
                            return cultureArray[i];
                        }
                    };
                }
            }
            return ej.cultures["default"];
        }
    }
    else {
        cultureObject = ej.cultures.current || ej.cultures["default"];
    }

    return cultureObject;
}
//formatting date and number based on given format
ej.globalize.format = function (value, format, culture) {
    var cultureObject =  ej.globalize.findCulture(culture);
    if (typeof(value) === 'number') {
        value = formatNumberToCulture(value, format, cultureObject);
    } else if(value instanceof Date){
    	value = formatDateToCulture(value, format, cultureObject);
    }

    return value;
}

ej.globalize._round = function(number, precision){
	var factor = Math.pow(10, precision);
	return Math.round(number * factor) / factor;
},

//parsing integer takes string as input and return as number
ej.globalize.parseInt = function(value, radix, culture) {
	if(!radix)
		radix = 10;
    return Math.floor( parseValue( value, culture, radix ) );
}

//returns the ISO date string from date object
ej.globalize.getISODate = function(value) {
    if(value instanceof Date) return value.toISOString();
}

//parsing floationg poing number takes string as input and return as number
ej.globalize.parseFloat = function(value, radix, culture) {
	if (typeof radix === "string") {
        culture = radix;
        radix = 10;
    }
    return parseValue( value, culture);
}

//parsing date takes string as input and return as date object
ej.globalize.parseDate = function(value, formats, culture) {
    culture = ej.globalize.findCulture(culture);

    var date, prop, patterns;
    if ( formats ) {
        if ( typeof formats === "string" ) {
            formats = [ formats ];
        }
        if ( formats.length ) {
            for ( var i = 0, l = formats.length; i < l; i++ ) {
                var format = formats[ i ];
                if ( format ) {
                    date = getParsedDate( value, format, culture );
                    if ( date ) break;
                }
            }
        }
    }
    else {
        patterns = culture.calendar.patterns;
        for ( prop in patterns ) {
            date = getParsedDate( value, patterns[prop], culture );
            if ( date ) break;
        }
    }
    return date || null;
}

function getControlObject(obj, stringArray){
    return stringArray.length ? getControlObject(obj[stringArray[0]], stringArray.slice(1)) : obj;
}

//return localized constants as object for the given widget control and culture
ej.globalize.getLocalizedConstants = function(controlName, culture){
    var returnObject,
        controlNameArray = controlName.replace("ej.", "").split(".");
    
    returnObject = getControlObject(ej, controlNameArray);

    return ( $.extend(true, {}, returnObject.Locale['default'], returnObject.Locale[culture ? culture : this.cultureObject.name]) ) ;
}

$.extend(ej, ej.globalize);

}(jQuery));;
/**
* @fileOverview Plugin to style the Html Button elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejButton", "ej.Button", {

        element: null,

        model: null,
        validTags: ["button", "input"],
        _setFirst: false,

        _rootCSS: "e-button",
        _requiresID: true,

        defaults: {

            size: "normal",

            type: "submit",

            height: "",

            width: "",

            enabled: true,

            htmlAttributes: {},

            text: null,

            contentType: "textonly",

            imagePosition: "imageleft",

            showRoundedCorner: false,

            cssClass: "",

            prefixIcon: null,

            suffixIcon: null,

            enableRTL: false,

            repeatButton: false,

            timeInterval: "150",

            create: null,

            click: null,

            destroy: null
        },


        dataTypes: {
            size: "enum",
            enabled: "boolean",
            type: "enum",
            showRoundedCorner: "boolean",
            text: "string",
            contentType: "enum",
            imagePosition: "enum",
            prefixIcon: "string",
            suffixIcon: "string",
            cssClass: "string",
            repeatButton: "boolean",
            enableRTL: "boolean",
            timeInterval: "string",
            htmlAttributes: "data"
        },

        disable: function () {
            this.element.addClass("e-disable").attr("aria-disabled", true);
            this.model.enabled = false;
        },

        enable: function () {
            this.element.removeClass("e-disable").attr("aria-disabled", false);
            this.model.enabled = true;
        },

        _init: function () {
            this._cloneElement = this.element.clone();
            this._initialize();
            this._render();
            this._controlStatus(this.model.enabled);
            this._wireEvents(this.model.repeatButton);
            this._addAttr(this.model.htmlAttributes);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else proxy.element.attr(key, value);
                if (key == "disabled" && value == "disabled") proxy.disable();
            });
        },

        _destroy: function () {
            this._off(this.element, "blur", this._btnBlur);
            this.element.removeClass(this.model.cssClass + "e-ntouch e-btn e-txt e-select e-disable e-corner e-widget").removeAttr("role aria-describedby aria-disabled");
            !this._cloneElement.attr("type") && this.element.attr("type") && this.element.removeAttr("type");			
            this.element.removeClass("e-btn-" + this.model.size);
            this.model.contentType && this.model.contentType != "textonly" ? this.element.append(this._cloneElement.text()) && this.imgtxtwrap[0].remove() : "";
            
        },


        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "size":
                        this._setSize(options[option]);
                        break;
                    case "height":
                        this._setHeight(options[option]);
                        break;
                    case "width":
                        this._setWidth(options[option]);
                        break;
                    case "contentType":
                        this._setContentType(options[option]);
                        break;
                    case "imagePosition":
                        this._setImagePosition(options[option]);
                        break;
                    case "text":
                        this._setText(options[option]);
                        break;
                    case "prefixIcon":
                        if (!this.element.is("input"))
                        this._setMajorIcon(options[option]);
                        break;
                    case "suffixIcon":
                        if (!this.element.is("input"))
                        this._setMinorIcon(options[option]);
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        break;
                    case "timeInterval":
                        this.model.timeInterval = options[option];
                        break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                }
            }
        },


        _setSize: function (val) {
            this.element.removeClass('e-btn-mini e-btn-medium e-btn-small e-btn-large e-btn-normal');
            this.element.addClass("e-btn-" + val);
        },
        _setType: function (val) {
            this.element.prop({ "type": val });
        },

        _setHeight: function (val) {
            this.element.css('height', val);
        },

        _setWidth: function (val) {
            this.element.css('width', val);
        },

        _setText: function (val) {
            if (this.buttonType == "inputButton") {
                this.element.val(val);
            } else {
                if (this.model.contentType == ej.ContentType.TextOnly) {
                    this.element.html(val);
                } else {
                    this.textspan.html(val);
                }
            }
            this.model.text = val;
        },

        _setMajorIcon: function (val) {
            this.majorimgtag.removeClass(this.model.prefixIcon);
            this.majorimgtag.addClass(val);
            this.model.prefixIcon = val;
        },

        _setMinorIcon: function (val) {
            this.minorimgtag.removeClass(this.model.suffixIcon);
            this.minorimgtag.addClass(val);
            this.model.suffixIcon = val;
        },

        _setContentType: function (val) {
            if (val != this.model.contentType) {
                this.element.empty();
                this.model.contentType = val;
                if (!this.element.is("input"))
                this._renderButtonNormal();
            }
        },

        _setImagePosition: function (val) {
            if ((this.model.contentType == ej.ContentType.TextAndImage) && (val != this.model.imagePosition)) {
                this.element.empty();
                this.model.imagePosition = val;
                if (!this.element.is("input"))
                this._renderButtonNormal();
            }
        },

        _setRTL: function (val) {
            if (val) {
                this.element.addClass("e-rtl");
            } else {
                this.element.removeClass("e-rtl");
            }
        },

        _controlStatus: function (value) {
            if (!value) {
                this.disable();
            } else {
                this.enable();
            }
        },

        _setSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.element.removeClass(this.model.cssClass);
                this.element.addClass(skin);
            }
        },

        _initialize: function () {
            if(!ej.isTouchDevice()) this.element.addClass("e-ntouch");
            if (this.element.is("input")) {
                this.buttonType = "inputButton";
            }
            else if ((this.element.is("a")) || (this.element.is("button"))) {
                this.buttonType = "tagButton";
            }
            else {
                this.element.removeClass("e-button");
            }
            if (this.element.attr("type")) {
                this.model.type = this.element.attr("type");
            }
            else
                this._setType(this.model.type);
            this._timeout = null;
        },


        _render: function () {
            this._setSize(this.model.size);
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
            this._setRTL(this.model.enableRTL);
            this.element.addClass(this.model.cssClass + " e-btn e-select e-widget").attr("role", "button");
            if (this.buttonType == "inputButton") {
                this.element.addClass("e-txt");
                if ((this.model.text != null) && (this.model.text != "")) {
                    this.element.val(this.model.text);
                } else {
                    this.model.text = this.element.val();
                }
            } else { this._renderButtonNormal(); }
            this._roundedCorner(this.model.showRoundedCorner);
            if (this.element[0].id)
                this.element.attr("aria-describedby", this.element[0].id);
        },

        _renderButtonNormal: function () {
            if ((this.model.text == null) || (this.model.text == "")) {
                this.model.text = this.element.html();
            }
            this.element.empty();
            /*Image and Text*/
            this.textspan = ej.buildTag('span.e-btntxt', this.model.text);
            if (this.model.contentType.indexOf("image") > -1) {
                this.majorimgtag = ej.buildTag('span').addClass(this.model.prefixIcon);
                this.minorimgtag = ej.buildTag('span').addClass(this.model.suffixIcon);
                this.imgtxtwrap = ej.buildTag('span').addClass('e-btn-span');
            }

            if (this.model.contentType == ej.ContentType.TextAndImage) {
                switch (this.model.imagePosition) {
                    case ej.ImagePosition.ImageRight:
                        this.imgtxtwrap.append(this.textspan, this.majorimgtag);
                        break;
                    case ej.ImagePosition.ImageLeft:
                        this.imgtxtwrap.append(this.majorimgtag, this.textspan);
                        break;
                    case ej.ImagePosition.ImageBottom:
                        this.majorimgtag.attr("style", "display:inherit");
                        this.imgtxtwrap.append(this.textspan, this.majorimgtag);
                        break;
                    case ej.ImagePosition.ImageTop:
                        this.majorimgtag.attr("style", "display:inherit");
                        this.imgtxtwrap.append(this.majorimgtag, this.textspan);
                        break;
                }
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageTextImage) {
                this.imgtxtwrap.append(this.majorimgtag, this.textspan, this.minorimgtag);
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageBoth) {
                this.imgtxtwrap.append(this.majorimgtag, this.minorimgtag);
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageOnly) {
                this.imgtxtwrap.append(this.majorimgtag);
                this.element.append(this.imgtxtwrap);
            } else {
                this.element.addClass("e-txt");
                this.element.html(this.model.text);
            }
        },

        _roundedCorner: function (value) {
            value == true ? this.element.addClass('e-corner') : this.element.removeClass('e-corner');
        },

        _wireEvents: function (val) {
            if (val) {
                this._on(this.element, "mousedown", this._btnRepatMouseClickEvent);
                this._on($(document), 'mouseup', this._mouseUpClick);
                this._on(this.element, "keyup", this._btnRepatKeyUpEvent);
                this._on($(document), "keypress", this._btnRepatKeyDownEvent);

            }
            this._on(this.element, "click", this._btnMouseClickEvent);
            this._on(this.element, "blur", this._btnBlur);
        },

        _btnBlur:function(e){
            this.element.removeClass("e-animate");
        },

        _btnMouseClickEvent: function (e) {
            var self = this;
            this.element.addClass("e-animate");
            if(!self.model.enabled) return false;
            if (!self.element.hasClass("e-disable")) {
                // here aregument 'e' used in serverside events 
                var args = { target: e.currentTarget, e : e , status:self.model.enabled};
				//Trigger _click function to apply scope changes
                self._trigger("_click", args);
                self._trigger("click", args);
            } 
        },

        _btnRepatMouseClickEvent: function (e) {
            var self = this;
            if(!self.model.enabled) return false;
            if (!self.element.hasClass("e-disable")) {
                var args = { status: self.model.enabled };
                if ((e.button == 0) || (e.which == 1)) {

                    self._timeout = setInterval(function () { self._trigger("click", { target: e.currentTarget, status: self.model.enabled }); }, this.model.timeInterval);
                }
            }
        },

        _mouseUpClick: function (event) {
            clearTimeout(this._timeout);
        },

        _btnRepatKeyDownEvent: function (e) {
            var self = this;
            if (!self.element.hasClass("e-disable")) {
                var args = { status: self.model.enabled };
                if ((e.keyCode == 32) || (e.keyCode == 13)) {
                    self._trigger("click", args);
                }
            }
        },

        _btnRepatKeyUpEvent: function (e) {
            if ((e.keyCode == 32) || (e.keyCode == 13)) {
                clearTimeout(this._timeout);
            }
        },
    });


    ej.ContentType = {
		/**  Supports only for text content only */
		TextOnly: "textonly", 
		/** Supports only for image content only */
		ImageOnly: "imageonly", 
		/** Supports image for both ends of the button */
		ImageBoth: "imageboth", 
		/** Supports image with the text content */
		TextAndImage: "textandimage", 
		/** Supports image with both ends of the text */
        ImageTextImage: "imagetextimage"
    };


    ej.ImagePosition = {
		/**  support for aligning text in left and image in right. */
		ImageRight: "imageright", 
		/**  support for aligning text in right and image in left. */
		ImageLeft: "imageleft",
		/**  support for aligning text in bottom and image in top. */
		ImageTop: "imagetop", 
		/**  support for aligning text in top and image in bottom. */
		ImageBottom: "imagebottom"
    };

    ej.ButtonSize = {
		/**  Creates button with inbuilt default size height, width specified */
		Normal : "normal",
		/**  Creates button with inbuilt mini size height, width specified */
		Mini: "mini", 
		/**  Creates button with inbuilt small size height, width specified */
		Small: "small",
		/**  Creates button with inbuilt medium size height, width specified */
		Medium:"medium", 
		/**  Creates button with inbuilt large size height, width specified */
        Large: "large"
    };

    ej.ButtonType = {
		/**  Creates button with inbuilt button type specified */
		Button : "button",
		/**  Creates button with inbuilt reset type specified */
		Reset: "reset", 
		/**  Creates button with inbuilt submit type specified */
		Submit: "submit"
    };
})(jQuery, Syncfusion);
;
/**
* @fileOverview Plugin to style the Html div elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejSlider", "ej.Slider", {

        element: null,

        model: null,
        validTags: ["div", "span"],
        _addToPersist: ["value", "values"],
        _rootCSS: "e-slider",
        _setFirst: false,
        _requiresID: true,

        defaults: {

            orientation: "horizontal",

            enableAnimation: true,

            animationSpeed: 500,

            showTooltip: true,

            cssClass: "",

            showRoundedCorner: false,

            readOnly: false,

            enableRTL: false,

            htmlAttributes: {},

            minValue: 0,

            maxValue: 100,

            sliderType: "default",

            value: null,

            values: null,

            incrementStep: 1,

            height: null,

            width: null,

            enabled: true,

            showScale: false,

            largeStep: 10,

            smallStep: 1,

            showSmallTicks: true,

            showButtons: false,

            enablePersistence: false,
            
            allowMouseWheel:false,

            start: null,

            stop: null,

            slide: null,

            change: null,

            create: null,

            destroy: null,

            tooltipChange: null,

            renderingTicks: null
        },

        dataTypes: {
            orientation: "enum",
            enableAnimation: "boolean",
            animationSpeed: "number",
            cssClass: "string",
            showRoundedCorner: "boolean",
            readOnly: "boolean",
            enableRTL: "boolean",
            minValue: "number",
            maxValue: "number",
            sliderType: "enum",
            incrementStep: "number",
            enabled: "boolean",
            showButtons: "boolean",
            showScale: "boolean",
            largeStep: "number",
            smallStep: "number",
            showSmallTicks: "boolean",
            enablePersistence: "boolean",
            htmlAttributes: "data",
            allowMouseWheel:"boolean"
        },

        observables: ["value", "values"],
        value: ej.util.valueFunction("value"),
        values: ej.util.valueFunction("values"),

        enable: function () {
            if (!this.model.enabled) {
                this.model.enabled = true;
                if (this.wrapper) this.wrapper.removeClass("e-disable");
                this.element.removeClass("e-disable");
                if (this.model.showButtons) this.element.siblings('.e-sliderbtn').ejButton("model.enabled", this.model.enabled);
                this._wireEvents();
            }
        },

        disable: function () {
            if (this.model.enabled) {
                this.model.enabled = false;
                if (this.wrapper) this.wrapper.addClass("e-disable");
                this.element.addClass("e-disable");
                if (this.model.showButtons) this.element.siblings('.e-sliderbtn').ejButton("model.enabled", this.model.enabled);
                this._unWireEvents();
            }
        },

        _validateValue: function (value, animation) {
            animation = (typeof animation === 'undefined') ? false : animation;
            if (value == null || value === "") value = this.model.minValue;
            else if (typeof value === "string") value = parseFloat(value);

            if (this._isNumber(value)) {
                this._hidden.val(value);
                this.value(value);
            }
            else if (!this._isNumber(this.value())) {
                this._hidden.val(this.model.minValue);
                this.value(this.model.minValue);
            }
            if (this.model.sliderType != "range") this._setValue(animation);
        },

        _validateRangeValue: function (value, animation) {
            animation = (typeof animation === 'undefined') ? false : animation;
            if (value == null) value = new Array(this.model.minValue, this.model.maxValue);
            else if (typeof value === "string") {
                var vals = value.split(",");
                if (vals.length > 1) value = new Array(parseFloat(vals[0]), parseFloat(vals[1]));
            }

            if (typeof value === "object" && this._isNumber(value[0]) && this._isNumber(value[1])) {
                this._hidden.val(new Array(value[0], value[1]));
                this.values(new Array(value[0], value[1]));
            }
            else if (!(typeof this.values() === "object" && this._isNumber(this.values()[0]) && this._isNumber(this.values()[1]))) {
                this._hidden.val(new Array(this.model.minValue, this.model.maxValue));
                this.values(new Array(this.model.minValue, this.model.maxValue));
            }
            if (this.model.sliderType == "range") this._setRangeValue(animation);
        },

        _validateStartEnd: function () {
            if (isNaN(this.model.minValue)) this.model.minValue = 0;
            if (isNaN(this.model.maxValue)) this.model.maxValue = 100;
        },

        _isNumber: function (number) {
            return typeof number === "number" && !isNaN(number);
        },

        _outerCorner: function (boolean) {
            if (boolean) this._roundedCorner();
            else this._sharpedCorner();
        },

        _changeSkin: function (skin) {
            this.element.removeClass(this.model.cssClass).addClass(skin);
            if (this.model.showScale)
                this.ul.removeClass(this.model.cssClass).addClass(skin);
        },

        getValue: function () {

            return this._getHandleValue();
        },

        setValue: function (value, animation) {
            this._isInteraction = false;
            if (this.model.sliderType == "range")
                this._validateRangeValue(value, animation);
            else
                this._validateValue(value, animation);
            this._isInteraction = true;
        },

        _getTransition: function () {
            var body = document.body || document.documentElement, bodyStyle = body.style,
                support = bodyStyle.transition !== undefined || bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.MsTransition !== undefined || bodyStyle.OTransition !== undefined;
            return support;
        },

        _init: function () {
            this._isInteraction = true;
            this._isTransition = this._getTransition();
            this._initialize();
            this._render();
        },

        _setModel: function (options) {
            this._isInteraction = false;
            if (!ej.isNullOrUndefined(options["minValue"]) || !ej.isNullOrUndefined(options["maxValue"])) {
                if (this._isNumber(options["minValue"])) this.model.minValue = options["minValue"];
                else options["minValue"] = this.model.minValue;

                if (this._isNumber(options["maxValue"])) this.model.maxValue = options["maxValue"];
                else options["maxValue"] = this.model.maxValue;

                if (this.model.sliderType == "range" && options["values"] == undefined) this._setRangeValue();
                else if (this.model.sliderType != "range" && options["value"] == undefined) this._setValue();
            }

            var option;
            for (option in options) {
                switch (option) {
                    case "value":
                        this._validateValue(ej.util.getVal(options[option]));
                        options[option] = this.model.value;
                        break;
                    case "values":
                        var val= typeof options.values == "function" ? options.values() : options.values;
                        if (!ej.isNullOrUndefined(val) && !ej.isNullOrUndefined(val.length) && typeof val != "string")
                        {
                            if (!isNaN(val[0]) && !isNaN(val[1])) {
                                var actualValue = typeof this.values().join == "function" ? val.join() : val;
                                if (actualValue == this._hidden.val()) break;
                            }
                        }
                        this._validateRangeValue(ej.util.getVal(options[option]));
                        options[option] = this.model.values;
                        break;
                    case "height": this.model.height = options[option]; this._setDimension();
                        if (this.model.showScale) this._scaleAlignment();
                        break;
                    case "width": this.model.width = options[option]; this._setDimension();
                        if (this.model.showScale) this._scaleAlignment();
                        break;
                    case "enabled": this._disabled(!options[option]); break;
                    case "showRoundedCorner": this._outerCorner(options[option]); break;
                    case "enableRTL": this.model.enableRTL = options[option];
                        if (this.model.showButtons) this._valueChanged = true;
                        this._checkRTL();
                        options[option] = this.model.enableRTL;
                        break;
                    case "cssClass": this._changeSkin(options[option]);
                        if (this.model.showButtons) this.element.siblings('.e-sliderbtn').ejButton("model.cssClass", options[option]);
                        break;
                    case "showScale": this._renderScale(options[option]);
                        if (this.model.enableRTL) this._changeVerticalScaleDir(options[option]); break;
                    case "orientation":
                        var t = this.model.height;
                        this.model.height = this.model.width;
                        this.model.width = t;
                    case "sliderType":
                        this._sliderOptions(option, options[option]); break;
                    case "smallStep":
                    case "largeStep":
                    case "showSmallTicks":
                    case "minValue":
                    case "maxValue":
                        this._scaleOptions(option, options[option]); break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "tooltipChange":
                        this.model.tooltipChange = options[option]; break;
                    case "allowMouseWheel": this.model.allowMouseWheel = options[option]; break;
                    case "renderingTicks": this.model.renderingTicks = options[option]; break;
                    case "showButtons": this.model.showButtons = options[option]; this._renderButtons(); break;
                }
            }
            this._isInteraction = true;
        },

        _destroy: function () {
            if (this.model.showScale) this._destroyScale();
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
            this.element.removeClass("e-widget e-box e-corner " + this.model.cssClass).empty();
            if (this.model.showButtons) this.element.removeAttr("style");
        },

        _initialize: function () {
            this.target = this.element[0];
            this.horDir = "left";
            this.verDir = "bottom";
            this._isFocused = false;
        },

        _render: function () {
            this.initialRender = true;
            this._isIE8 = (ej.browserInfo().name == 'msie' && ej.browserInfo().version == '8.0') ? true : false
            this.wrapper = ej.buildTag("div.e-slider-wrap e-widget" + this.model.cssClass + "#" + this.target.id + "_wrapper", { tabindex: "0", role: "slider" })
                .insertAfter(this.element);
            (this.model.showButtons) ? this._showButtons() : this.wrapper.append(this.element);

            this.element.addClass("e-widget e-box " + this.model.cssClass);
            if (this.model.sliderType != "default") {
                this.header = ej.buildTag("div.e-range");
                this.element.append(this.header);
                if (this.model.sliderType == "range") {
                    this.secondHandle = this._createHandle();
                }
            }
            this.firstHandle = this._createHandle();
            this._setOrientation();
            this._setDimension();
            this._insertHiddenField();
            this._checkProperties();
            if(!this.model.showScale) this._alignButtons();
            this._addAttr(this.model.htmlAttributes);
            this._setSliderValue();
        },

        _showButtons: function () {
            var proxy = this;
            var decreaseButton = ej.buildTag('button.e-decreasebtn e-sliderbtn e-animate');
            var increaseButton = ej.buildTag('button.e-increasebtn e-sliderbtn e-animate');
            decreaseButton.ejButton({
                contentType: "imageonly",
                prefixIcon: "e-icon e-minus",
                type: "button",
                repeatButton: true,
                enabled: proxy.model.enabled,
                cssClass: proxy.model.cssClass,
                click: function (e) { proxy._clickButtons(e) }
            });
            increaseButton.ejButton({
                contentType: "imageonly",
                prefixIcon: "e-icon e-plus",
                type: "button",
                repeatButton: true,
                enabled: proxy.model.enabled,
                cssClass: proxy.model.cssClass,
                click: function (e) { proxy._clickButtons(e) }
            });
            if ((this.model.enableRTL && this.model.orientation == "horizontal") || (this.model.orientation == "vertical" && !this.model.enableRTL))
                this.wrapper.append($(increaseButton)).append(this.element).append($(decreaseButton)).addClass("e-slider-buttons");
            else this.wrapper.append($(decreaseButton)).append(this.element).append($(increaseButton)).addClass("e-slider-buttons");
            this.wrapper.find('.e-sliderbtn').attr("tabindex", -1);
        },

        _renderButtons: function () {
            if (this.model.showButtons) {
                this._showButtons();
                if(!this.model.showScale) this._alignButtons();
            }
            else {
                this.element.siblings('.e-sliderbtn').remove();
                this.element.removeAttr('style');
                this.wrapper.removeClass("e-slider-buttons");
            }
            if (this.wrapper.find('ul').hasClass('e-scale')) {
                this._destroyScale();
                this._renderScale(true);
            }
        },

        _alignButtons: function () {
            if (this.model.showButtons) {
                var sliderButtons = this.wrapper.find('.e-sliderbtn');
                if (this.model.orientation == "horizontal") 
                    sliderButtons.css("top", ((this.element.outerHeight() / 2) - parseFloat(sliderButtons.outerHeight() / 2) + parseFloat(this.wrapper.css("padding-top"))) + "px");
                else 
                    sliderButtons.css("left", ((this.element.outerWidth() / 2) - parseFloat(sliderButtons.outerWidth() / 2) + parseFloat(this.wrapper.css("padding-left"))) + "px");
            }
        },

        _clickButtons: function (evt) {
            if ($(evt.target).hasClass("e-animate"))
                $(evt.target).removeClass('e-animate');
            if (this.model.readOnly || ej.isNullOrUndefined(evt.target)) return;
            var value, hVal;
            if (this.model.sliderType == "range") {
                if ($(this.element).find('.e-handle.e-focus').is(this.firstHandle) && !this.model.enableRTL) { this.firstHandle.focus().addClass("e-no-tab"); hVal = this.handleVal; }
                else if (!this.model.enableRTL) { this.secondHandle.focus().addClass("e-no-tab"); hVal = this.handleVal2; }
                if ($(this.element).find('.e-handle.e-focus').is(this.secondHandle) && this.model.enableRTL) { this.secondHandle.focus().addClass("e-no-tab"); hVal = this.handleVal2; }
                else if (this.model.enableRTL) { this.firstHandle.focus().addClass("e-no-tab"); hVal = this.handleVal; }
            }
            else { this.firstHandle.focus().addClass("e-no-tab"); hVal = this.handleVal; }
            if ($(evt.target).hasClass("e-decreasebtn")) value = this._add(hVal, this.model.incrementStep, false);
            else value = this._add(hVal, this.model.incrementStep, true);
            this._changeHandleValue(value, false);
        },

        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy._disabled(true);
                else proxy.element.attr(key, value)
            });
        },

        _renderScale: function (showScale) {
            if (showScale) {
                this.wrapper.addClass("e-scale-wrap");
                var width = "width", orien = "h", spanText;
                if (this.model.orientation == "vertical") {
                    width = "height";
                    orien = "v";
                }

                var _smallStep = this.model.smallStep;
                if (!this.model.showSmallTicks) {
                    if (this.model.largeStep > 0)
                        _smallStep = this.model.largeStep;
                    else
                        _smallStep = this.model.maxValue - this.model.minValue;
                }
                else if (_smallStep <= 0)
                    _smallStep = this.model.incrementStep;
                var count = Math.abs(this.model.maxValue - this.model.minValue) / _smallStep;

                this.ul = ej.buildTag("ul.e-scale e-" + orien + "-scale " + this.model.cssClass);
                if (this._isIE8) this.ul.addClass('e-ie8')
                this.wrapper.append(this.ul);

                var li, args, start = this.model.minValue, left = 0, tickWidth = 100 / count;
                if (orien == "v") start = this.model.maxValue;
                for (var i = 0; i <= count; i++) {
                    li = ej.buildTag("li.e-tick", "", {}, { "title": start });
                    var islargeTick = (start % this.model.largeStep == 0) ? true : false;
                    if (islargeTick) li.addClass("e-large");
                    li.css(width, tickWidth + "%");
                    if (this.model.renderingTicks) {
                        args = { value: start, valueType: "tooltip", tick: li[0]};
                        this._trigger("renderingTicks", args);
                        li.attr("title", args.value);
                    }
                    if (islargeTick) {
                        if (this.model.renderingTicks) {
                            args.valueType = "label";
                            args.value = start;
                            this._trigger("renderingTicks", args);
                            spanText = args.value;
                        }
                        else spanText = start;
                        var span = ej.buildTag("span.e-tick-value", "" + spanText);
                        li.append(span);
                    }
                    this.ul.append(li);

                    if (orien == "h") start += _smallStep;
                    else start -= _smallStep;
                    left += _smallStep;
                }

                this.ul.children().first().addClass("e-first-tick").css(width, (tickWidth / 2) + "%");
                this.ul.children().last().addClass("e-last-tick").css(width, (tickWidth / 2) + "%");

                this._scaleAlignment();
            }
            else this._destroyScale();
            this._setWrapperHeight();
            this._alignButtons();
        },
        _destroyScale: function () {
            this.wrapper.removeClass("e-scale-wrap");
            this.ul.remove();
            this.ul = null;
        },

        _tickValuePosition: function () {
            var width = (this.model.orientation == "vertical") ? "height" : "width";
            var left = (this.model.orientation == "vertical") ? "top" : "left";
            var firstTick = this.ul.find(".e-tick.e-first-tick");
            var first = firstTick.find(".e-tick-value");
            var other = this.ul.find(".e-tick.e-large:not(.e-first-tick)").find(".e-tick-value");
            var tickWidth = firstTick[width]() * 2;
            first.css(left, -first[width]() / 2);
            other.css(left, (tickWidth - other[width]()) / 2);
        },

        _scaleAlignment: function () {
            this._tickValuePosition();
            var smallTick = 12, largeTick = 20, half = largeTick / 2;
            var height = "height", top = "top", orien = "h";
            if (this.model.orientation == "vertical") {
                height = "width";
                top = "right";
                orien = "v";
                (this.element.width() <= 15) ? this.wrapper.addClass("e-small-size") : this.wrapper.removeClass("e-small-size");
            }
            else
                (this.element.height() <= 15) ? this.wrapper.addClass("e-small-size") : this.wrapper.removeClass("e-small-size");
            // scale
             this.ul.css(top, -(this.wrapper[height]() + half));
            if(orien == "v") this.ul.css("top", -this.wrapper.height()).css(top, half);
            this.ul[height](this.wrapper[height]() + largeTick);
            // small-ticks
            var topSize = -(largeTick - smallTick) / 2;
            if (this.model.largeStep == null && orien != "v") topSize = -topSize;
            this.ul.find(".e-tick:not(.e-large)").css(height, this.wrapper[height]() + smallTick).css(top, topSize);
            // tick-values   // 4 - distance between tick value and tick
            if (orien == "v") this.ul.children(".e-large").find(".e-tick-value").css("right", this.wrapper.width() + largeTick + 4);
        },

        _setWrapperHeight : function(){
            var wrapHeight, wrapWidth;
            if (this.model.orientation == "horizontal") {
                if (this.ul)
                    wrapHeight = (this.firstHandle.outerHeight() > this.ul.height()) ? this.firstHandle.outerHeight() : this.ul.height();
                else wrapHeight = this.firstHandle.outerHeight();
                var top = (wrapHeight - this.element.outerHeight()) / 2;
                if (top < 0) top = 0;
                this.wrapper.css({ "padding": top + "px 0px" });
            }
            else {
                if (this.ul)
                    wrapWidth = (this.firstHandle.outerWidth() > this.ul.width()) ? this.firstHandle.outerWidth() : this.ul.width();
                else wrapWidth = this.firstHandle.outerWidth();
                var right = ( wrapWidth - this.element.outerWidth()) / 2;
                if (right < 0) right = 0;
                this.wrapper.css({ "padding": "0px " + right + "px" });
            }
        },


        _createHandle: function () {
			var handle = ej.buildTag("a.e-handle e-select", "", {}, { "aria-label": "drag", "tabindex": 0});
            this.element.attr({ role: "slider", "aria-valuemin": this.model.minValue, "aria-valuemax": this.model.maxValue });
            ej.browserInfo().name == "msie" && handle.addClass("e-pinch");
            this.element.append(handle);
            return handle;
        },

        _setDimension: function () {
            if (this.model.height) this.wrapper.height(this.model.height);
            if (this.model.width) this.wrapper.width(this.model.width);
            this._setHandleSize();
            this._handleAlignment(this.model.enableRTL);
            this._alignButtons();
        },

        _insertHiddenField: function () {
            this._hidden = ej.buildTag("input", "", {},
                { "type": "hidden", "name": this.element[0].id });
            this._hidden.val(this._getHandleValue());
            this.element.append(this._hidden);
        },

        _checkProperties: function () {
            if (!this.model.enabled) {
                if (this.wrapper) this.wrapper.addClass("e-disable");
                else this.element.addClass("e-disable");
            }
            else this._wireEvents();
			
            if (this.model.showScale) this._renderScale(true);
            else this._setWrapperHeight();
            if (this.model.enableRTL) this._checkRTL();
            if (this.model.showRoundedCorner) this._roundedCorner();
        },

        _roundedCorner: function () {
            this.element.addClass("e-corner");
        },

        _sharpedCorner: function () {
            this.element.removeClass("e-corner");
        },

        _handleAlignment: function (rtl) {
            var mar = -(this.firstHandle.outerWidth() / 2) + "px", margin;
            if (this.model.orientation != "vertical") {
                if (!rtl) margin = "0 0 0 " + mar;
                else margin = "0 " + mar + " 0 0";
            }
            else {
                if (!rtl) margin = "0 0 " + mar + " 0";
                else margin = mar + " 0 0 0";
            }
            this.element.children('.e-handle').css("margin", margin);
        },

        _checkRTL: function () {
            if (this.model.showButtons && this._valueChanged) {
                this.element.siblings('.e-sliderbtn').remove();
                this._renderButtons();
            }
            var rtl = this.model.enableRTL, preDir = (this.model.orientation != "vertical") ? this.horDir : this.verDir;
            if (rtl) {
				this.wrapper.addClass("e-rtl");
				if (this.model.orientation == "vertical") {
					this.wrapper.addClass("e-top-to-bottom");
				}
				 
                this.horDir = "right";
                this.verDir = "top";
            }
            else {
                this.wrapper.removeClass("e-rtl e-top-to-bottom");
                this.horDir = "left";
                this.verDir = "bottom";
            }
            if (!this.model.showButtons || (this.model.showButtons && this.model.enableRTL)) this._changeVerticalScaleDir(this.model.showScale);
            var currDir = (this.model.orientation != "vertical") ? this.horDir : this.verDir;

            if (preDir != currDir) {
                this.firstHandle.css(currDir, this.firstHandle[0].style[preDir]).css(preDir, "auto");
                if (this.model.sliderType != "default") {
                    this.header.css(currDir, this.header[0].style[preDir]).css(preDir, "auto");
                    if (this.model.sliderType == "range")
                        this.secondHandle.css(currDir, this.secondHandle[0].style[preDir]).css(preDir, "auto");
                }
            }
            this._handleAlignment(rtl);
        },

        _setOrientation: function () {
            if (this.model.orientation != "vertical") {
                this.wrapper.addClass("e-horizontal");
            }
            else {
                this.wrapper.addClass("e-vertical");
                this.firstHandle.css(this.verDir, "0");
            }
        },

        _changeVerticalScaleDir: function (showScale) {
            if (showScale) {
                var verscaleli = this.wrapper.find('.e-v-scale li');
                if (verscaleli.length > 0)
                {
                    var revdir = verscaleli.toArray().reverse(); verscaleli.remove();
                    this.wrapper.find('.e-v-scale').append(revdir);
                }
            }
        },

        _setHandleSize: function () {
            if ((this.model.height != null && this.model.orientation == "horizontal") || (this.model.width != null && this.model.orientation == "vertical") ) {
                var size;
                if (this.model.orientation != "vertical")
                    size = this.wrapper.height() + 2;
                else
                    size = this.wrapper.width() + 2;
                this.element.find(".e-handle").height(size).width(size);
            }
            else{
                this.wrapper.addClass("e-default-wrap");
                this.element.find(".e-handle").addClass("e-default");
            }
        },

        _disabled: function (boolean) {
            if (boolean) this.disable();
            else this.enable();
        },

        _sliderOptions: function (prop, value) {
            this._unWireEvents();
            this._destroy();
            this.model[prop] = value;
            this._init();
        },

        _scaleOptions: function (prop, value) {
            if (this.model.showScale) {
                this._destroyScale();
                this.model[prop] = value;
                this._renderScale(true);
                if (this.model.enableRTL)
                    this._changeVerticalScaleDir(true);
            }
        },

        _showTooltip: function () {
            if (this.model.showTooltip) {
                this._timeOut && clearTimeout(this._timeOut);
                var _tooltip = this.tooltip ? $('body .e-tooltipbox').text().replace(/\s+/g, '').replace("-", ",") : "";
                if (this.tooltip && this.tooltip.length && this.tooltip.css("display") != "none" && this._getHandle()[0] == this._oldHandle && _tooltip == this.preValue) {
                    if (this._getHandleValue().toString() != this.preValue)
                        this._setTooltipPosition();
                    return;
                }
                this._oldHandle = this._getHandle()[0];
                $('body .e-tooltipbox').remove();
                this.tooltip = ej.buildTag("div.e-tooltipbox " + this.model.cssClass + " e-corner", { role: "tooltip" }).css(this._getOffset(this._getHandle()));
                $("body").append(this.tooltip);
                if (this.model.orientation == "vertical") {
                    this.tooltip.addClass("e-vertical");
                }
                this._setTooltipPosition();
            }
        },

        _hideTooltip: function () {
            if (this.model.showTooltip) {
                var proxy = this;
                this._timeOut = setTimeout(function () {
                    proxy.tooltip.fadeOut(800);
                }, 1500);
            }
                
        },

        _showhideTooltip: function (showTooltip) {
            if (this.model.showTooltip && showTooltip) {
                this._showTooltip();
                this._timeOut && clearTimeout(this._timeOut);
                this._hideTooltip();
            }
        },

        _setTooltipPosition: function () {
            if (this.model.showTooltip) {
                this._updateTooltipValue();
                var top, left, remainLeft, remainTop, handle, pos, gap = 5, broder, tooltipPos, border; // gap -> distance between tooltip and slider
                handle = this._getHandle(), pos = this._getOffset(handle), tooltipPos = this._getOffset(this.tooltip);
                border = $(handle).outerHeight() - $(handle).height();
                if (this.model.orientation == "vertical") {
                    remainTop = (this.tooltip.outerHeight() - handle.outerHeight()) / 2;
                    remainLeft = handle.outerWidth() + gap;
                    top = pos.top - remainTop;
                    left = pos.left + remainLeft;
					var height=$(window).height();
                    if (window.pageYOffset > 0) height+=window.pageYOffset; 
                    if (top < 0) top = 0;
                    else if (height < top + this.tooltip.outerHeight()) top = height - this.tooltip.outerHeight() - border;
                    if ($(window).width() < left + this.tooltip.outerWidth()) left = pos.left - this.tooltip.outerWidth() - border;
                }
                else {
                    if (tooltipPos.left + this.tooltip.outerWidth() > $(window).width()) this.tooltip.css({ "left": '0px' });
                    remainLeft = (this.tooltip.outerWidth() - handle.outerWidth()) / 2;
                    remainTop = this.tooltip.outerHeight() + gap;
                    top = pos.top - remainTop;
                    left = pos.left - remainLeft;
					var width=$(window).width();
                    if (window.pageXOffset > 0) width+=window.pageXOffset;    
                    if (left < 0) left = 0;
                    else if (width < left + this.tooltip.outerWidth()) left = width - this.tooltip.outerWidth() - border;
                    if (top < 0 || pos.top < remainTop) {
                        if (pos.top + handle.outerHeight() + border + this.tooltip.outerHeight() > $(window).height()) {
                            top = pos.top;
                            if (pos.left > this.tooltip.outerWidth() + gap + border) left = pos.left - (this.tooltip.outerWidth() + border);
                            else left = pos.left + (handle.outerWidth() + gap + border);
                        } else top = pos.top + handle.outerHeight() + border;
                    }
                }
                var zindex = this._maxZindex();
                this.tooltip.css({ "top": top, "left": left, "zIndex": zindex + 1 });
            }
        },
        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },


        _maxZindex: function () {
            return ej.util.getZindexPartial(this.element, this.popup);
        },

        _updateTooltipValue: function () {
            var one = 0, two = 1, val;
            if (this.model.enableRTL) { one = 1, two = 0; }
            if (this.model.tooltipChange)
                val = this._raiseEvent("tooltipChange");
            else
                val = this._getHandleValue();
            if (this.model.sliderType != "range")
                this.tooltip[0].innerHTML = val;
            else
                this.tooltip[0].innerHTML = val[one] + " - " + val[two];
        },

        _increaseHeaderWidth: function (animation) {
            if (this.model.sliderType != "default") {
                var size = "width", direction = this.horDir, properties = {};
                if (this.model.orientation == "vertical") { size = "height", direction = this.verDir; }

                if (this.model.sliderType == "range") {
                    properties[size] = this.handlePos - this.handlePos2 + "%";
                    properties[direction] = this.handlePos2 + "%";
                }
                else {
                    properties[size] = this.handlePos + "%";
                    properties[direction] = 0;
                }
                var proxy = this;
                if (!animation) this.header.css(properties);
                else {
                    if (this._isTransition) {
                        this.header[0].style.transition = 'all ' + this.model.animationSpeed + 'ms';
                        this.header[0].style['-webkit-transition'] = 'all ' + this.model.animationSpeed + 'ms';
                        this.header.css(direction, properties[direction]);
                        this.header.css(size, properties[size]);
                        setTimeout(function () {
                            proxy.header[0].style.transition = 'none';
                            proxy.header[0].style['-webkit-transition'] = 'none';
                        }, this.model.animationSpeed);
                    } else {
                        this.header.animate(properties, this.model.animationSpeed);
                    }
                }
            }
        },

        _setSliderValue: function () {
            this._validateStartEnd();

            if (this.model.sliderType == "range")
                this._validateRangeValue(this.values());
            else
                this._validateValue(this.value());
            this.preValue = this.getValue().toString();
        },


        _hoverOnHandle: function (evt) {
            $(evt.currentTarget).addClass("e-hover");
        },

        _leaveFromHandle: function (evt) {
            $(evt.currentTarget).removeClass("e-hover");
        },

        _firstHandleClick: function (evt) {
            evt.preventDefault();
            this.firstHandle.focus().addClass("e-no-tab");
            if (this._raiseEvent("start")) return false;

            this.mouseDownPos = this.handlePos;
            if (!this.model.readOnly)
            this._on($(document),ej.eventType.mouseMove, this._firstHandleMove);
            this._on($(document),ej.eventType.mouseUp,this._firstHandleUp);
            this._on($(document),"mouseleave",this._firstHandleUp);
            this._showTooltip();
        },

        _firstHandleMove: function (evt) {
            evt.preventDefault();
            evt = evt.type == "touchmove" ? evt.originalEvent.changedTouches[0] : evt;
            var position = { x: evt.pageX, y: evt.pageY };
            this.handlePos = this._xyToPosition(position);

            if (this.model.sliderType == "range" && this.handlePos < this.handlePos2) {
                this.handlePos = this.handlePos2;
            }
            if (this.handlePos != this.preHandlePos) {
                this.preHandlePos = this.handlePos;
                this.handleVal = this._positionToValue(this.handlePos);
                this._increaseHeaderWidth(false);
                this._setHandlePosition(false, false, false);
                this._setTooltipPosition();

                this._updateModelValue();
                this._raiseEvent("slide");
            }
        },

        _firstHandleUp: function (evt) {
            evt.preventDefault();
            this._off($(document),ej.eventType.mouseMove, this._firstHandleMove);
            this._off($(document),ej.eventType.mouseUp,this._firstHandleUp);
            this._off($(document), "mouseleave", this._firstHandleUp);
            this._timeOut && clearTimeout(this._timeOut);
            this._hideTooltip();

            if (this.mouseDownPos != this.handlePos) this._raiseChangeEvent();
        },

        _secondHandleClick: function (evt) {
            evt.preventDefault();
            this.secondHandle.focus().addClass("e-no-tab");
            if (this._raiseEvent("start")) return false;

            this.mouseDownPos2 = this.handlePos2;
            if (!this.model.readOnly)
            this._on($(document),ej.eventType.mouseMove, this._secondHandleMove);
            this._on($(document),ej.eventType.mouseUp,this._secondHandleUp);
            this._on($(document),"mouseleave",this._secondHandleUp);
            this._showTooltip();
        },

        _secondHandleMove: function (evt) {
            evt.preventDefault();
            evt = evt.type == "touchmove" ? evt.originalEvent.changedTouches[0] : evt;
            var position2 = { x: evt.pageX, y: evt.pageY };
            this.handlePos2 = this._xyToPosition(position2);

            if (this.handlePos2 > this.handlePos) {
                this.handlePos2 = this.handlePos;
            }
            if (this.handlePos2 != this.preHandlePos2) {
                this.preHandlePos2 = this.handlePos2;
                this.handleVal2 = this._positionToValue(this.handlePos2);
                this._increaseHeaderWidth(false);
                this._setHandlePosition(false, false, false);
                this._setTooltipPosition();

                this._updateModelValue();
                this._raiseEvent("slide");
            }
        },

        _secondHandleUp: function (evt) {
            evt.preventDefault();
            this._off($(document),ej.eventType.mouseMove,this._secondHandleMove);
            this._off($(document),ej.eventType.mouseUp,this._secondHandleUp);
            this._off($(document), "mouseleave", this._secondHandleUp);
            this._timeOut && clearTimeout(this._timeOut);
            this._hideTooltip();

            if (this.mouseDownPos2 != this.handlePos2) this._raiseChangeEvent();
        },

        _focusInHandle: function (evt) {
            if (!this._isFocused) {
                this._isFocused = true;
                $(evt.currentTarget).addClass("e-focus");
                if (!this.model.readOnly)
                   this._on($(document),"keydown",this._moveHandle);
                if (this.model.allowMouseWheel && !this.model.readOnly) {
                    this._on(this.element,"mousewheel DOMMouseScroll", this._moveHandle);
                }
                this.activeHandle = $(evt.currentTarget).is(this.firstHandle) ? 1 : 2;
                this._setZindex();
            }
        },

        _focusOutHandle: function (evt) {
            if ($(evt.relatedTarget).is('button') && $(evt.target).parent().siblings().is(evt.relatedTarget)) return;
            if (ej.isNullOrUndefined(evt.relatedTarget) && !ej.isNullOrUndefined(evt.originalEvent) && !ej.isNullOrUndefined(evt.originalEvent.toElement)) {
                if ($(evt.originalEvent.toElement).is('button') && $(evt.target).parent().siblings().is(evt.originalEvent.toElement)) return;
            }
            this._isFocused = false;
            if (this.model.showTooltip && this.tooltip)
                this.tooltip.fadeOut(800);
            this.element.find(".e-no-tab").removeClass("e-no-tab");
            $(evt.currentTarget).removeClass("e-focus");
         this._off($(document),"keydown",this._moveHandle);
            this._off(this.element,"mousewheel DOMMouseScroll", this._moveHandle);
        },

        _moveHandle: function (e) {
            if ((e.type == 'mousewheel') || (e.type=='DOMMouseScroll')) e.preventDefault()
            var oper, val, handleNo, delta;
            handleNo = this._getHandleIndex(this.activeHandle) - 1;
            if ((e.type == 'mousewheel') || (e.type == 'DOMMouseScroll')) {
                var rawEvent = e.originalEvent;
                if (rawEvent.wheelDelta) {
                    delta = rawEvent.wheelDelta / 120;
                }
                else if (rawEvent.detail) {
                    // Firefox uses detail property, which is a multiple of 3.
                    delta = -rawEvent.detail / 3;
                }
                oper = delta > 0 ? 'add' : 'sub';
            }

            switch (e.keyCode || e.originalEvent.wheelDelta) {
                case -120:
                case 37:
                case 40:
                    this._getHandle().addClass("e-no-tab");
                    e.preventDefault();
                    oper = "sub";
                    break;
                case 120:
                case 38:
                case 39:
                    this._getHandle().addClass("e-no-tab");
                    e.preventDefault();
                    oper = "add";
                    break;
                case 36:
                    this._getHandle().addClass("e-no-tab");
                    e.preventDefault();
                    if (this._raiseEvent("start")) return false;
                    if (this.model.sliderType != "range" && this.value() != this.model.minValue) {
                        this._changeHandleValue(this.model.minValue, this.model.enableAnimation);
                    }
                    else if (this.model.sliderType == "range") {
                        val = (this.activeHandle == 2) ? this.model.minValue : this.handleVal2;
                        if (this.values()[handleNo] != val)
                            this._changeHandleValue(val, this.model.enableAnimation);
                    }
                    break;
                case 35:
                    this._getHandle().addClass("e-no-tab");
                    e.preventDefault();
                    if (this._raiseEvent("start")) return false;
                    if (this.model.sliderType != "range" && this.value() != this.model.maxValue) {
                        this._changeHandleValue(this.model.maxValue, this.model.enableAnimation);
                    }
                    else if (this.model.sliderType == "range") {
                        val = (this.activeHandle == 1) ? this.model.maxValue : this.handleVal;
                        if (this.values()[handleNo] != val)
                            this._changeHandleValue(val, this.model.enableAnimation);
                    }
                    break;
                case 27:
                    this._getHandle().addClass("e-no-tab");
                    e.preventDefault();
                    this._getHandle().focusout();
                    break;
            }

            if (oper == "add" || oper == "sub") {
                if (this._raiseEvent("start")) return false;
                var hVal = (this.activeHandle == 1) ? this.handleVal : this.handleVal2;
                var value = (oper == "add") ? this._add(hVal, this.model.incrementStep, true) : this._add(hVal, this.model.incrementStep, false);
                this._changeHandleValue(value, false);
            }
        },

        _changeHandleValue: function (value, animate) {
            var position = null;
            if (this.activeHandle == 1) {
                this.handleVal = this._checkHandleValue(value);
                this.handlePos = this._checkHandlePosition(this.handleVal);

                if (this.model.sliderType == "range" && this.handlePos < this.handlePos2) {
                    this.handlePos = this.handlePos2;
                    this.handleVal = this.handleVal2;
                }
                if (this.handlePos != this.preHandlePos)
                    position = this.preHandlePos = this.handlePos;
            }
            else {
                this.handleVal2 = this._checkHandleValue(value);
                this.handlePos2 = this._checkHandlePosition(this.handleVal2);

                if (this.model.sliderType == "range" && this.handlePos < this.handlePos2) {
                    this.handlePos2 = this.handlePos;
                    this.handleVal2 = this.handleVal;
                }
                if (this.handlePos2 != this.preHandlePos2)
                    position = this.preHandlePos2 = this.handlePos2;
            }

            if (position != null) {
                this._increaseHeaderWidth(animate);
                this._setHandlePosition(animate, true, true);
            }
        },

        _sliderBarClick: function (evt) {
            if (this.model.readOnly) return false;
            if (evt.target == this.target || (this.model.sliderType != "default" && evt.target == this.header[0]) || $(evt.target).hasClass('e-tick') || $(evt.target).hasClass('e-scale') || evt.target == this.wrapper[0]) {
                evt.preventDefault();
                if (this._raiseEvent("start")) return false;
                var pos = { x: evt.pageX, y: evt.pageY },
                handlepos = this._xyToPosition(pos),
                handleVal = this._positionToValue(handlepos);

                if (this.model.sliderType == "range" && (this.handlePos - handlepos) > (handlepos - this.handlePos2)) {
                    this.handlePos2 = this.preHandlePos2 = handlepos;
                    this.handleVal2 = handleVal;
                    this.activeHandle = 2;
                }
                else {
                    this.handlePos = this.preHandlePos = handlepos;
                    this.handleVal = handleVal;
                    this.activeHandle = 1;
                }

                this._getHandle().focus().addClass("e-no-tab");;
                if (this.model.sliderType != "default") this._increaseHeaderWidth(this.model.enableAnimation);
                this._setHandlePosition(this.model.enableAnimation, true, true);
            }
        },

        _setHandlePosition: function (animation, showTooltip, changeEvt) {
            var Handle = this._getHandle(), proxy = this, properties = {}, pos, val, direction;
            pos = (this.activeHandle == 1) ? this.handlePos : this.handlePos2;
            val = (this.activeHandle == 1) ? this.handleVal : this.handleVal2;
            Handle.attr("aria-label", val);
            direction = (this.model.orientation == "vertical") ? this.verDir : this.horDir;
            properties[direction] = pos + "%";
            if (pos == 0) {
                this.model.sliderType != "range" && this._getHandle().addClass("e-handle-start");
            }
            else {
                this._getHandle().removeClass("e-handle-start");
            }
            if (!animation) {
                Handle.css(properties);
                this._showhideTooltip(showTooltip);
                if (changeEvt) this._raiseChangeEvent();
            }
            else {
                if (this._isTransition) {
                    Handle[0].style.transition = 'all ' + this.model.animationSpeed + 'ms';
                    Handle[0].style['-webkit-transition'] = 'all ' + this.model.animationSpeed + 'ms';
                    Handle.css(direction, pos + '%');
                    setTimeout(function () {
                        Handle[0].style.transition = 'none';
                        Handle[0].style['-webkit-transition'] = 'none';
                        proxy._showhideTooltip(showTooltip);
                        if (changeEvt) proxy._raiseChangeEvent();
                    }, this.model.animationSpeed);
                } else {
                    Handle.animate(properties, this.model.animationSpeed, function () {
                        proxy._showhideTooltip(showTooltip);
                        if (changeEvt) proxy._raiseChangeEvent();
                    });
                }
            }
        },

        _xyToPosition: function (position) {
            if (this.model.minValue == this.model.maxValue)
                return 100;
            if (this.model.orientation != "vertical") {
                var left = position.x - this.element.offset().left,
                num = this.element.width() / 100,
                val = (left / num);
            }
            else {
                var top = position.y - this.element.offset().top,
                num = this.element.height() / 100,
                val = 100 - (top / num);
            }
            val = this._stepValueCalculation(val);
            if (val < 0) val = 0;
            else if (val > 100) val = 100;
            if (this.model.enableRTL) return 100 - val;
            return val;
        },

        _updateValue: function () {
            this.handleVal = this._checkHandleValue(this.value());
            this.handlePos = this._checkHandlePosition(this.handleVal);
            this.preHandlePos = this.handlePos;
            this.activeHandle = 1;
        },

        _setValue: function (animation) {
            this._updateValue();
            this._increaseHeaderWidth(animation);
            this._setHandlePosition(animation, false, true);
        },

        _updateRangeValue: function () {
            var values = this.values();
            this.handleVal = this._checkHandleValue(values[1]);
            this.handleVal2 = this._checkHandleValue(values[0]);
            this.handlePos = this._checkHandlePosition(this.handleVal);
            this.handlePos2 = this._checkHandlePosition(this.handleVal2);

            if (this.handlePos < this.handlePos2) {
                this.handlePos = this.handlePos2;
                this.handleVal = this.handleVal2;
            }
            this.preHandlePos = this.handlePos;
            this.preHandlePos2 = this.handlePos2;
        },

        _setRangeValue: function (animation) {
            this._updateRangeValue();
            this._increaseHeaderWidth(animation);
            this.activeHandle = 1;
            this._setHandlePosition(animation, false, false);
            this.activeHandle = 2;
            this._setHandlePosition(animation, false, true);
        },

        _checkHandlePosition: function (value) {
            if (this.model.minValue == this.model.maxValue)
                return 100;
            var handle = this._tempStartEnd();
            if (value >= handle.start && value <= handle.end)
                value = (100 * (value - this.model.minValue)) / (this.model.maxValue - this.model.minValue);
            else if (value < handle.start) value = 0;
            else value = 100;
            return value;
        },

        _checkHandleValue: function (value) {
            if (this.model.minValue == this.model.maxValue)
                return this.model.minValue;
            var handle = this._tempStartEnd();
            if (value < handle.start) value = handle.start;
            else if (value > handle.end) value = handle.end;
            return value;
        },

        _tempStartEnd: function () {
            if (this.model.minValue > this.model.maxValue)
                return {
                    start: this.model.maxValue,
                    end: this.model.minValue
                };
            else
                return {
                    start: this.model.minValue,
                    end: this.model.maxValue
                };
        },

        _positionToValue: function (pos) {
            var diff = this.model.maxValue - this.model.minValue,
            val = this._round(diff * pos / 100),
            total = this._add(val, this.model.minValue, true);
            return total;
        },

        _getHandle: function () {
            return (this.activeHandle == 1) ? this.firstHandle : this.secondHandle;
        },

        _getHandleIndex: function (no) {
            if (this.model.sliderType == "range" && no == 1)
                return 2;
            return 1;
        },

        _getHandleValue: function () {
            if (this.model.sliderType == "range") return [this.handleVal2, this.handleVal];
            else return this.handleVal;
        },

        _updateModelValue: function () {
            var value = this._getHandleValue();
            this._hidden.val(value);
            if (this.model.sliderType == "range") this.values(value);
            else this.value(value);
        },

        _add: function (a, b, addition, precision) {
            var x = Math.pow(10, precision || 3), val;
            if (addition) val = (Math.round(a * x) + Math.round(b * x)) / x;
            else val = (Math.round(a * x) - Math.round(b * x)) / x;
            return val;
        },

        _round: function (a) {
            var _f = this.model.incrementStep.toString().split(".");
            return _f[1] ? parseFloat(a.toFixed(_f[1].length)) : Math.round(a);
        },

        _raiseChangeEvent: function () {
            this._updateModelValue();
            if (this.initialRender)
                this.initialRender = false;
            else {
                if(this.getValue().toString() != this.preValue.toString()){
                        this._raiseEvent("change");
                        this._raiseEvent("stop");
                        this.preValue = this.getValue().toString();
                }
            }
        },

        _raiseEvent: function (name) {
            var data = { id: this.target.id, value: this._getHandleValue(), sliderIndex: this._getHandleIndex(this.activeHandle) };
            if (name == "change")
                data = { id: this.target.id, isInteraction: this._isInteraction, value: this._getHandleValue(), sliderIndex: this._getHandleIndex(this.activeHandle) };
            if (name == "tooltipChange")
                data = { id: this.target.id, isInteraction: this._isInteraction, value: this._getHandleValue(), sliderIndex: this._getHandleIndex(this.activeHandle) };
            var status = this._trigger(name, data);
            if (name == "tooltipChange")
                return data.value;
            return status;
        },

        _setZindex: function () {
            if (this.model.sliderType == "range") {
                if (this.activeHandle == 1) {
                    this.firstHandle.css("z-index", 2);
                    this.secondHandle.css("z-index", 1);
                }
                else {
                    this.firstHandle.css("z-index", 1);
                    this.secondHandle.css("z-index", 2);
                }
            }
        },

        _stepValueCalculation: function (value) {
            if (this.model.incrementStep == 0) this.model.incrementStep = 1;
            var percentStep = this.model.incrementStep / ((this.model.maxValue - this.model.minValue) / 100);
            var remain = value % Math.abs(percentStep);
            if (remain != 0) {
                if ((percentStep / 2) > remain) value -= remain;
                else value += Math.abs(percentStep) - remain;
            }
            return value;
        },

        _wireEvents: function () {
            this._on(this.wrapper, "mousedown", this._sliderBarClick);
            this._on(this.firstHandle, ej.eventType.mouseDown, this._firstHandleClick);
            this._on(this.firstHandle, "mouseenter", this._hoverOnHandle);
            this._on(this.firstHandle, "mouseleave", this._leaveFromHandle);
            this._on(this.firstHandle, "focusin", this._focusInHandle);
            this._on(this.firstHandle, "focusout", this._focusOutHandle);

            if (this.model.sliderType == "range") {
                this._on(this.secondHandle, ej.eventType.mouseDown, this._secondHandleClick);
                this._on(this.secondHandle, "mouseenter", this._hoverOnHandle);
                this._on(this.secondHandle, "mouseleave", this._leaveFromHandle);
                this._on(this.secondHandle, "focusin", this._focusInHandle);
                this._on(this.secondHandle, "focusout", this._focusOutHandle);
            }
        },


        _unWireEvents: function () {
            this._off(this.wrapper, "mousedown");
            this._off(this.firstHandle, ej.eventType.mouseDown);
            this._off(this.firstHandle, "mouseenter");
            this._off(this.firstHandle, "mouseleave");
            this._off(this.firstHandle, "focusin");
            this._off(this.firstHandle, "focusout");

            if (this.model.sliderType == "range") {
                this._off(this.secondHandle, ej.eventType.mouseDown);
                this._off(this.secondHandle, "mouseenter");
                this._off(this.secondHandle, "mouseleave");
                this._off(this.secondHandle, "focusin");
                this._off(this.secondHandle, "focusout");
            }
        }
    });

    ej.SliderType = {
        /**  support for slider control to select a single value. */
        Default: "default",
        /**  support for slider control to select a single value considered from start value to current handle. */
        MinRange: "minrange",
        /**  support for slider control to select a range of value between the two handles. */
        Range: "range"
    };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html Button elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejSplitButton", "ej.SplitButton", {

        element: null,

        model: null,
        validTags: ["button"],
        _setFirst: false,

        _rootCSS: "e-splitbutton",

        defaults: {

            size: "normal",

            width: "",

            height: "",

            enabled: true,

            htmlAttributes: {},

            text: null,

            contentType: "textonly",

            imagePosition: "imageleft",

            buttonMode: "split",

            arrowPosition: "right",

            targetID: null,

            target: null, 

            showRoundedCorner: false,

            prefixIcon: null,

            suffixIcon: null,

            cssClass: "",

            enableRTL: false,

            create: null,

            beforeOpen: null,

            click: null,

            itemMouseOver: null,

            itemMouseOut: null,

            itemSelected: null,

            open: null,

            close: null,

            destroy: null,

            popupPosition: "down",
    
        },

        dataTypes: {
            size: "string",
            enabled: "boolean",
            showRoundedCorner: "boolean",
            text: "string",
            contentType: "enum",
            imagePosition: "enum",
            buttonMode: "enum",
            arrowPosition: "enum",
            target: "string",       
            targetID: "string",
            prefixIcon: "string",
            suffixIcon: "string",
            cssClass: "string",
            enableRTL: "boolean",
            htmlAttributes: "data"
        },


        disable: function () {
            this.element.addClass("e-disable");
            this.wrapper.addClass("e-disable");
            if (this.contstatus) {
                this._hidePopup();
            }
            if (this.model.buttonMode == ej.ButtonMode.Split)
                this.dropbutton.addClass("e-disable").attr("aria-disabled", true);
            if (this.model.buttonMode == ej.ButtonMode.Dropdown)
                this.btnimgwrap.addClass("e-disable").attr("aria-disabled", true);
            this.model.enabled = false;
        },

        visible: function (display) {
            if (!display) {
               this.wrapper.addClass("e-split-btn-hide");
               this.wrapper.find(".e-icon").css("visibility", "hidden");
            }
            else {
               this.wrapper.removeClass("e-split-btn-hide");
               this.wrapper.find(".e-icon").css("visibility", "");
            }
        },

        enable: function () {
            this.element.removeClass("e-disable");
            this.wrapper.removeClass("e-disable");
            if (this.model.buttonMode == ej.ButtonMode.Split)
                this.dropbutton.removeClass("e-disable").attr("aria-disabled", false);
            if (this.model.buttonMode == ej.ButtonMode.Dropdown)
                this.btnimgwrap.removeClass("e-disable").attr("aria-disabled", false);
            this.model.enabled = true;
        },

        hide: function () {
            if (this.contstatus) {
                this._hidePopup();
            }
        },

        show: function () {
            if (!this.contstatus) {
                if (this.model.buttonMode == ej.ButtonMode.Dropdown)
                    this.element.click();
                else if (this.model.buttonMode == ej.ButtonMode.Split)
                    this.dropbutton.click();
            }
        },

        setPopupPosition: function (val) {
            this._setPosition = true;
            this._val = val;
        },

        _init: function () {
            this._cloneElement = this.element.clone();
            this._setPosition = false;
            this._initialize();
            this._controlStatus(this.model.enabled);
            this._documentClickHandler = $.proxy(this._documentClick, this);
            this._wireEvents();
        },

        _createElement: function (tagName, attrs) {
            var ele = document.createElement(tagName);
            this._setAttributes(ele, attrs);
            return $(ele);
        },
        _setAttributes: function (ele, attrs) {
            for (var key in attrs) {
                ele.setAttribute(key, attrs[key]);
            }
        },

        _destroy: function () {
            if (this.contstatus) {
                this._hide();
            }
            this.splitwrap.removeClass("e-drop");
            this.splitwrap.removeClass("e-btn-" + this.model.size);
            this.innerWrap.removeClass("e-splitarrowright e-splitarrowleft e-splitarrowbottom e-splitarrowtop");
            this.element.removeClass(this.model.cssClass + "e-ntouch e-select e-corner e-btn e-disable e-split-btn e-droparrowright e-droparrowleft e-droparrowbottom e-droparrowtop e-left-btn e-txt").empty();
            this.element.append(this._cloneElement.text());
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
            if(this._contextObj) this._contextObj.model && this._contextObj.destroy();            
			if(this._contextObj) this._contextObj = null;			
            //this has to be worked out in Menu
            $(this.model.target).show();
            $(this.model.target).insertAfter(this.element); 
            this._off(this.element, "click", this._btnMouseClick);
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "size":
                        this._setSize(options[option]);
                        break;
                    case "width":
                        this._splitbtnWidth(options[option]);
                        break;
                    case "height":
                        this._splitbtnHeight(options[option]);
                        break;
                    case "contentType":
                        this._setContentType(options[option]);
                        break;
                    case "imagePosition":
                        this._setImagePosition(options[option]);
                        break;
                    case "buttonMode":
                        this._setButtonMode(options[option]);
                        break;
                    case "arrowPosition":
                        this._setArrowPosition(options[option]);
                        break;
                    case "text":
                        this._setText(options[option]);
                        break;
                    case "prefixIcon":
                        this._setMajorIcon(options[option]);
                        break;
                    case "suffixIcon":
                        this._setMinorIcon(options[option]);
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "targetID":
                    case "target":
                        this._setTarget(options[option]);
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        break;
                    case "htmlAttributes":
                        this._addAttr(options[option]);
                        break;
                    case "popupPosition":
                        this._setPopupPosition(options[option]);
                        break;
                }
            }
        },

        _setText: function (val) {
            if (this.model.contentType == ej.ContentType.TextOnly) {
                if (this.model.buttonMode == ej.ButtonMode.Split)
                    this.element.html(val);
                else {
                    this.element.empty();
                    this.imgtxtwrap = val;
                    if (this.model.arrowPosition == ej.ArrowPosition.Left || this.model.arrowPosition == ej.ArrowPosition.Top)
                        this.element.append(this.btnimgwrap, this.imgtxtwrap);
                    else
                        this.element.append(this.imgtxtwrap, this.btnimgwrap);
                }
            } else {
                this.textspan.html(val);
            }
        },

        _setMajorIcon: function (val) {
            this.majorimgtag.removeClass(this.model.prefixIcon);
            this.majorimgtag.addClass(val);
        },

        _setMinorIcon: function (val) {
            this.minorimgtag.removeClass(this.model.suffixIcon);
            this.minorimgtag.addClass(val);
        },
        _setTarget: function (val) {
            if ((val.substring(0, 1) == ".") || (val.substring(0, 1) == "#")) {
                this.model.target = val; 
            }
            else {
                this.model.targetID = val;
                this.model.target = "#" + val;
            }
            this._renderContxtMenu();
        },

        _setContentType: function (val) {
            if (val != this.model.contentType) {
                this.element.empty();
                this.model.contentType = val;
                this._renderButtonContent();
            }
        },

        _setImagePosition: function (val) {
            if (val == ej.ImagePosition.ImageRight || val == ej.ImagePosition.ImageLeft || val == ej.ImagePosition.ImageBottom || val == ej.ImagePosition.ImageTop) {
                if ((this.model.contentType == ej.ContentType.TextAndImage) && (val != this.model.imagePosition)) {
                    this.element.empty();
                    this.model.imagePosition = val;
                    this._renderButtonContent();
                }
            }
        },

        _setButtonMode: function (val) {
            if (val == ej.ButtonMode.Split || val == ej.ButtonMode.Dropdown) {
                if (val != this.model.buttonMode) {
                    this._destroy();
                    this.model.buttonMode = val;
                    this._init();
                }
            }
        },

        _setArrowPosition: function (val) {
            if (val == ej.ArrowPosition.Right || val == ej.ArrowPosition.Left || val == ej.ArrowPosition.Bottom || val == ej.ArrowPosition.Top) {
                if ((this.model.buttonMode == ej.ButtonMode.Dropdown) && (val != this.model.arrowPosition)) {
                    this.model.arrowPosition = val;
                    this.element.empty();
                    this._setSize(this.model.size);
                    this.element.removeClass("e-droparrowright e-droparrowleft e-droparrowbottom e-droparrowtop");
                    this._renderButtonContent();
                }
                else if ((this.model.buttonMode == ej.ButtonMode.Split) && (val != this.model.arrowPosition)) {
                    this.model.arrowPosition = val;
                    this._setSize(this.model.size);
                    this.innerWrap.removeClass("e-splitarrowright e-splitarrowleft e-splitarrowbottom e-splitarrowtop");
                    this._setRTL(this.model.enableRTL);
                }
            }
        },

        _setPopupPosition: function (val) {
            this.model.popupPosition = val;
            if (this.model.popupPosition == "down")
                this.dropdownimg.addClass("e-arrow-sans-down").removeClass("e-arrow-sans-up");
            if (this.model.popupPosition == "up")
                this.dropdownimg.addClass("e-arrow-sans-up").removeClass("e-arrow-sans-down");
        },

        _setRTL: function (val) {
            if (this.model.buttonMode == ej.ButtonMode.Split) {
                this.dropdownimg.removeClass("e-arrow-sans-up").addClass("e-arrow-sans-down");
                switch (this.model.arrowPosition) {
                    case ej.ArrowPosition.Right:
                        this.innerWrap.addClass("e-splitarrowright");
                        break;
                    case ej.ArrowPosition.Left:
                        this.innerWrap.addClass("e-splitarrowleft");
                        break;
                    case ej.ArrowPosition.Bottom:
                        this.innerWrap.addClass("e-splitarrowbottom");
                        break;
                    case ej.ArrowPosition.Top:
                        this.innerWrap.addClass("e-splitarrowtop");
                        this.dropdownimg.addClass("e-arrow-sans-up").removeClass("e-arrow-sans-down");
                        break;
                }
                val == true ? (this.innerWrap.hasClass("e-splitarrowleft") ? "" : this.splitwrap.addClass("e-rtl e-btnrtl")) && (this._contextObj && this._contextObj.model && this._contextObj.element.addClass('e-rtl')) : this.splitwrap.removeClass("e-rtl e-btnrtl") && (this._contextObj && this._contextObj.model && this._contextObj.element.removeClass('e-rtl'));
            }
            else
                val == true ? this.splitwrap.addClass('e-rtl') && (this._contextObj && this._contextObj.model && this._contextObj.element.addClass('e-rtl')) : this.splitwrap.removeClass('e-rtl') && (this._contextObj && this._contextObj.model && this._contextObj.element.removeClass('e-rtl'));
            this.model.enableRTL = val;
            this._roundedCorner(this.model.showRoundedCorner);
        },

        _roundedCorner: function (value) {
            if (value) {
                this.element.addClass('e-corner');
                if ($(this.model.target).length > 0) $(this.model.target).addClass('e-corner');  
            } else {
                this.element.removeClass('e-corner');
                if ($(this.model.target).length > 0) $(this.model.target).removeClass('e-corner');
            }
        },

        _controlStatus: function (value) {
            if (!value) {
                this.disable();
            } else {
                this.enable();
            }
        },

        _setSkin: function (skin) {
            this.element.removeClass(this.model.cssClass);
            if (this.model.buttonMode == ej.ButtonMode.Split) {
                this.dropbutton.removeClass(this.model.cssClass);
                this.dropbutton.addClass(skin);
            }
            this.element.addClass(skin);
            if(this._contextObj) this._contextObj.model && this._contextObj.option('cssClass', skin);  
        },

        _initialize: function () {
            if (this.element.is("button") || this.element.is("ej-splitbutton")) {
                this._render();
            } else {
                this.element.removeClass("e-splitbutton");//need to change in src level
            }
            this._timeout = null;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy._controlStatus(false);
                else proxy.wrapper.attr(key, value)
            });
        },


        _render: function () {
            this.element.addClass(this.model.cssClass + " e-btn e-select e-split-btn " + (!ej.isTouchDevice() ? "e-ntouch" : ""));
            this._setAttributes(this.element[0]);
            if ((this.model.text == null) || (this.model.text == "")) {
                this.model.text = this.element.text();
            }
            else
                this._setAttributes(this.element[0],{"aria-describedby": this.model.text});
            if (this.model.buttonMode != ej.ButtonMode.Split && this.model.buttonMode != ej.ButtonMode.Dropdown)
                this.model.buttonMode = ej.ButtonMode.Split;
            if (this.model.arrowPosition != ej.ArrowPosition.Right && this.model.arrowPosition != ej.ArrowPosition.Left && this.model.arrowPosition != ej.ArrowPosition.Bottom && this.model.arrowPosition != ej.ArrowPosition.Top)
                this.model.arrowPosition = ej.ArrowPosition.Right;
            this.element.empty();
            this.splitwrap = (this.model.buttonMode == ej.ButtonMode.Split ? this._createElement('span', { 'class': 'e-split e-widget' }) : this._createElement('span', { 'class': 'e-split e-drop e-widget' }));
            this.splitwrap.insertBefore(this.element);
            this.innerWrap = this._createElement('span', { 'class': 'e-in-wrap e-box e-padding' });
            this.splitwrap[0].appendChild(this.innerWrap[0]);
            this.wrapper = this.splitwrap;
            /*DropDown Image*/
            this.dropdownimg = this._createElement('span', { "class": "e-icon e-arrow-sans-down" });
            this.dropdownimage = this._createElement('span', { "class": "e-icon e-arrow-sans-up" });
            this.btnimgwrap = this._createElement('span', { 'class': 'e-split-btn-div e-btn-span' });
            if (this.model.popupPosition == "up")
                this.btnimgwrap[0].appendChild(this.dropdownimage[0])
            else
            this.btnimgwrap[0].appendChild(this.dropdownimg[0]);
            /*Split Button*/
            if (this.model.buttonMode == ej.ButtonMode.Split) {
                this.dropbutton = ej.buildTag('button.e-split-btn e-btn e-select ' + this.model.cssClass + ' e-drp-btn' + (!ej.isTouchDevice() ? " e-ntouch" : ""), "", {}, { type: "button", "data-role": "none", "id": this.element[0].id + 'drpbtn' });
                this.dropbutton[0].appendChild(this.btnimgwrap[0]);
                this.dropbutton.insertAfter(this.element);
                if (this.model.contentType == ej.ContentType.TextOnly)
                    this.dropbutton.addClass("e-btn-txt");
                else
                    this.dropbutton.addClass("e-rht-btn");
            }
            this._setSize(this.model.size);
            this.element.addClass("e-left-btn");
            this._renderButtonContent();
            if (this.model.buttonMode == ej.ButtonMode.Dropdown)
                this.innerWrap[0].appendChild(this.element[0]);
            else {
                this.innerWrap[0].appendChild(this.element[0]);
                this.innerWrap[0].appendChild(this.dropbutton[0]);
            }
            /* If target ID is set, the value of target will be set to target prefixed with # tag */
            if ((this.model.target == null) && (this.model.targetID != null)) {
                this.model.target = "#"+this.model.targetID;
            }
            /*Rendering Context menu*/
            $(this.model.target).hide();
            this._roundedCorner(this.model.showRoundedCorner);
            this._setRTL(this.model.enableRTL);
            this._addAttr(this.model.htmlAttributes);
        },

        _renderButtonContent: function () {
            /*Image and Text*/
            this.textspan = ej.buildTag('span.e-btntxt', this.model.text);
            this.majorimgtag = ej.buildTag('span').addClass(this.model.prefixIcon);
            this.minorimgtag = ej.buildTag('span').addClass(this.model.suffixIcon);
            this.imgtxtwrap = ej.buildTag('span').addClass('e-btn-span');;
            /*Rendering Option*/
            if (this.model.contentType == ej.ContentType.TextAndImage) {
                switch (this.model.imagePosition) {
                    case ej.ImagePosition.ImageRight:
                        this.imgtxtwrap.append(this.textspan, this.majorimgtag);
                        break;
                    case ej.ImagePosition.ImageLeft:
                        this.imgtxtwrap.append(this.majorimgtag, this.textspan);
                        break;
                    case ej.ImagePosition.ImageBottom:
                        this.majorimgtag.css("display", "inline-table");
                        this.imgtxtwrap.append(this.textspan, this.majorimgtag);
                        break;
                    case ej.ImagePosition.ImageTop:
                        this.majorimgtag.css("display", "inline-table");
                        this.imgtxtwrap.append(this.majorimgtag, this.textspan);
                        break;
                }
            } else if (this.model.contentType == ej.ContentType.ImageTextImage) {
                this.imgtxtwrap.append(this.majorimgtag, this.textspan, this.minorimgtag);
            } else if (this.model.contentType == ej.ContentType.ImageBoth) {
                this.imgtxtwrap.append(this.majorimgtag, this.minorimgtag);
            } else if (this.model.contentType == ej.ContentType.ImageOnly) {
                this.imgtxtwrap.append(this.majorimgtag);
            } else {
                this.element.addClass("e-txt");
                this.imgtxtwrap = this.model.text;
            }
            if (this.model.buttonMode == ej.ButtonMode.Dropdown)
                this._renderDropdownArrow();
            else
                this.element.append(this.imgtxtwrap);
        },

        _renderDropdownArrow: function () {
            this.btnimgwrap.css("position", "absolute");
            this.dropdownimg.removeClass("e-arrow-sans-up").addClass("e-arrow-sans-down");
            switch (this.model.arrowPosition) {
                case ej.ArrowPosition.Right:
                    this.element.addClass("e-droparrowright");
                    this.element.append(this.imgtxtwrap, this.btnimgwrap);
                    break;
                case ej.ArrowPosition.Left:
                    this.element.addClass("e-droparrowleft");
                    this.element.append(this.btnimgwrap, this.imgtxtwrap);
                    break;
                case ej.ArrowPosition.Bottom:
                    this.element.addClass("e-droparrowbottom");
                    this.element.append(this.imgtxtwrap, this.btnimgwrap);
                    break;
                case ej.ArrowPosition.Top:
                    this.element.addClass("e-droparrowtop");
                    this.dropdownimg.addClass("e-arrow-sans-up").removeClass("e-arrow-sans-down");
                    this.element.append(this.btnimgwrap, this.imgtxtwrap);
                    break;
            }
        },


        _setSize: function (val) {
            this.wrapper.css({ "height": "", "width": "" });
            switch (val) {
                case "mini":
                    this._splitbtnSize(val);
                    break;
                case "small":
                    this._splitbtnSize(val);
                    break;
                case "medium":
                    this._splitbtnSize(val);
                    break;
                case "large":
                    this._splitbtnSize(val); 
                    break;
                default:
                    this._splitbtnSize(val);
                    break;
            }
            if ((this.model.arrowPosition == ej.ArrowPosition.Bottom || this.model.arrowPosition == ej.ArrowPosition.Top) && this.model.height == "")
                this.splitwrap.addClass("e-btn-arrowsplit-" + val);		   // 15px added the height of the wrapper due to Arrow positioned in bottom
            var wd, ht = this.model.height === "" ? this.wrapper.outerHeight() + "px" : this.model.height;
            this._splitbtnHeight(ht);
            if (this.model.size !== "normal") {
                wd = this.model.width === "" ? this.wrapper.outerWidth() + "px" : this.model.width;
                this._splitbtnWidth(wd);
            }
            else if (this.model.width !== "") {
                wd = this.model.width;
                this._splitbtnWidth(wd);
            }
        },

        _splitbtnSize: function (val) {
        
            this.splitwrap.removeClass('e-btn-mini e-btn-medium e-btn-small e-btn-large e-btn-normal e-btn-arrowsplit-large e-btn-arrowsplit-small e-btn-arrowsplit-mini e-btn-arrowsplit-medium e-btn-arrowsplit-normal');
            if (this.model.arrowPosition == ej.ArrowPosition.Left || this.model.arrowPosition == ej.ArrowPosition.Right)
            {
            this.splitwrap.addClass("e-btn-" + val);
            }
        },
        _splitbtnHeight: function (val) {
           if ((val == "") || (val == null)) val = '30px';
          this.splitwrap.css("height", val);
        },


        _splitbtnWidth: function (val) {
            this.splitwrap.css("width", val);
        },


        _renderContxtMenu: function () {
            /* Check whether target is a class and add a id to that target element if id of that element is not given */
            if ((this.model.target != null) && ($(this.model.target).attr("id") == null)) {
                if (this.model.target.substring(0, 1) == ".") {
                    $(this.model.target).attr("id", this.element.attr('id') + "_" + this.model.target.replace(".", ""));
                }
            }
            
            $(this.model.target).ejMenu({
                menuType: ej.MenuType.ContextMenu,
                openOnClick: false,
                contextMenuTarget: "",
                fields: this.model.fields,
                showArrow: true,
                cssClass: "e-split " + this.model.cssClass,
                enableRTL: this.model.enableRTL
            }).on("ejMenuclose", $.proxy(this._onKeyDown, this));
            this._contextObj = $(this.model.target).ejMenu("instance");
        },
        _onKeyDown: function (e) {
            e.keyCode == 27 && this._hide();
        },
        _itemClick: function (args) {
            args = { status: this.model.enabled, ID: args.ID, text: args.text };
            this._trigger("itemSelected", args);
            (!$(args.element).hasClass("e-haschild")) && this._hide();
        },

        _itemMouseOver: function (args) {
            this._trigger("itemMouseOver", args);
        },

        _itemMouseOut: function (args) {
            this._trigger("itemMouseOut", args);
        },


        _wireEvents: function () {
            this._on(this.element, "click", this._btnMouseClick);
            this._on(this.element, "mousedown", this._btnMouseDown);
            /*DrpBTN*/
            if (this.model.buttonMode == ej.ButtonMode.Split)
                this._on(this.dropbutton, "click", this._btnMouseClick);
            /*DocClk*/
            this._on($(document), "mousedown", this._docrhtclk);
        },


        _btnMouseClick: function (e) {
            !this._contextObj ? this._renderContxtMenu() : !this._contextObj.model && this._renderContxtMenu();
            var args;
            if(!this.model.enabled) return false;
            if (!$(e.currentTarget).hasClass("e-disable")) {
                if (e.currentTarget.id != this.element[0].id + "drpbtn" && this.model.buttonMode == ej.ButtonMode.Split) {
                    args = { status: this.model.enabled };
                    this._trigger("click", args);
                } else {
                    !this.contstatus && this._trigger("beforeOpen");
                    this.wrapper.addClass('e-active');
                    if (this.contstatus) {
                        this._hidecontext(e);
                    } else {
                        this._contextPosition(e);
                        this._trigger("open");
                        this._on($(window), "resize", this._OnWindowResize);
                        this.contstatus = true;
                        this.element.on("click", $.proxy(this._hidecontext, this));
                        ej.listenTouchEvent($(document), ej.startEvent(), this._documentClickHandler, false, this);
                        this._on(ej.getScrollableParents(this.wrapper), "scroll", this._hidePopup);
                    }
                }
            }
        },

        _OnWindowResize: function (e) {
            this._contextPosition(e);
        },

        _contextPosition: function (e,value,m,n) {
            if (this._contextObj.model) {
                if (this._setPosition) 
                    var position = this._val;
                else
                var position = this._getXYpos(e);
                var posleft, targetElement, posadjustleft;
                targetElement = (this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton : this.element);
                var contextObj = this._contextObj;
                posleft = position.x - ($(this.model.target).outerWidth() - (this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton.outerWidth() : this.element.outerWidth()));
                if (this.model.enableRTL)
                    position.x = (this.model.popupPosition=="left" || (posleft < $(this.model.target).outerWidth())) ? position.x : posleft;
                else
                    position.x = ((this.model.popupPosition == "left") || (position.x + $(this.model.target).outerWidth() < $(window).width())) ? position.x : posleft;
                if (this._posright < 0 && this.model.popupPosition == "left") position.x = $(window).outerWidth();
                 contextObj.option({
                    click: $.proxy(this._itemClick, this),
                    mouseover: $.proxy(this._itemMouseOver, this),
                    mouseout: $.proxy(this._itemMouseOut, this)
                 });
                 if (value)
                     contextObj.show(m, n, targetElement, e);
                else
                 contextObj.show(position.x, position.y, targetElement, e);
            }
        },

        _getXYpos: function (e) {
            var btnpos, btnposx, btnposy, posleft, posright, poscur = 1, postop;
            btnpos = this._getOffset(this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton : this.element);
            posleft = (this.model.popupPosition == "right" && ((!this.model.enableRTL) && (this.model.arrowPosition != ej.ArrowPosition.Left) && (this.model.arrowPosition != ej.ArrowPosition.Bottom) && (this.model.arrowPosition != ej.ArrowPosition.Top))) ? (this.model.buttonMode == ej.ButtonMode.Split?(btnpos.left + this.dropbutton.outerWidth()):(btnpos.left + this.element.outerWidth())) : ((this.model.popupPosition == "left" && (((this.model.enableRTL)||(this.model.arrowPosition != ej.ArrowPosition.Right)) && (this.model.arrowPosition != ej.ArrowPosition.Bottom) && (this.model.arrowPosition != ej.ArrowPosition.Top)))) ? (btnpos.left - ($(this.model.target).outerWidth())) : btnpos.left;
            this._posright = ($(window).width() - posleft) - ($(this.model.target).outerWidth());
            this._posleft = posleft - $(this.model.target).outerHeight();
            this._posrightht = ($(window).height() - btnpos.top - $(this.model.target).outerHeight());
            btnposx = ((this.model.popupPosition=="right" && (this._posright<0))||(posleft < 0))  ? (btnpos.left) : posleft;
            postop = ((this.model.arrowPosition == ej.ArrowPosition.Top) || (this.model.popupPosition == "up")) ? (btnpos.top - $(this.model.target).outerHeight() + 1) : (((this.model.arrowPosition != ej.ArrowPosition.Top) && (this.model.arrowPosition != ej.ArrowPosition.Bottom) && ((((this.model.arrowPosition == ej.ArrowPosition.Right) != (this.model.popupPosition == "left")) || ((this.model.arrowPosition == ej.ArrowPosition.Right) && this.model.enableRTL && (this.model.popupPosition == "left"))) && (((this.model.arrowPosition == ej.ArrowPosition.Left)) != (this.model.popupPosition == "right")) || ((this.model.arrowPosition == ej.ArrowPosition.Right) && this.model.enableRTL && (this.model.popupPosition == "left"))) && (((!this.model.enableRTL) && (this.model.popupPosition == "right")) || (this.model.popupPosition == "left")))  ? (btnpos.top) : ((this.model.buttonMode == ej.ButtonMode.Split ? (btnpos.top + this.dropbutton.outerHeight()) : (btnpos.top + this.element.outerHeight())) - poscur));//1px added to top due to element border-top as none
            btnposy =((this.model.popupPosition == "left") && this._posrightht < 0 && this._posright > 0 && this._posleft <0) ? (btnpos.top - ($(this.model.target).outerHeight())) : ((this.model.popupPosition == "left") && this._posrightht < 0 && this._posright > 0) ? (btnpos.top+this.element.outerHeight() - ($(this.model.target).outerHeight())) : ((this.model.popupPosition == "right"||this.model.popupPosition=="up"||this.model.popupPosition) && this._posrightht < 0 && this._posright < 0) ? (btnpos.top - ($(this.model.target).outerHeight())) : ((this.model.popupPosition == "right" || this.model.popupPosition == "left") && this._posrightht < 0) ? (btnpos.top + this.element.outerHeight() - ($(this.model.target).outerHeight())) : (this.model.popupPosition == "right" && this._posright < 0 && this._posrightht > 0) ? btnpos.top + this.element.outerHeight() :(this.model.popupPosition=="down"&&this._posrightht<0&&this._posright>0)?(btnpos.top-$(this.model.target).outerHeight()):((posleft < 0) || (this._posright < 0)) ? (btnpos.top + this.element.outerHeight()) : (postop < 0) ? (this.model.buttonMode == ej.ButtonMode.Split && this.model.popupPosition == "up" && this.model.arrowPosition != ej.ArrowPosition.Top) ? (btnpos.top + this.element.outerHeight() - poscur) : ((btnpos.top + (this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton.outerHeight() + this.element.outerHeight() : this.element.outerHeight()) - poscur)) : postop;
            return { x: btnposx, y: btnposy };
        },
        _getOffset: function (ele) {
            var pos = ele.offset();
            if ($("body").css("position") != "static") {
                var bodyPos = $("body").offset();
                pos.left -= bodyPos.left;
                pos.top -= bodyPos.top;
            }
            return pos;
        },


        _btnMouseDown: function (e) {
            if (!$(e.currentTarget).hasClass("e-disable")) {
                this._docrhtclk(e);
            }
        },
        _hidePopup: function (e) {
           this._contextObj && this._contextObj.hide(e);   
            this._hide();
            this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hidePopup);
        },
        _hide: function () {
            this.contstatus = false;
            this.wrapper.removeClass('e-active');
            this.element.off("click", $.proxy(this._hidecontext, this));
            ej.listenTouchEvent($(document), ej.startEvent(), this._documentClickHandler, true, this);
            this._off($(window), "resize", this._OnWindowResize);
            this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hide);
            this._closeEvent();
        },
        _closeEvent: function () {
            this._trigger("close");
        },

        _hidecontext: function (e) {
            if (($(e.target).is(this.element) || $(e.target).is(this.dropbutton) || $(e.target).is(this.textspan) || $(e.target).is(this.dropdownimg) || $(e.target).is(this.btnimgwrap) || !$(e.target).is(this.majorimgtag) || !$(e.target).is(this.minorimgtag)) && !$(e.target).is(this.splitwrap) && !$(e.target).parents().is($(this.model.target)) || (this.element.hasClass("e-txt") || $(e.target).is(this.imgtxtwrap))) {
                this._hidePopup(e);
            }
        },

        _documentClick: function (e) {
            if (!$(e.target).is(this.element) && !$(e.target).is(this.dropbutton) && !$(e.target).is(this.textspan) && !$(e.target).is(this.dropdownimg) && !$(e.target).is(this.btnimgwrap) && !$(e.target).is(this.majorimgtag) && !$(e.target).is(this.minorimgtag) && !$(e.target).is(this.splitwrap) && !$(e.target).parents().is($(this.model.target)) && (this.element.hasClass("e-txt") || !$(e.target).is(this.imgtxtwrap))) {
                this._hidePopup(e);
            }
        },

        _docrhtclk: function (e) {
            var isRightClick, targetElement;
            isRightClick = false;
            if (e.button) {
                isRightClick = (e.button == 2);
            } else if (e.which) {
                isRightClick = (e.which == 3); //for Opera
            }
            targetElement = e.target;
            if (isRightClick) {
                e.preventDefault();
            }
        },

    });

    ej.ContentType = { TextOnly: "textonly", ImageOnly: "imageonly", ImageBoth: "imageboth", TextAndImage: "textandimage", ImageTextImage: "imagetextimage" };

    ej.ImagePosition = { ImageRight: "imageright", ImageLeft: "imageleft", ImageTop: "imagetop", ImageBottom: "imagebottom" };

    ej.ButtonSize = { Mini: "mini", Small: "small", Medium: "medium", Large: "large" };

    ej.ButtonMode = { Split: "split", Dropdown: "dropdown" };

    ej.ArrowPosition = { Right: "right", Left: "left", Top: "top", Bottom: "bottom" };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Menu control.
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) { 
    ej.widget("ejMenu", "ej.Menu", {

        element: null,

        model: null,
        validTags: ["ul"],
        _setFirst: false,
        _rootCss: "e-menu",
        angular: {
            terminal: false
        },


        defaults: {

            height: "",

            width: "",

            animationType: "default",

            orientation: ej.Orientation.Horizontal,

            menuType: "normalmenu",
			
			isResponsive: true,

            contextMenuTarget: null,

            htmlAttributes: {},

            cssClass: "",

            openOnClick: false,

            subMenuDirection: "none",

            enableCenterAlign: false,

            showRootLevelArrows: true,

            showSubLevelArrows: true,

            enableAnimation: true,
            
            container: null,

            enableSeparator: true,

            enabled: true,

            overflowHeight: "auto",

            overflowWidth: "auto",

            fields: {

                child: null,

                dataSource: null,

                query: null,

                tableName: null,

                id: "id",

                parentId: "parentId",

                text: "text",

                spriteCssClass: "spriteCssClass",

                url: "url",

                imageAttribute: "imageAttribute",

                htmlAttribute: "htmlAttribute",

                linkAttribute: "linkAttribute",

                imageUrl: "imageUrl",
            },

            enableRTL: false,

            titleText: "Menu",

            locale: "en-US",

            excludeTarget: null,

            beforeOpen: null,

            open: null,

            close: null,

            mouseover: null,

            mouseout: null,

            click: null,

            keydown: null,

            overflowOpen: null,

            overflowClose:null,

            create: null,

            destroy: null
        },

        dataTypes: {
            animationType: "enum",
            cssClass: "string",
            titleText: "string",
            locale: "string",
            openOnClick: "boolean",
            enabled: "boolean",
            enableCenterAlign: "boolean",
            showArrow: "boolean",
            showRootLevelArrows: "boolean",
            showSubLevelArrows: "boolean",
            enableSeparator: "boolean",
			isResponsive: "boolean",
            enableRTL: "boolean",
            enableAnimation: "boolean",
            fields: {
                dataSource: "data",
                query: "data",
                child: "data"
            },
            excludeTarget: "string",
            htmlAttributes: "data"
        },


        _setModel: function (jsondata) {
            for (var key in jsondata) {
                switch (key) {
                    case "menuType":
                        jsondata[key] = this.model.menuType;
                        break;
                    case "fields":
                        this._wireEvents("_off");
                        this.element.empty().insertBefore(this.wrapper);
                        this.wrapper.remove();
                        $.extend(this.model.fields, jsondata[key]);
                        this._intializeData();
                        if (!this.model.enabled)
                            this._wireEvents("_off");
                        break;
                    case "orientation": this._setOrientation(jsondata[key]); break;
                    case "showRootLevelArrows": this._addArrow(jsondata[key], this.model.showSubLevelArrows); break;
                    case "showSubLevelArrows": this._addArrow(this.model.showRootLevelArrows, jsondata[key]); break;
                    case "enableSeparator": this._setSeparator(jsondata[key]); break;
                    case "height": this._setHeight(jsondata[key]); break;
                    case "width": this._setWidth(jsondata[key]); break;
                    case "cssClass": this._setSkin(jsondata[key]); break;
                    case "isResponsive":
                        if (this.model.isResponsive)
                            this._responsiveLayout();
                        else {
                            $(this.resWrap).remove();
                            $(this.wrapper).removeClass("e-menu-responsive");
                            $(this.element).removeClass("e-menu-responsive");
                            this.resWrap = null;
                        }
                        break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "enableRTL": this._setRTL(jsondata[key]); break;
                    case "enableCenterAlign": this._centerAlign(jsondata[key]); break;
                    case "excludeTarget": this.model.excludeTarget = jsondata[key];
                        break;
                    case "enabled": this.model.enabled = jsondata[key]; this._controlStatus(jsondata[key]); break;
                    case "animationType":
                        this._setAnimation(jsondata[key]);
                        break;
                    case "enableAnimation": this.model.enableAnimation = jsondata[key]; break;
                    case "openOnClick":
                            this._hoverOpen = !jsondata[key];
                            this._hoverClose = !jsondata[key]; 
                        break;
                    case "subMenuDirection": this._setSubMenuDirection(this.model.subMenuDirection); break;
                    case "titleText":
						this._titleText(jsondata[key]);
                        break;
                    case "locale":
                        this.model.locale = jsondata[key];
                        this._updateLocalConstant();
                        this._setLocale();
                        break;
                    case "overflowHeight":                       
                            this._setOverflowDimensions("height",jsondata[key]); break;
                    case "overflowWidth":                      
                        this._setOverflowDimensions("width",jsondata[key]); break;

                }
            }
        },
        _updateLocalConstant: function () {
            this._localizedLabels = ej.getLocalizedConstants("ej.Menu", this.model.locale);
        },
        		
        _setLocale: function () {
            this._titleText(this._localizedLabels.titleText);
        },
        _titleText: function(val){
            if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical"))
                $(this.label).text(val);
        },

        _destroy: function () {
            this.model.menuType == ej.MenuType.ContextMenu ? this._referenceElement.append(this._cloneElement) : this._cloneElement.insertBefore(this.wrapper);
            this._cloneElement.removeClass('e-menu e-js');
            this.wrapper.remove();
        },


        _init: function () {
            this._cloneElement = this.element.clone();
            this.element.css("visibility", "hidden");
            this._setValues();
            this._intializeData();
            this.element.css("visibility", "visible");
        },

        _setValues: function () {
            this._mouseOver = true;
            this._hoverOpen = true;
            this._hoverClose = true;
            this._isMenuOpen = false;
            this._hideSpeed = 100;
            this._showSpeed = 100;
            this._isSubMenuOpen = false;
            this._isContextMenuOpen = false;
            this._disabledMenuItems = new Array();
            this._hiddenMenuItems = new Array();
            this._delayMenuHover = 0;
            this._delaySubMenuHover = 0;
            this._delaySubMenuShow = 0;
            this._preventContextOpen = true;
            this._setAnimation(this.model.animationType);
            this._isFocused = true;
            this._menuOverflowItems = new Array();
            this._menuHeaderItems = new Array();
            this._menuCloneItems = new Array();
            this._itemWidth = 0; 
        },
        _intializeData: function () {
            if (!ej.isNullOrUndefined(this.model.fields) && this.model.fields["dataSource"] != null) {
                this._generateTemplate(this.model.fields["dataSource"]);
                this._renderMenu();
            }
            else {
                this._renderMenu();
                this._wireEvents("_on");
                this._calculateOverflowItems();
            }
        },
        _renderMenu: function () {
            this._renderControl();
            this._addArrow(this.model.showRootLevelArrows, this.model.showSubLevelArrows);
			this._renderArrow();
			this._intializeMenu();
            //item Width for width property		
			    this._itemWidth = this.element.width();
			    if (this.model.isResponsive) {
			        this._ensureResponsiveClasses($(window).width() < 767);
			    }
			    if (this.model.orientation == "horizontal") {
			        this._on(this.element.parent().find("span.e-check-wrap.e-icon"), "click", this._mobileResponsiveMenu);
			        if(this.model.fields["dataSource"] != null) this._calculateOverflowItems();
			    }
        },      

        _renderControl: function () {
            var label, checkBox, checkObj, list, spanlist, i;
            if (this.model.menuType == "normalmenu") {
                this.wrapper = ej.buildTag("div");
                this.wrapper.addClass(this.model.cssClass + " e-menu-wrap");
            } else
                this.wrapper = ej.buildTag("div.e-menu-wrap");
            if (this.model.isResponsive) this._responsiveLayout();
            if (this.model.menuType != ej.MenuType.ContextMenu) {
                this.wrapper.insertBefore(this.element);
                this.wrapper.append(this.element);
                }            
            this.element.addClass("e-menu e-widget e-box").attr({ "role": "menu", "tabindex": 0 });
            this._addAttr(this.model.htmlAttributes);
            if (this.model.enableRTL) this._setRTL(this.model.enableRTL);
            this._setSubMenuDirection(this.model.subMenuDirection);
            if (this.model.menuType == "normalmenu") {
                this.model.orientation == "horizontal" ? this.element.addClass("e-horizontal") : this.element.addClass("e-vertical");
            }
            //For ContextMenu Mode
            else this._contextMenu_Template();
            this._addClass();
            if (this.model.enableCenterAlign) this._centerAlign(this.model.enableCenterAlign);
            if (this.model.enableSeparator) this._setSeparator(true);
            (!this.model.enabled) && this.disable();
        },
        _renderPopupWrapper: function (e) {
            if(this._ensureOverflowPopup()){                          
                this.popupWrapper = ej.buildTag("div.e-menu-popwrap");                         
                this.popupWrapper.insertAfter(this.element);              
                var height = typeof value === "number" ? this.model.overflowHeight + "px" :this.model.overflowHeight;
                var width = typeof value === "number" ? this.model.overflowWidth + "px" : this.model.overflowWidth;
                this.popupWrapper.css({ "height": height,"width":width});
                this.popupWrapper.hide();
                this._addOverflowItems();                
            }
        
        },
        _calculateOverflowItems: function (e) {        
            if (this._ensureOverflowPopup()) {
                this.element.find("li.e-list").removeClass("e-menu-show");
                $(this.lastelement).removeClass("e-last");
                this._menuHeaderItems = [];  
                var menuHeaderWidth = this.element.outerWidth();               
                if (this.element.find("li.e-ham-wrap").length > 0) //for window resizing event neglect the hamburger icon list from the listCollection
                {                   
                    if ((this._itemWidth<=this.element.width())||(this._itemWidth>=this.element.width()) && (!(this._isOverflowPopupOpen()))) {
						if(!ej.isNullOrUndefined(this.popupWrapper))
							this.popupWrapper.hide();                        
                    }
                }
				this._renderHamburgerIcon();	
				this.element.find("li.e-ham-wrap").css({display: 'list-item'});
                var hamburgerWidth = this.element.find("li.e-ham-wrap").outerWidth(), itemsOuterWidth = 0, hideState=true;
				this.element.find("li.e-ham-wrap").hide();
                this._menuHeaderItems = this.element.find(">li.e-list");
                this._menuOverflowItems = [];
                for ( var i = 0; i < this._menuHeaderItems.length; i++) {
                   var menuItem = $(this._menuHeaderItems[i]);                                        
                        itemsOuterWidth = itemsOuterWidth + menuItem.outerWidth();
                        if (itemsOuterWidth < menuHeaderWidth) {                      
                            menuItem.removeClass('e-menu-hide');
							this.element.find(">li.e-list.e-haschild>ul").find("li.e-haschild").find("span.e-icon.e-arrowhead-down").removeClass("e-arrowhead-down").addClass("e-arrowhead-right");
                            if (this.model.enableSeparator) this._setSeparator(true);                  
                        }
                        else {
							if(hideState)
							{
								hideState=false;
								this.element.find("li.e-ham-wrap").css({display: 'list-item'}); 
								itemsOuterWidth = itemsOuterWidth - menuItem.outerWidth() + hamburgerWidth;
								if(i>1){
									(itemsOuterWidth = itemsOuterWidth - $(this._menuHeaderItems[i-1]).outerWidth());
									i=i-2;
								}								
								continue;
							}
                            this._menuOverflowItems.push($(menuItem).clone(true));                            
                            menuItem.addClass('e-menu-hide');                            
                        }
                }            
                if (this._menuOverflowItems.length>0) {
                    this._renderHamburgerIcon();
                    $('.e-menu-popwrap').length ?  this._addOverflowItems():  this._renderPopupWrapper();                     
                    this.lastelement = this.element.find('>li.e-list:visible').last().addClass('e-last');
                    this.element.find(">li.e-list.e-haschild>ul").find("li.e-haschild").find("span.e-icon.e-arrowhead-down").removeClass("e-arrowhead-down").addClass("e-arrowhead-right");            
                }
                else if (this._menuOverflowItems.length == 0 && $("li.e-ham-wrap").length > 0) {
                    this.element.find("li.e-ham-wrap").remove();
                }

            }           
            if (this.model.orientation == "vertical" || this.model.menuType == ej.MenuType.ContextMenu && ($(window).width() >= 768) && (this.model.isResponsive)) {
                this.element.find("span.e-icon.e-arrowhead-down").removeClass('e-arrowhead-down').addClass('e-arrowhead-right');
            }
            

        },
        _renderHamburgerIcon: function () {
            if((this._ensureOverflowPopup())&& (this.element.find("li.e-ham-wrap").length==0)){            
                var liTag = ej.buildTag("li.e-ham-wrap");
                var divTag = ej.buildTag("div");
                this.hamburgerspan = ej.buildTag('span.e-hamburger');                                                     
                divTag.append(this.hamburgerspan);
                liTag.append(divTag);    
                this.element.append(liTag);
                //to set border
                if (this.model.height != 0) this._setHeight(this.model.height);
                else {                       
                    $("li.e-ham-wrap").css({"height":this.element.find("li.e-list").first().height()});
                }
                //button click event
                this._on(this.element.find("li.e-ham-wrap"), "click", this._overflowOpen);                
            }
        },
        _addOverflowItems: function () {
            if ((this._ensureOverflowPopup()) && ($('.e-menu-popwrap').length>0)) {
				if(!ej.isNullOrUndefined(this.popupWrapper)){
					this.popupWrapper.empty();
					this._menuCloneItems.length = 0;                
					for (var i = 0; i < this._menuOverflowItems.length; i++) {
						this._menuCloneItems.push($(this._menuOverflowItems[i]).clone(true));                    
					}
					this.ulTag = ej.buildTag("ul");
					this.ulTag.addClass("e-menu e-js e-responsive e-widget e-box e-vertical");
					this.popupWrapper.append(this.ulTag);
					for (var i = 0; i < this._menuCloneItems.length; i++) {
						if ($(this._menuCloneItems[i]).hasClass('e-haschild')) {
							$(this._menuCloneItems[i]).find('span.e-icon').removeClass('e-arrowhead-down e-arrowhead-right').addClass('e-arrowhead-down');
							$(this._menuCloneItems[i]).children('span.e-menu-arrow.e-menu-left').remove();                       
						}
						this.ulTag.append(this._menuCloneItems[i]);
					}
					$(this.ulTag).children("li").removeClass("e-menu-hide");
					//to set width of ULTag          
					var popupWidth = Math.round(this.popupWrapper.width());
					if (popupWidth>0) {
						var popupWrapperWidth = this.popupWrapper.innerWidth();
						this.popupWrapper.find("ul.e-menu").css({ "width":popupWrapperWidth+ "px" });                
					}
					//to set the separator                  
					if (this.model.enableSeparator) this._setSeparator(true);                    
				}
            }         
        },
        _overflowOpen: function (e) {           
            if(this._isOverflowPopupOpen ()){   
                //set popup wrapper left position 
                 var location = ej.util.getOffset(this.element);
					var left = location.left + (this.model.enableRTL? 0 :(this.element.outerWidth() - this.popupWrapper.outerWidth()));
					var top = location.top + this.element.outerHeight();
					
					if(this.wrapper.parent().length && (this.wrapper.parent().css("position") == "absolute" || this.wrapper.parent().css("position") == "relative"))
					{
						location = ej.util.getOffset(this.wrapper.parent());
						left = left-location.left;
						top = top-location.top;
					}						
					this.popupWrapper.css({ "left": left,"top":top});                          
                this.popupWrapper.show();                                
                this._trigger("overflowOpen",  {e:e});
            }
            else {
                this._overflowClose(e);
            }
        },           
        _overflowClose: function (e) {
            if(this._ensureOverflowPopup() && !ej.isNullOrUndefined(this.popupWrapper)){            
                this.popupWrapper.find("li.e-list").removeClass(".e-mhover.e-active.e-mfocused");
                this._hideAnimation(this.popupWrapper.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
                this.popupWrapper.hide();                               
                this._trigger("overflowClose", { e: e });
            }
        },
        _isOverflowPopupOpen: function () {
		       if($(this.popupWrapper).length>0)
            return this.popupWrapper.css("display")=="none";           
        },
        _removePopup:function(e){
            if(($(window).width()<767)&& (this.model.isResponsive)){
			        this._ensureResponsiveClasses($(window).width());
                if ((this.element.find("li.e-ham-wrap").length > 0) && (this.popupWrapper.length>0)){
                    this.element.find("li.e-ham-wrap").remove();
                    $('.e-menu-popwrap').remove();                   
                    this.element.find("li.e-list").addClass("e-menu-show");             
                }
            }          
        },      
        _mobileResponsiveMenu:function(e){            
            if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical") && ((this.element.css("display")=="none"))) {
                    this.element.removeClass("e-res-hide").addClass("e-res-show");                 
                }
            else if((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical") && (!(this.element.css("display")=="none")))
                {
                    this.element.removeClass("e-res-show").addClass("e-res-hide");                    
                }          
        },
        _ensureOverflowPopup:function(e){
            return (this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical") && ($(window).width() >= 768) && (this.model.isResponsive);                
        },
        _onResize:function(e){
			this.element.find("li.e-ham-wrap").hide(); 
            $(window).width()>=768 ? this._calculateOverflowItems() : this._removePopup();
        },
        _ensureResponsiveClasses:function(viewport){
            if (viewport && this.element.find("span.e-icon").hasClass("e-arrowhead-right") ) this.element.find("span.e-icon.e-arrowhead-right").removeClass('e-arrowhead-right').addClass('e-arrowhead-down');            
        },

        _responsiveLayout: function () {
            if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical")) {
                this.wrapper.addClass("e-menu-responsive");
                this.element.addClass("e-menu-responsive")
                this.resWrap = ej.buildTag('span.e-menu-res-wrap e-menu-responsive');
                this.inResWrap = ej.buildTag('span.e-in-wrap e-box e-menu-res-in-wrap');
                this.label = ej.buildTag('span.e-res-title').html(this.model.locale == "en-US" ? this.model.titleText : (ej.Menu.Locale[this.model.locale] && ej.Menu.Locale[this.model.locale].titleText)?ej.Menu.Locale[this.model.locale].titleText:this.model.titleText);
                this.check = ej.buildTag('span.e-check-wrap e-icon');
                this.wrapper.append(this.resWrap)
                this.resWrap.append(this.inResWrap);
                this.inResWrap.append(this.label).append(this.check);
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else proxy.element.attr(key, value)
            });
        },

        _oncheck: function (e) {
            var obj = this.element.parents('.e-menu-wrap').children('.e-menu');
            e.isChecked ? obj.removeClass('e-res-hide').addClass('e-res-show') : obj.removeClass('e-res-show').addClass('e-res-hide');
        },
        _addClass : function (){
            //Adding arrows to items with sub items
            this.element.find('li:has("> ul")').find('> a,> span').addClass('aschild');
            this.element.find('>li').addClass('e-list').attr({ "role": "menuitem" });
			this.element.find('li').find(">a, >span").addClass('e-menulink');
            var list = this.element.find('.e-list a.aschild');
            var spanlist = this.element.find('.e-list span.aschild');
            var listElement, spanElement;
            for ( var i = 0; i < list.length; i++) {
                listElement = $(list[i]);
                listElement.siblings().attr({ "aria-hidden": true });
                listElement.parent().attr({ "aria-haspopup": true, "role": "menuitem" }).addClass("e-haschild");
                listElement.siblings('ul').children('li').addClass('e-list').attr("role", "menuitem");
            }
            for ( var i = 0; i < spanlist.length; i++) {
                spanElement = $(spanlist[i]);
                spanElement.siblings().attr({ "aria-hidden": true });
                spanElement.parent().attr({ "aria-haspopup": true, "role": "menu" }).addClass("e-haschild");
                spanElement.siblings('ul').children('li').addClass('e-list').attr("role", "menuitem");
            }
        },
		_renderArrow : function(){
			 if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical")) {
				if( $($(this.element).find("span.e-menu-arrow")).length == 0){
					var arrow = ej.buildTag("span.e-menu-arrow e-menu-left");
					$(arrow).append("<span class='e-arrowMenuOuter'></span>").append("<span class='e-arrowMenuInner'></span>");
					this.element.find('>li.e-list.e-haschild').append(arrow);
				}
			 }
		},
        _generateTemplate: function (data) {
            var proxy = this, queryPromise;
            if (data instanceof ej.DataManager) {
                queryPromise = data.executeQuery(this._columnToSelect(this.model.fields));
                queryPromise.done(function (e) {
                    proxy._odataFlag = true;
                    proxy._generateItemTemplate(e.result);
                    if (proxy.model.height != 0) proxy._setHeight(proxy.model.height);
                    proxy._wireEvents("_on");
                });
            } else {
                proxy._odataFlag = false;
                this._generateItemTemplate(proxy.model.fields['dataSource']);
                this._wireEvents("_on");
            }
        },

        _generateItemTemplate: function (items) {
            for (var i = 0; i < items.length; i++) {
                if ((items[i][this.model.fields.parentId] == null) || (items[i][this.model.fields.parentId] == 0)) {
                    var subItem = this._menuTemplate(items[i], items, this.model.fields);
                    this.element.append(subItem);
                }
            }
        },

        _menuTemplate: function (item, tableData, mapper) {
            var liTag, aTag, imgTag, spanTag;
            liTag = $(document.createElement('li'));
            liTag.attr("class", 'e-list');
            if (item[mapper.htmlAttribute]) this._setAttributes(item[mapper.htmlAttribute], liTag);
			aTag = $(document.createElement('a'));
			aTag.attr("class", 'e-menulink');
			if (item[mapper.imageUrl] && item[mapper.imageUrl] != "") {
				imgTag = $(document.createElement('img'));
				imgTag.attr('src', item[mapper.imageUrl]);
				if (item[mapper.imageAttribute]) this._setAttributes(item[mapper.imageAttribute], imgTag);
				aTag.append(imgTag);
			}
			else if (item[mapper.spriteCssClass] && item[mapper.spriteCssClass] != "") {
				spanTag = $(document.createElement('span'));
				spanTag.addClass(item[mapper.spriteCssClass]);
				aTag.append(spanTag);
			}
			aTag.append(item[mapper.text]);
			if (item[mapper.linkAttribute]) this._setAttributes(item[mapper.linkAttribute], aTag);
			if (item[mapper.url])
				aTag.attr('href', item[mapper.url]);
			liTag.append(aTag);
            if (item[mapper.id]) {
                liTag.prop("id", item[mapper.id]);
            }
            if (!ej.isNullOrUndefined(mapper["child"])) {
                this._odataFlag = true;
                if (mapper["child"]["dataSource"] instanceof ej.DataManager) {
                    var proxy = this, queryManager = ej.Query();
					$(liTag).attr({ "aria-haspopup": true, "role": "menu" }).addClass("e-haschild");
                    queryManager = this._columnToSelect(mapper["child"]);
                    queryManager.where(mapper["child"]["parentId"], ej.FilterOperators.equal, item[mapper.id]);
                    var queryPromise = mapper["child"]["dataSource"].executeQuery(queryManager);
                    queryPromise.done(function (e) {
                        var childItems = e.result;
                        if (childItems && childItems.length > 0) {
                            var ul = $(document.createElement('ul'));
                            for (var i = 0; i < childItems.length; i++) {
                                var liItem = proxy._menuTemplate(childItems[i], mapper["child"]["dataSource"], mapper["child"]);
                                ul.append(liItem);
                            }
                            liTag.append(ul);
                            $(liTag).children('a').addClass('aschild');
                            if ($(liTag).parent().hasClass('e-menu') && (proxy.model.showRootLevelArrows))
                                $(liTag).children('a.aschild').append($('<span>').addClass("e-icon e-arrowhead-down")).addClass("e-arrow-space");
                            else if (proxy.model.showSubLevelArrows)
                                $(liTag).children('a.aschild').append($('<span>').addClass("e-icon e-arrowhead-right")).addClass("e-arrow-space");
                            if (proxy.model.height != 0) proxy._setHeight(proxy.model.height);
                        }
                    });
                    queryPromise.then(function (e) {
                        proxy._renderArrow();
                    });
                }
                else {
					var childItems;
					if(!ej.isNullOrUndefined(item.child)){
						if(ej.isPlainObject(item.child))
							childItems = ej.DataManager(mapper["child"]["dataSource"]).executeLocal(ej.Query().where(mapper["child"]["parentId"], ej.FilterOperators.equal, item[mapper.id]));
						else if(item.child instanceof Array)
							childItems =  item.child;
					}	
                    if (childItems && childItems.length > 0) {
                        var ul = $(document.createElement('ul'));
                        for (var i = 0; i < childItems.length; i++) {
                            var liItem = this._menuTemplate(childItems[i], mapper["child"]["dataSource"], mapper["child"]);
                            ul.append(liItem);
                        }
                        liTag.append(ul);
                    }
                }
            }
            else if (!this._odataFlag) {
                var childItems = ej.DataManager(mapper["dataSource"]).executeLocal(ej.Query().where(mapper["parentId"], ej.FilterOperators.equal, item[mapper.id]));
                if (childItems && childItems.length > 0) {
                    var ul = ej.buildTag('ul');
                    for (var i = 0; i < childItems.length; i++) {
                        var liItem = this._menuTemplate(childItems[i], mapper["dataSource"], mapper);
                        ul.append(liItem);
                    }
                    liTag.append(ul);
                }
            }
            return liTag;
        },

        _setAttributes: function (data, element) {
            for (var key in data) {
                if (key == "class")
                    element.addClass(data[key]);
                else
                    element.attr(key, data[key]);
            }
        },

        _addArrow: function (topArrows, bottomArrows) {
            if (topArrows) {
				var arrowIcon = (this.model.orientation == "horizontal") ? "e-arrowhead-down" : "e-arrowhead-right";
				this.element.find('>li.e-list:has("> ul")').children('a').append($('<span>').addClass("e-icon "+arrowIcon)).addClass("e-arrow-space");
			}
            else {
                this.element.find('>li.e-list:has("> ul")').children('a').removeClass("e-arrow-space").children('span.e-icon').remove();
            }

            if (bottomArrows)
                this.element.find('>li.e-list > ul li.e-list:has(>ul)').children('a').append($('<span>').addClass("e-icon e-arrowhead-right")).addClass("e-arrow-space");
            else {
                this.element.find('>li.e-list > ul li.e-list:has(>ul)').children('a').removeClass("e-arrow-space").children('span.e-icon').remove();
            }

        },

        _intializeMenu: function () {
            if (this.model.height != 0) this._setHeight(this.model.height);
            if (this.model.width != 0) this._setWidth(this.model.width);
            if (this.model.menuType == "contextmenu")
                this.model.openOnClick = false;
            if (this.model.openOnClick) {
                this._hoverOpen = false;
                this._hoverClose = false;
            }
        },

        _setOrientation: function (val) {
            if (val == "horizontal") {
                this.element.removeClass("e-vertical e-horizontal").addClass("e-horizontal");
            } else {
                this.element.removeClass("e-horizontal e-vertical").addClass("e-vertical");
            }
            if (val == "vertical") {
                this._removePopup();
            }
        },

        _setHeight: function (value) {
            if (this.model.orientation == "horizontal" && value !=="auto") {
                value = typeof value === "number" ? value + "px" : value;
                this.element.find('> li').find('>a:first').css("line-height", value);
                if (this.model.showRootLevelArrows)
                    this.element.find('> li').find('>a:first').find('> span:first').css({ "line-height": value, "top": "0px" })
                if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical")){
                    if ($("li.e-ham-wrap").length > 0) {                        
                        this.element.find("li.e-ham-wrap").children("div").css({ "line-height": value });
                        this.element.find("li.e-ham-wrap").css({ "height": value });
                        if(this.popupWrapper)
                        this.popupWrapper.find("a.e-menulink").css({ "line-height":value });                        
                    }
                }
            }
            else
                this.element.height(value);
        },

        _setWidth: function (value) {
            this.element.css("width", value);
            if (this.model.orientation === "horizontal" && value !== "auto") {
                if (this.model.isResponsive)
                    this.resWrap.css("width", value);
            }
            if (this.model.orientation == "horizontal" &&  ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical")) ) {
                this._calculateOverflowItems();
            }
            
        },        
        _setOverflowDimensions:function(property,value){
            if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical"))
                value = typeof value == "number" ? value + "px" : value;
                if (property == "height") this.popupWrapper.css({ height: value });
                else if (property == "width") this.popupWrapper.css({ width: value });                           
                this._addOverflowItems();
        },

        _setRTL: function (isRTL) {
            if (isRTL) {
                this.element.removeClass("e-rtl").addClass("e-rtl");
            } else {
                this.element.removeClass("e-rtl");
            }
            if (isRTL && this.model.orientation === "horizontal")
                this.wrapper.removeClass("e-menu-rtl").addClass("e-menu-rtl");
            else
                this.wrapper.removeClass("e-menu-rtl");
			this.model.subMenuDirection = isRTL ? "left" : "right";
        },

        _setSubMenuDirection: function (direction) {
            if (direction != "left" && direction != "right")
                this.model.subMenuDirection = this.model.enableRTL ? "left" : "right";
        },

        _setAnimation: function (value) {
            value === "none" ? (this._showAnim = "none", this._hideAnim = "none") : (this._showAnim = "slideDown", this._hideAnim = "slideUp");
        },

        _controlStatus: function (value) {
            value != true ? this.disable() : this.enable();
        },

        _centerAlign: function (enableCenterAlign) {
            if (this.model.orientation == "horizontal" && enableCenterAlign)
                this.element.css('text-align', 'center');
            else
                this.element.css('text-align', 'inherit');
        },
        _columnToSelect: function (mapper) {
            var column = [], queryManager = ej.Query();
            if (ej.isNullOrUndefined(mapper.query)) {
                for (var col in mapper) {
                    if (col !== "tableName" && col !== "child" && col !== "dataSource" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
                if (!this.model.fields["dataSource"].dataSource.url.match(mapper.tableName + "$"))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            }
            else
                queryManager = mapper.query;
            return queryManager;
        },


        _max_zindex: function () {
            var parents, bodyEle, maxZ, index;
            if (this.model.menuType == "contextmenu") {
                parents = $(this._targetElement).parents();
                parents.push(this._targetElement);
            }
            else
                parents = $(this.element).parents();
            bodyEle = $('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            $(bodyEle).each(function (i, ele) { parents.push(ele); });
            maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;

        },

        _recursiveFunction: function (items, menuText) {
            var context = this;
            var isFound = false;
            $.each(items, function (key, value) {
                if (value.Text == menuText) {
                    context.selectedItem = value;
                    isFound = true;
                    return false;
                }
                else if (value.ChildItems != null) {
                    context._recursiveFunction(value.ChildItems, menuText);
                }
                if (isFound)
                    return false;
            });
        },

        _contextMenu_Template: function () {
            if(this.element[0].id !="")
            var oldWrapper = $(".e-menu-wrap #" + this.element[0].id).get(0);
            if (oldWrapper)
                $(oldWrapper.parentElement).remove();
            this.model.orientation = "vertical";
            this.element.addClass(this.model.cssClass + " e-context");
			 this.element.css("display", "none");
            this._referenceElement = this.element.parent();
            $("body").append(this.element);
            this.wrapper.insertBefore(this.element);
            this.wrapper.append(this.element);
        },

        _closeMenu: function () {
            this._hideAnimation(this.element.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
        },

        _onMenuIntent: function (element, obj, canOpen) {
            obj._delayMenuHover = window.setTimeout(function () {
                if (obj._mouseOver == true && canOpen) {
                    var showanim = obj._showAnim;
                    var hideanim = obj._hideAnim;
                    var showSpeed = obj._showSpeed;
                    var hideSpeed = obj._hideSpeed;
                    obj._show(element, showanim, hideanim);
                }
            }, this._showSpeed);
        },

        _onHide: function (element, obj, canHide) {
            obj._delaySubMenuHover = window.setTimeout(function () {
                if (obj._mouseOver == false && canHide) {
                    var id = obj._id;
                    var hideanim = obj._hideAnim;
                    var hideSpeed = obj._hideSpeed;
                    obj._closeAll();
                }

            }, obj._hideSpeed);
        },

        _subMenuPos: function (element, direction) {
            var pos = $(element).offset();
            var subMenuLeft, subMenuRight ;
            var posLeft = pos.left;
            var subMenu = $('ul:first', element);
            var menuWidth = $(element).outerWidth();
            if (pos == null || pos == undefined)
                return false;
            var submenuWidth = subMenu.outerWidth() + 1; // +1 for the space between menu and submenu
            var left = this.model.container ? $(this.model.container).width() + $(document).scrollLeft() : document.documentElement.clientWidth + $(document).scrollLeft();
            if (this.model.menuType == "normalmenu") {
                if ($(element.parentNode).is(this.element)) {
                    if (this.model.orientation == "horizontal"){
                        subMenu.css("top", $(element).outerHeight() + "px");
                        if (!this.model.enableRTL) {
                            subMenuLeft = (left < (posLeft + submenuWidth)) ? ((posLeft + submenuWidth) - left) : 1;
                            subMenu.css("left", (subMenuLeft *(-1)) + "px");
                        }
                        else {
                            subMenuRight = (((posLeft + menuWidth) - submenuWidth) < 0) ? ((posLeft + menuWidth) - submenuWidth) : 1;
                            subMenu.css({ "left": "auto", "right": subMenuRight + "px" });
                        }
                    }
                    else if ((direction == "left" && posLeft > submenuWidth) || (direction == "right" && left <= pos.left + menuWidth + submenuWidth &&  posLeft > submenuWidth))
                        subMenu.css("left", -(submenuWidth + 4) + "px");
                    else {
                        subMenu.css("left", ($(element).outerWidth() + 4) + "px");
                    }
                } else if ((direction == "left" && posLeft > submenuWidth) || (direction == "right" && left <= pos.left + menuWidth + submenuWidth &&  posLeft > submenuWidth)) {
                    subMenu.css("left", -(submenuWidth + 4) + "px");
                }
                else {
                    subMenu.css("left", ($(element).outerWidth() + 4) + "px");
                    var submenuHeight = subMenu.outerHeight();
                    var winHeight = $(window).height();
                    var submenuTop = (winHeight - (pos.top - $(window).scrollTop()));
                    if (winHeight < submenuHeight) {
					     var menuPos = pos.top - $(window).scrollTop();
						subMenu.css("top", -(menuPos) + 4 + "px");
					}
                    else if (submenuTop < submenuHeight) {
                        var menuPos = submenuTop - submenuHeight;
						subMenu.css("top", menuPos - 2 + "px");
					}
					else subMenu.css("top", "");
				}
            }
            else {
                left -= (pos.left + (2 * submenuWidth) + 4);
                if (left < 0) {
                    var menuLeftPos = (submenuWidth == null) ? "-206.5px" : "-" + (submenuWidth + 5) + "px";
                    subMenu.css("left", menuLeftPos);
                }
                else {
                    if (subMenu.parent('li.e-list').parent('ul').width() && direction == "right") {
                        subMenu.css("left", (subMenu.parent('li.e-list').parent('ul').width() + 4) + "px");
                    }
                    else if (pos.left > submenuWidth)
                        subMenu.css("left", -(submenuWidth + 4) + "px");
                }
                var submenuHeight = subMenu.outerHeight();
                if ((pos.top + submenuHeight > $(window).height())) {
                    var top = -(submenuHeight) + $(element).outerHeight();
                    if (submenuHeight > (pos.top + ($(element).outerHeight() / 2))) {
                        subMenu.css("top", -(submenuHeight / 2) + "px");
                    }
                    else
                        subMenu.css("top", top + "px");
                }
                else
                    subMenu.css("top","0px");
            }
        },


        _setSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin + " e-menu-wrap");
        },

        _setSeparator: function (separator) {
            if (separator){
                this.element.addClass("e-separator");
                if ($('.e-menu-popwrap').length>0 && !ej.isNullOrUndefined(this.ulTag))
                    this.ulTag.addClass("e-separator");     
            }
            else this.element.removeClass("e-separator");
        },

        _contextMenuEvents: function (action) {
            this[action]($(this.model.contextMenuTarget), "mouseup taphold", this._ContextMenuHandler);
            this[action](this.element, "contextmenu", this._onDefaultPreventer);
            this[action]($(this.model.contextMenuTarget), "contextmenu", this._onDefaultPreventer);
            this[action]($(document), "mousedown", this._onContextClose);
        },

        _show: function (element, showanim, hideanim) {
            var siblingElement;
            var sibling = $('> ul', element);
			var zIndex = this._max_zindex();
            sibling.attr({ "aria-hidden": false });
            this._hideAnimation($(element).siblings().find(' > ul:visible'), hideanim);
            if (!($.inArray(this._disabledMenuItems, element) > -1)) {
                if (sibling.css('display') != "none") {
                    siblingElement = this.model.openOnClick ? $(sibling) : sibling.children().find('> ul');
                    this._hideAnimation(siblingElement, hideanim);
                }
                else $('> ul', element).children().find('> ul').hide();
                this._subMenuPos(element, this.model.subMenuDirection);
                sibling.css({ "z-index": zIndex + 1 });
				$(element).children('span.e-menu-arrow').css({"z-index": zIndex + 2 });
                if ($('> ul', element).css('display') != 'block' && !$(element).hasClass("e-disable-item")) {
                    this._showAnimation(sibling, showanim);
                    sibling.closest('li').addClass('e-active e-mfocused');
                }
                if ($(element).siblings("li.e-active").length > 0)
                    $(element).siblings("li.e-active").removeClass("e-active e-mfocused");
            }
        },

        _closeAll: function () {
            this._hideAnimation(this.element.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
            this._hideAnimation(this.element.find('> ul:visible'), this._hideAnim);
        },

        _showAnimation: function (element, anim) {
            switch (anim) {
                case "slideDown":
                    element.slideDown(this.model.enableAnimation ? 200 : 0); break;
                case "none":
                    element.css("display", "block"); break;
            }
        },

        _hideAnimation: function (element, anim) {
            switch (anim) {
                case "slideUp":
                    $(element).attr({ "aria-hidden": true });
                    element.slideUp(this.model.enableAnimation ? 100 : 0); break;
                case "none":
                    element.css("display", "none"); break;
            }
            element.closest('li').removeClass('e-active e-mfocused');
        },

        _removeValue: function (text, disableList) {
            var $browInfo = ej.browserInfo(), elementText;
            $browInfo.version === "8.0" && $browInfo.name === "msie" ? elementText = text[0].outerText : elementText = text[0].textContent;
            var count = $(disableList).length, i = 0;
            var childEle = $(disableList).children('a').length == 0 ? $(disableList).children('span') : $(disableList).children('a');
            while (i <= count) {
                if ($(childEle[i]).text() === elementText)
                    return i;
                i++;
            }
        },

        _createSubLevelItem: function (target, element) {
            var ulTag;
            ulTag = $(document.createElement('ul'));
            ulTag.append(element);
            target.append(ulTag);
            target.attr({ 'role': 'menu', 'aria-haspopup': 'true' });
            target.addClass("e-haschild");
            this.element.find('li:has("> ul")').find('> a,>span').addClass('aschild e-arrow-space');
            this._insertArrows(ulTag);
        },

        _insertArrows: function (ulTag) {
            if (this.model.showRootLevelArrows)
                ulTag.find('>a,>span').append($('<span>').addClass("e-icon e-arrowhead-down")).addClass("e-arrow-space");
            else
                ulTag.find('>a,>span').removeClass("e-arrow-space").find('>span.e-icon').remove();

            if (this.model.showSubLevelArrows)
                ulTag.parent('li.e-list:has(>ul)').children('a,span').append($('<span>').addClass("e-icon e-arrowhead-right")).addClass("e-arrow-space");
            else
                ulTag.parent('li.e-list:has(>ul)').children('a,span').removeClass("e-arrow-space").find('>span.e-icon').remove();
        },

        _createMenuItem: function (item) {
            var liTag, aTag, imgTag, spanTag;
            liTag = $(document.createElement('li'));
            liTag.attr({ "class": 'e-list', "role": "menuitem" });
            if (item["htmlAttribute"]) this._setAttributes(item["htmlAttribute"], liTag);
            if (item["text"] && item["text"] != "") {
                aTag = $(document.createElement('a'));
				aTag.attr({ "class": 'e-menulink'});
                if (item["imageUrl"] && item["imageUrl"] != "") {
                    imgTag = $(document.createElement('img'));
                    imgTag.attr('src', item["imageUrl"]);
                    if (item["imageAttribute"]) this._setAttributes(item["imageAttribute"], imgTag);
                    aTag.append(imgTag);
                }
                else if (item["spriteCssClass"] && item["spriteCssClass"] != "") {
                    spanTag = $(document.createElement('span'));
                    spanTag.addClass(item["spriteCssClass"]);
                    aTag.append(spanTag);
                }
                aTag.append(item["text"]);
                if (item["linkAttribute"]) this._setAttributes(item["linkAttribute"], aTag);
                if (item["url"])
                    aTag.attr('href', item["url"]);
                liTag.append(aTag);
            }
            if (item["id"]) {
                liTag.prop("id", item["id"]);
            }
            if (!this.model.enabled)
                liTag.addClass("e-disable-item");
            return liTag;
        },

        _insertNode: function (itemCollection, targetNode, operation) {
            var item = 0, targetList = 0, target = 0, targetCollection = [];
            if ($(targetNode).is(this.element))
                targetCollection.push(this.element);
            else
                typeof (targetNode) === "string" ? targetCollection.push(this.element.find(targetNode)) : typeof (targetNode) === "undefined" ? targetCollection.push(this.element) : targetCollection.push(targetNode);
            for (targetList = 0; targetList < targetCollection.length; targetList++) {
                for (target = 0; target < targetCollection[targetList].length; target++)
                    for (item = 0; item < itemCollection.length && !ej.isNullOrUndefined(itemCollection[item]) ; item++)
                        this._addItem(itemCollection[item], targetCollection[targetList][target], operation);
            }
        },

        _addItem: function (item, target, operation) {
            var element, targetElement;
            this._wireEvents("_off");
            element = this._createMenuItem(item);
            target = target === "default" ? $("#" + item["parentId"]) : $(target);
            switch (operation) {
                case "insert":
                    $(target).is(this.element) ? targetElement = target : targetElement = target.children('ul');
                    targetElement.length != 0 ? targetElement.append(element) : this._createSubLevelItem(target, element);
                    break;
                case "insertBefore":
                    if (!$(target).is(this.element))
                        element.insertBefore(target);
                    else
                        target.prepend(element);
                    break;
                case "insertAfter":
                    if (!$(target).is(this.element))
                        element.insertAfter(target);
                    else
                        target.append(element);
                    break;
            }
            this._wireEvents("_on");
        },

        _removeItem: function (item) {
            if (item.siblings('li').length == 0) {
                item.closest("ul").siblings('a.aschild').removeClass("aschild e-arrow-space").children('span.e-icon').remove();
                !item.closest("ul").hasClass("e-menu") ? item.closest("ul").remove() : item.remove();
            }
            else
                item.remove();
        },

        _hiddenElement: function (ele) {
            if (ele.length > 0 && ($.inArray(ele[0], this._hiddenMenuItems) == -1)) {
                ele.addClass("e-hidden-item");
                this._hiddenMenuItems.push(ele[0]);
            }
        },

        _showElement: function (ele) {
            if (ele.length > 0 && ($.inArray(ele[0], this._hiddenMenuItems) > -1)) {
                ele.removeClass("e-hidden-item");
                this._hiddenMenuItems.splice(this._hiddenMenuItems.indexOf(ele[0]), 1);
            }
        },

        _getNodeByID: function (node) {
           if(ej.isNullOrUndefined(this.popupWrapper))	
              (typeof node != "object" && node != "") && (node = this.element.find(".e-list" + node));
			else
			  (typeof node != "object" && node != "") && (node = this.popupWrapper.children().find(".e-list" + node));
            return $(node);
        },

        _processItems: function (node, bool) {
            var ele = this._getNodeByID(node);
            for (var i = 0; i < ele.length; i++) bool ? this._showElement($(ele[i])) : this._hiddenElement($(ele[i]));
        },

        insert: function (item, target) {
            this._insertNode(item, target, "insert");
        },

        insertBefore: function (item, target) {
            this._insertNode(item, target, "insertBefore");
        },

        insertAfter: function (item, target) {
            this._insertNode(item, target, "insertAfter");
        },

        remove: function (targetCollection) {
            var target = 0, innerTarget = 0;
            for (target = 0; target < targetCollection.length; target++) {
                targetCollection[target] = typeof (targetCollection[target]) === "string" ? (this.element.find(targetCollection[target])) : targetCollection[target];
                for (innerTarget = 0; innerTarget < targetCollection[target].length; innerTarget++)
                    (targetCollection[target][innerTarget].tagName === "LI" || targetCollection[target][innerTarget].tagName === "UL") ? this._removeItem($(targetCollection[target][innerTarget])) : targetCollection[target][innerTarget].remove();
            }
        },

        showContextMenu: function (locationX, locationY, targetElement, e, update) {
            this._closeMenu();
            this._eventArgs = e;
            if (!ej.isNullOrUndefined(e) && this._checkForExclusion(e.target)) return;
            if (this._trigger("beforeOpen", { target: targetElement, events: e })) return false;
            if (this._preventContextOpen) {
                if (!ej.isNullOrUndefined(targetElement))
                    this._targetElement = targetElement;
                else if (!ej.isNullOrUndefined(target))
                    this._targetElement = target;
                else
                    this._targetElement = this.element;
                if (update) {
                    var position = this._calculateContextMenuPosition(e);
                    locationX = position.X;
                    locationY = position.Y;
                }
                this.element.css({ "left": locationX, "top": locationY });
                this.element.css({ "z-index": this._max_zindex() + 1 });
                this._showAnimation(this.element, this._showAnim);
                this._isContextMenuOpen = true;
                this.element.focus();

                this._trigger("open", { target: targetElement });
                this._on(ej.getScrollableParents($(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
            }
            return false;
        },

        _checkForExclusion: function (e) {
            if (!ej.isNullOrUndefined(this.model.excludeTarget)) {
                var excludeTargets = this.model.excludeTarget.split(",");
                for (var target = 0; target < excludeTargets.length; target++) {
                    if ($(e).closest(this.model.excludeTarget).is($.trim(excludeTargets[target])))
                        return true;
                }
            }
        },


        hideContextMenu: function (e) {
            this._closeMenu();
            this.element.find(".e-mhover").removeClass("e-mhover");
            this.element.find(".e-mfocused").removeClass("e-mfocused");
            this._hideAnimation(this.element, this._hideAnim);
            this._isContextMenuOpen = false;

            this._trigger("close", $.extend({ events: e }, e));
            this._off(ej.getScrollableParents($(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
        },


        disableItem: function (itemToDisable) {
            var isMenuItem = $(this.element.find('li.e-list >a ,li.e-list >span')).filter(function () { return $.trim($(this).text()) === itemToDisable; });
            if (isMenuItem.length > 0 && !($.inArray(isMenuItem.parent()[0], this._disabledMenuItems) > -1)) {
                isMenuItem.parent().addClass("e-disable-item").attr({ "aria-disabled": true });
                isMenuItem.parent().find('>a.aschild span.e-icon').addClass("e-disable");
                this._disabledMenuItems.push(isMenuItem.parent()[0]);
            }
        },


        disableItemByID: function (itemId) {
            if (itemId && itemId != "") {
                var itemToDisable = this.element.find("#" + itemId) ? this.element.find("#" + itemId)[0] : undefined;
                if (itemToDisable && !($.inArray(itemToDisable, this._disabledMenuItems) > -1)) {
                    $(itemToDisable).addClass("e-disable-item").attr({ "aria-disabled": true });
                    $(itemToDisable).find('>a.aschild span.e-icon').addClass("e-disable");
                    this._disabledMenuItems.push(itemToDisable);
                }
            }
        },

        getHiddenItems:function(){
            return this._hiddenMenuItems;
        },

        hideItems: function (node) {
            if (typeof node == "object" && node.length !== undefined) {
                for (var i = 0; i < node.length; i++) this._processItems(node[i], false);                
            }
            else this._processItems(node, false);
        },

        showItems:function(node){
            if (typeof node == "object" && node.length !== undefined) {
                for (var i = 0; i < node.length; i++) this._processItems(node[i], true);
            }
            else this._processItems(node, true);
        },

        enableItem: function (itemToEnable) {
            var isMenuItem = $(this.element.find('li.e-list >a ,li.e-list >span')).filter(function () { return $.trim($(this).text()) === itemToEnable; });
            if (isMenuItem.length > 0 && ($.inArray(isMenuItem.parent()[0], this._disabledMenuItems) > -1)) {
                isMenuItem.parent().removeClass("e-disable-item").attr({ "aria-disabled": false });
                isMenuItem.parent().find('>a.aschild span.e-icon').removeClass("e-disable");
                var index = this._removeValue(isMenuItem, this._disabledMenuItems);
                this._disabledMenuItems.splice(index, 1);
            }
        },


        enableItemByID: function (itemId) {
            if (itemId && itemId != "") {
                var itemToEnable = this.element.find("#" + itemId)[0];
                if (itemToEnable && ($.inArray(itemToEnable, this._disabledMenuItems) > -1)) {
                    $(itemToEnable).removeClass("e-disable-item").attr({ "aria-disabled": false });
                    $(itemToEnable).find('>a.aschild span.e-icon').removeClass("e-disable");
                    for (var i = this._disabledMenuItems.length - 1; i >= 0; i--) {
                        if (this._disabledMenuItems[i].id == itemId) {
                            this._disabledMenuItems.splice(i, 1);
                        }
                    }
                }
            }
        },


        disable: function () {
            this.model.enabled = false;
            var menuItemCollection = this.element.find('>li[class~=e-list]');
            var proxy = this;
            $.each(menuItemCollection, function (key, value) {
                if (!($.inArray(value, proxy._disabledMenuItems) > -1))
                {
                    $(value).addClass("e-disable-item").attr({ "aria-disabled": true });
                    $(value).find('>a.aschild span.e-icon').addClass("e-disable");
                    proxy._disabledMenuItems.push(value);
                }
                
            });
        },


        enable: function () {
            var proxy = this;
            this.model.enabled = true;
            var menuItemCollection = this.element.find('li.e-disable-item');
            $.each(menuItemCollection, function (key, value) {
                $(value).removeClass("e-disable-item").attr({ "aria-disabled": false });
                $(value).find('>a.aschild span.e-icon').removeClass("e-disable");
                proxy._disabledMenuItems.pop(value);
            });
        },

        show: function (locationX, locationY, targetElement, e) {
            if (!this.model.enabled) return false;
            if (this.model.menuType == "contextmenu")
                this.showContextMenu(locationX, locationY, targetElement, e, false);
            else
                this.element.css("display", "block");
        },

        hide: function (e) {
            if (!this.model.enabled) return false;
            if (this.model.menuType == "contextmenu")
                this.hideContextMenu(e);
            else {
                this._closeMenu();
                this.element.css("display", "none");
            }
        },

        _wireEvents: function (action) {
            this[action](this.element.find("li.e-list"), "mouseout", this._mouseOutHandler);
            this[action](this.element.find("li.e-list"), "mouseover", this._mouseOverHandler);
            this[action](this.element.children(), "click", this._onClickHandler); 
            this[action](this.element, "keydown", this._onKeyDownHandler);
            this[action](this.element, "focus", this._OnFocusHandler);
            this[action](this.element, "blur", this._OnFocusOutHandler);
            if (this.model.menuType == "contextmenu" && $(this.model.contextMenuTarget)[0] != null) {
                this._contextMenuEvents(action);
            }
            if (this.model.menuType != "contextmenu") {
                this[action]($(document), "click", this._onDocumentClick);
                this[action](this.element, "mousedown", this._onMouseDownHandler);
            }
            this[action]($(window),"resize", $.proxy(this._onResize, this));            
        },

        _mouseOverHandler: function (event) {
            var element, itemId = "";
            this.element.find(".e-mhover").removeClass("e-mhover");
            event.currentTarget = $(event.target).closest("li")[0];
            if (!$(event.currentTarget).hasClass('e-disable-item'))
                $(event.currentTarget).addClass("e-mhover");
            else this._isFocused = false;
            if (event.stopPropagation)
                event.stopPropagation();
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delaySubMenuHover);
            }
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delayMenuHover);
            }
            this._mouseOver = true;
            this._isMenuOpen = true;
            if ($(event.currentTarget.parentNode.parentNode).is(this.element)) {
                this._isSubMenuOpen = false;
            }
            else {
                this._isSubMenuOpen = true;
            }
            if (event.currentTarget.nodeName == "LI")
                element = event.currentTarget;
            else if (event.currentTarget.parentNode) {
                if (event.currentTarget.parentNode.nodeName == "LI")
                    element = event.currentTarget.parentNode;
                else
                    return false;
            }
            else {
                event.preventDefault();
                return false;
            }
            if (!$(event.currentTarget).hasClass('e-disable-item'))
                this._onMenuIntent(element, this, this._hoverOpen);
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                var menuText = $(element).children('a,span').text();
                itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
                var eventArgs = { "text": menuText, "element": element, "event": event, "ID": itemId };

                this._trigger("mouseover", $.extend({ events: eventArgs }, eventArgs));
            }
        },

        _onMouseDownHandler: function (e) {
            if ($(e.target).hasClass('e-menu')) this._isFocused = false;
        },


        _mouseOutHandler: function (event) {
            var element, itemId = "";
            $(event.currentTarget).removeClass("e-mhover");
            if (event.stopPropagation)
                event.stopPropagation();
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delaySubMenuHover);
            }
            if (typeof (this._delaySubMenuHover) !== 'undefined') {
                clearTimeout(this._delayMenuHover);
            }
            this._mouseOver = false;
            this._isMenuOpen = false;

            if (event.currentTarget.nodeName == "LI")
                element = event.currentTarget;
            else if (event.currentTarget.parentNode) {
                if (event.currentTarget.parentNode.nodeName == "LI")
                    element = event.currentTarget.parentNode;
                else
                    return false;
            }
            else {
                event.preventDefault();
                return false;
            }
            this._onHide(element, this, this._hoverClose);
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                var menuText = $(element).children('a,span').text();
                itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
                var eventArgs = { "text": menuText, "element": element, "event": event, "ID": itemId };

                this._trigger("mouseout", $.extend({ events: eventArgs }, eventArgs));
            }
        },

        _onClickHandler: function (event) {
            var element, itemId = "" , parentId, parentText;
            this._isFocused = true;
            var openOnClickStart = false;
            if (!$(event.target).closest("li.e-list").hasClass('e-disable-item') && $(event.target).closest("li.e-list").length > 0) {
                element = $(event.target).closest("li.e-list")[0];
                if ($(element).is(this.element.find(">li.e-list")))
                    this._activeElement = element;
            }
            else {
                if ($(event.target).is(this.element))
                    this._activeElement = this.element.find(">li:first");
                return;
            }
            if ($(event.target).is("a") && $(element).find(">a,>span").hasClass('aschild') && this.model.openOnClick) {
                this._isFocused = false;
            }
            if (!this._hoverOpen && $(element).find(">a,>span").hasClass('aschild')) {
                this._show(element, this._showAnim, this._hideAnim);
                this._hoverOpen = false;
                openOnClickStart = true;
            }
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                //Check if Context Menu, then hide the context menu firing the events
                if (this.model.menuType == "contextmenu") {
                    if (this._isContextMenuOpen && !$(element).hasClass("e-haschild")) {
                        this._hideAnimation(this.element, this._hideAnim);
                        this._isContextMenuOpen = false;

                        this._trigger("close", $.extend({ events: event }, event));
						this._off(ej.getScrollableParents($(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
                    }
                }
                if (!openOnClickStart) {



                    if (!$(element).find(">a,>span").hasClass("aschild")) {
                        this._closeMenu();
                        if (this.model.openOnClick)
                            this._hoverOpen = false;
                    }
                }
                var menuText = $(element).children('a,span').text();
                var parent = $(element).closest("ul").parent("li");
                if (parent.length != 0) {
                    parentId = ej.isNullOrUndefined(parent.attr("id")) ? null : parent.attr("id");
                    parentText = parent.children('a,span').text();
                }
                else {
                    parentId = null;
                    parentText = null;
                }
                itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
                var eventArgs = { "text": menuText, "element": element, "event": event, "selectedItem": this.selectedItem, "ID": itemId, "parentId": parentId, "parentText": parentText };
                this._trigger("click", $.extend({ events: eventArgs }, eventArgs));
                this.selectedItem = null;
                if (this.model.openOnClick && this.model.menuType != "contextmenu")
                    this.element.focus();
            }
        },


        _onKeyDownHandler: function (e) {
            if( e.target && e.target.nodeName && $( e.target ).closest( "input, textarea" ).length > 0) return true;
            if (this.model.menuType == "contextmenu" && !this._isContextMenuOpen) return;
            var element, focusEle, itemId = "", hoverElement = this.element.find(".e-mhover"), focusedElement = this.element.find(".e-mfocused"), currentElement, liVisible;
            if (!$(hoverElement).length > 0 && $(this._activeElement).length > 0)
                hoverElement = focusedElement = $(this._activeElement);

            if (e.keyCode == 9) {
                this._isFocused = false;
                this._OnFocusOutHandler();
            }
            else if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40)
                e.preventDefault();

            if (e.keyCode == 40) {
                if (this.model.orientation == "horizontal") {
                    if (this.element.find(">li.e-mhover").children("ul").length > 0 || $(this._activeElement).length > 0) {
                        if ($(hoverElement).children("ul").css('display') === "none")
                            this._show(hoverElement[hoverElement.length - 1], this._showAnim, this._hideAnim);
                        hoverElement.removeClass("e-mhover e-mfocused").children("ul:first").find("li:first").addClass("e-mhover");
                        this._activeElement == null ? hoverElement.addClass("e-mfocused") : $(this._activeElement).addClass("e-mfocused");
                    } else {
                        liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        $(hoverElement[hoverElement.length-1]).removeClass("e-mfocused e-mhover");
                        focusEle = $(liVisible[liVisible.index(hoverElement) + 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]) : liVisible.first();
                        focusEle.addClass("e-mhover");
                    }
                }
                else if (this.model.orientation != "horizontal") {
                    if (hoverElement.length == 0) liVisible = this.element.children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    else liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    hoverElement.removeClass("e-mfocused e-mfocused");
                    if (hoverElement.length > 0) {
                        hoverElement.removeClass("e-mhover");
                        focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]) : liVisible.first();
                    } else focusEle = liVisible.first();
                    focusEle.addClass("e-mhover");
                }
            }
            if (e.keyCode == 39) {
                if (this.model.orientation == "horizontal" && (this.element.find(">li.e-list").hasClass("e-mhover") || $(this._activeElement).length > 0)) {
                    hoverElement.removeClass("e-mfocused e-mhover");
                    liVisible = this.element.children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]) : liVisible.first();
                    focusEle.addClass("e-mhover");
                }
                else if ($(hoverElement).children("ul").length > 0) {
                    hoverElement.removeClass("e-mfocused e-mhover");
                    var firstChild = hoverElement.children("ul:first").find("li:first");
                    this._show(hoverElement[hoverElement.length - 1], this._showAnim, this._hideAnim);
                    liVisible = hoverElement.addClass('e-mfocused').children("ul:first").children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    focusEle = $(liVisible[liVisible.index(firstChild)]).length > 0 ? $(liVisible[liVisible.index(firstChild)]) : liVisible.first();
                    focusEle.addClass("e-mhover");
                }
                else if (hoverElement.children("ul").length <= 0) {
                    if (this.model.orientation == "horizontal" && hoverElement.parent().closest('.e-list').parent().hasClass('e-menu')) {
                        this._hideAnimation(hoverElement.parent(), this._hideAnim);
                        hoverElement.removeClass("e-mfocused e-mhover");
                        $(focusedElement[focusedElement.length - 1]).removeClass("e-mfocused");
                        liVisible = hoverElement.parent().closest('.e-list').parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        focusEle = $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) + 1]).length > 0 ? $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) + 1]) : $(liVisible[liVisible.index(focusedElement.first())]);
                        focusEle.addClass("e-mhover");
                    }
                }
            }

            if (e.keyCode == 38) {
                if (this.model.orientation == "horizontal") {
                    liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    hoverElement.removeClass("e-mfocused e-mhover");
                    focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]) : liVisible.last();
                }
                else if (this.model.orientation != "horizontal") {
                    if (hoverElement.length == 0) liVisible = this.element.children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    else liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                    if (hoverElement.length > 0) {
                        hoverElement.removeClass("e-mfocused e-mhover");
                        focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]) : liVisible.last();
                    } else focusEle = liVisible.last();
                }
                focusEle.addClass("e-mhover");
            }

            if (e.keyCode == 37) {
                if (this.model.orientation == "horizontal") {
                    if (this.element.find(">li.e-list").hasClass("e-mhover") || $(this._activeElement).length > 0) {
                        hoverElement.removeClass("e-mfocused e-mhover");
                        liVisible = this.element.find('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]) : liVisible.last();
                        focusEle.addClass("e-mhover");
                    }
                    else {
                        this._hideAnimation(hoverElement.parent(), this._hideAnim);
                        hoverElement.removeClass("e-mfocused e-mhover");
                        $(focusedElement[focusedElement.length - 1]).removeClass("e-mfocused e-active");
                        liVisible = hoverElement.parent().closest('.e-list').parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        if (hoverElement.parent().closest('.e-list').parent('.e-menu').length > 0)
                            focusEle = $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) - 1]).length > 0 ? $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) - 1]) : liVisible.last();
                        else
                            focusEle = $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]).length > 0 ? $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]) : liVisible.last();
                        focusEle.addClass("e-mhover");
                    }
                }
                else if (hoverElement.parent(".e-menu").length == 0 || (this.model.menuType == "contextmenu" && hoverElement.parent("ul.e-context").length == 0)) {
                        this._hideAnimation(hoverElement.parent(), this._hideAnim);
                        hoverElement.removeClass("e-mfocused e-mhover");
                        $(focusedElement[focusedElement.length - 1]).removeClass("e-mfocused");
                        liVisible = hoverElement.parent().closest('.e-list').parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
                        focusEle = $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]).length > 0 ? $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]) : $(liVisible[liVisible.index(focusedElement.last())]);
                        focusEle.addClass("e-mhover");
                }
            }
            if (e.keyCode == 13) {
                var menuText = $(hoverElement).children('a,span').text();
                itemId = !ej.isNullOrUndefined($(hoverElement)[0]) ? $(hoverElement)[0].id : "";
                var eventArgs = { "menuId": this.element[0].id, "text": menuText, "selectedItem": focusedElement, "ID": itemId };
                if (this.model.menuType == "contextmenu") {
                    if (this._isContextMenuOpen && hoverElement.length > 0 && !focusedElement.hasClass("e-disable-item")) {
                        if (this.model.click)
                            this._trigger("click", $.extend({ events: eventArgs }, eventArgs));
                        this.selectedItem = null;
                        this.hideContextMenu(e);
                    }
                } else {
                    if (hoverElement.length > 0 && !hoverElement.hasClass("e-disable-item")) {
                        if ($(hoverElement).find(">a,>span").hasClass('aschild') && $(hoverElement).children("ul").css('display') === "none") {
                            this._show(hoverElement[0], this._showAnim, this._hideAnim);
                            hoverElement.removeClass("e-mhover").children("ul:first").find("li:first").addClass("e-mhover");
                        }
                        else {
                            this.element.find(".e-mhover >a,.e-mhover >span ").focus();
                            this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
                            this._closeAll();
                        }
                        if (ej.isNullOrUndefined($(hoverElement).find(">a").attr("href")))
                            this._trigger("click", $.extend({ events: eventArgs }, eventArgs));
                    }
                }
            }
            if (e.keyCode == 27) {
                if (this.model.menuType == "contextmenu")
                    this.hideContextMenu(e);
                else
					this.element.find("li.e-list").removeClass("e-mhover");
                    this.element.find('li.e-list:has("> ul")').find('> ul:visible').parents("li.e-list").addClass("e-mhover");
                    this._closeAll();
            }
            if ($(e.target).is(this.element) && e.target.parentNode) {
                if (hoverElement.length)
                    element = hoverElement;
            }
            else
                return false;
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                var menuText = $(element).children('a,span').text();

                itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
                if (this.element.find('li.e-mfocused.e-mhover').length || e.keyCode == 13)
                    currentElement = (e.keyCode == 13) ? hoverElement : this.element.find('li.e-mfocused.e-mhover');
                var eventArgs = { "text": menuText, "element": element, "targetElement": currentElement , "event": e, "ID": itemId };

                this._trigger("keydown", $.extend({ events: eventArgs }, eventArgs));
            }
            this._activeElement = null; focusedElement = this.element.find(".e-mfocused");
        },

        _OnFocusHandler: function (event) {
            if (this.model.menuType != "contextmenu" && !this.element.find(">li:first").hasClass("e-disable-item") && this._isFocused && this.element.find(".e-mhover").length == 0 && $('li.e-ham-wrap').length ==0) {
                this.element.find(">li:first").addClass("e-mhover");
            }
            else this._isFocused = true;
            if (this.model.menuType != "contextmenu")
                this._activeElement = this.element.find(">li:first");
        },

        _OnFocusOutHandler: function () {
            if (!this._isFocused) {
                this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
                this._closeAll();
            }
            this._isFocused = false;
        },

        _onDocumentClick: function (event) {
            if (this.model.openOnClick)
                this._hoverOpen = false;
            if (!$(event.target).parents(".e-menu").is(this.element)) {
                this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
                this._closeAll();
                this._isFocused = true;
            }
            if ((!$(event.target).parents("ul.e-menu").is(this.popupWrapper)) && (!$(event.target).hasClass('e-ham-wrap')) && (!($(event.target).parent().hasClass('e-ham-wrap'))) && (!$(event.target).hasClass('e-hamburger')) && (!$(event.target).parent("li").hasClass("e-haschild")) && (!$(event.target).is('span.e-icon.e-arrowhead-down')) && !(this._isOverflowPopupOpen()) && this.model.menuType != "contextmenu" && $("li.e-ham-wrap").length > 0) {
                this._overflowClose();
            }           
        },


        _ContextMenuHandler: function (e) {
            var isRightClick = false;
            if (e.type == "taphold" && e.button != 0)
                isRightClick = true;
            else if (e.button)
                isRightClick = (e.button == 2);
            else if (e.which)
                isRightClick = (e.which == 3); //for Opera
            var targetElement = e.target;
            if (isRightClick) {
                var evt = e;
                if (e.type == "taphold") {
                    if (e.options.type == "touchstart") evt = e.options.touches[0];
                    else evt = e.options;
                }
                var showSpeed = this._showSpeed;
                this.showContextMenu(null, null, targetElement, evt, true);
            }
            else {
                if (this._isContextMenuOpen) {
                    var hideanim = this._hideAnim;
                    var hideSpeed = this._hideSpeed;
                    this.hideContextMenu(e, hideanim, hideSpeed);
                }
            }
        },

        _calculateContextMenuPosition: function (e) {
            var locationX, locationY;
            this.element.css({"top": "", "left": ""}); 
            locationX = (e.clientX + this.element.width() < $(window).width()) ? e.pageX : e.pageX - this.element.width();
            locationY = (e.clientY + this.element.height() < $(window).height()) ? e.pageY : (e.clientY > this.element.height()) ? e.pageY - this.element.height() : $(window).height() - this.element.outerHeight();
            var bodyPos = $("body").css("position") != "static" ? $("body").offset() : { left: 0, top: 0 };
            locationX -= bodyPos.left, locationY -= bodyPos.top;
            return {
                X: locationX,
                Y: locationY
            };
        },


        _onDefaultPreventer: function (e) {
            e.preventDefault();
            e.stopPropagation();
            return false;
        },


        _onContextClose: function (e) {
            var proxy = this;
            if (this._isContextMenuOpen) {
                var isRightClick = false;
                if ($(e.target).is(this.element) || $(e.target).parents(".e-context").is(this.element))
                    isRightClick = true;
                if (!isRightClick) {
                    var hideanim = this._hideAnim;
                    var hideSpeed = this._hideSpeed;
                    this.hideContextMenu(e, hideanim, hideSpeed);
                    var parentElements = $(e.target).parents();
                    $.each(parentElements, function (index, value) {
                        if (value.id == proxy._ContextTargetId) {
                            return;
                        }
                    });

                }
            }
        }

    });

    ej.Menu.Locale = ej.Menu.Locale || {} ;
       
    ej.Menu.Locale['default'] = ej.Menu.Locale["en-US"] = {  	
        titleText: "Menu"
    };
    ej.MenuType = {
        /**  support for list of items appears as normal menu in horizontal or vertical direction. */
        NormalMenu: "normalmenu",
        /**  support for list of items appears as menu when right clicked on target area, thereby preventing browser’s default right click.. */
        ContextMenu: "contextmenu"
    };

    ej.Direction = {
        /**  support for Render sub menu popup in left direction. */
        Left: "left",
        /**  support for Render sub menu popup in Right direction. */
        Right: "right",
        /** Default opening direction of menu sub items */
        None: "none",
    };

    ej.AnimationType = {
        /**  support for disable the AnimationType while hover or click an menu items. */
        None: "none",
        /**  support for enable the AnimationType while hover or click an menu items. */
        Default: "default"
    };

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin provides support to display color picker within your web page and allows to pick the color.
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws.
* @version 12.1
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejColorPicker", "ej.ColorPicker", {
        _rootCSS: "e-colorpicker",

        element: null,

        model: null,
        validTags: ["input", "div"],
        _addToPersist: ["value", "opacityValue"],
        _setFirst: false,
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },


        defaults: {

            enableOpacity: true,

            opacityValue: 100,

            columns: 10,

            palette: "basicpalette",

            htmlAttributes: {},

            buttonMode: "split",

            custom: [],

            presetType: "basic",

            modelType: "picker",

            locale: "en-US",

            showPreview: true,

            showTooltip: false,

            showClearButton: false,

            showSwitcher: true,

            value: null,

            displayInline: false,

            buttonText: {
                apply: "Apply",
                cancel: "Cancel",
                swatches: "Swatches"
            },

            tooltipText: {
                switcher: "Switcher",
                addButton: "Add Color",
                basic: "Basic",
                monoChrome: "Mono Chrome",
                flatColors: "Flat Colors",
                seaWolf: "Sea Wolf",
                webColors: "Web Colors",
                sandy: "Sandy",
                pinkShades: "Pink Shades",
                misty: "Misty",
                citrus: "Citrus",
                vintage: "Vintage",
                moonLight: "Moon Light",
                candyCrush: "Candy Crush",
                currentColor: "Current Color",
                selectedColor: "Selected Color",
            },

            showApplyCancel: true,

            showRecentColors: false,

            toolIcon: null,

            cssClass: "",

            enabled: true,

            change: null,

            select: null,

            open: null,

            close: null,

            create: null,

            destroy: null,
        },
        dataTypes: {
            modelType: "enum",
            palette: "enum",
            presetType: "enum",
            cssClass: "string",
            displayInline: "boolean",
            locale: "string",
            showSwitcher: "boolean",
            showRecentColors: "boolean",
            enabled: "boolean",
            showPreview: "boolean",
            enableOpacity: "boolean",
            buttonText: "data",
            custom: "array",
            htmlAttributs: "data"
        },

        observables: ["value", "opacityValue"],
        value: ej.util.valueFunction("value"),
        opacityValue: ej.util.valueFunction("opacityValue"),

        _setModel: function (jsondata) {
            for (var key in jsondata) {
                switch (key) {
                    case "enableOpacity":
                        this.model.enableOpacity = jsondata[key];
                        if (this.popupContainer) {
                            this._previewSlider(this.model.enableOpacity);
                            this._valueOperation();
                        }
                        break;
                    case "opacityValue":
                        if (this.model.enableOpacity) {
                            this.model.opacityValue = jsondata[key];
                            this._tempOpacity = parseFloat(ej.util.getVal(jsondata[key]));
                            if (this.popupContainer) {
                                this._tempOpacity = parseFloat(ej.util.getVal(jsondata[key]));
                                this._opacity.option('value', this._tempOpacity);
                                !this._switch && this._changeOpacity();
                                this._updateValue();
                                this.opacityValue(this._tempOpacity);
                                typeof jsondata[key] == "function" ? jsondata[key](this.opacityValue()) : jsondata[key] = this.opacityValue();
                            }
                            break;
                        } else return false;
                    case "custom":
                        this.model.custom = jsondata[key];
                        this._reInitialize();
                        break;
                    case "palette":
                        this.model.palette = jsondata[key];
                        this._reInitialize();
                        break;
                    case "columns":
                        this.model.columns = parseFloat(jsondata[key]);
                        this._reInitialize();
                        jsondata[key] = this.model.columns;
                        break;
                    case "presetType":
                        this.model.presetType = jsondata[key];
                        if (ej.isNullOrUndefined(Colors[this.model.presetType])) return false;
                        else
                            this._reInitialize();
                        break;
                    case "buttonMode":
                        this._unBindIconClick();
                        this._buttonElement = ej.ColorPicker.ButtonMode.Split == jsondata[key] ? this.dropdownbutton : this.wrapper;
                        ej.ColorPicker.ButtonMode.Split == jsondata[key] ? this.wrapper.addClass("e-split") : this.wrapper.removeClass("e-split");
                        this._bindIconClick();
                        break;
                    case "showTooltip":
                        this.model.showTooltip = jsondata[key];
                        if (this.popupContainer) {
                            this._colorSlider.option('showTooltip', jsondata[key]);
                            this._opacity.option('showTooltip', jsondata[key]);
                        }
                        break;
                    case "value":
                        this._setValue(ej.util.getVal(jsondata[key]), true);
                        if (typeof jsondata[key] == "function")
                            jsondata[key](this.value());
                        else
                            jsondata[key] = this.value();
                        break;
                    case "modelType":
                        this.model.modelType = jsondata[key];
                        this._reInitialize();
                        break;
                    case "showSwitcher":
                        this.model.showSwitcher = jsondata[key];
                        if (this.popupContainer) {
                            this._showSwitcher();
                        }
                        break;
                    case "tooltipText":
                        this.model.tooltipText = jsondata[key];
                        if (this.popupContainer) {
                            this._toolTipText(jsondata[key]);
                        }
                        break;
                    case "locale": 
                        this.model.locale = jsondata[key];
                        if (this.popupContainer) {
                            this._localize(jsondata[key]);
                        }
                        break;
                    case "showPreview":
                        this.model.showPreview = jsondata[key];
                        if (this.popupContainer) {
                            this._previewPane(this.model.showPreview);
                        }
                        break;
                    case "buttonText":
                        this._setButtonText = true;
                        this.model.buttonText = jsondata[key];
                        if (this.popupContainer) {
                            this._buttonText(this.model.buttonText);
                        }
                        break;
                    case "displayInline":
                        this.model.displayInline = jsondata[key];
                        this._setDisplayInline(jsondata[key]);
                        break;
                    case "cssClass":
                        this._setSkin(jsondata[key]);
                        this.model.cssClass = jsondata[key];
                        break;
                    case "enabled":
                        this._enabled(jsondata[key]);
                        break;
                    case "showRecentColors":
                        this.model.showRecentColors = jsondata[key];
                        if (this.popupContainer) {
                            this._previewColor(this.model.showRecentColors);
                        }
                        break;
                    case "htmlAttributes":
                        this.model.htmlAttributes = jsondata[key];
                        this._addAttr(this.model.htmlAttributes);
                        break;
                    case "showClearButton":
                        this.model.showClearButton = jsondata[key];
                        if(this.popupContainer){
                            this._showClearIcon(jsondata[key]);
                        }
                    break;
                    case "showApplyCancel":
                        this.model.showApplyCancel = jsondata[key];
                        if (this.popupContainer) {
                            this._buttonContainer();
                        }
                    break;
                }
            }
        },


        _setSkin: function (className) {
            if (this.wrapper)
                this.wrapper.removeClass(this.model.cssClass).addClass(className);
            else
                this.element.removeClass(this.model.cssClass).addClass(className);
        },
        _showSwitcher: function () {
            if (this.model.showSwitcher) {
                this._changeTag.removeClass('e-hide');
                this.model.modelType == "picker" ? this._switcher.addClass('e-paletteModel').removeClass('e-pickerModel') : this._switcher.addClass('e-pickerModel').removeClass('e-paletteModel');
            }
            else
                this._changeTag.addClass('e-hide');
        },
        _pickerType: function () {
            this._modelType = "picker";
            this.PaletteWrapper.removeAttr('style');
            this.PaletteWrapper.addClass('e-hide');
            this._gradient.removeClass('e-hide');
            this._gradient.fadeIn(200);
            this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
            this._switcher.removeAttr('class');
            this._switcher.addClass('e-color-image e-paletteModel');
            this._switch = true;
            this._rgbValue();
            this._hueGradient();
            this._updateUI();
            this._alphaGradient(this.RGBToHEX(this.rgb));
            this._hsva.ejButton("enable");
            this._switchEvents();
            this._unSwitchEvents();
            this._hideUnBindEvents();
            this.isPopupOpen && this._showBindEvents();
            this.model.modelType == "default" ? this._changeTag.removeClass('e-hide') : this._changeTag.addClass('e-hide');
            this.popupList.prepend(this._gradient);
            this._showSwitcher();
        },
        _paletteType: function () {
            this._gradient.removeAttr('style');
            this._presetTag.parents('.e-split.e-widget').removeClass('e-hide');
            this.PaletteWrapper.removeClass('e-hide');
            this.PaletteWrapper.fadeIn(200);
            this._switch = false;
            this._disableHSVButton();
            this._cellSelect();
            this._switchEvents();
            this._unSwitchEvents();
            this._splitObj.option('prefixIcon', 'e-icon e-color-image e-' + this.model.presetType);
            this.popupList.prepend(this.PaletteWrapper);
            this._showSwitcher();
        },
        _reInitialize: function () {
            this._destroyPalette(false);
        },
        _destroyPalette: function (presets) {
            this.PaletteWrapper.remove();
            if (presets || this._columns != this.model.columns && this.model.palette !== "custompalette") this.PaletteWrapper = this._presetType(this._presetsId);
            if (this._temp !== this.model.presetType) this.PaletteWrapper = this._layoutType(this.model.palette);
            if (this.model.modelType == "palette") {
                this._modelType = "palette";
                this.PaletteWrapper = this._layoutType(this.model.palette);
                this._hideUnBindEvents();
                this.isPopupOpen && this._showBindEvents();
                this._gradient.addClass('e-hide');
                this._paletteType();
                presets || this.model.palette == "custompalette" ? "" : this._splitObj.option('prefixIcon', 'e-icon e-color-image e-' + this.model.presetType);
            }
            if (this.model.modelType == "picker") {
                this._pickerType();
                if (this.model.displayInline && !this.element.is('input'))
                    this._footer.addClass('e-hide');
            }
            this._temp = this.model.presetType; this._columns = this.model.columns;
            if (this._modelType == "picker")
                this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
            else
                this._presetTag.parents('.e-split.e-widget').removeClass('e-hide');
            this.refresh();
        },
        _previewColor: function (color) {
            if (color) {
                this._swatchesArea.css('display', 'block');
                this._bindRecentEvent();
            }
            else {
                this._swatchesArea.css('display', 'none');
                this._unBindRecentEvent();
            }
        },
        _buttonText: function (data) {
            if (!this._setButtonText) {
                $.extend(this.model.buttonText, data);
            } else {
                this._setButtonText = false;
            }
            if (!ej.isNullOrUndefined(this._buttonTag)) this._buttonTag.html(this.model.buttonText.apply);
            if (!ej.isNullOrUndefined(this._cancelTag)) this._cancelTag.html(this.model.buttonText.cancel);
            this._spnTag.html(this.model.buttonText.swatches);
        },
        _toolTipText: function (data) {
            $.extend(this.model.tooltipText, data);
            this._addTitleText();
        },
        _previewPane: function (showPreview) {
            showPreview ? this._previewTag.removeClass("e-hide") : this._previewTag.addClass("e-hide");
        },
        _previewSlider: function (slider) {
            slider ? this._opacity.enable() : this._opacity.disable();
        },
        _getLocalizedLabels: function () {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        },
        _localize: function () {
            this._localizedLabels = this._getLocalizedLabels();
            if (this._options.locale == "en-US" && !ej.isNullOrUndefined(this._options.buttonText) || !ej.isNullOrUndefined(this._options.tooltipText)) {
                if (!ej.isNullOrUndefined(this._options.buttonText))
                    this._buttonText(this._options.buttonText);
                if (!ej.isNullOrUndefined(this._options.tooltipText))
                    this._toolTipText(this._options.tooltipText);
            }
            else if (!ej.isNullOrUndefined(this._localizedLabels)) {
                if (!ej.isNullOrUndefined(this._localizedLabels.buttonText))
                    this._buttonText(this._localizedLabels.buttonText)
                if (!ej.isNullOrUndefined(this._localizedLabels.tooltipText))
                    this._toolTipText(this._localizedLabels.tooltipText)
            }
        },
        _destroy: function () {
            if (this.model.displayInline)
                $(window).off("resize", $.proxy(this._OnWindowResize, this));
            if (this.isPopupOpen) this.hide();
            this.popupContainer && this.popupContainer.remove();
            if (this.wrapper) {
                this.element.insertAfter(this.wrapper);
                this.wrapper.remove();
                this._presetContainer && this._presetContainer.parent('.e-menu-wrap').remove();
            }
            this.element.removeClass('e-colorpicker e-input e-widget').removeAttr("style name").val(this.element.attr("value"));
        },
        _init: function (options) {
            this._options = options;
            this._browser = ej.browserInfo();
            this._isFocused = false;
            this.isPopupOpen = false;
            this._dataBind = false;
            this._modelType = "picker";
            if (this._id)
                $("#" + this._id + "_popup").remove();
            if ("#" + this._id + "_Presets")
                $('#' + this._id + "_Presets").parent('.e-menu-wrap').remove();
            this.model.palette === "basicpalette" ? this._presetsId = "e-presets30" : "";
            this._tempOpacity = this.opacityValue();
            this._renderControl();
            if (ej.isNullOrUndefined(this.value()) && this.element[0].value !== "") this._tempValue = this.element[0].value;
            else this._tempValue = this.value();
            this._previousValue = this._previousColor = this._tempValue;
            if (this._tempValue) {
                this._setValue(this._tempValue);
            }
            this._columns = this.model.columns;
            this._temp = this.model.presetType;
            if (!this._tempValue) {
                this._previousValue = "";
            }
            !this.model.enabled && this._enabled(this.model.enabled);
        },

        _renderPopup: function() {
            this._renderPopupPanelWrapper();
            this._selectedButton = this._groupTag.find('.e-click');
            this._buttonContainer();
            this._renderPopupElement();
            this._previewPane(this.model.showPreview);
            this._previewColor(this.model.showRecentColors);
            this._localize();
            this.popupContainer.css('display', 'none');
            $('body').append(this.popupContainer);
            this._isOpen = false;
            if (this._switch) this._previewSlider(this.model.enableOpacity);
            if (this.element.is("input")) {
                if (this.popupContainer.find('button.e-applyButton').length==0) {
                    this._buttonContainer();
                }
                this._footer.css({ "display": "block" });
                this.wrapper.removeClass("e-focus");
                this._off($(document), "mousedown", this._onDocumentClick);
            }
            this._isFocused = this.isPopupOpen = false;
            this._wirePopupEvents();
            this._switchEvents();
            this._tempOpacity = this.opacityValue();
            this.model.palette === "custompalette" && this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
            this.popupContainer.find('button.e-presets').ejSplitButton({ targetID: this._presetContainer.attr('id') });
            if (this._tempValue) {
                this._setValue(this._tempValue);
                if (this._switch) this._rgbValue();
            }
            this._hsvValue();
            this._hueGradient();
            this._addTitleText();
            this._showClearIcon(this.model.showClearButton);
            if (!this._tempValue) {
                this._colorSlider.option('value', parseInt(this._hsv.h));
                this._opacity.option('value', this._tempOpacity);
                this._alphaGradient("#fff");
            }
            this._addAttr(this.model.htmlAttributes);
        },
        _renderControl: function () {
            this._createWrapper();
            this._buttonElement = ej.ColorPicker.ButtonMode.Split == this.model.buttonMode ? this.dropdownbutton : this.wrapper;
            if (this.model.buttonMode == ej.ColorPicker.ButtonMode.Split && this.element.is('input')) this.wrapper.addClass("e-split");
            this._addAttr(this.model.htmlAttributes);
            this._setDisplayInline(this.model.displayInline);
            this._wireEvents();
        },

        _createWrapper: function () {
            if (this.element.is("input")) {
                this.element.addClass('e-input e-widget');
                this.element.attr("aria-label","colorpicker");
                this.spanElement = ej.buildTag("span.e-selected-color");
                this.wrapper = ej.buildTag("span.e-colorwidget e-picker e-widget " + this.model.cssClass).attr({ 'tabindex': '0', "aria-expanded": false, "aria-haspopup": true, "aria-owns": "popup" });
                if (this._id) this.wrapper.attr('id', this._id + "Wrapper");
                this.container = ej.buildTag("span.e-in-wrap e-box e-splitarrowright");
                this.drpbtnspan = ej.buildTag("span.e-icon e-arrow-sans-down", "", {}, { "aria-label": "select" });
                this.dropdownbutton = ej.buildTag("span.e-select", "", {}, { "role": "button" }).append(this.drpbtnspan);
                this.iconWrapper = ej.buildTag("span.e-tool-icon " + this.model.toolIcon);
                this.colorContainer = ej.buildTag("span.e-color-container");
                this.colorContainer.append(this.spanElement);
                this.container.insertAfter(this.element);
                if (!ej.isNullOrUndefined(this.model.toolIcon)) {
                    this.colorContainer.prepend(this.iconWrapper);
                    this.container.addClass('e-tool');
                    this.container.append(this.colorContainer);
                }
                else
                    this.container.append(this.colorContainer);
                this.container.append(this.element, this.dropdownbutton);
                this.wrapper.insertBefore(this.container);
                this.wrapper.append(this.container);
                this.element.css("display", "none").val(this.value());
            }
            this._checkNameAttr();
        },
        _addTitleText: function () {
            this._switcher.attr('title', this.model.tooltipText.switcher);
            this._spanTag.attr('title', this.model.tooltipText.addButton);
            this._presetLi.find("#e-presets00").attr('title', this.model.tooltipText.webColors);
            this._presetLi.find("#e-presets01").attr('title', this.model.tooltipText.vintage);
            this._presetLi.find("#e-presets02").attr('title', this.model.tooltipText.seaWolf);
            this._presetLi.find("#e-presets10").attr('title', this.model.tooltipText.sandy);
            this._presetLi.find("#e-presets11").attr('title', this.model.tooltipText.pinkShades);
            this._presetLi.find("#e-presets12").attr('title', this.model.tooltipText.moonLight);
            this._presetLi.find("#e-presets20").attr('title', this.model.tooltipText.monoChrome);
            this._presetLi.find("#e-presets21").attr('title', this.model.tooltipText.misty);
            this._presetLi.find("#e-presets22").attr('title', this.model.tooltipText.flatColors);
            this._presetLi.find("#e-presets30").attr('title', this.model.tooltipText.basic);
            this._presetLi.find("#e-presets31").attr('title', this.model.tooltipText.candyCrush);
            this._presetLi.find("#e-presets32").attr('title', this.model.tooltipText.citrus);
            this._currentTag.attr('title', this.model.tooltipText.currentColor);
            this._previousTag.attr('title', this.model.tooltipText.selectedColor);
        },
        _renderPopupPanelWrapper: function () {
            this.popupContainer = ej.buildTag("div.e-colorpicker e-box e-popup e-widget " + this.model.cssClass, "", {}, { "role": "grid", "aria-readonly": "true", "tabindex": '0', "style": "visibility:hidden" });
            if (this._id) this.popupContainer.attr('id', this._id + "_popup");
            $('body').append(this.popupContainer);

            this.popupList = ej.buildTag("div.e-popupWrapper");

            this._gradient = ej.buildTag("div.e-container");

            this._colorArea = ej.buildTag("div.e-hsv-color");
            this._gradientArea = ej.buildTag("div.e-hsv-gradient")
            this._handleArea = ej.buildTag("div.e-draghandle e-color-image");
            this._browser == "msie" && this._handleArea.addClass('e-pinch');
            this._colorArea.append(this._gradientArea, this._handleArea);

            this._picker = ej.buildTag("div.e-gradient");
            this._hueSlider = ej.buildTag("div.e-widget e-hue e-state-default");
            this._alphaSlider = ej.buildTag("div.e-widget e-opacity e-state-default");
            this._picker.append(this._hueSlider, this._alphaSlider);

            this._gradient.append(this._colorArea, this._picker);

            this.popupList.append(this._gradient);


            this._footerBlock = ej.buildTag("div.e-footerContainer");

            this._templateWrapper = ej.buildTag("div.e-buttons");


            this._groupTag = ej.buildTag("div.e-grpbtn");

            this._formEle = ej.buildTag("div.e-form");
            this._rgb = ej.buildTag("button.e-rgbButton e-click", "", {}, { type: "button" });
            this._hexCode = ej.buildTag("button.e-hexButton", "", {}, { type: "button" });
            this._hsva = ej.buildTag("button.e-hsvButton", "", {}, { type: "button" });
            this._groupTag.append(this._rgb, this._hexCode, this._hsva);


            this._codeEditor = ej.buildTag("div.e-codeeditor");
            this._inputTag = ej.buildTag("input.e-color-code", "", {}, { "type": "text", 'tabindex': '0', "maxLength": "22" });
            this._codeEditor.append(this._inputTag);
            this._inputTag.attr("aria-label", "color-code");
            this._formEle.append(this._groupTag, this._codeEditor);

            this._previewTag = ej.buildTag("div.e-preview").attr({ 'tabindex': '0' });
            this._currentTag = ej.buildTag("div.e-current");
            this._previousTag = ej.buildTag("div.e-previous");
            this._previewTag.append(this._currentTag, this._previousTag);

            this._templateWrapper.append(this._formEle, this._previewTag);

            this._swatchesArea = ej.buildTag("div.e-color-labels");
            var blockCount = 11;
            this._divTag = ej.buildTag("div.e-recent-color");
            this._addTag = ej.buildTag('div.e-colorblock e-block');
            this._spanTag = ej.buildTag('div.e-color e-color-image e-add');
            this._addTag.append(this._spanTag)
            this._divTag.append(this._addTag);
            for (var count = 0; count < blockCount; count++) {
                this._liTag = ej.buildTag('div.e-colorblock e-block');
                var spanTag = ej.buildTag('div.e-color e-color-image e-empty');
                this._liTag.append(spanTag);
                this._divTag.prepend(this._liTag);
            }
            this._swatchesArea.append(this._divTag);

            this._footer = ej.buildTag('div.e-footer');
            this._swatches = ej.buildTag('div.e-element');
            this._changeTag = ej.buildTag('div.e-switcher').attr('tabindex', '0');
            this._switcher = ej.buildTag('div.e-color-image');
            this._presetTag = ej.buildTag('button.e-presets e-colorSplit');
            this._presets = ej.buildTag('div');
            this._changeTag.append(this._switcher);
            this._presetTag.append(this._presets);
            this._swatches.append(this._changeTag, this._presetTag);
            this._footer.append(this._swatches);
            this._footerBlock.append(this._templateWrapper, this._swatchesArea, this._footer);

            this.PaletteWrapper = this._layoutType(this.model.palette);
            this.popupList.append(this.PaletteWrapper, this._footerBlock);
            var oldWrapper = $("#" + this._id + "_Presets").get(0);
            if (oldWrapper) {
                if ($(oldWrapper).parent().hasClass("e-menu-wrap"))
                    $(oldWrapper).parent().remove();
                else
                    $(oldWrapper).remove();
            }
            this._presetContainer = $("<ul id='" + this._id + "_Presets' class='e-presetWrapper' style= top:87px ></ul>");
            this._presetLi = ej.buildTag('li.e-item');
            this._presetLi.append(this._renderPresets());
            this._presetContainer.append(this._presetLi);
            this.popupList.append(this._presetContainer);
            this.popupContainer.append(this.popupList);

            //IE Support
            if (this._browser.name = "msie" && (this._browser.version == "9.0" || this._browser.version == "8.0"))
                this._hueSlider.addClass('e-color-image e-filter');
            else
                this._hueSlider.addClass('e-common');
            this._width = this._gradientArea.width(); this._height = this._gradientArea.height();
        },
        _buttonContainer: function () {
            if (this.model.showApplyCancel) {
                this._buttonTag = ej.buildTag("button.e-applyButton", "", {}, { type: "button" });
                this._cancelTag = ej.buildTag("button.e-cancelButton", "", {}, { type: "button" });
                this._footer.append(this._buttonTag, this._cancelTag);
                this._applyObj = this.popupContainer.find('button.e-applyButton').ejButton({ text: this.model.buttonText.apply, type: "button", cssClass: "e-flat" }).data('ejButton');
                this._cancelObj = this.popupContainer.find('button.e-cancelButton').ejButton({ text: this.model.buttonText.cancel, type: "button", cssClass: "e-flat" }).data('ejButton');
                this._on(this._cancelTag, "click", this._hidePopup);
                this._on(this._buttonTag, "click", this._buttonClick);
            } else if (this._buttonTag !== undefined && this._cancelTag !== undefined) {
                this._buttonTag.remove();
                this._cancelTag.remove();
                this._off(this._cancelTag, "click", this._hidePopup);
                this._off(this._buttonTag, "click", this._buttonClick);
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "required") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy._enabled(false);
                else proxy.wrapper.attr(key, value)
            });
        },
        _showClearIcon: function (bool) {
            if (bool) {
                this._clearIcon = ej.buildTag("div", {}, {}, { "class": "e-icon e-close_01" }).hide();
                this._codeEditor.append(this._clearIcon);
                this._on(this._clearIcon, "mousedown", this._clearColor);
                this._on(this._clearIcon, "click", this._clearColor);
            } else {
                this._clearIcon && this._clearIcon.remove();
                this._off(this._clearIcon, "mousedown", this._clearColor);
                this._off(this._clearIcon, "click", this._clearColor);
            }
        },
        _colorPresetsClick: function (e) {
            this._presetsId = e.currentTarget.id;
            if (this._presetsId === "e-presets00") this.model.presetType = "webcolors";
            else if (this._presetsId === "e-presets01") this.model.presetType = "vintage";
            else if (this._presetsId === "e-presets02") this.model.presetType = "seawolf";
            else if (this._presetsId === "e-presets10") this.model.presetType = "sandy";
            else if (this._presetsId === "e-presets11") this.model.presetType = "pinkshades";
            else if (this._presetsId === "e-presets12") this.model.presetType = "moonlight";
            else if (this._presetsId === "e-presets20") this.model.presetType = "monochrome";
            else if (this._presetsId === "e-presets21") this.model.presetType = "misty";
            else if (this._presetsId === "e-presets22") this.model.presetType = "flatcolors";
            else if (this._presetsId === "e-presets30") this.model.presetType = "basic";
            else if (this._presetsId === "e-presets31") this.model.presetType = "candycrush";
            else if (this._presetsId === "e-presets32") this.model.presetType = "citrus";
            this._splitObj.option('prefixIcon', 'e-icon e-color-image e-' + this.model.presetType);
            $("#" + this._id + "_Presets").find("li.e-preset-row").removeClass("e-presetsactive");
            $("#" + this._presetsId).addClass("e-presetsactive");
            this.PaletteWrapper.remove();
            if (this._modelType == "palette") {
                this.PaletteWrapper = this._layoutType(this.model.palette);
                this._gradient.addClass('e-hide');
                this._paletteType();
                this._switcher.addClass('e-pickerModel').removeClass('e-paletteModel');
            }
        },

        _renderPresets: function () {
            var tableDiv = ej.buildTag("div.e-presets-table");
            this._spnTag = ej.buildTag("span.e-presetHeader");
            this._spnTag.html(this.model.buttonText.swatches);
            tableDiv.append(this._spnTag);
            var color = 0, hexCode, rowDiv;
            for (var row = 0; row < 4 ; row++) {
                rowDiv = ej.buildTag("ul.e-tablerow");
                for (var col = 0; col < 3 ; col++) {
                    var tableCell = ej.buildTag("li.e-color-image e-preset-row" + "#" + "e-presets" + [row] + [col]);
                    tableCell.appendTo(rowDiv);
                }
                rowDiv.appendTo(tableDiv);
            }
            return tableDiv;
        },
        _renderPopupElement: function () {
            var proxy = this;
            this._hsv =
            {
                h: 360, s: 0, v: 100
            };
            this._rgb.ejButton({ text: "RGBA", type: "button" });
            this._hexCode.ejButton({ text: "HEX", type: "button" });
            this._hsva.ejButton({ text: "HSVA", type: "button" });
            this._splitObj = this._presetTag.ejSplitButton({ size: "normal", showRoundedCorner: true, contentType: "imageonly" }).data('ejSplitButton');
            this._splitObj.element.attr("aria-label","Presets");
            this._splitObj.dropbutton.attr("aria-label","Select");
            this._splitObj.option("beforeOpen", function (e) { proxy._bindClickOperation(e); });
            this._presetTag.parents('.e-split.e-widget').css({ "height": "27px" });
            this.model.custom.length == 0 ? this._splitObj.option('prefixIcon', "e-icon e-color-image e-" + this.model.presetType) : "";
            $("#" + this._presetsId).addClass("e-presetsactive");
            this._splitObj._getXYpos = function (e) {
                $("#" + this.model.targetID).ejMenu({ animationType: "none" });
                var btnposx, btnposy, btnpos = this.dropbutton.offset();
                btnposx = btnpos.left - this.dropbutton.prev().outerWidth() - 1;
                btnposy = (btnpos.top - $("#" + this.model.targetID).outerHeight()) - 1;
                return { x: btnposx, y: btnposy }
            }
            this._colorSlider = this._hueSlider.ejSlider({ orientation: "Vertical", showTooltip: this.model.showTooltip, minValue: 0, maxValue: 360, change: function (e) { proxy._changeHue(e); }, slide: function (e) { proxy._changeHue(e); } }).data('ejSlider');
            this._opacity = this._alphaSlider.ejSlider({ value: this.opacityValue(), showTooltip: this.model.showTooltip, orientation: "Vertical", incrementStep: 5, value: 100, change: function (e) { proxy._changeAlpha(e); }, slide: function (e) { proxy._changeAlpha(e); } }).data('ejSlider');
            if (this._browser.name = "msie" && this._browser.version == "8.0") {
                this._handleTag = ej.buildTag("div.e-handle-wrapper");
                this._handleTag.appendTo(this._opacity.element.find("a.e-handle"));
            }
            this._colorSlider.firstHandle.css({ "height": "13px", "width": "13px" });
            this._opacity.firstHandle.css({ "height": "13px", "width": "13px" });
            this.popupContainer.css({ "visibility": "visible", "display": "none" });
            if (this.model.modelType == "picker") {
                this._modelType = "picker";
                this._gradient.removeClass('e-hide');
                this.PaletteWrapper.addClass('e-hide');
                this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
                this._showSwitcher();
                this._switch = true;
            } else if (this.model.modelType == "palette") {
                this._modelType = "palette";
                this._presetTag.parents('.e-split.e-widget').removeClass('e-hide');
                this.PaletteWrapper.removeClass('e-hide');
                this._gradient.addClass('e-hide');
                this._hsva.ejButton("disable");
                this._showSwitcher();
                this._switch = false;
            }
        },
        _layoutType: function (type) {
            if (typeof type === "string" && type == "basicpalette")
                this._collection = this._paletteGenerate(Colors[this.model.presetType], this.model.columns);
            else if (typeof type === "string" && type == "custompalette" && this.model.modelType == "palette")
                this._collection = this._paletteGenerate(this.model.custom, this.model.columns);
            type == "custompalette" ? this._collection.addClass('e-custom') : "";
            return this._collection;
        },
        _presetType: function (type) {
            if (type === "e-presets00") this._collection = this._paletteGenerate(Colors.webcolors, this.model.columns);
            else if (type === "e-presets01") this._collection = this._paletteGenerate(Colors.vintage, this.model.columns);
            else if (type === "e-presets02") this._collection = this._paletteGenerate(Colors.seawolf, this.model.columns);
            else if (type === "e-presets10") this._collection = this._paletteGenerate(Colors.sandy, this.model.columns);
            else if (type === "e-presets11") this._collection = this._paletteGenerate(Colors.pinkshades, this.model.columns);
            else if (type === "e-presets12") this._collection = this._paletteGenerate(Colors.moonlight, this.model.columns);
            else if (type === "e-presets20") this._collection = this._paletteGenerate(Colors.monochrome, this.model.columns);
            else if (type === "e-presets21") this._collection = this._paletteGenerate(Colors.misty, this.model.columns);
            else if (type === "e-presets22") this._collection = this._paletteGenerate(Colors.flatcolors, this.model.columns);
            else if (type === "e-presets30") this._collection = this._paletteGenerate(Colors.basic, this.model.columns);
            else if (type === "e-presets31") this._collection = this._paletteGenerate(Colors.candycrush, this.model.columns);
            else if (type === "e-presets32") this._collection = this._paletteGenerate(Colors.citrus, this.model.columns);
            return this._collection;
        },
        _paletteGenerate: function (colors, columns) {
            var color;
            this._PresetTable = ej.buildTag("div.e-palette-color").attr({ "role": "presentation" });
            this._tag = ej.buildTag("div.e-row").attr({"role":"row"});
            for (color = 0; color < colors.length; color++) {
                if (color && color % columns == 0)
                    this._tag = ej.buildTag("div.e-row").attr({"role":"row"});
                this._td = ej.buildTag("div.e-item").attr({ 'role': 'gridcell', "aria-label": "#" + $.trim(colors[color]), "data-value": "#" + $.trim(colors[color]), "style": "background-color:" + "#" + $.trim(colors[color]) });
                this._tag.append(this._td);
                this._PresetTable.append(this._tag);
            }
            return this._PresetTable;
        },
        _checkNameAttr: function () {
            if (!this.element.attr("name")) this.element.attr({ "name": this.element[0].id });
        },
        _enabled: function (bool) {
            if (bool) this.enable();
            else {
                this.model.enabled = true;
                this.disable();
            }
        },
        _setDisplayInline: function (isDisplayInline) {
            if(!this.popupContainer && this.model.displayInline){
                this._renderPopup();
            }
            this.model.displayInline = isDisplayInline;
            if (isDisplayInline && this.element.is("input")) {
                this.popupContainer.insertAfter(this.wrapper);
                this._footer.css({ "display": "none" });
                this._setPopupPosition();
            }
            else if (isDisplayInline) {
                this.element.append(this.popupContainer);
                this.popupContainer.find('button.e-applyButton').css({ "display": "none" });
                this.popupContainer.find('button.e-cancelButton').css({ "display": "none" });
                this._footer.css({ "display": "none" });
            }
            else {
                if(this.popupContainer){
                    this.popupContainer.css('display', 'none');
                    $('body').append(this.popupContainer);
                    this._isOpen = false;
                }
                
                if (this.element.is("input")) {
                    this._bindIconClick();
                    this.wrapper.removeClass("e-focus");
                    if(this.popupContainer){
                        if (this.popupContainer.find('button.e-applyButton').length==0) {
                            this._buttonContainer();
                        }
                        this._footer.css({ "display": "block" });
                        this._off($(document), "mousedown", this._onDocumentClick);
                    }
                }
                this._isFocused = this.isPopupOpen = false;
            }
            if (isDisplayInline) {
                this.show();
                if (this.element.is("input")) this._off($(this._buttonElement), "mousedown", this._iconClick);
                this._off(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
            }
        },
        _bindIconClick: function () {
            var count = $._data($(this._buttonElement)[0], "events");
            if (ej.isNullOrUndefined(count) || ej.isNullOrUndefined(count.mousedown)) this._on(this._buttonElement, "mousedown", this._iconClick);
            else if (count.mousedown.length == 0) this._on(this._buttonElement, "mousedown", this._iconClick);
        },
        _unBindIconClick: function () {
            this._off(this._buttonElement, "mousedown", this._iconClick);
        },
        _setPopupPosition: function () {
            var elementObj = this.element.is('input') ? this.wrapper : this.element;
            var pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.popupContainer.outerHeight(),
            popupWidth = this.popupContainer.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popupContainer.outerWidth() - elementObj.outerWidth();
            if (popupWidth + elementObj.offset().left > $(window).width()) left = Math.abs(popupWidth - ($(window).width()));
            this.popupContainer.css({
                "left": left + "px",
                'position': 'absolute',
                "top": topPos + "px",
                "z-index": maxZ
            });
        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popupContainer);
        },

        _setValue: function (value, isCode) {
            var reg = "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";
            if (typeof value == "object" || (typeof value == "number") || ej.isNullOrUndefined(value.match(reg))) value = null;
            this.value(value);
            this._tempValue = value;
            ej.isNullOrUndefined(value) ? this._setEmptyValue() : this._renderModelValue(value);
            this._changeEvent(false, isCode);
            this._selectEvent();
            this.element.is("input") && this._updateValue();
        },
        _renderModelValue: function (value) {
            var color;
            if (value && typeof value === "string") {
                color = this._HexToHSV(value);
                this._oldValue = this.rgb;
                if (this.isPopupOpen) {
                    if (this._switch) {
                        this._valueOperation();
                        this._colorSlider.option('value', parseInt(this._hsv.h));
                    }
                    this._inputTagValue(this._selectedButton);
                    if (!this._switch) {
                        this._updateUI();
                        this.element.val(this.value());
                    }
                    this._hueGradient();
                } else {
                    this.element.val(this.value());
                }
            }
        },
        setValue: function (code) {
            this._setValue(code);
        },

        enable: function () {
            if (this.model.enabled) return false;
            if (this.wrapper && this.wrapper.hasClass("e-disable")) {
                this.wrapper.removeClass("e-disable");
                this.element.prop("disabled", false);
                if (this.container.hasClass("e-disable")) this.container.removeClass('e-disable');
                if(this.popupContainer)this.popupList.removeClass('e-disable');
                this.dropdownbutton.removeClass('e-disable');
            } else if (this.model.displayInline) this.element.removeClass('e-disable');
            if(this.popupContainer){
                var temp = this._switch;
                this._switch = true;
                this._cancelObj.enable();
                this._colorSlider.enable();
                this.model.enableOpacity ? this._opacity.enable() : this._opacity.disable();
                this._splitObj.enable();
                this._applyObj.enable();
                this._switchEvents();
                this._switch = temp;
                $(this._inputTag).prop('readonly', false);
            }
            this._wireEvents();
            (this._buttonElement) && this._on(this._buttonElement, "mousedown", this._iconClick);
            this.model.enabled = true;
        },

        disable: function () {
            if (!this.model.enabled) return false;
            if (this.wrapper && !this.wrapper.hasClass("e-disable")) {
                this.wrapper.addClass("e-disable");
                this.element.attr("disabled", "disabled");
                if (!this.container.hasClass("e-disable")) this.container.addClass('e-disable');
                if(this.popupContainer)this.popupList.addClass('e-disable');
                this.dropdownbutton.addClass('e-disable');
            } else if (this.model.displayInline) this.element.addClass('e-disable');
            if(this.popupContainer){
                var temp = this._switch;
                this._switch = false;
                this._cancelObj.disable();
                this._colorSlider.disable();
                this._opacity.disable();
                this._splitObj.disable();
                this._applyObj.disable();
                this._unSwitchEvents();
                this._switch = temp;
                $(this._inputTag).attr('readonly', 'readonly');
            }
            this._unWireEvents();
            this._unBindIconClick();
            if (this.isPopupOpen && !this.model.displayInline) this.hide();
            this.model.enabled = false;
        },

        getColor: function () {
            return this.rgb;
        },

        getValue: function () {
            return this.value();
        },
        _alphaGradient: function (value) {
            var browser = ej.browserInfo();
            var value = ej.isNullOrUndefined(value) ? "#000000" : value;
            if (browser.name == "mozilla")
                this._alphaSlider.attr({ "style": "background:-moz-linear-gradient(center top," + value + ",#fff) repeat scroll 0 0 rgba(0, 0, 0, 0);" });
            else if ((browser.name == "msie") || (browser.name == "edge"))
                this._alphaSlider.attr({ "style": "background:-ms-linear-gradient(top," + value + ",#fff) repeat scroll 0 0 rgba(0, 0, 0, 0);" });
            else if (browser.name == "opera" && browser.version <= "11.61")
                this._alphaSlider.attr({ "style": "background:-o-linear-gradient(top," + value + ",#fff) repeat scroll 0 0 rgba(0, 0, 0, 0);" });
            else if (browser.name == "chrome" || browser.name == "safari" || (browser.name == "opera"))
                this._alphaSlider.attr({ "style": "background:-webkit-linear-gradient(top," + value + ",#fff) repeat scroll 0 0 rgba(0, 0, 0, 0);" });
            if ((browser.name == "msie") && (browser.version == "8.0" || browser.version == "9.0"))
                this._alphaSlider.attr({ "style": "progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=" + value + ", endColorstr=#ffffff)"});            
            if (browser.name == "msie" && browser.version == "8.0")
                this._handleTag.css({ "background": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
        },
        _hueGradient: function () {
            var temp = this._hsv;
            var value = { h: this._hsv.h, s: 100, v: 100 };
            this._hueSlider.children(".e-handle").css({ "background": this._formRGB(this.HSVToRGB(value)) });
            this._hsv = temp;
        },
        _updateColor: function () {
            if (this.model.displayInline || !this.model.showApplyCancel) {
                this.value(this._tempValue);
                if (this.element.is("input")) this._updateValue();
                this._trigger("select", { value: this.value() });
                this._previousColor = this._tempValue;
            }
        },
        _changeEvent: function (element, isCode) {
            if (this._change && this._previousValue !== this._tempValue) {
                this.popupContainer && this._alphaGradient(this._tempValue);
                this._previousValue = this._tempValue;
                this._trigger("change", { value: this._tempValue, changeFrom: element ? "slider" : "picker", isInteraction: !isCode });
                this._updateColor(element);
            }else{
               this.popupContainer && this._alphaGradient(this._tempValue);
            }
        },
        _selectEvent: function () {
            if (this._previousColor !== this._tempValue || this._tempOpacity !== this.opacityValue()) {
                this.value(this._tempValue);
                if (this.element.is("input")) this._updateValue();
                this.element.val(this.value());
                this._trigger("select", { value: this.value() });
                this._previousColor = this._tempValue;
            }
        },
        _changeHue: function (e) {
            this._handleArea.css("visibility", "visible");
            if (parseInt(this._hsv.h) !== parseInt(e.value) && this._switch) {
                this._hsv.h = Math.round(e.value);
                this._hueGradient();
                this._hsvValue();
                this._tempValue = this.RGBToHEX(this.rgb);
                this._changeEvent(true);
            }
        },
        _changeAlpha: function (e) {
            this._handleArea.css("visibility", "visible");
            if (this._switch) {
                this.rgb.a = e.value / 100;
                this._tempOpacity = parseInt(this.rgb.a * 100);
                this._changeOpacity(e);
            }
        },
        _changeOpacity: function (e) {
            this.rgb.a = this._tempOpacity / 100;
            if (this._browser.name = "msie" && this._browser.version == "8.0") {
                this._currentTag.css({ "background-color": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
                this._handleTag.css({ "background": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
            }
            else {
                this._currentTag.css("background-color", this._formRGBA(this.rgb));
                this._alphaSlider.children(".e-handle").css({ "background": this._formRGBA(this.rgb) });
            }
            this._inputTagValue(this._selectedButton);
            if (this.model.displayInline) {
                this._trigger("change", { value: this._tempValue, changeFrom: "slider", isInteraction: !ej.isNullOrUndefined(e) ? e.isInteraction : false });
                (this._trigger("select", { value: this.value() }));
            }
        else this._trigger("change", { value: this._tempValue, changeFrom: "slider", isInteraction: !ej.isNullOrUndefined(e) ? e.isInteraction: false });
        },
        _updateValue: function () {
            if (this.value()) {
                if (this._browser.name = "msie" && this._browser.version == "8.0") this.spanElement.css({ "background-color": this._formRGB(this._HexToRGB(this.value())), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
                else this.spanElement.css({ "background-color": this._formRGBA(this._HexToRGB(this.value())) });
            }
            else this.spanElement.removeAttr('style');
        },
        _bindClickOperation: function (e) {
            var proxy = this, splitMenu;
            proxy._on($("#" + this._id + "_Presets").find("li.e-preset-row"), "mousedown", proxy._colorPresetsClick);
            var SplitMenu = $("#" + proxy._presetContainer.attr('id')).ejMenu("instance");
                SplitMenu.model.close = function () {
                proxy._splitObj.contstatus = false;
                proxy._off($("#" + this._id + "_Presets").find("li.e-preset-row"), "mousedown", proxy._colorPresetsClick);
            }
        },
        _wirePopupEvents: function() {
            this._on(this._changeTag, "click", this._switchModel);
            this._on(this._groupTag, "click", this._groupButton);
            this._on(this._addTag, "click", this._addColor);
            this._on(this._codeEditor, "mouseenter", this._inputEvent);
            this._on(this._codeEditor, "mouseleave", this._inputEvent);
            this._on(this._inputTag, "blur", this._inputEvent);
            this._on(this._inputTag, "focus", this._inputEvent);
            this._on(this._inputTag, "keyup", this._inputEvent);
            this._on(this.popupContainer, "focus", this._targetFocus);
            this._on(this.popupContainer, "blur", this._targetBlur);
        },
        _wireEvents: function () {
            if (this.element.is('input')) {
                this._on(this.wrapper, "blur", this._targetBlur);
                this._on(this.wrapper, "focus", this._targetFocus);
                this._on(this.wrapper, "keydown", this._popupShown);
                this._on(this.colorContainer, "click", this._containerClick);
            }
        },
        _unWireEvents: function () {
            if (!this.model.displayInline && this.element.is('input')) {
                this._off(this.wrapper, "blur", this._targetBlur);
                this._off(this.wrapper, "focus", this._targetFocus);
                this._off(this.wrapper, "keydown", this._popupShown);
                this._off(this.colorContainer, "click", this._containerClick);
            }
            this._off(this._changeTag, "click", this._switchModel);
            this._off(this._groupTag, "click", this._groupButton);
            this._off(this._addTag, "click", this._addColor);
            this._off(this._codeEditor, "mouseenter", this._inputEvent);
            this._off(this._codeEditor, "mouseleave", this._inputEvent);
            this._off(this._inputTag, "blur", this._inputEvent);
            this._off(this._inputTag, "focus", this._inputEvent);
            this._off(this._inputTag, "keyup", this._inputEvent);
            this._off(this.popupContainer, "focus", this._targetFocus);
            this._off(this.popupContainer, "blur", this._targetBlur);
        },
        _inputEvent: function (e) {
            if (e.type === "focus") {
                if (e.target.className.indexOf("e-color-code") > -1) {
                    this._codeEditor.addClass("e-focus");
                }
            }
            if (e.type === "blur") {
                if (e.target.className.indexOf("e-color-code") > -1) {
                    this._codeEditor.removeClass("e-focus");
                }
            }
            if (!this._clearIcon) return;
            if (e.type === "focus") this._off(this._codeEditor, "mouseleave", this._inputEvent);
            if (e.type === "blur") this._on(this._codeEditor, "mouseleave", this._inputEvent);
            if (e.type === "keyup") this._inputTag.val() !== "" ? (this._clearIcon.show(), this._handleArea.css("visibility", "visible")) : (this._clearIcon.hide(), this._handleArea.css("visibility", "hidden"));
            if (e.type === "mouseleave" || e.type === "blur" || this._inputTag.val() == "") this._clearIcon.hide();
            else this._clearIcon.show();
        },
        _clearColor: function (e) {
            this._tempValue = "";
            this._inputTag.val("");
            this._setEmptyValue();
            if (e.type == "click") {
                this._clearIcon.hide();
                this._inputTag.focus();
            }
        },
        _containerClick: function () {
            if (this.model.buttonMode == "split") this._trigger("select", { value: this.value() });
        },
        _popupShown: function (e) {
            if (e.keyCode == 13) {
                this._showHidePopup();
                if (!this.isPopupOpen)
                    this._buttonClick(e);
                return false;
            }
        },
        _recentColor: function (e) {
            this._divTag.find('.e-select').removeClass('e-select').addClass('e-block');
            var hexCode = e.target.attributes.getNamedItem("data-value"), value;
            var rgbCode = e.target.attributes.style;
            if (ej.isNullOrUndefined(hexCode) || ej.isNullOrUndefined(rgbCode)) { this._change = false; return false; }
            $(e.target.parentNode).addClass('e-select').removeClass('e-block');
            var alpha = rgbCode.value.replace(/^(background-color:rgb|background-color:rgba)\(/, '').replace(/\)$/, '').replace(/\s/g, '').split(',');
            if (!ej.isNullOrUndefined(alpha[3])) {
                this._opacity.option('value', parseInt((parseFloat(alpha[3]) * 100).toFixed(2)));
                this.rgb.a = parseFloat(parseFloat(alpha[3]).toFixed(2));
            }
            else if (this._browser.name = "msie" && this._browser.version == "8.0") {
                value = parseInt(rgbCode.nodeValue.replace(/^(FILTER: alpha)\(/, '').split('=')[1].split(')')[0]);
                this._opacity.option('value', value);
                this.rgb.a = value / 100;
            }
            else {
                this._opacity.option('value', 100);
                this.rgb.a = 1;
            }
            this._HexToHSV(hexCode.value);
            this._inputTagValue(this._selectedButton);
            this._tempValue = this.RGBToHEX(this.rgb);
            this._valueOperation();
            this._colorSlider.option('value', parseInt(this._hsv.h));
            this._hueGradient();
            this._changeEvent(false);
            if (!this.model.displayInline || this.element.is("input"))
                this.wrapper.focus();
        },

        _handleClick: function (e) {
            e.preventDefault();
            this._width = this._gradientArea.width(); this._height = this._gradientArea.height();
            if (this.model.displayInline)
                this._isFocused = true;
            this._handleArea.css("visibility", "visible");
            this.mouseDownPos = this._handlePos;
            $(document).on("mousemove touchmove", $.proxy(this._handleMovement, this));
            $(document).on("mouseup touchend", $.proxy(this._handleUp, this));
        },
        _handleMove: function (e) {
            this._handleArea.css("visibility", "visible");
            this._handleMovement(e);
            this._focusWrapper(e);
        },
        _handleMovement: function (e) {
            if (!this.model.enabled) return false;
            var clientX = e.pageX, clientY = e.pageY;
            this.element.is("input") && this.wrapper.focus();
            if (e.type == "touchstart" || e.type == "touchmove") {
                clientX = e.originalEvent.changedTouches[0].pageX;
                clientY = e.originalEvent.changedTouches[0].pageY;
            }
            this._hsv.v = parseInt(100 * (this._gradientArea.height() - Math.max(0, Math.min(this._gradientArea.height(), (clientY - this._gradientArea.offset().top)))) / this._gradientArea.height(), 10);
            this._hsv.s = parseInt(100 * (Math.max(0, Math.min(this._gradientArea.width(), (clientX - this._gradientArea.offset().left)))) / this._gradientArea.width(), 10);
            this._hsvValue();
            this._tempValue = this.RGBToHEX(this.rgb);
            this._change = true;
            this._changeEvent(false);
        },
        _handleUp: function (e) {
            $(document).off('mouseup touchend', this._handleUp);
            $(document).off('mousemove touchmove', this._handleMovement);
            this._focusWrapper(e);
            return false;
        },
        _handlePosition: function () {
            this._handlePos = this._handleArea ? {
                left: parseInt(parseInt(this._width) * this._hsv.s / 100, 10) + "px",
                top: parseInt(parseInt(this._height) * (100 - this._hsv.v) / 100, 10) + "px"
            } : "";
            this._handleArea.css({ "left": this._handlePos.left, "top": this._handlePos.top });
        },
        _addColor: function () {
            var value, collection = this._divTag.find('> div');
            value = this._selectedButton.html() != "HSVA" ? this._inputTag.val() : this._formRGBA(this.HSVToRGB(this._hsv));
            if (value !== "" && this._change) {
                if (this.model.showRecentColors && collection.length <= 12) {
                    $($(collection)[collection.length - 2]).remove();
                    this._generateLi();
                }
            }
            if (!this.model.displayInline || this.element.is("input")) this.wrapper.focus();
        },
        _buttonClick: function (e) {
            this._change = true;
            var value = this._inputTag.val(), collection = this._divTag.find('div');
            this._opacity.option('value', this._tempOpacity);
            this._tempValue = this.RGBToHEX(this.rgb);
            this._updatePreviewColor();
            if (this._inputTag.val() === "") {
                this._tempValue = "";
                if (this.model.showClearButton) this._setValue("");
                else {
                    this._inputTag.addClass('e-error');
                    return false;
                }
            }
            this._selectEvent();
            if (this.element.is("input")) {
                this._updateValue();
                this.wrapper.focus();
            }
            !this.model.displayInline && this.hide();
            this._tempOpacity !== this.opacityValue() && this.opacityValue(this._tempOpacity);
        },
        _generateLi: function () {
            this._liTag = ej.buildTag('div.e-colorblock e-block e-colorset').attr({ "data-value": this.RGBToHEX(this.rgb), "tabindex": "0" });
            var spanTag = ej.buildTag('div.e-color e-set').attr({ "data-value": this.RGBToHEX(this.rgb), "title": this.RGBToHEX(this.rgb) });
            if (this._browser.name = "msie" && this._browser.version == "8.0") spanTag.css({ "background-color": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
            else spanTag.css({ "background-color": this._formRGBA(this.rgb) });
            this._liTag.append(spanTag);
            this._divTag.prepend(this._liTag);
        },
        _colorCodeValue: function (e) {
            var newValue = "", codeValue = this._inputTag.val(), value, code, count;
            value = $.trim(codeValue);
            value.length == 5 ? this._inputTag.removeClass('e-error') : "";
            if ((e.shiftKey && e.keyCode >= 35 && e.keyCode <= 40 || (e.keyCode >= 65 && e.keyCode < 71) ) || (e.keyCode == 51) || (e.ctrlKey && (e.keyCode == 88 || e.keyCode == 86)) || e.keyCode == 190)
                this._keyPressFlag = 1;
            else if ((!e.crtlKey && !e.shiftKey) && ((e.keyCode >= 65 && e.keyCode < 71) || (e.keyCode >= 35 && e.keyCode <= 40) || (e.keyCode >= 96 && e.keyCode <= 105) || (e.keyCode >= 48 && e.keyCode <= 57) || e.keyCode == 13 || e.keyCode == 8 || e.keyCode == 46 || e.type === "blur"))
                this._keyPressFlag = 1;
			else if (e.key == "#" || e.key == "(" || e.key == ")" || e.key == ",")  this._keyPressFlag = 1;
            else this._keyPressFlag = 0;
            if (this.model.enableOpacity && (e.keyCode == 188 || e.keyCode == 71 || e.keyCode == 72 || e.keyCode == 82 || e.keyCode == 83 || e.keyCode == 86) || (e.shiftKey && (e.keyCode == 57 || e.keyCode == 48)))
                this._keyPressFlag = 1;
            if (this._keyPressFlag == 1) {
                this._inputTag.removeClass('e-error');
                if (e.keyCode === 13 || e.type === "blur") {
                    if (value === "") {
                        if (this.model.showClearButton) this._setEmptyValue();
                        else this._inputTag.addClass('e-error');
                    }
                    var regex = /^\#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/;
                    code = value.match(regex);
                    if (!ej.isNullOrUndefined(code)) {
                        if (code[1].length === 3) {
                            for (count = 0; count < code[1].length; count++) {
                                newValue += code[1][count] + code[1][count];
                            }
                        }
                        else if (code[1].length === 6)
                            newValue = code[1];
                        value = this.hexCodeToRGB("#" + newValue);
                        this._inputTag.val("#" + newValue);
                        this.rgb = this.HSVToRGB(this.RGBToHSV(value));
                        this._tempValue = this.RGBToHEX(this.rgb);
                        this._change = true;
                    }
                    else {
                        var rgbRegex = /^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/;
                        code = value.match(rgbRegex);
                        if (!ej.isNullOrUndefined(code)) this._rgbaColor(code);
                        else {
                            var hsvRegex = /^hsva?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/;
                            code = value.match(hsvRegex);
                            if (!ej.isNullOrUndefined(code)) {
                                this._hsvColor(code);
                            }
                            else {
                                value != "" && this._inputTag.addClass('e-error');
                                this._change = false;
                                return false;
                            }
                        }
                    }
                    if (this._change) {
                        this._valueOperation();
                        this._colorSlider.option('value', parseInt(this._hsv.h));
                        this._hueGradient();
                        this._changeEvent(false);
                        !this.element.is('input') && this._selectEvent();
                        if (this._inputTag.val() !== "") this._inputTag.removeClass("e-error");
                    }
                }
            }
            else {
                if (e.keyCode != 9) e.preventDefault();
                if (!e.shiftKey && !e.ctrlKey && e.keyCode !== 27 && e.keyCode !=20) this._inputTag.addClass('e-error');
            }
        },
        _setEmptyValue: function () {
            if(this.popupContainer){
                this._handleArea.css("visibility", "hidden");
                this._currentTag.css({ "background-color": "" });
                this._removeClass();
                this._inputTag.val(null);
            }
            this._tempValue = null;
            if (this._previousValue !== this._tempValue) {
                this._trigger("change", { value: null });
                this._previousValue = this._tempValue
            }
        },
        _rgbaColor: function (code) {
            var rgb = {}, color;
            if (code[0].split('(')[0] == "rgba" && !ej.isNullOrUndefined(code[4])) {
                rgb.r = code[1]; rgb.g = code[2]; rgb.b = code[3]; rgb.a = code[4];
            }
            else if (code[0].split('(')[0] == "rgb" && ej.isNullOrUndefined(code[4])) {
                rgb.r = code[1]; rgb.g = code[2]; rgb.b = code[3]; rgb.a = this.rgb.a;
                this._inputTag.val("rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + rgb.a + ")");
            }
            else {
                this._inputTag.addClass('e-error');
                this._change = false;
                return false;
            }
            this.rgb.a = parseFloat(rgb.a);
            this._tempOpacity = this.rgb.a * 100;
            this._opacity.option('value', this._tempOpacity);
            this.opacityValue(this._tempOpacity);
            this._tempValue = this.RGBToHEX(rgb);
            this._HexToHSV(this._tempValue);
            this._inputTag.removeClass("e-error");
            this._change = true;
        },
        _hsvColor: function (code) {
            var hsv = {};
            if (!ej.isNullOrUndefined(code[4])) {
                hsv.h = code[1]; hsv.s = code[2]; hsv.v = code[3]; hsv.a = code[4];
            }
            else {
                this._inputTag.addClass('e-error');
                this._change = false;
                return false;
            }
            this.rgb.a = parseFloat(hsv.a);
            this._tempOpacity = this.rgb.a * 100;
            this._opacity.option('value', this._tempOpacity);
            this.opacityValue(this._tempOpacity);
            this.rgb = this.HSVToRGB(hsv);
            this._tempValue = this.RGBToHEX(this.rgb);
            this._inputTag.removeClass("e-error");
            this._change = true;
        },
        _iconClick: function (e) {
            e.preventDefault();
            this._showHidePopup();
            this.wrapper.focus();
        },
        _showHidePopup: function () {
            if (this.model.displayInline) return false;
            if (!this.isPopupOpen) this.show();
            else {
                this.hide();
                this.wrapper.focus();
            }
        },

        hide: function () {
            var proxy = this;
            if (!this.isPopupOpen||this.model.displayInline) return false;
            this.isPopupOpen = this._dataBind = false;
            if (this.element.is('input')) {
                this.wrapper.focus();
                this.wrapper.removeClass("e-active");
            }
            this._width = this._gradientArea.width(); this._height = this._gradientArea.height();
            this.popupContainer.slideUp(200, function () {
                if (proxy.model) {
                    proxy._tempOpacity = proxy.opacityValue();
                    proxy.rgb.a = proxy._tempOpacity / 100;
                    proxy._tempValue = proxy.value();
                    proxy._renderModelValue(proxy.value());
                    proxy._opacity.option('value', parseInt(proxy.opacityValue()));
                    if (!proxy.model.displayInline)
                        proxy._off($(document), "mousedown", proxy._onDocumentClick);
                    proxy._trigger("close");
                }
            });
            if (!this.model.displayInline)
                this._off($(document), "mousedown", this._onDocumentClick);
            this._off(this._inputTag, "keydown", this._colorCodeValue);
            this._off(this._inputTag, "blur", this._colorCodeValue);
            this._modelType == "palette" ? this._off($(document), "keydown", this._keyDown) : this._off($(document), "keydown", this._onKeyDown);
            this._off(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
            $(window).off("resize", $.proxy(this._OnWindowResize, this));
        },
        _hidePopup: function () {
            !this.model.displayInline && this.hide();
        },

        show: function () {
            if(!this.popupContainer){
                this._renderPopup();
            }
            if (this.element.is("input")) {
                this.wrapper.focus();
                this.wrapper.addClass("e-active");
            }
            if (this.isPopupOpen || !this.model.enabled) return false;
            this.isPopupOpen = true;
            if (this.model.modelType == "palette") this._cellSelect();
            if (!this.model.displayInline && (this.value() === "" || ej.isNullOrUndefined(this.value())))
                this._setEmptyValue();
            else
                this._handleArea.css("visibility", "visible");
            this._previousColor = this._previousValue = this.value();
            this.popupContainer.children().find('.e-focus').removeClass('e-focus');
            if (!this.model.displayInline) this._setPopupPosition();
            var proxy = this;
            this.popupContainer.slideDown(200, function () {
                proxy.isFocused = true;
                proxy._on($(document), "mousedown", proxy._onDocumentClick);
                proxy._trigger("open");
            });
            if (!this._dataBind)
                this._modelType == "palette" ? this._on($(document), "keydown", this._keyDown) : this._on($(document), "keydown", this._onKeyDown);
            this._on(this._inputTag, "keydown", this._colorCodeValue);
            this._on(this._inputTag, "blur", this._colorCodeValue);
            this._dataBind = true;
            $(window).on("resize", $.proxy(this._OnWindowResize, this));
            if (!this.model.displayInline) this._on(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
            if (this._prevSize !== $(window).width()) this.refresh();
        },
        _showBindEvents: function () {
            this._modelType == "palette" ? this._on($(document), "keydown", this._keyDown) : this._on($(document), "keydown", this._onKeyDown);
        },
        _hideUnBindEvents: function () {
            this._modelType == "palette" ? this._off($(document), "keydown", this._onKeyDown) : this._off($(document), "keydown", this._keyDown);
        },
        _switchEvents: function () {
            if (this._switch) {
                this._on(this._gradientArea, "mousedown touchstart", this._handleMove);
                this._on(this._handleArea, "mousedown touchstart", this._handleClick);
                this._on(this._gradientArea, "mousedown touchstart", this._handleClick);
            }
            else this._on(this._collection, "mousedown", this._onSelect);
        },
        _unSwitchEvents: function () {
            if (!this._switch) {
                this._off(this._gradientArea, "mousedown touchstart", this._handleMove);
                this._off(this._handleArea, "mousedown touchstart", this._handleClick);
                this._off(this._gradientArea, "mousedown touchstart", this._handleClick);
            }
            else this._off(this._collection, "mousedown", this._onSelect);
        },
        _groupButton: function (e) {
            if ($(e.target).hasClass('e-disable')) return false;
            if ($(e.target).hasClass("e-button")) {
                var element = this._groupTag.find('.e-btn.e-select');
                if (this._inputTag.val() !== "") this._inputTagValue($(e.target));
                else this._selectedButton = $(e.target);
                this._selectedButton.html() !== "HEX" ? this._inputTag.attr('maxLength', '22') : this._inputTag.attr('maxLength', '7');
                this._groupTag.find('.e-click').removeClass('e-click');
                $(e.target).addClass('e-click');
                this._inputTag.removeClass('e-error');
            }
        },
        _inputTagValue: function (type) {
            if (type.html() == "RGBA") this._inputTag.val(this._formRGBA(this.rgb));
            else if (type.html() == "HEX") this._inputTag.val(this.RGBToHEX(this.rgb));
            else if (type.html() == "HSVA") {
                if (this._modelType != "palette")
                    this._inputTag.val("hsva(" + Math.round(this._hsv.h) + "," + Math.round(this._hsv.s) + "," + Math.round(this._hsv.v) + "," + this.rgb.a + ")");
            }
            this._selectedButton = type;
        },
        _bindRecentEvent: function () {
            this._on(this._divTag, "click", this._recentColor);
        },
        _unBindRecentEvent: function () {
            this._off(this._divTag, "click", this._recentColor);
        },
        _handlePlacement: function (prop, value, bool) {
            this._handleArea.css("visibility", "visible");
            var hsv = this._hsv;
            hsv[prop] += value * (bool ? 1 : 3);
            if (hsv[prop] < 0) { hsv[prop] = 0; }
            prop === "s" ? this._hsv.s = hsv[prop] : this._hsv.v = hsv[prop];
            this._hsvValue();
            this._tempValue = this.RGBToHEX(this.rgb);
            this._changeEvent(false);
        },
        _onKeyDown: function (e) {
            var key = e.keyCode;
            if (!this.model.enabled) return;
            if (e.shiftKey && key == 9) if ($(this._hueSlider).find('.e-handle').hasClass('e-focus')) this._focusWrapper(e);
            if (!this._isFocused) if (key == 9 && key !== 27) return;
            this._change = true;
            if ((!e.altKey && !e.shiftKey)) {
                switch (key) {
                    case 39:
                        if (this.element.is('input') && $(e.target).is(this.wrapper)) {
                            e.preventDefault();
                            this._handlePlacement("s", 1, e.ctrlKey);
                        }
                        break;
                    case 38:
                        if (this.element.is('input') && $(e.target).is(this.wrapper)) {
                            e.preventDefault();
                            this._handlePlacement("v", 1, e.ctrlKey);
                        }
                        break;
                    case 37:
                        if (this.element.is('input') && $(e.target).is(this.wrapper)) {
                            e.preventDefault();
                            this._handlePlacement("s", -1, e.ctrlKey);
                        }
                        break;
                    case 40:
                        if (this.element.is('input') && $(e.target).is(this.wrapper)) {
                            e.preventDefault();
                            this._handlePlacement("v", -1, e.ctrlKey);
                        }
                        break;
                    case 13:
                        e.preventDefault();
                        if ($(e.target).hasClass('e-switcher')) {
                            this._switchModel();
                            $(e.target).focus();
                        }
                        else if ($(e.target).hasClass('e-applyButton')) this._buttonClick(e);
                        break;
                    case 27:
                        e.preventDefault();
                        !this.model.displayInline && this.hide();
                        this._tempValue = this.value();
                        break;
                    case 9:
                        var active = document.activeElement;
                        if ($(active).is(this.wrapper)) this._focusPopup(e);
                        break;
                }
            }
        },
        _focusPopup: function (e) {
            $(this._hueSlider).find('.e-handle').focus();
            e.preventDefault();
        },
        _focusWrapper: function (e) {
            this.element.is('input') && $(this.wrapper).focus();
            e.preventDefault();
        },
        _onDocumentClick: function (e) {
            if (!$(e.target).is(this.popupContainer) && !$(e.target).parents(".e-colorpicker").is(this.popupContainer) &&
              !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-colorpickerwidget").is(this.wrapper) && !$(e.target).parents('.e-presetWrapper').is("#" + this._id + "_Presets")) {
                if (!this.model.displayInline) {
                    this.hide();
                    if (this.element.is('input')) this.wrapper.removeClass('e-focus');
                }
                this._isFocused = false;
            }
        },

        _OnWindowResize: function (e) {
            if (this.element.is('input')) this._setPopupPosition();
            this.refresh();
        },
        refresh: function () {
            var element = $(this._PresetTable.find('.e-item')[1]);
            var count = 10, paddingSize = 36; //paddingSize is fixed for  palette model cells
            if (!this.isPopupOpen) {
                this.popupContainer.css({ "display": "block", "visibility": "hidden" });
                this._modelType == "palette" && this.PaletteWrapper.css({ "display": "block", "visibility": "hidden" });
            } else if (this._modelType == "picker") {
                this.PaletteWrapper.css({ "display": "block", "visibility": "hidden" });
            }
            if (parseFloat(this._tag.outerHeight()) > element.outerHeight(true) || (($(this._tag).outerWidth() - ($(element).outerWidth(true) * count)) > element.outerWidth()) || $(this._tag).outerWidth() == 0) {
                var rowSize = parseFloat($(this._tag).outerWidth()) - paddingSize;
                var cellWidth = (rowSize / count) - (element.outerWidth() - element.width());
                this._PresetTable.find('.e-item').css('width', cellWidth);
                if (element.outerWidth(true) * count > this._tag.outerWidth()) this._PresetTable.find('.e-item').css('width', cellWidth - 1);
            }
            if (!this.isPopupOpen) {
                this.popupContainer.css({ "display": "none", "visibility": "visible" });
                this._modelType == "palette" && this.PaletteWrapper.css({ "visibility": "visible" });
            } else if (this._modelType == "picker") {
                this.PaletteWrapper.css({ "display": "none", "visibility": "visible" });
            }
            this._prevSize = $(window).width();
            this._width = this._gradientArea.width(); this._height = this._gradientArea.height();
        },

        _range: function (range, value) {
            if (value === "") return value = 0;
            else if (value > range) return range;
            else return value;
        },
        _hsvValue: function () {
            var colorCode, hsv;
            this._change = true;
            this._hsv.v = this._hsv.v >= 100 ? 100 : this._hsv.v;
            this._hsv.s = this._hsv.s >= 100 ? 100 : this._hsv.s;
            this.hsv = this._hsv;
            this.rgb = this.HSVToRGB(this.hsv);
            this._valueOperation();
            this._inputTagValue(this._selectedButton);
        },
        _formRGB: function (value) {
            if (!ej.isNullOrUndefined(value)) return "rgb(" + value.r + "," + value.g + "," + value.b + ")";
        },
        _formRGBA: function (value) {
            if (!ej.isNullOrUndefined(value)) return "rgba(" + value.r + "," + value.g + "," + value.b + "," + value.a + ")";
        },
        _rgbValue: function (e) {
            var rgbColor, colorCode, value;
            value = this._HexToRGB(this._tempValue);
            if (!ej.isNullOrUndefined(value)) {
                this.rgb = value;
                this._change = true;
                this.HSVToRGB(this.RGBToHSV(this.rgb));
                this._colorSlider.option('value', parseInt(this._hsv.h));
                this._opacity.option('value', this.rgb.a * 100);
            }
            this._valueOperation();
            this._inputTagValue(this._selectedButton);
        },
        _valueOperation: function () {
            this._handlePosition();
            this._alphaGradient(this._tempValue);
            this._inputTag.removeClass("e-error");
            this._updateUI();
        },
        _HexToHSV: function (hex) {
            return this.HSVToRGB(this.RGBToHSV(this._HexToRGB(hex)));
        },
        _HexToRGB: function (hex) {
            if (!ej.isNullOrUndefined(hex)) {
                var reg = "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$", hex, validate = hex.match(reg);
                if (ej.isNullOrUndefined(validate)) { this._change = false; return false; }
                if (validate[1].length == 3)
                    hex = "#" + validate[1][0] + validate[1][0] + validate[1][1] + validate[1][1] + validate[1][2] + validate[1][2];
                this._change = true;
                hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
                var value = ej.isNullOrUndefined(this.rgb) ? parseFloat(this._tempOpacity) / 100 : this.rgb.a;
                return this.rgb = { r: hex >> 16, g: (hex & 0x00FF00) >> 8, b: (hex & 0x0000FF), a: value };
            }
        },

        RGBToHSV: function (rgb) {
            var hsv = { h: 0, s: 0, v: 0 };
            var min = Math.min(rgb.r, rgb.g, rgb.b);
            var max = Math.max(rgb.r, rgb.g, rgb.b);
            var differ = max - min;
            hsv.v = max;
            hsv.v *= 100 / 255;
            if (differ === 0) {
                this._hsv = hsv;
                return hsv;
            }
            hsv.s = max != 0 ? 255 * differ / max : 0;
            if (hsv.s != 0) {
                if (rgb.r == max) hsv.h = (rgb.g - rgb.b) / differ;
                else if (rgb.g == max) hsv.h = 2 + (rgb.b - rgb.r) / differ;
                else hsv.h = 4 + (rgb.r - rgb.g) / differ;
            } else hsv.h = -1;
            hsv.h *= 60;
            if (hsv.h < 0) hsv.h += 360;
            hsv.s *= 100 / 255;
            this._hsv = hsv;
            return hsv;
        },

        HSVToRGB: function (hsv) {
            var rgb = {};
            var h = parseFloat(hsv.h);
            var s = parseFloat(hsv.s * 255 / 100);
            var v = parseFloat(hsv.v * 255 / 100);
            if (s == 0) {
                rgb.r = rgb.g = rgb.b = v;
            } else {
                var t1 = v;
                var t2 = (255 - s) * v / 255;
                var t3 = (t1 - t2) * (h % 60) / 60;
                if (h == 360) h = 0;
                if (h < 60) { rgb.r = t1; rgb.b = t2; rgb.g = t2 + t3 }
                else if (h < 120) { rgb.g = t1; rgb.b = t2; rgb.r = t1 - t3 }
                else if (h < 180) { rgb.g = t1; rgb.r = t2; rgb.b = t2 + t3 }
                else if (h < 240) { rgb.b = t1; rgb.r = t2; rgb.g = t1 - t3 }
                else if (h < 300) { rgb.b = t1; rgb.g = t2; rgb.r = t2 + t3 }
                else if (h < 360) { rgb.r = t1; rgb.g = t2; rgb.b = t1 - t3 }
                else { rgb.r = 0; rgb.g = 0; rgb.b = 0 }
            }
            this._hsv = hsv;
            var value = ej.isNullOrUndefined(this.rgb) ? parseFloat(this._tempOpacity) / 100 : this.rgb.a;
            return { r: Math.round(rgb.r), g: Math.round(rgb.g), b: Math.round(rgb.b), a: value }
        },
        _HSVToHex: function (hsv) {
            return this.RGBToHEX(this.HSVToRGB(hsv));
        },
        _toHEX: function (rgb) {
            if (rgb.indexOf("#") !== -1) return rgb;
            rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
            return "#" + this._hex(rgb[1]) + this._hex(rgb[2]) + this._hex(rgb[3]);
        },



        RGBToHEX: function (rgb) {
            if (!ej.isNullOrUndefined(rgb))
                return "#" + this._hex(rgb.r) + this._hex(rgb.g) + this._hex(rgb.b);
        },
        _hex: function (x) {
            return ("0" + parseInt(x).toString(16)).slice(-2);
        },
        _colorValue: function (value) {
            this._color = value.indexOf("#") != -1 ? this.hexCodeToRGB(value) : "";
            return "rgb(" + this._color.r + ", " + this._color.g + ", " + this._color.b + ")";
        },


        hexCodeToRGB: function (colorCode) {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorCode);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16),
                a: this.rgb.a
            } : null;
        },

        _updatePreviewColor: function () {
            if (this._browser.name = "msie" && this._browser.version == "8.0")
                this._previousTag.css({ "background-color": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
            else
                this._previousTag.css({ "background-color": this._formRGBA(this.rgb) });
            this._oldValue = this.rgb;
        },
        _updateUI: function () {
            var value = this._hsv;
            if (this._switch) {
                var hsv = { h: this._hsv.h, s: 100, v: 100 };
                this._gradientArea.css({ "background-color": this._colorValue(this._HSVToHex(hsv)) });
            } else this._cellSelect();
            if (this._browser.name = "msie" && this._browser.version == "8.0") {
                this._currentTag.css({ "background-color": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
                this._previousTag.css({ "background-color": this._formRGB(this._oldValue), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
            }
            else {
                this._currentTag.css({ "background-color": this._formRGBA(this.rgb) });
                this._previousTag.css({ "background-color": this._formRGBA(this._oldValue) });
                this._alphaSlider.children(".e-handle").css({ "background": this._formRGBA(this.rgb) });
            }
            this._hsv = value;
        },

        _targetFocus: function (e) {
            e.preventDefault();
            if (!this._isFocused) {
                this._isFocused = true;
                if (this.element.is("input")) this.wrapper.addClass("e-focus");
            }
        },
        _targetBlur: function (e) {
            this._isFocused = false;
            if (!this.isPopupOpen && this.element.is("input")) this.wrapper.removeClass("e-focus");
        },
        _switchModel: function () {
            this._tempValue = this.RGBToHEX(this.rgb);
            this.refresh();
            var proxy = this;
            this._off(this._changeTag, "click", this._switchModel);
            if (this._modelType == "palette") {
                this._modelType = "picker";
                this._switcher.removeClass("e-pickerModel").addClass("e-paletteModel");
                this.PaletteWrapper.fadeOut(300, function () {
                    proxy._presetTag.parents('.e-split.e-widget').addClass('e-hide');
                    proxy._gradient.fadeIn(300);
                    proxy._on(proxy._changeTag, "click", proxy._switchModel);
                });
                this._switch = true;
                this._rgbValue();
                this._hueGradient();
                this._hsva.ejButton("enable");
            } else {
                this.PaletteWrapper.remove();
                this._modelType = "palette";
                this.PaletteWrapper = this._layoutType(this.model.palette);
                this._gradient.addClass('e-hide');
                this._paletteType();
                this._switcher.removeClass("e-paletteModel").addClass("e-pickerModel");
                this._gradient.fadeOut(300, function () {
                    proxy._presetTag.parents('.e-split.e-widget').removeClass('e-hide');
                    if (ej.isNullOrUndefined(proxy.PaletteWrapper)) {
                        proxy.PaletteWrapper = proxy._layoutType(proxy.model.palette);
                        proxy._splitObj.option('prefixIcon', 'e-color-image e-' + proxy.model.presetType);
                        proxy.popupList.prepend(proxy.PaletteWrapper);
                    }
                    proxy.PaletteWrapper.fadeIn(300);
                    proxy._on(proxy._changeTag, "click", proxy._switchModel);
                });
                if (this.value() !== "")
                    this._cellSelect();
                this._disableHSVButton();
            }
            this.model.palette === "custompalette" && this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
            if (!this.model.displayInline || this.element.is(":input")) this.wrapper.focus();
            this._switchEvents();
            this._unSwitchEvents();
            if (this.isPopupOpen) {
                this._hideUnBindEvents();
                this._showBindEvents();
            }
        },
        _disableHSVButton: function () {
            if ($(this._groupTag.find('.e-click')).hasClass('e-hsvButton')) {
                this._inputTagValue(this._rgb);
                this._rgb.addClass('e-click');
                this._hsva.removeClass('e-click');
            }
            this._hsva.ejButton("disable");
        },

        _cellSelect: function () {
            var code, element, proxy = this;
            this._removeClass();
            this._collection.find('.e-item').each(function () {
                code = $(this).css("background-color");
                if (proxy._browser.name = "msie" && proxy._browser.version == "8.0") {
                    if (code && code.replace(/ /g, '') === proxy.RGBToHEX(proxy.rgb)) {
                        element = this;
                        $(element).addClass("e-filter");
                    }
                } else {
                    if (code && code.replace(/ /g, '') === proxy._formRGB(proxy.rgb)) element = this;
                }
            });
            $(element).addClass("e-state-selected").attr("aria-selected", true);
        },
        _removeClass: function () {
            this._collection.find('.e-item').removeClass('e-state-selected').removeClass("e-filter").removeAttr("aria-selected");
        },
        _position: function (items, element, columns) {
            items = Array.prototype.slice.call(items);
            var n = items.length,
            index = items.indexOf(element);
            if (index < 0) return columns < 0 ? items[n - 1] : items[0];
            index += columns;
            return items[index < 0 ? index += n : index %= n];
        },
        _onSelect: function (e) {
            if (!this.model.enabled) return false;
            this._isFocused = true;
            this._handleArea.css("visibility", "visible");
            if (e.target.style.backgroundColor != "") {
                this._collection.find('.e-item').removeClass("e-state-selected").removeAttr('aria-selected');
                this._HexToRGB(this._toHEX(e.target.style.backgroundColor));
                this._updateUI();
                this._inputTagValue(this._selectedButton);
                if (!this.model.displayInline || this.element.is("input")) this.wrapper.focus();
                this._tempValue = this.RGBToHEX(this.rgb);
                this._changeEvent(false);
            }
            e.preventDefault();
        },
        _keyDown: function (e) {
            if (this._isFocused) {
                this._change = true;
                if (!this.model.enabled) return false;
                var selected = "",
                    key = e.keyCode,
                    items = this._collection.find('.e-item'),
                    element = items.filter(".e-state-selected").get(0),
                    columnSize = this.model.columns;
                if (!e.altKey && (key == 37 || key == 38 || key == 39 || key == 40) && (e.target.className !== "e-color-code"))
                    this._removeClass();
                switch (!e.altKey && key) {
                    case 40:
                        if (e.target.className !== "e-color-code") {
                            e.preventDefault();
                            selected = this._position(items, element, columnSize);
                        }
                        break;
                    case 37:
                        if (e.target.className !== "e-color-code") {
                            e.preventDefault();
                            selected = this._position(items, element, -1);
                        }
                        break;
                    case 38:
                        if (e.target.className !== "e-color-code") {
                            e.preventDefault();
                            selected = this._position(items, element, -columnSize);
                        }
                        break;
                    case 39:
                        if (e.target.className !== "e-color-code") {
                            e.preventDefault();
                            selected = this._position(items, element, 1);
                        }
                        break;
                    case 13:
                        this._collection.find('.e-item').removeClass('e-state-selected').removeAttr("aria-selected");
                        if ($(e.target).hasClass('e-switcher')){
                            this._switchModel();
                            $(e.target).focus();
                        } 
                        else if ($(e.target).hasClass('e-applyButton')) {
                            this._buttonClick(e);
                            this._updateUI();
                            !this.model.displayInline && this.hide();
                            if (this.element.is("input")) this.wrapper.focus();
                        }
                        break;
                    case 27:
                        !this.model.displayInline && this.hide();
                        $(this._presetContainer).hide();
                        if (this.element.is("input")) this.wrapper.focus();
                        break;
                    case 9:
                        var active = document.activeElement;
                        if ($(active).is(this.wrapper)) this._focusPalettePopup(e, true);
                        break;
                }
                if (selected) {
                    $(selected).addClass('e-state-selected').attr("aria-selected", true);
                    this._currentTag.css({ "background-color": this._formRGB(this._HexToRGB($(selected).attr("data-value")))});
                    this._inputTagValue(this._selectedButton);
                    this._tempValue = this.RGBToHEX(this.rgb);
                    this._changeEvent(false);
                }
            } else {
                if (e.keyCode == 27) {
                    this.hide();
                    $(this._presetContainer).hide();
                }
            }
        },
        _focusPalettePopup: function (e, type) {
            $(this.popupContainer).focus();
            e.preventDefault();
        },
    })

    ej.ColorPicker.Locale = ej.ColorPicker.Locale || {};

    ej.ColorPicker.Locale["default"] = ej.ColorPicker.Locale["en-US"] = {
        buttonText: {
                apply: "Apply",
                cancel: "Cancel",
                swatches: "Swatches"
            },

            tooltipText: {
                switcher: "Switcher",
                addButton: "Add Color",
                basic: "Basic",
                monoChrome: "Mono Chrome",
                flatColors: "Flat Colors",
                seaWolf: "Sea Wolf",
                webColors: "Web Colors",
                sandy: "Sandy",
                pinkShades: "Pink Shades",
                misty: "Misty",
                citrus: "Citrus",
                vintage: "Vintage",
                moonLight: "Moon Light",
                candyCrush: "Candy Crush",
                currentColor: "Current Color",
                selectedColor: "Selected Color",
            }
    }
    ej.ColorPicker.Palette = {
        /**  Represents the basic Palette. This is default Type*/
        BasicPalette: "basicpalette",
        /**  Represents the custom Palette. User will customize the palette*/
        CustomPalette: "custompalette",
    }

    ej.ColorPicker.ModelType = {
        /**  Represents Palette Type*/
        Palette: "palette",
        /** Represents Picker Type */
        Picker: "picker"
    }

    ej.ColorPicker.ButtonMode = {
        /**  Represents the default bahavior*/
        Default: "dropdown",
        /**  Represents the Split bahavior, to perform the separete operation for each button*/
        Split: "split",
    }

    ej.ColorPicker.PresetType = {
        Basic: "basic",
        MonoChrome: "monochrome",
        FlatColors: "flatcolors",
        SeaWolf: "seawolf",
        WebColors: "webcolors",
        Sandy: "sandy",
        PinkShades: "pinkshades",
        Misty: "misty",
        Citrus: "citrus",
        Vintage: "vintage",
        MoonLight: "moonlight",
        CandyCrush: "candycrush",
    }
    var Colors = {
        basic: ["ffffff", "facbcb", "fccb98", "faf39a", "fbf8cd", "a6d38b", "aadee8", "d1ecf2", "cdcae5", "eecde1", "cccbcb", "f16667", "f69668", "f8ee6b", "f7ec37", "89c987", "75cddd", "8bd3e1", "7f7fcc", "9494c8", "b3b2b3", "ec2024", "f7971d", "ffcb67", "f5ea14", "74bf44", "69c8c9", "46c7f4", "6666ad", "b76cab", "676767", "971b1e", "ca6828", "ca9732", "979937", "0d9948", "339898", "4857a6", "62449a", "973794", "000000", "2f1110", "973620", "663433", "343416", "183319", "023334", "22205f", "3b2f8d", "310e31"],
        monochrome: ["ffffff", "e3e3e3", "c6c6c6", "aaaaaa", "8e8e8e", "717171", "555555", "393939", "1c1c1c", "000000", "f9e6e7", "f4d0d2", "efbabc", "e9a4a7", "e48e92", "df787c", "da6267", "d44c52", "cf363c", "ca2027", "fff4ca", "ffeb9e", "fff0b4", "ffefb1", "ffe788", "ffe272", "ffd947", "ffd531", "ffd01b", "ffcc05", "e4f4eb", "ccead9", "b4e0c7", "9cd6b5", "84cca3", "6dc190", "55b77e", "3dad6c", "25a35a", "0d9948", "e8f4f4", "d6e3eb", "c4d1e3", "b3c0da", "a1aed1", "8f9dc9", "7d8bc0", "6c7ab7", "5a68af", "4857a6"],
        flatcolors: ["7477b8", "488bca", "18b1d4", "1db369", "78c162", "acc063", "ffe84e", "f6b757", "f79853", "ed6346", "E87F3D", "E4C45D", "B7A575", "999999", "67809F", "002228", "00A578", "F9A41F", "F3770B", "D7401B", "FFCB36", "82CC2C", "36B595", "6370AD", "D4264E", "004D8E", "22A04B", "F3A414", "C77405", "F3420B", "1ABC9C", "3498DB", "9B59B6", "E67E22", "E74C3C", "3A738A", "EBD9A7", "89AD78", "FF766D", "C76160", "BF3542", "CDC5BA", "EBE3D6", "3C3C3C", "2E2E2E", "77A7FB", "E57368", "FBCB43", "34B67A", "FFFFFF"],
        seawolf: ["0EEAFF", "15A9FA", "1B76FF", "1C3FFD", "2C1DFF", "0B3C4C", "0E5066", "13647F", "127899", "1A8BB2", "74B8E8", "659EBB", "3C9FFF", "26466F", "2472FF", "0069A4", "009BF2", "004165", "49A0B4", "274C5F", "000000", "7A5848", "E0A088", "F9DEC6", "3A2A22", "DC3522", "D9CB9E", "374140", "2A2C2B", "1E1E20", "CB3937", "FE6B2C", "654E44", "6DD16F", "70FE2C", "275673", "4681A6", "FDDEC9", "F22816", "400101", "071C2F", "388494", "E6A934", "F3DB5F", "534329", "206956", "47683B", "E1BFA6", "BF7950", "903932"],
        webcolors: ["0066aa", "00bbdd", "338800", "77bb00", "ffcc99", "990c0c", "0303c9", "336699", "669933", "cccccc", "EEEEEE", "E7C36F", "F7B230", "E35B20", "000033", "7D7A74", "BD524A", "FCB200", "8CFCC2", "2ACD6B", "666666", "666553", "FFFEEC", "B2B2A4", "AAA4B2", "9CA5E3", "5A668C", "BBA469", "CFC295", "FFFFFF", "DBBF56", "2E94B3", "808080", "E96656", "14A168", "DE185B", "D8806F", "DBE186", "D8CC63", "DCC527", "4E6C89", "E2BDAD", "EC6053", "81BBAD", "DFCDA5", "453394", "66398A", "313E7D", "336694", "788E91"],
        sandy: ["c0a986", "ecd9c3", "dfc79b", "f6d58e", "ecdaad", "fff3e0", "7f6b4a", "ffd694", "7f7a70", "ccac76", "E6E2AF", "A79A71", "EFECCA", "806F4C", "2F2F2E", "997F1A", "CCB65F", "FFD291", "6B674A", "635F3A", "7F693A", "FFEBC1", "FFD275", "7F7561", "CCA85E", "D29854", "4A4034", "C9AD8D", "4A351D", "968169", "E6E39F", "9A9757", "FFFDC9", "94909A", "E2E0E6", "960010", "EB1517", "CD7C29", "9A571C", "1F7A94", "7F6826", "7F724C", "FFE499", "FFD04C", "CCA63D", "FFA669", "92FFB6", "FFF352", "E8C269", "D7E8CB"],
        pinkshades: ["F6B1C3", "F0788C", "DE264C", "BC0D35", "A20D1E", "E12256", "BB1C48", "7B132F", "3B0917", "FA2660", "FFB7B5", "9A423F", "FF6D68", "BB5855", "CC5753", "E88161", "D66C60", "C2646E", "996072", "705262", "FFA1BD", "FF8FB7", "FF82AE", "E9719B", "CC6882", "F250C7", "BF1774", "BF2696", "AC60AA", "BB90C5", "BF1553", "F20775", "F2F2F2", "e5566d", "f2afc1", "f43fa5", "fc8c99", "FF6887", "7F3443", "CC536C", "D06AA9", "E65F41", "650017", "BC1620", "FA427E", "3B1132", "84476E", "B83D65", "E6E0E8", "FF6EE8"],
        misty: ["5C7A84", "3D5372", "7C9196", "50748A", "ADBFBF", "010735", "052159", "194073", "376B8C", "FFFFFF", "985999", "C811CC", "892EFF", "FF6852", "DBA211", "0A0D0C", "85A67C", "46593E", "BBD9AD", "202616", "BF8E63", "734327", "A66C4B", "593A2F", "BFBFBF", "8DB0B6", "1B778A", "F46C1B", "881801", "192129", "81808C", "ABAABF", "0C0E09", "6A7366", "37402F", "5D6663", "84867B", "A4A66A", "BABBB1", "20211C", "6B9695", "646E8C", "6B8196", "61787F", "648C80", "8E9FBA", "89A8C8", "799ED1", "7FAEE7", "849EBD"],
        citrus: ["FAEA41", "E7F03E", "E3C647", "FAC541", "F0AB3E", "CCCA1F", "FFF300", "FFCB0D", "FF9500", "804A00", "6A692A", "FFFCA0", "FFFFFF", "CF664E", "EFAC66", "EFF299", "F2DC6D", "F29727", "F2600C", "592202", "214001", "4F7302", "1A2601", "BCD97E", "C0D904", "AAFEFF", "359D6D", "E5FF45", "65FCCF", "ABDC4B", "42B200", "C6FF00", "F2E304", "FFB200", "FF8600", "52EC04", "04E206", "94D507", "ECE404", "E2C904", "DA321C", "FF7913", "FBD028", "C0D725", "9FC131", "547312", "ADBF26", "DEB329", "F1DB47", "E08214"],
        vintage: ["684132", "fdbe30", "eaac21", "87783c", "3e4028", "ffc706", "cd5648", "5bafa9", "828282", "363636", "424862", "fb9a63", "bfc4d5", "f6fbf4", "febc98", "657050", "FCF082", "D8D98B", "A2AB80", "4D584A", "5ADED4", "4DAAAB", "26596A", "163342", "6C98A1", "010A26", "28403B", "557359", "AEBF8A", "C7D9AD", "AFFCCB", "CB4243", "D2997E", "36857E", "4AC6BB", "28394B", "191313", "AF0A18", "DC373D", "122438", "43734A", "A6A26D", "D9B448", "BF8C2C", "734002", "26010F", "866F53", "ACBD91", "7BAB87", "546859"],
        moonlight: ["241D37", "2A233D", "322B45", "362F49", "D4BA73", "261225", "592040", "8C3063", "A64985", "73345D", "A3C8FF", "85B6FF", "000040", "213190", "050859", "FFFFFF", "6AAED9", "4184BF", "224573", "2e4154", "bcad7e", "955351", "c36a57", "9a8556", "7e6029", "dbd78e", "beae3b", "c3a04c", "58504d", "967644", "CFC496", "B3B391", "889486", "61797B", "366577", "123340", "436E73", "7B8C61", "D7D996", "F0EBB4", "341F36", "D9B5E0", "9889AB", "4D4E66", "1B2129", "5CBBE3", "FCF1BC", "5C8182", "383A47", "B4F257"],
        candycrush: ["0779f4", "30da00", "fb8006", "f9d802", "a71df7", "f70200", "fd49ae", "682e07", "9b2424", "5e7693", "F9AB3B", "EF5627", "FF0000", "00A398", "803C2C", "DE5711", "FFF026", "FF0048", "14A0CC", "00B229", "FFFFBE", "F7CD99", "FF77A1", "9886E8", "97CACB", "EAEDE5", "FFD127", "FF870C", "EC4610", "9A1900", "993460", "CC1464", "C300FF", "FFFFBC", "CCB914", "FFFEE2", "B24C5F", "FF274F", "0A94CC", "679DB2", "C2FFE6", "16B271", "5FFFBC", "B2442F", "FFA190", "E89359", "FFFB75", "F36EFF", "5999E8", "73EB86"],
    }

})(jQuery, Syncfusion);;
window.ej = window.Syncfusion = window.Syncfusion || {};

(function ($, ej, doc, undefined) {
    'use strict';

  
    ej.DataManager = function (dataSource, query, adaptor) {
          if (!(this instanceof ej.DataManager))
            return new ej.DataManager(dataSource, query, adaptor);

        if (!dataSource)
            dataSource = [];
        adaptor = adaptor || dataSource.adaptor;

        if (typeof (adaptor) === "string") 
            adaptor = new ej[adaptor]();
        var data = [], self = this;

        if (dataSource instanceof Array) {
            // JSON array
            data = {
                json: dataSource,
                offline: true
            };

        } else if (typeof dataSource === "object") {
            if ($.isPlainObject(dataSource)) {
                if (!dataSource.json)
                    dataSource.json = [];
                if (dataSource.table)
                    dataSource.json = this._getJsonFromElement(dataSource.table, dataSource.headerOption);
                data = {
                    url: dataSource.url,
                    insertUrl: dataSource.insertUrl,
                    removeUrl: dataSource.removeUrl,
                    updateUrl: dataSource.updateUrl,
                    crudUrl: dataSource.crudUrl,
                    batchUrl: dataSource.batchUrl,
                    json: dataSource.json,
                    headers: dataSource.headers,
                    accept: dataSource.accept,
                    data: dataSource.data,
					async : dataSource.async,
                    timeTillExpiration: dataSource.timeTillExpiration,
                    cachingPageSize: dataSource.cachingPageSize,
                    enableCaching: dataSource.enableCaching,
                    requestType: dataSource.requestType,
                    key: dataSource.key,
                    crossDomain: dataSource.crossDomain,
                    antiForgery: dataSource.antiForgery,
                    jsonp: dataSource.jsonp,
                    dataType: dataSource.dataType,
                    enableAjaxCache: dataSource.enableAjaxCache,
                    offline: dataSource.offline !== undefined ? dataSource.offline : dataSource.adaptor == "remoteSaveAdaptor" || dataSource.adaptor instanceof ej.remoteSaveAdaptor ? false : dataSource.url ? false : true,
                    requiresFormat: dataSource.requiresFormat
                };
            } else if (dataSource.jquery || isHtmlElement(dataSource)) {
                data = {
                    json: this._getJsonFromElement(dataSource),
                    offline: true,
                    table: dataSource
                };
            }
        } else if (typeof dataSource === "string") {
            data = {
                url: dataSource,
                offline: false,
                dataType: "json",
                json: []
            };
        }

        if (data.requiresFormat === undefined && !ej.support.cors)
            data.requiresFormat = isNull(data.crossDomain) ? true : data.crossDomain;
         if(data.antiForgery){
        this.antiForgeryToken();
        }
        if (data.dataType === undefined)
            data.dataType = "json";
        this.dataSource = data;
        this.defaultQuery = query;

        if (data.url && data.offline && !data.json.length) {
            this.isDataAvailable = false;
            this.adaptor = adaptor || new ej.ODataAdaptor();
            this.dataSource.offline = false;
            this.ready = this.executeQuery(query || ej.Query()).done(function (e) {
                self.dataSource.offline = true;
                self.isDataAvailable = true;
                data.json = e.result;
                self.adaptor = new ej.JsonAdaptor();
            });
        }
        else
            this.adaptor = data.offline ? new ej.JsonAdaptor() : new ej.ODataAdaptor();
        if (!data.jsonp && this.adaptor instanceof ej.ODataAdaptor)
            data.jsonp = "callback";
        this.adaptor = adaptor || this.adaptor;
        if (data.enableCaching)
            this.adaptor = new ej.CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);
        return this;
    };

    ej.DataManager.prototype = {
        setDefaultQuery: function (query) {
            this.defaultQuery = query;
        },
	
        executeQuery: function (query, done, fail, always) {
            if (typeof query === "function") {
                always = fail;
                fail = done;
                done = query;
                query = null;
            }

            if (!query)
                query = this.defaultQuery;

            if (!(query instanceof ej.Query))
                throwError("DataManager - executeQuery() : A query is required to execute");

            var deffered = $.Deferred();

            deffered.then(done, fail, always);
            var args = { query: query };

            if (!this.dataSource.offline && this.dataSource.url != undefined) {
				 var result = this.adaptor.processQuery(this, query);
                if (!ej.isNullOrUndefined(result.url))
                    this._makeRequest(result, deffered, args, query);
                else {
                    nextTick(function () {
                        args = this._getDeferedArgs(query, result, args);
                        deffered.resolveWith(this, [args]);;
                    }, this);
                }
            } else {
				if(!ej.isNullOrUndefined(this.dataSource.async) && this.dataSource.async == false)
					this._localQueryProcess(query, args, deffered);
				else{
					nextTick(function () {
						this._localQueryProcess(query, args, deffered);
					}, this);
				}
            }
            return deffered.promise();
        },
		_localQueryProcess: function(query, args, deffered){
			var res = this.executeLocal(query);
			args = this._getDeferedArgs(query, res, args);
			deffered.resolveWith(this, [args]);
		},
        _getDeferedArgs: function (query, result, args) {
            if (query._requiresCount) {
                args.result = result.result;
                args.count = result.count;
            } else
                args.result = result;
            args.getTableModel = getTableModel(query._fromTable, args.result, this);
            args.getKnockoutModel = getKnockoutModel(args.result);
            return args;
        },
	
        executeLocal: function (query) {
            if (!this.defaultQuery && !(query instanceof ej.Query))
                throwError("DataManager - executeLocal() : A query is required to execute");

            if (!this.dataSource.json)
                throwError("DataManager - executeLocal() : Json data is required to execute");

            query = query || this.defaultQuery;

            var result = this.adaptor.processQuery(this, query);

            if (query._subQuery) {
                var from = query._subQuery._fromTable, lookup = query._subQuery._lookup,
                    res = query._requiresCount ? result.result : result;

                if (lookup && lookup instanceof Array) {
                    buildHierarchy(query._subQuery._fKey, from, res, lookup, query._subQuery._key);
                }

                for (var j = 0; j < res.length; j++) {
                    if (res[j][from] instanceof Array) {
                        res[j] = $.extend({}, res[j]);
                        res[j][from] = this.adaptor.processResponse(query._subQuery.using(ej.DataManager(res[j][from].slice(0))).executeLocal(), this, query);
                    }
                }
            }

            return this.adaptor.processResponse(result, this, query);
        },

        _makeRequest: function (url, deffered, args, query) {
            var isSelector = !!query._subQuerySelector;

            var fnFail = $proxy(function (e) {
                args.error = e;
                deffered.rejectWith(this, [args]);
            }, this);

            var process = $proxy(function (data, count, xhr, request, actual, aggregates, virtualSelectRecords) {
                if (isSelector) return;

                args.xhr = xhr;
                args.count = parseInt(count, 10);
                args.result = data;
                args.request = request;
                args.aggregates = aggregates;
                args.getTableModel = getTableModel(query._fromTable, data, this);
                args.getKnockoutModel = getKnockoutModel(data);
                args.actual = actual;
                args.virtualSelectRecords = virtualSelectRecords;
                deffered.resolveWith(this, [args]);

            }, this);

            var fnQueryChild = $proxy(function (data, selector) {
                var subDeffer = $.Deferred(),
                    childArgs = { parent: args };

                query._subQuery._isChild = true;

                var subUrl = this.adaptor.processQuery(this, query._subQuery, data ? this.adaptor.processResponse(data) : selector);

                var childReq = this._makeRequest(subUrl, subDeffer, childArgs, query._subQuery);

                if(!isSelector)
                    subDeffer.then(function (subData) {
                        if (data) {
                            buildHierarchy(query._subQuery._fKey, query._subQuery._fromTable, data, subData, query._subQuery._key);
                            process(data);
                        }
                    }, fnFail);

                return childReq;
            }, this);

            var fnSuccess = proxy(function (data, status, xhr, request) {
                if (xhr.getResponseHeader("Content-Type").indexOf("xml") == -1 && ej.dateParse)
                    data = ej.parseJSON(data);
                var result = this.adaptor.processResponse(data, this, query, xhr, request), count = 0, aggregates = null;
                var virtualSelectRecords = data.virtualSelectRecords;
                if (query._requiresCount) {
                    count = result.count;
                    aggregates = result.aggregates;
                    result = result.result;
                }

                if (!query._subQuery) {
                    process(result, count, xhr, request, data, aggregates, virtualSelectRecords);
                    return;
                }

                if (!isSelector)
                    fnQueryChild(result);

            }, this);

            var req = $.extend({
                type: "GET",
                dataType: this.dataSource.dataType,
                crossDomain: this.dataSource.crossDomain,
                jsonp: this.dataSource.jsonp,
                cache: ej.isNullOrUndefined(this.dataSource.enableAjaxCache) ? true: this.dataSource.enableAjaxCache,
                beforeSend: $proxy(this._beforeSend, this),
                processData: false,
                success: fnSuccess,
                error: fnFail
            }, url);

            if ("async" in this.dataSource)
                req.async = this.dataSource.async;

            req = $.ajax(req);

            if (isSelector) {
                var res = query._subQuerySelector.call(this, { query: query._subQuery, parent: query });

                if (res && res.length) {
                    req = $.when(req, fnQueryChild(null, res));

                    req.then(proxy(function (pData, cData, requests) {
                        var pResult = this.adaptor.processResponse(pData[0], this, query, pData[2], requests[0]), count = 0;
                        if (query._requiresCount) {
                            count = pResult.count;
                            pResult = pResult.result;
                        }
                        var cResult = this.adaptor.processResponse(cData[0], this, query._subQuery, cData[2], requests[1]), count = 0;
                        if (query._subQuery._requiresCount) {
                            count = cResult.count;
                            cResult = cResult.result;
                        }

                        buildHierarchy(query._subQuery._fKey, query._subQuery._fromTable, pResult, cResult, query._subQuery._key);
                        isSelector = false;
                        process(pResult, count, pData[2]);

                    }, this), fnFail);
                } else {
                    isSelector = false;
                }
            }

            return req;
        },

        _beforeSend: function (request, settings) {
            this.adaptor.beforeSend(this, request, settings);

            var headers = this.dataSource.headers, props;
            for (var i = 0; headers && i < headers.length; i++) {
                props = [];
                for (var prop in headers[i]) {
                    props.push(prop);
                    request.setRequestHeader(prop, headers[i][prop]);
                }
            }
        },
	
        saveChanges: function (changes, key, tableName, query) {

            if (tableName instanceof ej.Query) {
                query = tableName;
                tableName = null;
            }

            var args = {
                url: tableName,
                key: key || this.dataSource.key
            };

            var req = this.adaptor.batchRequest(this, changes, args, query);

            if (this.dataSource.offline) {
                return req;
            }

            var deff = $.Deferred();
            $.ajax($.extend({
                beforeSend: $proxy(this._beforeSend, this),
                success: proxy(function (data, status, xhr, request) {
                    deff.resolveWith(this, [this.adaptor.processResponse(data, this, null, xhr, request, changes, key)]);
                }, this),
                error: function (e) {
                    deff.rejectWith(this, [{ error: e }]);
                }
            }, req));

            return deff.promise();
        },
	
        insert: function (data, tableName, query) {       
            // Additional paramater is included based on the task (JS-56499) to prevent addition of serverOffset multiple times
            data = p.replacer(data, true);

            if (tableName instanceof ej.Query) {
                query = tableName;
                tableName = null;
            }

            var res = this.adaptor.insert(this, data, tableName, query);

            if (this.dataSource.offline) {
                return res;
            }            

            var deffer = $.Deferred();

            $.ajax($.extend({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                processData: false,
                beforeSend: $proxy(this._beforeSend, this),
                success: proxy(function (record, status, xhr, request) {
                    try {
                        if (ej.isNullOrUndefined(record))
                            record = [];
                        else
                            p.parseJson(record);
                    }
                    catch (e) {
                        record = [];
                    }
                    record = this.adaptor.processResponse(p.parseJson(record), this, null, xhr, request);
                    deffer.resolveWith(this, [{ record: record, dataManager: this }]);
                }, this),
                error: function (e) {
                    deffer.rejectWith(this, [{ error: e, dataManager: this }]);
                }
            }, res));

            return deffer.promise();
        },
        antiForgeryToken: function () {
           var tokens = {};
           if(ej.isNullOrUndefined($("input[name='_ejRequestVerifyToken']").val()))
                var input = ej.buildTag("input", "", "", { type: "hidden", name: "_ejRequestVerifyToken" , value: ej.getGuid()}).appendTo("body"); 
           else
               $("input[name='_ejRequestVerifyToken']").val(ej.getGuid());
            ej.cookie.set("_ejRequestVerifyToken", $("input[name='_ejRequestVerifyToken']").val());
            tokens ={name: "_ejRequestVerifyToken", value: $("input[name='_ejRequestVerifyToken']").val()}
            return tokens;
        },
        remove: function (keyField, value, tableName, query) {
            if (typeof value === "object")
                value = value[keyField];

            if (tableName instanceof ej.Query) {
                query = tableName;
                tableName = null;
            }

            var res = this.adaptor.remove(this, keyField, value, tableName, query);

            if (this.dataSource.offline)
                return res;          

            var deffer = $.Deferred();
            $.ajax($.extend({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                beforeSend: $proxy(this._beforeSend, this),
                success: proxy(function (record, status, xhr, request) {
                    try {
                        if (ej.isNullOrUndefined(record))
                            record = [];
                        else
                            p.parseJson(record);
                    }
                    catch (e) {
                        record = [];
                    }
                    record = this.adaptor.processResponse(p.parseJson(record), this, null, xhr, request);
                    deffer.resolveWith(this, [{ record: record, dataManager: this }]);
                }, this),
                error: function (e) {
                    deffer.rejectWith(this, [{ error: e, dataManager: this }]);
                }
            }, res));
            return deffer.promise();
        },
	
        update: function (keyField, value, tableName, query) {
            // Additional paramater is included based on this task (JS-56499) to prevent addition of serverOffset multiple times
            value = p.replacer(value, true);

            if (tableName instanceof ej.Query) {
                query = tableName;
                tableName = null;
            }

            var res = this.adaptor.update(this, keyField, value, tableName, query);

            if (this.dataSource.offline) {
                return res;
            }           

            var deffer = $.Deferred();

           $.ajax($.extend({
                contentType: "application/json; charset=utf-8",
                beforeSend: $proxy(this._beforeSend, this),
                success: proxy(function (record, status, xhr, request) {
                    try {
                        if (ej.isNullOrUndefined(record))
                            record = [];
                        else
                            p.parseJson(record);
                    }
                    catch (e) {
                        record = [];
                    }
                    record = this.adaptor.processResponse(p.parseJson(record), this, null, xhr, request);
                    deffer.resolveWith(this, [{ record: record, dataManager: this }]);
                }, this),
                error: function (e) {
                    deffer.rejectWith(this, [{ error: e, dataManager: this }]);
                }
           }, res));

           return deffer.promise();
        },

        _getJsonFromElement: function (ds) {
            if (typeof (ds) == "string")
                ds = $($(ds).html());

            ds = ds.jquery ? ds[0] : ds;

            var tagName = ds.tagName.toLowerCase();

            if (tagName !== "table")
                throwError("ej.DataManager : Unsupported htmlElement : " + tagName);

            return ej.parseTable(ds);
        }
    };

    var buildHierarchy = function (fKey, from, source, lookup, pKey) {
        var i, grp = {}, t;
        if (lookup.result) lookup = lookup.result;

        if (lookup.GROUPGUID)
            throwError("ej.DataManager: Do not have support Grouping in hierarchy");

        for (i = 0; i < lookup.length; i++) {
            var fKeyData = ej.getObject(fKey, lookup[i]);
            t = grp[fKeyData] || (grp[fKeyData] = []);

            t.push(lookup[i]);
        }

        for (i = 0; i < source.length; i++) {
            source[i][from] = grp[ej.getObject(pKey || fKey, source[i])];
        }
    };

    var oData = {
        accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
        multipartAccept: "multipart/mixed",
        batch: "$batch",
        changeSet: "--changeset_",
        batchPre: "batch_",
        contentId: "Content-Id: ",
        batchContent: "Content-Type: multipart/mixed; boundary=",
        changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
        batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
    };
    var p = {
        parseJson: function (jsonText) {
            var type = typeof jsonText;
            if (type === "string") {
                jsonText = JSON.parse(jsonText, p.jsonReviver);
            } else if (jsonText instanceof Array) {
                p.iterateAndReviveArray(jsonText);
            } else if (type === "object")
                p.iterateAndReviveJson(jsonText);
            return jsonText;
        },
        iterateAndReviveArray: function (array) {
            for (var i = 0; i < array.length; i++) {
                if (typeof array[i] === "object")
                    p.iterateAndReviveJson(array[i]);
                else if (typeof array[i] === "string" && !/^[\s]*\[|^[\s]*\{|\"/g.test(array[i]))
                    array[i] = p.jsonReviver("",array[i]);
                else
                    array[i] = p.parseJson(array[i]);
            }
        },
        iterateAndReviveJson: function (json) {
            var value;
            for (var prop in json) {
                if (prop.startsWith("__"))
                    continue;

                value = json[prop];
                if (typeof value === "object") {
                    if (value instanceof Array)
                        p.iterateAndReviveArray(value);
                    else
                        p.iterateAndReviveJson(value);
                } else
                    json[prop] = p.jsonReviver(prop, value);
            }
        },
        jsonReviver: function (field, value) {
            var s = value, regex = /[\-,/,\,.,:,]+/;
            if (typeof value === "string") {
                var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
                if (ms)
                    return ej.parseDateInUTC ? p.isValidDate(ms[0]) : p.replacer(new Date(parseInt(ms[1])));
                else if (ej.dateParse ? (/^(?:(\d{4}\-\d\d\-\d\d)|(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?)$/.test(value)) : (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value))) {
					var a = s.split(/[^0-9]/);
					if(/^(\d{4}\-\d\d\-\d\d)$/.test(value))
					  value = new Date(a[ej.dateFormat.split(regex).indexOf("yyyy")], a[ej.dateFormat.split(regex).indexOf("MM")]-1, a[ej.dateFormat.split(regex).indexOf("dd")]);					 
					else{
			          value = ej.parseDateInUTC ? p.isValidDate(value) : p.replacer(new Date(value));
                      if (isNaN(value)) 
                        value = p.replacer(new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]));						
					}
                }
            }
            return value;
        },
        isValidDate: function (value) {
            var prop = value;
            if (typeof (prop) === "string" && prop.indexOf("/Date(") == 0) {
                value = prop.replace(/\d+/, function (n) {
                    var offsetMiliseconds = new Date(parseInt(n)).getTimezoneOffset() * 60000;
                    var ticks = parseInt(n) + offsetMiliseconds;
                    return p.replacer(new Date(parseInt(ticks)));
                });
            }
            if (typeof value === "string") {
                value = value.replace("/Date(", function () { return ""; });
                value = value.replace(")/", function () { return ""; })
                var ms = new Date(value) instanceof Date;
                if (ms)
                    return new Date(value);
                else return value;
            }
            return value;
        },
        isJson: function (jsonData) {
            if(typeof jsonData[0]== "string")
                return jsonData;
            return ej.parseJSON(jsonData);
        },
        isGuid: function (value) {
            var regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;
            var match = regex.exec(value);
            return match != null;
        },
        // Additional paramater is included based on this task (JS-56499) to prevent addition of serverOffset multiple times
        replacer: function (value, serverOffset) {

            if (ej.isPlainObject(value))
                return p.jsonReplacer(value, serverOffset);

            if (value instanceof Array)
                return p.arrayReplacer(value);

            if (value instanceof Date)
                return p.jsonReplacer({ val: value }, serverOffset).val;

            return value;
        },
        jsonReplacer: function (val, serverOffset) {
            var value;
            for (var prop in val) {
                value = val[prop];

                if (!(value instanceof Date))
                    continue;
                // checking for update and insert operation and then including the proper offset, based on this task (JS-56499) 
                var offset = ej.serverTimezoneOffset * 60 * 60 * 1000 * (ej.isNullOrUndefined(serverOffset) || (serverOffset === false) ? (1) : -(1));
                val[prop] = new Date(+value + offset);
            }

            return val;
        },
        arrayReplacer: function (val) {

            for (var i = 0; i < val.length; i++) {            
                if (ej.isPlainObject(val[i]))
                    val[i] = p.jsonReplacer(val[i]);
                else if (val[i] instanceof Date)
                    val[i] = p.jsonReplacer({ date: val[i] }).date;
            }

            return val;
        }
    };

    ej.isJSON = p.isJson;
    ej.parseJSON = p.parseJson;
    ej.dateParse = true;
	 ej.dateFormat = "yyyy-MM-dd";
    ej.isGUID = p.isGuid;
    ej.Query = function (from) {
        if (!(this instanceof ej.Query))
            return new ej.Query(from);

        this.queries = [];
        this._key = "";
        this._fKey = "";

        if (typeof from === "string")
            this._fromTable = from || "";
        else if (from && from instanceof Array)
            this._lookup = from;

        this._expands = [];
        this._sortedColumns = [];
        this._groupedColumns = [];
        this._subQuery = null;
        this._isChild = false;
        this._params = [];
        return this;
    };

    ej.Query.prototype = {
        key: function (field) {
            if (typeof field === "string")
                this._key = field;

            return this;
        },
	
        using: function (dataManager) {
            if (dataManager instanceof ej.DataManager) {
                this.dataManagar = dataManager;
                return this;
            }

            return throwError("Query - using() : 'using' function should be called with parameter of instance ej.DataManager");
        },
	
        execute: function (dataManager, done, fail, always) {
            dataManager = dataManager || this.dataManagar;

            if (dataManager && dataManager instanceof ej.DataManager)
                return dataManager.executeQuery(this, done, fail, always);

            return throwError("Query - execute() : dataManager needs to be is set using 'using' function or should be passed as argument");
        },
	
        executeLocal: function (dataManager) {
            // this does not support for URL binding
            

            dataManager = dataManager || this.dataManagar;

            if (dataManager && dataManager instanceof ej.DataManager)
                return dataManager.executeLocal(this);

            return throwError("Query - executeLocal() : dataManager needs to be is set using 'using' function or should be passed as argument");
        },
	
        clone: function () {
            var cl = new ej.Query();
            cl.queries = this.queries.slice(0);
            cl._key = this._key;
            cl._isChild = this._isChild;
            cl.dataManagar = this.dataManager;
            cl._fromTable = this._fromTable;
            cl._params = this._params.slice(0);
            cl._expands = this._expands.slice(0);
            cl._sortedColumns = this._sortedColumns.slice(0);
            cl._groupedColumns = this._groupedColumns.slice(0);
            cl._subQuerySelector = this._subQuerySelector;
            cl._subQuery = this._subQuery;
            cl._fKey = this._fKey;
            cl._requiresCount = this._requiresCount;
            return cl;
        },
	
        from: function (tableName) {
            if (typeof tableName === "string")
                this._fromTable = tableName;

            return this;
        },
	
        addParams: function (key, value) {
            if (typeof value !== "function" && !ej.isPlainObject(value))
                this._params.push({ key: key, value: value });
            else if (typeof value === "function")
                this._params.push({ key: key, fn: value });

            return this;
        },
	
        expand: function (tables) {
            if (typeof tables === "string")
                this._expands = [].slice.call(arguments, 0);
            else
                this._expands = tables.slice(0);

            return this;
        },
	
        where: function (fieldName, operator, value, ignoreCase,ignoreAccent) {
            operator = (operator || ej.FilterOperators.equal).toLowerCase();
            var predicate = null;

            if (typeof fieldName === "string")
                predicate = new ej.Predicate(fieldName, operator, value, ignoreCase,ignoreAccent);
            else if (fieldName instanceof ej.Predicate)
                predicate = fieldName;
            else
                throwError("Query - where : Invalid arguments");

            this.queries.push({
                fn: "onWhere", 
                e: predicate
            });
            return this;
        },
	
        search: function (searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {
            if (!fieldNames || typeof fieldNames === "boolean") {
                fieldNames = [];
                ignoreCase = fieldNames;
            } else if (typeof fieldNames === "string")
                fieldNames = [fieldNames];

            if (typeof operator === "boolean") {
                ignoreCase = operator;
                operator = null;
            }
            operator = operator || ej.FilterOperators.contains;
            if (operator.length < 3)
                operator = ej.data.operatorSymbols[operator];

            var comparer = ej.data.fnOperators[operator] || ej.data.fnOperators.processSymbols(operator);

            this.queries.push({
                fn: "onSearch",
                e: {
                    fieldNames: fieldNames,
                    operator: operator,
                    searchKey: searchKey,
                    ignoreCase: ignoreCase,
                    ignoreAccent: ignoreAccent,
                    comparer: comparer
                }
            });
            return this;
        },
		
        sortBy: function (fieldName, comparer, isFromGroup) {
            var order = ej.sortOrder.Ascending, sorts, t;

            if (typeof fieldName === "string" && fieldName.toLowerCase().endsWith(" desc")) {
                fieldName = fieldName.replace(/ desc$/i, '');
                comparer = ej.sortOrder.Descending;
            }
            if (fieldName instanceof Array) {
                for(var i=0;i<fieldName.length;i++)
                   this.sortBy(fieldName[i],comparer,isFromGroup);
                return this;
            }
            if (typeof comparer === "boolean")
                comparer = !comparer ? ej.sortOrder.Ascending : ej.sortOrder.Descending;
            else if (typeof comparer === "function")
                order = "custom";

            if (!comparer || typeof comparer === "string") {
                order = comparer ? comparer.toLowerCase() : ej.sortOrder.Ascending;
                comparer = ej.pvt.fnSort(comparer);
            }
            if (isFromGroup) {
                sorts = filterQueries(this.queries, "onSortBy");

                for (var i = 0; i < sorts.length; i++) {
                    t = sorts[i].e.fieldName;
                    if (typeof t === "string") {
                        if (t === fieldName) return this;
                    } else if (t instanceof Array) {
                        for (var j = 0; j < t.length; j++)
                            if (t[j] === fieldName || fieldName.toLowerCase() === t[j] + " desc")
                                return this;
                    }
                }
            }

            this.queries.push({
                fn: "onSortBy",
                e: {
                    fieldName: fieldName,
                    comparer: comparer,
                    direction: order
                }
            });

            return this;
        },
		
        sortByDesc: function (fieldName) {
            return this.sortBy(fieldName, ej.sortOrder.Descending);
        },
		
        group: function (fieldName,fn) {
            this.sortBy(fieldName, null, true);

            this.queries.push({
                fn: "onGroup",
                e: {
                    fieldName: fieldName,
                    fn: fn
                }
            });
            return this;
        },
	
        page: function (pageIndex, pageSize) {
            this.queries.push({
                fn: "onPage",
                e: {
                    pageIndex: pageIndex,
                    pageSize: pageSize
                }
            });
            return this;
        },
	
        range: function (start, end) {
            if (typeof start !== "number" || typeof end !== "number")
                throwError("Query() - range : Arguments type should be a number");

            this.queries.push({
                fn: "onRange",
                e: {
                    start: start,
                    end: end
                }
            });
            return this;
        },
	

        take: function (nos) {
            if (typeof nos !== "number")
                throwError("Query() - Take : Argument type should be a number");

            this.queries.push({
                fn: "onTake",
                e: {
                    nos: nos
                }
            });
            return this;
        },
	
        skip: function (nos) {
            if (typeof nos !== "number")
                throwError("Query() - Skip : Argument type should be a number");

            this.queries.push({
                fn: "onSkip",
                e: { nos: nos }
            });
            return this;
        },
	
        select: function (fieldNames) {
            if (typeof fieldNames === "string")
                fieldNames = [].slice.call(arguments, 0);

            if (!(fieldNames instanceof Array)) {
                throwError("Query() - Select : Argument type should be String or Array");
            }

            this.queries.push({
                fn: "onSelect",
                e: { fieldNames: fieldNames }
            });
            return this;
        },
	
        hierarchy: function (query, selectorFn) {
            if (!query || !(query instanceof ej.Query))
                throwError("Query() - hierarchy : query must be instance of ej.Query");

            if (typeof selectorFn === "function")
                this._subQuerySelector = selectorFn;

            this._subQuery = query;
            return this;
        },
	
        foreignKey: function (key) {
            if (typeof key === "string")
                this._fKey = key;

            return this;
        },
	
        requiresCount: function () {
            this._requiresCount = true;

            return this;
        },
        //type - sum, avg, min, max
        aggregate: function (type, field) {
            this.queries.push({
                fn: "onAggregates",
                e: { field: field, type: type }
            });
        }
    };

    ej.Adaptor = function (ds) {
        this.dataSource = ds;
        this.pvt = {};
		this.init.apply(this, [].slice.call(arguments, 1));
    };

    ej.Adaptor.prototype = {
        options: {
            from: "table",
            requestType: "json",
            sortBy: "sorted",
            select: "select",
            skip: "skip",
            group: "group",
            take: "take",
            search: "search",
            count: "requiresCounts",
            where: "where",
            aggregates: "aggregates",
            antiForgery: "antiForgery"
        },
        init: function () {
        },
        extend: function (overrides) {
            var fn = function (ds) {
                this.dataSource = ds;

                if (this.options)
                    this.options = $.extend({}, this.options);
				this.init.apply(this, [].slice.call(arguments, 0));

                this.pvt = {};
            };
            fn.prototype = new this.type();
            fn.prototype.type = fn;

            var base = fn.prototype.base = {};
            for (var p in overrides) {
                if (fn.prototype[p])
                    base[p] = fn.prototype[p];
            }
            $.extend(true, fn.prototype, overrides);
            return fn;
        },
        processQuery: function (dm, query) {
            // this needs to be overridden
        },
        processResponse: function (data, ds, query, xhr) {
            if (data.d)
               return data.d;
            return data;
        },
        convertToQueryString: function (req, query, dm) {
            return $.param(req);
        },
        type: ej.Adaptor
    };

    ej.UrlAdaptor = new ej.Adaptor().extend({
        processQuery: function (dm, query, hierarchyFilters) {
            var sorted = filterQueries(query.queries, "onSortBy"),
                grouped = filterQueries(query.queries, "onGroup"),
                filters = filterQueries(query.queries, "onWhere"),
                searchs = filterQueries(query.queries, "onSearch"),
                aggregates = filterQueries(query.queries, "onAggregates"),
                singles = filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]),
                params = query._params,
                url = dm.dataSource.url, tmp, skip, take = null,
                op = this.options;

            var r = {
                sorted: [],
                grouped: [],
                filters: [],
                searches: [],
                aggregates: []
            };

            // calc Paging & Range
            if (singles["onPage"]) {
                tmp = singles["onPage"];
                skip = getValue(tmp.pageIndex, query);
                take = getValue(tmp.pageSize, query);
				skip = (skip - 1) * take;
            } else if (singles["onRange"]) {
                tmp = singles["onRange"];
                skip = tmp.start;
                take = tmp.end - tmp.start;
            }

            // Sorting
            for (var i = 0; i < sorted.length; i++) {
                tmp = getValue(sorted[i].e.fieldName, query);

                r.sorted.push(callAdaptorFunc(this, "onEachSort", { name: tmp, direction: sorted[i].e.direction }, query));
            }

            // hierarchy
            if (hierarchyFilters) {
                tmp = this.getFiltersFrom(hierarchyFilters, query);
                if (tmp)
                    r.filters.push(callAdaptorFunc(this, "onEachWhere", tmp.toJSON(), query));
            }

            // Filters
            for (var i = 0; i < filters.length; i++) {
                r.filters.push(callAdaptorFunc(this, "onEachWhere", filters[i].e.toJSON(), query));

                for (var prop in r.filters[i]) {
                    if (isNull(r[prop]))
                        delete r[prop];
                }
            }

            // Searches
            for (var i = 0; i < searchs.length; i++) {
                tmp = searchs[i].e;
                r.searches.push(callAdaptorFunc(this, "onEachSearch", {
                    fields: tmp.fieldNames,
                    operator: tmp.operator,
                    key: tmp.searchKey,
                    ignoreCase: tmp.ignoreCase
                }, query));
            }

            // Grouping
            for (var i = 0; i < grouped.length; i++) {
                r.grouped.push(getValue(grouped[i].e.fieldName, query));
            }

            // aggregates
            for (var i = 0; i < aggregates.length; i++) {
                tmp = aggregates[i].e; 
                r.aggregates.push({ type: tmp.type, field: getValue(tmp.field, query) });
            }

            var req = {};
            req[op.from] = query._fromTable;
            if (op.expand) req[op.expand] = query._expands;
            req[op.select] = singles["onSelect"] ? callAdaptorFunc(this, "onSelect", getValue(singles["onSelect"].fieldNames, query), query) : "";
            req[op.count] = query._requiresCount ? callAdaptorFunc(this, "onCount", query._requiresCount, query) : "";
            req[op.search] = r.searches.length ? callAdaptorFunc(this, "onSearch", r.searches, query) : "";
            req[op.skip] = singles["onSkip"] ? callAdaptorFunc(this, "onSkip", getValue(singles["onSkip"].nos, query), query) : "";
            req[op.take] = singles["onTake"] ? callAdaptorFunc(this, "onTake", getValue(singles["onTake"].nos, query), query) : "";
            req[op.antiForgery] = (dm.dataSource.antiForgery) ? dm.antiForgeryToken().value : "";
            req[op.where] = r.filters.length || r.searches.length ? callAdaptorFunc(this, "onWhere", r.filters, query) : "";
            req[op.sortBy] = r.sorted.length ? callAdaptorFunc(this, "onSortBy", r.sorted, query) : "";
            req[op.group] = r.grouped.length ? callAdaptorFunc(this, "onGroup", r.grouped, query) : "";
            req[op.aggregates] = r.aggregates.length ? callAdaptorFunc(this, "onAggregates", r.aggregates, query) : "";
			req["param"] = [];
			
            // Params
			callAdaptorFunc(this, "addParams", { dm: dm, query: query, params: params, reqParams: req });

            // cleanup
            for (var prop in req) {
                if (isNull(req[prop]) || req[prop] === "" || req[prop].length === 0 || prop === "params")
                    delete req[prop];
            }

            if (!(op.skip in req && op.take in req) && take !== null) {
                req[op.skip] = callAdaptorFunc(this, "onSkip", skip, query);
                req[op.take] = callAdaptorFunc(this, "onTake", take, query);
            }
            var p = this.pvt;
            this.pvt = {};

            if (this.options.requestType === "json") {
                return {
                    data: JSON.stringify(req),
                    url: url,
                    ejPvtData: p,
                    type: "POST",
                    contentType: "application/json; charset=utf-8"
                }
            }
            tmp = this.convertToQueryString(req, query, dm);
            tmp =  (dm.dataSource.url.indexOf("?")!== -1 ? "&" : "/") + tmp;
            return {
                type: "GET",
                url: tmp.length ? url.replace(/\/*$/, tmp) : url,
                ejPvtData: p
            };
        },
        convertToQueryString: function (req, query, dm) {
            if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1)
                return $.param(req);
            return "?" + $.param(req);
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            var pvt = request.ejPvtData || {};
			var groupDs= data.groupDs;
			if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
                return query._requiresCount ? { result: [], count: 0 } : [];
            var d = JSON.parse(request.data);
            if (d && d.action === "batch" && data.added) {
                changes.added = data.added;
                return changes;
            }
            if (data.d)
                data = data.d;

            if (pvt && pvt.aggregates && pvt.aggregates.length) {
                var agg = pvt.aggregates, args = {}, fn, res = {};
                if ('count' in data) args.count = data.count;
                if (data["result"]) args.result = data.result;
                if (data["aggregate"]) data = data.aggregate;
                for (var i = 0; i < agg.length; i++) {
                    fn = ej.aggregates[agg[i].type];
                    if (fn)
                        res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
                }
                args["aggregates"] = res;
                data = args;
            }

            if (pvt && pvt.groups && pvt.groups.length) {
                var groups = pvt.groups, args = {};
                if ('count' in data) args.count = data.count;
                if (data["aggregates"]) args.aggregates = data.aggregates;
                if (data["result"]) data = data.result;
                for (var i = 0; i < groups.length; i++){
                    var level = null;
                    var format = getColFormat(groups[i], query.queries);
                    if (!ej.isNullOrUndefined(groupDs))
                        groupDs = ej.group(groupDs, groups[i], null, format);
                    data = ej.group(data, groups[i], pvt.aggregates, format, level, groupDs);
                }
                if (args.count != undefined)
                    args.result = data;
                else
                    args = data;
                return args;
            }
            return data;
        },
        onGroup: function (e) {
            this.pvt.groups = e;
        },
        onAggregates: function (e) {
            this.pvt.aggregates = e;
        },
        batchRequest: function (dm, changes, e, query) {
            var res = {
                changed: changes.changed,
                added: changes.added,
                deleted: changes.deleted,
                action: "batch",
                table: e.url,
                key: e.key,
				antiForgery: (dm.dataSource.antiForgery) ? dm.antiForgeryToken().value : ""
            };
            if (query)
                this.addParams({ dm: dm, query: query, params: query._params, reqParams: res });

            return {
                type: "POST",
                url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(res)
            };
        },
        beforeSend: function (dm, request) {
        },
        insert: function (dm, data, tableName, query) {
            var res = {
                value: data,
                table: tableName,
                action: "insert",
                antiForgery: (dm.dataSource.antiForgery) ? dm.antiForgeryToken().value : ""
            };
            if (query)
                this.addParams({ dm: dm, query: query, params: query._params, reqParams: res });

            return {
                url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify(res)
            };
        },
        remove: function (dm, keyField, value, tableName, query) {
            var res = {
                key: value,
                keyColumn: keyField,
                table: tableName,
                action: "remove",
                antiForgery: (dm.dataSource.antiForgery) ? dm.antiForgeryToken().value : ""
            };
            if (query)
                this.addParams({ dm: dm, query: query, params: query._params, reqParams: res });

            return {
                type: "POST",
                url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify(res)
            };
        },
        update: function (dm, keyField, value, tableName, query) {
            var res = {
                value: value,
                action: "update",
                keyColumn: keyField,
                key: value[keyField],
                table: tableName,
                antiForgery: (dm.dataSource.antiForgery) ? dm.antiForgeryToken().value : ""
            };
            if (query)
                this.addParams({ dm: dm, query: query, params: query._params, reqParams: res });

            return {
                type: "POST",
                url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify(res)
            };
        },
        getFiltersFrom: function (data, query) {
            if (!(data instanceof Array) || !data.length)
                throwError("ej.SubQuery: Array of key values required");
            var key = query._fKey, value, prop = key, pKey = query._key, predicats = [],
                isValues = typeof data[0] !== "object";

            if (typeof data[0] !== "object") prop = null;

            for (var i = 0; i < data.length; i++) {
                value = !isValues ? ej.pvt.getObject(pKey || prop, data[i]) : data[i];
                predicats.push(new ej.Predicate(key, "==", value));
            }

            return ej.Predicate.or(predicats);
        },
        addParams: function (options) {
            var dm = options.dm, query = options.query, params = options.params, req = options.reqParams; req["params"] = {};
            for (var i = 0, tmp; tmp = params[i]; i++) {
                if (req[tmp.key]) throwError("ej.Query: Custom Param is conflicting other request arguments");
                req[tmp.key] = tmp.value;
                if (tmp.fn)
                    req[tmp.key] = tmp.fn.call(query, tmp.key, query, dm);                
                req["params"][tmp.key] = req[tmp.key];
            }
        }
    });
    ej.WebMethodAdaptor = new ej.UrlAdaptor().extend({
        processQuery: function (dm, query, hierarchyFilters) {
            var obj = ej.UrlAdaptor.prototype.processQuery(dm, query, hierarchyFilters);
            var data = ej.parseJSON(obj.data), result = {};

            result["value"] = data;

            //Params             
            callAdaptorFunc(this, "addParams", { dm: dm, query: query, params: query._params, reqParams: result });

            return {
                data: JSON.stringify(result),
                url: obj.url,
                ejPvtData: obj.ejPvtData,
                type: "POST",
                contentType: "application/json; charset=utf-8"
            }
        },
        addParams: function (options) {
            var dm = options.dm, query = options.query, params = options.params, req = options.reqParams; req["params"] = {};
            for (var i = 0, tmp; tmp = params[i]; i++) {
                if (req[tmp.key]) throwError("ej.Query: Custom Param is conflicting other request arguments");
                var webkey = tmp.key, webvalue = tmp.value;
                if (tmp.fn)
                    webvalue = tmp.fn.call(query, tmp.key, query, dm);
                req[webkey] = webvalue;
                req["params"][webkey] = req[webkey];
            }
        }
    });
    ej.CacheAdaptor = new ej.UrlAdaptor().extend({
        init: function (adaptor, timeStamp, pageSize) {
            if (!ej.isNullOrUndefined(adaptor)) {
                this.cacheAdaptor = adaptor;
            }
            this.pageSize = pageSize;
            this.guidId = ej.getGuid("cacheAdaptor");
            var obj = { keys: [], results: [] };
            if (window.localStorage)
                window.localStorage.setItem(this.guidId, JSON.stringify(obj));
            var guid = this.guidId;
            if (!ej.isNullOrUndefined(timeStamp)) {
                setInterval(function () {
                    var data = ej.parseJSON(window.localStorage.getItem(guid));
                    var forDel = [];
                    for (var i = 0; i < data.results.length; i++) {
                        data.results[i].timeStamp = new Date() - new Date(data.results[i].timeStamp)
                        if (new Date() - new Date(data.results[i].timeStamp) > timeStamp)
                            forDel.push(i);
                    }
                    var d = forDel;
                    for (var i = 0; i < forDel.length; i++) {
                        data.results.splice(forDel[i], 1);
                        data.keys.splice(forDel[i], 1);
                    }
                    window.localStorage.removeItem(guid);
                    window.localStorage.setItem(guid, JSON.stringify(data));
                }, timeStamp);
            }
        },
        generateKey: function (url, query) {
            var sorted = filterQueries(query.queries, "onSortBy"),
                grouped = filterQueries(query.queries, "onGroup"),
                filters = filterQueries(query.queries, "onWhere"),
                searchs = filterQueries(query.queries, "onSearch"),
				pageQuery = filterQueries(query.queries, "onPage"),
                singles = filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]),
                params = query._params;
            var key = url;
            if (singles["onPage"])
              key += singles["onPage"].pageIndex;
              sorted.forEach(function (obj) {
                   key += obj.e.direction + obj.e.fieldName;
              });
                grouped.forEach(function (obj) {
                    key += obj.e.fieldName;
                });
                searchs.forEach(function (obj) {
                    key += obj.e.searchKey;
                });
            
            for (var filter = 0; filter < filters.length; filter++) {
                var currentFilter = filters[filter];
                if (currentFilter.e.isComplex) {
                    var newQuery = query.clone();
                    newQuery.queries = [];
                    for (var i = 0; i < currentFilter.e.predicates.length; i++) {
                        newQuery.queries.push({ fn: "onWhere", e: currentFilter.e.predicates[i], filter: query.queries.filter });
                    }
                    key += currentFilter.e.condition + this.generateKey(url, newQuery);
                }
                else
                    key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value
            }
            return key;
        },
        processQuery: function (dm, query, hierarchyFilters) {
            var key = this.generateKey(dm.dataSource.url, query);
            var cachedItems;
            if (window.localStorage)
                cachedItems = ej.parseJSON(window.localStorage.getItem(this.guidId));
            var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;
            if (data != null && !this._crudAction && !this._insertAction) {
                return data;
            }
            this._crudAction = null; this._insertAction = null;
            return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0))
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            if (this._insertAction || (request && this.cacheAdaptor.options.batch && request.url.endsWith(this.cacheAdaptor.options.batch) && request.type.toLowerCase() === "post")) {
                return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);
            }
            var data = this.cacheAdaptor.processResponse.apply(this, [].slice.call(arguments, 0));
            var key = this.generateKey(ds.dataSource.url, query)
            var obj = {};
            if (window.localStorage)
                obj = ej.parseJSON(window.localStorage.getItem(this.guidId));
            var index = $.inArray(key, obj.keys);
            if (index != -1) {
                obj.results.splice(index, 1);
                obj.keys.splice(index, 1);
            }
            obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: new Date(), count: data.count }
            while (obj.results.length > this.pageSize) {
                obj.results.splice(0, 1);
                obj.keys.splice(0, 1);
            }
            window.localStorage.setItem(this.guidId, JSON.stringify(obj));
            return data;
        },
        update: function (dm, keyField, value, tableName) {
            this._crudAction = true;
            return this.cacheAdaptor.update(dm, keyField, value, tableName);
        },
        insert: function (dm, data, tableName) {
            this._insertAction = true;
            return this.cacheAdaptor.insert(dm, data, tableName);
        },
        remove: function (dm, keyField, value, tableName) {
            this._crudAction = true;
            return this.cacheAdaptor.remove(dm, keyField, value, tableName);
        },
        batchRequest: function (dm, changes, e) {
            return this.cacheAdaptor.batchRequest(dm, changes, e);
        }
    });
    var filterQueries = function (queries, name) {
        return queries.filter(function (q) {
            return q.fn === name;
        }) || [];
    };
    var filterQueryLists = function (queries, singles) {
        var filtered = queries.filter(function (q) {
            return singles.indexOf(q.fn) !== -1;
        }), res = {};
        for (var i = 0; i < filtered.length; i++) {
            if (!res[filtered[i].fn])
                res[filtered[i].fn] = filtered[i].e;
        }
        return res;
    };
    var callAdaptorFunc = function (obj, fnName, param, param1) {
        if (obj[fnName]) {
            var res = obj[fnName](param, param1);
            if (!isNull(res)) param = res;
        }
        return param;
    };

    ej.ODataAdaptor = new ej.UrlAdaptor().extend({
        options: {
            requestType: "get",
            accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
            multipartAccept: "multipart/mixed",
            sortBy: "$orderby",
            select: "$select",
            skip: "$skip",
            take: "$top",
            count: "$inlinecount",
            where: "$filter",
            expand: "$expand",
            batch: "$batch",
            changeSet: "--changeset_",
            batchPre: "batch_",
            contentId: "Content-Id: ",
            batchContent: "Content-Type: multipart/mixed; boundary=",
            changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
            batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
        },
        onEachWhere: function (filter, requiresCast) {
            return filter.isComplex ? this.onComplexPredicate(filter, requiresCast) : this.onPredicate(filter, requiresCast);
        },
		_typeStringQuery: function (pred, requiresCast,val,field,guid) {
			if(val.indexOf("'") != -1)
			    val = val.replace(new RegExp(/'/g), "''");
			var specialCharFormat = /[ !@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/; 
			if (specialCharFormat.test(val)) { 
			    val = encodeURIComponent(val)
			}
            val = "'" + val + "'";
            if (requiresCast) {
                field = "cast(" + field + ", 'Edm.String')";
            }
            if (ej.isGUID(val))
                guid = 'guid';
            if (pred.ignoreCase) {
                !guid ? field = "tolower(" + field + ")" : field;
                val = val.toLowerCase();
            }
			return {"val":val,"guid":guid ,"field":field};
		},
        onPredicate: function (pred, query, requiresCast) {
            var returnValue = "",
                operator,guid,
                val = pred.value,
                type = typeof val,
                field = this._p(pred.field);

            if (val instanceof Date)
                val = "datetime'" + p.replacer(val).toJSON() + "'";

            if (type === "string") {
				var args = this._typeStringQuery(pred,requiresCast,val,field , guid);
				val = args["val"]; field = args["field"]; guid = args["guid"];
            }

            operator = ej.data.odBiOperator[pred.operator];
			if(pred.anyCondition != "" && operator) {
				returnValue += val["table"];
				returnValue += ("/"+pred.anyCondition);
				returnValue += "(d:d/";
				returnValue += field;
				returnValue += operator;
				returnValue += val["value"];
				returnValue += ")";
				return returnValue;
			}
			if( pred.operator == "in" || pred.operator == "notin" ) {
				returnValue += "(";
				for(var index = 0; index < val.length; index++ ) {
					if (val[index] instanceof Date)
						val[index] = "datetime'" + p.replacer(val[index]).toJSON() + "'";
					if (typeof val[index] === "string") {
						var args = this._typeStringQuery(pred,requiresCast,val[index],field , guid);
						val[index] = args["val"]; field = args["field"]; guid = args["guid"];
					}
					returnValue += field;
					returnValue += operator;
					returnValue += val[index];
					if( index != val.length -1 ) returnValue += ( pred.operator == "in") ? " or " : " and ";
				}
				returnValue += ")";
				return returnValue;
			}
		    if (operator) {
		        return this.onOperation(returnValue, operator, field, val, guid);
		    }

            operator = ej.data.odUniOperator[pred.operator];
            if (!operator || type !== "string") return "";

            if (operator === "substringof") {
                var t = val;
                val = field;
                field = t;
            }

            returnValue += operator + "(";
            returnValue += field + ",";
            if (guid) returnValue += guid;
            returnValue += val + ")";
			
			if( pred.operator == "notcontains" ) {
				returnValue += " eq false"
			}
			if(pred.anyCondition != "" && operator) {
				var returnValue1;
				returnValue1 += val["table"];
				returnValue1 += ("/"+pred.anyCondition);
				returnValue1 += "(d:d/";
				returnValue += returnValue;
				returnValue1 += ")";
				return returnValue1;
			}
            return returnValue;
		},
		onOperation: function (returnValue, operator, field, val, guid) {
		        returnValue += field;
		        returnValue += operator;
		        if (guid)
		            returnValue += guid;
		        return returnValue + val;
        },
        onComplexPredicate: function (pred, requiresCast) {
            var res = [];
            for (var i = 0; i < pred.predicates.length; i++) {
                res.push("(" + this.onEachWhere(pred.predicates[i], requiresCast) + ")");
            }
            return res.join(" " + pred.condition + " ");
        },
        onWhere: function (filters) {
            if (this.pvt.searches)
                filters.push(this.onEachWhere(this.pvt.searches, null, true));

            return filters.join(" and ");
        },
        onEachSearch: function (e) {
            if (e.fields.length === 0)
                throwError("Query() - Search : oData search requires list of field names to search");

            var filter = this.pvt.searches || [];
            for (var i = 0; i < e.fields.length; i++) {
                filter.push(new ej.Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));
            }
            this.pvt.searches = filter;
        },
        onSearch: function (e) {
            this.pvt.searches = ej.Predicate.or(this.pvt.searches);
            return "";
        },
        onEachSort: function (e) {
            var res = [];
            if (e.name instanceof Array) {
                for (var i = 0; i < e.name.length; i++)
                    res.push(this._p(e.name[i]));
            } else {
                res.push(this._p(e.name) + (e.direction === "descending" ? " desc" : ""));
            }
            return res.join(",");
        },
        onSortBy: function (e) {
            return e.reverse().join(",");
        },
        onGroup: function (e) {
            this.pvt.groups = e;
            return "";
        },
        onSelect: function (e) {
            for (var i = 0; i < e.length; i++)
                e[i] = this._p(e[i]);

            return e.join(',');
        },
        onAggregates: function(e){
            this.pvt.aggregates = e;
            return "";
        },
        onCount: function (e) {
            return e === true ? "allpages" : "";
        },
        beforeSend: function (dm, request, settings) {
            if (settings.url.endsWith(this.options.batch) && settings.type.toLowerCase() === "post") {
                request.setRequestHeader("Accept", oData.multipartAccept);
                request.setRequestHeader("DataServiceVersion", "2.0");
                request.overrideMimeType("text/plain; charset=x-user-defined");
            }

            if (!dm.dataSource.crossDomain) {
                request.setRequestHeader("DataServiceVersion", "2.0");
                request.setRequestHeader("MaxDataServiceVersion", "2.0");
            }
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            if (!ej.isNullOrUndefined(data.d)) {
                var dataCopy = (query && query._requiresCount) ? data.d.results : data.d;
                if (!ej.isNullOrUndefined(dataCopy))
                    for (var i = 0; i < dataCopy.length; i++) {
                        !ej.isNullOrUndefined(dataCopy[i].__metadata) && delete dataCopy[i].__metadata;
                    }
            }
            var pvt = request && request.ejPvtData;
            if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
                return query._requiresCount ? { result: [], count: 0 } : [];
            if (request && this.options.batch && request.url.endsWith(this.options.batch) && request.type.toLowerCase() === "post") {
                var guid = xhr.getResponseHeader("Content-Type"), cIdx, jsonObj;
                guid = guid.substring(guid.indexOf("=batchresponse") + 1);
                data = data.split(guid);
                if (data.length < 2) return;

                data = data[1];
                var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(data);
                data.replace(exVal[0], "");

                var changeGuid = exVal[1];
                data = data.split(changeGuid);

                for (var i = data.length; i > -1; i--) {
                    if (!/\bContent-ID:/i.test(data[i]) || !/\bHTTP.+201/.test(data[i]))
                        continue;

                    cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(data[i])[1]);

                    if (changes.added[cIdx]) {
                        jsonObj = p.parseJson(/^\{.+\}/m.exec(data[i])[0]);
                        $.extend(changes.added[cIdx], this.processResponse(jsonObj));
                    }
                }
                return changes;
            }
            var version = xhr && xhr.getResponseHeader("DataServiceVersion"), count = null, aggregateResult = {};
            version = (version && parseInt(version, 10)) || 2;

            if (query && query._requiresCount) {
                if (data.__count || data['odata.count']) count = data.__count || data['odata.count'];
                if (data.d) data = data.d;
                if (data.__count || data['odata.count']) count = data.__count || data['odata.count'];
            }

            if (version === 3 && data.value) data = data.value;
            if (data.d) data = data.d;
            if (version < 3 && data.results) data = data.results;

            if (pvt && pvt.aggregates && pvt.aggregates.length) {
                var agg = pvt.aggregates, args = {}, fn, res = {};
                for (var i = 0; i < agg.length; i++) {
                    fn = ej.aggregates[agg[i].type];
                    if (fn)
                        res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
                }
                aggregateResult = res;
            }
            if (pvt && pvt.groups && pvt.groups.length) {
                var groups = pvt.groups;
                for (var i = 0; i < groups.length; i++) {
                    var format = getColFormat(groups[i], query.queries)
                    data = ej.group(data, groups[i], pvt.aggregates, format);
                }
            }
            return isNull(count) ? data : { result: data, count: count, aggregates: aggregateResult };
        },
        convertToQueryString: function (req, query, dm) {
            var res = [], tableName = req.table || "";
            delete req.table;

            if (dm.dataSource.requiresFormat)
                req["$format"] = "json";

            for (var prop in req)
                res.push(prop + "=" + req[prop]);

            res = res.join("&");

            if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1 && !tableName)
                return res;

            return res.length ? tableName + "?" + res : tableName || "";
        },
        insert: function (dm, data, tableName) {
            return {
                url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : ''),
                data: JSON.stringify(data)
            }
        },
        remove: function (dm, keyField, value, tableName) {
            if(typeof(value) == "string"){
                return {
                    type: "DELETE",
                    url: ej.isGUID(value) ? dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + "(" + value + ")" : dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + "('" + value + "')"
                };
            }
            return {
                type: "DELETE",
                url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + '(' + value + ')'
            };
        },
        update: function (dm, keyField, value, tableName) {
			var url;
			if(typeof value[keyField] === "string")
			    url = ej.isGUID(value[keyField]) ? dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + "(" + value[keyField] + ")" : dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + "('" + value[keyField] + "')";
			else 
				url = dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + '(' + value[keyField] + ')';
            return {
                type: "PUT",
                url: url,
                data: JSON.stringify(value),
                accept: this.options.accept
            };
        },
        batchRequest: function (dm, changes, e) {
            var initialGuid = e.guid = ej.getGuid(oData.batchPre);
            var url = dm.dataSource.url.replace(/\/*$/, '/' + this.options.batch);
            var args = {
                url: e.url,
                key: e.key,
                cid: 1,
                cSet: ej.getGuid(oData.changeSet)
            };
            var req = "--" + initialGuid + "\n";

            req += "Content-Type: multipart/mixed; boundary=" + args.cSet.replace("--", "") + "\n";

            this.pvt.changeSet = 0;

            req += this.generateInsertRequest(changes.added, args);
            req += this.generateUpdateRequest(changes.changed, args);
            req += this.generateDeleteRequest(changes.deleted, args);

            req += args.cSet + "--\n";
            req += "--" + initialGuid + "--";

            return {
                type: "POST",
                url: url,
                contentType: "multipart/mixed; charset=UTF-8;boundary=" + initialGuid,
                data: req
            };
        },
        generateDeleteRequest: function (arr, e) {
            if (!arr) return "";
            var req = "", val;

            for (var i = 0; i < arr.length; i++) {
                req += "\n" + e.cSet + "\n";
                req += oData.changeSetContent + "\n\n";
                req += "DELETE ";
                val = typeof arr[i][e.key] == "string" ? "'" + arr[i][e.key] + "'" : arr[i][e.key];
                req += e.url + "(" + val + ") HTTP/1.1\n";
                req += "If-Match : * \n"
                req += "Accept: " + oData.accept + "\n";
                req += "Content-Id: " + this.pvt.changeSet++ + "\n";
                req += oData.batchChangeSetContentType + "\n";
            }

            return req + "\n";
        },
        generateInsertRequest: function (arr, e) {
            if (!arr) return "";
            var req = "";

            for (var i = 0; i < arr.length; i++) {
                req += "\n" + e.cSet + "\n";
                req += oData.changeSetContent + "\n\n";
                req += "POST ";
                req += e.url + " HTTP/1.1\n";
                req += "Accept: " + oData.accept + "\n";
                req += "Content-Id: " + this.pvt.changeSet++ + "\n";
                req += oData.batchChangeSetContentType + "\n\n";

                req += JSON.stringify(arr[i]) + "\n";
            }

            return req;
        },
        generateUpdateRequest: function (arr, e) {
            if (!arr) return "";
            var req = "", val;

            for (var i = 0; i < arr.length; i++) {
                req += "\n" + e.cSet + "\n";
                req += oData.changeSetContent + "\n\n";
                req += "PUT ";
                val = typeof arr[i][e.key] == "string" ? "'" + arr[i][e.key] + "'" : arr[i][e.key];
                req += e.url + "(" + val + ")" + " HTTP/1.1\n";
                req += "If-Match : * \n"
                req += "Accept: " + oData.accept + "\n";
                req += "Content-Id: " + this.pvt.changeSet++ + "\n";
                req += oData.batchChangeSetContentType + "\n\n";

                req += JSON.stringify(arr[i]) + "\n\n";
            }

            return req;
        },
        _p: function (prop) {
            return prop.replace(/\./g, "/");
        }
    });
    ej.ODataV4Adaptor = new ej.ODataAdaptor().extend({
        options: {
            requestType: "get",
            accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
            multipartAccept: "multipart/mixed",
            sortBy: "$orderby",
            select: "$select",
            skip: "$skip",
            take: "$top",
            count: "$count",
            search: "$search",
            where: "$filter",
            expand: "$expand",
            batch: "$batch",
            changeSet: "--changeset_",
            batchPre: "batch_",
            contentId: "Content-Id: ",
            batchContent: "Content-Type: multipart/mixed; boundary=",
            changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
            batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
        },
        onCount: function (e) {
            return e === true ? "true" : "";
        },
        onPredicate: function (pred, query, requiresCast) {
            var returnValue = "",
                val = pred.value,
                isDate = val instanceof Date;               
            ej.data.odUniOperator["contains"] = "contains";
            returnValue = ej.ODataAdaptor.prototype.onPredicate.call(this, pred, query, requiresCast);
            ej.data.odUniOperator["contains"] = "substringof";
                if (isDate)
                    returnValue = returnValue.replace(/datetime'(.*)'$/, "$1");

            return returnValue;
        },
        onOperation: function (returnValue, operator, field, val, guid) {
            if (guid) {
                returnValue += "(" + field;
                returnValue += operator;
                returnValue += val.replace(/["']/g, "") + ")";
            } else {
                returnValue += field;
                returnValue += operator;
                returnValue += val;
            }
            return returnValue;
        },
        onEachSearch: function (e) {
			 var search = this.pvt.search || [];
			 search.push(e.key);
			 this.pvt.search = search;
		},
		onSearch: function (e) {
			 return this.pvt.search.join(" OR ");
		},
        beforeSend: function (dm, request, settings) {
 
        },
        processQuery: function (ds, query) {
            var digitsWithSlashesExp = /\/[\d*\/]*/g;
            var poppedExpand = "";
            for (var i = query._expands.length - 1; i > 0; i--) {
                if (poppedExpand.indexOf(query._expands[i]) >= 0) { // If current expand is child of previous
                    query._expands.pop(); // Just remove it because its in the expand already
                }
                else {
                    if (digitsWithSlashesExp.test(query._expands[i])) { //If expanded to subentities
                        poppedExpand = query._expands.pop();
                        var r = poppedExpand.replace(digitsWithSlashesExp, "($expand="); //Rewrite into odata v4 expand
                        for (var j = 0; j < poppedExpand.split(digitsWithSlashesExp).length - 1; j++) {
                            r = r + ")"; // Add closing brackets
                        }
                        query._expands.unshift(r); // Add to the front of the array
                        i++;
                    }
                }
            }
            return ej.ODataAdaptor.prototype.processQuery.apply(this, [ds, query]);
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            var pvt = request && request.ejPvtData;
            if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
                return query._requiresCount ? { result: [], count: 0 } : [];
            if (request && this.options.batch && request.url.endsWith(this.options.batch) && request.type.toLowerCase() === "post") {
                var guid = xhr.getResponseHeader("Content-Type"), cIdx, jsonObj;
                guid = guid.substring(guid.indexOf("=batchresponse") + 1);
                data = data.split(guid);
                if (data.length < 2) return;

                data = data[1];
                var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(data);
                data.replace(exVal[0], "");

                var changeGuid = exVal[1];
                data = data.split(changeGuid);

                for (var i = data.length; i > -1; i--) {
                   if (!/\bContent-ID:/i.test(data[i]) || !/\bHTTP.+201/.test(data[i]))
                        continue;

                    cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(data[i])[1]);

                    if (changes.added[cIdx]) {
                        jsonObj = p.parseJson(/^\{.+\}/m.exec(data[i])[0]);
                        $.extend(changes.added[cIdx], this.processResponse(jsonObj));
                    }
                }
                return changes;
           }
            var count = null, aggregateResult = {};
            if (query && query._requiresCount)
                if ('@odata.count' in data) count = data['@odata.count'];

            data = ej.isNullOrUndefined(data.value) ? data : data.value;
           if (pvt && pvt.aggregates && pvt.aggregates.length) {
               var agg = pvt.aggregates, args = {}, fn, res = {};
               for (var i = 0; i < agg.length; i++) {
                   fn = ej.aggregates[agg[i].type];
                   if (fn)
                       res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
               }
               aggregateResult = res;
           }
            if (pvt && pvt.groups && pvt.groups.length) {
                var groups = pvt.groups;
                for (var i = 0; i < groups.length; i++) {
                    var format = getColFormat(groups[i], query.queries);
                    data = ej.group(data, groups[i], pvt.aggregates, format);
                }
            }
            return isNull(count) ? data : { result: data, count: count, aggregates: aggregateResult };
        },
    });
    ej.JsonAdaptor = new ej.Adaptor().extend({
        processQuery: function (ds, query) {
            var result = ds.dataSource.json.slice(0), count = result.length, cntFlg = true, ret, key, agg = {};

            for (var i = 0; i < query.queries.length; i++) {
                key = query.queries[i];
                ret = this[key.fn].call(this, result, key.e, query);
                if (key.fn == "onAggregates")
                    agg[key.e.field + " - " + key.e.type] = ret;
                else
                result = ret !== undefined ? ret : result;

                if (key.fn === "onPage" || key.fn === "onSkip" || key.fn === "onTake" || key.fn === "onRange") cntFlg = false;

                if (cntFlg) count = result.length;
            }

            if (query._requiresCount) {
                result = {
                    result: result,
                    count: count,
                    aggregates: agg
                };
            }

            return result;
        },
        batchRequest: function (dm, changes, e) {
            var i;
            for (i = 0; i < changes.added.length; i++)
                this.insert(dm, changes.added[i]);
            for (i = 0; i < changes.changed.length; i++)
                this.update(dm, e.key, changes.changed[i]);
            for (i = 0; i < changes.deleted.length; i++)
                this.remove(dm, e.key, changes.deleted[i]);
            return changes;
        },
        onWhere: function (ds, e) {
            if (!ds) return ds;

            return ds.filter(function (obj) {
                return e.validate(obj);
            });
        },
        onAggregates: function(ds, e){
            var fn = ej.aggregates[e.type];
            if (!ds || !fn || ds.length == 0) return null;
            return fn(ds, e.field);
        },
        onSearch: function (ds, e) {
            if (!ds || !ds.length) return ds;

            if (e.fieldNames.length === 0) {
                ej.pvt.getFieldList(ds[0], e.fieldNames);
            }

            return ds.filter(function (obj) {
                for (var j = 0; j < e.fieldNames.length; j++) {
                    if (e.comparer.call(obj, ej.pvt.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase,e.ignoreAccent))
                        return true;
                }
                return false;
            });
        },
        onSortBy: function (ds, e, query) {
            if (!ds) return ds;
            var fnCompare, field = getValue(e.fieldName, query);
            if (!field)
                return ds.sort(e.comparer);

            if (field instanceof Array) {
                field = field.slice(0);

                for (var i = field.length - 1; i >= 0; i--) {
                    if (!field[i]) continue;

                    fnCompare = e.comparer;

                    if (field[i].endsWith(" desc")) {
                        fnCompare = ej.pvt.fnSort(ej.sortOrder.Descending);
                        field[i] = field[i].replace(" desc", "");
                    }

                    ds = stableSort(ds, field[i], fnCompare, []);
                }
                return ds;
            }
            return stableSort(ds, field, e.comparer, query ? query.queries : []);
        },
        onGroup: function (ds, e, query) {
            if (!ds) return ds;
            var aggQuery = filterQueries(query.queries, "onAggregates"), agg = [];
            if (aggQuery.length) {
                var tmp;
                for (var i = 0; i < aggQuery.length; i++) {
                    tmp = aggQuery[i].e;
                    agg.push({ type: tmp.type, field: getValue(tmp.field, query) });
                }
            }
            var format = getColFormat(e.fieldName, query.queries);
            return ej.group(ds, getValue(e.fieldName, query), agg, format);
        },
        onPage: function (ds, e, query) {
            var size = getValue(e.pageSize, query),
                start = (getValue(e.pageIndex, query) - 1) * size, end = start + size;

            if (!ds) return ds;

            return ds.slice(start, end);
        },
        onRange: function (ds, e) {
            if (!ds) return ds;
            return ds.slice(getValue(e.start), getValue(e.end));
        },
        onTake: function (ds, e) {
            if (!ds) return ds;

            return ds.slice(0, getValue(e.nos));
        },
        onSkip: function (ds, e) {
            if (!ds) return ds;
            return ds.slice(getValue(e.nos));
        },
        onSelect: function (ds, e) {
            if (!ds) return ds;
            return ej.select(ds, getValue(e.fieldNames));
        },
        insert: function (dm, data) {
            return dm.dataSource.json.push(data);
        },
        remove: function (dm, keyField, value, tableName) {
            var ds = dm.dataSource.json, i;
            if (typeof value === "object")
                value = ej.getObject(keyField, value);
            for (i = 0; i < ds.length; i++) {
                if (ej.getObject(keyField, ds[i]) === value) break;
            }

            return i !== ds.length ? ds.splice(i, 1) : null;
        },
        update: function (dm, keyField, value, tableName) {
            var ds = dm.dataSource.json, i, key = ej.getObject(keyField, value);

            for (i = 0; i < ds.length; i++) {
                if (ej.getObject(keyField, ds[i]) === key) break;
            }

            return i < ds.length ? $.extend(ds[i], value) : null;
        }
    });
    ej.ForeignKeyAdaptor = function (data, type) {
        var foreignObj = new ej[type || "JsonAdaptor"]().extend({
            init: function () {
                this.foreignData = [];
                this.key = [];
                this.adaptorType = type;
                this.value = [];
                this.fValue = [];
                this.keyField = [];
                var dataObj = data;
                for (var i = 0; i < dataObj.length; i++) {
                    this.foreignData[i] = dataObj[i].dataSource;
                    this.key[i] = dataObj[i].foreignKeyField;
                    this.fValue[i] = ej.isNullOrUndefined(dataObj[i].field)? dataObj[i].foreignKeyValue : dataObj[i].field + "_" + dataObj[i].foreignKeyValue;
                    this.value[i] = dataObj[i].foreignKeyValue;
                    this.keyField[i] = dataObj[i].field || dataObj[i].foreignKeyField;
                    this.initial = true;
                }
            },
            processQuery: function (ds, query) {
                var data = ds.dataSource.json;
                if (this.initial) {
                    for (var i = 0; i < data.length; i++) {
                        var proxy = this;
                        for (var j = 0; j < this.foreignData.length; j++) {
                            this.foreignData[j].filter(function (col) { //filtering the foreignKey dataSource
                                if (ej.getObject(proxy.key[j], col) == ej.getObject(proxy.keyField[j], data[i]))
                                    data[i][proxy.fValue[j]] = ej.getObject(proxy.value[j], col);
                            });
                        }
                    }
                    this.initial = false;
                }
                return this.base.processQuery.apply(this, [ds, query]);
            },
            setValue: function (value) {
                for (var i = 0; i < this.foreignData.length; i++) {
                    var proxy = this;
                    var keyValue = value[this.fValue[i]];
                    if (typeof keyValue == "string" && !isNaN(keyValue))
                        keyValue = ej.parseFloat(keyValue);
                    var data = $.grep(proxy.foreignData[i], function (e) {
                        return e[proxy.value[i]] == keyValue;
                    })[0];
                    if (ej.isNullOrUndefined(data)) {
                        data = $.grep(proxy.foreignData[i], function (e) {
                            return e[proxy.key[i]] == keyValue;
                        })[0];
                        if (ej.getObject(this.value[i], data) != undefined)
                            ej.createObject(proxy.value[i], ej.getObject(this.value[i], data), value);
                    }
                    if (ej.getObject(this.value[i], data) != undefined)
                        ej.createObject(this.keyField[i], ej.getObject(this.key[i], data), value);
                }
            },
            insert: function (dm, data, tableName) {
                this.setValue(data);
                return {
                    url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                    data: JSON.stringify({
                        value: data,
                        table: tableName,
                        action: "insert",
                        antiForgery: (dm.dataSource.antiForgery) ? dm.antiForgeryToken().value : ""
                    })
                };
            },
            update: function (dm, keyField, value, tableName) {
                this.setValue(value);
                ej.JsonAdaptor.prototype.update(dm, keyField, value, tableName);
                return {
                    type: "POST",
                    url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                    data: JSON.stringify({
                        value: value,
                        action: "update",
                        keyColumn: keyField,
                        key: value[keyField],
                        table: tableName,
                        antiForgery: (dm.dataSource.antiForgery) ? dm.antiForgeryToken().value : ""
                    })
                };
            }
        });
        $.extend(this, new foreignObj());
        return this;
    }
    ej.remoteSaveAdaptor = new ej.JsonAdaptor().extend({
        beforeSend: ej.UrlAdaptor.prototype.beforeSend,
        insert: ej.UrlAdaptor.prototype.insert,
        update: ej.UrlAdaptor.prototype.update,
        remove: ej.UrlAdaptor.prototype.remove,
        addParams: ej.UrlAdaptor.prototype.addParams,
        batchRequest: function (dm, changes, e, query) { 
			var res = {
                changed: changes.changed,
                added: changes.added,
                deleted: changes.deleted,
                action: "batch",
                table: e.url,
                key: e.key,
                antiForgery: (dm.dataSource.antiForgery) ? dm.antiForgeryToken().value : ""
            };
            if (query)
                this.addParams({ dm: dm, query: query, params: query._params, reqParams: res });
            return {
                type: "POST",
                url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(res)
            };
        },
        processResponse: function (data, ds, query, xhr, request, changes, key) {
            if(!ej.isNullOrUndefined(changes)){
            if (data.d)
                data = data.d;
            if(data.added)changes.added = ej.parseJSON(data.added);
            if(data.changed)changes.changed = ej.parseJSON(data.changed);
            if(data.deleted)changes.deleted = ej.parseJSON(data.deleted);
            var i;
            for (i = 0; i < changes.added.length; i++)
                ej.JsonAdaptor.prototype.insert(ds, changes.added[i]);
            for (i = 0; i < changes.changed.length; i++)
                ej.JsonAdaptor.prototype.update(ds, key, changes.changed[i]);
            for (i = 0; i < changes.deleted.length; i++)
                ej.JsonAdaptor.prototype.remove(ds, key, changes.deleted[i]);
            return data;
             }
            else{
                if (data.d)
               return data.d;
            return data;
            }
        }
    });
    ej.WebApiAdaptor = new ej.ODataAdaptor().extend({
        insert: function (dm, data, tableName) {
            return {
                type: "POST",
                url: dm.dataSource.url,
                data: JSON.stringify(data)
            };
        },
        remove: function (dm, keyField, value, tableName) {
            return {
                type: "DELETE",
                url: dm.dataSource.url + "/" + value,
                data: JSON.stringify(value)
            };
        },
        update: function (dm, keyField, value, tableName) {
            return {
                type: "PUT",
                url: dm.dataSource.url,
                data: JSON.stringify(value)
            };
        },
		batchRequest: function (dm, changes, e) {
            var initialGuid = e.guid = ej.getGuid(oData.batchPre);
            var req = [];

		    //insertion 
		
			$.each(changes.added, function (i, d) {
			    req.push('--' + initialGuid);
			    req.push('Content-Type: application/http; msgtype=request', '');
			    req.push('POST' + ' ' + dm.dataSource.insertUrl + ' HTTP/1.1');
			    req.push('Content-Type: ' + 'application/json; charset=utf-8');
			    req.push('Host: ' + location.host);
			    req.push('', d ? JSON.stringify(d) : '');
			});
			
			//updation
			$.each(changes.changed, function (i, d) {
			    req.push('--' + initialGuid);
			    req.push('Content-Type: application/http; msgtype=request', '');
			    req.push('PUT' + ' ' + dm.dataSource.updateUrl + ' HTTP/1.1');
			    req.push('Content-Type: ' + 'application/json; charset=utf-8');
			    req.push('Host: ' + location.host);
			    req.push('', d ? JSON.stringify(d) : '');
			});
			
			//deletion
			$.each(changes.deleted, function (i, d) {
			    req.push('--' + initialGuid);
                req.push('Content-Type: application/http; msgtype=request', '');
                req.push('DELETE' + ' ' + dm.dataSource.removeUrl +"/"+ d[e.key] + ' HTTP/1.1');
                req.push('Content-Type: ' + 'application/json; charset=utf-8');
                req.push('Host: ' + location.host);
                req.push('', d ? JSON.stringify(d) : '');		
			});
			req.push('--' + initialGuid + '--', '');
            return {
				type: 'POST',
				url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: req.join('\r\n'),
                contentType: 'multipart/mixed; boundary="' + initialGuid + '"',
            };
        },
        processResponse: function (data, ds, query, xhr, request, changes) {

            var pvt = request && request.ejPvtData;
            if (request && request.type.toLowerCase() != "post") {
                var version = xhr && xhr.getResponseHeader("DataServiceVersion"), count = null, aggregateResult = {};
                version = (version && parseInt(version, 10)) || 2;

                if (query && query._requiresCount) {
                     if (!isNull(data.Count)) count = data.Count;
                }

                if (version < 3 && data.Items) data = data.Items;

                if (pvt && pvt.aggregates && pvt.aggregates.length) {
                    var agg = pvt.aggregates, args = {}, fn, res = {};
                    for (var i = 0; i < agg.length; i++) {
                        fn = ej.aggregates[agg[i].type];
                        if (fn)
                            res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
                    }
                    aggregateResult = res;
                }
                if (pvt && pvt.groups && pvt.groups.length) {
                    var groups = pvt.groups;
                    for (var i = 0; i < groups.length; i++) {
                        var format = getColFormat(groups[i], query.queries);
                        data = ej.group(data, groups[i], pvt.aggregates, format);
                    }
                }
                return isNull(count) ? data : { result: data, count: count, aggregates: aggregateResult };
            }
        }
    });
    var getValue = function (value, inst) {
        if (typeof value === "function")
            return value.call(inst || {});
        return value;
    }

    ej.TableModel = function (name, jsonArray, dataManager, modelComputed) {
        if (!instance(this, ej.TableModel))
            return new ej.TableModel(jsonArray);

        if (!instance(jsonArray, Array))
            throwError("ej.TableModel - Json Array is required");

        var rows = [], model, dirtyFn = $proxy(setDirty, this);

        for (var i = 0; i < jsonArray.length; i++) {
            model = new ej.Model(jsonArray[i], this);
            model.state = "unchanged";
            model.on("stateChange", dirtyFn);
            if (modelComputed)
                model.computes(modelComputed);
            rows.push(model);
        }

        this.name = name || "table1";

        this.rows = ej.NotifierArray(rows);
        this._deleted = [];

        this._events = $({});

        this.dataManager = dataManager;

        this._isDirty = false;

        return this;
    };

    ej.TableModel.prototype = {
        on: function (eventName, handler) {
            this._events.on(eventName, handler);
        },

        off: function (eventName, handler) {
            this._events.off(eventName, handler);
        },

        setDataManager: function (dataManager) {
            this.dataManagar = dataManager;
        },

        saveChanges: function () {
            if (!this.dataManager || !instance(this.dataManager, ej.DataManager))
                throwError("ej.TableModel - saveChanges : Set the dataManager using setDataManager function");

            if (!this.isDirty())
                return;

            var promise = this.dataManager.saveChanges(this.getChanges(), this.key, this.name);

            promise.done($proxy(function (changes) {
                var rows = this.toArray();
                for (var i = 0; i < rows.length; i++) {
                    if (rows.state === "added") {
                        rows.set(this.key, changes.added.filter(function (e) {
                            return e[this.key] === rows.get(this.key);
                        })[0][this.key]);
                    }
                    rows[i].markCommit();
                }

                this._events.triggerHandler({ type: "save", table: this });

            }, this));

            promise.fail($proxy(function (e) {
                this.rejectChanges();
                this._events.triggerHandler({ type: "reject", table: this, error: e });
            }, this));

            this._isDirty = false;
        },

        rejectChanges: function () {
            var rows = this.toArray();
            for (var i = 0; i < rows.length; i++)
                rows[i].revert(true);

            this._isDirty = false;
            this._events.triggerHandler({ type: "reject", table: this });
        },

        insert: function (json) {
            var model = new ej.Model(json);
            model._isDirty = this._isDirty = true;

            this.rows.push(model);

            this._events.triggerHandler({ type: "insert", model: model, table: this });
        },

        update: function (value) {
            if (!this.key)
                throwError("TableModel - update : Primary key should be assigned to TableModel.key");

            var row = value, model, key = this.key, keyValue = row[key];

            model = this.rows.array.filter(function (obj) {
                return obj.get(key) === keyValue;
            });

            model = model[0];

            for (var col in row) {
                model.set(col, row[col]);
            }

            this._isDirty = true;

            this._events.triggerHandler({ type: "update", model: model, table: this });
        },

        remove: function (key) {
            if (!this.key)
                throwError("TableModel - update : Primary key should be assigned to TableModel.key");

            var field = this.key;

            var index = -1, model;

            if (key && typeof key === "object") {
                key = key[field] !== undefined ? key[field] : key.get(field);
            }

            for (var i = 0; i < this.rows.length() ; i++) {
                if (this.rows.array[i].get(field) === key) {
                    index = i;
                    break;
                }
            }

            if (index > -1) {
                model = this.rows.removeAt(index);
                model.markDelete();

                this._deleted.push({ model: model, position: index });

                this._isDirty = true;
                this._events.triggerHandler({ type: "remove", model: model, table: this });
            }
        },

        isDirty: function () {
            return this._isDirty;
        },

        getChanges: function () {

            var changes = {
                added: [],
                changed: []
            };
            var rows = this.toArray();
            for (var i = 0; i < rows.length; i++) {
                if (changes[rows[i].state])
                    changes[rows[i].state].push(rows[i].json);
            }

            changes.deleted = ej.select(this._deleted, ["model"]);

            return changes;
        },

        toArray: function () {
            return this.rows.toArray();
        },

        setDirty: function (dirty, model) {
            if (this._isDirty === !!dirty) return;

            this._isDirty = !!dirty;

            this._events.triggerHandler({ type: "dirty", table: this, model: model });
        },
        get: function (index) {
            return this.rows.array[index];
        },
        length: function () {
            return this.rows.array.length;
        },

        bindTo: function (element) {
            var marker = tDiv, template = $(element.html()), rows = this.toArray(), cur;
            if ($.inArray(element.prop("tagName").toLowerCase(), ["table", "tbody"]))
                marker = tTR;

            marker.insertBefore(element);
            element.detach().empty();

            for (var i = 0; i < rows.length; i++) {
                cur = template.clone();
                rows[i].bindTo(cur);
                element.append(cur);
            }

            element.insertAfter(marker);
            marker.remove();
        }
    };

    var tDiv = doc ? $(document.createElement("div")) : {},
        tTR = doc ? $(document.createElement("tr")) : {};

    ej.Model = function (json, table, name) {
        if (typeof table === "string") {
            name = table;
            table = null;
        }
        this.$id = getUid("m");

        this.json = json;
        this.table = table instanceof ej.TableModel ? table : null;
        this.name = name || (this.table && this.table.name);
        this.dataManager = (table instanceof ej.DataManager) ? table : table.dataManagar;
        this.actual = {};
        this._events = $({});
        this.isDirty = false;
        this.state = "added";
        this._props = [];
        this._computeEls = {};
        this._fields = {};
        this._attrEls = {};
        this._updates = {};
        this.computed = {};
    };

    ej.Model.prototype = {
        computes: function (value) {
            $.extend(this.computed, value);
        },
        on: function (eventName, handler) {
            this._events.on(eventName, handler);
        },
        off: function (eventName, handler) {
            this._events.off(eventName, handler);
        },
        set: function (field, value) {
            var obj = this.json, actual = field, prev;
            field = field.split('.');

            for (var i = 0; i < field.length - 1; i++) {
                field = field[0];
                obj = obj[field[0]];
            }

            this.isDirty = true;
            this.changeState("changed", { from: "set" });

            prev = obj[field];

            if (this.actual[field] === undefined && !(field in this.actual))
                this.actual[field] = value; // Complex property ?

            obj[field] = value;

            this._updateValues(field, value);
            this._events.triggerHandler({ type: actual, current: value, previous: prev, model: this });
        },
        get: function (field) {
            return ej.pvt.getObject(field, this.json);
        },
        revert: function (suspendEvent) {
            for (var prop in this.actual) {
                this.json[prop] = this.actual[prop];
            }

            this.isDirty = false;

            if (suspendEvent)
                this.state = "unchanged";
            else
                this.changeState("unchanged", { from: "revert" });
        },
        save: function (dm, key) {
            dm = dm || this.dataManagar;
            key = key || dm.dataSource.key;
            if (!dm) throwError("ej.Model - DataManager is required to commit the changes");
            if (this.state === "added") {
                return dm.insert(this.json, this.name).done(ej.proxy(function (e) {
                    $.extend(this.json, e.record);
                }, this));
            }
            else if (this.state === "changed") {
                return dm.update(key, this.json, this.name);
            }
            else if (this.state === "deleted") {
                return dm.remove(key, this.json, this.name);
            }
        },
        markCommit: function () {
            this.isDirty = false;
            this.changeState("unchanged", { from: "commit" });
        },
        markDelete: function () {
            this.changeState("deleted", { from: "delete" });
        },
        changeState: function (state, args) {
            if (this.state === state) return;

            if (this.state === "added") {
                if (state === "deleted")
                    state = "unchanged";
                else return;
            }

            var prev = state;
            args = args || {};

            this.state = state;
            this._events.triggerHandler($.extend({ type: "stateChange", current: state, previous: prev, model: this }, args));
        },
        properties: function () {
            if (this._props.length)
                return this._props;

            for (var pr in this.json) {
                this._props.push(pr);
                this._updates[pr] = { read: [], input: [] };
            }

            return this._props;
        },
        bindTo: function (element) {
            var el = $(element), ctl, field,
                elements = el.find("[ej-observe], [ej-computed], [ej-prop]"), len = elements.length;

            el.data("ejModel", this);
            var unbindData = { fields: [], props: [], computes: [] };
            for (var i = 0; i < len; i++) {
                ctl = elements.eq(i);

                field = ctl.attr("ej-prop");
                if (field) {
                    this._processAttrib(field, ctl, unbindData);
                }
                field = ctl.attr("ej-observe");
                if (field && this._props.indexOf(field) !== -1) {
                    this._processField(ctl, field, unbindData);
                    continue;
                }

                field = ctl.attr("ej-computed");
                if (field) {
                    this._processComputed(field, ctl, unbindData);
                    continue;
                }
            }
            el.data("ejModelBinding" + this.$id, unbindData);
        },
        unbind: function (element) {
            var tmp, data = {
                props: this._attrEls,
                computes: this._computeEls
            }, isCustom = false;

            if (element) {
                data = $(element).removeData("ejModel").data("ejModelBinding" + this.$id) || data;
                isCustom = true;
            }

            for (var p in this.computed) {
                tmp = data.computes[p], p = this.computed[p];
                if (tmp && p.deps) {
                    this.off(p.deps.join(' '), tmp.handle);
                    if (isCustom)
                        delete this._computeEls[p];
                }
            }
            if (!isCustom)
                this._computeEls = {};

            for (var p in data.props) {
                tmp = data.props[p];
                if (tmp) {
                    this.off(tmp.deps.join(' '), tmp.handle);
                    delete data.props[p];
                    if (isCustom)
                        delete this._attrEls[p];
                }
            }
            if (!isCustom)
                this._attrEls = {};

            if (data.fields && data.fields.length) {
                var len = data.fields.length, ctl, idx, ty;
                for (var i = 0; i < len; i++) {
                    ctl = data.fields[i];
                    $(ctl).off("change", null, this._changeHandler);

                    ty = this.formElements.indexOf(ctl.tagName.toLowerCase()) !== -1 ? "input" : "read";
                    idx = this._updates[ty].indexOf(ctl);
                    if (idx !== -1)
                        this._updates[ty].splice(idx, 1);
                }
            }
        },
        _processComputed: function (value, element, data) {
            if (!value) return;

            var val, deps, safeVal = safeStr(value),
            type = this.formElements.indexOf(element[0].tagName.toLowerCase()) !== -1 ? "val" : "html";

            if (!this.computed[value] || !this.computed[safeVal]) {
                this.computed[safeVal] = {
                    value: new Function("var e = this; return " + value),
                    deps: this._generateDeps(value)
                }
                value = safeVal;
            }

            val = this.computed[value];
            if (!val.get) {
                val.get = function () {
                    val.value.call(this.json);
                }
            }

            deps = val.deps;
            val = val.value;

            this._updateDeps(deps);
            this._updateElement(element, type, val);

            val = { el: element, handle: $proxy(this._computeHandle, this, { value: value, type: type }) };
            this._computeEls[value] = val;
            data.computes[value] = val;

            this.on(deps.join(' '), val.handle);
        },
        _computeHandle: function (e) {
            var el = this._computeEls[e.value];
            if (el && this.computed[e.value])
                this._updateElement(el.el, e.type, this.computed[e.value].value);
        },
        _updateElement: function (el, type, val) {
            el[type](val.call($.extend({}, this.json, this.computed)));
        },
        _updateDeps: function (deps) {
            for (var i = 0; i < deps.length; i++) {
                if (!(deps[i] in this.json) && deps[i] in this.computed)
                    ej.merge(deps, this.computed[deps[i]].deps);
            }
        },
        _generateDeps: function (value) {
            var splits = value.replace(/(^e\.)|( e\.)/g, '#%^*##ej.#').split("#%^*#"),
                field, deps = [];

            for (var i = 0; i < splits.length; i++) {
                if (splits[i].startsWith("#ej.#")) {
                    field = splits[i].replace("#ej.#", "").split(' ')[0];
                    if (field && this._props.indexOf(field) !== -1)
                        deps.push(field);
                }
            }

            return deps;
        },
        _processAttrib: function (value, el, data) {
            var prop, val, res = {};
            value = value.replace(/^ +| +$/g, "").split(";");
            for (var i = 0; i < value.length; i++) {
                value[i] = value[i].split(":");
                if (value[i].length < 2) continue;

                prop = value[i][0].replace(/^ +| +$/g, "").replace(/^'|^"|'$|"$/g, "");
                res[prop] = value[i][1].replace(/^ +| +$/g, "").replace(/^'|^"|'$|"$/g, "");
            }
            value = res;
            var deps = [];
            for (prop in value)
                deps.push(value[prop]);

            this._updateDeps(deps);
            this._updateProps(el, value);

            res = getUid("emak");
            val = { el: el, handle: $proxy(this._attrHandle, this, res), value: value, deps: deps };
            el.prop("ejmodelattrkey", res);

            data.props[res] = val;
            this._attrEls[res] = val;

            this.on(deps.join(' '), val.handle);
        },
        _attrHandle: function (res) {
            var el = this._attrEls[res];
            if (el)
                this._updateProps(el.el, el.value);
        },
        _updateProps: function (element, value) {
            var json = this.json, t, c = this.computed;
            for (var prop in value) {
                t = value[prop];
                if (t in json)
                    t = json[t];
                else if (t in c) {
                    t = c[t];
                    if (t) {
                        t = t.value.call($.extend({}, this.json, c));
                    }
                }

                if (!isNull(t)) {
                    element.prop(prop, t);
                }
            }
        },
        _updateValues: function (prop, value) {
            var arr = this._updates[prop];

            if (!arr || (!arr.read && !arr.input)) return;

            this._ensureItems(arr.read, "html", value);
            this._ensureItems(arr.input, "val", value);
        },
        _ensureItems: function (a, type, value) {
            if (!a) return;

            for (var i = a.length - 1; i > -1; i--) {
                if (!a[i].offsetParent) {
                    a.splice(i, 1);
                    continue;
                }
                $(a[i])[type](value);
            }
        },
        _changeHandler: function (e) {
            e.data.self.set(e.data.prop, $(this).val());
        },
        _processField: function (ctl, field, data) {
            var e = { self: this, prop: field }, val = this.get(field);

            data.fields.push(ctl[0]);

            if (this.formElements.indexOf(ctl[0].tagName.toLowerCase()) === -1) {
                ctl.html(val);
                return this._updates[field].read.push(ctl[0]);
            }

            ctl.val(val)
                    .off("change", null, this._changeHandler)
                    .on("change", null, e, this._changeHandler);

            return this._updates[field].input.push(ctl[0]);
        },
        formElements: ["input", "select", "textarea"]
    };

    var safeReg = /[^\w]+/g;
    var safeStr = function (value) {
        return value.replace(safeReg, "_");
    };
    var setDirty = function (e) {
        this.setDirty(true, e.model);
    };

    ej.Predicate = function (field, operator, value, ignoreCase, ignoreAccent) {
        if (!(this instanceof ej.Predicate))
            return new ej.Predicate(field, operator, value, ignoreCase,ignoreAccent);

        this.ignoreAccent = false;

        if (typeof field === "string") {
			var checkAny = "";
			if(operator.toLowerCase().indexOf(" any") != -1) {
				operator = operator.replace(" any","");
				checkAny = "any";
			} 
			else if(operator.toLowerCase().indexOf(" all") != -1) {
				operator = operator.replace(" all","");
				checkAny = "all";
			} 
            this.field = field;
            this.operator = operator;
            this.value = value;
            this.ignoreCase = ignoreCase;
            this.ignoreAccent = ignoreAccent;
            this.isComplex = false;
			this.anyCondition = checkAny;

            this._comparer = ej.data.fnOperators.processOperator(checkAny != "" ? checkAny:this.operator);

        } else if (field instanceof ej.Predicate && value instanceof ej.Predicate || value instanceof Array) {
            this.isComplex = true;
            this.condition = operator.toLowerCase();
            this.predicates = [field];
            if (value instanceof Array)
                [].push.apply(this.predicates, value);
            else
                this.predicates.push(value);
        }
        return this;
    };

    ej.Predicate.and = function () {
        return pvtPredicate._combinePredicates([].slice.call(arguments, 0), "and");
    };

    ej.Predicate.or = function () {
        return pvtPredicate._combinePredicates([].slice.call(arguments, 0), "or");
    };

    ej.Predicate.fromJSON = function (json) {
        if (instance(json, Array)) {
            var res = [];
            for (var i = 0, len = json.length; i < len; i++)
                res.push(pvtPredicate._fromJSON(json[i]));
            return res;
        }

        return pvtPredicate._fromJSON(json);
    };

    // Private fn
    var pvtPredicate = {
        _combinePredicates: function (predicates, operator) {
            if (!predicates.length) return undefined;
            if (predicates.length === 1) {
                if (!instance(predicates[0], Array))
                    return predicates[0];
                predicates = predicates[0];
            }
            return new ej.Predicate(predicates[0], operator, predicates.slice(1));
        },

        _combine: function (pred, field, operator, value, condition, ignoreCase, ignoreAccent) {
            if (field instanceof ej.Predicate)
                return ej.Predicate[condition](pred, field);

            if (typeof field === "string")
                return ej.Predicate[condition](pred, new ej.Predicate(field, operator, value, ignoreCase,ignoreAccent));

            return throwError("Predicate - " + condition + " : invalid arguments");
        },

        _fromJSON: function (json) {

            if (!json || instance(json, ej.Predicate))
                return json;

            var preds = json.predicates || [], len = preds.length, predicates = [], result;

            for (var i = 0; i < len; i++)
                predicates.push(pvtPredicate._fromJSON(preds[i]));                     

            if(!json.isComplex)
                result = new ej.Predicate(json.field, json.operator, ej.parseJSON({ val: json.value }).val, json.ignoreCase,json.ignoreAccent);
            else
                result = new ej.Predicate(predicates[0], json.condition, predicates.slice(1));

            return result;
        }
    };

    ej.Predicate.prototype = {
        and: function (field, operator, value, ignoreCase,ignoreAccent) {
            return pvtPredicate._combine(this, field, operator, value, "and", ignoreCase,ignoreAccent);
        },
        or: function (field, operator, value, ignoreCase,ignoreAccent) {
            return pvtPredicate._combine(this, field, operator, value, "or", ignoreCase,ignoreAccent);
        },
        validate: function (record) {
            var p = this.predicates, isAnd, ret;

            if (!this.isComplex) {
                return this._comparer.call(this, ej.pvt.getObject(this.field, record), this.value, this.ignoreCase,this.ignoreAccent);
            }

            isAnd = this.condition === "and";

            for (var i = 0; i < p.length; i++) {
                ret = p[i].validate(record);
                if (isAnd) {
                    if (!ret) return false;
                } else {
                    if (ret) return true;
                }
            }

            return isAnd;
        },
        toJSON: function () {
            var predicates, p;
            if (this.isComplex) {
                predicates = [], p = this.predicates;
                for (var i = 0; i < p.length; i++)
                    predicates.push(p[i].toJSON());
            }
            return {
                isComplex: this.isComplex,
                field: this.field,
                operator: this.operator,
                value: this.value,
                ignoreCase: this.ignoreCase,
                ignoreAccent: this.ignoreAccent,
                condition: this.condition,
                predicates: predicates,
				anyCondition: this.anyCondition
            }
        }
    };

    ej.dataUtil = {
        swap: function (array, x, y) {
            if (x == y) return;

            var tmp = array[x];
            array[x] = array[y];
            array[y] = tmp;
        },

        mergeSort: function (jsonArray, fieldName, comparer) {
            if (!comparer || typeof comparer === "string")
                comparer = ej.pvt.fnSort(comparer, true);

            if (typeof fieldName === "function") {
                comparer = fieldName;
                fieldName = null;
            }

            return ej.pvt.mergeSort(jsonArray, fieldName, comparer);
        },

        max: function (jsonArray, fieldName, comparer) {
            if (typeof fieldName === "function") {
                comparer = fieldName;
                fieldName = null;
            }

            return ej.pvt.getItemFromComparer(jsonArray, fieldName, comparer || ej.pvt.fnDescending);
        },

        min: function (jsonArray, fieldName, comparer) {
            if (typeof fieldName === "function") {
                comparer = fieldName;
                fieldName = null;
            }

            return ej.pvt.getItemFromComparer(jsonArray, fieldName, comparer || ej.pvt.fnAscending);
        },

        distinct: function (json, fieldName, requiresCompleteRecord) {
            var result = [], val, tmp = {};
            for (var i = 0; i < json.length; i++) {
                val = getVal(json, fieldName, i);
                if (!(val in tmp)) {
                    result.push(!requiresCompleteRecord ? val : json[i]);
                    tmp[val] = 1;
                }
            }
            return result;
        },

        sum: function (json, fieldName) {
            var result = 0, val, castRequired = typeof getVal(json, fieldName, 0) !== "number";

            for (var i = 0; i < json.length; i++) {
                val = getVal(json, fieldName, i);
                if (!isNaN(val) && val !== null) {
                    if (castRequired)
                       val = +val;
                   result += val;
                }
            }
            return result;
        },

        avg: function (json, fieldName) {
            return ej.sum(json, fieldName) / json.length;
        },

        select: function (jsonArray, fields) {
            var newData = [];

            for (var i = 0; i < jsonArray.length; i++) {
                newData.push(ej.pvt.extractFields(jsonArray[i], fields));
            }

            return newData;
        },

        group: function (jsonArray, field, agg, format,/* internal */ level,groupDs) {
            level = level || 1;

            if (jsonArray.GROUPGUID == ej.pvt.consts.GROUPGUID) {
                for (var j = 0; j < jsonArray.length; j++) {
                    if(!ej.isNullOrUndefined(groupDs)){
                        var indx = -1;
                        var temp = $.grep(groupDs,function(e){return e.key==jsonArray[j].key});
                        indx = groupDs.indexOf(temp[0]);
                        jsonArray[j].items = ej.group(jsonArray[j].items, field, agg, format, jsonArray.level + 1, groupDs[indx].items);
                        jsonArray[j].count = groupDs[indx].count;
                    }
                    else{
                        jsonArray[j].items = ej.group(jsonArray[j].items, field, agg, format, jsonArray.level + 1);
                        jsonArray[j].count = jsonArray[j].items.length;
                    }  
                }

                jsonArray.childLevels += 1;
                return jsonArray;
            }

            var grouped = {}, groupedArray = [];

            groupedArray.GROUPGUID = ej.pvt.consts.GROUPGUID;
            groupedArray.level = level;
            groupedArray.childLevels = 0;
            groupedArray.records = jsonArray;

            for (var i = 0; i < jsonArray.length; i++) {
                var val = getVal(jsonArray, field, i);
                if (!ej.isNullOrUndefined(format)) val = format(val, field);

                if (!grouped[val]) {
                    grouped[val] = {
                        key: val,
                        count: 0,
                        items: [],
                        aggregates: {},
                        field: field
                    };
                    groupedArray.push(grouped[val]);
					if(!ej.isNullOrUndefined(groupDs)) {
                        var tempObj = $.grep(groupDs,function(e){return e.key==grouped[val].key});
                       grouped[val].count = tempObj[0].count
                    }
                }

                grouped[val].count = !ej.isNullOrUndefined(groupDs) ? grouped[val].count :  grouped[val].count += 1;
                grouped[val].items.push(jsonArray[i]);
            }
            if (agg && agg.length) {

                for (var i = 0; i < groupedArray.length; i++) {
                    var res = {}, fn;
                    for (var j = 0; j < agg.length; j++) {

                        fn = ej.aggregates[agg[j].type];
                        if(!ej.isNullOrUndefined(groupDs)) {
                            var temp = $.grep(groupDs,function(e){return e.key==groupedArray[i].key});
                            if(fn)
                                res[agg[j].field + " - " + agg[j].type] = fn(temp[0].items, agg[j].field);
                        }
                        else{
                            if (fn)
                                res[agg[j].field + " - " + agg[j].type] = fn(groupedArray[i].items, agg[j].field);
                        }

                    }
                    groupedArray[i]["aggregates"] = res;
                }
            }
            return groupedArray;
        },

        parseTable: function (table, headerOption, headerRowIndex) {
            var tr = table.rows, headerRow, headerTds = [], data = [], i;

            if (!tr.length) return [];

            headerRowIndex = headerRowIndex || 0;

            switch ((headerOption || "").toLowerCase()) {
                case ej.headerOption.tHead:
                    headerRow = table.tHead.rows[headerRowIndex];
                    break;
                case ej.headerOption.row:
                default:
                    headerRow = table.rows[headerRowIndex];
                    break;
            }

            var hTd = headerRow.cells;

            for (i = 0; i < hTd.length; i++)
                headerTds.push($.trim(hTd[i].innerHTML));

            for (i = headerRowIndex + 1; i < tr.length; i++) {
                var json = {}, td = tr[i].cells;
                for (var j = 0; j < td.length; j++) {
                    var temp = td[j].innerHTML;
                    if (typeof temp == "string" && $.isNumeric(temp))
                       json[headerTds[j]] = Number(temp);
				    else
                       json[headerTds[j]] = temp;
                }
                data.push(json);
            }
            return data;
        }
    };

    ej.headerOption = {
        tHead: "thead",
        row: "row"
    };

    ej.aggregates = {
        sum: function (ds, field) {
            return ej.sum(ds, field);
        },
        average: function (ds, field) {
            return ej.avg(ds, field);
        },
        minimum: function (ds, field) {
            return ej.getObject(field, ej.min(ds, field));
        },
        maximum: function (ds, field) {
            return  ej.getObject(field, ej.max(ds, field));
        },
        truecount: function (ds, field){
            var predicate = ej.Predicate(field, "equal", true);
            return ej.DataManager(ds).executeLocal(ej.Query().where(predicate)).length;
        },
        falsecount: function (ds, field) {
            var predicate = ej.Predicate(field, "equal", false);
            return ej.DataManager(ds).executeLocal(ej.Query().where(predicate)).length;
        },
        count: function (ds, field) {
            return ds.length;
        }

    };
    ej.pvt = {
        filterQueries: filterQueries,
        mergeSort: function (jsonArray, fieldName, comparer) {
            if (jsonArray.length <= 1)
                return jsonArray;

            // else list size is > 1, so split the list into two sublists
            var middle = parseInt(jsonArray.length / 2, 10);

            var left = jsonArray.slice(0, middle),
                right = jsonArray.slice(middle);

            left = ej.pvt.mergeSort(left, fieldName, comparer);
            right = ej.pvt.mergeSort(right, fieldName, comparer);

            return ej.pvt.merge(left, right, fieldName, comparer);
        },

        getItemFromComparer: function (array, field, comparer) {
            var keyVal, current, key, i = 0,castRequired = typeof getVal(array, field, 0) == "string";
            if (array.length)
            while (ej.isNullOrUndefined(keyVal) && i < array.length) {
                keyVal = getVal(array, field, i);
                key = array[i++];
            }
            for (; i < array.length; i++) {
                current = getVal(array, field, i);
                if (ej.isNullOrUndefined(current))
                    continue;
                if (castRequired) {
                    keyVal = +keyVal;
                    current = +current;
                }
                if (comparer(keyVal, current) > 0) {
                    keyVal = current;
                    key = array[i];
                }
            }
            return key;
        },

        quickSelect: function (array, fieldName, left, right, k, comparer) {
            if (left == right)
                return array[left];

            var pivotNewIndex = ej.pvt.partition(array, fieldName, left, right, comparer);

            var pivotDist = pivotNewIndex - left + 1;

            if (pivotDist == k)
                return array[pivotNewIndex];

            else if (k < pivotDist)
                return ej.pvt.quickSelect(array, fieldName, left, pivotNewIndex - 1, k, comparer);
            else
                return ej.pvt.quickSelect(array, fieldName, pivotNewIndex + 1, right, k - pivotDist, comparer);
        },

        extractFields: function (obj, fields) {
            var newObj = {};

            if (fields.length == 1)
                return ej.pvt.getObject(fields[0], obj);

            for (var i = 0; i < fields.length; i++) {
                newObj[fields[i].replace('.', ej.pvt.consts.complexPropertyMerge)] = ej.pvt.getObject(fields[i], obj);
            }

            return newObj;
        },

        partition: function (array, field, left, right, comparer) {

            var pivotIndex = parseInt((left + right) / 2, 10),
                pivot = getVal(array, field, pivotIndex);

            ej.swap(array, pivotIndex, right);

            pivotIndex = left;

            for (var i = left; i < right; i++) {
                if (comparer(getVal(array, field, i), pivot)) {
                    ej.swap(array, i, pivotIndex);
                    pivotIndex++;
                }
            }

            ej.swap(array, pivotIndex, right);

            return pivotIndex;
        },

        fnSort: function (order) {
            order = order ? order.toLowerCase() : ej.sortOrder.Ascending;

            if (order == ej.sortOrder.Ascending)
                return ej.pvt.fnAscending;

            return ej.pvt.fnDescending;
        },

        fnGetComparer: function (field, fn) {
            return function (x, y) {
                return fn(ej.pvt.getObject(field, x), ej.pvt.getObject(field, y));
            }
        },

        fnAscending: function (x, y) {
            if(ej.isNullOrUndefined(y) && ej.isNullOrUndefined(x))
                return -1;
                        
            if (y === null || y === undefined)
                return -1;

            if (typeof x === "string")
                return x.localeCompare(y);

            if (x === null || x === undefined)
                return 1;

            return x - y;
        },

        fnDescending: function (x, y) {
            if(ej.isNullOrUndefined(y) && ej.isNullOrUndefined(x))
                return -1;            

            if (y === null || y === undefined)
                return 1;

            if (typeof x === "string")
                return x.localeCompare(y) * -1;

            if (x === null || x === undefined)
                return -1;

            return y - x;
        },

        merge: function (left, right, fieldName, comparer) {
            var result = [], current;

            while (left.length > 0 || right.length > 0) {
                if (left.length > 0 && right.length > 0) {
                    if (comparer)
                        current = comparer(getVal(left, fieldName, 0), getVal(right, fieldName, 0)) <= 0 ? left : right;
                    else
                        current = left[0][fieldName] < left[0][fieldName] ? left : right;
                } else {
                    current = left.length > 0 ? left : right;
                }

                result.push(current.shift());
            }

            return result;
        },

        getObject: function (nameSpace, from) {
            if (!from) return undefined;
            if (!nameSpace) return from;

            if (nameSpace.indexOf('.') === -1) return from[nameSpace];

            var value = from, splits = nameSpace.split('.');

            for (var i = 0; i < splits.length; i++) {

                if (value == null) break;

                value = value[splits[i]];
            }

            return value;
        },

        createObject: function (nameSpace, value, initIn) {
            var splits = nameSpace.split('.'), start = initIn || window, from = start, i;

            for (i = 0; i < splits.length; i++) {

                if (i + 1 == splits.length)
                    from[splits[i]] = value === undefined ? {} : value;
                else if (from[splits[i]] == null)
                    from[splits[i]] = {};

                from = from[splits[i]];
            }

            return start;
        },

        ignoreDiacritics :function (value) {
            if (typeof value !== 'string') {
                return value;
            }
            var result = value.split('');
            var newValue = result.map(function (temp) { return temp in ej.data.diacritics ? ej.data.diacritics[temp] : temp; });
            return newValue.join('');
        },


        getFieldList: function (obj, fields, prefix) {
            if (prefix === undefined)
                prefix = "";

            if (fields === undefined || fields === null)
                return ej.pvt.getFieldList(obj, [], prefix);

            for (var prop in obj) {
                if (typeof obj[prop] === "object" && !(obj[prop] instanceof Array))
                    ej.pvt.getFieldList(obj[prop], fields, prefix + prop + ".");
                else
                    fields.push(prefix + prop);
            }

            return fields;
        }
    };

    ej.FilterOperators = {
        lessThan: "lessthan",
        greaterThan: "greaterthan",
        lessThanOrEqual: "lessthanorequal",
        greaterThanOrEqual: "greaterthanorequal",
        equal: "equal",
        contains: "contains",
        startsWith: "startswith",
        endsWith: "endswith",
        notEqual: "notequal"
    };

    ej.data = {};

    ej.data.operatorSymbols = {
        "<": "lessthan",
        ">": "greaterthan",
        "<=": "lessthanorequal",
        ">=": "greaterthanorequal",
        "==": "equal",
        "!=": "notequal",
        "*=": "contains",
        "$=": "endswith",
        "^=": "startswith"
    };

    ej.data.odBiOperator = {
        "<": " lt ",
        ">": " gt ",
        "<=": " le ",
        ">=": " ge ",
        "==": " eq ",
        "!=": " ne ",
        "lessthan": " lt ",
        "lessthanorequal": " le ",
        "greaterthan": " gt ",
        "greaterthanorequal": " ge ",
        "equal": " eq ",
        "notequal": " ne ",
		"in":" eq ",
		"notin": " ne "
    };

    ej.data.odUniOperator = {
        "$=": "endswith",
        "^=": "startswith",
        "*=": "substringof",
        "endswith": "endswith",
        "startswith": "startswith",
        "contains": "substringof",
		"notcontains":"substringof"
    };
    ej.data.diacritics = {
        '\u24B6': 'A',
        '\uFF21': 'A',
        '\u00C0': 'A',
        '\u00C1': 'A',
        '\u00C2': 'A',
        '\u1EA6': 'A',
        '\u1EA4': 'A',
        '\u1EAA': 'A',
        '\u1EA8': 'A',
        '\u00C3': 'A',
        '\u0100': 'A',
        '\u0102': 'A',
        '\u1EB0': 'A',
        '\u1EAE': 'A',
        '\u1EB4': 'A',
        '\u1EB2': 'A',
        '\u0226': 'A',
        '\u01E0': 'A',
        '\u00C4': 'A',
        '\u01DE': 'A',
        '\u1EA2': 'A',
        '\u00C5': 'A',
        '\u01FA': 'A',
        '\u01CD': 'A',
        '\u0200': 'A',
        '\u0202': 'A',
        '\u1EA0': 'A',
        '\u1EAC': 'A',
        '\u1EB6': 'A',
        '\u1E00': 'A',
        '\u0104': 'A',
        '\u023A': 'A',
        '\u2C6F': 'A',
        '\uA732': 'AA',
        '\u00C6': 'AE',
        '\u01FC': 'AE',
        '\u01E2': 'AE',
        '\uA734': 'AO',
        '\uA736': 'AU',
        '\uA738': 'AV',
        '\uA73A': 'AV',
        '\uA73C': 'AY',
        '\u24B7': 'B',
        '\uFF22': 'B',
        '\u1E02': 'B',
        '\u1E04': 'B',
        '\u1E06': 'B',
        '\u0243': 'B',
        '\u0182': 'B',
        '\u0181': 'B',
        '\u24B8': 'C',
        '\uFF23': 'C',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010A': 'C',
        '\u010C': 'C',
        '\u00C7': 'C',
        '\u1E08': 'C',
        '\u0187': 'C',
        '\u023B': 'C',
        '\uA73E': 'C',
        '\u24B9': 'D',
        '\uFF24': 'D',
        '\u1E0A': 'D',
        '\u010E': 'D',
        '\u1E0C': 'D',
        '\u1E10': 'D',
        '\u1E12': 'D',
        '\u1E0E': 'D',
        '\u0110': 'D',
        '\u018B': 'D',
        '\u018A': 'D',
        '\u0189': 'D',
        '\uA779': 'D',
        '\u01F1': 'DZ',
        '\u01C4': 'DZ',
        '\u01F2': 'Dz',
        '\u01C5': 'Dz',
        '\u24BA': 'E',
        '\uFF25': 'E',
        '\u00C8': 'E',
        '\u00C9': 'E',
        '\u00CA': 'E',
        '\u1EC0': 'E',
        '\u1EBE': 'E',
        '\u1EC4': 'E',
        '\u1EC2': 'E',
        '\u1EBC': 'E',
        '\u0112': 'E',
        '\u1E14': 'E',
        '\u1E16': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u00CB': 'E',
        '\u1EBA': 'E',
        '\u011A': 'E',
        '\u0204': 'E',
        '\u0206': 'E',
        '\u1EB8': 'E',
        '\u1EC6': 'E',
        '\u0228': 'E',
        '\u1E1C': 'E',
        '\u0118': 'E',
        '\u1E18': 'E',
        '\u1E1A': 'E',
        '\u0190': 'E',
        '\u018E': 'E',
        '\u24BB': 'F',
        '\uFF26': 'F',
        '\u1E1E': 'F',
        '\u0191': 'F',
        '\uA77B': 'F',
        '\u24BC': 'G',
        '\uFF27': 'G',
        '\u01F4': 'G',
        '\u011C': 'G',
        '\u1E20': 'G',
        '\u011E': 'G',
        '\u0120': 'G',
        '\u01E6': 'G',
        '\u0122': 'G',
        '\u01E4': 'G',
        '\u0193': 'G',
        '\uA7A0': 'G',
        '\uA77D': 'G',
        '\uA77E': 'G',
        '\u24BD': 'H',
        '\uFF28': 'H',
        '\u0124': 'H',
        '\u1E22': 'H',
        '\u1E26': 'H',
        '\u021E': 'H',
        '\u1E24': 'H',
        '\u1E28': 'H',
        '\u1E2A': 'H',
        '\u0126': 'H',
        '\u2C67': 'H',
        '\u2C75': 'H',
        '\uA78D': 'H',
        '\u24BE': 'I',
        '\uFF29': 'I',
        '\u00CC': 'I',
        '\u00CD': 'I',
        '\u00CE': 'I',
        '\u0128': 'I',
        '\u012A': 'I',
        '\u012C': 'I',
        '\u0130': 'I',
        '\u00CF': 'I',
        '\u1E2E': 'I',
        '\u1EC8': 'I',
        '\u01CF': 'I',
        '\u0208': 'I',
        '\u020A': 'I',
        '\u1ECA': 'I',
        '\u012E': 'I',
        '\u1E2C': 'I',
        '\u0197': 'I',
        '\u24BF': 'J',
        '\uFF2A': 'J',
        '\u0134': 'J',
        '\u0248': 'J',
        '\u24C0': 'K',
        '\uFF2B': 'K',
        '\u1E30': 'K',
        '\u01E8': 'K',
        '\u1E32': 'K',
        '\u0136': 'K',
        '\u1E34': 'K',
        '\u0198': 'K',
        '\u2C69': 'K',
        '\uA740': 'K',
        '\uA742': 'K',
        '\uA744': 'K',
        '\uA7A2': 'K',
        '\u24C1': 'L',
        '\uFF2C': 'L',
        '\u013F': 'L',
        '\u0139': 'L',
        '\u013D': 'L',
        '\u1E36': 'L',
        '\u1E38': 'L',
        '\u013B': 'L',
        '\u1E3C': 'L',
        '\u1E3A': 'L',
        '\u0141': 'L',
        '\u023D': 'L',
        '\u2C62': 'L',
        '\u2C60': 'L',
        '\uA748': 'L',
        '\uA746': 'L',
        '\uA780': 'L',
        '\u01C7': 'LJ',
        '\u01C8': 'Lj',
        '\u24C2': 'M',
        '\uFF2D': 'M',
        '\u1E3E': 'M',
        '\u1E40': 'M',
        '\u1E42': 'M',
        '\u2C6E': 'M',
        '\u019C': 'M',
        '\u24C3': 'N',
        '\uFF2E': 'N',
        '\u01F8': 'N',
        '\u0143': 'N',
        '\u00D1': 'N',
        '\u1E44': 'N',
        '\u0147': 'N',
        '\u1E46': 'N',
        '\u0145': 'N',
        '\u1E4A': 'N',
        '\u1E48': 'N',
        '\u0220': 'N',
        '\u019D': 'N',
        '\uA790': 'N',
        '\uA7A4': 'N',
        '\u01CA': 'NJ',
        '\u01CB': 'Nj',
        '\u24C4': 'O',
        '\uFF2F': 'O',
        '\u00D2': 'O',
        '\u00D3': 'O',
        '\u00D4': 'O',
        '\u1ED2': 'O',
        '\u1ED0': 'O',
        '\u1ED6': 'O',
        '\u1ED4': 'O',
        '\u00D5': 'O',
        '\u1E4C': 'O',
        '\u022C': 'O',
        '\u1E4E': 'O',
        '\u014C': 'O',
        '\u1E50': 'O',
        '\u1E52': 'O',
        '\u014E': 'O',
        '\u022E': 'O',
        '\u0230': 'O',
        '\u00D6': 'O',
        '\u022A': 'O',
        '\u1ECE': 'O',
        '\u0150': 'O',
        '\u01D1': 'O',
        '\u020C': 'O',
        '\u020E': 'O',
        '\u01A0': 'O',
        '\u1EDC': 'O',
        '\u1EDA': 'O',
        '\u1EE0': 'O',
        '\u1EDE': 'O',
        '\u1EE2': 'O',
        '\u1ECC': 'O',
        '\u1ED8': 'O',
        '\u01EA': 'O',
        '\u01EC': 'O',
        '\u00D8': 'O',
        '\u01FE': 'O',
        '\u0186': 'O',
        '\u019F': 'O',
        '\uA74A': 'O',
        '\uA74C': 'O',
        '\u01A2': 'OI',
        '\uA74E': 'OO',
        '\u0222': 'OU',
        '\u24C5': 'P',
        '\uFF30': 'P',
        '\u1E54': 'P',
        '\u1E56': 'P',
        '\u01A4': 'P',
        '\u2C63': 'P',
        '\uA750': 'P',
        '\uA752': 'P',
        '\uA754': 'P',
        '\u24C6': 'Q',
        '\uFF31': 'Q',
        '\uA756': 'Q',
        '\uA758': 'Q',
        '\u024A': 'Q',
        '\u24C7': 'R',
        '\uFF32': 'R',
        '\u0154': 'R',
        '\u1E58': 'R',
        '\u0158': 'R',
        '\u0210': 'R',
        '\u0212': 'R',
        '\u1E5A': 'R',
        '\u1E5C': 'R',
        '\u0156': 'R',
        '\u1E5E': 'R',
        '\u024C': 'R',
        '\u2C64': 'R',
        '\uA75A': 'R',
        '\uA7A6': 'R',
        '\uA782': 'R',
        '\u24C8': 'S',
        '\uFF33': 'S',
        '\u1E9E': 'S',
        '\u015A': 'S',
        '\u1E64': 'S',
        '\u015C': 'S',
        '\u1E60': 'S',
        '\u0160': 'S',
        '\u1E66': 'S',
        '\u1E62': 'S',
        '\u1E68': 'S',
        '\u0218': 'S',
        '\u015E': 'S',
        '\u2C7E': 'S',
        '\uA7A8': 'S',
        '\uA784': 'S',
        '\u24C9': 'T',
        '\uFF34': 'T',
        '\u1E6A': 'T',
        '\u0164': 'T',
        '\u1E6C': 'T',
        '\u021A': 'T',
        '\u0162': 'T',
        '\u1E70': 'T',
        '\u1E6E': 'T',
        '\u0166': 'T',
        '\u01AC': 'T',
        '\u01AE': 'T',
        '\u023E': 'T',
        '\uA786': 'T',
        '\uA728': 'TZ',
        '\u24CA': 'U',
        '\uFF35': 'U',
        '\u00D9': 'U',
        '\u00DA': 'U',
        '\u00DB': 'U',
        '\u0168': 'U',
        '\u1E78': 'U',
        '\u016A': 'U',
        '\u1E7A': 'U',
        '\u016C': 'U',
        '\u00DC': 'U',
        '\u01DB': 'U',
        '\u01D7': 'U',
        '\u01D5': 'U',
        '\u01D9': 'U',
        '\u1EE6': 'U',
        '\u016E': 'U',
        '\u0170': 'U',
        '\u01D3': 'U',
        '\u0214': 'U',
        '\u0216': 'U',
        '\u01AF': 'U',
        '\u1EEA': 'U',
        '\u1EE8': 'U',
        '\u1EEE': 'U',
        '\u1EEC': 'U',
        '\u1EF0': 'U',
        '\u1EE4': 'U',
        '\u1E72': 'U',
        '\u0172': 'U',
        '\u1E76': 'U',
        '\u1E74': 'U',
        '\u0244': 'U',
        '\u24CB': 'V',
        '\uFF36': 'V',
        '\u1E7C': 'V',
        '\u1E7E': 'V',
        '\u01B2': 'V',
        '\uA75E': 'V',
        '\u0245': 'V',
        '\uA760': 'VY',
        '\u24CC': 'W',
        '\uFF37': 'W',
        '\u1E80': 'W',
        '\u1E82': 'W',
        '\u0174': 'W',
        '\u1E86': 'W',
        '\u1E84': 'W',
        '\u1E88': 'W',
        '\u2C72': 'W',
        '\u24CD': 'X',
        '\uFF38': 'X',
        '\u1E8A': 'X',
        '\u1E8C': 'X',
        '\u24CE': 'Y',
        '\uFF39': 'Y',
        '\u1EF2': 'Y',
        '\u00DD': 'Y',
        '\u0176': 'Y',
        '\u1EF8': 'Y',
        '\u0232': 'Y',
        '\u1E8E': 'Y',
        '\u0178': 'Y',
        '\u1EF6': 'Y',
        '\u1EF4': 'Y',
        '\u01B3': 'Y',
        '\u024E': 'Y',
        '\u1EFE': 'Y',
        '\u24CF': 'Z',
        '\uFF3A': 'Z',
        '\u0179': 'Z',
        '\u1E90': 'Z',
        '\u017B': 'Z',
        '\u017D': 'Z',
        '\u1E92': 'Z',
        '\u1E94': 'Z',
        '\u01B5': 'Z',
        '\u0224': 'Z',
        '\u2C7F': 'Z',
        '\u2C6B': 'Z',
        '\uA762': 'Z',
        '\u24D0': 'a',
        '\uFF41': 'a',
        '\u1E9A': 'a',
        '\u00E0': 'a',
        '\u00E1': 'a',
        '\u00E2': 'a',
        '\u1EA7': 'a',
        '\u1EA5': 'a',
        '\u1EAB': 'a',
        '\u1EA9': 'a',
        '\u00E3': 'a',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u1EB1': 'a',
        '\u1EAF': 'a',
        '\u1EB5': 'a',
        '\u1EB3': 'a',
        '\u0227': 'a',
        '\u01E1': 'a',
        '\u00E4': 'a',
        '\u01DF': 'a',
        '\u1EA3': 'a',
        '\u00E5': 'a',
        '\u01FB': 'a',
        '\u01CE': 'a',
        '\u0201': 'a',
        '\u0203': 'a',
        '\u1EA1': 'a',
        '\u1EAD': 'a',
        '\u1EB7': 'a',
        '\u1E01': 'a',
        '\u0105': 'a',
        '\u2C65': 'a',
        '\u0250': 'a',
        '\uA733': 'aa',
        '\u00E6': 'ae',
        '\u01FD': 'ae',
        '\u01E3': 'ae',
        '\uA735': 'ao',
        '\uA737': 'au',
        '\uA739': 'av',
        '\uA73B': 'av',
        '\uA73D': 'ay',
        '\u24D1': 'b',
        '\uFF42': 'b',
        '\u1E03': 'b',
        '\u1E05': 'b',
        '\u1E07': 'b',
        '\u0180': 'b',
        '\u0183': 'b',
        '\u0253': 'b',
        '\u24D2': 'c',
        '\uFF43': 'c',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010B': 'c',
        '\u010D': 'c',
        '\u00E7': 'c',
        '\u1E09': 'c',
        '\u0188': 'c',
        '\u023C': 'c',
        '\uA73F': 'c',
        '\u2184': 'c',
        '\u24D3': 'd',
        '\uFF44': 'd',
        '\u1E0B': 'd',
        '\u010F': 'd',
        '\u1E0D': 'd',
        '\u1E11': 'd',
        '\u1E13': 'd',
        '\u1E0F': 'd',
        '\u0111': 'd',
        '\u018C': 'd',
        '\u0256': 'd',
        '\u0257': 'd',
        '\uA77A': 'd',
        '\u01F3': 'dz',
        '\u01C6': 'dz',
        '\u24D4': 'e',
        '\uFF45': 'e',
        '\u00E8': 'e',
        '\u00E9': 'e',
        '\u00EA': 'e',
        '\u1EC1': 'e',
        '\u1EBF': 'e',
        '\u1EC5': 'e',
        '\u1EC3': 'e',
        '\u1EBD': 'e',
        '\u0113': 'e',
        '\u1E15': 'e',
        '\u1E17': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u00EB': 'e',
        '\u1EBB': 'e',
        '\u011B': 'e',
        '\u0205': 'e',
        '\u0207': 'e',
        '\u1EB9': 'e',
        '\u1EC7': 'e',
        '\u0229': 'e',
        '\u1E1D': 'e',
        '\u0119': 'e',
        '\u1E19': 'e',
        '\u1E1B': 'e',
        '\u0247': 'e',
        '\u025B': 'e',
        '\u01DD': 'e',
        '\u24D5': 'f',
        '\uFF46': 'f',
        '\u1E1F': 'f',
        '\u0192': 'f',
        '\uA77C': 'f',
        '\u24D6': 'g',
        '\uFF47': 'g',
        '\u01F5': 'g',
        '\u011D': 'g',
        '\u1E21': 'g',
        '\u011F': 'g',
        '\u0121': 'g',
        '\u01E7': 'g',
        '\u0123': 'g',
        '\u01E5': 'g',
        '\u0260': 'g',
        '\uA7A1': 'g',
        '\u1D79': 'g',
        '\uA77F': 'g',
        '\u24D7': 'h',
        '\uFF48': 'h',
        '\u0125': 'h',
        '\u1E23': 'h',
        '\u1E27': 'h',
        '\u021F': 'h',
        '\u1E25': 'h',
        '\u1E29': 'h',
        '\u1E2B': 'h',
        '\u1E96': 'h',
        '\u0127': 'h',
        '\u2C68': 'h',
        '\u2C76': 'h',
        '\u0265': 'h',
        '\u0195': 'hv',
        '\u24D8': 'i',
        '\uFF49': 'i',
        '\u00EC': 'i',
        '\u00ED': 'i',
        '\u00EE': 'i',
        '\u0129': 'i',
        '\u012B': 'i',
        '\u012D': 'i',
        '\u00EF': 'i',
        '\u1E2F': 'i',
        '\u1EC9': 'i',
        '\u01D0': 'i',
        '\u0209': 'i',
        '\u020B': 'i',
        '\u1ECB': 'i',
        '\u012F': 'i',
        '\u1E2D': 'i',
        '\u0268': 'i',
        '\u0131': 'i',
        '\u24D9': 'j',
        '\uFF4A': 'j',
        '\u0135': 'j',
        '\u01F0': 'j',
        '\u0249': 'j',
        '\u24DA': 'k',
        '\uFF4B': 'k',
        '\u1E31': 'k',
        '\u01E9': 'k',
        '\u1E33': 'k',
        '\u0137': 'k',
        '\u1E35': 'k',
        '\u0199': 'k',
        '\u2C6A': 'k',
        '\uA741': 'k',
        '\uA743': 'k',
        '\uA745': 'k',
        '\uA7A3': 'k',
        '\u24DB': 'l',
        '\uFF4C': 'l',
        '\u0140': 'l',
        '\u013A': 'l',
        '\u013E': 'l',
        '\u1E37': 'l',
        '\u1E39': 'l',
        '\u013C': 'l',
        '\u1E3D': 'l',
        '\u1E3B': 'l',
        '\u017F': 'l',
        '\u0142': 'l',
        '\u019A': 'l',
        '\u026B': 'l',
        '\u2C61': 'l',
        '\uA749': 'l',
        '\uA781': 'l',
        '\uA747': 'l',
        '\u01C9': 'lj',
        '\u24DC': 'm',
        '\uFF4D': 'm',
        '\u1E3F': 'm',
        '\u1E41': 'm',
        '\u1E43': 'm',
        '\u0271': 'm',
        '\u026F': 'm',
        '\u24DD': 'n',
        '\uFF4E': 'n',
        '\u01F9': 'n',
        '\u0144': 'n',
        '\u00F1': 'n',
        '\u1E45': 'n',
        '\u0148': 'n',
        '\u1E47': 'n',
        '\u0146': 'n',
        '\u1E4B': 'n',
        '\u1E49': 'n',
        '\u019E': 'n',
        '\u0272': 'n',
        '\u0149': 'n',
        '\uA791': 'n',
        '\uA7A5': 'n',
        '\u01CC': 'nj',
        '\u24DE': 'o',
        '\uFF4F': 'o',
        '\u00F2': 'o',
        '\u00F3': 'o',
        '\u00F4': 'o',
        '\u1ED3': 'o',
        '\u1ED1': 'o',
        '\u1ED7': 'o',
        '\u1ED5': 'o',
        '\u00F5': 'o',
        '\u1E4D': 'o',
        '\u022D': 'o',
        '\u1E4F': 'o',
        '\u014D': 'o',
        '\u1E51': 'o',
        '\u1E53': 'o',
        '\u014F': 'o',
        '\u022F': 'o',
        '\u0231': 'o',
        '\u00F6': 'o',
        '\u022B': 'o',
        '\u1ECF': 'o',
        '\u0151': 'o',
        '\u01D2': 'o',
        '\u020D': 'o',
        '\u020F': 'o',
        '\u01A1': 'o',
        '\u1EDD': 'o',
        '\u1EDB': 'o',
        '\u1EE1': 'o',
        '\u1EDF': 'o',
        '\u1EE3': 'o',
        '\u1ECD': 'o',
        '\u1ED9': 'o',
        '\u01EB': 'o',
        '\u01ED': 'o',
        '\u00F8': 'o',
        '\u01FF': 'o',
        '\u0254': 'o',
        '\uA74B': 'o',
        '\uA74D': 'o',
        '\u0275': 'o',
        '\u01A3': 'oi',
        '\u0223': 'ou',
        '\uA74F': 'oo',
        '\u24DF': 'p',
        '\uFF50': 'p',
        '\u1E55': 'p',
        '\u1E57': 'p',
        '\u01A5': 'p',
        '\u1D7D': 'p',
        '\uA751': 'p',
        '\uA753': 'p',
        '\uA755': 'p',
        '\u24E0': 'q',
        '\uFF51': 'q',
        '\u024B': 'q',
        '\uA757': 'q',
        '\uA759': 'q',
        '\u24E1': 'r',
        '\uFF52': 'r',
        '\u0155': 'r',
        '\u1E59': 'r',
        '\u0159': 'r',
        '\u0211': 'r',
        '\u0213': 'r',
        '\u1E5B': 'r',
        '\u1E5D': 'r',
        '\u0157': 'r',
        '\u1E5F': 'r',
        '\u024D': 'r',
        '\u027D': 'r',
        '\uA75B': 'r',
        '\uA7A7': 'r',
        '\uA783': 'r',
        '\u24E2': 's',
        '\uFF53': 's',
        '\u00DF': 's',
        '\u015B': 's',
        '\u1E65': 's',
        '\u015D': 's',
        '\u1E61': 's',
        '\u0161': 's',
        '\u1E67': 's',
        '\u1E63': 's',
        '\u1E69': 's',
        '\u0219': 's',
        '\u015F': 's',
        '\u023F': 's',
        '\uA7A9': 's',
        '\uA785': 's',
        '\u1E9B': 's',
        '\u24E3': 't',
        '\uFF54': 't',
        '\u1E6B': 't',
        '\u1E97': 't',
        '\u0165': 't',
        '\u1E6D': 't',
        '\u021B': 't',
        '\u0163': 't',
        '\u1E71': 't',
        '\u1E6F': 't',
        '\u0167': 't',
        '\u01AD': 't',
        '\u0288': 't',
        '\u2C66': 't',
        '\uA787': 't',
        '\uA729': 'tz',
        '\u24E4': 'u',
        '\uFF55': 'u',
        '\u00F9': 'u',
        '\u00FA': 'u',
        '\u00FB': 'u',
        '\u0169': 'u',
        '\u1E79': 'u',
        '\u016B': 'u',
        '\u1E7B': 'u',
        '\u016D': 'u',
        '\u00FC': 'u',
        '\u01DC': 'u',
        '\u01D8': 'u',
        '\u01D6': 'u',
        '\u01DA': 'u',
        '\u1EE7': 'u',
        '\u016F': 'u',
        '\u0171': 'u',
        '\u01D4': 'u',
        '\u0215': 'u',
        '\u0217': 'u',
        '\u01B0': 'u',
        '\u1EEB': 'u',
        '\u1EE9': 'u',
        '\u1EEF': 'u',
        '\u1EED': 'u',
        '\u1EF1': 'u',
        '\u1EE5': 'u',
        '\u1E73': 'u',
        '\u0173': 'u',
        '\u1E77': 'u',
        '\u1E75': 'u',
        '\u0289': 'u',
        '\u24E5': 'v',
        '\uFF56': 'v',
        '\u1E7D': 'v',
        '\u1E7F': 'v',
        '\u028B': 'v',
        '\uA75F': 'v',
        '\u028C': 'v',
        '\uA761': 'vy',
        '\u24E6': 'w',
        '\uFF57': 'w',
        '\u1E81': 'w',
        '\u1E83': 'w',
        '\u0175': 'w',
        '\u1E87': 'w',
        '\u1E85': 'w',
        '\u1E98': 'w',
        '\u1E89': 'w',
        '\u2C73': 'w',
        '\u24E7': 'x',
        '\uFF58': 'x',
        '\u1E8B': 'x',
        '\u1E8D': 'x',
        '\u24E8': 'y',
        '\uFF59': 'y',
        '\u1EF3': 'y',
        '\u00FD': 'y',
        '\u0177': 'y',
        '\u1EF9': 'y',
        '\u0233': 'y',
        '\u1E8F': 'y',
        '\u00FF': 'y',
        '\u1EF7': 'y',
        '\u1E99': 'y',
        '\u1EF5': 'y',
        '\u01B4': 'y',
        '\u024F': 'y',
        '\u1EFF': 'y',
        '\u24E9': 'z',
        '\uFF5A': 'z',
        '\u017A': 'z',
        '\u1E91': 'z',
        '\u017C': 'z',
        '\u017E': 'z',
        '\u1E93': 'z',
        '\u1E95': 'z',
        '\u01B6': 'z',
        '\u0225': 'z',
        '\u0240': 'z',
        '\u2C6C': 'z',
        '\uA763': 'z',
        '\u0386': '\u0391',
        '\u0388': '\u0395',
        '\u0389': '\u0397',
        '\u038A': '\u0399',
        '\u03AA': '\u0399',
        '\u038C': '\u039F',
        '\u038E': '\u03A5',
        '\u03AB': '\u03A5',
        '\u038F': '\u03A9',
        '\u03AC': '\u03B1',
        '\u03AD': '\u03B5',
        '\u03AE': '\u03B7',
        '\u03AF': '\u03B9',
        '\u03CA': '\u03B9',
        '\u0390': '\u03B9',
        '\u03CC': '\u03BF',
        '\u03CD': '\u03C5',
        '\u03CB': '\u03C5',
        '\u03B0': '\u03C5',
        '\u03C9': '\u03C9',
        '\u03C2': '\u03C3'
    };


    ej.data.fnOperators = {
        equal: function (actual, expected, ignoreCase,ignoreAccent) {
            if (ignoreAccent) {
                actual = ej.pvt.ignoreDiacritics(actual);
                expected = ej.pvt.ignoreDiacritics(expected);
            }
            if (ignoreCase)
                return toLowerCase(actual) == toLowerCase(expected);

            return actual == expected;
        },
        notequal: function (actual, expected, ignoreCase,ignoreAccent) {
            if (ignoreAccent) {
                actual = ej.pvt.ignoreDiacritics(actual);
                expected = ej.pvt.ignoreDiacritics(expected);
            }
            return !ej.data.fnOperators.equal(actual, expected, ignoreCase);
        },
		notin: function (actual, expected, ignoreCase) {
			for(var i = 0; i < expected.length; i++) 
				if(ej.data.fnOperators.notequal(actual, expected[i], ignoreCase) == false) return false;
            return true;
        },
        lessthan: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) < toLowerCase(expected);

            return actual < expected;
        },
        greaterthan: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) > toLowerCase(expected);

            return actual > expected;
        },
        lessthanorequal: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) <= toLowerCase(expected);

            return actual <= expected;
        },
        greaterthanorequal: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) >= toLowerCase(expected);

            return actual >= expected;
        },
        contains: function (actual, expected, ignoreCase,ignoreAccent) {
            if (ignoreAccent) {
                actual = ej.pvt.ignoreDiacritics(actual);
                expected = ej.pvt.ignoreDiacritics(expected);
            }
            if (ignoreCase)
                return !isNull(actual) && !isNull(expected) && toLowerCase(actual).indexOf(toLowerCase(expected)) != -1;

            return !isNull(actual) && !isNull(expected) && actual.toString().indexOf(expected) != -1;
        },
		notcontains: function (actual, expected, ignoreCase,ignoreAccent) {
            if (ignoreAccent) {
                actual = ej.pvt.ignoreDiacritics(actual);
                expected = ej.pvt.ignoreDiacritics(expected);
            }
			 return !ej.data.fnOperators.contains(actual, expected, ignoreCase);
		},
        notnull: function (actual) {
            return actual !== null;
        },
        isnull: function (actual) {
            return actual === null;
        },
        startswith: function (actual, expected, ignoreCase,ignoreAccent) {
            if (ignoreAccent) {
                actual = ej.pvt.ignoreDiacritics(actual);
                expected = ej.pvt.ignoreDiacritics(expected);
            }
            if (ignoreCase)
                return actual && expected && toLowerCase(actual).startsWith(toLowerCase(expected));

            return actual && expected && actual.startsWith(expected);
        },
        endswith: function (actual, expected, ignoreCase,ignoreAccent) {
            if (ignoreAccent) {
                actual = ej.pvt.ignoreDiacritics(actual);
                expected = ej.pvt.ignoreDiacritics(expected);
            }
            if (ignoreCase)
                return actual && expected && toLowerCase(actual).endsWith(toLowerCase(expected));

            return actual && expected && actual.endsWith(expected);
        },
		all: function (actual, expected, ignoreCase ) {
			for(var i = 0; i < expected.length; i++)
				if (ej.data.fnOperators[this.operator](actual, expected[i], ignoreCase) == false) return false;
            return true;
		},
		any: function (actual, expected, ignoreCase ) {
			for(var i = 0; i < expected.length; i++)
				if (ej.data.fnOperators[this.operator](actual, expected[i], ignoreCase) == true) return true;
            return false;
		},
        processSymbols: function (operator) {
            var fnName = ej.data.operatorSymbols[operator];
            if (fnName) {
                var fn = ej.data.fnOperators[fnName];
                if (fn) return fn;
            }

            return throwError("Query - Process Operator : Invalid operator");
        },

        processOperator: function (operator) {
            var fn = ej.data.fnOperators[operator];
            if (fn) return fn;
            return ej.data.fnOperators.processSymbols(operator);
        }
    };

    ej.data.fnOperators["in"] = function (actual, expected, ignoreCase) {
        for(var i = 0; i < expected.length; i++)
            if (ej.data.fnOperators.equal(actual, expected[i], ignoreCase) == true) return true;
        return false;
    };

    ej.NotifierArray = function (array) {
        if (!instance(this, ej.NotifierArray))
            return new ej.NotifierArray(array);

        this.array = array;

        this._events = $({});
        this._isDirty = false;

        return this;
    };

    ej.NotifierArray.prototype = {
        on: function (eventName, handler) {
            this._events.on(eventName, handler);
        },
        off: function (eventName, handler) {
            this._events.off(eventName, handler);
        },
        push: function (item) {
            var ret;

            if (instance(item, Array))
                ret = [].push.apply(this.array, item);
            else
                ret = this.array.push(item);

            this._raise("add", { item: item, index: this.length() - 1 });

            return ret;
        },
        pop: function () {
            var ret = this.array.pop();

            this._raise("remove", { item: ret, index: this.length() - 1 });

            return ret;
        },
        addAt: function (index, item) {
            this.array.splice(index, 0, item);

            this._raise("add", { item: item, index: index });

            return item;
        },
        removeAt: function (index) {
            var ret = this.array.splice(index, 1)[0];

            this._raise("remove", { item: ret, index: index });

            return ret;
        },
        remove: function (item) {
            var index = this.array.indexOf(item);

            if (index > -1) {
                this.array.splice(index, 1);
                this._raise("remove", { item: item, index: index });
            }

            return index;
        },
        length: function () {
            return this.array.length;
        },
        _raise: function (e, args) {
            this._events.triggerHandler($.extend({ type: e }, args));
            this._events.triggerHandler({ type: "all", name: e, args: args });
        },
        toArray: function () {
            return this.array;
        }
    };

    $.extend(ej, ej.dataUtil);

    // For IE8
    Array.prototype.forEach = Array.prototype.forEach || function (fn, scope) {
        for (var i = 0, len = this.length; i < len; ++i) {
            fn.call(scope, this[i], i, this);
        }
    };

    Array.prototype.indexOf = Array.prototype.indexOf || function (searchElement) {
        var len = this.length;

        if (len === 0) return -1;

        for (var i = 0; i < len; i++) {
            if (i in this && this[i] === searchElement)
                return i;
        }
        return -1;
    };

    Array.prototype.filter = Array.prototype.filter || function (fn) {
        if (typeof fn != "function")
            throw new TypeError();

        var res = [];
        var thisp = arguments[1] || this;
        for (var i = 0; i < this.length; i++) {
            var val = this[i]; // in case fun mutates this
            if (fn.call(thisp, val, i, this))
                res.push(val);
        }

        return res;
    };

    String.prototype.endsWith = String.prototype.endsWith || function (key) {
        return this.slice(-key.length) === key;
    };

    String.prototype.startsWith = String.prototype.startsWith || function (key) {
        return this.slice(0, key.length) === key;
    };

    if (!ej.support) ej.support = {};
    ej.support.stableSort = function () {
        var res = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16].sort(function () { return 0; });
		for(var i = 0; i < 17; i++){
		    if(i !== res[i]) return false;
		}
        return true;
    }();
    ej.support.cors = $.support.cors;

    if (!$.support.cors && window.XDomainRequest) {
        var httpRegEx = /^https?:\/\//i;
        var getOrPostRegEx = /^get|post$/i;
        var sameSchemeRegEx = new RegExp('^' + location.protocol, 'i');
        var xmlRegEx = /\/xml/i;

        // ajaxTransport exists in jQuery 1.5+
        $.ajaxTransport('text html xml json', function (options, userOptions, jqXHR) {
            // XDomainRequests must be: asynchronous, GET or POST methods, HTTP or HTTPS protocol, and same scheme as calling page
            if (options.crossDomain && options.async && getOrPostRegEx.test(options.type) && httpRegEx.test(userOptions.url) && sameSchemeRegEx.test(userOptions.url)) {
                var xdr = null;
                var userType = (userOptions.dataType || '').toLowerCase();
                return {
                    send: function (headers, complete) {
                        xdr = new XDomainRequest();
                        if (/^\d+$/.test(userOptions.timeout)) {
                            xdr.timeout = userOptions.timeout;
                        }
                        xdr.ontimeout = function () {
                            complete(500, 'timeout');
                        };
                        xdr.onload = function () {
                            var allResponseHeaders = 'Content-Length: ' + xdr.responseText.length + '\r\nContent-Type: ' + xdr.contentType;
                            var status = {
                                code: 200,
                                message: 'success'
                            };
                            var responses = {
                                text: xdr.responseText
                            };

                            try {
                                if (userType === 'json') {
                                    try {
                                        responses.json = JSON.parse(xdr.responseText);
                                    } catch (e) {
                                        status.code = 500;
                                        status.message = 'parseerror';
                                        //throw 'Invalid JSON: ' + xdr.responseText;
                                    }
                                } else if ((userType === 'xml') || ((userType !== 'text') && xmlRegEx.test(xdr.contentType))) {
                                    var doc = new ActiveXObject('Microsoft.XMLDOM');
                                    doc.async = false;
                                    try {
                                        doc.loadXML(xdr.responseText);
                                    } catch (e) {
                                        doc = undefined;
                                    }
                                    if (!doc || !doc.documentElement || doc.getElementsByTagName('parsererror').length) {
                                        status.code = 500;
                                        status.message = 'parseerror';
                                        throw 'Invalid XML: ' + xdr.responseText;
                                    }
                                    responses.xml = doc;
                                }
                            } catch (parseMessage) {
                                throw parseMessage;
                            } finally {
                                complete(status.code, status.message, responses, allResponseHeaders);
                            }
                        };
                        xdr.onerror = function () {
                            complete(500, 'error', {
                                text: xdr.responseText
                            });
                        };
						if(navigator.userAgent.indexOf("MSIE 9.0") != -1)
							xdr.onprogress = function() {};
                        xdr.open(options.type, options.url);
                        xdr.send(userOptions.data);
                        //xdr.send();
                    },
                    abort: function () {
                        if (xdr) {
                            xdr.abort();
                        }
                    }
                };
            }
        });
    }

    $.support.cors = true;

    ej.sortOrder = {
        Ascending: "ascending",
        Descending: "descending"
    };

    // privates
    ej.pvt.consts = {
        GROUPGUID: "{271bbba0-1ee7}",
        complexPropertyMerge: "_"
    };

    // private utils
    var nextTick = function (fn, context) {
        if (context) fn = $proxy(fn, context);
        (window.setImmediate || window.setTimeout)(fn, 0);
    };

    ej.support.enableLocalizedSort = false;

    var stableSort = function (ds, field, comparer, queries) {
        if (ej.support.stableSort) {
            if(!ej.support.enableLocalizedSort && typeof ej.pvt.getObject(field, ds[0] || {}) == "string" 
                && (comparer === ej.pvt.fnAscending || comparer === ej.pvt.fnDescending)
                && queries.filter(function(e){return e.fn === "onSortBy";}).length === 1)
                return fastSort(ds, field, comparer === ej.pvt.fnDescending);
            return ds.sort(ej.pvt.fnGetComparer(field, comparer));
        }
        return ej.mergeSort(ds, field, comparer);
    };
    var getColFormat = function (field, query) {
        var grpQuery = $.grep(query, function (args) { return args.fn == "onGroup" });
        for (var grp = 0; grp < grpQuery.length; grp++) {
            if (ej.getObject("fieldName", grpQuery[grp].e) == field) {
                return ej.getObject("fn", grpQuery[grp].e);
            }
        }
    };
    var fastSort = function(ds, field, isDesc){
        var old = Object.prototype.toString;
        Object.prototype.toString = (field.indexOf('.') === -1) ? function(){
            return this[field];
        }:function(){
            return ej.pvt.getObject(field, this);
        };
        ds = ds.sort();
        Object.prototype.toString = old;
        if(isDesc)
            ds.reverse();
    }

    var toLowerCase = function (val) {
        return val ? val.toLowerCase ? val.toLowerCase() : val.toString().toLowerCase() : (val === 0 || val === false) ? val.toString() : "";
    };

    var getVal = function (array, field, index) {
        return field ? ej.pvt.getObject(field, array[index]) : array[index];
    };

    var isHtmlElement = function (e) {
        return typeof HTMLElement === "object" ? e instanceof HTMLElement :
            e && e.nodeType === 1 && typeof e === "object" && typeof e.nodeName === "string";
    };

    var instance = function (obj, element) {
        return obj instanceof element;
    };

    var getTableModel = function (name, result, dm, computed) {
        return function (tName) {
            if (typeof tName === "object") {
                computed = tName;
                tName = null;
            }
            return new ej.TableModel(tName || name, result, dm, computed);
        };
    };

    var getKnockoutModel = function (result) {
        return function (computedObservables, ko) {
            ko = ko || window.ko;

            if (!ko) throwError("Knockout is undefined");

            var model, koModels = [], prop, ob;
            for (var i = 0; i < result.length; i++) {
                model = {};
                for (prop in result[i]) {
                    if (!prop.startsWith("_"))
                        model[prop] = ko.observable(result[i][prop]);
                }
                for (prop in computedObservables) {
                    ob = computedObservables[prop];

                    if ($.isPlainObject(ob)) {
                        if (!ob.owner) ob.owner = model;
                        ob = ko.computed(ob);
                    } else
                        ob = ko.computed(ob, model);

                    model[prop] = ob;
                }
                koModels.push(model);
            }

            return ko.observableArray(koModels);
        };
    };

    var uidIndex = 0;
    var getUid = function (prefix) {
        uidIndex += 1;
        return prefix + uidIndex;
    };

    ej.getGuid = function (prefix) {
        var hexs = '0123456789abcdef', rand;
        return (prefix || "") + '00000000-0000-4000-0000-000000000000'.replace(/0/g, function (val, i) {
            if ("crypto" in window && "getRandomValues" in crypto) {
                var arr = new Uint8Array(1)
                window.crypto.getRandomValues(arr);
                rand = arr[0] % 16|0
            }
            else rand = Math.random() * 16 | 0;
            return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];
        });
    };

    var proxy = function (fn, context) {
        return function () {
            var args = [].slice.call(arguments, 0);
            args.push(this);

            return fn.apply(context || this, args);
        };
    };

    var $proxy = function (fn, context, arg) {
        if ('bind' in fn)
            return arg ? fn.bind(context, arg) : fn.bind(context);

        return function () {
            var args = arg ? [arg] : []; args.push.apply(args, arguments);
            return fn.apply(context || this, args);
        };
    };

    ej.merge = function (first, second) {
        if (!first || !second) return;

        Array.prototype.push.apply(first, second);
    };

    var isNull = function (val) {
        return val === undefined || val === null;
    };

    var throwError = function (er) {
        try {
            throw new Error(er);
        } catch (e) {
            throw e.message + "\n" + e.stack;
        }
    };

})(window.jQuery, window.Syncfusion, window.document);;
/**
* @fileOverview Plugin provides support to display calendar within your web page and allows to pick the date.
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejDatePicker", "ej.DatePicker", {

        element: null,
        _rootCss: "e-datepicker",

        model: null,
        validTags: ["input", "div", "span"],
        _setFirst: false,
        _addToPersist: ["value"],
        _cancelValue: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true
        },


        defaults: {

            dayHeaderFormat: "min",

            showPopupButton: true,

            enableAnimation: true,

            showFooter: true,

            displayInline: false,

            htmlAttributes: {},

            dateFormat: '',

            watermarkText: "Select date",

            value: null,
            minDate: new Date("01/01/1900"),

            maxDate: new Date("12/31/2099"),

            startLevel: "month",

            depthLevel: "",

            cssClass: "",

            startDay: -1,

            stepMonths: 1,

            locale: "en-US",

            showOtherMonths: true,

            enableStrictMode: false,

            enablePersistence: false,

            enabled: true,

            width: "",

            height: "",

            enableRTL: false,

            showRoundedCorner: false,

            headerFormat: 'MMMM yyyy',

            buttonText: 'Today',

            readOnly: false,

            specialDates: null,

            fields: {

                date: "date",

                tooltip: "tooltip",

                iconClass: "iconClass",

                cssClass: "cssClass"
            },

            showTooltip: true,

            showDisabledRange: true,

            highlightSection: "none",

            highlightWeekend: false,

            validationRules: null,

            validationMessage: null,
            validationMessages: null,

            allowEdit: true,

            tooltipFormat: "ddd MMM dd yyyy",

            allowDrillDown: true,

            blackoutDates: [],

            beforeDateCreate: null,

            open: null,

            close: null,

            select: null,

            change: null,

            focusIn: null,

            focusOut: null,

            beforeOpen: null,

            beforeClose: null,

            navigate: null,

            create: null,

            destroy: null,

            weekNumber: false,

            timeZone: true

        },


        dataTypes: {
            startDay: "number",
            stepMonths: "number",
            showOtherMonths: "boolean",
            enableStrictMode: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            displayInline: "boolean",
            showPopupButton: "boolean",
            locale: "string",
            readOnly: "boolean",
            cssClass: "string",
            dateFormat: "string",
            watermarkText: "string",
            headerFormat: "string",
            buttonText: "string",
            specialDates: "data",
            showTooltip: "boolean",
            highlightSection: "enum",
            highlightWeekend: "boolean",
            enableAnimation: "boolean",
            validationRules: "data",
            validationMessage: "data",
            validationMessages: "data",
            htmlAttributes: "data",
            tooltipFormat: "string",
            allowEdit: "boolean",
            allowDrillDown: "boolean",
            weekNumber: "boolean"

        },

        _renderPopup: function () {
            this.sfCalendar = ej.buildTag('div.e-datepicker e-popup e-widget ' + this.model.cssClass + ' e-calendar ' + (this.model.specialDates ? (this.model.specialDates[0][this._mapField._icon] ? 'e-icons ' : '') : ''), "", {}, { id: (this._id ? 'e-' + this._id : "") }).attr({ 'aria-hidden': 'true' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                     .insertBefore(this.element);
            if (this.model.displayInline && !this.element.is("input"))
                this.sfCalendar.addClass('e-inline');
            this.popup = this.sfCalendar;
            if (!ej.isTouchDevice()) this.sfCalendar.addClass('e-ntouch');
            this._setRestrictDateState(this.model.showDisabledRange);
            this._createCalender();
            this._setDisplayInline(this.model.displayInline);
            this._resizeCalender();
            this._setRTL(this.model.enableRTL);
            this._setRoundedCorner(this.model.showRoundedCorner);
            this._wireCalendarEvents();
        },

        _setModel: function (jsondata) {
            
            var callRefresh = false, start = false, validate = false;
            for (var key in jsondata) {
				if(key != "showPopupButton" && key != "width" && key != "dateFormat" && key != "height" && key != "readOnly" && key != "allowEdit" && key != "enabled" && key != "watermarkText" && key != "htmlAttributes" && key != "validationMessages" && key != "validationRules"){
					if (ej.isNullOrUndefined(this.sfCalendar)) this._renderPopup();
				}
                switch (key) {
                    case "dayHeaderFormat":
                        this.model.dayHeaderFormat = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "weekNumber":
                        this.model.weekNumber = jsondata[key];
                        this._refreshDatepicker();
                        break;
                    case "showPopupButton":
                        this._renderDateIcon(jsondata[key], true);
                        break;
                    case "displayInline":
                        if (!jsondata[key]) this._bindDateButton();
                        this._setDisplayInline(jsondata[key]);
                        if (!this.model.allowEdit && !jsondata[key] && this._isInputBox)
                            this.element.on("mousedown", $.proxy(this._showDatePopUp, this));
                        break;
                    case "value":
                        if (ej.isPlainObject(jsondata[key])) jsondata[key] = null;
                        if (ej.isNullOrUndefined(jsondata["minDate"]) && ej.isNullOrUndefined(jsondata["maxDate"])) {
                            this._setDateValue(jsondata[key]);
                            if (this._specificFormat())
                                this._stopRefresh = true;
                            jsondata[key] = this.model.value;
                        }
                        else
                            this._updateDateValue(jsondata[key]);
                        if (this.model.value && this.sfCalendar) {
                            $(this.element).attr("aria-activedescendant", $(this.sfCalendar.find(".e-active")).attr("id"));
                        } else {
                            $(this.element).removeAttr("aria-activedescendant");
                        }
                        validate = callRefresh = start = true;
                        break;
                    case "specialDates":
                        this.model.specialDates = jsondata[key];
                        this._createSpecialDateObject();
                        callRefresh = start = true;
                        break;
                    case "fields":
                        this.model.fields = jsondata[key];
                        this._mapField = this._getMapper();
                        callRefresh = start = true;
                        break;
                    case "showTooltip":
                        this.model.showTooltip = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "highlightWeekend":
                        this.model.highlightWeekend = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "highlightSection":
                        this.model.highlightSection = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "dateFormat":
                        this.model.dateFormat = jsondata[key];
                        this._ensureValue();
                        break;
                    case "minDate":
                        this._setMinDate(jsondata[key]);
                        jsondata[key] = this.model.minDate;
                        this._ensureValue();
                        validate = callRefresh = start = true;
                        break;
                    case "maxDate":
                        this._setMaxDate(jsondata[key]);
                        jsondata[key] = this.model.maxDate;
                        this._ensureValue();
                        validate = callRefresh = start = true;
                        break;
                    case "locale":
                        this.model.locale = jsondata[key];
                        this.model.startDay = ((ej.isNullOrUndefined(this._options.startDay)) && (this.model.startDay === this.culture.calendar.firstDay))
                            ? -1 : (this._options.startDay === this.defaults.startDay) ? -1 : this.model.startDay;
                        this.model.dateFormat = ((ej.isNullOrUndefined(this._options.dateFormat)) && (this.model.dateFormat === this.culture.calendar.patterns.d))
                            ? '' : this.model.dateFormat;
                        this._setCulture(jsondata[key]);
                        if (this.model.value) this._setDateValue(this.model.value);
                        jsondata[key] = this.model.locale;
                        callRefresh = start = true;
                        break;
                    case "showOtherMonths":
                        this.model.showOtherMonths = jsondata[key];
                        this._otherMonthsVisibility();
                        break;
                    case "enableStrictMode":
                        this.model.enableStrictMode = jsondata[key];
                        validate = callRefresh = start = true;
                        break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessages = null;
                        }
                        this.model.validationRules = jsondata[key];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessages":
                        this.model.validationMessages = jsondata[key];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessages = jsondata[key];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "readOnly":
                        this.model.readOnly = jsondata[key];
                        this._disbleMaualInput();
                        break;
                    case "width":
                        this._setWidth(jsondata[key]);
                        break;
                    case "height":
                        this._setHeight(jsondata[key]);
                        break;
                    case "cssClass":
                        this._setSkin(jsondata[key]);
                        break;
                    case "enableRTL":
                        this._setRTL(jsondata[key]);
                        break;
                    case "showRoundedCorner":
                        this._setRoundedCorner(jsondata[key]);
                        break;
                    case "enabled":
                        if (!jsondata[key]) this.disable();
                        else this.enable();
                        break;
                    case "buttonText":
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options["buttonText"] = this.model.buttonText = jsondata[key];
                        this._localizedLabels.buttonText = this.model.buttonText;
                        this._setFooterText(jsondata[key]);
                        break;
                    case "showFooter":
                        this._enableFooter(jsondata[key]);
                        break;
                    case "watermarkText":
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options["watermarkText"] = this.model.watermarkText = jsondata[key];
                        this._localizedLabels.watermarkText = this.model.watermarkText;
                        this._setWaterMark();
                        break;
                    case "startDay":
                        var initial = jsondata[key];
                        if (parseInt(jsondata[key]) < 0 || parseInt(jsondata[key]) > 6) {
                            jsondata[key] = this.culture.calendar.firstDay;
                            initial = -1;
                        }
                        this.model.startDay = jsondata[key];
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options["startDay"] = initial;
                        callRefresh = start = true;
                        break;
                    case "startLevel":
                        this.model.startLevel = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "headerFormat":
                        this.model.headerFormat = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "depthLevel":
                        this.model.depthLevel = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "allowEdit": this._changeEditable(jsondata[key]); break;
                    case "tooltipFormat":
                        this.model.tooltipFormat = jsondata[key];
                        callRefresh = start = true;
                        break;
                    case "allowDrillDown":
                        this._allowQuickPick(jsondata[key]);
                        callRefresh = start = true;
                        break;
                    case "showDisabledRange":
                        this._setRestrictDateState(jsondata[key]);
                        break;
                    case "blackoutDates":
                        this.model.blackoutDates = jsondata[key];
                        this._initDisableObj(this.model.blackoutDates);
                        callRefresh = start = true;
                        break;
                }
            }
            if (validate) {
                this._validateMinMaxDate();
                jsondata["value"] = this.model.value;
                jsondata["maxDate"] = this.model.maxDate;
                jsondata["minDate"] = this.model.minDate;
            }
            this._setWaterMark();

            if (callRefresh && (this.isValidState || this.model.displayInline))
                this._refreshDatepicker();
            if (start && !this._startNavigate) this._startLevel(this.model.startLevel);
            this._triggerChangeEvent();
            this._checkErrorClass();
        },
        observables: ["value"],

        _destroy: function () {
            if (this.model.displayInline)
                $(window).off("resize", $.proxy(this._OnWindowResize, this));
            if (this._isOpen)
                this.hide();
            this.sfCalendar && this.sfCalendar.remove();
            if (this.wrapper) {
                this.element.insertAfter(this.wrapper);
                this.wrapper.remove();
            }
            this.element.removeClass('e-datepicker e-input');
            this.element.removeAttr('aria-atomic aria-live aria-activedescendant aria-expanded role placeholder tabindex' );
            !this._cloneElement.hasAttribute("name") && this.element.removeAttr("name");
        },

        _init: function (options) {
            this._options = options;
            this._cloneElement = this.element.clone();
            this._dt_drilldown = false;
            this._ISORegex();
            this._initDisableObj(this.model.blackoutDates);
            this.animation = {
                open: { duration: 200 },
                close: { duration: 100 }
            };
            this._animating = false;
            this._isInputBox = this._isInputBox();
            this._startNavigate = false;
            this._keyboardInteraction = false;
            this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
            this._checkAttribute();
            this._setValues();
            this._createDatePicker();
            if (!ej.isNullOrUndefined(options) && !ej.isNullOrUndefined(options.validationMessage))
                this.model.validationMessages = this.model.validationMessage;
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
            if (options && options.value != undefined && options.value != this.element.val()) {
                this._trigger("_change", { value: this.element.val() });
            }
        },

        _ISORegex: function () {
            this._tokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            // complex case for iso 8601 regex only
            this._extISORegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._basicISORegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._isISODate = /[T]/,
            this._numberRegex = {
                2: /\d\d?/,
                4: /^\d{4}/,
                "z": /Z|[+-]\d\d(?::?\d\d)?/gi,
                "t": /T/,
                "-": /\-/,
                ":": /:/
            };
            this._zeroRegex = /Z|[+-]\d\d(?::?\d\d)?/;
            this._dates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                // YYYYMM is NOT allowed by the standard
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/]
            ];

            // iso time formats and regexes
            this._times = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/]
            ];
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            this.element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            var name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessages)
                            ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },

        setValue: function (date){
            if(typeof(date) === "string") date = new Date(date);
            var prevValue = this.model.value;
            this._setDateValue(date);
            this._checkErrorClass();
            if(prevValue != this.model.value)this._triggerChangeEvent();
        },
        _checkAttribute: function () {
            var attr = ["min", "max", "readonly", "disabled"], propName = ["minDate", "maxDate", "readOnly", "enabled"], value, propValue;
            for (var i = 0; i < attr.length; i++) {
                value = this.element.attr(attr[i]); propValue = propName[i];
                if (!ej.isNullOrUndefined(value)) {
                    if (ej.isNullOrUndefined(this._options))
                        this.model[propValue] = ((propValue != "enabled") && (propValue != "readOnly")) ? new Date(value) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
                    else if (ej.isNullOrUndefined(this._options[propValue]))
                        this.model[propValue] = ((propValue != "enabled") && (propValue != "readOnly")) ? new Date(value) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
                }
            }
        },
        _updateDateValue: function (value) {
            var date = this._checkDateObject(value);
            if (date != null) {
                this.isValidState = true;
                if (date == "") {
                    this.element.val("");
                    this.model.value = null;
                } else {
                    this.model.value = date;
                    this._preTxtValue = this.element.val(this._formatter(this.model.value, this.model.dateFormat));
                }
            }
            else {
                (typeof date === "string" && this.model.enableStrictMode) ? this.element.val(value) : this.element.val("");
                this.model.value = null;
                this.isValidState = (this.element.val() == "") ? true : false;
            }
            this._removeWatermark();
        },
        _ensureValue: function () {
            var dateValue = this._parseDate(this.element.val(), this.model.dateFormat);
            if (this.model.value)
                this._setDateValue(this.model.value);
            else if (dateValue)
                this._setDateValue(dateValue);
        },
        _changeEditable: function (bool) {
            var action = bool ? "_on" : "_off";
            if (this.element.is(":input")) {
                if (bool) {
                    if (!this.model.readOnly) this.element.attr("readonly", false);
                    this.element.off("mousedown", $.proxy(this._showDatePopUp, this));
                }
                else {
                    if (!this.model.readOnly) this.element.attr("readonly", "readonly");
                    if (!this.model.displayInline) this.element.on("mousedown", $.proxy(this._showDatePopUp, this));
                }
                this[action](this.element, "blur", this._onFocusOut);
                this[action](this.element, "focus", this._onFocusIn);
                this[action](this.element, "keydown", this._onKeyDown);
            }
        },
        _allowQuickPick: function (value) {
            $('.e-datepicker-headertext', this.sfCalendar)[value ? "on" : "off"]("click", $.proxy(this._forwardNavHandler, this));
        },
        _setRestrictDateState: function (value) {
            var action = value ? "addClass" : "removeClass";
            this.sfCalendar[action]("e-dp-restrict-show");
        },
        _setValues: function () {
            this.Date = new Date();
            this._id = this.element[0].id;
            this.isValidState = true;
            this._setCulture(this.model.locale);
            this._setMinDate(this.model.minDate);
            this._setMaxDate(this.model.maxDate);
            this._calendarDate = this._zeroTime(new Date());
            if (this.model.startDay < 0 || this.model.startDay > 6) this.model.startDay = 0;
            this.Date.firstDayOfWeek = this.model.startDay;
            this.Date.fullYearStart = '20';
            this._showHeader = true;
            if (ej.isNullOrUndefined(this.model.value) && this.element[0].value != "")
                this.model.value = this.element[0].value;
            this._validateMinMaxDate();
            this._dateValue = new Date(this._calendarDate.toString());
            this._isIE7 = this._checkIE7();
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            this._isIE9 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "9.0") ? true : false;
            // this variable is set to true in DateTimePicker control
            this._getInternalEvents = false;
            this._flag = true;
            this._ejHLWeekEnd = false;
            this._isOpen = false;
            this._prevDate = null;
            this._preValue = null;
            this._isFocused = false;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
                else if (keyName == "disabled") proxy.disable();
                else if (keyName == "readOnly") proxy.model.readOnly = true;
                else if (keyName == "style") proxy.wrapper.attr(key, value);
                else if (keyName == "id") {
                    proxy.wrapper.attr(key, value + "_wrapper");
                    proxy.element.attr(key, value);
                }
                else if (ej.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
                else proxy.wrapper.attr(key, value);

            });
        },
        _createDatePicker: function () {
            this._createWrapper();
            this._wireEvents();
            if (this.model.displayInline) {
                this.show();
            }
            if (this.model.enableRTL) this._setRTL(true);
            if (this.model.showRoundedCorner) this._setRoundedCorner(true);
        },
        _checkNameAttr: function () {
            if (!this.element.attr("name") && this._isInputBox)
                this.element.attr("name", this.element[0].id);
            if (this.model.displayInline && !this._isInputBox)
                this._hiddenInput.attr("name", this.element[0].id);
        },
        _createWrapper: function () {
            this._getMapper();
            if (this.model.specialDates)
                this._createSpecialDateObject();
			if(!this.element[0].hasAttribute("tabindex"))this.element.attr("tabindex","0");
            if (this._isInputBox) {
			    this.element.addClass("e-input").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'aria-expanded':'false','role':'combobox' });
                this.wrapper = ej.buildTag("span.e-datewidget e-widget " + this.model.cssClass);
                this.wrapper.attr("style", this.element.attr("style"));
                this.element.removeAttr('style');
                if (!ej.isTouchDevice()) this.wrapper.addClass('e-ntouch');
                this.innerWrapper = ej.buildTag("span.e-in-wrap e-box e-padding");
                this.wrapper.append(this.innerWrapper).insertBefore(this.element);
                this.innerWrapper.append(this.element);
                this.dateIcon = ej.buildTag("span.e-select#" + this._id + "-img", "", {}, (this._isIE8) ? { 'unselectable': 'on' } : {})
                    .append(ej.buildTag("span.e-icon e-calendar", "", {}, { 'aria-label': 'Select' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})).insertAfter(this.element);
            }
            if (!this._isSupport || (this.model.displayInline && !this._isInputBox)) {
                this._hiddenInput = ej.buildTag("input.e-input e-placeholder ", "", {}, { type: "text" }).insertAfter(this.element);
                if (this._isInputBox) this._hiddenInput.val(this._localizedLabels.watermarkText);
                this._hiddenInput.css("display", "block");
                var proxy = this;
                $(this._hiddenInput).focus(function () {
                    proxy.element.focus();
                });
            }
            this._checkNameAttr();
            if (!this.model.height) this.model.height = this.element.attr("height"); if (!this.model.width) this.model.width = this.element.attr("width");
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
            if (this._id)
                $("#e-" + this._id).remove();
            this._setDateValue(this.model.value);
            this._preValue = this._parseDate(this.element.val(), this.model.dateFormat);
            this._setWaterMark();
            this._dateValue = new Date(this._calendarDate.toString());
            if (this.model.displayInline) this._renderPopup();
            else if (this._isInputBox) this._renderDateIcon(this.model.showPopupButton, false);
            if (this.model.readOnly) this._disbleMaualInput();
            if (!this.model.enabled) this.disable();
            else if (this.model.enabled && $(this.element).hasClass("e-disable")) this.enable();
            this._layoutChanged();
            this._checkErrorClass();
            this._addAttr(this.model.htmlAttributes);
        },
        _isInputBox: function () {
			if(this.element.is("input[type=date]")) this.element.attr('type',"text");
            return (this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type')));
        },

        _renderDateIcon: function (bool, reRender) {
            if (reRender && this.model.showPopupButton == bool) return;
            if (!bool && this.dateIcon) {
                this._bindInputEvent();
                this.dateIcon.css('display', 'none');
                this.innerWrapper.removeClass('e-padding');
            }
            else {
                if (this.innerWrapper) {
                    this.innerWrapper.addClass('e-padding');
                    this.dateIcon.css('display', 'block');
                }
                if (!this.model.displayInline)
                    this._bindDateButton();
            }
            this.model.showPopupButton = bool;
        },

        _resizeCalender: function () {
            if ((this.model.dayHeaderFormat == "short") || (this.model.dayHeaderFormat == "min") || (this.model.dayHeaderFormat == "none"))
                this.sfCalendar.removeClass("e-headerlong");
            else if (this.model.dayHeaderFormat == "long") {
                this.sfCalendar.addClass("e-headerlong");
            }
        },

        _setWidth: function (value) {
            if (value) {
                if (this.wrapper) this.wrapper.width(value);
                else this.element.width(value);
            }
            else
                this.model.width = this.wrapper ? this.wrapper.outerWidth() : this.element.width();
        },
        _setHeight: function (value) {
            if (value) {
                if (this.wrapper) this.wrapper.height(value);
                else this.element.height(value);
            }
            else
                this.model.height = this.wrapper ? this.wrapper.outerHeight() : this.element.height();
            if (this._isIE7) this.element.height(this.innerWrapper.height());
        },
        _setRTL: function (isRTL) {
            if (isRTL) {
                if (this.wrapper) {
                    this.wrapper.addClass("e-rtl");
                }
                this.sfCalendar && this.sfCalendar.addClass("e-rtl");
            }
            else {
                if (this.wrapper) {
                    this.wrapper.removeClass("e-rtl");
                }
                this.sfCalendar && this.sfCalendar.removeClass("e-rtl");
            }
        },
        _setRoundedCorner: function (bool) {
            if (bool) {
                if (this.innerWrapper)
                    this.innerWrapper.addClass("e-corner");
                this.sfCalendar && this.sfCalendar.addClass("e-corner");
            }
            else {
                if (this.innerWrapper)
                    this.innerWrapper.removeClass("e-corner");
                this.sfCalendar && this.sfCalendar.removeClass("e-corner");
            }
        },

        _refreshDatepicker: function () {
            if (this._stopRefresh) {
                this._stopRefresh = false
                return;
            }
            var _currentVal = this.element.val();
            var dateSelection = false;
            if (this.model.navigate !== null) {
                if (this.sfCalendar.find('table')[0] !== undefined) {
                    var sfCalendarClassName = this.sfCalendar.find('table')[0].className;
                    if (sfCalendarClassName === 'e-dp-viewdays' && +this._dateValue !== +this._calendarDate) {
                        this._calendarDate = this._dateValue;
                        dateSelection = true;
                    } else if (sfCalendarClassName !== 'e-dp-viewdays') {
                        if (sfCalendarClassName === 'e-dp-viewmonths' || sfCalendarClassName === 'e-dp-viewyears' || sfCalendarClassName === 'e-dp-viewallyears') {
                            this._startNavigate = true;
                        }
                        return;
                    }
                }
            }
            //  For checking the year maximum range....
            if (this._specificFormat() && this._formatter(this._preValue, this.model.dateFormat, this.model.locale) != _currentVal)
                var currentValue = this._parseDate(_currentVal, true);
            else var currentValue = this._parseDate(_currentVal);
            currentValue = this._validateYearValue(currentValue);
            if (this.model.navigate !== null && currentValue !== null && currentValue !== this._calendarDate) currentValue = this._calendarDate;
            this._setDateValue(currentValue);
            if (this._specificFormat() && this._compareDate(this.model.value, this._calendarDate))
                this.element.val(_currentVal)
            $(".e-datepicker-headertext", this.sfCalendar).text(this._formatter(this._calendarDate, this.model.headerFormat));
            this._resizeCalender();
            this._dateValue = new Date(this._calendarDate.toString());
            this._hoverDate = this._calendarDate.getDate() - 1;
            this._renderCalendar(this, this._dateValue);
            if (dateSelection && _currentVal === '') this._addFocus('day', this._hoverDate);
            this._setFooterText(this._localizedLabels.buttonText);
            this._enableFooter(this.model.showFooter);
            this._layoutChanged();
        },

        _removeCurrentMonthFromHideDate: function() {
            var rowLength = this.sfCalendar.find('tbody.e-datepicker-days tr').length;
            for (var i = 0; i < rowLength; i++) {
                var cellLength = this.sfCalendar.find('tbody.e-datepicker-days tr')[i].cells.length;
                for (var j = 0; j < cellLength; j++) {
                    var hideDay = $(this.sfCalendar.find('tbody.e-datepicker-days tr')[i].cells[j]);
                    if (hideDay.hasClass('e-hidedate')) {
                        if(hideDay.hasClass('current-month')) hideDay.removeClass('current-month');
                    }
                }
            }
        },
        _validateYearValue: function (value) {
            if (value != null) {
                var twoDigitYearMax = ej.preferredCulture(this.model.locale).calendars.standard.twoDigitYearMax;
                twoDigitYearMax = typeof twoDigitYearMax === "string" ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;
                if (this._calendarDate.getFullYear() - value.getFullYear() == 100) {
                    if (this._calendarDate.getFullYear() > twoDigitYearMax)
                        value.setFullYear(this._calendarDate.getFullYear())
                }
            }
            return value;
        },
        _setFooterText: function (footerText) {
            $('.e-footer-text', this.sfCalendar).html(footerText);
        },
        _setSkin: function (skin) {
            if (this.wrapper) {
                this.wrapper.removeClass(this.model.cssClass);
                this.wrapper.addClass(skin);
            }
            else {
                this.element.removeClass(this.model.cssClass);
                this.element.addClass(skin);
            }
            this.sfCalendar.removeClass(this.model.cssClass);
            this.sfCalendar.addClass(skin);
        },
        _setDisplayInline: function (isDisplayInline) {
            this.model.displayInline = isDisplayInline;
            if (isDisplayInline && this._isInputBox) {
                this.sfCalendar.insertAfter(this.wrapper);
                this._setDatePickerPosition();
            }
            else if (isDisplayInline) {
                this.element.append(this.sfCalendar);
                if (!this._isSupport || !this._isInputBox) this._hiddenInput.css("display", "none");
            }
            else {
                this.sfCalendar.css('display', 'none');
                $('body').append(this.sfCalendar);
                this._isOpen = false;
            }
            if (isDisplayInline) {
                this.show();
                this._off(this.dateIcon, "mousedown", this._showDatePopUp);
                this.element.off("mousedown", $.proxy(this._showDatePopUp, this));
            }

        },

        _disbleMaualInput: function () {
            if (this.model.readOnly) {
                $(this.element).attr("readonly", "readonly");
                if (!this.model.displayInline) this.hide();
            }
            else if (this.model.allowEdit)
                $(this.element).prop("readonly", false);

        },
        _checkDateObject: function (date, val) {
            if (!date || (typeof JSON === "object" && JSON.stringify(date) === "{}")) return date = null;
            else if (!(date instanceof Date)) {
                if (this._specificFormat())
                    var val = this._parseDate(date, true);
                else
                    var val = this._parseDate(date, val);
                date = val ? val : (val = this._checkJSONString(date)) ? val : null;
            }
            if (!isNaN(Date.parse(date))) {
                this._dateValue = this._calendarDate = this._zeroTime(date)
                if (this._validateDate(date))
                    return this._dateValue;
            }
            return null;
        },
        _checkJSONString: function(date) {
            // Validate the string value
            if (!isNaN(Date.parse(date))) {
                if ((new Date(date).toJSON() === date) || (new Date(date).toDateString() === date) || (new Date(date).toGMTString() === date) ||
                    (new Date(date).toISOString() === date) || (new Date(date).toLocaleString() === date) ||
                    (new Date(date).toString() === date) || (new Date(date).toUTCString() === date)) {
                    if (this.model.timeZone) {
                        return new Date(new Date(date).getTime() + (ej.serverTimezoneOffset * 60 * 60 * 1000));
                    } else {
                        if (date.match(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i) && date.match(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i).length > 0) {
                            date = date.split('T')
                            date = date[0];
                            return ej.parseDate(date, "yyyy-MM-dd", this.model.locale);
                        }
                    }
                } else if (typeof date == "string") return this._dateFromISO(date);
            }else if(this.model.enableStrictMode && ej.parseDate(date, this.model.value, this.model.locale) == null) return null; 
			else if (this._extISORegex.exec(date) || this._basicISORegex.exec(date)) return this._dateFromISO(date);
        },
        _dateFromISO: function (date) {
            var result = this._isISODate.test(date) && (this._extISORegex.exec(date) || this._basicISORegex.exec(date)), dateFormat = '', timeFormat = '', zeroFormat = '', format;
            if (result) {
                for (var i = 0; i < this._dates.length; i++) {
                    if (this._dates[i][1].exec(result[1])) {
                        dateFormat = this._dates[i][0];
                        break;
                    }
                }
                if (result[3]) {
                    for (var k = 0; k < this._times.length; k++) {
                        if (this._times[k][1].exec(result[3])) {
                            // result[2] should be 'T' (time) or space
                            timeFormat = (result[2] || ' ') + this._times[k][0];
                            break;
                        }
                    }
                }
                if (result[4]) if (this._zeroRegex.exec(result[4])) zeroFormat = 'Z';
                format = dateFormat + timeFormat + zeroFormat;
                var token = format.match(this._tokens), input, val = [], literal, char;
                for (var j = 0; j < token.length; j++) {
                    var str = token[j];
                    literal = this._checkLiteral(token[j]);
                    var rg = this._numberRegex[literal ? token[j].toLowerCase() : str.length] || new RegExp('^\\d{1,' + str.length + '}');
                    input = date.match(rg);
                    if (input) {
                        if (date.substr(0, date.indexOf(input)) >= 0 && !literal) token[j].indexOf('M') >= 0 ? val.push(parseInt(input[0]) - 1) : val.push(parseInt(input[0]));
                        date = date.slice(date.indexOf(input[0]) + input[0].length);
                    }
                }
                //if you want to get the value in UTC format use the "new Date(Date.UTC.apply(null, val)"
                //return the date object value as exact as given input value
                //new Date(year, month, day, hour, minute, seconds);
                return result[4] == "Z" ? new Date(Date.UTC.apply(null, val)) : new Date(val[0], val[1], val[2], val[3], val[4], val[5]);
            }
            else {
                return new Date(date + "");
            }
        },
        _checkLiteral: function (str) {
            var char = str.toLowerCase();
            return (char == 't' || char == 'z' || char == ':' || char == '-') ? true : false;
        },
        _checkInstanceType: function (date) {
            date = this._stringToObject(date);
            if (!date) return null;
            else if (!(date instanceof Date)) {
                date = this._parseDate(date);
            }
            if (!isNaN(Date.parse(date))) return this._zeroTime(date);
            return null;
        },
        _stringToObject: function (value) {
            if (typeof value === "string") {
                var val = ej.parseDate(value, this.model.dateFormat, this.model.locale);
                value = (val != null) ? val : new Date(value);
            }
            return value;
        },
        _validateMinMaxDate: function () {
            var dateChange = false, valueExceed = false;
            if (this.model.maxDate < this.model.minDate) this.model.minDate = this.model.maxDate;
            if (!this.model.enableStrictMode) {
                if (this.model.value) {
                    if (this.model.value < this.model.minDate) {
                        this._calendarDate = this.model.value = this.model.minDate;
                        dateChange = true;
                    }
                    else if (this.model.value > this.model.maxDate) {
                        this._calendarDate = this.model.value = this.model.maxDate;
                        dateChange = true;
                    }
                }
                else {
                    this.element.val("");
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
                this.isValidState = true;
            }
            else {
                if (this.model.value) {
                    if (this.model.value < this.model.minDate) {
                        this._calendarDate = this.model.minDate;
                        this.isValidState = false;
                        valueExceed = true;
                    }
                    else if (this.model.value > this.model.maxDate) {
                        this._calendarDate = this.model.maxDate;
                        this.isValidState = false;
                        valueExceed = true;
                    }
                    else this.isValidState = true;
                }
                else {
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
            }
            if (dateChange) this.element.val(this._formatter(this.model.value, this.model.dateFormat));
            if (valueExceed && this._getInternalEvents) this._trigger("outOfRange");
        },
        _setCulture: function (culture) {
            this.culture = ej.preferredCulture(culture);
            if (this.culture) {
                this.model.locale = this.culture.name == "en" ? "en-US" : this.culture.name;
                this.Date.dayNames = this.culture.calendar.days.names;
                this.Date.dayNamesMin = this.culture.calendar.days.namesShort;
                this.Date.abbrDayNames = this.culture.calendar.days.namesAbbr;
                this.Date.monthNames = this.culture.calendar.months.names;
                this.Date.abbrMonthNames = this.culture.calendar.months.namesAbbr;
                this.Date.format = this.culture.calendar.patterns.d;
                if (this.model.dateFormat == '') this.model.dateFormat = this.culture.calendar.patterns.d;
                if (this.model.startDay == -1) this.model.startDay = this.culture.calendar.firstDay;
            }
            this._separator = this._getSeparator();
            this._localizedLabels = this._getLocalizedLabels();

            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
                if (!ej.isNullOrUndefined(this._options.buttonText))
                    this._localizedLabels.buttonText = this._options.buttonText;
            }
            this._localizedLabelToModel();
        },

        _localizedLabelToModel: function () {
            this.model.watermarkText = this._localizedLabels.watermarkText;
            this.model.buttonText = this._localizedLabels.buttonText;
        },

        _setWaterMark: function () {
            if (this.element != null && this.element.hasClass("e-input")) {
                if (this._localizedLabels.watermarkText && this.element.val() == "") {
                    this.isValidState = true;
                    this._checkErrorClass();
                }
                if ((!this._isSupport) && this.element.val() == "") {
                    this._hiddenInput.css("display", "block").val(this._localizedLabels.watermarkText);
                }
                else {
                    $(this.element).attr("placeholder", this._localizedLabels.watermarkText);
                }
                return true;
            }
        },

        _setDatePickerPosition: function () {
            if (!this.model.displayInline || this._isInputBox) {
                var elementObj = this.element.is('input') ? this.wrapper : this.element;
                var pos = this._getOffset(elementObj), winLeftWidth, winRightWidth,
                winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
                winTopHeight = pos.top - $(document).scrollTop(),
                popupHeight = this.sfCalendar.outerHeight(),
                popupWidth = this.sfCalendar.outerWidth(),
                left = pos.left,
                totalHeight = elementObj.outerHeight(),
                border = (totalHeight - elementObj.height()) / 2,
                maxZ = this._getZindexPartial(), popupmargin = 3,
                topPos = (popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin; // popupmargin denotes space b/w the element and the popup.
                winLeftWidth = $(document).scrollLeft() + $(window).width() - left;
                winRightWidth = $(document).scrollLeft() + left + elementObj.width();
                if (this.model.enableRTL || popupWidth > winLeftWidth && (popupWidth < left + elementObj.outerWidth()) && !ej.isNullOrUndefined(this.wrapper))
                    left += this.wrapper.width() - this.sfCalendar.width();
                if (popupWidth > winRightWidth) left = pos.left;
                this.sfCalendar.css({
                    "left": left + "px",
                    "top": topPos + "px",
                    "z-index": maxZ
                });
            }
        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.sfCalendar);
        },

        _setMinDate: function (d) {
            this.model.minDate = this._checkInstanceType(d);
            if (!this.model.minDate) {
                this.model.minDate = (new Date('11/31/1899'));
            }
        },

        _setMaxDate: function (d) {
            this.model.maxDate = this._checkInstanceType(d);
            if (!this.model.maxDate) {
                this.model.maxDate = (new Date('12/31/2099')); // using the JS Date.parse function which expects mm/dd/yyyy
            }
        },
        _setDateValue: function (date, val) {
            var newDate = this._checkDateObject(date, val);
            if (newDate != null) {
                this.isValidState = true;
                this.model.value = new Date(newDate);
                if (!this.model.displayInline)
                    this.wrapper.addClass('e-valid');
                this._validateMinMaxDate();
                this._preTxtValue = this.element.val(this._formatter(this.model.value, this.model.dateFormat));
            }
            else {
                if (date instanceof Date) {
                    this._validateMinMaxDate();
                    date = this._formatter(date, this.model.dateFormat);
                }
                (this.model.enableStrictMode) ? this.element.val(date) : this.element.val(null);
                this.model.value = null; //updating model value as null to avoid the recursive call to this method
                if (!this.model.displayInline)
                    this.wrapper.removeClass('e-valid');
                this._triggerChangeEvent();
                this.isValidState = (this.element.val() == "" || ej.isNullOrUndefined(this.element.val())) ? true : false;
            }
            this._removeWatermark();
        },
        _updateInputVal: function () {
            var val = this._validateValue();
            if ((val != null || !this.model.enableStrictMode) && this.sfCalendar && this.sfCalendar.find('.e-datepicker-days').is(':visible'))
                this._refreshDatepicker();
        },
        _validateInputVal: function () {
            var val = this._validateValue();
            if (val != null) {
                if (!this.model.enableStrictMode) {
                    if (val <= this.model.maxDate && val >= this.model.minDate)
                        this.isValidState = true;
                    else {
                        this.model.value = null;
                        this.isValidState = true;
                    }
                }
            }
        },

        _validateValue: function () {
            if (this._specificFormat() && this.element.val() != this._formatter(this._preValue, this.model.dateFormat, this.model.locale))
                var value = this._parseDate(this.element.val(), true);
            else var value = this._parseDate(this.element.val());
            return this._validateYearValue(value);
        },
        _getSeparator: function () {
            var formats;
            if (this.culture) {
                formats = this.culture.calendar.patterns.d;
            }
            else formats = this.model.dateFormat;
            var regex = new RegExp("^[a-zA-Z0-9]+$");
            for (var i = 0; i < formats.length; i++) {
                if (!regex.test(formats[i])) return formats[i];
            }
        },
        _checkIE7: function () {
            if (navigator.appName == 'Microsoft Internet Explorer') {
                var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"), version = -1;
                if (re.exec(navigator.userAgent) != null)
                    version = parseFloat(RegExp.$1);
                if (version >= 7 && version < 8) return true;
            }
            return false;
        },
        _isValidDate: function (dateObj) {
            return dateObj && typeof dateObj.getTime === "function" && isFinite(dateObj.getTime());
        },

        //Date formatter - Convert date object to specific date format
        _formatter: function (date, format) {
            var newFormat = this._checkFormat(format);
            return ej.format(date, newFormat, this.model.locale);
        },
        _parseDate: function (date, type) {
            var newFormat = this._checkFormat(this.model.dateFormat);
            var DateValue = date;
            if ((this._specificFormat()) && DateValue != undefined && date != "" && type != true && !(ej.format(ej.parseDate(DateValue, newFormat, this.model.locale), this.model.dateFormat, this.model.locale) == DateValue)) {
                return this._dateValue;
            }
            else return ej.parseDate(date, newFormat, this.model.locale);
        },
        _checkFormat: function (format) {
            var proxy = this;
            var dateFormatRegExp = this._regExp();
            return format.replace(dateFormatRegExp, function (match) {
                match = match === "/" ? ej.preferredCulture(proxy.model.locale).calendars.standard['/'] !== "/" ? "'/'" : match : match;
                return match;
            });
        },
        _regExp: function () {
            return /\/dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|gg|g|"[^"]*"|'[^']*'|[/]/g;
        },

        isLeapYear: function (year) {
            return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;
        },
        //Sets the time component of this Date to zero for cleaner, easier comparison of dates where time is not relevant.
        _zeroTime: function (date) {
            var newDate = typeof date === "string" ? this._parseDate(date) : new Date(date);
            newDate.setMilliseconds(0);
            newDate.setSeconds(0);
            newDate.setMinutes(0);
            newDate.setHours(0);
            return newDate;
        },

        _getDaysInMonth: function (date) {
            return [31, (this.isLeapYear(date) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][date.getMonth()];
        },

        _addDays: function (d, number) {
            d.setDate(d.getDate() + number);
            return d;
        },

        _addYears: function (d, number) {
            d.setFullYear(d.getFullYear() + number);
            return d;
        },

        _addMonths: function (d, number) {
            var tempDatedateMonth = d.getDate();
            d.setMonth(d.getMonth() + number);
            if (tempDatedateMonth > d.getDate())
                this._addDays(d, -d.getDate());
            return d;
        },
        //Checks if the day is a weekend day (Sat or Sun).
        _isWeekend: function (date) {
            return date.getDay() == 0 || date.getDay() == 6;
        },

        _isSpecialDates: function (dates) {
            if (this.model.specialDates) {
                for (var i = 0; i < this.model.specialDates.length; i++) {
                    if (this.model.specialDates[i] && this.model.specialDates[i][this._mapField._date]) {
                        if (dates.getDate() == this.model.specialDates[i][this._mapField._date].getDate() && dates.getMonth() == this.model.specialDates[i][this._mapField._date].getMonth() && dates.getFullYear() == this.model.specialDates[i][this._mapField._date].getFullYear()) {
                            this._getIndex = i;
                            return true;
                        }
                    }
                }
            }
            return false;
        },
        _getMapper: function () {
            var mapper = this.model.fields;
            this._mapField = {};
            this._mapField["_date"] = (mapper && mapper.date) ? mapper["date"] : "date";
            this._mapField["_tooltip"] = (mapper && mapper.tooltip) ? mapper["tooltip"] : "tooltip";
            this._mapField["_icon"] = (mapper && mapper.iconClass) ? mapper["iconClass"] : "iconClass";
            this._mapField["_custom"] = (mapper && mapper.cssClass) ? mapper["cssClass"] : "cssClass";
        },
        _createSpecialDateObject: function () {
            for (var i = 0; i < this.model.specialDates.length; i++) {
                this.model.specialDates[i][this._mapField._date] = this._checkInstanceType(this.model.specialDates[i][this._mapField._date]);
            }
        },

        _getMonthName: function (abbreviated, date) {
            return abbreviated ? this.Date.abbrMonthNames[date.getMonth()] : this.Date.monthNames[date.getMonth()];
        },



        _displayNewMonth: function (m, y) {
            this._setDisplayedMonth(this.displayedMonth + m, this.displayedYear + y, true);
            return false;
        },

        _setDisplayedMonth: function (m, y, rerender) {
            if (this.model.minDate == undefined || this.model.maxDate == undefined) {
                return;
            }
            var s = new Date(this.model.minDate.getTime());
            s.setDate(1);
            var e = new Date(this.model.maxDate.getTime());
            e.setDate(1);

            var t;
            if ((!m && !y) || (isNaN(m) && isNaN(y))) {

                t = this._zeroTime(new Date());
                t.setDate(1);
            } else if (isNaN(m)) {

                t = new Date(y, this.displayedMonth, 1);
            } else if (isNaN(y)) {

                t = new Date(this.displayedYear, m, 1);
            } else {

                t = new Date(y, m, 1);
            }

            if (t.getTime() < s.getTime()) {
                t = s;
            } else if (t.getTime() > e.getTime()) {
                t = e;
            }
            var oldMonth = this.displayedMonth;
            var oldYear = this.displayedYear;
            this.displayedMonth = t.getMonth();
            this.displayedYear = t.getFullYear();
            var tempDate = t;
            if (rerender && (this.displayedMonth != oldMonth || this.displayedYear != oldYear)) {
                this._renderCalendar(this, tempDate);
                this._dateValue = tempDate;
                this._trigger("monthChanged", [this.displayedMonth, this.displayedYear]);
            }
        },
        _clearSelected: function () {
            this.numSelected = 0;
            if (!ej.isNullOrUndefined(this.sfCalendar)) {
            if (this.model.highlightSection == "week") {
                $('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false).parent().removeClass('e-selected-week');
            }
            else if (this.model.highlightSection == "month") {
                $('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false).parent().parent().removeClass('e-selected-month');
            }
            else if (this.model.highlightSection == "workdays") {
                $('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false).parent().removeClass('e-work-week');
            }
            else
                $('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false);
            }

        },
        _addSelected: function () {
            if (this.model.highlightSection == "week") {
                $('td.e-active', this.sfCalendar).parent().addClass('e-selected-week');
            }
            else if (this.model.highlightSection == "month") {
                $('td.e-active, this.sfCalendar').parent().parent().addClass('e-selected-month');
            }
            else if (this.model.highlightSection == "workdays") {
                $('td.e-active', this.sfCalendar).parent().addClass('e-work-week');
            }
        },

        _hideOtherMonths: function (sfCalendar) {
            $('td.other-month', sfCalendar).css("visibility", "hidden");
        },
        _showOtherMonths: function (sfCalendar) {
            $('td.other-month', sfCalendar).css({ 'visibility': 'visible' });
        },
        _otherMonthsVisibility: function () {
            if (this.model.showOtherMonths)
                this._showOtherMonths(this.sfCalendar);
            else
                this._hideOtherMonths(this.sfCalendar);
        },

        _createCalender: function () {
            ej.buildTag("div.e-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                    .append(ej.buildTag("span.e-prev").append(ej.buildTag('a.e-icon e-arrow-sans-left').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-datepicker-headertext").text(this._formatter(this._calendarDate, this.model.headerFormat)).attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .append(ej.buildTag("span.e-next").append(ej.buildTag('a.e-icon e-arrow-sans-right').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .appendTo(this.sfCalendar);
            this._enableHeader(this._showHeader);
            var table = ej.buildTag("table.e-dp-viewdays", "", {}).data("e-table", "data").attr({ 'role': 'grid'}).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this.sfCalendar.append(table);
            this._renderCalendar(this);
            this._startLevel(this.model.startLevel);
            ej.buildTag("div.e-footer")
                .append(ej.buildTag("span.e-footer-icon"))
                .append(ej.buildTag("span.e-footer-text"))
                .appendTo(this.sfCalendar);
            $('.e-footer-text', this.sfCalendar).html(this._localizedLabels.buttonText);
            this._enableFooter(this.model.showFooter);
        },
        _enableHeader: function (show) {
            if (show) $(".e-header", this.sfCalendar).show();
            else $(".e-header", this.sfCalendar).hide();
        },
        _enableFooter: function (show) {
            if (show) $('.e-footer', this.sfCalendar).show();
            else $('.e-footer', this.sfCalendar).hide();
            this._todayBtnDisable();
        },
        _todayBtnDisable: function () {
            var today = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 0, 0, 0);
            if (!(+this.model.minDate <= +today && +this.model.maxDate >= +today)) {
                $('.e-footer', this.sfCalendar).addClass('e-footer-disable')
            } else {
                $('.e-footer', this.sfCalendar).removeClass('e-footer-disable')
            }
        },
        _checkArrows: function (min, max) {
            this._preArrowCondition(min, this.model.minDate.getFullYear());
            this._nextArrowCondition(max, this.model.maxDate.getFullYear());
        },
        _checkDateArrows: function () {
            this._preArrowCondition(this._tempMinDate, this.model.minDate);
            this._nextArrowCondition(this._tempMaxDate, this.model.maxDate);
        },
        _preArrowCondition: function (val1, val2) {
            if (val1 <= val2) this.sfCalendar.find(".e-prev").addClass("e-disable").attr({ "aria-disabled": true });
            else this.sfCalendar.find(".e-prev").removeClass("e-disable").attr({ "aria-disabled": false });
        },
        _nextArrowCondition: function (val1, val2) {
            if (val1 >= val2) this.sfCalendar.find(".e-next").addClass("e-disable").attr({ "aria-disabled": true });
            else this.sfCalendar.find(".e-next").removeClass("e-disable").attr({ "aria-disabled": false });
        },

        _previousNextHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled || $(event.target).hasClass("e-disable") || $(event.currentTarget).hasClass("e-disable")) return false;
            event.preventDefault();
            this._keyboardInteraction = false;
            var prevTable = $("table", this.sfCalendar), navFrom;
            navFrom = this._navigateFrom(prevTable);
            var element = ($(event.target).is('a')) ? $(event.target.parentNode) : $(event.target);
            var progress = element.hasClass('e-prev') ? true : false;
            this._processNextPrevDate(progress);
            var currentTable = $("table", this.sfCalendar), tClassName, navTo;
            tClassName = currentTable.get(0).className;
            switch (tClassName) {
                case "e-dp-viewdays": navTo = "month"; break;
                case "e-dp-viewmonths": navTo = "year"; break;
                case "e-dp-viewyears": navTo = "decade"; break;
                case "e-dp-viewallyears": navTo = "century"; break;
            }
            this._trigger("navigate", { date: this._dateValue, value: this._formatter(this._dateValue, this.model.dateFormat), navigateTo: navTo, navigateFrom: navFrom });
        },
        _processNextPrevDate: function (progress) {
            if (this._DRPdisableFade) {
                var s = new Date(this.sfCalendar.find("td.current-month").attr("data-date"));
                this._dateValue = s;
            }
            if (progress && this.sfCalendar.find(".e-arrow-sans-left").hasClass("e-disable")) return false;
            else if (!progress && this.sfCalendar.find(".e-arrow-sans-right").hasClass("e-disable")) return false;

            var currentTable = $("table", this.sfCalendar), temp;
            var tClassName = currentTable.get(0).className;
            switch (tClassName) {
                case 'e-dp-viewdays':
                    var step = this.model.stepMonths;
                    if (progress) {
                        if (this._dateValue <= this.model.minDate) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (this._dateValue >= this.model.maxDate) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    this._addMonths(this._dateValue, (progress ? -step : step));
                    if (this._clickedDate)
                        this._calendarDate = this._clickedDate;
                    this._dateValue = this._dateValue < this.model.minDate ? new Date(this.model.minDate.toString()) : this._dateValue;
                    this._dateValue = this._dateValue > this.model.maxDate ? new Date(this.model.maxDate.toString()) : this._dateValue;
                    this._renderCalendar(this, this._dateValue);
                    if(this._keyboardInteraction) { 
                        this._trigger("navigate", { date: this._dateValue, value: this._formatter(this._dateValue, this.model.dateFormat)});
                        this._removeCurrentMonthFromHideDate();
                        this._keyboardInteraction = false;
                    }
                    $('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat));
                    this._addFocus('day', this._hoverDate);
                    var dateRange = this._findFirstLastDay(new Date(this._dateValue.toString()));
                    this._preArrowCondition(dateRange.firstDay, this.model.minDate);
                    this._nextArrowCondition(dateRange.lastDay, this.model.maxDate);
                    break;
                case 'e-dp-viewmonths':
                    var dateValue = this._dateValue;
                    dateValue.setFullYear($('.e-datepicker-headertext', this.sfCalendar).text())
                    if (progress) {
                        if (dateValue.getFullYear() <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (dateValue.getFullYear() >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    this._addYears(dateValue, (progress ? -1 : 1));
                    this._renderCalendar(this, dateValue);
                    temp = dateValue.getFullYear();
                    $('.e-datepicker-headertext', this.sfCalendar).text(temp);
                    $('tbody,tr.e-week-header', currentTable).not('.e-datepicker-months').hide();
                    $($(currentTable).find('.e-datepicker-months')).show();
                    this._addFocus('month', this._hoverMonth);
                    this._checkArrows(temp, temp);
                    break;
                case 'e-dp-viewyears':
                    var yearValue;
                    yearValue = this._dateValue
                    yearValue.setFullYear($(currentTable).find(".e-state-hover").text());
                    if (progress) {
                        if (parseInt(this.popup.find('td.e-year-first:first').text()) <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (parseInt($('td.e-year-last:first').prev().text()) >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    if (($(currentTable).find(".e-state-hover").hasClass('e-year-first') && progress) || ($(currentTable).find(".e-state-hover").hasClass('e-year-last') && !progress))
                        this._dateValue.setFullYear(yearValue.getFullYear());
                    else if (($(currentTable).find(".e-state-hover").hasClass('e-year-first') && !progress))
                        this._dateValue.setFullYear(yearValue.getFullYear() + 11);
                    else if (($(currentTable).find(".e-state-hover").hasClass('e-year-last') && progress))
                        this._dateValue.setFullYear(yearValue.getFullYear() - 11);
                    else
                        this._dateValue.setFullYear(yearValue.getFullYear() + (progress ? -10 : 10));
                    this._renderCalendar(this, this._dateValue);
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 10) + 1);
                    $(".e-datepicker-headertext", this.sfCalendar).text((setYear + 1) + ' - ' + (setYear + 10));
                    $('tbody,tr.e-week-header', currentTable).not('.e-datepicker-years').hide();
                    $($(currentTable).find('.e-datepicker-years')).show();
                    this._addFocus('year', this._hoverYear + (!($('.e-year-first.e-hidedate').length) ? 0 : -1));
                    this._checkArrows(setYear + 1, setYear + 10);
                    break;
                case 'e-dp-viewallyears':
                    var headYears;
                    if (progress) {
                        headYears = parseFloat($('td.e-allyear-first', currentTable.get(0)).text().split('-')[1]);
                        if (headYears <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        } else {
                            this._flag = true;
                        }

                    } else {
                        headYears = parseFloat($('td.e-allyear-last', currentTable.get(0)).prev().text().split('-')[1]);
                        if (headYears >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        } else
                            this._flag = true;
                    }
                    this._dateValue.setFullYear((!(this._lastHoveredYear) ? this._dateValue.getFullYear() : this._lastHoveredYear) + (progress ? -100 : 100));
                    this._lastHoveredYear = this._dateValue.getFullYear();
                    this._renderCalendar(this, this._dateValue);
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 100) + 1);
                    temp = parseFloat($('td.e-allyear-last', currentTable.get(0)).prev().text().split('-')[1]);
                    $('.e-datepicker-headertext', this.sfCalendar).text((setYear + 1) + ' - ' + temp);
                    $('tbody,tr.e-week-header', currentTable).not('.e-datepicker-allyears').hide();
                    $($(currentTable).find('.e-datepicker-allyears')).show();
                    this._addFocus('allyear', this._hoverAllYear + (!($('.e-allyear-first.e-hidedate').length) ? 0 : -1));
                    this._checkArrows(setYear + 1, temp);
                    break;
            }
            this._layoutChanged();
        },
        _addFocus: function (selection, index) {
            var cls = 'e-current-' + selection;
            if (selection == 'day') cls = 'current-month';
            var items = this.sfCalendar.find('tbody tr td.' + cls);
            if (selection == "month") {
                $(items).each(function (i, ele) {
                    if (parseInt($(ele).attr("data-index")) == parseInt(index)) {
                        index = i;
                        return;
                    }
                });
            }
            var cell = items[index];
            if (!cell) cell = items.last();
            this.sfCalendar.find('table td').removeClass("e-state-hover");
            if (!$(cell).hasClass('e-hidedate')) $(cell).addClass("e-state-hover");
            this._setActiveState(selection);
            return index;
        },
        _setActiveState: function (selection) {
            if (!(this.model.value instanceof Date)) return;
            var items = this.sfCalendar.find('tbody tr td.e-current-' + selection), cell, proxy = this;
            var indx = -1;
            switch (selection) {
                case "month":
                    if (this.model.value.getFullYear() === parseInt($('.e-text', this.sfCalendar).text())) {
                        $(items).each(function (i, ele) {
                            if (parseInt($(ele).attr("data-index")) == parseInt(proxy.model.value.getMonth())) {
                                indx = i;
                                return;
                            }
                        });
                    }
                    break;
                case "year":
                    var value = this.model.value.getFullYear();
                    $(items).each(function (i, ele) {
                        if (parseInt(ele.innerHTML) == parseInt(value)) {
                            indx = i;
                            return;
                        }
                    });
                    break;
                case "allyear":
                    var start = parseInt(this.model.value.getFullYear()) - ((parseInt(this.model.value.getFullYear()) % 10) + 1);
                    var active = (start + 1) + ' - ' + (start + 10);
                    $(items).each(function (i, ele) {
                        if (parseInt(ele.innerHTML) == parseInt(active)) {
                            indx = i;
                            return;
                        }
                    });
                    break;
            }
            cell = items[indx];
            if (cell) {
                this.sfCalendar.find('table td').removeClass("e-active");
                if (!$(cell).hasClass('e-hidedate'))
                    $(cell).addClass("e-active");
            }
        },
        _setFocusByName: function (name, value) {
            var allValues = this.sfCalendar.find('tbody tr td.e-current-' + name), index, cell;
            $(allValues).each(function (i, ele) {
                if (parseInt(ele.innerHTML) == parseInt(value)) {
                    index = i;
                    return;
                }
            });
            cell = allValues[index];
            if (!cell) cell = allValues.last();
            this.sfCalendar.find('table td').removeClass("e-state-hover");
            $(cell).addClass("e-state-hover");
            this._setActiveState(name);
            return index;
        },
        _getHeaderTxt: function () {
            return this.sfCalendar.find(".e-datepicker-headertext").text();
        },
        _findFirstLastDay: function (value) {
            var y = value.getFullYear(), m = value.getMonth();
            var firstDay = new Date(y, m, 1);
            var lastDay = new Date(y, m + 1, 0);
            return { firstDay: firstDay, lastDay: lastDay }
        },
        _forwardNavHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (event) event.preventDefault();

            var currentTable = $("table", this.sfCalendar);
            var tclassName = $("table", this.sfCalendar).get(0).className, proxy = this, headerTxt, navTo;
            var navFrom = this._navigateFrom(currentTable);
            switch (tclassName) {
                case 'e-dp-viewdays':
                    this._hoverMonth = this._getDateObj(currentTable.find(".e-state-hover")).getMonth() ||
                                this._getDateObj(currentTable.find(".e-active")).getMonth() || 0;
                    if (this._DRPdisableFade) {
                        this._renderCalendar(this, this._calendarDate);
                        $('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat));
                    }
                    this._startLevel("year"); navTo = "year";
                    this._addFocus('month', this._hoverMonth);
                    break;
                case 'e-dp-viewmonths':
                    headerTxt = this._getHeaderTxt();
                    this._startLevel("decade"); navTo = "decade";
                    this._hoverYear = this._setFocusByName('year', headerTxt);
                    break;
                case 'e-dp-viewyears':
                    headerTxt = this._getHeaderTxt();
                    this._startLevel("century"); navTo = "century";
                    this._hoverAllYear = this._setFocusByName('allyear', headerTxt);
                    break;
            }
            if (navFrom != "century") this._trigger("navigate", { date: this._dateValue, value: this._formatter(this._dateValue, this.model.dateFormat), navigateTo: navTo, navigateFrom: navFrom });
            this._layoutChanged();
        },
        _cellSelection: function () {
            var currentTable = $("table", this.sfCalendar);
            var tclassName = $("table", this.sfCalendar).get(0).className;
            switch (tclassName) {
                case 'e-dp-viewmonths':
                    this._hoverMonth = this._addFocus('month', this._dateValue.getMonth());
                    break;
                case 'e-dp-viewyears':
                    var dateValue = new Date(this._dateValue.toString());
                    // Navigate to Prev/Next year Calendar while selecting the first/last year in the calendar view.
                    this._navigationToPrevNext('year');
                    // Reasssign the old value
                    this._dateValue = dateValue;
                    this._hoverYear = this._setFocusByName('year', this._dateValue.getFullYear());
                    break;
                case 'e-dp-viewallyears':
                    var dateValue = new Date(this._dateValue.toString());
                    // Navigate to Prev/Next year Calendar while selecting the first/last year in the calendar view.
                    this._navigationToPrevNext('allyear');
                    // Reasssign the old value
                    this._dateValue = dateValue;
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 10) + 1);
                    this._hoverAllYear = this._setFocusByName('allyear', setYear + 1 + ' - ' + setYear + 10);
                    break;
            }
            this._layoutChanged();
        },
        _navigationToPrevNext: function (name) {
            var allValues = this.sfCalendar.find('tbody tr td.e-current-' + name), index, cell;
            var value = this._dateValue.getFullYear();
            $(allValues).each(function (i, ele) {
                if (parseInt(ele.innerHTML) == parseInt(value)) {
                    index = i;
                    return;
                }
            });
            cell = allValues[index];
            if (cell) {
                if ($(cell).hasClass('e-' + name + '-last'))
                    this._processNextPrevDate(false)
                else if ($(cell).hasClass('e-' + name + '-first'))
                    this._processNextPrevDate(true);
            }
        },
        _navigateFrom: function (prevTable) {
            var tPrevClassName = prevTable.get(0).className, navFrom;
            switch (tPrevClassName) {
                case "e-dp-viewdays": navFrom = "month"; break;
                case "e-dp-viewmonths": navFrom = "year"; break;
                case "e-dp-viewyears": navFrom = "decade"; break;
                case "e-dp-viewallyears": navFrom = "century"; break;
            }
            return navFrom;
        },
        _backwardNavHandler: function (event) {
            this._animating = true;
            if (this.model.readOnly || !this.model.enabled) return false;
            var element;
            if (event.type) {
                event.preventDefault();
                element = $(event.currentTarget);
            }
            else element = event;
            var cTable = $("table", this.sfCalendar), temp;
            var tclassName = $("table", this.sfCalendar).get(0).className, proxy = this, navTo;
            var navFrom = this._navigateFrom(cTable);
            switch (tclassName) {
                case 'e-dp-viewmonths':
                    cTable.removeClass("e-dp-viewmonths").addClass("e-dp-viewdays");
                    this._lastHoveredMonth = parseInt($(element).attr('data-index'));
                    this._dateValue = new Date(this._dateValue.getFullYear(), this._lastHoveredMonth, 1);
                    if (this._DRPdisableFade) this._trigger("_month_Loaded", { currentTarget: event.currentTarget });
                    this._renderCalendar(this, this._dateValue);
                    $('tbody', cTable).not('.e-datepicker-days,.e-week-header').hide();
                    $($(cTable).find('.e-datepicker-days,.e-week-header')).fadeIn("fast", function () {
                        proxy._addFocus('day', proxy._hoverDate || 0);
                        proxy._animating = false;
                    });
                    $('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat)); navTo = "month";
                    break;
                case 'e-dp-viewyears':
                    cTable.removeClass("e-dp-viewyears").addClass("e-dp-viewmonths");
                    this._lastHoveredYear = parseInt(element.text());
                    this._dateValue.setFullYear(this._lastHoveredYear);
                    this._renderCalendar(this, this._dateValue);
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-months').hide();
                    if (ej.isNullOrUndefined(this._hoverMonth) && !ej.isNullOrUndefined(this._dateValue)) this._hoverMonth = this._dateValue.getMonth();
                    $($(cTable).find('.e-datepicker-months')).fadeIn("fast", function () {
                        proxy._addFocus('month', proxy._hoverMonth || 0);
                        proxy._animating = false;
                    });
                    temp = element.text();
                    $('.e-datepicker-headertext', this.sfCalendar).text(temp);
                    this._checkArrows(temp, temp); navTo = "year";
                    break;
                case 'e-dp-viewallyears':
                    var headYears = element.text().split('-');
                    cTable.removeClass("e-dp-viewallyears").addClass("e-dp-viewyears");
                    if (headYears[0] < this.model.minDate.getFullYear()) headYears[0] = this.model.minDate.getFullYear().toString();
                    else if (headYears[0] > this.model.maxDate.getFullYear()) headYears[0] = this.model.maxDate.getFullYear().toString();
                    this._renderCalendar(this, (new Date(headYears[0], 0, 1)));
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-years').hide();
                    $($(cTable).find('.e-datepicker-years')).fadeIn("fast", function () {
                        proxy._addFocus('year', proxy._hoverYear || 0);
                        proxy._animating = false;
                    });
                    $('.e-datepicker-headertext', this.sfCalendar).text(headYears[0] + ' - ' + headYears[1]);
                    this._checkArrows(headYears[0], headYears[1]); navTo = "decade";
                    this._dateValue = new Date(this._dateValue.setFullYear(parseInt($.trim(headYears[0])) + ((!this._lastHoveredYear) ? this._dateValue.getFullYear() % 10 : this._lastHoveredYear % 10)));
                    break;
                default:
                    this._clearSelected();
                    this.sfCalendar.find('table td').removeClass("e-state-hover");
                    element.not('td.e-hidedate').addClass('e-active').attr('aria-selected', true);
                    this._addSelected();

                    this._hoverDate = this._getDateObj(element).getDate() - 1;
                    this._dateValue = new Date(element.attr('data-date'));
                    this._clickedDate = new Date(element.attr('data-date'));
                    this._animating = false;
                    break;
            }
            if (navFrom != "month") this._trigger("navigate", { date: this._dateValue, value: this._formatter(this._dateValue, this.model.dateFormat), navigateTo: navTo, navigateFrom: navFrom });
            this._layoutChanged();
        },

        _startLevel: function (start) {
            var cTable = $("table", this.sfCalendar);
            var headerText = $(".e-datepicker-headertext", this.sfCalendar), s, e;
            var dateValue = this._dateValue;
            switch (start) {
                case "decade":
                    cTable.removeClass("e-dp-viewallyears e-dp-viewmonths e-dp-viewdays").addClass("e-dp-viewyears");
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-years').hide();
                    $($(cTable).find('.e-datepicker-years')).show();
                    if (this.model.enableStrictMode && this._calendarDate < this._dateValue) dateValue = this._calendarDate;
                    else dateValue = dateValue;
                    var setYear = parseInt(dateValue.getFullYear()) - ((parseInt(dateValue.getFullYear()) % 10) + 1);
                    s = setYear + 1;
                    e = setYear + 10;
                    headerText.text(s + ' - ' + e);
                    this._checkArrows(s, e);
                    this._hoverYear = this._setFocusByName('year', dateValue.getFullYear());
                    break;
                case "century":
                    if (!(this._calendarDate < this._dateValue)) this._renderCalendar(this, dateValue);
                    cTable.removeClass("e-dp-viewyears e-dp-viewdays e-dp-viewmonths").addClass("e-dp-viewallyears");
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-allyears').hide();
                    $($(cTable).find('.e-datepicker-allyears')).show();
                    s = parseFloat($('td.e-allyear-first', cTable.get(0)).text().split('-')[1]) + 1;
                    e = parseFloat($('td.e-allyear-last', cTable.get(0)).prev().text().split('-')[1]);
                    var headYears = s + ' - ' + e;
                    headerText.text(headYears);
                    this._checkArrows(s, e);
                    var setYear = parseInt(dateValue.getFullYear()) - ((parseInt(dateValue.getFullYear()) % 10) + 1);
                    this._hoverAllYear = this._setFocusByName('allyear', (setYear + 1) + ' - ' + (setYear + 10));
                    break;
                case "year":
                    cTable.removeClass("e-dp-viewyears e-dp-viewallyears e-dp-viewdays").addClass("e-dp-viewmonths");
                    $('tbody,tr.e-week-header', cTable).hide();
                    $($(cTable).find('.e-datepicker-months')).show();
                    if (this.model.enableStrictMode && this._calendarDate < this._dateValue) s = this._calendarDate.getFullYear();
                    else s = dateValue.getFullYear();
                    headerText.text(s);
                    this._checkArrows(s, s);
                    this._hoverMonth = dateValue.getMonth();
                    this._addFocus('month', this._hoverMonth);
                    break;
                case "month":
                    cTable.removeClass("e-dp-viewyears e-dp-viewallyears e-dp-viewmonths").addClass("e-dp-viewdays ");
                    break;
            }
        },
        _depthLevel: function (depth) {
            var calendarTable = this.sfCalendar;
            switch (depth) {
                case "year":
                    $(calendarTable.find('.e-current-year,.e-current-allyear')).on("click", $.proxy(this._backwardNavHandler, this));
                    this._on($('.e-current-month', this.sfCalendar), "click", $.proxy(this._onDepthSelectHandler, this));
                    break;
                case "decade":
                    $(calendarTable.find('.e-current-allyear')).on("click", $.proxy(this._backwardNavHandler, this));
                    $('.e-current-year', this.sfCalendar).on("click", $.proxy(this._onDepthSelectHandler, this));
                    break;
                case "century":
                    $(calendarTable.find('.e-current-allyear')).on("click", $.proxy(this._onDepthSelectHandler, this));
                    break;
                case "month":
                    this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
                    this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
            }
        },
        _onDepthSelectHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if ($(e.target).hasClass("e-current-month"))
                this._dateValue = new Date(this._dateValue.setMonth(parseInt(e.target.attributes["data-index"].value)));
            else if ($(e.target).hasClass("e-current-year"))
                this._dateValue = new Date(this._dateValue.setFullYear(parseInt(e.target.innerHTML)));
            else if ($(e.target).hasClass("e-current-allyear"))
                this._dateValue = new Date(this._dateValue.setFullYear(parseInt(e.target.innerHTML)));
            this._onSetCancelDateHandler(e);
        },

        _datepickerMonths: function (tbody, calendarTable, currentDate) {
            var dc = function (a) {
                return document.createElement(a);
            };
            var month = 0;
            for (var i = 0; i < 3; i++) {
                var row = $(dc('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = $(dc('td'))
                        .addClass('e-current-month e-state-default')
                        .attr({ 'data-index': month }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                        .html(this.Date.abbrMonthNames[month++]);
                    if (currentDate.getFullYear() < this.model.minDate.getFullYear() || currentDate.getFullYear() > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-month');
                    }
                    else if ((currentDate.getFullYear() <= this.model.minDate.getFullYear() && month < this.model.minDate.getMonth() + 1) ||
                        (currentDate.getFullYear() >= this.model.maxDate.getFullYear() && month > this.model.maxDate.getMonth() + 1)) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-month');
                    }
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
            var s = currentDate.getFullYear();
            this._checkArrows(s, s);
        },

        _datepickerYears: function (tbody, calendarTable, currentYear) {
            var dc = function (a) {
                return document.createElement(a);
            };
            var Year = parseInt(currentYear) - ((parseInt(currentYear) % 10) + 1);
            var years = [];
            for (var j = 0; j < 12; j++) {
                years.push(Year + j);
            }
            var year = 0;
            for (var i = 0; i < 3; i++) {
                var row = $(dc('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = $(dc('td'));
                    td.attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    if (year == 0)
                        td.addClass('e-year-first e-current-year ');
                    else if (year == 11)
                        td.addClass('e-year-last e-current-year ');
                    else
                        td.addClass('e-current-year e-state-default');
                    if (years[year] < this.model.minDate.getFullYear() || years[year] > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-year');
                    }
                    td.html(years[year++]);
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
            this._checkArrows(years[0], years[years.length]);
        },

        _datepickerAllYears: function (tbody, calendarTable, currentYear) {
            var Year = parseInt(currentYear) - ((parseInt(currentYear) % 100) + 10);
            var headYear = Year;
            var years = [], newline = this._isIE8 || this._isIE9 ? "" : "\n";

            for (var j = 0; j < 12; j++) {
                years.push(parseInt(Year) + " -" + newline + parseInt(Year + 9));
                Year = Year + 10;
            }
            var year = 0;
            for (var i = 0; i < 3; i++) {
                var row = $(document.createElement('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = $(document.createElement('td'));
                    td.attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    if (year == 0)
                        td.addClass('e-allyear-first e-current-allyear ');
                    else if (year == 11)
                        td.addClass('e-allyear-last e-current-allyear ');
                    else
                        td.addClass('e-current-allyear e-state-default');
                    if (parseInt(years[year].split('-\n')[1]) < this.model.minDate.getFullYear() || parseInt(years[year].split('-\n')[0]) > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate');
                        td.removeClass('e-current-allyear');
                    }
                    td.html(years[year++]);
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
        },
        _renderHeader: function (dpObject) {
            var thead = $(document.createElement('thead'));
            var cultureObj = ej.preferredCulture(this.model.locale).calendars.standard.days;
            if (dpObject.model.dayHeaderFormat != "none") {
                var headRow = ej.buildTag("tr.e-week-header").attr({ 'role': 'row' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                if (this.model.weekNumber == true) {
                    var WeekCulture = ej.preferredCulture(this.model.locale).calendars.standard.week;
                    var day = WeekCulture.name;
                    var headerday;
                    if (dpObject.model.dayHeaderFormat == "short")
                        headerday = WeekCulture.nameAbbr;
                    else if (dpObject.model.dayHeaderFormat == "long") headerday = week;
                    else headerday = WeekCulture.nameShort;
                    var tr = ej.buildTag("th", "", {}, { 'scope': 'col', 'abbr': day, 'data-date': day, 'title': this._formatter(day, "dddd") }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                        .html(headerday);
                    headRow.append(tr);
                }
                for (var i = this.Date.firstDayOfWeek; i < this.Date.firstDayOfWeek + 7; i++) {
                    var weekday = i % 7;
                    var day = cultureObj.names[weekday];
                    var headerday;
                    if (dpObject.model.dayHeaderFormat == "short")
                        headerday = cultureObj.namesAbbr[weekday];
                    else if (dpObject.model.dayHeaderFormat == "long") headerday = day;
                    else headerday = cultureObj.namesShort[weekday];
                    var th = ej.buildTag("th", "", {}, { 'scope': 'col', 'abbr': day, 'data-date': day, 'title': this._formatter(day, "dddd"), 'class': (weekday == 0 || weekday == 6 ? 'e-week-end' : 'e-week-day') }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                            .html(headerday);
                    headRow.append(th);
                }
            };
            return thead.append(headRow);
        },

        _renderCalendar: function (dpObject, date) {
            var proxy = this, today;
            dpObject = $.extend({}, ej.DatePicker.prototype.defaults, dpObject);
            this.Date.firstDayOfWeek = this.model.startDay;
            if (date) today = date;
            else if (this._calendarDate) today = this._calendarDate;
            else today = proxy._zeroTime(new Date());
            var calendarTable = $('table', this.sfCalendar);
            calendarTable.empty();

            calendarTable.append(this._renderHeader(dpObject));

            var tbody = ej.buildTag('tbody.e-datepicker-allyears', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._datepickerAllYears(tbody, calendarTable, today.getFullYear());

            tbody = ej.buildTag("tbody.e-datepicker-years", "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._datepickerYears(tbody, calendarTable, today.getFullYear());
            var month = dpObject.model.month == undefined ? today.getMonth() : dpObject.model.month;
            var year = dpObject.model.year || today.getFullYear();
            var currentDate = (new Date(year, month, 1, 0, 0, 0));
            var firstDayOffset = this.Date.firstDayOfWeek - currentDate.getDay() + 1;
            if (firstDayOffset > 1) firstDayOffset -= 7;
            var weeksToDraw = Math.ceil(((-1 * firstDayOffset + 1) + this._getDaysInMonth(currentDate)) / 7);
            this._addDays(currentDate, (firstDayOffset - 1));
            var newdate = proxy._zeroTime(new Date());
            var selected = this._calendarDate;
            tbody = ej.buildTag('tbody.e-datepicker-months', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            this._datepickerMonths(tbody, calendarTable, today);

            tbody = ej.buildTag('tbody.e-datepicker-days', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var w = 0, _first = true, _last = true;
            while (w++ < weeksToDraw) {
                var r = jQuery(document.createElement('tr')).attr({'role':'row'});
                if (this.model.weekNumber == true)
                {
                    var week = this._weekDate(currentDate);
                    week = $(document.createElement('td')).attr({}).addClass('e-weeknumber').html(week)
                    r.append(week);
                }
                for (var i = 0; i < 7; i++) {
                    var thisMonth = currentDate.getMonth() == month;
                    var checkSpecialDate = this._isSpecialDates(currentDate);
                    var disable = this._checkDisableRange(currentDate);
                    var index = this._getIndex;
                    var d = $(document.createElement('td')).
                        html(checkSpecialDate ? '<span></span>' + currentDate.getDate() : currentDate.getDate() + '')
                        .attr({

                            'data-date': currentDate.toDateString(),
                            'title': (this.model.showTooltip ? (checkSpecialDate && this.model.specialDates[index][this._mapField._tooltip] ? this.model.specialDates[index][this._mapField._tooltip] : this._formatter(currentDate, this.model.tooltipFormat)) : ''),
                            'aria-selected': false,
                            'role': 'gridcell',
                            'id': this._formatter(currentDate, "yyyyddMM")
                        }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                        .addClass((thisMonth ? 'current-month e-state-default ' : 'other-month e-state-default ') +
                            (this._isWeekend(currentDate) ? (this._ejHLWeekEnd ? 'e-dp-weekend e-week-end ' : (this.model.highlightWeekend ? 'e-week-end ' : '')) : 'e-week-day ') +
                            (thisMonth && currentDate.getTime() == newdate.getTime() ? 'today ' : ''));

                    d.find('span:first-of-type').addClass((checkSpecialDate ? (this.model.specialDates[index][this._mapField._icon] ? 'e-special-date-icon ' + this.model.specialDates[index][this._mapField._icon] + ' ' : 'e-special-day') : ''));
                    d.addClass(checkSpecialDate ? (this.model.specialDates[index][this._mapField._custom] ? this.model.specialDates[index][this._mapField._custom] : '') : '');
                    if (disable) this._disableDates({ date: currentDate, element: d });
                    if (selected.getTime() == currentDate.getTime() && thisMonth) {
                        if (!d.hasClass('e-hidedate'))
                            if (this.model.value) {
                                d.addClass('e-active').attr({ 'aria-selected': true });
                                if (this.model.highlightSection == "week") {
                                    r.addClass('e-selected-week');
                                }
                                if (this.model.highlightSection == "month") {
                                    tbody.addClass('e-selected-month');
                                }
                                if (this.model.highlightSection == "workdays") {
                                    r.addClass('e-work-week');
                                }
                            }
                            else { if(this.model.value!=null)d.addClass('e-state-hover').attr({ 'aria-selected': false }); }
                        if (!this._hoverDate) {
                            if (!d.hasClass('e-hidedate')) d.addClass('e-state-hover');
                            this._hoverDate = currentDate.getDate() - 1;
                        }
                    }
                    var cond = true;
                    if (currentDate < this.model.minDate || currentDate > this.model.maxDate) {
                        d.addClass('e-hidedate');
                        d.removeClass('current-month');
                        if (this.model.showOtherMonths) d.removeClass('other-month');
                        cond = _last = false;
                    }
                    if (thisMonth) {
                        if (cond && _first) {
                            this._tempMinDate = currentDate;
                            _first = false; _last = true;
                        }
                        if (_last) this._tempMaxDate = currentDate;
                    }
                    this._trigger("beforeDateCreate", { date: currentDate, value: this._formatter(currentDate, this.model.dateFormat), element: d });
                    r.append(d);
                    currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1, 0, 0, 0);
                }
                tbody.append(r);
            }
            calendarTable.append(tbody);
            if (this._DRPdisableFade) {
                $(tbody).css("display", "block");
                $(tbody).css({ display: "table-row-group", "vertical-align": "middle", "border-color": "inherit" });
            }
            else {
                (this._isIE8 || this._isIE7) ? $(tbody).css("display", "table-row-group") : $(tbody).fadeIn("fast");
            }
            if (this.model.startLevel === this.model.depthLevel)
                this._depthLevel(this.model.depthLevel);
            else if (this.model.depthLevel != "month" && this.model.depthLevel != "") {
                if (this.model.startLevel == "century")
                    this._depthLevel(this.model.depthLevel);
                else if (this.model.startLevel == "decade" && this.model.depthLevel != "century")
                    this._depthLevel(this.model.depthLevel);
                else if (this.model.startLevel == "year" && this.model.depthLevel != "decade" && this.model.depthLevel != "century")
                    this._depthLevel(this.model.depthLevel);
                else {
                    this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
                    this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
                }
            }
            else {
                this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
                this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
            }

            this._otherMonthsVisibility();
            this._checkDateArrows();
        },

        _checkDisableRange: function (value) {
            if (!ej.isNullOrUndefined(this._disableCollection[value.getFullYear()]))
                if (jQuery.inArray(value.getMonth(), this._disableCollection[value.getFullYear()]) !== -1)
                    return true;
            return false;
        },
        _initDisableObj: function (disableDates) {
            this._disableCollection = {};
            for (var i = 0; i < this.model.blackoutDates.length; i++) {
                var dateObj = this._checkInstanceType(this.model.blackoutDates[i]);
                if (dateObj) {
                    var year = dateObj.getFullYear();
                    var month = dateObj.getMonth();
                    if (ej.isNullOrUndefined(this._disableCollection[year])) this._disableCollection[year] = [];
                    if (jQuery.inArray(month, this._disableCollection[year]) == -1) this._disableCollection[year].push(month);
                }
            }
        },

        _disableDates: function (args) {
            for (var i = 0; i < this.model.blackoutDates.length; i++) {
                var dateObj = this._checkInstanceType(this.model.blackoutDates[i]);
                if (dateObj && +args.date === +dateObj)
                args.element.addClass('e-hidedate');
            }
        },

        _keyboardNavigation: function (e) {
            this._keyboardInteraction = true;
            if (this._animating) return false;
            if ((this._isOpen) && (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
                e.preventDefault && e.preventDefault();
                if (e.altKey) { if (e.keyCode == 13) { this._setCurrDate(e); return false; } else return; }
                var t = { row: null, col: null };

                t.col = this.sfCalendar.find('tbody tr td.e-state-hover').index();
                t.row = this.sfCalendar.find('tbody tr td.e-state-hover').parent().index();

                t.col = (t.col != -1) ? t.col + 1 : this.sfCalendar.find('tbody tr td.e-active').index() + 1;
                t.row = (t.row != -1) ? t.row + 1 : this.sfCalendar.find('tbody tr td.e-active').parent().index() + 1;

                var tableClass = this.sfCalendar.find('table')[0].className, next, rowLength = 3, colLength = 4;
                switch (tableClass) {
                    case "e-dp-viewallyears":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "yearall", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverAllYear = this.sfCalendar.find('tbody.e-datepicker-allyears tr td').index(next);
                        break;
                    case "e-dp-viewyears":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "year", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverYear = this.sfCalendar.find('tbody.e-datepicker-years tr td').index(next);
                        break;
                    case "e-dp-viewmonths":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "month", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverMonth = this.sfCalendar.find('tbody.e-datepicker-months tr td').index(next);
                        break;
                    case "e-dp-viewdays":
                        rowLength = this.sfCalendar.find('tbody.e-datepicker-days tr').length, colLength = 7;
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "day", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverDate = this._getDateObj(next).getDate() - 1;
                        break;
                }
                if (!e.ctrlKey) {
                    this.sfCalendar.find('table td').removeClass("e-state-hover");
                    next.addClass("e-state-hover");
                    this._setAriaAttributes(next);
                }
            }
            else if (!this.model.displayInline && (e.keyCode == 27 || e.keyCode == 9)) { this.hide(); }
            else if (e.altKey && e.keyCode == 40) { this.show(); return false; }
        },
        _setAriaAttributes: function (next) {
            if (this._popupOpen) {
                this.sfCalendar.find("[aria-selected=true]").attr("aria-selected", false)
                this.sfCalendar.find("[aria-label]").removeAttr("aria-label");
                $(this.element).attr("aria-activedescendant", next.attr('id'));
                $(next).attr("aria-selected", true);
                $(next).attr("aria-label", "The current focused date is " + this._formatter(this._getDateObj(next), "dddd, dd MMMM, yyyy"));
            }
        },
        _changeRowCol: function (t, key, rows, cols, target, ctrlKey) {
            var eleClass, cls = { parent: null, child: null };
            switch (target) {
                case "day": eleClass = "tbody.e-datepicker-days tr td.current-month";
                    cls.parent = ".e-datepicker-days", cls.child = ".current-month";
                    break;
                case "month": eleClass = "tbody.e-datepicker-months tr td.e-current-month";
                    cls.parent = ".e-datepicker-months", cls.child = ".e-current-month";
                    break;
                case "year": eleClass = "tbody.e-datepicker-years tr td.e-current-year";
                    cls.parent = ".e-datepicker-years", cls.child = ".e-current-year";
                    break;
                case "yearall": eleClass = "tbody.e-datepicker-allyears tr td.e-current-allyear";
                    cls.parent = ".e-datepicker-allyears", cls.child = ".e-current-allyear";
                    break;
            }
            if (t.row <= 0 && t.col <= 0) {
                this._removeCurrentMonthFromHideDate();
                return this.sfCalendar.find(eleClass + ':first');
            }
            var cell, proxy = this;
            switch (key) {
                case 36:
                    return this.sfCalendar.find(eleClass + ':first');
                case 35:
                    return this.sfCalendar.find(eleClass + ':last');
                case 38:
                    if (ctrlKey && this.model.allowDrillDown) {
                        this._forwardNavHandler();
                    }
                    else if (t.row > 1) {
                        t.row -= 1;
                    }
                    else {
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):last');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 1) {
                        cell = this._findVisible(t, cls, "up");
                        if (cell !== null) return cell;
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):last');
                    }
                    return cell;
                case 37:
                    if (ctrlKey) {
                        this._processNextPrevDate(true);
                        return this.sfCalendar.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col > 1)
                        t.col -= 1;
                    else if (t.row > 1) {
                        t = { row: t.row - 1, col: cols }
                    }
                    else {
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':last');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 1) {
                        cell = this._findVisible(t, cls, "left");
                        if (cell !== null) return cell;
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':last');
                    }
                    return cell;
                case 39:
                    if (ctrlKey) {
                        this._processNextPrevDate(false);
                        return this.sfCalendar.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col < cols)
                        t.col += 1;
                    else if (t.row < rows) {
                        t = { row: t.row + 1, col: 1 }
                    }
                    else {
                        this._processNextPrevDate(false);
                        cell = this.sfCalendar.find(eleClass + ':first');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 1) {
                        cell = this._findVisible(t, cls, "right");
                        if (cell !== null) return cell;
                        this._processNextPrevDate(false);
                        cell = this.sfCalendar.find(eleClass + ':first');
                    }
                    return cell;
                case 40:
                    if (!ctrlKey) {
                        if (t.row < rows) {
                            t.row += 1;
                        }
                        else {
                            this._processNextPrevDate(false);
                            cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):first');
                            return cell;
                        }
                        cell = this._getCell(t, cls);
                        if (cell.length <= 1) {
                            cell = this._findVisible(t, cls, "down");
                            if (cell !== null) return cell;
                            this._processNextPrevDate(false);
                            cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):first');
                        }
                        return cell;
                    }
                case 13:
                    var tclassName = $("table", this.sfCalendar).get(0).className, ele, element;
                    ele = this._getCell(t, cls); element = $(ele)[0];
                    if (tclassName == "e-dp-viewmonths" && this.model.startLevel == "year" && this.model.depthLevel == "year") {
                        this._dateValue = new Date(this._dateValue.setMonth(parseInt(element.attributes["data-index"].value)));
                        this._onSetCancelDateHandler({ type: null, target: ele });
                    }
                    else if ((tclassName == "e-dp-viewyears" && this.model.startLevel == "decade" && this.model.depthLevel == "decade") ||
                        (tclassName == "e-dp-viewallyears" && this.model.startLevel == "century" && this.model.depthLevel == "century")) {
                        this._dateValue = new Date(this._dateValue.setFullYear(parseInt(element.innerHTML)));
                        this._onSetCancelDateHandler({ type: null, target: ele });
                    }
                    else if (tclassName == "e-dp-viewdays") {
                        this._backwardNavHandler(ele);
                        this._onSetCancelDateHandler({ type: null, target: ele });
                    }
                    else
                        this._backwardNavHandler(ele);
                    break;
            }
            return this._getCell(t, cls);
        },
        _findVisible: function (t, cls, key) {
            var cols = t.col, rows = t.row, requiredClass = cls.child.slice(1, cls.child.length);
            for (var i = 0; i >= 0; i++) {
              var nextElement = this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td:nth-child(' + cols + ')');
                if (nextElement.length <= 0) {
                    return null;
                }
                if (nextElement.hasClass('e-hidedate') || !nextElement.is(":visible")) {
                    key == "right" || key == "left" ? (key == "right" ? cols++ : cols--) : (key == "down" ? rows++ : rows--);
                    if ((rows <= 0) || (rows > this.sfCalendar.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                    // Column exceeds the range. 
                    if (cols > this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length) {
                        //move to next row and select first column
                        rows++;
                        cols = 1;
                    }
                    if (cols <= 0) {
                        //move to previous row and select last column
                        rows--;
                        cols = this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length;
                    }
                    // Row exceeds the range.
                    if ((rows <= 0) || (rows > this.sfCalendar.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                } else if (nextElement.hasClass('other-month')) {
                    return null;
                } else if (nextElement.hasClass(requiredClass)) {
                    t.col = cols; t.row = rows;
                    return nextElement;
                }
            }
        },
        _getCell: function (t, cls) {
            return this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child + ':nth-child(' + t.col + ')');
        },
        _getDateObj: function (element) {
            return new Date(element.attr("data-date"));
        },
        _touchCalendar: function (e) {
            var tableClass = this.sfCalendar.find('table')[0].className;
            switch (e.type) {
                case "pinchin":
                    if (tableClass != "e-dp-viewdays")
                        this._keyboardNavigation({ keyCode: 13 });
                    break;
                case "pinchout":
                    if (tableClass != "e-dp-viewallyears" && this.model.allowDrillDown)
                        this._forwardNavHandler();
                    break;
                case "swipeleft":
                    this._processNextPrevDate(false);
                    break;
                case "swiperight":
                    this._processNextPrevDate(true);
                    break;
            }
        },

        show: function (e) {
            if (ej.isNullOrUndefined(this.sfCalendar)) this._renderPopup();
            if (this._isOpen) return false;
            var proxy = this;
            this._popupOpen = true;
            $(this.element).attr("aria-expanded", true);
            var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
            if (!this.model.enabled) return;
            if (!this.model.displayInline) this._setDatePickerPosition();
            if (this._trigger("beforeOpen", { element: this.sfCalendar, events: e })) return false;
            this.sfCalendar.attr({ 'aria-hidden': 'false' });
            proxy._isOpen = true;
            this.sfCalendar.slideDown(this.model.enableAnimation ? this.animation.open.duration : 0, function () {
                if (proxy.model && !proxy.model.displayInline)
                    $(document).on("mousedown", $.proxy(proxy._onDocumentClick, proxy));
            });
            if (this._isIE8) {
                if (this.element.val() && this._compareDate(new Date(this.element.val()), previous)) this._updateInputVal();
            }
            else this._updateInputVal();
            this._refreshLevel(previous);
            this._trigger("open", { prevDate: previous, date: this.model.value, value: this._formatter(this.model.value, this.model.dateFormat) });
            $(window).on("resize", $.proxy(this._OnWindowResize, this));
            if (!this.model.displayInline) {
              this._on(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
              this._on(ej.getScrollableParents(this.wrapper), "touchmove", this.hide);
			}
            this._isInputBox && this.wrapper.addClass("e-active");
            if (this.model.value != null) {
                $(this.element).attr("aria-activedescendant", $(this.sfCalendar.find(".e-active")).attr("id"));
            } else {
                $(this.element).attr("aria-activedescendant", $(this.sfCalendar.find(".today")).attr("id"));
            }
        },


        hide: function (e) {
            if (!this._isOpen || this._getInternalEvents) return false;
            if (this._trigger("beforeClose", { element: this.sfCalendar, events: e })) return false;
            var proxy = this;
            this._popupOpen = false;
            $(this.element).attr("aria-expanded", false);
            this.sfCalendar.attr({ 'aria-hidden': 'true' });
            if (this._popClose && e != undefined && e.type != "click") {
                return;
            }
            this.sfCalendar.slideUp(this.model.enableAnimation ? this.animation.close.duration : 0, function () {
                proxy._isOpen = false;
                $(document).off("mousedown", $.proxy(proxy._onDocumentClick, proxy));
                proxy._setWaterMark();
            });
            if (this.element.val() != "") this._validateInputVal();
            this._trigger("close", { prevDate: this._prevDate, date: this.model.value, value: this._formatter(this.model.value, this.model.dateFormat) });
            $(window).off("resize", $.proxy(this._OnWindowResize, this));
            this._off(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
            this._off(ej.getScrollableParents(this.wrapper), "touchmove", this.hide);
            this._isInputBox && this.wrapper.removeClass("e-active");
            if (this.model.value) {
                $(this.element).attr("aria-activedescendant", $(this.sfCalendar.find(".e-active")).attr("id"));
            } else {
                $(this.element).removeAttr("aria-activedescendant");
            }
            
        },


        enable: function () {
            this.model.enabled = true;
            this.wrapper && this.wrapper.removeClass('e-disable');
            this.element.removeClass('e-disable').attr({ "aria-disabled": false });
            this.element.prop("disabled", false);
            if (this.dateIcon) this.dateIcon.removeClass('e-disable').attr({ "aria-disabled": false });
            if (this._isIE8 && this.dateIcon) this.dateIcon.children().removeClass("e-disable");
            this.element.prop("disabled", false);
            if (!this._isSupport)
                this._hiddenInput.prop("disabled", false);
            this.sfCalendar && this.sfCalendar.removeClass('e-disable').attr({ "aria-disabled": false });
        },


        disable: function () {
            this.model.enabled = false;
            this.wrapper && this.wrapper.addClass('e-disable');
            this.element.addClass('e-disable').attr({ "aria-disabled": true });
            this.element.attr("disabled", "disabled");
            if (this.dateIcon) this.dateIcon.addClass('e-disable').attr({ "aria-disabled": true });
            if (this._isIE8 && this.dateIcon) this.dateIcon.children().addClass("e-disable");
            this.element.attr("disabled", "disabled");
            if (!this._isSupport)
                this._hiddenInput.attr("disabled", "disabled");
            this.sfCalendar && this.sfCalendar.addClass('e-disable').attr({ "aria-disabled": true });
            if (this._isOpen) {
                if (this.element.is(':input')) this.element.blur();
                if (!this.model.displayInline) this.hide();
            }
        },

        getValue: function () { return this._formatter(this.model.value, this.model.dateFormat); },

        _wireCalendarEvents: function () {
            this._allowQuickPick(this.model.allowDrillDown);
            this._on($('.e-next', this.sfCalendar), "click", $.proxy(this._previousNextHandler, this));
            this._on($('.e-prev', this.sfCalendar), "click", $.proxy(this._previousNextHandler, this));
            if (!this.model.displayInline) {
                this.sfCalendar.on("mouseenter touchstart", $.proxy(function () { this._popClose = true; }, this));
                this.sfCalendar.on("mouseleave touchend", $.proxy(function () { this._popClose = false; }, this));
            }
            if (this.model.showFooter)
                this._on($('.e-footer', this.sfCalendar), "click", this._setCurrDate);
            this.sfCalendar && this._on(this.sfCalendar, "pinchin pinchout swipeleft swiperight", $.proxy(this._touchCalendar, this));
        },

        _wireEvents: function () {
            if (this.element.is(":input") && (this.model.allowEdit)) {
                this._on(this.element, "blur", this._onFocusOut);
                this._on(this.element, "focus", this._onFocusIn);
                this._on(this.element, "keydown", this._onKeyDown);
            }

            if (!this.model.allowEdit) {
                this.element.attr("readonly", "readonly");
                this.element.on("mousedown", $.proxy(this._showDatePopUp, this));
            }
        },
        _bindDateButton: function () {
            this._on(this.dateIcon, "mousedown", this._showDatePopUp);
            if (this.model.allowEdit)
                this.element.off("mousedown", $.proxy(this._showDatePopUp, this));
        },
        _bindInputEvent: function () {
            this._off(this.dateIcon, "mousedown", this._showDatePopUp);
        },

        _specificFormat: function () {
            var parseInfo = ej.globalize._getDateParseRegExp(ej.globalize.findCulture(this.model.locale).calendar, this.model.dateFormat);
            return ($.inArray("dddd", parseInfo.groups) > -1 || $.inArray("ddd", parseInfo.groups) > -1)
        },

        _onFocusOut: function (e) {
            this._isFocused = false;
            var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
			if(this.model.enableStrictMode && this.element.val() && !isNaN(+new Date(this.element.val()))){
				this._formatArray = this.model.dateFormat.split(this._getSeparator());
				this._valArray = this.element.val().split(this._getSeparator());
				for(var i = 0; i < this._formatArray.length ; i++){
					if(this._formatArray[i].startsWith("y") && this._valArray.length > 1){
						if((this._formatArray[i].length == 4 && this._valArray[i].length == 2) || (this._formatArray[i].length == 2 && this._valArray[i].length == 2)){
							this._valArray[i] = (parseInt(this._valArray[i]) + 2000).toString();
							this.element.val(this._valArray.join(this._getSeparator()));
						}
					}
				}
				
			}
            this._validateOnFocusOut(this._validateValue(), e);
            this.wrapper.removeClass("e-focus");
            (ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
            if ((!this._isOpen || this.model.displayInline) && !this._setWaterMark() && !this._compareDate(this._preValue, this._parseDate(this.element.val(), this.model.dateFormat))) this._updateInputVal();
            if ((!this._isOpen || this.model.displayInline)) this._refreshLevel(previous);
            if (this.element.val() != "" && (!this._isOpen || this.model.displayInline)) { this._validateInputVal(); }
            this.element.off("keydown", $.proxy(this._keyboardNavigation, this));
            if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
            var _currentVal = this.element.val();
            var data = { prevDate: this._prevDate, value: _currentVal };
            if (this._specificFormat()) {
                if (this._prevDate != _currentVal)
                    this._setDateValue(_currentVal, true);
            }
            else
                this._setDateValue(_currentVal);
            if (!this.model.value) this._clearSelected();
            this._trigger("focusOut", data);
            this._checkErrorClass();
        },
        _onFocusIn: function (e) {
            if (this._isSupport) {
                e.preventDefault();
                this._isFocused = true;
            }
            this.wrapper.removeClass('e-error');
            this.isValidState = true;
            this.wrapper.addClass("e-focus");
            this.wrapper.addClass('e-valid');
            if (this.model.readOnly)
                return;
            if (!this._isSupport) this._hiddenInput.css("display", "none");
            this.element.on("keydown", $.proxy(this._keyboardNavigation, this));
            if (!this.model.showPopupButton && !this.model.readOnly) this.show(e);
            if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
            this._trigger("focusIn", { date: this.model.value, value: this._formatter(this.model.value, this.model.dateFormat) });
        },
        _elementClick: function (e) {
            if (!this._popupOpen) this.show(e);
        },
        _removeWatermark: function () {
            if (this.element.val() != "" && !this._isSupport)
                this._hiddenInput.css("display", "none");
        },
        _refreshPopup: function () {
            this._refreshDatepicker();
            this._startLevel(this.model.startLevel);
        },
        _weekDate: function (currentDate) {
            var time, checkDate = new Date(currentDate.getTime());
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
            time = checkDate.getTime();
            checkDate.setMonth(0);
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;

        },
        _refreshLevel: function (previous) {
            if ((this.model.startLevel == this.model.depthLevel) && this.model.startLevel != "month") {
                var val = this._stringToObject(this.element.val());
                val = this._validateYearValue(val);
                if (val)
                    if (!this._compareDate(previous, val))
                        this._refreshPopup();
            }
        },
        _validateOnFocusOut: function (val, e) {
            var dateVal = this._preValue != null ? this._calendarDate : this._preValue;
            var calenderDate = this._formatter(dateVal, this.model.dateFormat);
			this._prevDate = this._formatter(this._preValue, this.model.dateFormat);
			var _currentVal = calenderDate;
            var data = { prevDate: this._prevDate, value: _currentVal, isInteraction: !!e };
            if (this._specificFormat() && (val > this.model.minDate) && (val < this.model.maxDate)) {
                if (val == null) this.model.value = dateVal
                else {
                    this.model.value = val;
                    var currDate = this._formatter(val, this.model.dateFormat, this.model.locale);
                }
            }
            else var currDate = this._formatter(this._parseDate((this._formatter(new Date(), "MM/dd/yyyy"))), this.model.dateFormat);
            var dateChange = false, valueExceed = false;
            if (val != null && !this.model.enableStrictMode) {
                if (ej.isNullOrUndefined(this.model.value))
                    this.model.value = this._parseDate(this.element.val());
                if (this.model.maxDate < this.model.minDate) this.model.minDate = this.model.maxDate;
                if (!this.model.enableStrictMode) {
                    if (val) {
                        if ((val < this.model.minDate) || (val > this.model.maxDate)) {
                            dateChange = true,
                            this._calendarDate = val = val < this.model.minDate ? this.model.minDate : this.model.maxDate
                        }
                    }
                    else {
                        this.element.val("");
                        if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                        else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                    }
                    this.isValidState = true;
                }
                if (dateChange) this.element.val(this._formatter(val, this.model.dateFormat));
                if (!this._compareDate(this._preValue, this._parseDate(this.element.val(), true))) this._triggerChangeEvent(e);
            }
            else if (val == null && !this.model.enableStrictMode) {
                if (this._preTxtValue == null || this.element.val() == "") {
                    this.element.val("");
                    if (!this._isSupport) this._hiddenInput.css("display", "block");
                } else
                    this.element.val(calenderDate);
                this._triggerChangeEvent(e);
				if(this.model.value != null)
				this._trigger("change", data);
            }
            else {
                if (val) {
                    if ((val < this.model.minDate) || (val > this.model.maxDate)) {
                        this.isValidState = false, valueExceed = true,
                        this._calendarDate = val < this.model.minDate ? this.model.minDate : this.model.maxDate
                    }
                    else
                        this.isValidState = true;
                    this._triggerChangeEvent(e);
                    if (valueExceed && this._getInternalEvents) this._trigger("outOfRange");
                }
                else {
                    this.isValidState = false;
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
            }
        },
        _onKeyDown: function (e) {
            if (e.keyCode === 13) {
                var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
                this._validateOnFocusOut(this._validateValue(), e);
                if ((!this._isOpen || this.model.displayInline) && !this._setWaterMark() && !this._compareDate(this._preValue, this._parseDate(this.element.val(), this.model.dateFormat))) this._updateInputVal();
                if ((!this._isOpen || this.model.displayInline)) this._refreshLevel(previous);
                if (this.element.val() != "" && (!this._isOpen || this.model.displayInline)) { this._validateInputVal(); }
                this._checkErrorClass();
            }
        },
        _showhidePopup: function (e) {
            if (!this.model.enabled) return false;
            if (this._isOpen) {
                if (!this._isFocused && this.element.is(':input') && (!ej.isTouchDevice())) this.element.focus();
                if (!this._cancelValue) this.hide(e);
            }
            else {
                if (!this._isFocused && this.element.is(':input') && (!ej.isTouchDevice())) this.element.focus();
                this.show(e);
            }
        },
        _compareDate: function (first, second) {
            var result = (+first === +second) ? true : false;
            return result;
        },
        _validateDate: function (val) {
            var result = true;
            if (val != null) {
                for (var i = 0; i < this.model.blackoutDates.length; i++) {
                    var dateObj = this._checkInstanceType(this.model.blackoutDates[i]);
                    if (dateObj && +val === +dateObj)
                        result = false;
                }
                if ((val < this.model.minDate || val > this.model.maxDate) && this.model.enableStrictMode) {
                    result = false;
                    this.isValidState = false;
                }
            }

            return result;
        },

        _triggerChangeEvent: function (e) {
            var currentValue;
            var _currentVal = this.element.val() == "" ? null : this.element.val();
            this._prevDate = this._formatter(this._preValue, this.model.dateFormat);
            var data = { prevDate: this._prevDate, value: _currentVal, isInteraction: !!e };
            if (this._specificFormat() && e != undefined && e.type == "keydown" && this._formatter(this._preValue, this.model.dateFormat, this.model.locale) != this.element.val())
                currentValue = this._parseDate(this.element.val(), true);
            else if ((this._specificFormat() && e != undefined && e.type == "blur"))
                currentValue = this.model.value;
            else currentValue = this._parseDate(_currentVal);
            currentValue = this._validateYearValue(currentValue);
            if (!this._validateDate(currentValue)) currentValue = null;
            if (!this._compareDate(this._preValue, currentValue)) {
                this._preValue = this.model.value = currentValue;
                data.value = this._formatter(this.model.value, this.model.dateFormat);
                if (this.model.value) this._clickedDate = this._calendarDate = this.model.value;
                if (this.model.displayInline && !this._isInputBox) this._hiddenInput.attr('value', _currentVal);
                if (!this.model.value && !this.model.enableStrictMode) this._setDateValue(this.model.value);
                data.value = _currentVal;
                this._trigger("_change", data);
                data.value = this._formatter(this.model.value, this.model.dateFormat);
                this._trigger("change", data);
                this._checkErrorClass();
            }
            else if (!(this.element.val() == "" && this._prevDate == null) && this.element.val() != this._prevDate) {
                data.value = this.element.val();
                this._trigger("_change", data);
            }
        },

        _triggerSelectEvent: function (e) {
            var val = this.element.val();
            if (this._parseDate(val)) {
                var data = { prevDate: this._prevDate, date: this.model.value, value: val, isSpecialDay: this._isSpecialDates(this.model.value) };
                if (this._prevDate != val) {
                    if (this._parseDate(data.value) && (this.model.value >= this.model.minDate && this.model.value <= this.model.maxDate)) {
                        this._cancelValue = this._trigger("select", data);
                    }
                }
                if (this._dt_drilldown) this._trigger("dt_drilldown", data);
            }
            if (this.model.value) {
                $(this.element).attr("aria-activedescendant", $(this.sfCalendar.find(".e-active")).attr("id"));
            }
        },

        _onDocumentClick: function (e) {
            if (this.model) {
                if (!$(e.target).is(this.popup) && !$(e.target).parents(".e-popup").is(this.popup) &&
                    !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-datewidget").is(this.wrapper)) {
                    this.hide(e);
                }
                else if ($(e.target).is(this.popup) || $(e.target).parents(".e-popup").is(this.popup)) {
                    e.preventDefault();
                }
            }
        },

        _OnWindowResize: function (e) {
            if (this.sfCalendar) this._setDatePickerPosition();
        },

        _showDatePopUp: function (e) {
            var isRightClick = false;
            if (e.button)
                isRightClick = (e.button == 2);
            else if (e.which)
                isRightClick = (e.which == 3); //for Opera
            if (isRightClick) return;
            if (!this._isSupport && !this.model.showPopupButton) {
                e.preventDefault();
                this._onFocusIn();
            }
            if (this.model.readOnly) return;
            e.preventDefault();
            if (!this.model.enabled && this.model.displayInline) return false;
            this._showhidePopup(e);
        },
        _layoutChanged: function (e) {
            // this event internally used to observe the layout change in "DateTimePicker" control
            if (this._getInternalEvents) this._trigger("layoutChange");
        },
        _setCurrDate: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e) e.preventDefault();
            var proxy = this;
            this._prevDate = this._formatter(this.model.value, this.model.dateFormat);
            this._dateValue = this._zeroTime(new Date());
            this.model.value = this._calendarDate = new Date(this._dateValue.toString());
            this._setDateValue(this.model.value);
            this._triggerSelectEvent(e);
            this._triggerChangeEvent(e);
            this._refreshDatepicker();
            this._changeDayClass();
            this._startLevel(this.model.startLevel);
            this._onSetCancelDateHandler(e);
            this._layoutChanged();
        },
        _changeDayClass: function () {
            var className = this.popup.children("table")[0].className;
            if (className != "e-dp-viewdays") {
                this.popup.children("table").removeClass(className).addClass("e-dp-viewdays");
            }
        },

        _onSetCancelDateHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e && ($(e.target).hasClass("e-disable") || $(e.target).hasClass("e-hidedate"))) return false;
            if (e && e.type) e.preventDefault();
            if (this._specificFormat()) this._prevDate = this.element.val();
            else this.model.value = this._parseDate(this.element.val());
            this._prevDate = this._formatter(this.model.value, this.model.dateFormat);
            this._setDateValue(this._dateValue);
            this._triggerSelectEvent(e);
            this._triggerChangeEvent(e);
            this._dateValue = (this.model.value == null)? null:new Date(this.model.value.toString());
            if (this.element.is(':input') && !this.model.displayInline) {
                this._showhidePopup(e);
            }
            if (e && $(e.currentTarget).hasClass("other-month"))
                this._refreshDatepicker();
            this._cellSelection();
        },
        _closeCalendar: function (ele) {
            if (!ele || ele == this.element) {
                this.sfCalendar.empty().remove();
            }
        },
        //Error class for input value validation
        _checkErrorClass: function () {
            if (this.wrapper) {
                if (this.isValidState) this.wrapper.removeClass("e-error");
                else this.wrapper.addClass("e-error");
            }
        },
        _getLocalizedLabels: function () {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        }
    });

    ej.DatePicker.Locale = ej.DatePicker.Locale || {};

    ej.DatePicker.Locale['default'] = ej.DatePicker.Locale['en-US'] = {
        watermarkText: "Select date",
        buttonText: 'Today'
    };


    ej.DatePicker.Header = {
        /**  Removes the day header */
        None: "none",
        /**  Shows the day header format in short like Sun, Mon, Tue … */
        Short: "short",
        /**  Shows the day header format in min like Su, Mo, Tu … */
        Min: "min",
        /**  Shows the day header format in long like Sunday, Monday, Tuesday … */
        Long: "long"
    };

    ej.DatePicker.HighlightSection = {
        /**  Highlight the Current Month. */
        Month: "month",
        /**  Highlight the Current Week. */
        Week: "week",
        /**  Highlight the Current WorkDays. */
        WorkDays: "workdays",
        /** Don't Highlight Anything. */
        None: "none"
    };


    ej.DatePicker.Level = {
        /**  Starts from month level view. */
        Month: "month",
        /**  Starts from year level view. */
        Year: "year",
        /**  Starts from year decade level view. */
        Decade: "decade",
        /**  Starts from century level view.  */
        Century: "century"
    };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html CheckBox elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejCheckBox", "ej.CheckBox", {
        _rootCSS: "e-checkbox",

        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["checked", "checkState"],
        _setFirst: false,
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },


        defaults: {

            id: null,

            name: null,

            value: null,

            htmlAttributes: {},

            checked: false,

            enabled: true,

            enableTriState: false,

            showRoundedCorner: false,

            enablePersistence: false,

            cssClass: "",

            text: "",

            enableRTL: false,

            idPrefix: "ej",

            size: "small",

            checkState: "uncheck",

            validationRules: null,

            validationMessage: null,
            validationMessages: null,

            beforeChange: null,

            change: null,

            create: null,

            destroy: null

        },

        dataTypes: {
            id: "string",
            name: "string",
            enablePersistence: "boolean",
            enableTriState: "boolean",
            size: "enum",
            enabled: "boolean",
            idPrefix: "string",
            validationRules: "data",
            validationMessage: "data",
            validationMessages: "data",
            htmlAttributes: "data"
        },
        observables: ["checked", "checkState"],
        checked: ej.util.valueFunction("checked"),
        checkState: ej.util.valueFunction("checkState"),

        _init: function (options) {
            this._cloneElement = this.element.clone();
            var browserInfo = ej.browserInfo();
            this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
            this._isIE9 = (browserInfo.name == 'msie' && browserInfo.version == '9.0') ? true : false;
            this._isDevice = this._checkDevice();
            this._setValue();
            this._renderControl();
            this.model.enableRTL && this._setRTL();
            if (this.model.enabled)
                this._wireEvents();
            this._setEnabled(this.model.enabled);
			if (!ej.isNullOrUndefined(options) && !ej.isNullOrUndefined(options.validationMessage))
				this.model.validationMessages= this.model.validationMessage;
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
            this._addAttr(this.model.htmlAttributes);
            if (this._isIE9 || this._isIE8) {
                // In IE8 and IE9, the text of the checkox will float to next line while the length of the text is high fixed this by adding the following class and procssed with CSS
                this.wrapper.addClass("e-tb-cell");
            }
        },
        _checkDevice: function () {
            return (ej.isDevice() && ej.isTouchDevice());
        },
        _setRTL: function () {
            $(this.maindiv).addClass("e-rtl");
        },
        _initValidator: function () {
            (!this.wrapper.closest("form").data("validator")) && this.wrapper.closest("form").validate();
        },
        _setValidation: function () {
            this.wrapper.find('input').rules("add", this.model.validationRules);
            var validator = this.wrapper.closest("form").data("validator");
            validator = validator ? validator : this.wrapper.closest("form").validate();
            var name = this.wrapper.find('input').attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessages)
                            ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "name") proxy.element.attr(key, value);
                else if (key == "required") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy._setEnabled(false);
                else if (key == "checked" && value == "checked") {
                    if (proxy.checked() instanceof Array)
                        proxy._updateCheckedItem();
                    else
                        proxy._checked(true);
                }
                else proxy.wrapper.attr(key, value);
            });
        },

        _triggerBeforeChange: function () {
            var data = { isChecked: this._isChecked, isInteraction: false };
            if (true == this._trigger("beforeChange", data)) return false;
        },

        _triggerChange: function () {
            var data = { isChecked: this._isChecked, checkState: this.checkState(), isInteraction: false };
            this._trigger("change", data);
        },

        _setModel: function (options) {
            for (var prop in options) {
                switch (prop) {
                    case "checked":
                        $(this.maindiv).removeClass("e-material-animate");
                        if (this.model.beforeChange) this._triggerBeforeChange();
                        if (this.checked() instanceof Array) {
                            var checkedItemArray = ej.util.getVal(options[prop]);
                            var lastVal = checkedItemArray[checkedItemArray.length - 1];
                            if (this.model.value == lastVal) this._isChecked = true;
                        }
                        else {
                            this._isChecked = ej.util.getVal(options[prop]);
                            this.checked(this._isChecked);
                        }
                        this._isChecked ? this._checked() : this._unChecked();
                        if (this.model.change) this._triggerChange();
                        break;
                    case "enableTriState":
                        if (options[prop]) {
                            this.model.enableTriState = options[prop];
                            this._indeterminateState = options[prop];
                        }
                        break;
                    case "checkState":
                        if (this.model.enableTriState) {
                            if (this.model.beforeChange) this._triggerBeforeChange();
                            this._isChecked = ej.util.getVal(options[prop]);
                            this.checkState(this._isChecked);
                            this._changeState(this._isChecked);
                            this._setCheckBoxState();
                            this.checked(this._isChecked);
                            if (this.model.checkState == "indeterminate")
                                this._setIndeterminate(this._indeterminateState);
                            if (this.checked() instanceof Array)
                                this._updateCheckedItem();
                            else if (options[prop] == "check") this._hiddenInput.removeAttribute("name");
                            else this._hiddenInput.setAttribute("name", this.model.name);
                            if (this.model.change) {
                                if (!(this.checked() instanceof Array)) this._isChecked = this.checkState() == "uncheck" ? false : true;
                                this._triggerChange();
                            }
                        }
                        break;
                    case "cssClass": this._changeSkin(options[prop]); break;
                    case "enableRTL":
                        (options[prop]) ? this._setRTL() : $(this.maindiv).removeClass("e-rtl");
                        break;
                    case "text": this._setText(options[prop]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.wrapper.find('input').rules('remove');
                            this.model.validationMessages = null;
                        }
                        this.model.validationRules = options[prop];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
					this.model.validationMessages = options[prop];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                         break;
					case "validationMessages":
					  this.model.validationMessages = options[prop];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "id": this._setIdAttr(options[prop]); break;
                    case "name": this.element.attr('name', options[prop]);
                        if (!this._isChecked || this.spanImg.hasClass("e-chk-indeter")) this._hiddenInput.setAttribute('name', options[prop]);
                        this.model.name = options[prop];
                        break;
                    case "value": this.element.attr('value', options[prop]); break;
                    case "size": this._setSize(options[prop]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[prop]); break;
                    case "enabled": this._setEnabled(options[prop]); break;
                    case "htmlAttributes": this._addAttr(options[prop]); break;
                }
            }
        },

        _destroy: function () {
            this.element.removeClass("e-checkbox e-input");
            !this._cloneElement.attr("name") && this.element.attr("name") && this.element.removeAttr("name");
            !this._cloneElement.attr("value") && this.element.attr("value") && this.element.removeAttr("value");
            this.element.insertBefore(this.wrapper);
            this.wrapper.remove();
        },

        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.wrapper.removeClass(this.model.cssClass).addClass(skin);
                $("#" + this.model.idPrefix + this.model.id + "_wrapper").removeClass(this.model.cssClass).addClass(skin);
            }
        },

        _setValue: function () {
            this._indeterminateState = false;
            this._isChecked = false;
            var _id = this.element[0].getAttribute("id"), _name = this.element[0].getAttribute('name'), _value = this.element[0].getAttribute('value');
            !ej.isNullOrUndefined(_id) && (this.model.id = _id);
            !ej.isNullOrUndefined(_name) && (this.model.name = _name);
            if (!ej.isNullOrUndefined(_value) && _value != "") this.model.value = _value;
            if (!this.checked() && !ej.isNullOrUndefined(this.element.attr('checked'))) this._isChecked = true;
            ej.isNullOrUndefined(this.model.name) && (this.model.name = this.model.id);
            this.model.enabled = this.model.enabled && !this.element.attr("disabled");
        },

        _setSize: function (val) {
            if (val == ej.CheckboxSize.Medium) {
                $(this.innerdiv).removeClass('e-chkbox-small').addClass('e-chkbox-medium');
                $(this.maindiv).removeClass('e-check-small').addClass('e-check-medium');
				
			}
            else {
                $(this.innerdiv).removeClass('e-chkbox-medium').addClass('e-chkbox-small');
				$(this.maindiv).removeClass('e-check-medium').addClass('e-check-small');
			}
        },

        _setRoundedCorner: function (val) {
            if (val)
                this.span.addClass("e-corner");
            else
                this.span.removeClass("e-corner");
        },

        _setEnabled: function (val) {
            if (val) {
                this.enable();
            } else {
                this.disable();
            }
        },
        _setCheckBoxState: function () {
            if (this.model.enableTriState) {
                if (this.checkState() == "indeterminate")
                    this._indeterminateState = true;
                else if (this.checkState() == "check")
                    this._isChecked = true;
                else if (this.checkState() == "uncheck")
                    this._isChecked = false;
            }
            else if (this.checkState() == "indeterminate")
                this.checkState("uncheck");
        },
        _createElement: function (tagName, attrs) {
            var ele = document.createElement(tagName);
            this._setAttributes(ele, attrs);
            return ele;
        },
        _setAttributes: function (ele, attrs) {
            for (var key in attrs) {
                ele.setAttribute(key, attrs[key]);
            }
        },
        _renderControl: function () {
            this._setCheckBoxState();
            this.maindiv = this._createElement("span", { "class": "e-chkbox-wrap e-widget " + this.model.cssClass, "role": "checkbox", tabindex: 0 });
            if (this._isValid(this.model.id)) {
                this.maindiv.setAttribute("id", this.model.idPrefix + this.model.id);
                this.element[0].setAttribute("id", this.model.id);
            }
            this.innerdiv = document.createElement("div");
            this._setSize(this.model.size);
            this.span = document.createElement("span");
            this.span = $(this.span);
            this.spanImg = this._createElement("span", { "class": "e-chk-image e-icon", "role": "presentation" });
            this.spanImg = $(this.spanImg);
            this.element.addClass("e-input");
            this.model.name = ej.isNullOrUndefined(this.model.name) ? this.model.id : this.model.name;
		    this.model.value = ej.isNullOrUndefined(this.model.value) ? true : this.model.value;
            this._setAttributes(this.element[0], { "name": this.model.name, "value": this.model.value });
            var hiddenEl = $("#" + this._id + "_hidden")
            // hidden input element will be generated in MVC wrapper
            this._hiddenInput = hiddenEl.length ? hiddenEl[0] : this._createElement("input", { type: "checkbox", value: false, style: "display:none" });
			if (this.element.attr("data-type") == "hidden") this._hiddenInput.setAttribute("type", "hidden");
            this._isValid(this.model.name) && this._hiddenInput.setAttribute("id", this.model.name + "_hidden");

            this._setRoundedCorner(this.model.showRoundedCorner);
            if (this.checked())
                this._setCheckedItem(this.checked());
            if (this._isChecked) {
                this.spanImg.addClass("e-checkmark");
                this.span.addClass("e-chk-act");
                this.maindiv.setAttribute("aria-checked", true);
                this.element.attr("checked", "checked")
            }
            else {
                this.span.addClass("e-chk-inact");
                this.maindiv.setAttribute("aria-checked", false);
                this._hiddenInput.setAttribute("name", this.model.name);
            }
            if (!(this.checked() instanceof Array))
                this.checked(this._isChecked);
            this.span[0].appendChild(this.spanImg[0]);
            this.innerdiv.appendChild(this.span[0]);
            this.element[0].parentNode && this.element[0].parentNode.insertBefore(this.maindiv, this.element[0]);
            this.maindiv.appendChild(this.element[0]);
            this.maindiv.appendChild(this._hiddenInput);
            this.maindiv.appendChild(this.innerdiv);
            this.wrapper = $(this.maindiv);
            this._setTextWrapper(this.model.text);
            this.chkbx = this.element;
            if (this.model.enableTriState == true && this._indeterminateState == true)
                this._setIndeterminate(this._indeterminateState);
            if (this.checked() instanceof Array)
                this._updateCheckedItem();
        },
        _changeState: function (state) {
            if (state == "indeterminate") {
                this.spanImg.removeClass("e-checkmark").addClass("e-stop");
                this.span.removeClass("e-chk-act e-chk-inact").addClass("e-chk-indeter");
                this.wrapper[0].setAttribute("aria-checked", "mixed");
                this.wrapper.find('input').prop('enableTriState', true);
                if (!(this.checked() instanceof Array))
                    this.checked(null);
            }
            else if (state == "check") {
                this.spanImg.removeClass("e-stop").addClass("e-checkmark");
                this.span.removeClass("e-chk-act e-chk-inact e-chk-indeter").addClass("e-chk-act");
                this.wrapper[0].setAttribute("aria-checked", true);
            }
            else if (state == "uncheck") {
                this.spanImg.removeClass("e-checkmark e-stop");
                this.span.removeClass("e-chk-act e-chk-indeter").addClass("e-chk-inact");
                this.wrapper[0].setAttribute("aria-checked", false);
            }
        },

        _setIndeterminate: function (indeter) {
            if (indeter) {
                this.spanImg.removeClass("e-checkmark").addClass("e-stop");
                this.span.removeClass("e-chk-act e-chk-inact").addClass("e-chk-indeter");
                this.wrapper[0].setAttribute("aria-checked", "mixed");
                this.wrapper.find('input').prop('enableTriState', true);
                this.checkState("indeterminate");
                if (!(this.checked() instanceof Array))
                    this.checked(null);
                this._hiddenInput.setAttribute("name", this.model.name);
            }
            else {
                this.span.removeClass("e-chk-indeter");
                this.spanImg.removeClass("e-stop");
                this.wrapper.find('input').removeAttr('enableTriState');
                this.wrapper.find('input').prop('enableTriState', false);
                if (this.checked())
                    this._checked();
                else
                    this._unChecked();
            }
        },

        _setTextWrapper: function (val) {
            if (val != "") {
                this.txtSpan = ej.buildTag("div.e-text", val);
                this.wrapper.append(this.txtSpan);
                this.model.enableRTL && this._setRTL();
            }
        },

        _setText: function (val) {
            if ((this.model.text == "") && (val != "")) {
                this._setTextWrapper(val);
            } else {
                this.txtSpan.html(val);
            }
        },

        _setIdAttr: function (val) {
            $("#" + this.model.idPrefix + this.model.id + "_wrapper").attr('id', this.model.idPrefix + val + "_wrapper");
            this.element[0].setAttribute('id', val);
        },

        _isValid: function (value) {
            return (!ej.isNullOrUndefined(value) && value != "") ? true : false;
        },

        _wireEvents: function () {
            this._on(this.wrapper, "click", this._checkedHandler);
            if (this._isIE8) {
                this._isValid(this.model.id) && this._on($("label[for=" + this.model.id + "]"), "click", function () { this.wrapper.click(); });
            }
            this._on(this.wrapper, "focus", this._focusIn);
            this._on(this.wrapper, "focusout", this._focusOut);
        },


        _unWireEvents: function () {
            this._off(this.wrapper, (this._isDevice && $.isFunction($.fn.tap)) ? "tap" : "click");
            if (this._isIE8) {
                this._isValid(this.model.id) && this._off($("label[for=" + this.model.id + "]"), "click");
            }
            this._off(this.wrapper, "focus");
            this._off(this.wrapper, "focusout");
        },
        _focusIn: function (evt) {
            $(this.wrapper).addClass("e-focus");
            $(this.wrapper).on("keydown", $.proxy(this._checkUnCheck, this));
        },
        _focusOut: function (evt) {
            $(this.wrapper).removeClass("e-focus");
            $(this.wrapper).off("keydown", $.proxy(this._checkUnCheck, this));
        },
        _checkUnCheck: function (evt) {
            //Space bar to check and uncheck
            if (evt.keyCode == 32) {
                evt.preventDefault();
                this._checkedHandler();
            }
        },
        _checkedHandler: function (evt) {
            var data = { isChecked: this._isChecked, isInteraction: true, event: evt };
            if (true == this._trigger("beforeChange", data)) {
                return false;
            }
            if (this.span.hasClass("e-chk-inact")) {
                this._checked();
                if (!(this.checked() instanceof Array))
                    this.checked(true);
                if (this.model.enableTriState) {
                    this._indeterminateState = true;
                    this.checkState("check");
                }
            }
            else if (this.span.hasClass("e-chk-act")) {
                if ((this.model.enableTriState == true) && (this.model.checkState == "check") && (this.model.checked == true)){
                    this._setIndeterminate(true);
                    if (!(this.checked() instanceof Array)) {
                        this.checked(true);
                        this.checkState("indeterminate");
                    }
                } else {
                    this._unChecked();
                    if (!(this.checked() instanceof Array)) {
                        this.checked(false);
                        this.checkState("uncheck");
                    }
                }
            }
            else if (this.span.hasClass("e-chk-indeter")) {
                if (!(this.checked() instanceof Array))
                    this.checked(false);
                else
                    this._isChecked = false;
                this._setIndeterminate(false);
                this._indeterminateState = false;
            }
            if (this.checked() instanceof Array)
                this._updateCheckedItem();
            else
                this._isChecked = this.checked();
            $(this.maindiv).addClass("e-material-animate");
            var data = { isChecked: this._isChecked, checkState: this.checkState(), isInteraction: true, event: evt };
            this._trigger("change", data);
            return true;
        },


        _checked: function () {
            this.span.removeClass("e-chk-inact").addClass("e-chk-act");
            this.spanImg.removeClass("e-stop").addClass("e-checkmark");
            this.wrapper[0].setAttribute("aria-checked", true);
            this.wrapper.find('input[type=checkbox]').prop('checked', true);
            this.checkState("check");
            this._hiddenInput.removeAttribute("name");
        },


        _unChecked: function () {
            this.span.removeClass("e-chk-act e-chk-indeter").addClass("e-chk-inact");
            this.wrapper[0].setAttribute("aria-checked", false);
            this.spanImg.removeClass("e-checkmark e-stop");
            this.wrapper.find('input[type=checkbox]').prop('checked', false);
            this.checkState("uncheck");
            this._hiddenInput.setAttribute("name", this.model.name);
        },

        _setCheckedItem: function (value) {
            if (typeof(value) == "boolean" && !(value instanceof Array))
                this._isChecked = true;
            else if (value instanceof Array && !ej.isNullOrUndefined(this.model.value) && this.model.value != "") {
                for (var item = 0; item < value.length; item++) {
                    if (value[item] == this.model.value)
                        this._isChecked = true;
                }
            }
        },

        _updateCheckedItem: function () {
            var checkedValues = this.model.checked.splice === undefined ? this.model.checked() : this.model.checked;
            if (!ej.isNullOrUndefined(this.model.value) && this.model.value != "" && !this.wrapper.find("span:first").hasClass("e-chk-indeter")) {
                if (($.inArray(this.model.value, this.checked()) < 0) && this.wrapper.find("span:first").hasClass("e-chk-act")) {
                    checkedValues.push(this.model.value);
                    this._isChecked = true;
                    this._hiddenInput.removeAttribute("name");
                }
                else if (($.inArray(this.model.value, this.checked()) > -1) && this.wrapper.find("span:first").hasClass("e-chk-inact")) {
                    this._isChecked = false;
                    checkedValues.splice($.inArray(this.model.value, this.model.checked()), 1);
                    this._hiddenInput.setAttribute("name", this.model.name);
                }
            }
        }, 
 

        disable: function () {
            if (!this.wrapper.hasClass("e-disable")) {
                this.wrapper.addClass("e-disable");
                this.wrapper[0].setAttribute("aria-disabled", true);
                this.element[0].setAttribute("disabled", "disabled");
                if (this._isIE8) this.span.addClass("e-disable");
                this._unWireEvents();
                this.model.enabled = false;
            }
        },

        enable: function () {
            if (this.wrapper.hasClass("e-disable")) {
                this.wrapper.removeClass("e-disable");
                this.wrapper[0].setAttribute("aria-disabled", false);
                this.element.prop("disabled", false);
                if (this._isIE8) this.span.removeClass("e-disable");
                this._wireEvents();
                this.model.enabled = true;
            }
        },

        isChecked: function () {
            if ((this._isChecked != null) && (this._isChecked != undefined))
                return this._isChecked;
        }
    });

    ej.CheckboxSize = {
        /**  Creates checkbox with inbuilt small size height, width specified */
        Small: "small",
        /**  Creates checkbox with inbuilt medium size height, width specified */
        Medium: "medium"
    };

    ej.CheckState = {
        /**  Specifies the Check attribute of the Checkbox */
        Check: "check",
        /**  Specifies the Uncheck attribute of the Checkbox */
        Uncheck: "uncheck",
        /**  Specifies the Indeterminate state of the Checkbox */
        Indeterminate: "indeterminate"
    };
})(jQuery, Syncfusion);;;
(function ($, ej, undefined) {

    ej.widget("ejPager", "ej.Pager", {
        _rootCSS: "e-pager",
        validTags: ["div"],
        // default model
        defaults: {
            pageSize: 12,
            pageSizeList: null,
            pageCount: 10,
            currentPage: 1,
            enableExternalMessage: false,
            externalMessage: "",
            pageSizeMessage: "",
            enableQueryString: false,
            locale: "en-US",
            masterObject: null,
            pageSizeSelected: null,
            enableRTL: false,
            totalRecordsCount: null,
            totalPages: null,
            customText: "",
            showPageInfo: true,
            cssClass: "",
            enabled: true,
            showGoToPage: false,
            isResponsive: false,
            change: null,
            click: null,
			template: "",
        },

        // constructor function
        _init: function () {
            this._index = - 1;
            this.element.attr("role","navigation");
            this.element.attr("tabindex","0");
            this.element.attr("aria-label","pager");
            this._initPrivateProperties();
            this.model.enableQueryString && this._queryStringValue();
            this.renderPager();
            if (this.model.isResponsive) this._reSizeHandler();
            this._wireResizing();
            this._wireEvents();
            this.refreshPager();
        },
        _initPrivateProperties: function () {
            if (typeof (this.model.pageSizeList) == "string")
                this.model.pageSizeList = JSON.parse(this.model.pageSizeList);
            this._pageSize = this.model.pageSize;
            this._links = [];
            this._$prev = null;
            this._$first = null;
            this._$PP = null;
            this._$NP = null;
            this._lastNP = false;
            this._lastpageCount = null;
            this._$last = null;
            this._$next = null;
            this._prevPageNo = 1;
            this.localizedLabels = this._getLocalizedLabels();
            this._intervalWid = 0;
            this._msgWidth = 0;
            this._gotoWid = 0;
			this._temp = this.model.template;
        },
        _wireEvents: function () {
            var proxy = this;
            this._on(this.element, "click", this._pagerClickHandler);
            $(document).on("click", $.proxy(proxy._hidedrop, proxy));
			if(this._pagerContainer){
			this._touchPrev = false;
            this._pagerContainer.on("touchstart",this._touchHandler);
            this._pagerContainer.on("keydown",this._pagerClickHandler.bind(this));
			this._pagerContainer.on("mouseover",this._mouseOverHandler);
			this._pagerContainer.on("mouseout",this._mouseOutHandler);
			}
			
        },
		_touchHandler: function(e){
			this._touchPrev = true;
		},
		 _mouseOverHandler: function (e) {
				if(this._touchPrev == false){
					var $target = $(e.target);
					if (($target.hasClass("e-icon") || $target.hasClass("e-link")) && !$target.hasClass("e-hover")) {
						$target.addClass("e-hover")
					}
				}
				this._touchPrev = false;
		},
		_mouseOutHandler: function (e) {
            var $target = $(e.target);
			if (($target.hasClass("e-icon") || $target.hasClass("e-link")) && $target.hasClass("e-hover")) {
				$target.removeClass("e-hover")
			}
		},
        _hidedrop: function (e) {
			if($(e.target.parentElement).hasClass("e-drpdwndiv") || $(e.target).hasClass("e-drpdwndiv")) return;
            if (this.$dropItem && this.$dropItem.css("display") != "none") this.$dropItem.hide();
        },
        _wireResizing: function () {
            this._refreshDropandTextItems();
            $(window).bind('resize', (this.model.isResponsive) ? $.proxy(this._reSizeHandler, this) : $.proxy(this._unWireResizing, this));
        },
        _unWireResizing: function () {
            this._refreshDropandTextItems();
            if (this.$dropItem) if (this.$dropItem.css("display") != "none") this.$dropItem.hide();
            $(window).unbind('resize', $.proxy(this._reSizeHandler, this));
        },
        _reSizeHandler: function () {
            if (this.$dropItem) if (this.$dropItem.css("display") != "none") this.$dropItem.hide();
            var controlwidth = this._intervalWid + this._gotoWid + this.element.find('.e-pagercontainer').outerWidth() + this._msgWidth;
            if (controlwidth > (this.element.outerWidth() - 20)) { if (this._msgWidth > 0) this.element.find(".e-parentmsgbar").addClass("e-msg-res"); }
            else if (this._msgWidth > 0) this.element.find(".e-parentmsgbar").removeClass("e-msg-res");
            if (this.element.outerWidth() - $(this.element.find(".e-pagercontainer")).outerWidth() < 40) {
                this._flag = true;
                this._fillScreen();
            }
            if (this.element.outerWidth() - $(this.element.find(".e-pagercontainer")).outerWidth() > 40) {
				if(!$(this._templateElement).find(".e-textbox-paging").length > 0)
				if(!this._maxPageCount) this._maxPageCount = this.model.pageCount;
                this.option("pageCount", this._maxPageCount);
                if (this.element.outerWidth() - $(this.element.find(".e-pagercontainer")).outerWidth() < 40) {
                    this._flag = true;
                    this._fillScreen();
                }
            }
            this._refreshDropandTextItems();
        },
        _refreshDropandTextItems: function () {
            if (this.numTextbox && !this.model.template) {
                if (this.element.find('.e-pagercontainer').position().top != this.element.find(".e-parentmsgbar").position().top) {
                    this.numTextbox.addClass("e-pager-goto-res");
                }
                else this.numTextbox.removeClass("e-pager-goto-res");
            }
            if (this.pageInterval_wrap && !this.model.template) {
                if (this.element.find('.e-pagercontainer').position().top != this.element.find(".e-pager-itemsinterval").position().top) {
                    this.element.find(".e-pager-itemsinterval").addClass("e-pager-goto-res");
                }
                else this.element.find(".e-pager-itemsinterval").removeClass("e-pager-goto-res");
            }


        },
        renderPager: function () {
			var  tempElement;
			if(!this.model.template){
            var $pagerContainer = ej.buildTag('div.e-pagercontainer', "", {});
			this._pagerContainer = $pagerContainer;
            this._renderPagerContainer($pagerContainer);
            this.element[0].appendChild($pagerContainer[0]);
			}
			else{
			this._templateElement = ej.buildTag('div.e-template',"",{});
			if (this.model.template.startsWith(".") || this.model.template.startsWith("#"))
			tempElement = $($(this.model.template).html());
			else tempElement = $(this.model.template);
			tempElement.appendTo(this._templateElement);
			if($(this._templateElement).find(".e-default-paging").length > 0){
				var $pagerContainer = ej.buildTag('div.e-pagercontainer', "", {});
				this._renderPagerContainer($pagerContainer);
				$pagerContainer.appendTo($(this._templateElement).find(".e-default-paging"));
			}
			if($(this._templateElement).find(".e-textbox-paging").length > 0){
		 	    var proxy = this;
				var accessTemplatePagerContainer = $(this._templateElement).find(".e-textbox-paging");
				accessTemplatePagerContainer.addClass("e-pagercontainer");
				var accesFirstPage = ej.buildTag('div.e-firstpage e-icon e-mediaback  e-firstpagedisabled e-disable', "", {}, { title: proxy.localizedLabels.firstPageTooltip, "aria-label": proxy.localizedLabels.firstPageTooltip, role:"link" });
				var accesPrevPage = ej.buildTag('div.e-prevpage e-icon e-arrowheadleft-2x  e-prevpagedisabled e-disable', "", {}, {  title: proxy.localizedLabels.previousPageTooltip, "aria-label": proxy.localizedLabels.previousPageTooltip, role:"link" });
				var numInput = ej.buildTag("input.e-gototextbox", {}, { "type": "textbox" });
				var accesNextPage = ej.buildTag('div.e-nextpage e-icon e-arrowheadright-2x  e-default', "", {}, { title: proxy.localizedLabels.nextPageTooltip, "aria-label": proxy.localizedLabels.nextPageTooltip,  role:"link"});
				var accesLastPage = ej.buildTag('div.e-lastpage e-icon e-mediaforward  e-default', "", {}, { title: proxy.localizedLabels.lastPageTooltip, "aria-label": proxy.localizedLabels.lastPageTooltip, role:"link" });
				var accesNewRecord = ej.buildTag('div.e-newrecord e-icon e-plus e-default', "", {}, { title: "Add New Record", "aria-label": "Add New Record", role:"button" });
				accessTemplatePagerContainer.append(accesFirstPage);
				accessTemplatePagerContainer.append(accesPrevPage);
				accessTemplatePagerContainer.append(numInput);
				accessTemplatePagerContainer.append(accesNextPage);
				accessTemplatePagerContainer.append(accesLastPage);
				accessTemplatePagerContainer.append(accesNewRecord);
				numInput.focus(function(){
					numInput.val(proxy.model.currentPage);
				});
			}
			var element = this.element;
			$(this._templateElement).addClass("e-template");
			this._pagerContainer = $pagerContainer = $(this._templateElement).find(".e-pagercontainer") ? $(this._templateElement).find(".e-pagercontainer") : $(this._templateElement);
				element.append($(this._templateElement));
				if($(this._templateElement).find(".e-prevpage").length > 0) this._$prev = $(this._templateElement).find(".e-prevpage");
				if($(this._templateElement).find(".e-nextpage").length > 0) this._$next = $(this._templateElement).find(".e-nextpage");
				if($(this._templateElement).find(".e-firstpage").length > 0) this._$first = $(this._templateElement).find(".e-firstpage");
				if($(this._templateElement).find(".e-lastpage").length > 0) this._$last = $(this._templateElement).find(".e-lastpage");
				if($(this._templateElement).find(".e-gototextbox").length > 0) {
				this.numTextbox = $(this._templateElement).find(".e-gototextbox").addClass("e-pager-goto-res e-textbox").attr("type","textbox");
				if(!$(this._templateElement).find(".e-textbox-paging").length > 0)this.numTextbox.width(35);
				this._on($(this.numTextbox), 'keydown', this._mouseScroll);
				this._on(this.numTextbox, 'focusout', this._onTextboxBlur);
				}
				if(this._$prev &&(this._$prev).hasClass("e-prevpagedisabled")) this._$prev.removeClass("e-prevpage");
				if(this._$last &&(this._$last).hasClass("e-lastpagedisabled")) this._$prev.removeClass("e-lastpage");
				if(this._$first && (this._$first).hasClass("e-firstpagedisabled")) this._$prev.removeClass("e-firstpage");
				if(this._$next &&(this._$next).hasClass("e-nextpagedisabled")) this._$prev.removeClass("e-nextpage");
				if($(this._templateElement).find(".e-drpdwndiv").length > 0 && this.model.pageSizeList) this._renderDropdownlist();
				this._templatePageCount = $(this._templateElement).find(".e-pagenumbers").length;
				if( this._templatePageCount > 1){
					proxy =this;
					if($(this._templateElement).find(".e-previouspager").length > 0){
						this._$PP = $(this._templateElement).find(".e-previouspager").addClass("e-nextprevitemdisabled e-disable e-spacing e-PP");
					} 
					if($(this._templateElement).find(".e-nextpager").length > 0){
						this._$NP = $(this._templateElement).find(".e-nextpager").addClass("e-NP e-spacing e-nextprevitemdisabled e-disable");
					} 
					$(this._templateElement).find(".e-pagenumbers").each(function(index){
						$(this).attr("role","link").addClass("e-numericitem e-spacing e-default").data("index",index);
					});
					proxy._links = $(this._templateElement).find(".e-numericitem[role=link]");
			    }
			}
            if (!this.model.enabled) this._disable();
			if (this.model.pageSizeList && this.model.pageSizeList.length > 0) this._renderDropdownlist();
			this._pageInfo();
			this.model.enableExternalMessage && this._renderPagerMessage();
			if (this.model.showGoToPage) this._renderTextboxItem();
			if (this.model.enableRTL) this.element.addClass("e-rtl");
            this._cssClass = this.model.cssClass; this.element.addClass(this.model.cssClass);
        },
		_onTextboxBlur: function (e) {
				var proxy = this;
                e.currentTarget.value = parseInt(e.currentTarget.value);
                var regEx = /^[0-9]*$/;
                var flag = regEx.test(parseInt(e.currentTarget.value));
                if (!flag) {
                    proxy.numTextbox.val(proxy.model.currentPage)
                    return false;
                }
                if (proxy.model.currentPage != parseInt(e.currentTarget.value)) {
                    if (parseInt(e.currentTarget.value) >= 1 && parseInt(e.currentTarget.value) <= proxy.model.totalPages) {
                        proxy.model.currentPage = parseInt(e.currentTarget.value);
                        proxy.refreshPager();
                        if (proxy._prevPageNo != proxy.model.currentPage)
                            proxy._trigger("change", { "currentPage": proxy.model.currentPage, "isInteraction": true, "event": e });
                    }
                    else proxy.numTextbox.val(this.model.currentPage);
                }
				if($(this._templateElement).find(".e-textbox-paging").length > 0){
				this.numTextbox.val(this.model.currentPage+ " of " +this.model.totalPages);
				}
            },
        _removeDropdownlist: function () {
            this.pageInterval_wrap.remove();
            this.pageInterval_wrap = null;
            this.$textspan = null;
            this.$dropItem = null;
        },
        _renderDropdownlist: function () {
            var proxy = this;
            this.pageInterval_wrap = ej.buildTag('div.e-pager-itemsinterval', "", {}, {"tabindex":"0", "aria-label":"PageSizeList Dropdown", role:"listbox" , "aria-expanded":false, "aria-haspopup": true, "aria-owns": proxy.element[0].id + "_pagelist"});
			if(this.model.template && $(this._templateElement).find(".e-drpdwndiv").length > 0){
				var pageDrop_wrap = $(this._templateElement).find(".e-drpdwndiv").addClass("e-icon e-arrow-sans-down");
			}
			else var pageDrop_wrap = ej.buildTag('div.e-drpdwndiv e-icon e-arrow-sans-down', "", {});
            if (proxy.model.totalRecordsCount == null || proxy.model.totalRecordsCount == 0) {
                pageDrop_wrap.addClass("e-disable");
            }
            this.$textspan = ej.buildTag('span.e-text');
            this.sizeIntervals = this.model.pageSizeList;
			if(proxy.model.template) var prevElement = ($(proxy._templateElement).find(".e-drpdwndiv").prev().length > 0) ? $(proxy._templateElement).find(".e-drpdwndiv").prev(): $(proxy._templateElement);
            pageDrop_wrap.appendTo(this.pageInterval_wrap);
			if(proxy.model.template) prevElement.after(this.pageInterval_wrap);
            else this.pageInterval_wrap.appendTo(this.element);
            this.pageInterval_wrap.insertBefore(this._parentMsgBar);
            this.$textspan.appendTo(pageDrop_wrap);
            proxy.$textspan.text(this.model.pageSize || this.model.pageSizeList[0]);
            this.$dropItem = ej.buildTag('ul.e-drpdwn e-ul', "", {}, {role:"list", id:proxy.element[0].id + "_pagelist", tabindex:"-1"});
            this._renderItems();
            this.$dropItem.appendTo(pageDrop_wrap);            
            this._renderPageSizeMessage();
            pageDrop_wrap.on("click", function () {
                proxy._showPageDropdown(proxy, pageDrop_wrap);
            });
            proxy.pageInterval_wrap.on("keydown", function (e) {
                if(e.altKey && e.keyCode == 40){
                    proxy._showPageDropdown(proxy, pageDrop_wrap);
                }
                else if(!e.altKey && e.keyCode == 40 && proxy.$dropItem.css("display") != "none"){
                    proxy._index = proxy._index + 1;
                    if(proxy._index >= $(proxy.$dropItem.find("li")).length){
                        proxy._index = $(proxy.$dropItem.find("li")).length - 1;
                    }
                    $(proxy.$dropItem).find("li.e-hover").removeClass("e-hover");
                    $(proxy.$dropItem.find("li")[proxy._index]).addClass("e-hover");
                    $(proxy.$dropItem.find("li")[proxy._index]).focus();
                }
                else if(!e.altKey && e.keyCode == 38 && proxy.$dropItem.css("display") != "none"){
                    proxy._index = proxy._index - 1;
                    if(proxy._index < 0) proxy._index = 0;
                    $(proxy.$dropItem).find("li.e-hover").removeClass("e-hover");
                    $(proxy.$dropItem.find("li")[proxy._index]).addClass("e-hover");
                    $(proxy.$dropItem.find("li")[proxy._index]).focus();
                }
                else if(!e.altKey && e.keyCode == 13 && proxy.$dropItem.css("display") != "none"){
                    $(proxy.$dropItem).find("li.e-active").removeClass("e-active");
                    $(proxy.$dropItem.find("li")[proxy._index]).addClass("e-active").removeClass("e-hover");
                    proxy._pageSize = parseInt($(proxy.$dropItem.find("li")[proxy._index]).text());
                    proxy.$textspan.text($(proxy.$dropItem.find("li")[proxy._index]).text());
                    proxy._updatedFromDropDown(proxy);
                    proxy.$dropItem.hide();
                    proxy.pageInterval_wrap.focus();
                }
            });
            this.$dropItem.hide();
            this._intervalWid = this.element.find('.e-pager-itemsinterval').outerWidth();
        },
		_getOffset: function (ele) {
			return ej.util.getOffset(ele);
        },
        
        _showPageDropdown: function (proxy, pageDrop_wrap) {
            if (proxy.$dropItem.css("display") != "none") {
                proxy.$dropItem.hide();
                this.pageInterval_wrap.attr("aria-expanded", false);
            }
            else if (proxy.model.enabled && !pageDrop_wrap.hasClass("e-disable")) {
                this.pageInterval_wrap.attr("aria-expanded", true);
                proxy.$dropItem.show();
                proxy._setListPosition();
            }
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.pageInterval_wrap, this.$dropItem);
        },

		_setListPosition: function () {
            var elementObj = this.pageInterval_wrap, pos = this._getOffset(elementObj),
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.$dropItem.outerHeight(),
            popupWidth = this.$dropItem.outerWidth(),
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()),
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? this.$dropItem.position().top : -(popupHeight+border+popupmargin));
            this.$dropItem.css({
                "top": (topPos) + "px",
                "z-index": maxZ
            });
        },
        _renderPageSizeMessage: function () {
            if (!this.pageInterval_wrap.children().hasClass("e-interval-msg")) {
                this._msgwrapper = ej.buildTag('div.e-interval-msg');
            }
            this._msgwrapper.appendTo(this.pageInterval_wrap);
            if (this.model.pageSizeMessage.toString().length) {
                this._msgwrapper.html(this.model.pageSizeMessage);
                if (this._msgwrapper.css('display') == 'none') this._msgwrapper.show();
            }
            else {
                this._msgwrapper.remove();
            }
        },
        _renderItems: function () {
            var proxy = this;
            $(this.model.pageSizeList).each(function () {
                var li = ej.buildTag('li');
                li.text(this);
                li.attr("aria-label",this.toString());
                li.attr("role","listitem");
                li.attr("tabindex","-1");
                proxy.$dropItem.append(li);
                if (proxy.model.pageSize == this) {
                    li.addClass("e-active");
                }
            });
            this.$dropItem.find("li").on("click", function (e) {
                proxy.$dropItem.find("li.e-active").removeClass("e-active");
                $(this).addClass("e-active");
                proxy._pageSize = parseInt($(this).text());
                proxy.$textspan.text($(this).text());
                proxy._updatedFromDropDown(proxy);
            });
        },

        _updatedFromDropDown: function(proxy){
            proxy.refreshPager();
            proxy._trigger("pageSizeSelected", { pageSize: proxy._pageSize });
            if (proxy._prevPageNo != proxy.model.currentPage)
                proxy._trigger("change", { "currentPage": proxy.model.currentPage, "isInteraction": true, "event": e });
        },
        _queryStringValue: function () {
            var results = new RegExp('[\\?&]page=([^&#]*)').exec(window.location.href);
            !results ? this.model.currentPage = 1 : this.model.currentPage = parseInt(results[1] || 1);
        },
        _renderPagerMessage: function () {
            if (this.element.find('e-pagermessage').length<=1) {
                this._messageDiv = ej.buildTag('div.e-pagermessage');
            }
            if (this.model.externalMessage.toString().length) {
                this._messageDiv.html(this.model.externalMessage);
                if (this._messageDiv.css('display') == 'none') this._messageDiv.show();
            }
            else
                this._messageDiv.hide();
            this.element.append(this._messageDiv);
        },
        _removePagerMessage: function () {
            this.element.find("div.e-pagermessage").remove();
        },
        _mouseScroll: function (event) {
		if(this.model.enabled){
            var delta;
            if (event.keyCode == "38")
                this._updateField("increment");
            else if (event.keyCode == "40")
                this._updateField("decrement");
			else if(event.keyCode == "13"){
				this._onTextboxBlur(event);
			}
				}
			
        },
        _updateField: function (operation) {
            var preval = this.model.currentPage;
            var step = 1;
            if (this.numTextbox.val() == "") this.numTextbox.val(1);
            else if (this.numTextbox.val().indexOf(" ") >= 1)
                this.numTextbox.val(this.numTextbox.val().replace(" ", ""));
            this.model.currentPage = ej.parseInt(this.numTextbox.val(), this.model.locale);
            if (isNaN(this.model.currentPage) && !this.model.currentPage) this.model.currentPage = 1;
            if (this.model.currentPage >= 1 && this.model.currentPage > this.model.totalPages) {
                this.model.currentPage = this.model.totalPages;
                this.numTextbox.val(this.model.currentPage);
            }
            else if (this.model.currentPage < 1 && this.model.currentPage <= this.model.totalPages) {
                this.model.currentPage = 1;
                this.numTextbox.val(this.model.currentPage);
            }
            else if (this.model.currentPage >= 1 && this.model.currentPage <= this.model.totalPages) {
                var value = operation == "increment" ? this.model.currentPage + step : this.model.currentPage - step;
                if (value >= 1 && value <= this.model.totalPages) {
                    this.numTextbox.val(value);
                    this.model.currentPage = value;
                }
            }
            this.refreshPager();
            if (preval != this.model.currentPage) {
                this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": true, "event": event });
            }
        },
        _renderTextboxItem: function () {
            var proxy = this;
            var numInput = ej.buildTag("input#" + this.element[0].id + "_numtext", "", {}, { "type": "textbox", "role":"textbox", "aria-label": "Go to Textbox" });
            $(numInput).appendTo(this._parentMsgBar).insertBefore($(this._parentMsgBar).find("span"));
            this.numTextbox = numInput;
            this.numTextbox.height(this.element.find('.e-pagercontainer .e-numericcontainer a').outerHeight());
            this.numTextbox.width(35);
            this.numTextbox.addClass('e-gototextbox e-textbox');
            if (!this.model.showGoToPage) this.numTextbox.hide();
            this._gotoWid = $(this.numTextbox).outerWidth();
            this._on($(this.numTextbox), 'keydown', this._mouseScroll);
            this._on(this.numTextbox, 'focusout', this._onTextboxBlur);
        },
        _renderPagerContainer: function ($pagerContainer) {
            //Update pager styles here for next versions
            this._renderBackwardButton($pagerContainer);
            this._renderpreviousPager($pagerContainer);
            this._renderNumericItem($pagerContainer);
            this._renderForwardPager($pagerContainer);
            this._renderForwardButton($pagerContainer);
        },
        _renderMsgBar: function () {
            var $msgBar = ej.buildTag('span.e-pagermsg', String.format(this.localizedLabels.pagerInfo, this.model.currentPage, this.model.totalPages || 0, this.model.totalRecordsCount || 0));
            this._parentMsgBar.appendChild($msgBar[0]);
            this._parentMsgBar.style.textAlign = ej.TextAlign.Right;
        },
        _renderpreviousPager: function ($pagerContainer) {
            this._$PP = ej.buildTag('a.e-link e-nextprevitemdisabled e-disable e-spacing e-PP', "...", {}, { title: this.localizedLabels.previousPagerTooltip, "aria-label": this.localizedLabels.previousPagerTooltip});
            this._$PP.attr("tabindex","0");
            $pagerContainer.append(this._$PP);
        },
        _renderForwardPager: function ($pagerContainer) {
            this._$NP = ej.buildTag('a.e-link e-NP e-numericitem e-spacing e-default', "...", {}, { title: this.localizedLabels.nextPagerTooltip, "aria-label": this.localizedLabels.nextPagerTooltip });
            this._$NP.attr("tabindex","0");
            $pagerContainer.append(this._$NP);
        },
        _renderBackwardButton: function ($pagerContainer) {
            this._$first = ej.buildTag('div.e-firstpage e-icon e-mediaback  e-firstpagedisabled e-disable', "", {}, { title: this.localizedLabels.firstPageTooltip, "aria-label": this.localizedLabels.firstPageTooltip, role:"link" });
            this._$prev = ej.buildTag('div.e-prevpage e-icon e-arrowheadleft-2x  e-prevpagedisabled e-disable', "", {}, {  title: this.localizedLabels.previousPageTooltip, "aria-label": this.localizedLabels.previousPageTooltip, role:"link" });
            this._$first.attr("tabindex", "0");
            this._$prev.attr("tabindex", "0");
            $pagerContainer.append(this._$first);
            $pagerContainer.append(this._$prev);
        },
        _renderNumericItem: function ($pagerContainer) {
            var $numericContainer = ej.buildTag('div.e-numericcontainer e-default', "", {});
            this._renderNumericLinks($numericContainer, this.model.pageCount);
            $pagerContainer.append($numericContainer);
            this._maxPageCount = this.model.pageCount;
        },
        _renderNumericLinks: function ($numericContainer) {
            $numericContainer.empty();
            this.model.pageCount = Math.round(this.model.pageCount);
            this.model.customText != "" ? $numericContainer.addClass("e-customtext") : $numericContainer.removeClass("e-customtext");
            for (var page = 1; page <= this.model.pageCount; page++) {
                var $link = ej.buildTag('a.e-link', this.model.customText + page, {}, { role: "link", "aria-label": "Go To page " + page.toString() }).addClass("e-numericitem e-spacing e-default").data("index", page);
                $link.attr("tabindex", "0");
                if (page == this.model.currentPage){
                    $link.removeClass("e-default").addClass("e-currentitem e-active");
                }
                    
                $numericContainer.append($link);
            }
            this._links = $numericContainer.children();
        },
        _renderForwardButton: function ($pagerContainer) {
            this._$next = ej.buildTag('div.e-nextpage e-icon e-arrowheadright-2x  e-default', "", {}, { title: this.localizedLabels.nextPageTooltip ,role:"link", "aria-label": this.localizedLabels.nextPageTooltip });
            this._$last = ej.buildTag('div.e-lastpage e-icon e-mediaforward  e-default', "", {}, { title: this.localizedLabels.lastPageTooltip, role:"link", "aria-label": this.localizedLabels.lastPageTooltip });
            this._$next.attr("tabindex", "0");
            this._$last.attr("tabindex", "0");
            $pagerContainer.append(this._$next);
            $pagerContainer.append(this._$last);

        },
        _setLocale: function () {
            this.localizedLabels = this._getLocalizedLabels();
            this._$first.attr("title", this.localizedLabels.firstPageTooltip);
            this._$prev.attr("title", this.localizedLabels.previousPageTooltip);
            this._$next.attr("title", this.localizedLabels.nextPageTooltip);
            this._$last.attr("title", this.localizedLabels.lastPageTooltip);
            this._$NP.attr("title", this.localizedLabels.nextPagerTooltip);
            this._$NP.attr("title", this.localizedLabels.previousPagerTooltip);
            this._$first.attr("aria-label", this.localizedLabels.firstPageTooltip);
            this._$prev.attr("aria-label", this.localizedLabels.previousPageTooltip);
            this._$next.attr("aria-label", this.localizedLabels.nextPageTooltip);
            this._$last.attr("aria-label", this.localizedLabels.lastPageTooltip);
            this._$NP.attr("aria-label", this.localizedLabels.nextPagerTooltip);
            this._$NP.attr("aria-label", this.localizedLabels.previousPagerTooltip);
        },
        _applyCss: function () {
            if (this.model.totalRecordsCount == null) {
                if(this._$prev)this._$prev.addClass("e-prevpagedisabled e-disable").removeClass("e-prevpage").removeClass("e-default");
                if(this._$first)this._$first.addClass("e-firstpagedisabled e-disable").removeClass("e-firstpage").removeClass("e-default");
                if(this._$last)this._$last.addClass("e-lastpagedisabled e-disable").removeClass("e-lastpage").removeClass("e-default");
                if(this._$next)this._$next.addClass("e-nextpagedisabled e-disable").removeClass("e-nextpage").removeClass("e-default");
                if(this._$NP)this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
                if (this.model.pageSizeList) {
                    this.element.find(".e-drpdwndiv").addClass("e-disable");
                }
                return;
            }
            else {
                if (this.model.totalRecordsCount == 0 && this.model.pageSizeList) {
                    this.element.find(".e-drpdwndiv").addClass("e-disable");
                }
                else if (this.model.totalRecordsCount != 0 && this.model.pageSizeList && this.element.find(".e-drpdwndiv").hasClass("e-disable")) {
                    this.element.find(".e-drpdwndiv").removeClass("e-disable");
                }
                if (this.model.currentPage > 1 && this._$prev && this._$first) {
                    this._$prev.removeClass("e-prevpagedisabled").removeClass("e-disable").addClass("e-prevpage e-default");
                    this._$first.removeClass("e-firstpagedisabled").removeClass("e-disable").addClass("e-firstpage e-default");
                } else {
                    if(this._$prev)this._$prev.addClass("e-prevpagedisabled e-disable").removeClass("e-prevpage").removeClass("e-default");
                    if(this._$first)this._$first.addClass("e-firstpagedisabled e-disable").removeClass("e-firstpage").removeClass("e-default");
                }
				if(this._$PP){
                (this.model.currentPage > this.model.pageCount) ?(this._$PP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default")) : (this._$PP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default"));}

                if (this._links.length && parseInt(this._links[0].innerHTML.replace(this.model.customText, ""), 10) + this.model.pageCount > this.model.totalPages)
                    this._lastNP = true;
                else
                    this._lastNP = false;

                if (this._lastNP == false)
                    if(this._$NP)this._$NP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default");
                else
                    if(this._$NP)this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");

                this._lastpageCount = this.model.totalPages % this.model.pageCount;
                if (this._lastpageCount == 0)
                    this._lastpageCount = this.model.pageCount;
                if (this.model.currentPage > (this.model.totalPages - this._LastpageCount)) {
                    if(this._$PP)this._$PP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default");
                    if(this._$NP)this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
                }
                if (this.model.currentPage == this.model.totalPages || this.model.totalRecordsCount == 0) {
                    if(this._$last)this._$last.addClass("e-lastpagedisabled e-disable").removeClass("e-lastpage").removeClass("e-default");
                    if(this._$next)this._$next.addClass("e-nextpagedisabled e-disable").removeClass("e-nextpage").removeClass("e-default");
                    if(this._$NP)this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
                } else {
                    if(this._$last)this._$last.addClass("e-lastpage e-default").removeClass("e-lastpagedisabled").removeClass("e-disable");
                    if(this._$next)this._$next.addClass("e-nextpage e-default").removeClass("e-nextpagedisabled").removeClass("e-disable");
                }
                if (this._links.length) {
                    this._links.removeClass("e-currentitem").removeClass("e-active").addClass("e-default");
                    $(this._links[(this.model.currentPage - 1) % this.model.pageCount]).removeClass("e-default").addClass("e-currentitem e-active");
                    $(this._links[(this._prevPageNo - 1) % this.model.pageCount]).removeClass("e-default").addClass("e-numericitem");
                }
                if (this._pageSize >= (this.model.totalRecordsCount / this.model.pageCount) && this._$PP != null && this._$PP.length != 0) {
                    this._$PP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
                    this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
                }
            }
        },
        _SetTotalPages: function () {
            this.model.totalPages = (this.model.totalRecordsCount % this._pageSize == 0) ? (this.model.totalRecordsCount / this._pageSize) : (parseInt(this.model.totalRecordsCount / this._pageSize, 10) + 1);
        },
        _refreshNumericItem: function () {
            if (this._links.length != 0 && this._links != null) {
                this.model.currentPage = this.model.totalPages == 1 ? 1 : this.model.currentPage;
                if (this.model.currentPage > this.model.totalPages && this.model.totalPages != 0)
                    this.model.currentPage = this.model.totalPages;
                var _pagerTarget = parseInt(this.model.currentPage / this.model.pageCount, 10);
                if (this.model.currentPage % this.model.pageCount == 0)
                    if (_pagerTarget > 0)
                        _pagerTarget = _pagerTarget - 1;
                this._links.css("display", "none");
                for (var i = 0; i < this.model.pageCount; i++) {
                    var start = (_pagerTarget * this.model.pageCount) + 1 + i;
                    if (start <= this.model.totalPages) {
                        this._links[i].style.display = '';
                        $(this._links[i]).data('index', start);
                        $(this._links[i]).html(this.model.customText + start);
                        $(this._links[i]).attr("aria-label", "Go to page " + start.toString());
                    }
                }
            }
        },
        _refreshPagerInfo: function () {
            if (this.model.totalRecordsCount == 0)
                this.model.currentPage = 0;
            this.element.find(".e-pagermsg").text(String.format(this.localizedLabels.pagerInfo, this.model.currentPage, this.model.totalPages || 0, this.model.totalRecordsCount || 0));
        },
        _refreshExternalMessage: function () {
            if (this.model.externalMessage.toString().length)
                this.element.find(".e-pagermessage").empty().html(this.model.externalMessage).show();
            else
                this.element.find(".e-pagermessage").hide();
        },
        refreshPager: function () {
			if(this._templateElement) this._links = $(this._templateElement).find(".e-numericitem[role=link]");
            this._SetTotalPages();
            this._refreshNumericItem();
            this._refreshPagerInfo();
            this._applyCss();
            this.model.enableExternalMessage && this._refreshExternalMessage();
            if (this.model.enableRTL)
                this.element.addClass("e-rtl");
            else
                this.element.removeClass("e-rtl");
            if (this.numTextbox) {
			if($(this._templateElement).find(".e-textbox-paging").length > 0){
				if(this.model.currentPage > this.model.totalPages && this.model.totalPages != 0){
					this.model.currentPage = this.model.totalPages;
				}
				 if (!this.numTextbox.is(':focus')) this.numTextbox.val(String.format("{0} of {1}", this.model.currentPage, this.model.totalPages));
			}
			else this.numTextbox.val(this.model.currentPage);
			}
			
			if(this._temp !== "" && !ej.isNullOrUndefined(this._temp)){
				if ((this._temp.startsWith(".") || this._temp.startsWith("#")) && $(this._temp)[0] != null && $(this._temp)[0] != undefined) {
					this.option("template",$(this._temp).render([this.model]));
				}
			}
        },

        _kDownHandler: function (e) {
            var code;
            if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
            else if (e.which) code = e.which; // ns4 and opera
            else code = e.charCode;
            e.target = null;
            if (this.model.masterObject.checkKey("firstPage", code, e))
                e.target = this._$first;
            else if (this.model.masterObject.checkKey("previousPager", code, e))
                e.target = this._$PP;
            else if (this.model.masterObject.checkKey("previousPage", code, e))
                e.target = this._$prev;
            else if (this.model.masterObject.checkKey("lastPage", code, e))
                e.target = this._$last;
            else if (this.model.masterObject.checkKey("nextPager", code, e))
                e.target = this._$NP;
            else if (this.model.masterObject.checkKey("nextPage", code, e))
                e.target = this._$next;
            else
                return false;
            this._pagerClickHandler(e);
        },
        _pageInfo: function ($pagerContainer) {
            if ((this.model.showPageInfo || this.model.showGoToPage) && !this._parentMsgBar) {
                this._parentMsgBar = document.createElement("div");
                this._parentMsgBar.className += "e-parentmsgbar";
                if (this.model.showPageInfo)
                    this._renderMsgBar();
                this.element[0].appendChild(this._parentMsgBar);
                this.element[0].className += this.model.enableRTL ? " e-pager e-rtl" : " e-pager";
            } else if (!this.model.showPageInfo && !this.model.showGoToPage) {
                this._parentMsgBar && this._parentMsgBar.remove();
                this._parentMsgBar = null;
            }
            else $(this._parentMsgBar).find(".e-pagermsg").remove();
            this._msgWidth = $(this._parentMsgBar).outerWidth()
        },
        _doClickAnimation: function (event) {
            var element = $(event.target);
            if (element == undefined || event.type == undefined) return;
            element.addClass("e-animate");
        },
        _pagerClickHandler: function (e) {
            if (!this.model.enabled) return false;
            if (e.type == "keydown" && e.keyCode != 13) {
                return;
            }
            this._prevPageNo = this.model.currentPage;
            var $target = $(e.target);
            this.element.find(".e-animate").removeClass("e-animate");
            this._doClickAnimation(e);
            if ($.inArray(e.target, this._links) != -1) {
                this.model.currentPage = parseInt($(e.target).data("index"), 10);
            }
            else if ($target.hasClass("e-nextpage") && $target.hasClass("e-nextpagedisabled") != true) {
                if (this.model.currentPage % this.model.pageCount == 0) {
                    this.model.currentPage++;
                    if (this._links != undefined && this._links.length != 0)
                        this.model.currentPage = parseInt($(this._links[0]).data("index"), 10) + this.model.pageCount;
                    if (this.model.currentPage + this.model.pageCount >= this.model.totalPages)
                        this._lastNP = true;
                }
                else
                    this.model.currentPage++;
            }
            else if ($target.hasClass("e-prevpage") && $target.hasClass("e-prevpagedisabled") != true) {
                if (this.model.currentPage % this.model.pageCount == 1)
                    this._lastNP = false;
                this.model.currentPage--;
                if (this.model.currentPage < 0) { this.model.currentPage = 0; }
            }
            else if ($target.hasClass("e-lastpage") && $target.hasClass("e-lastpagedisabled") != true) {
                this._LastpageCount = this.model.totalPages % this.model.pageCount;
                (this._LastpageCount == 0) ? (this._LastpageCount = this.model.pageCount) : null;
                this.model.currentPage = this.model.totalPages;
                this._lastNP = true;
            }
            else if ($target.hasClass("e-firstpage") && $target.hasClass("e-firstpagedisabled") != true) {
                this.model.currentPage = 1;
                this._lastNP = false;
            }
            else if ($target.hasClass("e-NP") && $target.hasClass("e-nextprevitemdisabled") != true) {
                if (this._links != undefined)
                    this.model.currentPage = parseInt($(this._links[0]).data("index"), 10) + this.model.pageCount;
                if (parseInt(this._links[this.model.pageCount - 1].innerHTML.replace(this.model.customText, ""), 10) + this.model.pageCount >= this.model.totalPages) {
                    this._lastNP = true;
                    if ((this.model.totalRecordsCount - this._pageSize) < this._pageSize)
                        this._LastpageCount = this.model.totalRecordsCount - this._pageSize;
                    else
                        this._LastpageCount = ((this.model.totalRecordsCount / this._pageSize) % this.model.pageCount);
                    (this._LastpageCount == 0) ? (this._LastpageCount = this.model.pageCount) : null;
                    if (this._links != undefined)
                        this.model.currentPage = parseInt($(this._links[this.model.pageCount - 1]).data("index"), 10) + 1;
                }
            }
            else if ($target.hasClass("e-PP") && $target.hasClass("e-nextprevitemdisabled") != true) {
                if (this._links != undefined)
                    this.model.currentPage = parseInt($(this._links[0]).data("index"), 10) - this.model.pageCount;
                this._lastNP = false;
            }
            this._trigger("click", { "currentPage": this.model.currentPage, "event": e });
			if($target.hasClass("e-newrecord")){
				 this._trigger("addRecord", { "currentPage": this.model.currentPage, "event": e });
			}
            this.goToPage(this.model.currentPage, e);
        },
        goToPage: function (pageIndex, event) {
            if (pageIndex != this.model.currentPage)
                this._prevPageNo = this.model.currentPage;
            if (this._prevPageNo !== pageIndex && (pageIndex >= 1 && pageIndex <= this.model.totalPages)) {
                this.model.currentPage = pageIndex;
                this.model.enableQueryString && this._updateQueryString(this.model.currentPage);
            }
            if (this._prevPageNo != this.model.currentPage) {
                this.refreshPager();
                this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": true, "event": event });
            }
        },
		goToNextPage: function () {
			if(this.model.totalRecordsCount != 0 && this.model.currentPage >= 1 && this.model.currentPage < this.model.totalPages){
				this.model.currentPage = this.model.currentPage + 1;
				this.refreshPager();
                this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": false });
			}
		},
		goToLastPage: function () {
			if(this.model.totalRecordsCount != 0 && this.model.currentPage >= 1 && this.model.currentPage < this.model.totalPages){
				this.model.currentPage = this.model.totalPages;
				this.refreshPager();
                this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": false });
			}
		},
		goToFirstPage: function () {
			if(this.model.totalRecordsCount != 0 && this.model.currentPage > 1){
				this.model.currentPage = 1;
				this.refreshPager();
                this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": false });
			}
		},
		goToPrevPage: function () {
			if(this.model.totalRecordsCount != 0 && this.model.currentPage > 1 ){
				this.model.currentPage = this.model.currentPage - 1;
				this.refreshPager();
                this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": false });
			}
		},
		
        _updateQueryString: function (value) {
            var _newUrl = this._getUpdatedURL(window.location.href, "page", value);
            if (history.pushState) {
                window.history.pushState({ path: _newUrl }, '', _newUrl);
            }
            else
                window.location.href = _newUrl;
        },

        _getUpdatedURL: function (uri, key, value) {
            var re = new RegExp("([?|&])" + key + "=.*?(&|#|$)", "i");
            if (uri.match(re)) {
                return uri.replace(re, '$1' + key + "=" + value + '$2');
            } else {
                var hash = '';
                var separator = uri.indexOf('?') !== -1 ? "&" : "?";
                if (uri.indexOf('#') !== -1) {
                    hash = uri.replace(/.*#/, '#');
                    uri = uri.replace(/#.*/, '');
                }
                return uri + separator + key + "=" + value + hash;
            }
        },
        _getLocalizedLabels: function (property) {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        },
        _fillScreen: function () {
			if(!$(this._templateElement).find(".e-textbox-paging").length > 0){
				var numLen = this.element.find('.e-pagercontainer').outerWidth() - (this._$first.outerWidth(true) + this._$last.outerWidth(true) + this._$next.outerWidth(true) + this._$prev.outerWidth(true))
				numLen -= !this._$NP||this._$NP.hasClass('e-disable') ? 0 : this._$NP.outerWidth(true);
				numLen -= !this._$PP||this._$PP.hasClass('e-disable') ? 0 : this._$PP.outerWidth(true);
				if(this.model.template){
					if (this.element.outerWidth() - $(this.element.find(".e-pagercontainer")).outerWidth() < 40) {
					if (Math.floor(numLen / this.element.find('.e-numericitem.e-spacing.e-default').outerWidth(true)) - 1 < 1) this._flag ? this.option("pageCount", 1) : this.model.pageCount = 1;
					else this._flag ? this.option("pageCount", Math.floor(numLen / this.element.find('.e-numericitem.e-spacing.e-default').outerWidth(true)) - 1) : this.model.pageCount = Math.floor(numLen / this.element.find('.e-numericitem.e-spacing.e-default').outerWidth(true)) - 1;
				}
				}
				else{
					if (this.element.outerWidth() - $(this.element.contents()[0]).outerWidth() < 40) {
						if (Math.floor(numLen / this.element.find('.e-numericcontainer .e-numericitem.e-spacing.e-default').outerWidth(true)) - 1 < 1) this._flag ? this.option("pageCount", 1) : this.model.pageCount = 1;
						else this._flag ? this.option("pageCount", Math.floor(numLen / this.element.find('.e-numericcontainer .e-numericitem.e-spacing.e-default').outerWidth(true)) - 1) : this.model.pageCount = Math.floor(numLen / this.element.find('.e-numericcontainer .e-numericitem.e-spacing.e-default').outerWidth(true)) - 1;
					}
				}
			}
        },
        _enable: function () {
            this.element.removeClass('e-disable').attr({ "aria-disabled": false });
            this.element.prop("disabled", false);
            if (this.numTextbox) this.numTextbox.removeAttr("disabled");
        },
        _disable: function () {
            this.element.addClass('e-disable').attr({ "aria-disabled": true });
            this.element.prop("disabled", "disabled");
            if (this.numTextbox) this.numTextbox.attr("disabled","disabled");
            if (this.$dropItem) if (this.$dropItem.css("display") != "none") this.$dropItem.hide();
			if(this.model.template){
				$(this._templateElement).addClass(".e-disable");
			}
        },
        _setFirst: true,
        _setModel: function (options) {
            for (var prop in options) {
                this._preval = this.model.currentPage;
                switch (prop) {
                    case "pageCount":
                        this._renderNumericLinks(this.element.find(".e-numericcontainer"));
                        if (this.model.isResponsive && !this._flag) {
                            this._maxPageCount = this.model.pageCount;
                            this._fillScreen();
                        }
                        this._flag = false;
                        break;
					case "template":
                        this.element.children().remove();
                        this.renderPager();
                        break;
                    case "enableExternalMessage":
                        if (options[prop])
                            this._renderPagerMessage();
                        else
                            this._removePagerMessage();
                        break;
                    case "showPageInfo":
                        this._pageInfo();
                        break;
                    case "pageSizeMessage":
                        if (options[prop] != null) {
                            this._renderPageSizeMessage();
                        }
                        break;
					case "pageSize":
					    this._pageSize = this.model.pageSize;
					    if (this.model.pageSizeList && this.model.pageSizeList.length > 0) {
							var proxy=this;
					        this.$textspan.text(this.model.pageSize);
					        this.$dropItem.find(".e-active").removeClass("e-active");
							 $(".e-drpdwn.e-ul").find("li").each(function()  {
								var $li=$(this);  
								if($li.text() == proxy.model.pageSize)
								{
									$(this).addClass("e-active")
								}
							});
					    }
						break;
					case "pageSizeList":
						this.model.pageSizeList = options[prop];
                        if (options[prop].length > 0) {
                            this._pageSize = this.model.pageSize;
                            if (this.$dropItem) {
                                this.$dropItem.empty();
                                this._renderItems();
                            }
                            else this._renderDropdownlist();
                        }
                        else if (this.$dropItem) this._removeDropdownlist();
                        break;
                    case "enabled":
                        if (!options[prop]) this._disable(); else this._enable(); break;
                    case "cssClass":
                        this.element.removeClass(this._cssClass).addClass(options[prop]); this._cssClass = this.model.cssClass;
                    case "isResponsive":
                        this._wireResizing();
                        if (!options[prop]) this.option("pageCount", this._maxPageCount);
                        else if (this.model.isResponsive && !this._flag) {
                            this._maxPageCount = this.model.pageCount; this._fillScreen();
                        }
                        this._flag = false;
                        break;
                    case "showGoToPage": if (options[prop]) this._renderTextboxItem(); else if (this.numTextbox) { this.numTextbox.remove(); this.numTextbox = null; } break;
                    case "locale": this._setLocale(); break;
                    case "currentPage": {
                        this.refreshPager();
                        this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": false });
                    }


                }
            }
            if (prop != "currentPage") {
                this.refreshPager();
                if (this._preval != this.model.currentPage)
                    this._trigger("change", { "currentPage": this.model.currentPage, "isInteraction": false });
            }
        },

        // all events bound using this._on will be unbind automatically
        _destroy: function () {
            this.element.empty().removeClass("e-pager");
            this._unWireResizing();
        }
    });
    ej.Pager.Locale = ej.Pager.Locale || {};

    ej.Pager.Locale["default"] = ej.Pager.Locale["en-US"] = {
        pagerInfo: "{0} of {1} pages ({2} items)",
        firstPageTooltip: "Go to first page",
        lastPageTooltip: "Go to last page",
        nextPageTooltip: "Go to next page",
        previousPageTooltip: "Go to previous page",
        nextPagerTooltip: "Go to next pager",
        previousPagerTooltip: "Go to previous pager"
    };

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) { 

    ej.widget("ejDropDownList", "ej.DropDownList", {
        element: null,

        model: null,
        validTags: ["select", "input"],
        _addToPersist: ["value", "text", "selectedIndex", "selectedItemIndex", "selectedItems", "selectedIndices", "popupWidth", "popupHeight", "itemValue"],
        _setFirst: false,

        _rootCSS: "e-dropdownlist",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },
        _requiresID: true,
      


        defaults: {
            cssClass: "",

            value: null,

            htmlAttributes: {},

            text: null,

            itemValue: "",

            itemsCount: 0,

            dataSource: null,

            delimiterChar: ',',

            query: null,

            fields: {
                id: null,

                text: null,

                value: null,

                category: null,
                
                groupBy:null,

                imageUrl: null,

                imageAttributes: null,

                spriteCssClass: null,

                htmlAttributes: null,

                selected: null,

                tableName: null
            },
			
			locale: "en-US",

            watermarkText: null,

            height: "",

            loadOnDemand: false,

            width: "",

            popupHeight: "152px",

            popupWidth: "auto",

            maxPopupHeight: null,

            minPopupHeight: '20',

            maxPopupWidth: null,

            minPopupWidth: '0',

            targetID: null,

            template: null,

            headerTemplate: null,

            selectedItemIndex: -1,

            selectedIndex: -1,

            disableItemsByIndex: null,

            enableItemsByIndex: null,

            selectedItems: [],

            selectedIndices: [],

            cascadeTo: null,

            enablePopupResize: false,

            allowVirtualScrolling: false,

            virtualScrollMode: "normal",

            showRoundedCorner: false,

            showPopupOnLoad: false,

            enableRTL: false,

            enabled: true,

            filterType: "contains",

            sortOrder: "ascending",

            caseSensitiveSearch: false,

            showCheckbox: false,

            checkAll: false,

            uncheckAll: false,

            enablePersistence: false,

            enableFilterSearch: false,

            enableServerFiltering: false,

            enableIncrementalSearch: true,

            incrementalSearchDelay : 500,

            readOnly: false,

            enableAnimation: false,

            multiSelectMode: "none",

            allowGrouping: false,

            enableSorting: false,

            validationRules: null,

            validationMessage: null,

            actionBegin: null,

            actionComplete: null,

            actionFailure: null,

            actionSuccess: null,

            create: null,

            popupHide: null,

            popupShown: null,

            beforePopupShown: null,

            beforePopupHide: null,

            popupResizeStart: null,

            popupResize: null,

            popupResizeStop: null,

            change: null,

            select: null,

            dataBound: null,

            search: null,

            checkChange: null,

            cascade: null,

            destroy: null

        },

        dataTypes: {
            cssClass: "string",
            itemsCount: "number",
            watermarkText: "string",
            template: "string",
            disableItemsByIndex: "string",
            enableItemsByIndex: "string",
            enableIncrementalSearch: "boolean",
            incrementalSearchDelay: "number",
            cascadeTo: "string",
            delimiterChar: "string",
            showRoundedCorner: "boolean",
            showPopupOnLoad: "boolean",
            enableRTL: "boolean",
            enablePersistence: "boolean",
            allowVirtualScrolling: "boolean",
            virtualScrollMode: "enum",
            enabled: "boolean",
            readOnly: "boolean",
            multiSelectMode: "enum",
            dataSource: "data",
            query: "data",
            fields: "data",
            selectedItems: "array",
			selectedIndices: "array",
            enableAnimation: "boolean",
            allowGrouping: "boolean",
            enableSorting: "boolean",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data",
			locale:"string"
        },

        observables: ["value", "selectedItemIndex", "selectedIndex","dataSource"],
        value: ej.util.valueFunction("value"),
        selectedItemIndex: ej.util.valueFunction("selectedItemIndex"),
        selectedIndex: ej.util.valueFunction("selectedIndex"),
        _dataSource: ej.util.valueFunction("dataSource"),
        

        enable: function () {
            if (this._visibleInput.hasClass("e-disable")) {
                this.target.disabled = false;
                this.model.enabled = true;
				this.container.removeClass('e-disable');
                this._visibleInput.removeClass('e-disable');
                this.dropdownbutton.removeClass('e-disable');
                if(!ej.isNullOrUndefined(this.popupListWrapper)) this.popupListWrapper.removeClass('e-disable');
                if (this._isIE8) this.drpbtnspan.removeClass("e-disable");
                //Element not Maintain in Multiselection
                this.container.on("mousedown", $.proxy(this._OnDropdownClick, this));
                if (this.model.multiSelectMode == "visualmode") this._ulBox.removeClass("e-disable");
                this.wrapper.attr('tabindex', '0');
            }
            this._wireEvents();
        },

        disable: function () {
            if (!this._visibleInput.hasClass("e-disable")) {
                this.target.disabled = true;
                this.model.enabled = false;
				this.container.addClass('e-disable');
                this._visibleInput.addClass('e-disable');
                if(!ej.isNullOrUndefined(this.popupListWrapper)) this.popupListWrapper.addClass('e-disable');
                this.dropdownbutton.addClass('e-disable');
                if (this._isIE8) this.drpbtnspan.addClass("e-disable");
                if (this.model.multiSelectMode == "visualmode") this._ulBox.addClass("e-disable");
                //Element not Maintain in Multiselection
                this.container.off("mousedown", $.proxy(this._OnDropdownClick, this));
                this._unwireEvents();
                this.wrapper.removeAttr('tabindex');
                if (this._isPopupShown()) this._hideResult();
            }
        },

        /* will deprecate with text property */
        getValue: function () {
			return this._visibleInput.val();
        },
        _setValue: function (value) {
            if (!ej.isNullOrUndefined(value)) {
                if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0))this._showFullList();
                this._raiseEvents = false;
                if (!ej.isNullOrUndefined(this.model.text)) this.unselectItemByText(this.model.text);
                this._raiseEvents = true;
                if (this.model.allowVirtualScrolling) this._addValue(value);
                this.selectItemByValue(value);
            }
        },
        _addValue: function (args) {
            if (this.model.itemsCount > 0 && args != "") {
                this._checkValue = true;
                var listitems = (typeof(args) == "number") ? args: args.split(this.model.delimiterChar);
                if(!ej.isNullOrUndefined(this._mapFields())) this._mapFields();
                var field = this.mapFld._value; 
                if(!ej.isNullOrUndefined(this._rawList)) this._addListItems(listitems, this._rawList, "local");
                if (this._checkValue) {
                    var source = this._dataSource();
                    if (ej.DataManager && source instanceof ej.DataManager) {
                        if (source.dataSource.offline && (source.dataSource.json && source.dataSource.json.length > 0))
                            this._addListItems(listitems, source.dataSource.json,"remote");
                        else {
                            var proxy = this;
                            var value= args;
                                source.executeQuery(ej.Query()).done(function (e) {
                                proxy._addListItems(listitems, e.result, "remote");
                                proxy.selectItemByValue(value);
                            });
                        }
                    }
                    else
                        this._addListItems(listitems, source, "remote");
                }

            }
        },
        _addListItems: function (listitems, source, checkValue) {
            for (var k = 0; k < listitems.length; k++) {
                for (var i = 0; i < source.length; i++) {
                    if (checkValue == "local" && source[i][this.mapFld._value] == listitems[k])
                        this._checkValue = false;
                    if (checkValue == "remote" && source[i][this.mapFld._value] == listitems[k])
                        this.addItem(source[i]);
                }
            }
        },
        _setText: function (text) {
            if (!ej.isNullOrUndefined(text)) {
                if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0))this._showFullList();
                this._raiseEvents = false;
                this.unselectItemByText(this.model.text);
                this._raiseEvents = true;
                this.selectItemByText(text);
            }
        },
        _setItemValue: function (itemValue) {
            this.model.itemValue = itemValue;
        },
        _changeWatermark: function (text) {
            if (!this.model.enabled) return false;
            if (this._isWatermark) this._visibleInput.attr("placeholder", text);
            else this._hiddenSpan.text(text);
        },

        hidePopup: function () {
            if (!this.model.enabled) return false;
            if (this.ultag.find('li').length > 0)
                this._hideResult();
        },

        showPopup: function () {
            if (!this.model.enabled) return false;
            var ultag = !ej.isNullOrUndefined(this.ultag) ? this.ultag.find('li').length > 0 : (this.model.loadOnDemand) ? true: false;
            if (ultag)
                this._showResult();
        },

        clearText: function () {
            this._clearTextboxValue(); 
            if (!this._isWatermark)
                this._setWatermark();
        },

        addItem: function (itemTag) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0)) this._showFullList();
            if (!this.model.enabled || !itemTag) return false;
            this._mapFields();
            var list = $.isArray(itemTag) ? itemTag : [itemTag];
            if (list.length < 1) return false;
            var mapper = this.mapFld,
                mapFld = { _id: null, _imageUrl: null, _imageAttributes: null, _spriteCSS: null, _text: null, _value: null, _htmlAttributes: null, _selected: null, _category: null };
            mapFld._id = list[0][mapper._id] ? mapper._id : "id";
            mapFld._imageUrl = list[0][mapper._imageUrl] ? mapper._imageUrl : "imageUrl";
            mapFld._imageAttributes = list[0][mapper._imageAttributes] ? mapper._imageAttributes : "imageAttributes";
            mapFld._spriteCSS = list[0][mapper._spriteCSS] ? mapper._spriteCSS : "spriteCssClass";
            mapFld._text = list[0][mapper._text] ? mapper._text : "text";
            mapFld._value = list[0][mapper._value] ? mapper._value : "value";
            mapFld._htmlAttributes = list[0][mapper._htmlAttributes] ? mapper._htmlAttributes : "htmlAttributes";
            mapFld._selected = list[0][mapper._selected] ? mapper._selected : "selected";
            mapFld._category = list[0][mapper._category] ? mapper._category : "groupBy";
            this._generateLi(list, mapFld);
            
            var i, listItems = this.dummyUl;
            for (var i = 0; i < list.length; i++)
                this._listItem(list[i], "add");
            if (this.model.showCheckbox) {
                this._appendCheckbox(listItems, true);               
            }
            else if (!this._isSingleSelect()) this._multiItemSelection(listItems, true);
			this._virtualUl.append($(this.dummyUl).clone(true));
            this.ultag.append(this.dummyUl);

            if (this._isPopupShown()) {
                var scrollerPosition = this.scrollerObj ? this.scrollerObj.scrollTop() : 0;
                this._refreshScroller();
                if (this.scrollerObj) this.scrollerObj.option("scrollTop", scrollerPosition);
            }
        },

        _toArray: function (index, mode) {
            var items;
            if (typeof index == "function") index = ej.util.getVal(index);
            if ($.isArray(index)) items = index;
            else if (typeof index == "string") {
                if ((mode && (this.model.multiSelectMode == "visualmode" || this.model.multiSelectMode == "delimiter" || this.model.showCheckbox))) {
                    items = this._getUpdatedListData(index);
                    if (items.length == 0) items = [index];
                }
                else if (!mode) {
                    items = this._getUpdatedListData(index);
                    if (items.length == 0) items = [index];
                }
                else items = [index];
            } else items = [index];
            return items;
        },
        _trim: function (val) {
            return typeof val == "string" ? $.trim(val) : val;
        },
        /*will deprecate with selectItemsByIndices */
        selectItemByIndex: function (index) {
            this._selectItemByIndex(index);
        },

        selectItemsByIndices: function (index) {
            this._selectItemByIndex(index);
        },

        _selectItemByIndex: function (val) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0)) this._showFullList();
            this.listitems = this._getLi();
            this._selectedIndices = $.map(this._selectedIndices, function (a) { return parseInt(a); });
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
			if( parseInt(val) == -1 && this.model.selectedItems.length > 0) {
				this._clearTextboxValue();
				this._trigger("change",{ text: this._visibleInput[0].value, selectedText: "", selectedValue: "", value: "" });
			}
			else {
            var items = this._toArray(val, true), index;
            for (var k = 0; k < items.length; k++) {
                index = parseInt(items[k]);
                if (index != null && index >= 0) {
                    if ($.inArray(index, this._selectedIndices) == -1)
                        for (var i = 0; i < this.listitems.length; i++) {
                            if (!$(this.listitems[i]).hasClass('e-disable')) {
                                if (i == index) {
                                    this.selectedIndexValue = i;
                                    this._activeItem = index;
                                    this._enterTextBoxValue();
                                }
                            }
                        }
                } else if (!this.model.showCheckbox && this.model.multiSelectMode == "none" && this.model.selectedItems.length > 0) {
					this._clearTextboxValue();
				   this._trigger("change",{ text: this._visibleInput[0].value, selectedText: "", selectedValue: "", value: "" });
				} 
            }
			}
        },

        unselectItemsByIndices: function (val) { this._unselectItemByIndex(val); },

        /*will deprecate with unselectItemsByIndices method */
        unselectItemByIndex: function (val) { this._unselectItemByIndex(val); },

        _unselectItemByIndex: function (val) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0)) this._showFullList();
            this._selectedIndices = $.map(this._selectedIndices, function (a) { return parseInt(a); });
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
            var i, items = this._toArray(val, true), index;
            this.listitems = this._getLi();
            for (var k = 0; k < items.length; k++) {
                index = parseInt(items[k]);
                for (i = 0; i < this.listitems.length; i++) {
                    if (i == index) {
                        this.selectedIndexValue = i;
                        this._activeItem = index;
                        if (this._activeItem == this._aselectedItem) this._aselectedItem = null;
                        this._removeTextBoxValue();
                    }
                }
            }
        },

        /*Deprecated with selectedItemByValue */
        setSelectedValue: function (idvalue) { this.selectItemByValue(idvalue); },

        selectItemByValue: function (val) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0)) this._showFullList();
            var i, hidelement; 
            this.listitems = this._getLi();
            if(this.inputSearch && this.inputSearch.val() != "" && this.model.enableServerFiltering && !ej.isNullOrUndefined(this._searchresult)){
                var field = (this.model.fields && this.model.fields.value) ? this.model.fields["value"] : "value";
                for(i=0; i< this._searchresult.length; i++){
                for (var j = 0; j < this.listitems.length; j++) {
					if ($(this.listitems[j]).attr("data-value") == this._searchresult[i][field]) {
						this._searchresult=null;
					}
                }
            }
                this.addItem(this._searchresult);
            }
            if (ej.isNullOrUndefined(val)) this._clearTextboxValue();
            else { 
                this._selectUnSelectValue(val, "selectValue");
            }
        },

        _selectUnSelectValue: function(val, selectValue, ignoreCasing){
             var items = this._toArray(val, true);
                for (var k = 0; k < items.length; k++) {
                    for (var i = 0; i < this.listitems.length; i++) {
                        if (!$(this.listitems[i]).hasClass('e-disable') && (selectValue=="selectValue" || selectValue=="selectText")) {
                            if(selectValue=="selectValue"){
                                var fieldValue = (!ej.isNullOrUndefined(this._getAttributeValue(this.listitems[i])))? this._getAttributeValue(this.listitems[i])  : $(this.listitems[i]).text();
                                this._selectedValue = fieldValue == items[k]; 
                            }
                            if(selectValue=="selectText"){
                                this.selectedTextValue = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                                this._selectedValue = (this.selectedTextValue == items[k]) || (ignoreCasing && this.selectedTextValue.toString().toLowerCase() == items[k].toString().toLowerCase())
                            }  
                                if (this._selectedValue) {
                                    this._activeItem = i;
                                    this._aselectedItem = this._activeItem;
                                    this._enterTextBoxValue();
                                    break;
                                } 
                        }
                        else{ 
                             if (this._getAttributeValue(this.listitems[i])) {
                                 if(selectValue=="unselectValue"){
                                this._selectedValue = this._getAttributeValue(this.listitems[i]);
                                this._selectedValue = this._selectedValue == items[k]; 
                            }
                            if(selectValue=="unselectText"){
                                this.unselectedTextValue = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                                this._selectedValue = (this.unselectedTextValue == items[k]) || (ignoreCasing && this.unselectedTextValue.toString().toLowerCase() == items[k].toString().toLowerCase())
                            }   
                                if (this._selectedValue) {
                                    this._activeItem = i;
                                    if (this._activeItem == this._aselectedItem) this._aselectedItem = null;
                                        this._removeTextBoxValue();
                                     break;
                                }
                            }
                        }
                    }
                }
        },

        unselectItemByValue: function (val) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0))this._showFullList();
            var i, hidelement;
            this.listitems = this._getLi(); 
            this._selectUnSelectValue(val, "unselectValue");
        },

        /* Deprecated with selectItemByText*/
        setSelectedText: function (value) { this.selectItemByText(value); },

        selectItemByText: function (val, ignoreCasing) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0))this._showFullList();
            var i, hidelement;
            this.listitems = this._getLi();
            this._mapFields();
            if (ej.isNullOrUndefined(val)) this._clearTextboxValue();
            else { 
                this._selectUnSelectValue(val, "selectText", ignoreCasing);
            }
        },

        unselectItemByText: function (val, ignoreCasing) {
            var i, hidelement;
            this.listitems = this._getLi();
            this._mapFields();
            this._selectUnSelectValue(val, "unselectText", ignoreCasing);
        },

        getSelectedValue: function () {
			return this.element.val();
        },

        getSelectedItem: function () {
            var k, selected = [];
            this.listitems = this._getLi();
            for (k = 0; k < this._selectedIndices.length; k++) {
                selected.push(this.listitems[this._selectedIndices[k]]);
            }
            return selected;
        },
        getItemDataByValue: function (value) {
            var listitems = this._toArray(value, false);
			var rawList  = (!ej.isNullOrUndefined(this.resultList)) ? this._rawList.concat(this.resultList): this._rawList;
            var k, m, selected = [], field = (this.model.fields && this.model.fields.value) ? this.model.fields["value"] : "value";
            if ( listitems.length > 0 && (rawList.indexOf(listitems[0]) > -1 || rawList.indexOf(Number(listitems[0])) > -1)) {
				for (k = 0; ((k < listitems.length) && ( rawList.indexOf(listitems[k]) > -1 || rawList.indexOf(Number(listitems[k])) > -1)); k++) {
					selected.push({ text: listitems[k], value: listitems[k] });
				}
			}
			else {
            if ( rawList.length > 0 && ej.isNullOrUndefined(rawList[0][field]) ) {
				var textField = (this.model.fields && this.model.fields.text) ? this.model.fields["text"] : "text";
				if (!ej.isNullOrUndefined(rawList[0][textField])) {
					field = textField;
				}
			}
            for (k = 0; k < listitems.length; k++) {
                for (m = 0; m < rawList.length; m++) {
                    if (rawList[m][field] == listitems[k] || rawList[m][field] == Number(listitems[k]))
                        selected.push(rawList[m]);
                }
            }
			}
            return selected;
        },

        getListData: function () { return this._rawList; },

        /* will be deprecate in upcoming releases*/
        getSelectedItemsID: function () {
            return this._selectedItemsID;
        },

        disableItemsByIndices: function (value) { if (this._getLi().length > 0) { this._disableItemByIndex(value) } },

        /*Deprecated with disableItemsByIndices method */
        disableItemByIndex: function (value) { if (this._getLi().length > 0) { this._disableItemByIndex(value, true) } },

        _disableItemByIndex: function (value, isSingleIndex) {
            if(!this._isInteralCall){
                this._initDisabledItems = isSingleIndex ? this._initDisabledItems.push(value) : value;
            }
            if (!this.model.enabled) return false;
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0)) this._showFullList();
            var listitems = this._toArray(value, false),index;
            for (var i = 0; i < listitems.length; i++) {
                if (listitems[i] != null && !isNaN(parseInt(listitems[i]))) {
                    if (listitems.length > 0 && !($.inArray(parseInt(listitems[i]), this._disabledItems) > -1)) {
                        index = $.inArray(listitems[i], this._disabledItems);
                        this._setClass(this._getLi()[parseInt(listitems[i])], "e-disable");
                        this._disabledItems.push(parseInt(listitems[i]));
                        this.model.disableItemsByIndex = String(this._disabledItems.join(","));
                    }
                }
            }
            this._prevDisabledItems = this._disabledItems;
        },

        enableItemsByIndices: function (value) { this._enableItemByIndex(value) },

        /*Deprecated with enableItemsByIndices method */
        enableItemByIndex: function (value) { this._enableItemByIndex(value) },

        _enableItemByIndex: function (value) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0)) this._showFullList();
            var listitems = this._toArray(value, false), index;
            this.model.enableItemsByIndex = value;
            for (var i = 0; i < listitems.length; i++) {
                if (listitems.length > 0 && ($.inArray(parseInt(listitems[i]), this._disabledItems) > -1) &&  !isNaN(parseInt(listitems[i]))) {
                    index = $.inArray(parseInt(listitems[i]), this._disabledItems);
                    this._removeClass(this._getLi()[parseInt(listitems[i])], "e-disable");
                    this._disabledItems.splice(index, 1);
                }
            }
            this.model.enableItemsByIndex = null;
            this.model.disableItemsByIndex = this._disabledItems.join(this.model.delimiterChar);
        },
        _validateDelimiter: function (deli) {
            if (this._trim(deli).length == 1) {
                var RegEx = /^[a-zA-Z0-9]+$/;
                if (!RegEx.test(deli)) return deli;
            }
            return ",";
        },

        _removeText: function (currentValue) {
            this.removeVal = (this.checkChange && (this.model.fields.text || this.model.fields.value)) ? false: true;
            var eleVal = this._getUpdatedListData(this.element[0].value, true);
            this.removeVal = (this.checkChange && (this.model.fields.text || this.model.fields.value));
            var hidVal = this._getUpdatedListData(this._visibleInput[0].value, false);
            var listData = this.getItemDataByValue(currentValue)[0];
            var textField = (this.model.fields && this.model.fields.text) ? this.model.fields["text"] : "text";
            if($.inArray(currentValue, eleVal)>=0) eleVal.splice($.inArray(currentValue, eleVal), 1);
            if(!ej.isNullOrUndefined(listData[textField]) && $.inArray(this._decode(listData[textField]).toString(), hidVal)>=0) hidVal.splice($.inArray(this._decode(listData[textField]).toString(), hidVal), 1);
            if($.inArray(currentValue, this._valueContainer)>=0) this._valueContainer.splice($.inArray(currentValue, this._valueContainer), 1);
            if(!ej.isNullOrUndefined(listData[textField]) && $.inArray(listData[textField].toString(), this._textContainer)>=0) this._textContainer.splice($.inArray(listData[textField].toString(), this._textContainer), 1);
            this.element[0].value = eleVal.join(this.model.delimiterChar);
            this._visibleInput[0].value = hidVal.join(this.model.delimiterChar);
            this.removeVal = false;
        },
        _getUpdatedListData: function (elementValue, value) {
            var listValues; 
            if(value) {
                listValues = elementValue.split(this.model.delimiterChar);
            }
            else {
               listValues = elementValue;
            }
            var compareVal;
            var dataSource = this.getListData();
            var count = 0, initialPosition = 0, dataPosition;
            var listData = [];
            var updatedData = [];
            var listText = '';
            if (this.model.fields.value || this.model.fields.text) {
                compareVal = this.model.fields.text;
                if (!this.removeVal) {
                    compareVal = (this.model.fields.value) ? this.model.fields.value : compareVal;
                }
            }
            while (count < dataSource.length) {
                listText = compareVal ? this._decode(dataSource[count][compareVal]) : this._decode(dataSource[count].text ? dataSource[count].text : dataSource[count] );
                if (listValues.indexOf(listText) !== -1) {
                    if (value) 
                        listValues[listValues.indexOf(listText)] = initialPosition;
                    else
                        listValues = listValues.replace(listText, initialPosition);
                    listData.push(listText);
                    initialPosition++;
                } else if (!value && listValues === "") break;
                count++;
            }
            if (!value) {
                listValues = listValues.split(this.model.delimiterChar);
            }
            count = 0;
            while (count < initialPosition) {
                if(value) {
                    updatedData[listValues.indexOf(count)] = listData[count];
                }
                else {
                    dataPosition = listValues.indexOf("" + count);
                    updatedData[dataPosition] = listData[count];
                }
                count++;
            }
            return updatedData;
        },
        _addText: function (currentValue) {
            if (this._checkContains(this._hiddenValue)) return false;
            var ele = ["element", "_visibleInput"], val;
            for (var i = 0; i < ele.length; i++) {
                val = ele[i] == "element" ? this._hiddenValue : currentValue;
				var srcContainer = ele[i] == "element" ? this._valueContainer : this._textContainer;
                if (this[ele[i]][0].value && this[ele[i]][0].value != "") {
                    var splitedText = this[ele[i]][0].value.split(this.model.delimiterChar);
					if( ele[i] == 'element' && $.inArray(val, splitedText) === -1){
						splitedText.push(val);
					}
					else if( ele[i] == '_visibleInput') {
						splitedText.push(val);
					}                    
                    this[ele[i]][0].value = splitedText.join(this.model.delimiterChar);
                } else {
					if(val =="")
						this[ele[i]][0].value = val;
					else if(val !="" && this[ele[i]][0].value == ""){
						if($.inArray("",srcContainer) != -1){
							var splitedText = this[ele[i]][0].value.split(this.model.delimiterChar);
							splitedText.push(val);
							this[ele[i]][0].value = splitedText.join(this.model.delimiterChar);
						}
						else
							this[ele[i]][0].value = val;
					}
				}
				srcContainer.push(val);
            }
        },
        _checkContains: function (chkValue) {
            this.contains = false;
			if(this._rawList !== undefined && (this.model.dataSource !== null || this.selectOptions !== undefined || this.model.targetID !== null)){
				for (var i = 0; i < this._valueContainer.length; i++) {
					if (this._parseValue(this._valueContainer[i]) === this._parseValue(chkValue)) {
						this.contains = true;
						break;
					}
				}
            }
            return this.contains;
        },
		_parseValue: function (value){
			return isNaN(parseInt(value)) || (this.mapFld && typeof(this._rawList[0][this.mapFld._value]) == 'string') ? value : parseInt(value);
		},
        _updateLocalConstant: function () {
            this._localizedLabels = ej.getLocalizedConstants("ej.DropDownList", this.model.locale);
        },
        _init: function () {
            var browserInfo = ej.browserInfo();
            this._updateLocalConstant();
            this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0');
            this._textContent = this._isIE8 ? "innerText" : "textContent";
            if ((this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type'))) || this.element.is("select")) {
                this._isWatermark = 'placeholder' in $(document.createElement('input')).attr("placeholder", '')[0];
                this._id = this.element[0].id;
                this._initialize();
                this._render();
                this._addAttr(this.model.htmlAttributes);
                this._enabled(this.model.enabled);
                this._initValue = false;
                this._checkboxValue = false;
                if (this.model.validationRules != null) {
                    this._initValidator();
                    this._setValidation();
                }
            }
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            if (this.element.closest("form").length != 0) {
                this.element.rules("add", this.model.validationRules);
                var validator = this.element.closest("form").data("validator");
                if (!validator) validator = this.element.closest("form").validate();
                var name = this.element.attr("name");
                validator.settings.messages[name] = {};
                for (var ruleName in this.model.validationRules) {
                    var message = null;
                    if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                        if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                            message = this.model.validationRules["messages"][ruleName];
                        else {
                            validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                            for (var msgName in this.model.validationMessage)
                                ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                        }
                        validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                    }
                }
            }
        },

        _setInitialPopup: function (value) {
            if (this.model.enabled && !this.model.readOnly)
                value == false ? this._hideResult() : this._showResult();
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            if(!ej.isNullOrUndefined(this.popupListWrapper))this.popupListWrapper.removeClass(this.model.cssClass).addClass(skin);
        },

        _setRTL: function (val) {
            if (this.model.enableRTL != val) {
                this.model.enableRTL = val;
                this._RightToLeft();
                if(!ej.isNullOrUndefined(this.popupListWrapper)) this._dropbtnRTL();
            }
        },

        _changeHeight: function (height) {
            this.wrapper.height(height);
            this._setListHeight();
        },
        _changeWidth: function (width) {
            this.wrapper.width(width);
            this._setListWidth();
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "dataSource": if (!this._isEqualDataSource(ej.util.getVal(options[option]))) this._checkModelDataBinding(ej.util.getVal(options[option]), this.model.query);this._refreshScroller(); break;
                    case "query": this._checkModelDataBinding(this._dataSource(), options[option]); break;
                    case "fields": this.model.fields = $.extend(this.model.fields, options[option]); this._checkModelDataBinding(this._dataSource(), this.model.query); break;
                    case "itemsCount": this.model.itemsCount = options[option]; this._checkModelDataBinding(this._dataSource(), this.model.query);; break;
                    case "template": this.model.template = options[option]; this._checkModelDataBinding(this._dataSource(), this.model.query); break;
                    case "value": 
					var optionValue = ej.util.getVal(options[option]);
					if (ej.isNullOrUndefined(optionValue) || optionValue === "") this._clearTextboxValue();
					if (ej.isNullOrUndefined(optionValue) || optionValue === "") this._clearTextboxValue();
                    else { this._setValue(ej.util.getVal(options[option])); options[option] = this.model.value; } break;
                    case "incrementalSearchDelay": this.model.incrementalSearchDelay = options[option]; break;
                    case "delimiterChar": 
						var delchar = this.model.delimiterChar; 
						options[option] = this._validateDelimiter(options[option]);
                        this.model.delimiterChar = options[option];
                        if (!this._isSingleSelect()) {
						if (this.model.text) {
							this.model.text = this.model.text.split(delchar).join(this.model.delimiterChar);
							this._visibleInput.val(this.model.text);							
						}
						if(!ej.isNullOrUndefined(this.value())) {
							this.value(this.value().split(delchar).join(this.model.delimiterChar));
							this.element.val(this.value());	
						}
                    }
                        break;
                    case "text": if (ej.isNullOrUndefined(options[option]) || options[option] === "") this._clearTextboxValue();
                    else { this._setText(options[option]); options[option] = this.model.text; } break;
                    case "itemValue": this._setItemValue(options[option]); break;
                    case "enableRTL": this._setRTL(options[option]); break;
                    case "enabled": this._enabled(options[option]); break;
                    case "height": this._changeHeight(options[option]); break;
                    case "width": this._changeWidth(options[option]); break;
                    case "popupHeight": this.model.popupHeight = options[option]; this._setListHeight(options[option]); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "minPopupHeight": this.model.minPopupHeight = options[option]; this._setListHeight(options[option]); break;
                    case "minPopupWidth": this.model.minPopupWidth = options[option]; this._setListWidth(); break;
                    case "maxPopupHeight": this.model.maxPopupHeight = options[option]; this._setListHeight(options[option]); break;
                    case "maxPopupWidth": this.model.maxPopupWidth = options[option]; this._setListWidth(); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "showCheckbox": this.model.showCheckbox = options[option];
                        var _text = this.model.text;
                        var _textes = this.model.text ? this.model.text.split(this.model.delimiterChar) : this.model.text;
                        this._raiseEvents = false;
                        this._clearTextboxValue();
                        this._raiseEvents = true;
                        this._checkboxHideShow(options[option]);
                        if (this.model.showCheckbox || (this.model.multiSelectMode != "none")) {
                            if (this.model.multiSelectMode == "visualmode")
                                this._renderBoxModel();
                            this._setText(_text);
                        }
                        else if (_textes && _textes.length)
                            this._setText(_textes[0]);
                        if (this._isPopupShown())
                            this._setListPosition();
                        break;
                        /* will depreciate with checkAll  Method*/
                    case "checkAll": this._setCheckAll(options[option]); return false; break;
                        /* will depreciate with uncheckAll  Method*/
                    case "uncheckAll": this._setUncheckAll(options[option]); return false; break;
                    case "watermarkText": this._changeWatermark(options[option]); break;
                    case "validationRules":
                        if (this.element.closest("form").length != 0) {
                            if (this.model.validationRules != null) {
                                this.element.rules('remove');
                                this.model.validationMessage = null;
                            }
                            this.model.validationRules = options[option];
                            if (this.model.validationRules != null) {
                                this._initValidator();
                                this._setValidation();
                            }
                        }
                        break;
                    case "locale":
                        this.model.locale = options[option];
                        this._updateLocalConstant();
                        break;
                    case "validationMessage":
                        if (this.element.closest("form").length != 0) {
                            this.model.validationMessage = options[option];
                            if (this.model.validationRules != null && this.model.validationMessage != null) {
                                this._initValidator();
                                this._setValidation();
                            }
                        }
                        break;
                    case "showRoundedCorner": this._roundedCorner(options[option]); this.model.showRoundedCorner = options[option]; break;
                    case "showPopupOnLoad": this._setInitialPopup(options[option]); break;
                    case "targetID": this.model.targetID = options[option]; this._showFullList(); break;
                        /* will depreciate with selectedIndex  Method*/
                    case "selectedItemIndex":
                    case "selectedIndex":
                        this._selectItemByIndex(options[option]);
                        this.model.selectedItemIndex = this.model.selectedIndex = options[option];
                        break;
                        /* will depreciate with unselectItemByIndex API Method*/
                    case "unselectItemByIndex": this._unselectItemByIndex(options[option]); break;
                        /* will depreciate with disableItemsByIndex API Method*/
                    case "disableItemsByIndex": this._disableItemByIndex(options[option]); break;
                        /* will depreciate with enableItemsByIndex API Method*/
                    case "enableItemsByIndex": this._enableItemByIndex(options[option]); break;
                        /* will depreciate with selectedIndices  Method*/
                    case "selectedItems":
                    case "selectedIndices":
                        this._selectCheckedItem(options[option]);
                        options[option] = this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                        break;
                    case "multiSelectMode":
                        if (this.model.multiSelectMode == "visualmode") {
                            this._swapUlandInput(false);
                            this._ulBox.remove();                         
                            this._ulBox = null;                     
                        }
                        this.model.multiSelectMode = options[option];
                        var _text = this.model.text;
                        var _textes = this.model.text ? this.model.text.split(this.model.delimiterChar) : this.model.text;
                        this._raiseEvents = false;
                        this._clearTextboxValue();
                        this._raiseEvents = true;
                        if (this.model.showCheckbox || (this.model.multiSelectMode != "none")) {
                            if (this.model.multiSelectMode == "visualmode")
                                this._renderBoxModel();
                            this._setText(_text);
                        }
                        else {
                            this._setText(_textes[0]);
                            this.wrapper.find("input[name=" + this._name + "]").remove();
                        }
                        if (this._isPopupShown())
                            this._setListPosition();
                        break;
                        /* will deprecate with fields.groupBy and e-category element in target element binding */
                    case "allowGrouping":
                        this._setGroupingAndSorting("allowGrouping", options[option]);
                        break;
                    case "enableSorting":
                        this._setGroupingAndSorting("enableSorting", options[option]);
                        break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "enablePopupResize": this.model.enablePopupResize = options[option];
                        (options[option]) ? this._enablePopupResize() : this.popupListWrapper.removeClass("e-resizable").find(".e-resizebar").remove() && this._hideResult();
                        break;
                    case "enableFilterSearch":
                        if (!options[option]) this._removeSearch();
                        else {
                            this.model.enableFilterSearch = true;
                            this._enableSearch();
                            break;
                        } 
                        case "enableServerFiltering": 
                            this._enableSearch();
                            break; 
                }
            }
        },

        _clearTextboxValue: function () {
            this.element.val("");
            this._visibleInput.val("");
            this._updateValue("");
			this._valueContainer = [];
			this._textContainer = [];
            this.selectedTextValue = this._selectedValue = this._hiddenValue = this.model.itemValue = "";
            this._updateText();
            this.selectedIndexValue = this._hiddenDelimiterIndex = this._activeItem = -1;
            this._selectedItemsID = []; this._selectedIndices = [];
            this.model.selectedItems = [];
            this.model.selectedIndices = [];
            this.selectedIndex(null);
            if(!ej.isNullOrUndefined(this.ultag)){
            this.ultag.children("li").removeClass('e-hover').removeClass('e-active');
            if (this.model.showCheckbox) this._resetCheck();
            }
            if (this.wrapper.find('ul.e-ul.e-boxes').length != 0) {
                this._ulBox.children("li").remove();
                if (this._name === "")
                    this.wrapper.find("input:hidden[id^='#']").remove();
                else
                    this.wrapper.find("input:hidden[id^='#'][name=" + this._name + "]").remove();
                $(this.element).attr("name", this._name);
            }
        },

        _destroy: function () {
            if( this.selectOptions) {
                if (!this._dataSource() && this.docbdy ) 
                    this.docbdy.append(this.selectOptions.removeClass("e-dropdownlist e-js").show()).show();
                else this.selectOptions.insertAfter(this.wrapper).removeClass("e-dropdownlist e-js").show();
                this.element.remove();
            }
            else {
                this.element.insertAfter(this.wrapper);
                this.element.width(this.element.width() + this.dropdownbutton.outerWidth());
                this._visibleInput.removeClass("e-input ");
                this._setAttr( this.element[0], { 'accesskey': this.wrapper.attr('accesskey'), type:"text" });
                if (this._isWatermark) this._visibleInput.removeAttr("placeholder");
                this.element[0].value = "";
                this.element.removeAttr("aria-expanded aria-autocomplete aria-haspopup aria-owns accesskey role").css({"width": "", "display": "block"});
                (!this._dataSource()) && this.docbdy && this.ultag.find("li").removeClass("e-active") && this.docbdy.append(this.ultag.html()).show();
            }
            this.wrapper.remove();
            this.container.off("mousedown", $.proxy(this._OnDropdownClick, this));
            this._hideResult();
            this.popupPanelWrapper.remove();
			this._unwireEvents();
        },


        _finalize: function () {
            if (this.value() == "" && this._visibleInput[0].value !== "")
                this._updateValue(this.element[0].value);
            if ((!ej.isNullOrUndefined(this.value())&& this.value() == "") || this.value() !== this.element.val() ) 
                this._setValue(this.value());
            if ((!ej.isNullOrUndefined(this.model.text) && this.model.text == "") || this.model.text != this._visibleInput.val())
                this._setText(this.model.text);
            this.selectedIndex((this.selectedIndex() != -1) ? this.selectedIndex() : this.selectedItemIndex());
            if (this.selectedIndex() != -1) {
                this._selectItemByIndex(this.selectedIndex());
            } else if (this._selectedIndices.length > 0) {
                this._selectCheckedItem(this._selectedIndices);
            } if (this.model.disableItemsByIndex != null)
                this._disableItemByIndex(this.model.disableItemsByIndex);
            if (this.model.enableItemsByIndex != null)
                this._enableItemByIndex(this.model.enableItemsByIndex);
        },


        _initialize: function () {
            this._selectedIndices = this.model.selectedIndices.length > 0 ? this.model.selectedIndices : this.model.selectedItems;
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
            this.model.selectedIndex = this.model.selectedIndex != -1 ? this.model.selectedIndex : this.model.selectedItemIndex;
            if (this.element.is("select")) {
                this.selectelement = true;
                this._renderSelectToDropdown();
            }
            this._initDisabledItems = [];
            this._isInteralCall = false;
            this._prevSearchValue = "";
            this._selectedItemsID = [];
			this._hiddenInputElement = [];
			this._valueContainer = [];
			this._textContainer =[];
            this.target = this.element[0];
            this._disabledItems = new Array();
            this._queryString = null;
            this.suggLen = 0;
            this._itemId = null;
            this.checkedStatus = false;
            this._incqueryString = "";
            this._activeItem = null;
            this.ddWidth = 0;
            this._initValue = true;
            this._virtualCount = 0;
            this._raiseEvents = true;
            this.popUpShow= false;
			this._matchedListItems = [];
            this._prevQueryString = "";
        },
        _renderSelectToDropdown: function () {
            var i, optionLength, optionText, item;
            this.inputElement = ej.buildTag("input.e-dropdownlist#" + this._id + "_input", "", {}, { "type": "text", "data-role": "none" });
            this.inputElement.insertAfter(this.element);
			if (this.element.attr("name")) {
                this.inputElement.attr("name", this.element.attr("name"));
                this.element.removeAttr("name");
            }
			this.selectOptions = this.element;
            this.selectOptions.attr('id', this._id);
			if( this._dataSource() == null ) {
            this.optionDiv = ej.buildTag("div#" + this._id + "_list");
            this.optionDiv.insertAfter(this.inputElement);
            this.optionUl = ej.buildTag("ul");
            this.optionDiv.append(this.optionUl);

            this.selectOptionItems = this.element.children("option");
            optionLength = this.selectOptionItems.length;
            this.optionDummyUl = $();

            for (i = 0; i < optionLength; i++) {
                item = this.selectOptionItems[i], optionText = $(item).attr('label') ? $(item).attr('label') : item.innerHTML;
                if (optionText != null) {
                    this.optionLi = ej.buildTag("li", optionText, {}, { 'data-value': item.value, "unselectable": "on" });
                    this.optionDummyUl.push(this.optionLi[0]);
                    if ($(item).attr("selected")) {
                        if (this.model.showCheckbox)
                            if ($.inArray(i, this._selectedIndices) == -1) {
                                this._selectedIndices.push(i);
                                this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                            }
                            else if (ej.isNullOrUndefined(this.selectedIndex())) this.selectedIndex(i);
                    }
                }
            }
            this.optionUl.append(this.optionDummyUl);

			}
            this.element.css('display', 'none');
            this.element = this.inputElement;
        },


        _render: function () {
            this._renderDropdown();
            this._setWatermark();
            if (this.model.loadOnDemand && (!this._dataSource() || (this._dataSource().length !== 0 && this._dataSource().length < 1))) {
            var predecessor = this.element.parents().last();
            this.docbdy = this.model.targetID ? predecessor.find("#" + this.model.targetID) : this.optionDiv ? this.optionDiv : null;
            this.itemsContainer = this.docbdy[0].nodeName == "UL" ? this.docbdy : this.docbdy.children("ol,ul");
            this.itemsContainer.css("display", "none");
            }
            if(!this.model.loadOnDemand){
            this._renderPopupPanelWrapper();
            this._showFullList();
            }
            this._roundedCorner(this.model.showRoundedCorner);
            //To call finalize() only local data source
            var source = this._dataSource();
            if (ej.DataManager && source instanceof ej.DataManager) {
                if (source.dataSource.offline && (source.dataSource.json && source.dataSource.json.length > 0)) {
                    var proxy = this;
                    proxy._finalize();
                }               
            }
            else this._finalize();
            if (!(ej.DataManager && this._dataSource() instanceof ej.DataManager)){
                
                 this._finalize();
            }        
            if(this.model.loadOnDemand && (ej.DataManager && this._dataSource() instanceof ej.DataManager && !this._dataSource().dataSource.offline)) this._finalize();       
            this._setCheckAll(this.model.checkAll);
            if(this.element.attr("disabled") || $(this.selectOptions).attr("disabled"))this.disable();
            if(this.model.loadOnDemand)this.model.showPopupOnLoad && this._showResult();
        },

        _isEqualDataSource: function (source) {
              if (!this._dataSource() || !source ||(this._rawList&& !(this._rawList.length === source.length)) || (ej.DataManager && source instanceof ej.DataManager)) return false;
             if(ej.isNullOrUndefined(this._rawList)||this._dataSource().length===0) return false;
			var equal = true;
            for (var i = 0, len = this._dataSource().length; i < len; i++) {
                if (this._dataSource()[i] !== source[i]) {
                    equal = false;
                    break;
                }
            }
            return equal;
        },

        _checkModelDataBinding: function (source, query) {
            this.element.val("");
            this._visibleInput.val("");
            (this.value()!==null && this.value()!=='') && this._updateValue("");
            this.selectedTextValue = this._selectedValue = this._hiddenValue = "";
            this._updateText();
            this.selectedIndexValue = this._hiddenDelimiterIndex = this._activeItem = -1;
            this._selectedItemsID = [];
            this._textContainer = [];
            this._valueContainer = [];
            if(ej.isNullOrUndefined(source) && ej.isNullOrUndefined(this.model.query) && ej.isNullOrUndefined(this.model.template) && this.model.itemsCount == 0 ){
                this._rawList = [];
                this.popupListItems = []; 
                this.listitems = [];
                this.ultag = this.popupListWrapper.find(".e-ul");
            }
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices = [];
            this.model.selectedIndex = this.model.selectedItemIndex = -1;
            if (this.model.multiSelectMode == "visualmode") this._destroyBoxModel();
            if(JSON.stringify(this._dataSource())!=JSON.stringify(source))this._dataSource(source);
            this.model.query = query;
            !ej.isNullOrUndefined(this.ultag) && this.ultag.empty();
            this._showFullList();
        },
        _initDataSource: function (source) {
            var proxy = this;
            if (ej.DataManager && source instanceof ej.DataManager) {
                proxy._addLoadingClass();
                if (!proxy._trigger("actionBegin", { requestFrom: "default" })) {
                    var queryPromise = source.executeQuery(this._getQuery());
                    queryPromise.done(function (e) {
                        proxy._trigger("actionSuccess", { e: e, requestFrom: "default" });
                        proxy._totalCount = e.count;
                        proxy._listItem(e.result);
                        proxy._removeLoadingClass();
                        proxy._renderPopupList();
                        proxy._finalize();

                    }).fail(function (e) {
                        proxy._dataSource(null);
                        proxy._addLoadingClass();
                        proxy._trigger("actionFailure", { e: e, requestFrom: "default" });
                    }).always(function (e) {
                        proxy._trigger("actionComplete", { e: e, requestFrom: "default" });
                    });
                }
            }
        },
        _listItem: function (list, type) {
            if (type == "add") {
                this.popupListItems.push(list);
                this._rawList.push(list);
            } else if ($.isArray(list)) {
                this.popupListItems = list.slice(0);
                this._rawList = list.slice(0);
            }
        },
        _getQuery: function (isLocal) {
            var remoteUrl, mapper = this.model.fields, queryManager = ej.Query();
            if (ej.isNullOrUndefined(this.model.query) && !this.model.template && !isLocal) {
                var column = [];
                for (var col in mapper) {
                    if (col !== "tableName" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
            }
            else if (this.model.query) queryManager = this.model.query.clone();

            if (this.model.allowVirtualScrolling) queryManager.requiresCount();
            if (this.model.itemsCount > 0) queryManager.take(this.model.itemsCount);

            remoteUrl = this._dataSource().dataSource;
            if (mapper)
                if ((remoteUrl && remoteUrl.url && !remoteUrl.url.match(mapper.tableName + "$")) || (remoteUrl && !remoteUrl.url) || (!remoteUrl))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);

            return queryManager;
        },

        _addLoadingClass: function () {
            if (this._isPopupShown()) {
                this.popupListWrapper.addClass("e-load");
            } else {
                this.dropdownbutton.addClass("e-load");
                this.drpbtnspan.removeClass("e-icon e-arrow-sans-down");
            }
            this._readOnly = true;
        },
        _removeLoadingClass: function () {
            this.dropdownbutton.removeClass("e-load");
            this.drpbtnspan.addClass("e-icon e-arrow-sans-down");
            this._readOnly = false;
            if(!ej.isNullOrUndefined(this.popupListWrapper)) this.popupListWrapper.removeClass("e-load");
        },

        _renderDropdown: function () {
            this.wrapper = ej.buildTag("span.e-ddl e-widget " + this.model.cssClass + "#" + this._id + "_wrapper", "", {}, { "tabindex": "0", "accesskey": this.element.attr("accesskey") });
            this.container = ej.buildTag("span.e-in-wrap e-box " + "#" + this._id + "_container");
            this.element.removeAttr('accesskey');            
			if(this.model.value == null && this.element.attr("value") != null)
				this.model.value = this.element.attr("value");				
			this.element.attr("value","").val("");
            if(!this._isIE8)
            this._setAttr(this.element[0], { "type":"hidden","role": "combobox", "aria-expanded": false, "aria-autocomplete": "list", "aria-haspopup": true, "aria-owns": this._id + "_popup" }).element.hide();
			else
			this._setAttr(this.element[0], {"role": "combobox", "aria-expanded": false, "aria-autocomplete": "list", "aria-haspopup": true, "aria-owns": this._id + "_popup" }).element.hide();			
            this.drpbtnspan = ej.buildTag("span.e-icon e-arrow-sans-down", "", {}, { "aria-label": "select", "unselectable": "on" });
            this.dropdownbutton = ej.buildTag("span.e-select#" + this._id + "_dropdown", "", {}, { "role": "button", "unselectable": "on" }).append(this.drpbtnspan);
            this.container.insertAfter(this.element);
            this.container.append(this.element);
            this.container.append(this.dropdownbutton);
            this.wrapper.insertBefore(this.container);
            this.wrapper.append(this.container);
            if (this.selectelement) {
                this.selectOptions.insertBefore(this.element);
            }
            this._visibleInput = ej.buildTag("input#" + this._id + "_hidden", "", {}).insertAfter(this.element);
            this._visibleInput.addClass("e-input ");
			this._setAttr(this._visibleInput[0],{ "readonly": "readonly", "tabindex": -1,"data-role": "none" });        
            if (!this._isWatermark) {
				var watermark=(this.model.watermarkText != null)? this.model.watermarkText:this._localizedLabels.watermarkText;
                this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(watermark);
                this._hiddenSpan.css("display", "none");
                this._hiddenSpan.on("mousedown", $.proxy(this._OnDropdownClick, this));
            }
            this._checkNameAttr();
            this._setDimentions();
            this._RightToLeft();
            this.ddWidth = (this.dropdownbutton.outerWidth() > 0) ? this.dropdownbutton.outerWidth() : 24;
            //Element not Maintain in Multiselection
            this.container.on("mousedown", $.proxy(this._OnDropdownClick, this));
        },

        _checkNameAttr: function () {
            this._name = ej.isNullOrUndefined(this.element.attr("name")) ? this._id : this.element.attr("name");
            this.element.attr("name", this._name);
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
				var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value); 
                else if (keyName == "disabled" && value == "disabled") proxy.disable();
                else if (keyName == "readOnly" && value == "readOnly") proxy.model.readOnly = true; 
                else if (keyName == "style") proxy.wrapper.attr(key, value);
				else if (keyName == "name") $(proxy.element).attr(key, value);
				else if (ej.isValidAttr(proxy._visibleInput[0], key)) $(proxy._visibleInput).attr(key, value);
                else proxy.wrapper.attr(key, value)
            });
        },
        _renderBoxModel: function () {
            if (!ej.isNullOrUndefined(this._ulBox) || this.model.multiSelectMode != "visualmode") return false;
            this._ulBox = ej.buildTag("ul.e-ul e-boxes");
            this.container.prepend(this._ulBox);
            this._ulBox.css('min-height', '30px');
            this._ulBox.css('display', 'none');
            this._on(this.container, "click", function (e) {
                if (!this.model.enabled) return false;
                var $target = $(e.target);
                if ($target.hasClass("e-options")) {
                    if (!e.ctrlKey && $target.siblings().hasClass("e-active")) this._removeActive();
                    if ($target.hasClass("e-active")) $target.removeClass("e-active");
                    else $target.addClass("e-active");
                }
                if (!e.ctrlKey && ($target.hasClass("e-boxes"))) this._removeActive();
            });
        },

        _renderPopupPanelWrapper: function () {
            var oldWrapper = $("#" + this.element[0].id + "_popup_wrapper").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.popupPanelWrapper = ej.buildTag("div#" + this._id + "_popup_wrapper");
            $('body').append(this.popupPanelWrapper);
            this.popupListWrapper = ej.buildTag("div.e-ddl-popup e-box e-widget  e-popup#" + this._id + "_popup_list_wrapper", "", { display: "none", overflow: "hidden" });
            this.popupList = ej.buildTag("div#" + this._id + "_popup", { "tabIndex": 0 });
            this.popupListWrapper.addClass(this.model.cssClass);
            this.popup = this.popupList;
            this.popupScroller = ej.buildTag("div"); if((ej.isNullOrUndefined(this.ultag))) this.ultag = ej.buildTag("ul.e-ul", "", {}, { "role": "listbox" });
            this.popupScroller.append(this.ultag);
            this.popupList.append(this.popupScroller);
            if (this.model.headerTemplate) {
                this.headerTemplate = $("<div>").append(this.model.headerTemplate);
                this.popupListWrapper.append(this.headerTemplate);
            }
            this.popupListWrapper.append(this.popupList);
            this.popupPanelWrapper.append(this.popupListWrapper);
            this.ultag.on({ mouseenter: $.proxy(this._OnMouseEnter, this), mouseleave: $.proxy(this._OnMouseLeave, this), click: $.proxy(this._OnMouseClick, this)}, "li:not('.e-category')");
            if (ej.isTouchDevice())
             {
             this.ultag.on({tap:$.proxy(this._OnMouseEnter, this) }, "li:not('.e-category')");
               }
            $(window).on("resize", $.proxy(this._OnWindowResize, this));

        },

        _updateText: function () {
            var val = this._visibleInput.val();
            this.model.text = (val == "") ? (this._textContainer.length == 0) ? null : "" : val;
        },
        _updateValue: function (val) {
            this.value(val == "" ? (this._valueContainer.length == 0)? null : "" : val);
        },
        _setGroupingAndSorting: function (prop, value) {
            this.model[prop] = value;
            var oldValue = this.model.text;
            this._updateValue("");
            this._selectedIndices = [];
            this.ultag.empty();
            this._showFullList();
            if (this.model.showCheckbox && oldValue) {
                var values = oldValue.split(this.model.delimiterChar);
                for (var i = 0; i < values.length; i++)
                    this.selectItemByText(values[i]);
            }
            else
                this.selectItemByText(oldValue);
        },
        _setSortingList: function () {
            var sortedlist = document.createElement("ul"), i, sortitems;
            $(sortedlist).append(this.itemsContainer.children());
            if (this.model.allowGrouping || $(sortedlist).find(">.e-category").length > 0) {
                this.popupListWrapper.addClass("e-atc-popup");
                for (i = 0; i < $(sortedlist).find(">.e-category").length; i++) {
                    sortitems = $(sortedlist).find(">.e-category").eq(0).first().nextUntil(".e-category").get();
                    this._setSortList(sortedlist, sortitems);
                }
            }
            else {
                $(sortedlist).children('>.e-category').remove();
                sortitems = $(sortedlist).children('li').get();
                this._setSortList(sortedlist, sortitems);
            }
            this.itemsContainer = $(sortedlist);
        },
        _setSortList: function (sortedlist, sortitems) {
            sortitems.sort(function (objA, objB) {
                var sortA = $(objA).text().toUpperCase();
                var sortB = $(objB).text().toUpperCase();
                return (sortA < sortB) ? -1 : (sortA > sortB) ? 1 : 0;
            });
            if (this.model.sortOrder == "descending") sortitems.reverse();
            if (this.model.allowGrouping || $(sortedlist).find(">.e-category").length > 0) {
                $(sortedlist).append($("<li>").text($(sortedlist).find(">.e-category").eq(0).text()).addClass("e-category"));
                $(sortedlist).find(">.e-category").eq(0).remove();
            }
            $.each(sortitems, function (index, item) {
                $(sortedlist).append(item);
            });
        },

        _renderPopupList: function () {
            this._doDataBind();
            if(this.model.loadOnDemand && (ej.DataManager && this._dataSource() instanceof ej.DataManager && !this._dataSource().dataSource.offline)){
            this.model.showCheckbox && this._checkboxHideShow(this.model.showCheckbox);
            }
            if(ej.isNullOrUndefined(this.scrollerObj) || this._ulBox==null)this._renderRemaining(); 
            if (this.model.loadOnDemand && (this.popUpShow && ej.DataManager && this._dataSource() instanceof ej.DataManager && !this._dataSource().dataSource.offline)){
                this._refreshPopup();
                this._refreshScroller();
            }
        },
        _renderRemaining: function () {
            var proxy = this;
           if(!ej.isNullOrUndefined(this.popupListWrapper)) this._dropbtnRTL();
            if (this.model.enableFilterSearch) this._enableSearch();
            if (this.model.enablePopupResize) this._enablePopupResize();
            if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal") {
                if (this._totalCount && this._totalCount > 0) {
                    this._totalHeight = this._totalCount * 29;
                    this._totalPages = this._totalCount / (this.model.itemsCount * 29);
                    this._loadedItemHeight =  this._getLi().length * 29;
                    this._getLi().attr("page", 0);
                    this._virtualPages = [0];
                    this.ultag.append($("<span>").addClass("e-virtual").css({ "height": this._totalHeight - this._loadedItemHeight, "display": "block" }));
                }
            }
            this._virtualUl = this.ultag.clone(true);
           if(!ej.isNullOrUndefined(this.popupListWrapper)){ 
				this._setListWidth();
            	this._setListHeight();
			}
			if (!this._isSingleSelect()) {
                if (this.model.showCheckbox) this._checkboxHideShow(this.model.showCheckbox);
                else this._multiItemSelection(this._getLi());
            }
            this._setUncheckAll(this.model.uncheckAll);
            if(!ej.isNullOrUndefined(this.popupListWrapper)){
            this.popupScroller.css({ "height": "", "width": "" });
            this.popupList.ejScroller({
                height: this._getPopupHeight(), width: 0, scrollerSize: 20, scroll: function (e) {
                    if (proxy.model.allowVirtualScrolling) proxy._onScroll(e);
                },
                preventDefault: true
            });
            this.scrollerObj = this.popupList.ejScroller("instance");
            this.popupList.find("div.e-scrollbar div").attr("unselectable", "on");
			this._setListPosition();
            !this.popUpShow && this.popupListWrapper.css({ 'display': 'none', 'visibility': 'visible' });
            this._changeSkin(this.model.cssClass);
            }
            if(!this.model.loadOnDemand)this.model.showPopupOnLoad && this._showResult();
        },

        _enableSearch: function () {
            if (this.model.enableFilterSearch)
                if (!ej.isNullOrUndefined(this.popupListWrapper) && !this.inputSearch) {
                    this.inputSearch = ej.buildTag("input#" + this._id + "_inputSearch.e-input", "", {}, { "type": "text", "data-role": "none" });
                    this.popupListWrapper.prepend($("<span>").addClass("e-atc e-search").append($("<span>").addClass("e-in-wrap ").append(this.inputSearch).append($("<span>").addClass(" e-icon e-search"))));
                    var debounceListener = (this.model.enableServerFiltering) ? this._debounce(this._OnSearchEnter, 200): this._OnSearchEnter;
                    this._on(this.inputSearch, "keyup", debounceListener)._on(this.inputSearch, "keydown", function(args){
						var keyCode = args.keyCode || args.which; 
						  if (keyCode == 9) { 
						    args.preventDefault(); 
						    this.wrapper.focus();
							this._hideResult();
						  } 
					});
                }
        },
        _removeSearch: function () {
            this.model.enableFilterSearch = false;
            this.popupListWrapper.find(".e-atc.e-search").remove();
            if (this._isPopupShown()) this.hidePopup();
            this.inputSearch = null;
        },

        _OnSearchEnter: function (e) {
            if (this._prevSearchValue != "" && this._prevSearchValue == this.inputSearch.val()) {
                return;
            } else {
                this._prevSearchValue = this.inputSearch.val()
            }
            if(e.keyCode == 8 && this.model.enableFilterSearch){
                this._disabledItems = this._initDisabledItems;
                this._prevDisabledItems = this._disabledItems;
            }  
            var proxy = this;
            if ($.inArray(e.keyCode, [38, 40, 13]) != -1 && this.ultag.find("li.e-nosuggestion").length <= 0) {
                if (e.keyCode == 13) this._OnKeyUp(e);
                else this._OnKeyDown(e);
            }
            else {
                this._activeItem = -1;
                this._queryString = this.inputSearch.val();
                if (this._queryString == "" && this._virtualUl) {
                    var args = { searchString: this._queryString, searchQuery: null, items: this._rawList };
                    this._trigger("search", args);
                    this._resetList();
                    this._updateSelectedIndexByValue(this.value());
                    this._refreshScroller();
                    this._setListPosition();
                    if(this._prevDisabledItems && this._prevDisabledItems.length > 0){
                        this._disabledItems = [];
                        this._isInteralCall = true;
                        this.disableItemsByIndices(this._prevDisabledItems);
                        this._isInteralCall = false;
                        this._prevDisabledItems = this._disabledItems;
                    }
                } else {
                    this._mapFields(); 
                    var searchQuery = this._addSearchQuery(ej.Query(), !this._isPlainType(this._rawList));
                    var args = { searchString: this._queryString, items: this._rawList, searchQuery: searchQuery };
                    this.popupListWrapper.find(".e-atc.e-search .e-search").addClass("e-cross-circle").removeClass("e-search");
                    this._on(this.popupListWrapper.find(".e-atc.e-search .e-cross-circle"), "mousedown", this._refreshSearch);
                    if (!this._trigger("search", args)){ 
                        proxy._onActionComplete(args); 
                }
                  
                }
            } 
        },
        _debounce: function(eventFunction, delay) { 
            var out;
            var proxy = this;
            return function (){
                var args= arguments;
                var later = function(){
                    out = null;
                return eventFunction.apply(proxy, args);
                };
                clearTimeout(out);
                out = setTimeout(later, delay);
            };
        },
        _onActionComplete: function(args){
            var proxy = this; 
            this._queryString = this.inputSearch.val();
                        var searchQuery = this._addSearchQuery(ej.Query(), !this._isPlainType(this._rawList));
                    var args = { searchString: this._queryString, items: this._rawList, searchQuery: searchQuery }; 
                if(ej.DataManager && this._dataSource() instanceof ej.DataManager && this.model.enableServerFiltering && (window.getSelection().type == "Caret" || ej.browserInfo().name == "msie" )){
                        var searchQuery = args.searchQuery.clone();
                        var queryPromise = proxy._dataSource().executeQuery(searchQuery);
                        queryPromise.done(function (e) { 
                        proxy._filterSearch(args.searchQuery, e); 
                    });
                        }
                        else{
                            proxy._filterSearch(searchQuery, args);
                        }
        },
        _refreshSearch: function () {
            this._resetSearch();
            this._refreshPopup();
            if(this._initDisabledItems.length > 0){
                this._disabledItems = [];
                this.disableItemsByIndices(this._initDisabledItems);
                this._prevDisabledItems = this._disabledItems;
            }
            
        },
        _filterSearch: function (searchQuery, args) {
            var flag = false; 
            this.resultList = args.result ? args.result : ej.DataManager(this._rawList).executeLocal(searchQuery);
            if (this.resultList.length == 0) {
                flag = true;
                this.resultList.push(this._getLocalizedLabels("emptyResultText"));
            }
            var disabledItems = [];
            this._initDisabledItems.forEach(function (disableIndex) {
                this._rawList.forEach(function(item) {
                    if(this._rawList.indexOf(item) == disableIndex){
                        disabledItems.push(item);
                    }
                }, this);
            }, this);
            var disabledIndices = [];
            if (disabledItems.length > 0) {
                this.resultList.forEach(function (resultItem) {
                    if (disabledItems.indexOf(resultItem) >= 0) {
                        disabledIndices.push(this.resultList.indexOf(resultItem));
                    }
                }, this);
            }
            this.popupListItems = this.resultList;
            this.ultag.empty();
            this._valueContainer = [];
            this._isPlainType(this.popupListItems) ? this._plainArrayTypeBinding(this.resultList) :
            this._objectArrayTypeBinding(this.resultList, "search");
            if (flag && this.ultag.find("li").length == 1) {
                this.ultag.find("li").eq(0).addClass("e-nosuggestion");
            }
            if (this.model.showCheckbox && !flag) {
                this._appendCheckbox( this._getLi());
            }
            this._onSearch = true;
            var value = this.value(), visibleText = this._visibleInput[0].value;
            this._setValue(this.value());
			var checkVal = typeof this.model.value === "function" ? this.model.value() : this.model.value;
			if(checkVal != value){
				this.element[0].value = value;
				this._visibleInput[0].value = visibleText;
				this.model.text = visibleText == "" ? null : visibleText;
				if (this.value() != value && !(this.value() == null && value =="" )) {
					this._updateValue(value);
				}
			}
            this._onSearch = false;
            this._updateSelectedIndexByValue(this.value());
            this._refreshScroller();
            this._setListPosition();
            this._prevDisabledItems = this._disabledItems;
            this._disabledItems = [];
            if(disabledIndices.length > 0){
                this._isInteralCall = true;
                this.disableItemsByIndices(disabledIndices);
                this._isInteralCall = false;
            }
        },
        _updateSelectedIndexByValue: function (value) {
            if (!value || !this.model.enableFilterSearch) return;
            this._selectedIndices = this.model.selectedItems = this.model.selectedIndices = [];
            this._virtualList = this._virtualUl.children("li:not('.e-category')");
            var item = this._toArray(value);
            for (var k = 0; k < item.length; k++) {
                for (var m = 0; m < this._virtualList.length; m++) {
                    if (item[k] == this._getIndexedValue(this._virtualList[m])) {
                        this._selectedIndices.push(m);
                        break;
                    }
                }
            }
            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
        },
        _getIndexedValue: function (item) {
            return this._getAttributeValue(item) ? this._getAttributeValue(item) : item.innerText;
        },

        _resetSearch: function () {
            if (!this.inputSearch || !(this.model && this.model.enableFilterSearch)) return;
            if (this.inputSearch.val() != "" && this._virtualUl) {
                this.inputSearch.val("");
                this._resetList();
            }
        },
        _resetList: function () {
            if (this.popupListWrapper.find(".e-atc.e-search .e-cross-circle").length == 1) {
                this.popupListWrapper.find(".e-atc.e-search .e-cross-circle").addClass("e-search").removeClass("e-cross-circle");
                this._off(this.popupListWrapper.find(".e-atc.e-search .e-cross-circle"), "mousedown", this._refreshSearch);
            }
            if(this.model.enableServerFiltering){
			var field = (this.model.fields && this.model.fields.value) ? this.model.fields["value"] : "value";
			for (var i=0; i< this._rawList.length; i++){
				if(this._rawList[i][field] == this._selectedValue)
					this._searchresult= null;
			} 
			if(!ej.isNullOrUndefined(this._searchresult) && !(this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal"))
                this.addItem(this._searchresult);
            }
            this._listItem(this._rawList);
			if (this.model.enableSorting) {
                var sortQuery = ej.Query().sortBy(this.mapFld._text, this.model.sortOrder, true);
                this._rawList = ej.DataManager(this._rawList).executeLocal(sortQuery);
				this.popupListItems = this._rawList;
            }
            this.ultag.empty().append(this._virtualUl.children().clone(true));           
            // this._onSearch variable will restrict the change and select event on searching
            this._onSearch = true;
            this._setValue(this.value());
            this._onSearch = false;
			this._searchresult = [];
        },

       
        _addSearchQuery: function (query, checkMapper) {
            var bindTo = "";
            if (checkMapper) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper.text) ? mapper["text"] : "text";
            }
            if (this._queryString) query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch);
            if (this.model.itemsCount > 0) query.take(this.model.itemsCount);
            return query;
        },

        _targetElementBinding: function () {
            var predecessor = this.element.parents().last();
            this.docbdy = this.model.targetID ? predecessor.find("#" + this.model.targetID) : this.optionDiv ? this.optionDiv : null;
            if (!this.docbdy) return false;
            this.itemsContainer = this.docbdy[0].nodeName == "UL" ? this.docbdy : this.docbdy.children("ol,ul");
            if ((this.model.allowGrouping || this.itemsContainer.find(">.e-category").length > 0) && !this.model.enableSorting) {
                this.popupListWrapper.addClass("e-atc-popup");
                for (var k = 0; k < this.itemsContainer.find(">.e-category").length; k++) {
                    var ele = this.itemsContainer.find(">.e-category").eq(k);
                    ele.replaceWith($("<li>").text(ele.text()).addClass("e-category"));
                }
            }
            else if (this.model.enableSorting) this._setSortingList();
            this.itemsContainer.children("ol,ul").remove();
            if(this.model.loadOnDemand)
            this.items = (this.itemsContainer.children().length>0)?this.itemsContainer.children('li'): this.items;
            else
            this.items = this.itemsContainer.children('li');
            this.items.children("img,div").addClass("e-align");
            this._listItem([]);
            for (var i = 0; i < this.items.length; i++) {
                var fieldText = $(this.items[i]).text(), fieldValue = this._getAttributeValue(this.items[i]);
                if(!$(this.items[i]).attr("data-value")) $(this.items[i]).attr("data-value", fieldValue ? fieldValue : fieldText);
                this._listItem({ text: fieldText, value: fieldValue ? fieldValue : fieldText }, "add");
            }
            //This will append the list with the popup wrapper
            if(this.model.loadOnDemand)
            this.ultag.empty().append(this.items);
            else 
            this.ultag.empty().append(this.itemsContainer.children());
			this.ultag.children('li').attr("role", "option").attr("unselectable", "on");		
            this.docbdy.css({ 'display': 'none' }).children("ol,ul").remove();
        },
        _plainArrayTypeBinding: function (list) {
            this.dummyUl = $();
            if (this.model.enableSorting) {
                list.sort();
                if (this.model.sortOrder == "descending") list.reverse();
            }
            if (list.length > 0) {
                for (var i = 0; i < list.length; i++) {
                    if (!ej.isNullOrUndefined(list[i])) {
                        var litag = ej.buildTag("li", list[i], {}, { 'data-value': list[i], "unselectable": "on" });
                        this.dummyUl.push(litag[0]);
                    }
                }
                this.ultag.append(this.dummyUl);
                this._trigger('dataBound', { data: list });
            }

        },
        _mapFields: function () {
            this.model.fields.groupBy = this.model.fields.groupBy ? this.model.fields.groupBy : this.model.fields.category;
            var mapper = this.model.fields;
            this.mapFld = { _id: null, _imageUrl: null, _imageAttributes: null, _spriteCSS: null, _text: null, _value: null, _htmlAttributes: null, _selected: null };
            this.mapFld._id = (mapper && mapper.id) ? mapper["id"] : "id";
            this.mapFld._imageUrl = (mapper && mapper.imageUrl) ? mapper["imageUrl"] : "imageUrl";
            this.mapFld._imageAttributes = (mapper && mapper.imageAttributes) ? mapper["imageAttributes"] : "imageAttributes";
            this.mapFld._spriteCSS = (mapper && mapper.spriteCssClass) ? mapper["spriteCssClass"] : "spriteCssClass";
            this.mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
            this.mapFld._value = (mapper && mapper.value) ? mapper["value"] : "value";
            this.mapFld._htmlAttributes = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
            this.mapFld._selected = (mapper && mapper.selected) ? mapper["selected"] : "selected";
            this.mapFld._category = (mapper && mapper.groupBy) ? mapper["groupBy"] : "groupBy";
        },
        _doDataBind: function () {
            var source = this._dataSource(), list = this.popupListItems;
            !source || !list || !list.length || list.length < 1 ? this._targetElementBinding()
            : this._isPlainType(list) ? this._plainArrayTypeBinding(list)
            : this._objectArrayTypeBinding(list);
        },
        _isPlainType: function (list) {
            return typeof list[0] != "object";
        },
        _objectArrayTypeBinding: function (list, from) {
            this.dummyUl = $();
            this._mapFields();
            if (this.model.enableSorting) {
                var sortQuery = ej.Query().sortBy(this.mapFld._text, this.model.sortOrder, true);
                list = ej.DataManager(list).executeLocal(sortQuery);
				this.popupListItems = list;
            }
            if (this.model.allowGrouping || this.model.fields.groupBy) {
              if(!ej.isNullOrUndefined(this.popupListWrapper)) this.popupListWrapper.addClass("e-atc-popup");
                var mapCateg = this.mapFld._category, groupedList, groupQuery;
                groupQuery = ej.Query().group(mapCateg);
                if (!this.model.enableSorting) groupQuery.queries.splice(0, 1);
                groupedList = ej.DataManager(list).executeLocal(groupQuery);
                this._swapUnCategorized(groupedList);
                (from == "search") ? this.popupListItems = [] : this._listItem([]);
                for (var i = 0; i < groupedList.length; i++) {
                    if (groupedList[i].key)
                        this.ultag.append(ej.buildTag("li.e-category", groupedList[i].key).attr("role", "option")[0]);
                    this._generateLi(groupedList[i].items, this.mapFld);
                    this.ultag.append(this.dummyUl);
                    for (var j = 0; j < groupedList[i].items.length; j++) {
                        (from == "search") ? this.popupListItems.push(groupedList[i].items[j]) : this._listItem(groupedList[i].items[j], "add");
                    }
                }
            }
            else {
                this._generateLi(list, this.mapFld);
                this.ultag.append(this.dummyUl);//ko binding
            }
            this._trigger('dataBound', { data: list });
        },
        _onScroll: function (e) {
            if (!e.scrollTop) return;
            var scrollerPositon = e.scrollTop, proxy = this;
            var source = this._dataSource();
            if (proxy.model.allowVirtualScrolling && proxy.model.virtualScrollMode == "continuous") {
                var list, queryPromise, skipQuery = ej.Query().skip(proxy._rawList.length).take(proxy.model.itemsCount).clone();
                if (scrollerPositon >= Math.round($(proxy.popupList).find("ul,ol").height() - $(proxy.popupList).height()) && proxy._rawList.length < proxy._totalCount) {
                    proxy._addLoadingClass();
                    if (ej.DataManager && proxy._dataSource() instanceof ej.DataManager && !ej.isNullOrUndefined(proxy._dataSource().dataSource.url)) {
                        if (proxy.inputSearch && proxy.inputSearch.val() != "" && this.model.enableServerFiltering) 
                         skipQuery = proxy._addSearchQuery(ej.Query(), !proxy._isPlainType(proxy._rawList)).skip(proxy._getLi().length).clone();
                        else
                        skipQuery = proxy._getQuery().skip(proxy._rawList.length).take(proxy.model.itemsCount).clone();
                        if (!proxy._trigger("actionBegin", { requestFrom: "scroll" })) {
                            queryPromise = proxy._dataSource().executeQuery(skipQuery);
                            queryPromise.done(function (e) {
                                if (!ej.isNullOrUndefined(proxy.model.value) && proxy.model.enableServerFiltering)
                                    e.result = proxy._removeSelectedValue(e.result);
                                proxy.addItem(e.result);
                                proxy._removeLoadingClass();
                                proxy._trigger("actionSuccess", { e: e, requestFrom: "scroll" });
                            }).fail(function () {
                                proxy._dataSource(null);
                                proxy._removeLoadingClass();
                                proxy._trigger("actionFailure", { e: e, requestFrom: "scroll" });
                            }).always(function (e) {
                                proxy._trigger("actionComplete", { e: e, requestFrom: "scroll" });
                            });
                        }
                    }
                    else if (ej.DataManager && source instanceof ej.DataManager && source.dataSource.offline && (source.dataSource.json && source.dataSource.json.length > 0)) {
                                proxy.addItem(this._localDataVirtualScroll());
                                window.setTimeout(function () {
                                proxy._removeLoadingClass();
                            }, 100);
                    }
                    else {
                        list = ej.DataManager(proxy._dataSource()).executeLocal(skipQuery);
                        proxy.addItem(proxy._removeSelectedValue(list));
                        proxy._removeLoadingClass();
                    }
                }
            } else if (proxy.model.allowVirtualScrolling && proxy.model.virtualScrollMode == "normal") {

                window.setTimeout(function () {
                    if (proxy._virtualCount == 0) {
                        proxy._loadList();
                    }
                }, 300);

            }

        },
        _localDataVirtualScroll: function () {
            var proxy = this;
            var selectValue = (!ej.isNullOrUndefined(proxy.value())) ? (typeof(proxy.value()) == "number") ? 1 : proxy.value().split(proxy.model.delimiterChar).length : 0;
            var _rawlist = (proxy._checkValue) ? proxy._rawList.length - selectValue : proxy._rawList.length;
            var queryPromise = ej.DataManager(proxy._dataSource().dataSource.json).executeLocal(ej.Query().skip(_rawlist).take(proxy.model.itemsCount).clone());
            return proxy._removeSelectedValue(queryPromise); 
        },
        _removeSelectedValue: function (data) { 
            if (!ej.isNullOrUndefined(this.value())) {
                var listitems = (typeof(this.value()) == "number") ? this.value() : this.value().split(this.model.delimiterChar);
                for (var k = 0; k < listitems.length; k++) {
                    for (var m = 0; m < data.length; m++) {
                        if (data[m][this.mapFld._value] == listitems[k]) 
                            data.splice(data.indexOf(data[m]), 1);
                    }
                }
                return data;
            }
            else
                return data;
        },
        _loadList: function () {
            this._virtualCount++;
            var source = this._dataSource();
            var top = this.scrollerObj.scrollTop(), proxy = this, prevIndex = 0, prevPageLoad, nextIndex = null;
            this._currentPage = Math.round(top / (29 * this.model.itemsCount));
			if(this._virtualPages){
            if (($.inArray(this._currentPage, this._virtualPages.sort(function (a, b) { return a - b; }))) != -1) {
                if (this._currentPage == 0) {
                    if (($.inArray(this._currentPage + 1, this._virtualPages)) != -1) {
                        this._virtualCount--;
                        return false;
                    } else {
                        this._currentPage = this._currentPage + 1;
                    }
                }
                else if (($.inArray(this._currentPage - 1, this._virtualPages)) != -1) {
                    if (($.inArray(this._currentPage + 1, this._virtualPages)) != -1) {
                        this._virtualCount--;
                        return false;
                    } else {
                        this._currentPage = this._currentPage + 1;
                    }
                }
                else {
                    this._currentPage = this._currentPage - 1;
                }
            }
            prevPageLoad = !($.inArray(this._currentPage - 1, this._virtualPages) != -1);
            this._addLoadingClass();
            for (var i = this._virtualPages.length - 1; i >= 0; i--) {
                if (this._virtualPages[i] < this._currentPage) {
                    prevIndex = this._virtualPages[i];
                    if (!(i + 1 == this._virtualPages.length))
                        nextIndex = this._virtualPages[i + 1];
                    break;
                }
            }
		  }
            var firstArg = prevPageLoad ? (this._currentPage - 1) * this.model.itemsCount : this._currentPage * this.model.itemsCount;
            var skipQuery = ej.Query().range(firstArg, this._currentPage * this.model.itemsCount + this.model.itemsCount), queryPromise, list;
            if (ej.DataManager && proxy._dataSource() instanceof ej.DataManager && !ej.isNullOrUndefined(proxy._dataSource().dataSource.url)) {
                var skipParam = prevPageLoad ? (this._currentPage - 1) * this.model.itemsCount : this._currentPage * this.model.itemsCount;
                skipQuery = this._getQuery().skip(skipParam);
                if (prevPageLoad) {
                    for (i = 0; i < skipQuery.queries.length; i++) {
                        if (skipQuery.queries[i].fn == "onTake") {
                            skipQuery.queries.splice(i, 1);
                            break;
                        }
                    }
                    skipQuery.take(2 * this.model.itemsCount);
                }
                if (!proxy._trigger("actionBegin", { requestFrom: "scroll" })) {
                   if (proxy.inputSearch && proxy.inputSearch.val() != "" && this.model.enableServerFiltering) var skipQuery = proxy._addSearchQuery(ej.Query(), !proxy._isPlainType(proxy._rawList)).skip(proxy._getLi().length).clone();
                    queryPromise = proxy._dataSource().executeQuery(skipQuery);
                    queryPromise.done(function (e) {
                        e.result = proxy._removeSelectedValue(e.result);
                        proxy._appendVirtualList(e.result, prevIndex, proxy._currentPage, nextIndex, prevPageLoad);
                        proxy._removeLoadingClass();
                        proxy._trigger("actionSuccess", { e: e, requestFrom: "scroll" });
                    }).fail(function (e) {
                        proxy._virtualCount--;
                        proxy._removeLoadingClass();
                        proxy._trigger("actionFailure", { e: e, requestFrom: "scroll" });
                    }).always(function (e) {
                        proxy._trigger("actionComplete", { e: e, requestFrom: "scroll" });
                    });
                }
            }
            else if (ej.DataManager && source instanceof ej.DataManager && source.dataSource.offline && (source.dataSource.json && source.dataSource.json.length > 0)) {
                proxy._appendVirtualList(this._localDataVirtualScroll(), prevIndex, proxy._currentPage, nextIndex, prevPageLoad);
                window.setTimeout(function () {
                    proxy._removeLoadingClass();
                }, 100);
            }
            else {
                list = ej.DataManager(proxy._dataSource()).executeLocal(skipQuery);
                proxy._appendVirtualList(proxy._removeSelectedValue(list), prevIndex, proxy._currentPage, nextIndex, prevPageLoad);
                proxy._removeLoadingClass();
            }
        },
        _appendVirtualList: function (list, prevIndex, currentIndex, nextIndex, prevPageLoad) {
		  if(this._virtualPages){
            this._virtualCount--;
            this.ultag.find("span.e-virtual").remove();
            if (!ej.isNullOrUndefined(this.activeItem)) this.activeItem.attr("page", "0");
            if (($.inArray(currentIndex, this._virtualPages.sort(function (a, b) { return a - b; }))) != -1) return false;
            if (prevPageLoad && ($.inArray(currentIndex - 1, this._virtualPages.sort()) != -1)) {
                list.splice(0, this.model.itemsCount);
                prevPageLoad = false;
            }
            var items = this.model.itemsCount, tempUl = $("<ul>"), firstVirtualHeight, secondVirtualHeight;
            firstVirtualHeight = prevPageLoad ? ((currentIndex - 1) * items * 29) - (prevIndex * items + items) * 29 : (currentIndex * items * 29) - (prevIndex * items + items) * 29;
            if (firstVirtualHeight != 0) tempUl.append($("<span>").addClass("e-virtual").css({ display: "block", height: firstVirtualHeight }));
            this._mapFields();
            this._generateLi(list, this.mapFld);
            $(this.dummyUl).attr("page", currentIndex);
            if (prevPageLoad) {
                $(this.dummyUl).slice(0, items).attr("page", currentIndex - 1);
            }
            if (this.model.showCheckbox) {
                this._appendCheckbox(this.dummyUl);
            }
            tempUl.append(this.dummyUl);
            secondVirtualHeight = (currentIndex * items + items) * 29;
            if (nextIndex != null) secondVirtualHeight = (nextIndex * items * 29) - secondVirtualHeight;
            else secondVirtualHeight = this.ultag.height() - secondVirtualHeight;
            if (secondVirtualHeight != 0) tempUl.append($("<span>").addClass("e-virtual").css({ display: "block", height: secondVirtualHeight }));
            if (this.model.itemsCount > 0 && this.value() != "" && (this._dataSource() instanceof ej.DataManager && this._dataSource().dataSource.offline))
                var selector = this.ultag.find("li").last();
            else
                var selector = this.ultag.find("li[page=" + prevIndex + "]").last();
            selector.next().remove();
            tempUl.children().insertAfter(selector);
            this._virtualPages.push(currentIndex);
            if (prevPageLoad) this._virtualPages.push(currentIndex - 1);
            for (var i = 0; i < list.length; i++) {
                this._listItem(list[i], "add");
            }
            this._virtualUl = this.ultag.clone(true);
            this._renderBoxModel();
		  }
        },

        _generateLi: function (list, mapFld) {
            this.mapFld = mapFld;
            this.dummyUl = [];
            if (!list || !list.length || list.length < 1) return false;
            for (var i = 0; i < list.length; i++) {
                var _did = this._getField(list[i], this.mapFld._id),
                    _dimageUrl = this._getField(list[i], this.mapFld._imageUrl),
                    _dimageAttributes = this._getField(list[i], this.mapFld._imageAttributes),
                    _dspriteCss = this._getField(list[i], this.mapFld._spriteCSS),
                    _dtext = this._getField(list[i], this.mapFld._text),
                    _dvalue = this._getField(list[i], this.mapFld._value),
                    _dhtmlAttributes = this._getField(list[i], this.mapFld._htmlAttributes),
                    _dselected = this._getField(list[i], this.mapFld._selected),
                    litag = document.createElement("li");

                if (!ej.isNullOrUndefined(_dvalue)) {
                    litag.setAttribute('data-value', typeof _dvalue == "object" ? JSON.stringify(_dvalue) : _dvalue);
                }
                else {
                     litag.setAttribute('data-value', _dtext);
                }
                if (!ej.isNullOrUndefined(_did) && (_did !== ""))
                    litag.setAttribute('id', _did);
                if (!ej.isNullOrUndefined(_dhtmlAttributes) && (_dhtmlAttributes != "")) {
                    this._setAttr(litag, _dhtmlAttributes);
                }

                if (this.model.template) {
                    $(litag).append(this._getTemplatedString(list[i]));
                } else {
                    if (!ej.isNullOrUndefined(_dimageUrl) && (_dimageUrl != "")) {
                        var imgtag = document.createElement("img");
                        this._setClass(imgtag, "e-align")._setAttr(imgtag, { 'src': _dimageUrl, 'alt': _dtext });
                        if ((_dimageAttributes) && (_dimageAttributes != "")) {
                            this._setAttr(imgtag, _dimageAttributes);
                        }
                        litag.appendChild(imgtag);
                    }
                    if (!ej.isNullOrUndefined(_dspriteCss) && (_dspriteCss != "")) {
                        var divtag = document.createElement("div");
                        this._setClass(divtag, 'div.e-align ' + _dspriteCss + ' sprite-image');
                        litag.appendChild(divtag);
                    }
                    if (_dselected) {
                        this._setClass(litag, "chkselect");
                    }
                    {
                        if (ej.isNullOrUndefined(_dtext)) _dtext = String(_dtext);
                        var textEle = document.createElement("span");
                        textEle.appendChild(document.createTextNode(_dtext));
                        this._setClass(textEle, "e-ddltxt");
                        litag.appendChild(textEle);
                    }
                }
                this._setAttr(litag, { "role": "option", "unselectable": "on" });
                this.dummyUl.push(litag);
             
            }
        },

        _setAttr: function (element, attrs) {
            if (typeof attrs == "string") {
                var sAttr = attrs.replace(/['"]/g, "").split("=");
                if (sAttr.length == 2) (element.hasAttribute(sAttr[0]) && sAttr[0] == "class") ? $(element).addClass(sAttr[1]) : element.setAttribute(sAttr[0], sAttr[1]);
            }
            else {
                for (var idx in attrs) {
                    if ((idx == 'styles' || idx == 'style') && typeof attrs[idx] == 'object') {
                        for (var prop in attrs[idx]) {
                            element.style[prop] = attrs[idx][prop];
                        }
                    }
                    else
                        element.setAttribute(idx, attrs[idx]);
                }
            }
            return this;
        },
        _setClass: function (element, classNme) {
            element.className += " " + classNme;
            return this;
        },
        _removeClass: function (element, classNme) {
            var index = element.className.indexOf(classNme);
            if (index >= 0) {
                if (index != 0 && element.className[index - 1] === " ")
                    element.className = element.className.replace(" " + classNme, "");
                else element.className = element.className.replace(classNme, "");
            }
            return this;
        },
        _hasClass: function (element, classNme) {
            return element.className.indexOf(classNme) >= 0;
        },
        _swapUnCategorized: function (list) {
            $(list).each(function (i, obj) {
                if (!obj.key) {
                    for (var j = i; j > 0; j--) {
                        list[j] = list[j - 1];
                    }
                    list[j] = obj;
                    return false;
                }
            });
        },

        _getField: function (obj, fieldName) {
            return ej.pvt.getObject(fieldName, obj);
        },

        _getTemplatedString: function (list) {

            var str = this.model.template, start = str.indexOf("${"), end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
                var field = content.replace("${", "").replace("}", "");
                str = str.replace(content, this._getField(list, field));
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        },

        _setWatermark: function () {
            if ((this.element.val() == "") && this._trim(this._visibleInput.val()) == "") {
				var watermark=(this.model.watermarkText != null)? this.model.watermarkText:this._localizedLabels.watermarkText;
                if (this._isWatermark)
                    this._visibleInput.attr("placeholder", watermark);
                else
                    this._hiddenSpan.css("display", "block").text(watermark);
                //In visual mode, to show watermark text when no items selected.
                if (this.model.multiSelectMode == "visualmode" && this._ulBox && this._ulBox.find('li').length == 0) this._swapUlandInput(false);
            }
        },

        _checkboxHideShow: function (value) {
            if(!ej.isNullOrUndefined(this.ultag)){
            if (value) {
                this.listitems = this._getLi();
                var chklist = this.listitems.find('input[type=checkbox]');
                if (chklist.length == 0) {
                    this._appendCheckbox(this.listitems);
                }
            }

            else
                this._removeCheck(this.popupList);
            this.model.showCheckbox = value;
            this._virtualUl = this.ultag.clone(true);
            }
        },
        
        _setCheckAll: function (value) {
            if (!this._isSingleSelect() && (value))
                this.checkAll();
            else this.model.checkAll = false;
        },
        _setUncheckAll: function (value) {
            if (!this._isSingleSelect() && (value))
                this.uncheckAll();
            else this.model.uncheckAll = false;
        },

        checkAll: function () {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0))this._showFullList();
            var _nodes = this._selectedIndices, isAlreadySelected = false;
            this._mapFields();
            this.listitems = this._getLi();
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            if (!this._isSingleSelect()) {
                for (var i = 0; i < this.listitems.length; i++) {
                    this._currentText = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._decode(this._getField(this.popupListItems[i], this.mapFld._text));
                    this._hiddenValue = this._getAttributeValue(this.listitems[i]) || this._currentText;
                    if(!this._checkContains(this._hiddenValue))
                    if (this.model.showCheckbox) {
                        var checkboxWrap = $(this.listitems[i]).children(".e-checkwrap")[0];
                        if (checkboxWrap && !this._isChecked(checkboxWrap)) {
                            this._setClass(checkboxWrap, "e-check-act");
							this._setAttr(checkboxWrap,{"aria-checked":true});
                            checkboxWrap.firstChild.checked = true;
                            isAlreadySelected = false;
                        }
                        else isAlreadySelected = true;
                    }
                    else {
                        isAlreadySelected = false;
                        $(this.listitems[i]).addClass("e-active");
                    }
                    else isAlreadySelected = true;
                    
                    if (!isAlreadySelected) {
						this.checkedStatus = true;
                        this._itemID = $(this.listitems[i]).attr("id");
                        if (!ej.isNullOrUndefined(this._itemID) && this._itemID != "")
                            this._selectedItemsID.push(this._itemID);
                        this._createListHidden(this._hiddenValue);
                        if (this.model.multiSelectMode == "visualmode") {
                            this._ulBox.append(this._createBox(this._currentText,this._hiddenValue));
                            if (this._isPopupShown()) this._setListPosition();
                        }
                        this._addText(this._currentText);
                        if ($.inArray(i, _nodes) == -1) {
                            this._selectedIndices.push(i);
                            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                        }
                        this._selectedValue = this._getAttributeValue(this.listitems[i]) || "";
                        if (!this._initValue)
                            this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
                        var args = { text: this._visibleInput[0].value, selectedText: this._currentText, itemId: i, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus };
                        this._updateValue(this.element.val());
                        this._updateText();
                        if (!this._initValue)
                            this._trigger("change", args);
                        this._activeItem = i;
                        this.activeItem = this._getActiveItem();
                        this._cascadeAction();
                    }
                }
                this.model.itemValue = this._selectedValue;
                this.model.uncheckAll = false;
                this.model.checkAll = true;
                this._activeItem = -1;
                this._setWatermark();
            }
        },
        _createListHidden: function (value) {
            var arrayHidden = document.createElement("input");
			var quote = /'/;
			if(quote.test(value))
			   value =value.replace(quote,"&apos;")
            this._setAttr(arrayHidden, { type: "hidden", name: this._name, value: value, id: "#" + value });
			if($.inArray(arrayHidden.value,this._hiddenInputElement) == -1){
				this._hiddenInputElement.push(arrayHidden.value);
				this.container.append(arrayHidden);
				$(this.element).attr("name", "hiddenEle");
			}
        },
        _removeListHidden: function (value) {
			var quote = /'/;
			if(quote.test(value))
			     value =value.replace(quote,"&apos;")
            var arrayEle = this.container.find("[id='#" + value + "']");
			this._hiddenInputElement.splice($.inArray(arrayEle.value,this._hiddenInputElement),1);
            $(arrayEle).remove();
			if (!this._isSingleSelect() && this.element.val() == "") this.element.attr("name", this._name);
        },
        _getAttributeValue: function (val) {
			if(!ej.isNullOrUndefined(val)) {
				var eleValue = ej.isNullOrUndefined(val.getAttribute("data-value"))? val.getAttribute("value") : val.getAttribute("data-value");
			}
            return val ? eleValue : null;
        },
       
        _selectCheckedItem: function (chkitems) {
            if(this.model.loadOnDemand && (ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0))this._showFullList();
            for (var i = 0; i < chkitems.length; i++) {
                this._activeItem = chkitems[i];
                this._enterTextBoxValue();
            }
        },

        /* will deprecate with uncheckAll method */
        unCheckAll: function () { this.uncheckAll(); },

        uncheckAll: function () {
            var isAlreadySelected = false;
            this.listitems = this._getLi();
            this._mapFields();
            if (!this._isSingleSelect()) {
                for (var i = 0; i < this.listitems.length; i++) {
                    this._currentText = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
                    this._hiddenValue = this._getAttributeValue(this.listitems[i]) || this._currentText;
                    if(this._checkContains(this._hiddenValue))
                    if (this.model.showCheckbox) {
                        var checkboxWrap = $(this.listitems[i]).children(".e-checkwrap")[0];
                        if (checkboxWrap && this._isChecked(checkboxWrap)) {
                            this._removeClass(checkboxWrap, "e-check-act");
							this._setAttr(checkboxWrap,{"aria-checked":false});
                            checkboxWrap.firstChild.checked = false;
                            isAlreadySelected = true;
                        }
                        else isAlreadySelected = false;
                    }
                    else {
                        $(this.listitems[i]).removeClass("e-active");
                        isAlreadySelected = true;
                    }
                    else isAlreadySelected = false;
                    
                    if (isAlreadySelected) {
                        this.checkedStatus = false;
                        this._activeItem = i;
                        this.activeItem = this._getActiveItem();
                        this._removeText(this._hiddenValue);
                        this._removeListHidden(this._hiddenValue);
                        var _nodes = this._selectedIndices;
                        if ($.inArray(i, _nodes) > -1) {
                            this._selectedIndices.splice($.inArray(i, _nodes), 1);
                            this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                        }
                        this._selectedValue = this._getAttributeValue(this.listitems[i]) || "";
                        this._itemID = $(this.listitems[i]).attr("id");
                        if (!ej.isNullOrUndefined(this._itemID) && this._itemID != "")
                            this._removeSelectedItemsID();
                        if (!this._initValue)
                            this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
                        var args = { text: this._visibleInput[0].value, selectedText: this._currentText, itemId: i, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus };
                        this._updateValue(this.element.val());
                        this._updateText();
                        if (!this._initValue)
                            this._trigger("change", args);
                        this._cascadeAction();
                        if (this.model.multiSelectMode == "visualmode") {
                            this._deleteBoxCheck(this._hiddenValue);
                            if (this._isPopupShown())
                                this._setListPosition();
                        }
                    }
                    
                }
                this.model.itemValue = this._selectedValue;
                this.model.checkAll = false;
                this.model.uncheckAll = true;
                this._setWatermark();
                this._activeItem = -1;
            }

        },
        _removeSelectedItemsID: function () {
            var itemToRemove;
            itemToRemove = this._selectedItemsID.indexOf(this._itemID);
            this._selectedItemsID.splice(itemToRemove, 1);
            this._itemID = "";
        },


        _refreshScroller: function () {
			if(!ej.isNullOrUndefined(this.popupListWrapper))
			{
            if (!this.model.enablePopupResize) { // to set popup height as per the no.of list items
                this.popupList.css("height", "auto");
                this.popupListWrapper.css("height", "auto");
            }
            this.popupList.find(".e-content, .e-vhandle").removeAttr("style");
            this.popupList.find(".e-vhandle div").removeAttr("style");
            this.popupList.children(".e-content").removeClass("e-content");
            var flag = this._isPopupShown();
            this.popupListWrapper.css("display", "block");
            this.popupList.css({ "display": "block" });  // For get the height of the popup
            this.scrollerObj.model.height = Math.ceil(this._getPopupHeight());
            this.scrollerObj.refresh();
            if (!this.model.enablePopupResize) { // to set popup height as per the no.of list items
                this.popupList.css("height", "auto");
                this.popupListWrapper.css("height", "auto");
            }
            this.scrollerObj.option("scrollTop", 0);
            if (!flag) this.popupListWrapper.css("display", "none");
			}
        },
        _enablePopupResize: function () {
            if (this.model.enablePopupResize && !ej.isNullOrUndefined(this.popupListWrapper)) {
                this.popupListWrapper.addClass("e-resizable").append(ej.buildTag("div.e-resizebar").append(ej.buildTag("div.e-icon e-resize-handle")))
                .find(".e-resize-handle").addClass((this.model.enableRTL) ? "e-rtl-resize" : "");
                this._resizePopup();
            }
        },


        _resizePopup: function () {
            var proxy = this, started = false;
            this.popupListWrapper.find("div.e-resize-handle").ejResizable(
                {
                    minHeight: proxy._validatePixelData(proxy.model.minPopupHeight),
                    minWidth:  proxy._validatePixelData(proxy.model.minPopupWidth),
                    maxHeight: proxy._validatePixelData(proxy.model.maxPopupHeight),
                    maxWidth:  proxy._validatePixelData(proxy.model.maxPopupWidth),
                    handle: "e-ddl-popup",
                    resizeStart: function (event) {
                        if (!proxy.model.enabled)
                            return false;
                        !started && proxy._trigger("popupResizeStart", { event: event });
                        started = true;
                    },
                    resize: function (event) {
                        var reElement = $(event.element).parents("div.e-ddl-popup");
                        proxy._refreshPopupOnResize($(reElement).outerHeight(), $(reElement).outerWidth());
                        proxy._trigger("popupResize", { event: event });
                    },
                    resizeStop: function (event) {
                        if (started) {
                            proxy._refreshPopupOnResize(proxy.model.popupHeight, proxy.model.popupWidth);
                            started && proxy._trigger("popupResizeStop", { event: event });
                            started = false;
                        }
                    },
                    helper: function (event) {
                        var reElement = $(event.element).parents("div.e-ddl-popup");
                        proxy._refreshPopupOnResize($(reElement).outerHeight(), $(reElement).outerWidth());
                        return $(proxy.popupListWrapper);
                    }
                });
        },

        _refreshPopupOnResize: function (currHeight, currWidth) {
            if (currHeight) this.model.popupHeight = currHeight;
            if (currWidth) this.model.popupWidth = currWidth;
            this.popupListWrapper.css({ "height": this._validatePixelData(this.model.popupHeight), "min-height": this._validatePixelData(this.model.minPopupHeight), "max-height": this._validatePixelData(this.model.maxPopupHeight) });
            this._setListWidth();
            this._refreshScroller();
        },

        _setListWidth: function () {
            if(!ej.isNullOrUndefined(this.popupListWrapper)){
            var width = this.model.popupWidth;
            if (width != "auto") this.popupListWrapper.css({ "width": width });
            else this.popupListWrapper.css({ "min-width": this._validatePixelData(this.model.minPopupWidth) });
            this.popupListWrapper.css({ "max-width": this._validatePixelData(this.model.maxPopupWidth) });
            }
        },

        _setListHeight: function () {
            if(!ej.isNullOrUndefined(this.popupListWrapper)){
            if (this.model.enablePopupResize && this.model.enableFilterSearch && this.model.minPopupHeight && this.model.minPopupHeight.toString().indexOf("%") <0 && this._validatePixelData(this.model.minPopupHeight) == 20)
                this.model.minPopupHeight = '65'; /* adding default height of search box*/
            this.model.enablePopupResize ? this.popupListWrapper.css({ "min-height": this._validatePixelData(this.model.minPopupHeight), "max-height": this._validatePixelData(this.model.maxPopupHeight), "height": this._validatePixelData(this.model.popupHeight) }) :
            this.popupListWrapper.css({ "max-height": this._validatePixelData(this.model.popupHeight), "min-height": this._validatePixelData(this.model.minPopupHeight) });
            }
        },
		_validatePixelData: function (data) {			
			return (data && !isNaN(data))? Number(data):data;
		},
        _getPopupHeight: function () {
            var wrap = this.popupListWrapper.height();
            if (this.model.enablePopupResize) wrap -= this.popupListWrapper.find(">div.e-resizebar").height();
            if (this.model.headerTemplate && this.headerTemplate) wrap -= this.headerTemplate.height();
            if (this.model.enableFilterSearch && this.inputSearch) {
                var ele = this.inputSearch.parent(".e-in-wrap");
                wrap -= (parseInt(ele.css("height")) + parseInt(ele.css('margin-top')) + parseInt(ele.css('margin-bottom')));
            }
            return wrap;
        },

        _refreshPopup: function () {
            if (this.model.popupWidth == "auto" && !this._validatePixelData(this.model.minPopupWidth)) this.popupListWrapper.css({ "min-width": this.wrapper.width() });
			else if(this._validatePixelData(this.model.minPopupWidth))this.popupListWrapper.css({ "min-width": this._validatePixelData(this.model.minPopupWidth) });
            if(this.scrollerObj != undefined) this._refreshScroller();
            this._setListPosition();
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.popupListWrapper.outerHeight(),
            popupWidth = this.popupListWrapper.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popupListWrapper.outerWidth() - elementObj.outerWidth();
            this.popupListWrapper.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });

        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popupListWrapper);
        },


        _showResult: function () {
            var proxy = this;
            this.popUpShow = true
            if(this.model.loadOnDemand) { 
                if(ej.isNullOrUndefined(this.popupListWrapper))this._renderPopupPanelWrapper();
                if(ej.isNullOrUndefined(this.ultag) || this.ultag.children().length==0){
                    this._showFullList();
               }
               this._renderRemaining();
            }
            if (this.model.allowGrouping || this.model.fields.groupBy) {
              this.popupListWrapper.addClass("e-atc-popup");
            }
            var args = { text: this._visibleInput[0].value, value: this._selectedValue, refreshPopup: true };
            if (this._trigger("beforePopupShown", args)) return;
            if (args.refreshPopup) this._refreshPopup();
            $(this.popupListWrapper).slideDown(this.model.enableAnimation ? 200 : 1, function () {
                $(document).on("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
                if(!(ej.isDevice()))
                proxy._on(ej.getScrollableParents(proxy.wrapper), "scroll", proxy._hideResult);
            });
            this.element[0].setAttribute("aria-expanded", true);
            this._listSize =  this._getLi().length;
            this.wrapper.addClass("e-popactive");
            this._trigger("popupShown", { text: this._visibleInput[0].value, value: this._selectedValue });
            this.scrollerObj.setModel({ scrollTop: this._calcScrollTop('active') });
        },

        _OnWindowResize: function (e) {
            if (!ej.isNullOrUndefined(this.model) && this._isPopupShown()) {
                this._refreshPopup();
            }
        },
        _hideResult: function (e) {
            if (this.model && this._isPopupShown()) {
				if (!ej.isNullOrUndefined(e) && !ej.isNullOrUndefined(this.inputSearch) && $(this.inputSearch).is(":focus")){
					if(e.type == "scroll" && ej.isTouchDevice())
						return false;
				}
                var proxy = this;
                if (this._trigger("beforePopupHide", { text: this._visibleInput[0].value, value: this._selectedValue })) return;
                $(this.popupListWrapper).slideUp(this.model.enableAnimation ? 100 : 0, function () {
                    $(document).off("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
                });
                if (this.element != null)
                    this.element.attr( "aria-expanded", false );
				if(!(ej.isDevice()))
                this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
                if (this._visibleInput != null)
                this.wrapper.removeClass("e-popactive");
               this.popUpShow= false;
                    this._trigger("popupHide", { text: this._visibleInput[0].value, value: this._selectedValue });

                setTimeout(function () {
                    proxy._resetSearch();                 
                }, 100);
				this._getLi().find(".e-ddl-anim").removeClass("e-ddl-anim");
            }
        },

        _isPopupShown: function () { 
            if(!ej.isNullOrUndefined(this.popupListWrapper)) return (this.popupListWrapper.css("display") == "block");
        },

        _enterTextBoxValue: function () {
            var args, valueModified = true;
            this.removeID = false;
			this.checkedStatus = false;
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this._chooseSelectionType();
			if (this._activeItem >=0 || this._activeItem != null) {
				if (this.model.showCheckbox) {
					var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
					$(checkboxEle).removeClass('e-check-inact');
					this.checkedStatus = this._isChecked(checkboxEle);                   
				}
				else{
					this.checkedStatus = this.activeItem.hasClass('e-active')
				}            
			}
            args = { text: this._currentText, selectedText: this._currentText, itemId: this.selectedIndexValue, value: this._selectedValue, isChecked: this.checkedStatus, isInteraction: !!this._uiInteract };
            if (!this._initValue && !this._onSearch && this._raiseEvents){ 
                if(this._trigger("select", args)) {
                    this._setWatermark();
                    return;
                }
            }
            if (this._activeItem >=0 || this._activeItem != null) {
                if (!this._isSingleSelect() && !this._checkContains(this._selectedValue)) {                   
                    if (this.model.showCheckbox) {
                        var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
                        if (!this._isChecked(checkboxEle)) {
							this._removeClass(checkboxEle, "e-ddl-anim");	
                            this._setClass(checkboxEle, "e-check-act e-ddl-anim");
                            this._setAttr(checkboxEle,{"aria-checked":true});
                            $(checkboxEle).find(".e-check-input")[0].checked = true;
                        }
                    }
                    else {
                        this.activeItem.addClass('e-active');
                    }
                    if (this.model.multiSelectMode == "visualmode") {
                        var valueElement = this._createBox(this._currentText, this._selectedValue);
                        if(this._ulBox.children() && this._ulBox.children().length > 0 ? this._checkForDuplicates(valueElement) : true){
                            this._ulBox.append(valueElement);
                        }
                        if (this._isPopupShown())
                            this._setListPosition();
                    }

                    this._maintainHiddenValue();
                    this._addText(this._currentText);
                    this._createListHidden(this._hiddenValue);
                    if ($.inArray(this.selectedIndexValue, this._selectedIndices) == -1) {
                        this._selectedIndices.push(this.selectedIndexValue);
                        this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                    }                
                } else if( this._isSingleSelect()){
                    this.ultag.children("li").removeClass('e-hover').removeClass('e-active');
                    this.activeItem.addClass('e-active');                    
                    this._maintainHiddenValue();
                    this._visibleInput.val(this._currentText);
                    this.element.val(this._hiddenValue);
                    this.selectedItemIndex(this.selectedIndexValue);
                    this.selectedIndex(this.selectedIndexValue);
                    this._selectedIndices[0] = this.selectedIndexValue;
                }
                else valueModified = false;
                if(valueModified) {
					this.checkedStatus = true;
                    this._onValueChange();
                    this._cascadeAction();
                    if (this.selectelement) {
                    if ($("#" + this._id).children().length > this.selectedIndexValue)
                        $("#" + this._id).children()[this.selectedIndexValue].selected = true;
                    }
                }
            }
            this.model.uncheckAll = false;
            this._setWatermark();
			this._uiInteract = false;
        },
        _checkForDuplicates: function (valueElement) {
            var isDuplicated = true;
            var childrenElement = this._ulBox.children().toArray();
            childrenElement.forEach(function (child) {
                if(valueElement.attr("data-value") == $(child).attr("data-value")){
                    isDuplicated = false;
                    return false;
                }
            }, this);
            return isDuplicated;
        },
        _onValueChange: function () {
            this.model.itemValue = this._selectedValue;
            this._updateText();
            if ((this.value() != this.element.val()) || (this.value() == null && ($.inArray("", this._valueContainer) != -1))) {
                this._updateSelectedIndexByValue(this.element.val());
                this._updateValue(this.element.val());
				if (!this.model.showCheckbox && this.model.multiSelectMode == "none" && (this.model.value == null || this.model.value == "")){
					this.model.itemValue = "";
				}
               var args = { text: this._visibleInput[0].value, selectedText: this._currentText, itemId: this.selectedIndexValue, selectedValue: this._selectedValue, value: this._selectedValue, isChecked: this.checkedStatus, isInteraction: !!this._uiInteract };

                if (!this._initValue && !this._onSearch && this._raiseEvents) {
					if(typeof this.model._change == "function") this._trigger("_change", { isChecked: this.checkedStatus, text: this._visibleInput.val(), itemId: this.selectedIndexValue, selectedText: this._currentText, selectedValue: this._selectedValue, value: this.value(), data: this.model, isInteraction: !!this._uiInteract  });
                    this._trigger("change", args);
                    if (this.model.showCheckbox)
                        this._trigger('checkChange', { isChecked: this.checkedStatus, text: this._visibleInput.val(), itemId: this.selectedIndexValue, selectedText: this._currentText, selectedValue: this._selectedValue, value: this._selectedValue, data: this.model });
                }
                this._uiInteract = false;
                if(this.model.enableFilterSearch && this.model.enableServerFiltering){
				this._searchresult = [];
                this._searchresult = this.getItemDataByValue(this.value());
                }
                
            }
        },
        _decode: function (val) {
            return $("<span>").html(val).text();
        },
        _chooseSelectionType: function () {
            this.activeItem = this._getActiveItem();
            this.selectedIndexValue = this._activeItem;
            this._mapFields();
            if (this._dataSource() != null && (!this._isPlainType(this._dataSource()) || !this._isPlainType(this.popupListItems))) {
                if(this.model.enableFilterSearch)
				 this._currentText = this._decode(this.ultag.children()[this._activeItem].textContent);
				else
                this._currentText = this._decode(this._getField(this.popupListItems[this._activeItem], this.mapFld._text));
                this._currentText = (this._currentText === "" || this._currentText == null) ? this.activeItem.text() : this._currentText;
                this._selectedValue = this._getField(this.popupListItems[this._activeItem], this.mapFld._value);
                this._selectedValue = (this._selectedValue != null) ? this._selectedValue : this._currentText;
                this._itemID = this._getField(this.popupListItems[this._activeItem], this.mapFld._id);
            } else {
                this._currentText = this.activeItem.text();
                if (this._getAttributeValue(this.activeItem[0]))
                    this._selectedValue = this._getAttributeValue(this.activeItem[0]);
                else {
                    if (this._currentText != null) {
                        if(!ej.isNullOrUndefined(this.activeItem[0]))this.activeItem[0].setAttribute("value", this._currentText);
                        this._selectedValue = this._currentText;
                    }
                    else
                        this._selectedValue = "";
                }
                this._itemID = $(this.activeItem).attr("id");
            }
            if (!ej.isNullOrUndefined(this._itemID) && this._itemID != "") {
                if (!this.model.showCheckbox) {
                    this._selectedItemsID = [];
                    !this.removeID && this._selectedItemsID.push(this._itemID);
                }
                else
                    !this.removeID ? this._selectedItemsID.push(this._itemID) : this._removeSelectedItemsID();
            }
            this.selectedTextValue = this._currentText;
        },
        _maintainHiddenValue: function () {
			var val = this._getAttributeValue(this.activeItem[0]);
            this._hiddenValue = !ej.isNullOrUndefined(val)? val : this._currentText;
        },
        _removeTextBoxValue: function (delvalue) {
            this._uiInteract = true;
            this.removeID = true;
			this.checkedStatus = true;
			if(this._isFilterInput()){
				for (var j = 0; j < this._getLi().length; j++) {
					if ($(this._getLi()[j]).attr("data-value") == delvalue) {
						this._activeItem = j;
					}
				}
			}
            this._chooseSelectionType();
			if (this._activeItem >=0 || this._activeItem != null) {
				if (this.model.showCheckbox) {
					var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
					$(checkboxEle).removeClass('e-ddl-anim').addClass('e-check-inact e-ddl-anim');
					this.checkedStatus = this._isChecked(checkboxEle);                   
				}
				else{
					this.checkedStatus = this.activeItem.hasClass('e-active')
				}            
			}			
            var args = { text: this._currentText, selectedText: this._currentText, itemId: this.selectedIndexValue, value: this._selectedValue, isChecked: this.checkedStatus };
            if (!this._initValue && !this._onSearch && this._raiseEvents){
                if(this._trigger("select", args)){
                    this._setWatermark();
                    return;
                }
            }                
            this._maintainHiddenValue();
			this._hiddenValue = this._isFilterInput() && !ej.isNullOrUndefined(delvalue) ? delvalue : this._hiddenValue;
            this._removeText(this._hiddenValue);
            this._removeListHidden(this._hiddenValue);
			if(this._isFilterInput() && !this.activeItem.attr("data-value") == delvalue)
				this.activeItem.removeClass('e-active');
            if (!this._isSingleSelect()) {
                if (this.model.showCheckbox) {
                    var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
                    if (this._isChecked(checkboxEle)) {
                        this._removeClass(checkboxEle, "e-check-act");
						this._setAttr(checkboxEle,{"aria-checked":false});
                        $(checkboxEle).find(".e-check-input")[0].checked = true;
                    }
                }
                else this.activeItem.removeClass('e-active');

                if ($.inArray(this.selectedIndexValue, this._selectedIndices) > -1) {
                    this._selectedIndices.splice($.inArray(this.selectedIndexValue, this._selectedIndices), 1);
                    this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
                }
                if (this.model.multiSelectMode == "visualmode") {
                    this._deleteBoxCheck(this._hiddenValue);
                    if (this._isPopupShown())
                        this._setListPosition();
                }
            }
			this.checkedStatus = false;            
            this._onValueChange();
            if ((this.model.cascadeTo != null) && !this._isSingleSelect() && !this._initValue ) this._cascadeAction();
            this.model.checkAll = false;
            this._setWatermark();
        },


        _createBox: function (text, value) {
            if (!this._checkContains(value)) {

                if (this._ulBox.css('display') == "none" && this._visibleInput.css('display') != "none") this._swapUlandInput(true);
                var span = ej.buildTag("span.e-icon e-close", "", {}, { "unselectable": "on" });
                var li = ej.buildTag("li.e-options").text(text).attr("data-value",value).append(span);
                this._on(span, "click", function (e) {
                    if (!this.model.enabled) return false;
                    this._deleteBox($(e.target).parent());                   
                });
                return li;
            }
        },
        _deleteBoxCheck: function (val) {
            var items = this._ulBox.children('li');
            for (var i = 0; i < items.length; i++) {
                if ($(items[i]).attr("data-value") == val) {
                    $(items[i]).remove();
                }
            }
        },
        _deleteLastBox: function () {
            var items = this._ulBox.children("li:not(.e-search-box)");
            var item = items.last();
            if (item.hasClass("e-active")) this._deleteBox(item);
            else {
                this._removeActive();
                item.addClass("e-active");
            }
        },
        _deleteBox: function (items) {
            for (var i = 0; i < items.length; i++) {              
                var deltext = $(items[i]).attr("data-value");
                if(this._isFilterInput()){ 
                    var datalist = this.getListData();
                    for (var j = 0; j < datalist.length; j++) {
                        var val = this._getField(datalist[j], this.mapFld._value) ? this._getField(datalist[j], this.mapFld._value): this._getField(datalist[j], this.mapFld._text);
                        if (val == deltext) {
                            this._removeTextBoxValue(deltext);
                            break;
                        }
                    }
				}else{
					var listItems = this._getLi();
					for (var j = 0; j < listItems.length; j++) {
						if ($(listItems[j]).attr("data-value") == deltext) {
							this._activeItem = j;
							this._removeTextBoxValue();
							break;
						}
					}
				}
            }
            if (!this._isFocused && !this._isPopupShown())
                this._setWatermark();
        },
        _isFilterInput: function(){
            if(this.model.enableFilterSearch && this.inputSearch){
                if(!this.inputSearch.val() == ""){
                       return true; 
                }
            }else{
                return false;
            }
        },
        _swapUlandInput: function (inputHide) {
            if (inputHide) {
                this._visibleInput.css('display', 'none');
                this._ulBox.css('display', 'block');
                this.wrapper.css({ 'height': 'auto' });
            }
            else {
                this._visibleInput.css('display', 'block');
                this._ulBox.css('display', 'none');
                this.wrapper.css({ 'height': this.model.height });
            }
        },
        _removeActive: function () {
            this._ulBox.children("li").removeClass("e-active");
        },
        _adjustWidth: function () {
            var tempSpan = ej.buildTag("span", this._visibleInput.val());
            this.container.append(tempSpan);
            this._visibleInput.width(tempSpan.width() + 30);
            tempSpan.remove();
        },
        _destroyBoxModel: function () {
            this._visibleInput.css('display', 'block');
            this.wrapper.height(this.model.height);
            this._ulBox.remove();
			this._ulBox = null;
            this._off(this.container, "click");
        },

        _removeListHover: function () {
            this.ultag.children("li").removeClass("e-hover");
        },

        _addListHover: function () {
            var activeItem = this._getActiveItem();
            activeItem.addClass("e-hover");
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop('hover') });
            activeItem.focus();
        },
        _getLi: function () {
			if(this.ultag)
            return this.ultag.children("li:not('.e-category'):not('.e-nosuggestion')");
        },
        _calcScrollTop: function (val) {
            var ulH = this.ultag.outerHeight(), li = this.ultag.find("li"), liH = 0, index, top, i;
            if (this._selectedIndices && this._selectedIndices.length > 0 && val == "active") {
                var getLi = this._getLi();
                index = this._selectedIndices.length == getLi.length ? 0
                : this._selectedIndices[this._selectedIndices.length - 1];
                if (this.model.fields.groupBy != null || this.ultag.find("li.e-category").length > 0) {
                    index = $.inArray(getLi.eq(index)[0], li);
                }
            }
            else index = this.ultag.find("li.e-" + val).index();

            for (i = 0; i < index; i++) { liH += li.eq(i).outerHeight(true); }
            top = liH - ((this.popupList.outerHeight() - li.eq(index).outerHeight(true)) / 2);
            return top < 0 ? 0 : top;
        },
        _getActiveItem: function () {
            return this._getLi().eq(this._activeItem);
        },
        _setDimentions: function () {
            if (this.model.height)
                this.wrapper.height(this.model.height);
            if (this.model.width)
                this.wrapper.width(this.model.width);
        },


        _roundedCorner: function (val) {
            if (val) {
                this.container.addClass("e-corner");
                if(!ej.isNullOrUndefined(this.popupListWrapper)) this.popupListWrapper.addClass("e-corner");
                if (this.inputSearch) this.inputSearch.parent('.e-in-wrap').addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                if(!ej.isNullOrUndefined(this.popupListWrapper)) this.popupListWrapper.removeClass("e-corner");
                if (this.inputSearch) this.inputSearch.parent('.e-in-wrap').removeClass("e-corner");
            }

        },

        _enabled: function (boolean) {
            if (boolean) this.enable();
            else this.disable();
        },

        _RightToLeft: function () {
            if (this.model.enableRTL) {
                this.wrapper.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
            }

        },
        _dropbtnRTL: function () {
            if (this.model.enableRTL) {
                this.popupListWrapper.addClass("e-rtl").find(".e-resize-handle").addClass("e-rtl-resize");
                this.popupList.addClass("e-rtl");
            }
            else {
                this.popupListWrapper.removeClass("e-rtl").find(".e-resize-handle").removeClass("e-rtl-resize");
                this.popupList.removeClass("e-rtl");
            }
        },
        _OnDropdownClick: function (e) {
            this._preventDefaultAction(e);
            if (($(e.target).is("li") && $(e.target).parent().hasClass("e-boxes")) || ($(e.target).parents("ul").hasClass("e-boxes") && $(e.target).hasClass("e-icon e-close")))
                return false;
            if (this.model.readOnly || this._readOnly) return false;
            var popuphideshow = !ej.isNullOrUndefined(this.ultag) ? this.ultag.find('li').length > 0 : (this.model.loadOnDemand && !ej.isNullOrUndefined(this.model.dataSource) && this.model.dataSource.length > 0) ? true: false;
            if (popuphideshow && ((e.which && e.which == 1 ) ||(e.button && e.button == 0) )) {
                this._OnPopupHideShow();
            }
        },
        _OnPopupHideShow: function () {
            if (this._isPopupShown()) {
                this._hideResult();
            }
            else {
				this._showResult();
				if (this.model.enableFilterSearch){
					if(this.getSelectedItem().length == 0)
						this.ultag.find("li:first").addClass("e-hover");
					else{
						var length = this.getSelectedItem().length;
						$(this.getSelectedItem()[length -1]).addClass("e-hover");
					}
                    $(this.inputSearch).focus();
				}
				else
					this.wrapper.focus();
            }
        },

        _showFullList: function () {
            var source = this._dataSource();
            if(ej.isNullOrUndefined(this.ultag)) this.ultag = ej.buildTag("ul.e-ul", "", {}, { "role": "listbox" });
            if (ej.DataManager && source instanceof ej.DataManager) {
                if (!source.dataSource.offline && !(source.dataSource.json && source.dataSource.json.length > 0)) {
                    var proxy = this;
                    proxy._initDataSource(source);
                }
                else this._getFilteredList(source.dataSource.json);
            }
            else this._getFilteredList(source);
        },
        _getFilteredList: function (list) {
            if (!list || !list.length || list.length < 1) {
                this._targetElementBinding();
                this._renderRemaining();
            }
            else {
                var listItem = ej.DataManager(list).executeLocal(this._isPlainType(list) ? ej.Query() : this._getQuery(true));
                this._totalCount = listItem.count;
                this._listItem(listItem.result ? listItem.result : listItem);
                this._renderPopupList();
                this._rawList =  this.popupListItems.slice();
            }
        },

        _cascadeAction: function () {
            if (this.model.cascadeTo) {
                var citem = this.model.cascadeTo.split(","), i;
                for (i = 0; i < citem.length; i++) {
                    if ($('#' + citem[i]).hasClass("e-dropdownlist")) {
                        this._doCascadeAction(citem[i], this, this.checkedStatus);
                    }
                    else {
                        $('#' + citem[i]).on("ejDropDownListcreate", { Obj: this, status: this.checkedStatus }, function (e) {
                            if (!ej.isNullOrUndefined(e.data.Obj.getValue()) && e.data.Obj.getValue() != "") {
                                e.data.Obj._doCascadeAction(this.id, e.data.Obj, e.data.status);
                            }
                        });
                    }
                }
            }
        },
        _doCascadeAction: function (id, parentObj, status) {
            parentObj._currentValue = parentObj._getField(parentObj.popupListItems[parentObj._activeItem], parentObj.mapFld._value);
            parentObj.selectDropObj = $('#' + id).ejDropDownList('instance');
            var args = { cascadeModel: parentObj.selectDropObj.model, cascadeValue: parentObj._currentValue, setCascadeModel:{}, requiresDefaultFilter: true };
            this._trigger("cascade", args);
            parentObj.selectDropObj._setCascadeModel = args.setCascadeModel;
            if (ej.isNullOrUndefined(parentObj[id])) {
                parentObj[id] = parentObj.selectDropObj._dataSource();
            }
            (ej.DataManager && parentObj[id] instanceof ej.DataManager) ?
                parentObj._cascadeOdataInit(parentObj[id], args.requiresDefaultFilter, status, args.cascadeQuery) :
            parentObj._cascadeJsonInit(parentObj.selectDropObj, parentObj[id], parentObj.mapFld._value, args.requiresDefaultFilter, status, args.cascadeQuery);
        },
        _cascadeOdataInit: function (_dSource, requiresFilter, status, cascadeQuery) {
            var proxy = this, queryPromise, tempQuery;
            proxy._dQuery = this.selectDropObj._getQuery().clone();
            tempQuery = proxy._dQuery.clone();
            requiresFilter ? tempQuery.where(proxy.mapFld._value, "equal", proxy._currentValue) : tempQuery = cascadeQuery;
            proxy.selectDropObj._addLoadingClass();
            if (!proxy._trigger("actionBegin", { requestFrom: "cascade" })) {
                queryPromise = _dSource.executeQuery(tempQuery);
                queryPromise.fail(function (e) {
                    proxy._changedSource = null;
                    proxy.selectDropObj.setModel({ dataSource: proxy._changedSource, enabled: false });
                    proxy._trigger("actionFailure", { e: e, requestFrom: "cascade" });
                }).done(function (e) {
                    proxy._trigger("actionSuccess", { e: e, requestFrom: "cascade" });
                    proxy._cascadeDataBind(proxy.selectDropObj, e.result, status);
                    proxy.selectDropObj._removeLoadingClass();
                }).always(function (e) {
                    proxy._trigger("actionComplete", { e: e, requestFrom: "cascade" });
                });
            }
        },

        _cascadeJsonInit: function (cascadeDropDownObj, _dSource, mapFld, requiresFilter, status, cascadeQuery) {           
            var tempQuery = requiresFilter ? ej.Query().where(mapFld, "==", this._currentValue) : cascadeQuery
            var changedSource = ej.DataManager(_dSource).executeLocal(tempQuery);
            this._cascadeDataBind(cascadeDropDownObj, changedSource, status);
        },

        _cascadeDataBind: function (cascadeDropDownObj, changedSource, status) {
			var cascadeVal  = cascadeDropDownObj.value();
            if ((this.model.showCheckbox && status) || (this.model.multiSelectMode != "none" && this.activeItem.hasClass("e-active"))) {
                this._changedSource = (!ej.isNullOrUndefined(this._changedSource)) ? this._changedSource.concat(changedSource) : changedSource;
            }
            else if (!this.model.showCheckbox && this.model.multiSelectMode == "none") this._changedSource = changedSource;
            else {
                for (var i = 0; i < changedSource.length; i++) {
                    if (this._isPlainType(changedSource) && this._isPlainType(this._changedSource)) this._changedSource.splice(this._changedSource.indexOf(changedSource[i]), 1);
                    else {
                        for (var j = 0; j < this._changedSource.length; j++) {
                            if (JSON.stringify(this._changedSource[j]) == JSON.stringify(changedSource[i]))
                                this._changedSource.splice(j, 1);
                        }

                    }
                }
                cascadeDropDownObj.setModel({ dataSource: null });
            }
			var cascadeValFn = cascadeDropDownObj.model.value;
            var cascadeModel = JSON.parse(JSON.stringify(cascadeDropDownObj.model)),enable;
            cascadeDropDownObj.setModel({ dataSource: this._changedSource, enabled: this._changedSource.length > 0 });
			if( !this._isSingleSelect() ) cascadeDropDownObj.selectItemByValue(cascadeVal);
            if (cascadeDropDownObj.model.showCheckbox || cascadeDropDownObj.model.multiSelectMode != "none") {
                $("input:hidden[id^='#'][name=" + cascadeDropDownObj._id + "]").remove();
            }
            
            if (!cascadeDropDownObj._setSelectedItem) {
                var selectProp = ["value", "text", "selectedIndex", "selectedIndices"];
                for (var m = 0; m < selectProp.length ; m++)
                    cascadeDropDownObj.model[selectProp[m]] = cascadeModel[selectProp[m]];
				cascadeDropDownObj.model["value"] = cascadeValFn;
                cascadeDropDownObj._finalize();                
            }            
            else {                                               
               cascadeDropDownObj.setModel(cascadeDropDownObj._setCascadeModel);
            }
            cascadeDropDownObj._setSelectedItem = true;
        },        

        _OnMouseEnter: function (e) {
            if (!this.model.enabled || this.model.readOnly || this._readOnly) return false;
            var targetEle;
            this.ultag.children("li").removeClass("e-hover");
            if ($(e.target).is("li:not('.e-category')")) { $(e.target).addClass("e-hover"); }
            if ($(e.target).hasClass("e-disable"))
                $(e.target).removeClass('e-hover');
            else if (e.target.tagName != "li") {
                targetEle = $(e.target).parents("li:not('.e-category')");
                $(targetEle).addClass("e-hover");
            }
            var activeItem;
            this.ultag.children("li:not('.e-category')").each(function (index) {
                if ($(this).hasClass("e-hover")) {
                    activeItem = index;
                    return false;
                }
            });
            this._activeItem = activeItem;
        },
        _OnMouseLeave: function (e) {
            if (!this.model.enabled || this.model.readOnly || this._readOnly) return false;
            this.ultag.children("li").removeClass("e-hover");
        },
        _OnMouseClick: function (e) {
            this._uiInteract = true;
            if (!this.model.enabled || this.model.readOnly || this._readOnly) return false;
            if (this.model.enableFilterSearch && $(e.target).is("li") && $(e.target).hasClass('e-nosuggestion')) return false;
            else if (($(e.target).is("li") && !$(e.target).hasClass('e-disable')) || (!$(e.target).is("li") && !$(e.target).closest("li").hasClass('e-disable'))) {
                if (this._isSingleSelect()) {
                    this._enterTextBoxValue();
                    this._hideResult();
                } else {
                    if (this.model.showCheckbox) {
                        var liEle = e.target.nodeName === "LI" ? e.target : $(e.target).parents("li.e-hover"),
                        checkboxEle = $(liEle).find('.e-checkwrap')[0];
                        this._onCheckChange({ target: checkboxEle });
                    }
                    else {
                        var ele = $(e.target).is("li") ? e.target : $(e.target).closest("li")[0];
                        this._activeItem = $.inArray(ele, this._getLi());
                        if ($(ele).hasClass("e-active")) this._removeTextBoxValue();
                        else this._enterTextBoxValue();
                    }
                   
                }
            }
        },        

        _OnDocumentClick: function (e) {
            if (this.model && (!this.model.enabled || this.model.readOnly || this._readOnly)) return false;
            if (!$(e.target).is(this.popupList) && !$(e.target).parents(".e-ddl-popup").is(this.popupListWrapper) &&
                !$(e.target).is(this._visibleInput) && !$(e.target).parents(".e-ddl").is(this.wrapper)) {
                this._hideResult();
            }
            else if ($(e.target).is(this.inputSearch)) {
                this.inputSearch.focus();
            }
            else if ($(e.target).is(this.popupList) || $(e.target).parents(".e-ddl-popup").is(this.popupListWrapper))
                this._preventDefaultAction(e);
        },

        _OnKeyPress: function (e) {
            if (this.model.enableIncrementalSearch && e.keyCode != 13) {
                this._OnTextEnter((ej.browserInfo().name == "mozilla") ? e.charCode : e.keyCode);
            }
            if (e.keyCode == 32) this._preventDefaultAction(e);
        },
        _OnTextEnter: function (from) {
            var proxy = this;
            this._incqueryString += String.fromCharCode(from);
            if (this._incqueryString.length > 0) {
                setTimeout(function () { proxy._incqueryString = ""; }, this.model.incrementalSearchDelay);
            }
            var list = this._getLi(), i, matchedElement = null,
            caseSence = this.model.caseSensitiveSearch,            
            str, queryStr = this._incqueryString,
            querylength = this._incqueryString.length, searchflag = false;

            if (!caseSence) queryStr = queryStr.toLowerCase();
            if (this._prevQueryString == queryStr) {
                for (var i= 0; i < this._matchedListItems.length; i++) {
                    if (($(this._matchedListItems[i]).hasClass("e-active")) || ((this.model.showCheckbox) && $(this._matchedListItems[i]).hasClass("e-hover"))) {
                        if (i == this._matchedListItems.length - 1)
                            matchedElement = this._matchedListItems[0];
                        else
                            matchedElement = this._matchedListItems[i + 1];
                        break;
                    }
                }
            }
			else if(!ej.isNullOrUndefined(list)) {
				this._matchedListItems = [];
				var selectedIndexVal = this.selectedIndex();
                var index;

				for (  var i = 0 ; i < list.length; i++)
				{
					if (i != selectedIndexVal){
					if (i == list.length || i == -1) { i = -1; }
					if(selectedIndexVal == -1) {selectedIndexVal = list.length; i = 0;}
					i == -1 ? index = 0 : index = i;
					var item = list[index];
					var text = $(list[index]).text();
					text = caseSence ? text : text.toLowerCase();
					if (text.substr(0, querylength) == queryStr) {
						this._matchedListItems.push(list[index]);
					}
					}
			   }
				this._prevQueryString = queryStr;
				matchedElement = this._matchedListItems[0];
				
			}
			if(!ej.isNullOrUndefined(matchedElement)) {
				this._activeItem = $.inArray( matchedElement, list );
                 if (this._isSingleSelect() && !ej.isNullOrUndefined(this.scrollerObj)){
					 this._enterTextBoxValue();
					 this.scrollerObj.setModel({ scrollTop: this._calcScrollTop('active') });
				}
                 else if (this._isPopupShown()) {
					 this._removeListHover();                      
					 this._addListHover();
                 } 
			}   
        },

        _selectItem: function (current) {
            if (!this._isSingle) this._clearTextboxValue();
            this._activeItem = current;
            this._addListHover();
            this._enterTextBoxValue();
        },
        _focusItem: function (current) {
            this._removeListHover();
            this._activeItem = current;
            this._addListHover();
        },
        _selectFocusedItem: function (current) {
            this._focusItem(current);
            this._enterTextBoxValue();
        },
        
        _selectShiftDown: function (start, stop, isCtrl) {
            if (!isCtrl) this._clearTextboxValue();
            for (var n = start; n <= stop; n++) {
                if ($.inArray(n, this._disabledItems) < 0 && $.inArray(n, this.model.selectedIndices) < 0) {
                    this._selectFocusedItem(n);
                }
            }
        },
        _selectShiftUp: function (start, stop, isCtrl) {
            if (!isCtrl) this._clearTextboxValue();
            for (var n = stop; n >= start ; n--) {
                if ($.inArray(n, this._disabledItems) < 0 && $.inArray(n, this.model.selectedIndices) < 0) {
                    this._selectFocusedItem(n);
                }
            }
        },
        _selectShiftHome: function (current, stop, isCtrl) {
            if (!isCtrl) this._clearTextboxValue();
            if (current >= 0 && current <= this._listSize - 1) {
                if (current == 0) this._clearTextboxValue();
                else {
                    for (var n = current; n >= stop ; n--) {
                        if ($.inArray(n, this._disabledItems) < 0 && $.inArray(n, this.model.selectedIndices) < 0) {
                            this._activeItem = n;
                            this._enterTextBoxValue();
                        }
                    }
                }
                this._activeItem = current;
                if (current == 0) this._enterTextBoxValue();
                this.scrollerObj.setModel({ "scrollTop": 0 });
            }
        },
        _selectShiftEnd: function (current, stop, isCtrl) {
            if (!isCtrl) this._clearTextboxValue();
            if (current <= this._listSize - 1) {
                if (current == stop) this._clearTextboxValue();
                else 
                for (var n = current; n <= stop; n++) {
                    if ($.inArray(n, this._disabledItems) < 0 && $.inArray(n, this.model.selectedIndices) < 0) {
                        this._activeItem = n;
                        this._enterTextBoxValue();
                    }
                }
                this._activeItem = current;
                if (current == stop) this._enterTextBoxValue();
                this.scrollerObj.setModel({ "scrollTop": this.ultag.outerHeight() });
            }
        },


        _getLastFocusedLi: function () {
            return this._selectedIndices && this._selectedIndices.length > 0 ? this._selectedIndices[this._selectedIndices.length - 1] : null;
        },

        _getLastShiftFocusedLi: function (index, isDown) {
            var step = isDown ? index - 1 : index + 1;
            if ($.inArray(step, this._selectedIndices) < 0) {
                return index;
            }
            else {
                return this._getLastShiftFocusedLi(step, isDown);
            }
        },

        _shiftUp: function (current, step, isCtrl) {
            if (current == null || current < 0) {
                this._checkDisableStep(0, step, false, false, true);
            }
            else if (current > 0 && current <= this._listSize - 1) {

                var select = this._disableItemSelectUp(current - step)
                if (select != null) {
                    if (this._getLastFocusedLi() != null) {
                        if (this._selectedIndices.length > 1 && current - 1 == this._selectedIndices[this._selectedIndices.length - 2])
                            for (var s = 1; s <= step; s++) {
                                if (current - s == this._selectedIndices[this._selectedIndices.length - 2]) {
                                    this._activeItem = current + 1 -s;
                                    this._removeTextBoxValue();
                                    this._focusItem(current - s);
                                }
                                else break;
                            }
                        else {
                            var next = this._getLastShiftFocusedLi(this._getLastFocusedLi(), false);
                            this._selectShiftUp(select, next, isCtrl);
                        }
                    }
                    else {
                        this._moveUp(current, step, false);
                    }

                }

            }
        },

        _shiftDown: function (current, step, isCtrl) {
            if (current == null || current < 0) {
                this._checkDisableStep(-1, step, true, false, true);
            }
            else if (current < this._listSize - 1) {
                var select = this._disableItemSelectDown(current + step)
                if (select != null) {
                    if (this._getLastFocusedLi() != null) {
                        if (this._selectedIndices.length > 1 && current + 1 == this._selectedIndices[this._selectedIndices.length - 2]) {
                           for (var s = 1; s <= step; s++) {
                                if (current + s == this._selectedIndices[this._selectedIndices.length - 2]) {
                                    this._activeItem = current - 1 +s;
                                    this._removeTextBoxValue();
                                    this._focusItem(current + s);
                                }
                                else break;
                            }
                        }
                        else {
                            var start = this._getLastShiftFocusedLi(this._getLastFocusedLi(), true);
                            this._selectShiftDown(start, select, isCtrl);
                        }
                    }
                    else {
                        this._moveDown(current, step, false);
                    }
                }

            }
        },
        _moveUp: function (current, step, isMulti) {
            if (current == null || current <= 0) {
                this._checkDisableStep(0, step, false, isMulti);
            }
            else if (current > this._listSize - 1) {
                this._checkDisableStep(this._listSize - 1, step, false, isMulti);
            }
            else if (current > 0 && current <= this._listSize - 1) {
                this._checkDisableStep(current, step, false, isMulti);
            }
        },
        _moveDown: function (current, step, isMulti) {
            if (current == null || current < 0) {
                this._checkDisableStep(-1, step, true, isMulti);
            }
            else if (current == 0) {
                this._checkDisableStep(0, step, true, isMulti);
            }
            else if (current >= this._listSize - 1) {
                this._checkDisableStep(this._listSize - 1, step, true, isMulti);
            }
            else if (current < this._listSize - 1) {
                this._checkDisableStep(current, step, true, isMulti);
            }
        },
        _checkDisableStep: function (current, step, isdown, isMulti, shift) {
            var command = isdown ? "_disableItemSelectDown" : "_disableItemSelectUp";
            var index = isdown ? current + step : current - step;
            var select = this[command](index);
            if (select == null) {
                for (var i = step; i >= 0; i--) {
                    index = isdown ? current + i : current - i;
                    select = this[command](index);
                    if (select != null) break;
                }
            }
            if (select != null) {
                isMulti ? this._focusItem(select) : this._selectItem(select);
                if (shift && isMulti) this._enterTextBoxValue();
            }

        },
        _disableItemSelectDown: function (current) {
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if ($.inArray(current, this._disabledItems) < 0) {
                    return current;
                }
                else {
                    return this._disableItemSelectDown(current + 1);
                }
            }
            else return this._listSize - 1;
        },

        _disableItemSelectUp: function (current) {
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if ($.inArray(current, this._disabledItems) < 0) {
                    return current;
                }
                else {
                    if (current > 0) {
                        return this._disableItemSelectUp(current - 1);
                    }
                }
            }
        },

        _preventDefaultAction: function (e, stopBubble) {
            e.preventDefault ? e.preventDefault() : (e.returnValue = false);
            if (stopBubble) {
                e.stopPropagation ? e.stopPropagation() : (e.cancelBubble = true);
            }
        },

        _OnKeyDown: function (e) {
            this._uiInteract = true;
            if (this.model.enabled && !ej.isNullOrUndefined(this.popupListWrapper)) {
                this._itemId = null;
                var _popupListItems = this._getLi(), liH, popupH, activeitem, flag;
                this._listSize = _popupListItems.length;                
                popupH = this.popupList.height();
                liH = this.ultag.children("li").outerHeight();
                activeitem = Math.round(popupH / liH) != 0 ? Math.round(popupH / liH) : 5;
                this._isSingle = this._isSingleSelect();
                if (this._isSingle) {
                    switch (e.keyCode) {
                        case 38: /* up arrow*/
                            if (e.altKey) {
                                if (this.ultag.find('li').length > 0)
                                    this._hideResult();
                                break;
                            }
                        case 33: /* page up */
                            var step = e.keyCode == 33 ? activeitem : 1;
                            this._moveUp(this._activeItem, step);
                            this._preventDefaultAction(e,true);
                            break;
					    case 8:
                            this._preventDefaultAction(e);
                            break;
                        case 40: /* down arrow*/
                            if (e.altKey) {
                                if (this.ultag.find('li').length > 0)
                                    this._showResult();
                                break;
                            }
                        case 34: /* page down */
                            var step = e.keyCode == 34 ? activeitem : 1;
                            this._moveDown(this._activeItem, step);
                            this._preventDefaultAction(e,true);
                            break;
                        case 37 /* left arrow*/:
                            if (this.model.enableRTL) this._moveDown(this._activeItem, 1);
                            else this._moveUp(this._activeItem, 1);
                            this._preventDefaultAction(e);
                            break;
                        case 39 /* right arrow */:
                            if (this.model.enableRTL) this._moveUp(this._activeItem, 1);
                            else this._moveDown(this._activeItem, 1);
                            this._preventDefaultAction(e);
                            break;
                        case 9 /* Tab */:
                        case 27 /*ESC*/:
                            if (this._isPopupShown()) this._hideResult();
                            break;
                        case 35 /*End*/:
                            this._moveDown(this._listSize - 1, 0);
                            this._preventDefaultAction(e);
                            break;
                        case 36 /*Home*/:
                            var step = this._activeItem != null ? this._activeItem : this._listSize - 1;
                            this._moveUp(step, step);
                            this._preventDefaultAction(e);
                            break;
                    }
                }
                else {
                    switch (e.keyCode) {
                        
                        case 38: /* up arrow*/
                            if (e.altKey) {
                                if (this.ultag.find('li').length > 0)
                                    this._hideResult();
                            }
                            else if (e.shiftKey) {
                                this._shiftUp(this._activeItem, 1, e.ctrlKey);
                            }
                            else this._moveUp(this._activeItem, 1, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;
                        case 33: /* page up */
                            if (e.shiftKey) {
                                this._shiftUp(this._activeItem, activeitem, e.ctrlKey);
                            }
                            else this._moveUp(this._activeItem, activeitem, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;
						case 8:
                            this._preventDefaultAction(e);
                            break;
                        case 40: /* down arrow*/
                            if (e.altKey) {
                                if (this.ultag.find('li').length > 0)
                                    this._showResult();
                            }
                            else if (e.shiftKey) {
                                this._shiftDown(this._activeItem, 1, e.ctrlKey);
                            }
                            else this._moveDown(this._activeItem, 1, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;

                        case 34: /* page down */

                            if (e.shiftKey) {
                                this._shiftDown(this._activeItem, activeitem, e.ctrlKey);
                            }
                            else this._moveDown(this._activeItem, activeitem, e.ctrlKey);
                            this._preventDefaultAction(e);
                            break;
                        case 37 /* left arrow*/:
                            if (this.model.enableRTL) this._moveDown(this._activeItem, 1, false);
                            else this._moveUp(this._activeItem, 1, false);
                            this._preventDefaultAction(e);
                            break;
                        case 39 /* right arrow */:
                            if (this.model.enableRTL) this._moveUp(this._activeItem, 1, false);
                            else this._moveDown(this._activeItem, 1, false);
                            this._preventDefaultAction(e);
                            break;
                        case 9 /* Tab */:
                        case 27 /*ESC*/:
                            if (this._isPopupShown()) this._hideResult();
                            break;
                        case 35 /*End*/:
                            if (e.shiftKey) {
                                this._selectShiftEnd(this._activeItem, this._listSize - 1, e.ctrlKey);
                            }
                            else this._moveDown(this._activeItem, this._listSize, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;
                        case 36 /*Home*/:
                            var step = this._activeItem != null ? this._activeItem : this._listSize - 1;
                            if (e.shiftKey) {
                                this._selectShiftHome(this._activeItem, 0, e.ctrlKey);
                            }
                            else this._moveUp(this._activeItem, step, e.ctrlKey);

                            this._preventDefaultAction(e);
                            break;
                    }
                }
            }
        },

        _OnKeyUp: function (e) {
            if (this.model.enabled && !ej.isNullOrUndefined(this.popupListWrapper)) {
                this._preventDefaultAction(e);
                var target = e.target;
                if (this._activeItem == null) {
                    this._activeItem = this._getLi().index(this.popupList.find("ol,ul").children("li.e-hover"));
                }
                if (this._trim(this._visibleInput.val()) == "" && e.keyCode == 38 && e.keyCode == 40) {
                    this._hideResult();
                    return false;
                }

                switch (e.keyCode) {
                    case 38: break;
                    case 40: break;
                    case 37: break;
                    case 39: break;

                    case 20: break;
                    case 16: break;
                    case 17: break;
                    case 18: break;
                    case 35: break;
                    case 36: break;
                    case 144: break;
                    case 27: break;
                    case 9: break;

                    case 13 /*Enter*/:
                        if (!this._isSingle && this._isPopupShown() && (e.ctrlKey || e.shiftKey) && this._activeItem >= 0) 
                            this._selectAndUnselect();
                        else if (this._isPopupShown() && !e.ctrlKey && !e.shiftKey){
							if(!ej.isNullOrUndefined(this.inputSearch)){
								if(this.getSelectedItem().length == 0 || !this.listitems[0].classList.contains("e-active") && this._activeItem >= 0) {
									this.selectItemByIndex(this._activeItem);
									$(this.listitems[this._activeItem]).removeClass("e-hover");
								}
								else {		
									var focusedItems = this._getLastFocusedLi();
                                    if(this.model.multiSelectMode  != "none" || this.model.showCheckbox) {
										this.unselectItemByIndex(focusedItems);
										$(this.listitems[focusedItems]).removeClass("e-hover");
									}
								}
							}
							this._hideResult();
						}
						else if (this._isPopupShown()) this._hideResult();
                        this._preventDefaultAction(e);
                        break;

                    case 32 /*spacebar*/:
                        if (this._isPopupShown() && this._isSingle) this._hideResult();
                        if (!this._isSingle && this._isPopupShown() && this._activeItem >= 0) {
                            this._selectAndUnselect();
                        }
                        this._preventDefaultAction(e);
                        break;
                    case 8 /*backspace*/:
                        if(this.model.multiSelectMode =="visualmode") this._deleteLastBox();                        
                        this._preventDefaultAction(e);
                        break;
                    case 46 /*Del*/:
                        if (this.model.multiSelectMode == "visualmode" || this.model.showCheckbox) {
                            this._deleteBox(this._ulBox.children("li.e-active"));
                            break;
                        }
                }
            }
        },

        _isSingleSelect: function () {
            return !this.model.showCheckbox && this.model.multiSelectMode == "none";
        },

        _selectAndUnselect: function () {
            if (this.model.showCheckbox) {
                this._isChecked(this._getActiveItem().find(".e-checkwrap")[0]) ?
                        this._removeTextBoxValue() : this._enterTextBoxValue();
            }
            else if (this.model.MultiSelectMode != "none") {
                this._getActiveItem().hasClass("e-active") ? this._removeTextBoxValue() : this._enterTextBoxValue();
            }
        },

        _targetFocus: function () {
            if (this.model.enabled && !this._isFocused) {
                if (!this._isWatermark)
                    this._hiddenSpan.css("display", "none");
                this.wrapper.addClass("e-focus e-popactive");
                this._isFocused = true;
                this._trigger("focusIn");
            }
        },

        _targetBlur: function () {
            if (this.model.enabled) {
                this._isFocused = false;
                this.wrapper.removeClass("e-focus e-popactive");
                this._setWatermark();
                this._trigger("focusOut");
            }
        },

		_getLocalizedLabels: function (property) {
            return this._localizedLabels[property] === undefined ? ej.DropDownList.Locale["en-US"][property] : this._localizedLabels[property]
        },
        _wireEvents: function () {
            this._on(this.wrapper, "focus", this._targetFocus);
            this._on(this.wrapper, "blur", this._targetBlur);
            this._on(this.wrapper, "keydown", this._OnKeyDown);
            !ej.isNullOrUndefined(this.popupList) && this._on(this.popupList, "keydown", this._OnKeyDown);
            !ej.isNullOrUndefined(this.popupList) && this._on(this.popupList, "keyup", this._OnKeyUp);
            this._on(this.wrapper, "keyup", this._OnKeyUp);
            !ej.isNullOrUndefined(this.popupList) && this._on(this.popupList, "keypress", this._OnKeyPress);
            this._on(this.wrapper, "keypress", this._OnKeyPress);
        },

        _unwireEvents: function () {
            this._off(this.wrapper, "focus", this._targetFocus);
            this._off(this.wrapper, "blur", this._targetBlur);
            this._off(this.wrapper, "keydown", this._OnKeyDown);
            !ej.isNullOrUndefined(this.popupList) && this._off(this.popupList, "keydown", this._OnKeyDown);
            !ej.isNullOrUndefined(this.popupList) && this._off(this.popupList, "keyup", this._OnKeyUp);
            this._off(this.wrapper, "keyup", this._OnKeyUp);
            !ej.isNullOrUndefined(this.popupList) && this._off(this.popupList, "keypress", this._OnKeyPress);
            this._off(this.wrapper, "keypress", this._OnKeyPress);
			$(window).off("resize", $.proxy(this._OnWindowResize, this));
        },

        _multiItemSelection: function (listItems, isAddItem) {
            if (!this._ulBox && this.model.multiSelectMode == "visualmode") this._renderBoxModel();
            for (var i = 0; i < listItems.length; i++) {
                var index = isAddItem ? this._rawList.length - (listItems.length - i) : i;
                if (this._hasClass(listItems[i], "chkselect")) {
                    this._activeItem = index;
                    this._enterTextBoxValue();
                    this._removeClass(listItems[i], "chkselect");
                }
            }
            this._setWatermark();
        },
        _appendCheckbox: function (listItems, isAddItem) {
            if (!this._ulBox && this.model.multiSelectMode == "visualmode") this._renderBoxModel();
            for (var i = 0; i < listItems.length; i++) {
                var index = isAddItem ? this._rawList.length - (listItems.length - i) : i,
                $checkbox = document.createElement("input"),
                $spanCheck = document.createElement("span");
                this._setAttr($checkbox, { type: "checkbox", name: "list" + index, "data-role": "none", id: this._id + "_" + "check" + index })
                    ._setClass($checkbox, "e-check-input")
                    ._setAttr($spanCheck, { name: "list" + index + "_wrap", "data-role": "none", id: this._id + "_" + "check" + index + "wrap", unselectable: "on", "aria-checked": false})
                    ._setClass($spanCheck, "e-checkwrap e-icon ");
                $spanCheck.appendChild($checkbox);
                listItems[i].insertBefore($spanCheck, listItems[i].childNodes[0]);
                if (this._hasClass(listItems[i], "chkselect")) {
                    this._activeItem = index;
                    this._enterTextBoxValue();
                    this._removeClass(listItems[i], "chkselect");
                }
            }
            this._setWatermark();
        },

        _onCheckChange: function (e) {
            this.checkChange = true;
            var curEle = e.target.nodeName === "INPUT" ? e.target.parentElement : e.target;
            this._activeItem = $.inArray($(curEle).parents("li")[0], this._getLi());
            if (!this._hasClass(curEle, "e-check-act")) {
                this._enterTextBoxValue();
            }
            else {
                this._removeTextBoxValue();
            }
            this.checkChange = false;
        },
        _isChecked: function (checkEle) {
            return (this._hasClass(checkEle, "e-check-act") && $(checkEle).children(".e-check-input")[0].checked == true);
        },
        _removeCheck: function () {
            this._getLi().find(".e-checkwrap").remove();
        },
        _resetCheck: function () {
            var getLi = this._getLi(), checkEle;
            getLi.find(".e-check-act").removeClass("e-check-act").attr("aria-checked",false);
            checkEle = getLi.find(".e-check-input:checked");
            for (var e = 0; e < checkEle.length; e++) {
                checkEle[e].checked = false;
            }
        }

    });
	ej.DropDownList.Locale = ej.DropDownList.Locale || {};
    ej.DropDownList.Locale["default"] = ej.DropDownList.Locale["en-US"] = {        
        emptyResultText: "No suggestions",  
		watermarkText:""
    };
    ej.MultiSelectMode = {
        /** Supports to selection mode with none only */
        None: "none",
        /** Supports to selection mode with delimitter only */
        Delimiter: "delimiter",
        /** Supports to selection mode with visualmode only */
        VisualMode: "visualmode"
    };
    ej.VirtualScrollMode = {      
        /** Make virtual scrollbar in normal mode */
        Normal: "normal",
        /** Make virtual scrollbar in continuous mode*/
        Continuous: "continuous"
    };
    
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget(
    {
        "ejNumericTextbox": ["ej.NumericTextbox", "e-numerictextbox"],
        "ejPercentageTextbox": ["ej.PercentageTextbox", "e-percentagetextbox"],
        "ejCurrencyTextbox": ["ej.CurrencyTextbox", "e-currencytextbox"]
    },
    {
        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["value"],
        _setFirst: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true,
            requireParser:true
        },

        defaults: {

            width: "",

            height: "",

            value: null,

            name: null,

            htmlAttributes: {},

            minValue: -(Number.MAX_VALUE),

            maxValue: Number.MAX_VALUE,

            incrementStep: 1,

            decimalPlaces: 0,

            validateOnType: false,

            cssClass: "",

            enablePersistence: false,

            showSpinButton: true,

            locale: "en-US",

            enableStrictMode: false,

            showRoundedCorner: false,

            readOnly: false,

            enabled: true,

            enableRTL: false,

            watermarkText: "Enter value",

            validationRules: null,

            validationMessage: null,

            groupSeparator: null,

            groupSize: null,

            positivePattern: null,

            currencySymbol:null,

            negativePattern: null,

            change: null,

            focusIn: null,

            focusOut: null,

            create: null,

            destroy: null
        },

        dataTypes: {
            minValue: "number",
            maxValue: "number",
            incrementStep: "number",
            decimalPlaces: "number",
            showSpinButton: "boolean",
            enableStrictMode: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            locale: "string",
            watermarkText: "string",
            cssClass: "string",
            readOnly: "boolean",
            enabled: "boolean",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data",
            validateOnType: "boolean",
            groupSeparator: "string"
        },
        observables: ["value"],

        _setModel: function (jsondata) {
            var validate = false;
            for (var key in jsondata) {
                switch (key) {
                    case "value":
                        if (ej.isNullOrUndefined(jsondata["minValue"]) && ej.isNullOrUndefined(jsondata["maxValue"])) {
                            this._setValue(jsondata[key], true);
                            jsondata[key] = this.model.value;
                        }
                        else {
                            this.model.value = this._checkNumValue(jsondata[key]);
                            this._localizedFormat();
                            this._raiseChangeEvent(true);
                            validate = true;
                        }
                        break;
                    case "enableRTL": this._enableRTL(jsondata[key]); break;
                    case "width": this._setWidth(jsondata[key]); break;
                    case "height": this._setHeight(jsondata[key]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = jsondata[key];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessage = jsondata[key];
                        if (this.model.validationRules != null && this.model.validationMessage != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "minValue":
                        if (isNaN(jsondata[key])) return;
                        this.model.minValue = (this.model.decimalPlaces == -1) ? jsondata[key] : parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        this._updateValueAttributes(this.model.minValue, this.model.maxValue, this.model.value);
                        validate = true;
                        break;
                    case "maxValue":
                        if (isNaN(jsondata[key])) return;
                        this.model.maxValue = (this.model.decimalPlaces == -1) ? jsondata[key] : parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        this._updateValueAttributes(this.model.minValue, this.model.maxValue, this.model.value);
                        validate = true;
                        break;
                    case "incrementStep":
                        if (isNaN(jsondata[key])) return;
                        this.model.incrementStep = (this.model.decimalPlaces == -1) ? jsondata[key] : parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        break;
                    case "enableStrictMode": this.model.enableStrictMode = jsondata[key]; validate = true; break;
                    case "showSpinButton": this._showSpin(jsondata[key]); break;
                    case "showRoundedCorner": this._roundedCorner(jsondata[key]); break;
                    case "locale":                        
                        this.model.decimalPlaces = ((ej.isNullOrUndefined(this._options.decimalPlaces)) && (this.model.decimalPlaces === this.culture.numberFormat.decimals))
                           ? -1 : (this._options.decimalPlaces === -1) ? -1 : this.model.decimalPlaces;
                        this._setLocalize(jsondata[key]);
                        this._options.decimalPlaces = this.model.decimalPlaces;
						jsondata[key] = this.model.locale;
						break;
                    case "decimalPlaces":
                        this._setDecimal(jsondata[key]);
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options["decimalPlaces"] = jsondata[key];
                        break;
                    case "cssClass": this._setSkin(jsondata[key]); break;
                    case "readOnly": this._setReadOnly(jsondata[key]); break;
                    case "enabled": if (jsondata[key]) this.enable(); else this.disable(); break;
                    case "watermarkText":
                        if(!ej.isNullOrUndefined(this._options)) this._options = [];
                        this._options["watermarkText"] = this.model.watermarkText = jsondata[key];
                        this._localizedLabels.watermarkText = this.model.watermarkText;						
						this._changeWatermark(jsondata[key]);
						break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "groupSeparator":
                        this._checkSeparator(jsondata[key]);
                        jsondata[key] = this.model.groupSeparator;
                        break;
                    case "positivePattern":
                    case "negativePattern":
                    case "groupSize":
                    case "currencySymbol":
                        this.model[key] = jsondata[key];
                        this._options[key] = jsondata[key];
                        this._initCustomValue();
                        jsondata[key] = this.model[key];
                        this._setValue(this.model.value, true);
                        break;                    
                }
            }
            if (validate) {
                this._validateMinMaxValue(true, true);
                jsondata["value"] = this.model.value;
                jsondata["maxValue"] = this.model.maxValue;
                jsondata["minValue"] = this.model.minValue;
                if (this.model.minValue != -(Number.MAX_VALUE)) this._startValue = this.model.minValue;
                this._updateValueAttributes(this.model.minValue, this.model.maxValue, this.model.value);
            }
            this._checkSeparator(this.model.groupSeparator);
            this.element.val(this._removeSeparator(this.model.value));
            this._updateSeparator();
            this._checkErrorClass();
        },


        _destroy: function () {
            if (this.wrapper) {
                this.element.insertBefore(this.wrapper);
                this.wrapper.remove();
            }
            if (this._isWatermark) this.element.removeAttr("placeholder");
            this.element.val("").removeClass('e-input e-disable e-no-spin').empty();
            this.element.removeAttr('disabled aria-disabled');
			this.wrapper.removeAttr('aria-valuemin aria-valuemax aria-valuenow aria-live');
            if (!(this._cloneElement).attr('role')) this.element.removeAttr('role');
            this.element.css("display", "block");
        },



        _init: function (options) {
            this._cloneElement = this.element.clone();
            this._options = ej.isNullOrUndefined(options) ? {} :options;
            if (this.element.is("input") && (this.element.is("input[type=text]") || this.element.is("input[type=number]") || !this.element.attr('type'))) {
                if (this.model.decimalPlaces > 0) {
                    if (this.element.is("input[type=number]"))
                        this.element[0].type = "tel";
                    else this.element[0].type = "text";
                }
                if (this.element.is("input[type=number]")) this.element.addClass("e-no-spin");
                this._isWatermark = 'placeholder' in document.createElement('input');
                this.model.locale = ej.preferredCulture(this.model.locale).name == "en" ? "en-US" : ej.preferredCulture(this.model.locale).name;
                this._localizedLabels = this._getLocalizedLabels();
                this.culture = ej.preferredCulture(this.model.locale);
                this._browsername = ej.browserInfo().name;
                this._initCustomValue();
                this._prevSeparator = null;
                this._checkSeparator(this.model.groupSeparator);
                this._checkAttribute();
                this._renderControl();
                this._setValues();
                this._wireEvents();
                this._initObjects();
                this._addAttr(this.model.htmlAttributes);
                if (this.model.validationRules != null) {
                    this._initValidator();
                    this._setValidation();
                }
                this._updateSeparator();
                if (options && options.value != undefined) {
                    this._trigger("_change", { value: this.model.value });
                }
            }
            else {
                this._destroy();
                return false;
            }
        },
		
        _checkAttribute: function () {
            var attr = ["min", "max", "step", "readonly", "disabled", "placeholder"], propName = ["minValue", "maxValue", "incrementStep", "readOnly", "enabled", "watermarkText"], value, propValue;
            for (var i = 0; i < attr.length; i++) {
                value = this.element.attr(attr[i]); propValue = propName[i];
                if ((!ej.isNullOrUndefined(value)) && !ej.isNullOrUndefined(this._options) && (ej.isNullOrUndefined(this._options[propValue]))) {
                    if (propValue == "watermarkText") this._options[propValue] = value;
                    else this.model[propValue] = ((propValue != "disabled") && (propValue != "readOnly")) ? ej.parseFloat(value, this.model.locale) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
                }
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
                else if (keyName == "accesskey") proxy._hiddenInput.attr(key, value);
                else if (keyName == "disabled" && value == "disabled") proxy.disable();
                else if (keyName == "readonly" && value == "readOnly") proxy._setReadOnly(true);
                else if (keyName == "tabindex") {
                    proxy._hiddenInput.attr(key, value);
                    proxy.element.attr(key, value);
                }
                else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
                else if (keyName == "aria-label") proxy.element.attr(key, value);
                else if (ej.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
                else proxy.wrapper.attr(key, value);
            });
        },

        _setValues: function () {
            this._id = this.element[0].id;
            this._textBox = this._hiddenInput[0];
            this._error = false;
            this._timeout = null;
            this.isValidState = true;
            this._allowkeyboard = true;
            this._validateOnType = false;
            this._focused = false;
            this._startValue = 0;
            if (this.sfType === "ej.CurrencyTextbox" && this.model.minValue == -(Number.MAX_VALUE))
                this.model.minValue = 0;
            if (ej.isNullOrUndefined(this.model.decimalPlaces)) {
                if (this.sfType === "ej.CurrencyTextbox")
                    this.model.decimalPlaces = ej.preferredCulture(this.model.locale).numberFormat.currency.decimals;
                else this.model.decimalPlaces = ej.preferredCulture(this.model.locale).numberFormat.decimals;

            }
            if (this.model.decimalPlaces >= 0) {
                this.model.minValue = parseFloat(this.model.minValue.toFixed(this.model.decimalPlaces));
                this.model.maxValue = parseFloat(this.model.maxValue.toFixed(this.model.decimalPlaces));
            }
            if (this.model.minValue != -(Number.MAX_VALUE)) this._startValue = this.model.minValue;
			if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
                
            }
            this._localizedLabelToModel();
            this._localizedFormat();
            this._validateMinMaxValue(true);
            this._updateSymbol(this.model.locale);
            var value;
            if (ej.isNullOrUndefined(this.model.value)) {
                value = this.model.value;
                this.wrapper.removeClass('e-valid');
            }
            else {
                value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
                this.wrapper.addClass('e-valid');
            }
           this.element.val(value);
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            var rules = this.model.validationRules;
            this.element.rules("add", rules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            var name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in rules) {
                var message = null;
                if (!ej.isNullOrUndefined(rules[ruleName])) {
                    if (!ej.isNullOrUndefined(rules["messages"] && rules["messages"][ruleName]))
                        message = rules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },

        _updateValueAttributes: function(minValue, maxValue, value){
            if (minValue && minValue != -(Number.MAX_VALUE)) {
                this.wrapper.attr({ 'aria-valuemin': minValue });
            }
            if (maxValue && maxValue != Number.MAX_VALUE) {
                this.wrapper.attr({ 'aria-valuemax': maxValue });
            }
            if (value) {
                this.wrapper.attr({ 'aria-valuenow': value });
            }
        },

        _renderControl: function () {
            this.wrapper = ej.buildTag("span.e-widget e-pinch");
            this.innerWrap = ej.buildTag("span.e-in-wrap e-box ");
            this.wrapper.attr("style", this.element.attr("style"));
            if (this.sfType === "ej.NumericTextbox")
                this.wrapper.addClass('e-numeric');
            else if (this.sfType === "ej.PercentageTextbox")
                this.wrapper.addClass('e-percent');
            else if (this.sfType === "ej.CurrencyTextbox")
                this.wrapper.addClass('e-currency');
            this.wrapper.append(this.innerWrap).insertAfter(this.element);
            this.innerWrap.append(this.element);
            this._hiddenInput = ej.buildTag("input", "", {}, { type: "text" }).insertBefore(this.element);
            this._hiddenInput.attr('data-role', 'none');

            this._hiddenInput[0].tabIndex = this.element[0].tabIndex;
            this._hiddenInput.attr("accesskey", this.element[0].accessKey);
            this.element[0].accessKey = "";

            this._hiddenInput.css("display", "block");
            this.element.css("display", "none");
            if (!this._isWatermark) {
                this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(this._localizedLabels.watermarkText);
                this._hiddenSpan.css("display", "none");
                this._on(this._hiddenSpan,"mousedown", this._focusIn);
                this._on(this._hiddenSpan,'mousewheel', this._mouseWheel);
                this._on(this._hiddenSpan,'DOMMouseScroll',this._mouseWheel);
            }
            this.model.name = this.element.attr("name") != null ? this.element.attr("name") : (this.model.name != null ? this.model.name : this.element[0].id);
            this.element.attr("name") == null ? this.element.attr("name", this.model.name) : "";
            this.element.addClass('e-input');
            if (ej.isNullOrUndefined(this.model.value) && this.element[0].value != "") {
                if (ej.preferredCulture(this.model.locale).numberFormat[','] == ".")
                    this.element[0].value = this.element[0].value.replace(".", ",");
                this.model.value = this._checkNumValue(this.element[0].value);
            }   
            else {
                if (typeof this.model.value== "string" && ej.preferredCulture(this.model.locale).numberFormat[','] == ".")
                    this.model.value = this.model.value.replace(".", ",");
                this.model.value = this._checkNumValue(this.model.value);
            }
            this._hiddenInput.attr({ 'value': this.model.value }).addClass('e-input');
            this.wrapper.attr({'role': 'spinbutton' });
            this._updateValueAttributes(this._options.minValue, this._options.maxVal, this.model.value);
            this.element.attr({'aria-live': 'assertive', "value": this.model.value });
            var spinbutton = $('<span class="e-select"><span class="e-spin e-spin-up " role="button" aria-label="Increase Value" unselectable="on" /><span class="e-spin e-spin-down" role="button" aria-label="Decrease Value" unselectable="on" /></span>');
            spinbutton.find('.e-spin-up').append(ej.buildTag('span.e-icon e-arrow e-arrow-sans-up').attr({ 'role': 'presentation', 'unselectable': 'on' }));
            spinbutton.find('.e-spin-down').append(ej.buildTag('span.e-icon e-arrow e-arrow-sans-down').attr({ 'role': 'presentation', 'unselectable': 'on' }));
            this.innerWrap.append(spinbutton);
            this.spin = this.wrapper.find('.e-select');
            this.spinUp = this.wrapper.find('.e-spin-up');
            this.spinDown = this.wrapper.find('.e-spin-down');
            this._setWidth(this.model.width);
            this._setHeight(this.model.height);
            if (this.model.cssClass != "") this._setSkin(this.model.cssClass);
            this._showSpin(this.model.showSpinButton);
            if (this.model.showRoundedCorner) this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.enableRTL) this._enableRTL(this.model.enableRTL);
            if (this.model.readOnly) this._setReadOnly(this.model.readOnly);
            if (!this.model.enabled) this.disable();
            else if (this.model.enabled && this.element.hasClass("e-disable")) this.enable();
        },


        _initObjects: function () {
            this._preVal = this.model.value;
            if (this.model.value === null) {
                this.isValidState = true;
                this._hiddenInput.val(null);
            }
            else if ((this.model.value < this.model.minValue) || (this.model.value > this.model.maxValue))
                this.isValidState = false;
            this._checkErrorClass();
            this._setWaterMark();
        },


        _showSpin: function (value) {
            if (!value) {
                if (this.spin) {
                    this.spin.hide();
                    this.innerWrap.removeClass('e-padding');
                }
                this._spinEvents("_off");
            }
            else {
                if (this.spin) {
                    this.spin.show();
                    this.innerWrap.addClass('e-padding');
                }
                this._spinEvents("_on");
            }
        },


        _roundedCorner: function (value) {
            if (value && !this.innerWrap.hasClass('e-corner')) {
                this.innerWrap.addClass('e-corner');
            } else if (this.innerWrap.hasClass('e-corner')) {
                this.innerWrap.removeClass('e-corner');
            }
        },


        _enableRTL: function (enableRTL) {
            if (enableRTL) {
                if (this.spin) {
                    this.wrapper.addClass("e-rtl");
                }
                else this.element.addClass("e-rtl");
            }
            else {
                if (this.spin) {
                    this.wrapper.removeClass("e-rtl");
                }
                else this.element.removeClass("e-rtl");
            }
        },


        _setWidth: function (value) {
            value != "" ? this.wrapper.width(value) : this.model.width = this.wrapper.outerWidth();
        },


        _setHeight: function (value) {
            value != "" ? this.wrapper.height(value) : this.model.height = this.wrapper.outerHeight();
        },


        _setSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass);
            this.wrapper.addClass(skin);
        },


        _setValue: function (value, isCode) {
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this.model.value = this._checkNumValue(value);
            this._validateMinMaxValue(false);
            this._checkErrorClass();
            this._localizedFormat();
            this._raiseChangeEvent(isCode);
            this._setWaterMark();
        },

        _setLocalize: function (val) {
            var prevSeparator = ej.preferredCulture(this.model.locale).numberFormat[',']
            this.model.locale = ej.preferredCulture(val).name == "en" ? "en-US" : ej.preferredCulture(val).name;
            this.model.groupSeparator = ((ej.isNullOrUndefined(this._options.groupSeparator) && (prevSeparator === this.model.groupSeparator))) ?
                ej.preferredCulture(this.model.locale).numberFormat[','] : this.model.groupSeparator;
			this._localizedLabels = this._getLocalizedLabels();
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            this._localizedLabelToModel();
            this.culture = ej.preferredCulture(this.model.locale);
            this._initCustomValue();
            this._updateSymbol(this.model.locale);
            this._localizedFormat();
            this._changeWatermark(this.model.watermarkText);
            if (ej.isNullOrUndefined(this.model.value)) var value = this.model.value;
            else value = (this.model.value.toString().indexOf('e') == -1) ? this._formatValue(this.model.value, "n",true) : this._convertToExponetial(this.model.value).unformattedValue;
            this.element.val(value);
			
        },
		 _localizedLabelToModel: function () {
            this.model.watermarkText = this._localizedLabels.watermarkText;
            
        },
        _updateSymbol: function (locale) {
            this._percentSymbol = ej.preferredCulture(locale).numberFormat.percent.symbol;
            this._currencySymbol = ej.preferredCulture(locale).numberFormat.currency.symbol;
        },

        _setDecimal: function (val) {
            this.model.decimalPlaces = val;
            this._localizedFormat();
        },


        _validateMinMaxValue: function (fromMinMax, isCode) {
            var valChange = false, value;
            if (this.model.minValue > this.model.maxValue) this.model.minValue = this.model.maxValue;
            if (!ej.isNullOrUndefined(this.model.value) && this.model.minValue > this.model.value) {
                if (this.model.enableStrictMode != true) {
                    this.isValidState = true;
                    this._startValue = this.model.value = this.model.minValue;
                }
                else this.isValidState = false;
                valChange = true;
            }
            else if (!ej.isNullOrUndefined(this.model.value) && this.model.maxValue < this.model.value) {
                if (this.model.enableStrictMode != true) {
                    this.isValidState = true;
                    this.model.value = this.model.maxValue;
                }
                else this.isValidState = false;
                valChange = true;
            }
            else this.isValidState = true;
            if (this.model.minValue == this.model.maxValue) this._startValue = this.model.minValue;
            if ((valChange && fromMinMax)) {
                value = this._formatValue(this.model.value, "n", true);
                this._hiddenInput.val(value);
                if (ej.isNullOrUndefined(this.model.value)) value = this.model.value;
                else value = (this.model.value.toString().indexOf('e') == -1) ? this._formatValue(this.model.value, "n", true) : this._convertToExponetial(this.model.value).unformattedValue;
                this.element.val(value);
                this._localizedFormat();
                this._raiseChangeEvent(isCode);
            }
        },

        _convertToExponetial: function (value) {
            var number = "", pattern, format, unformattedValue, symbol;
            var negative = value < 0 ? true : false;
            value = value.toString();
            format = ej.preferredCulture(this.model.locale).numberFormat;
            value = value.replace(".", format["."]);
            unformattedValue = value;
            var length = null;
            if (this.sfType === "ej.NumericTextbox") {
                pattern = negative ? format.pattern[0] : ej.isNullOrUndefined(format.pattern[1]) ? "n" : format.pattern[1];
                value = negative ? value.replace("-", "") : value;
                symbol = "";
            }
            else if (this.sfType === "ej.PercentageTextbox") {
                pattern = negative ? format.percent.pattern[0] : format.percent.pattern[1];
                value = negative ? value.replace("-", "") : value;
                symbol = format.percent.symbol;
            }
            else if (this.sfType === "ej.CurrencyTextbox") {
                pattern = negative ? format.currency.pattern[0] : format.currency.pattern[1];
                value = negative ? value.replace("-", "") : value;
                symbol = format.currency.symbol;
            }
            for (var idx = 0, length = pattern.length; idx < length; idx++) {
                var ch = pattern.charAt(idx);
                (ch === "n") ? number += value : (ch === "$" || ch === "%") ? number += symbol : number += ch;
            }
            return { formattedValue: number, unformattedValue: unformattedValue }
        },

        _localizedFormat: function () {
            this.culture = ej.preferredCulture(this.model.locale);
            this._decimalSep = ej.preferredCulture(this.model.locale).numberFormat['.'];
            if (ej.isNullOrUndefined(this.model.value)) {
                this._textBox.value = "";
                return;
            }
            if (this.model.value.toString().indexOf('e') == -1) {
                this._textBox.value = this._removeSeparator(this.model.value)
                if (!this._focused && this._textBox.value != "") {
                    this._textBox.value = this._formatValue(this.model.value, "n", true);
					
                    if (this.sfType === "ej.PercentageTextbox") this._appendPercentSymbol(this._textBox.value);
                    else if (this.sfType === "ej.CurrencyTextbox") this._appendCurrencySymbol(this._textBox.value);


                    var symbolIndex = (this.sfType === "ej.CurrencyTextbox") ? this._textBox.value.indexOf(this._currencySymbol) : (this.sfType === "ej.PercentageTextbox") ? this._textBox.value.indexOf(this._percentSymbol) : -1;

                    if (this.model.decimalPlaces == -1 && this._afterDec !=0) {
                        this._textBox.value = this._textBox.value.substr(0, this._textBox.value.lastIndexOf(this._decimalSep));
                        if (symbolIndex > 1 && (ej.isNullOrUndefined(this._afterDec) || this._afterDec == "")) {
                            if (this.sfType === "ej.CurrencyTextbox")
                                this._textBox.value = this._textBox.value + " " + this._currencySymbol;
                            if (this.sfType === "ej.PercentageTextbox")
                                this._textBox.value = this._textBox.value + " " + this._percentSymbol;
                        }
                        if (this.model.decimalPlaces == -1 && !ej.isNullOrUndefined(this._afterDec) && this._afterDec != "") {
                            var index = this._textBox.value.lastIndexOf(this._decimalSep);
                            if (index >= 0) {
                                this._textBox.value = this._textBox.value.substr(0, index);
                            }
                            var symbolPos = this._afterDec;
                            if (symbolIndex > 1) {
                                if (this.sfType === "ej.CurrencyTextbox")
                                    symbolPos = symbolPos + " " + this._currencySymbol;
                                if (this.sfType === "ej.PercentageTextbox")
                                    symbolPos = symbolPos + " " + this._percentSymbol;

                            }
                            this._textBox.value = this._textBox.value + this._decimalSep + symbolPos;
                        }
                    }
                }
                else {
                    var value = this._convertToExponetial(this.model.value);
                    this._textBox.value = value.unformattedValue;
                    if (!this._focused && this._textBox.value != "")
                        this._textBox.value = value.formattedValue;
                }
            }
            else {
                this._textBox.value = this.model.value.toString();
            }
        },

        _checkNumValue: function (value) {
            if (typeof value == "string")
                value = !this._changeSeparator ? value : this._replaceSeparator(value, this.model.groupSeparator, ej.preferredCulture(this.model.locale).numberFormat[',']);
            if (typeof value == "string" && !isNaN(this._parseValue(value))) {
                value = this._parseValue(value);
                return parseFloat(value);
            }
            else if ((typeof value == "number") && !isNaN(value))
                return value;
            else return null;
        },


        _setReadOnly: function (bool) {
            this.model.readOnly = bool;
            if (bool) {
                this.element.attr("readonly", true);
                this._hiddenInput.attr("readonly", true);
            }
            else {
                this.element.prop("readonly",false);
                this._hiddenInput.prop("readonly",false);
            }
        },


        _setWaterMark: function () {
            if ((this._localizedLabels.watermarkText != null) && (this._textBox.value === "") && $.trim(this._hiddenInput.val()) === "") {
                if (this._isWatermark) {
                    this._hiddenInput.attr("placeholder", this._localizedLabels.watermarkText);
                    this.element.attr("placeholder", this._localizedLabels.watermarkText);
                }
                else
                    this._hiddenSpan.css("display", "block").text(this._localizedLabels.watermarkText);
            }
        },


        _changeWatermark: function (text) {
            if (!this.model.enabled) return false;
            if (this._isWatermark) {
                this._hiddenInput.attr("placeholder", text);
                this.element.attr("placeholder", text);
            }
            else this._hiddenSpan.text(text);
        },


        _setSelectionRange: function (selectionStart, selectionEnd) {
            var input = this._textBox;
            try {
                if (input.setSelectionRange) {
                    if (this._browsername == "edge")  setTimeout(function () { input.setSelectionRange(selectionStart, selectionEnd) })
                    else input.setSelectionRange(selectionStart, selectionEnd);
                }
                else if (input.createTextRange) {
                    var range = input.createTextRange();
                    _setselction(range);
                }
            }
            catch (e) {
                var control = this;
                window.setTimeout(function () {
                    document.body.focus();
                    control._textBox.select();
                    if (document.selection) {
                        var range = document.selection.createRange();
                        _setselction(range);
                    }
                }, 1);
            }
            function _setselction(range) {
                range.collapse(true);
                range.moveEnd('character', selectionEnd);
                range.moveStart('character', selectionStart);
                range.select();
            }
        },


        _getSelection: function (value) {
            if (this._textBox.type != "number") {
                var oSel = null;
                if (document.selection) {
                    oSel = document.selection.createRange();
                    return (oSel.text === "" ? oSel.text : this._removeFormats(oSel.text));
                }
                else {
                    if (value == null)
                        return this.model.value;
                    else {
                        oSel = this._removeFormats(value.substring(this._textBox.selectionStart, this._textBox.selectionEnd));
                        return oSel;
                    }
                }
            }
        },


        _caretPosition: function () {
            var oField = this._textBox;
            var iCaretPos = 0;
            // IE Support
            if (oField.type != "number") {
                if (document.selection) {
                    oField.focus();
                    // To get cursor position, get empty selection range
                    var oSel = document.selection.createRange();
                    // Move selection start to 0 position
                    oSel.moveStart('character', -oField.value.length);
                    // The caret position is selection length
                    iCaretPos = oSel.text.length;
                }
                    // Firefox support
                else if (oField.selectionStart || oField.selectionStart == '0')
                    iCaretPos = oField.selectionEnd;
                return (iCaretPos);
            }  
        },


        _appendPercentSymbol: function (value) {
            if (this._percentSymbol) value = value.replace(this._percentSymbol, "");
            if (value.indexOf(ej.preferredCulture(this.model.locale).numberFormat.percent.symbol) < 0)
                this._textBox.value = this._formatValue(this._parseValue(value) / 100, "p", true);
            this._percentSymbol = ej.preferredCulture(this.model.locale).numberFormat.percent.symbol;
        },

        _appendCurrencySymbol: function (value) {
            if (this._currencySymbol) value = value.replace(this._currencySymbol, "");
            if (value.indexOf(ej.preferredCulture(this.model.locale).numberFormat.currency.symbol) < 0)
                this._textBox.value = this._formatValue(this._parseValue(value), "c", true);
            this._currencySymbol = ej.preferredCulture(this.model.locale).numberFormat.currency.symbol;

        },

        _removeFormats: function (val) {
            var grpSep = ej.preferredCulture(this.model.locale).numberFormat[","];
            if (val != null) {
                if (grpSep == ".")
                    return (val.toString().replace(/["."]/g, ""));
                else if (val.toString().match(new RegExp(grpSep, "g")))
                    return (val.toString().replace(new RegExp(grpSep, "g"), ""));
                else
                    return val;
            }
            else
                return null;
        },


        _checkErrorClass: function (obj) {
            if (this.isValidState) this.wrapper.removeClass("e-error");
            else this.wrapper.addClass("e-error");
        },
		


        enable: function () {
            this.model.enabled = true;
            this.element[0].disabled = false;
            this.element.prop("disabled",false);
            this._hiddenInput.prop("disabled", false);
            this.element.removeClass('e-disable').attr({ "aria-disabled": false });
            this._hiddenInput.removeClass('e-disable').attr({ "aria-disabled": false });
            this.wrapper.find(".e-select").removeClass('e-disable').attr({ "aria-disabled": false });
            this.wrapper.find(".e-select span.e-icon.e-arrow").removeClass('e-disable');
            this.wrapper.removeClass('e-disable-wrap');
        },


        disable: function () {
            this.model.enabled = false;
            this.element[0].disabled = true;
            this.element.attr("disabled", "disabled");
            this._hiddenInput.attr("disabled", "disabled");
            this.element.addClass('e-disable').attr({ "aria-disabled": true });
            this._hiddenInput.addClass('e-disable').attr({ "aria-disabled": true });
            this.wrapper.find(".e-select").addClass('e-disable').attr({ "aria-disabled": true });
            this.wrapper.find(".e-select span.e-icon.e-arrow").addClass('e-disable');
            this.wrapper.addClass('e-disable-wrap');
        },


        getValue: function () {
            return this.model.value;
        },

        _wireEvents: function () {
            this._on(this._hiddenInput, 'focus', this._focusIn);
            this._on(this.element, 'paste', this._paste);
            this._on(this.element, 'blur', this._focusOut);
            this._on(this.element, 'keydown', this._keyDown);
            this._on(this.element, 'keypress', this._keyPress);
            this._on(this.element, 'mousewheel', this._mouseWheel);
            this._on(this.element, 'DOMMouseScroll', this._mouseWheel);
        },

        _spinEvents: function (action) {
            this[action](this.spinUp, "mousedown mouseup touchstart touchend", this._spinUpClick);
            this[action](this.spinDown, "mousedown mouseup touchstart touchend", this._spinDownClick);
        },

        _isIE8: function () {
            var _ie8 = false, browserInfo = ej.browserInfo();
            if (browserInfo.name == 'msie' && browserInfo.version == "8.0") {
                _ie8 = true;
            }
            return _ie8;
        },

        _spinUpClick: function (event) {
            var isNotLeftClick = false;
            if (event.button)
                isNotLeftClick = this._isIE8() ? event.button != 1 : event.button != 0;
            else if (event.which)
                isNotLeftClick = (event.which == 3); //for Opera
            if (isNotLeftClick) return;
            var self = this;
            event.preventDefault();
            clearTimeout(this._timeout);
            if (!this.model.enabled || this.model.readOnly) return;
            this.wrapper.find(".e-animate").removeClass("e-animate");
            this.spinUp.addClass("e-animate");
            this._on(this.spinUp, 'mouseleave', this._mouseUpClick);
            this.spinUp.addClass("e-active");
            var self = this;
            if (event.type == "mouseup"|| event.type == "touchend") {
                this._updateInputField("increment");
                this.spinUp.removeClass("e-active");
                this._off($(document), 'mouseup', this._mouseUpClick);
            }
            else if (event.type == "mousedown"|| event.type == "touchstart") {
                if (!this._focused) this._hiddenInput[0].focus();
                this._timeout = setInterval(function () {
                    self._updateInputField("increment");
                }, 150);
                this._on($(document), 'mouseup', this._mouseUpClick);
            }
        },

        _spinDownClick: function (event) {
            var isNotLeftClick = false;
            if (event.button)
                isNotLeftClick = this._isIE8() ? event.button != 1 : event.button != 0;
            else if (event.which)
                isNotLeftClick = (event.which == 3); //for Opera
            if (isNotLeftClick) return;
            var self = this;
            event.preventDefault();
            clearTimeout(this._timeout);
            if (!this.model.enabled || this.model.readOnly) return;
            this.wrapper.find(".e-animate").removeClass("e-animate");
            this.spinDown.addClass("e-animate");
            this._on(this.spinDown, 'mouseleave', this._mouseUpClick);
            this.spinDown.addClass("e-active");
            if (event.type == "mouseup"|| event.type == "touchend") {
                this._updateInputField("decrement");
                this.spinDown.removeClass("e-active");
                this._off($(document), 'mouseup', this._mouseUpClick);
            }
            else if (event.type == "mousedown"|| event.type == "touchstart") {
                if (!this._focused) this._hiddenInput[0].focus()
                this._timeout = setInterval(function () {
                    self._updateInputField("decrement");
                }, 150);
                this._on($(document), 'mouseup', this._mouseUpClick);
            }
        },

        _mouseUpClick: function (event) {
            event.stopPropagation();
            clearTimeout(this._timeout);
            this._off(this.spinUp, 'mouseleave', this._mouseUpClick);
            this._off(this.spinDown, 'mouseleave', this._mouseUpClick);
            this.spinDown.removeClass("e-active");
            this.spinUp.removeClass("e-active");
        },

        _mouseWheel: function (event) {
            event.preventDefault();
            if (!this._focused) this.element[0].focus();
            if (!this.model.enabled || this.model.readOnly) return;
            var delta;
            var rawEvent = event.originalEvent;
            if (rawEvent.wheelDelta) {
                // IE and Opera use wheelDelta, which is a multiple of 120 (possible values -120, 0, 120).
                delta = rawEvent.wheelDelta / 120;
                // In Opera, value is negated.
                //if (Sys.Browser.agent === Sys.Browser.Opera) delta = -delta;
            }
            else if (rawEvent.detail) {
                // Firefox uses detail property, which is a multiple of 3.
                delta = -rawEvent.detail / 3;
            }
            if (delta > 0)
                this._updateInputField("increment");
            else if (delta < 0)
                this._updateInputField("decrement");
            this._cancelEvent(event);
        },


        _numberValue: function () {
            var value = this._textBox.value;
            if (this.sfType === "ej.NumericTextbox")
                value = this._formatValue(this.model.value, "n", true);
            if (this.sfType === "ej.PercentageTextbox")
                value = this._formatValue(this.model.value, "n", true);
            else if (this.sfType === "ej.CurrencyTextbox")
                value = this._formatValue(this.model.value, "n", true);
            value = (typeof value == "string" && !isNaN(this._parseValue(value))) ? value : "";
            return value;
        },
        _formatValue: function (value, format,flag) {
            if(flag) this._updateCultureInfo();
			var value;
			    if(this.model.decimalPlaces != -1 || (this.model.decimalPlaces == -1 && this.model.value==null)){
				 value = ej.format(value, format + this.model.decimalPlaces, this.model.locale);
				}
				else{
					  value = ej.format(value, format + this._afterDec.length, this.model.locale);
			    }
				
            if (flag) this._restCultureInfo();
            return value;
        },
        _parseValue: function (value) {
            this._updateCultureInfo();
            var value = ej.parseFloat(value, this.model.locale);
            this._restCultureInfo();
            return value;            
        },

        _initCustomValue: function () {
            var format, ctr = this.sfType == "ej.PercentageTextbox" ? "percent" : this.sfType == "ej.CurrencyTextbox" ? "currency" : "numeric";
            switch (ctr) {
                case "percent":
                case "currency":
                    format = this.culture.numberFormat[ctr];
                    if (ej.isNullOrUndefined(this._options.negativePattern)) this.model.negativePattern = format.pattern[0];
                    if (ej.isNullOrUndefined(this._options.positivePattern)) this.model.positivePattern = format.pattern[1];
                    if (ej.isNullOrUndefined(this._options.currencySymbol) && ctr == "currency") this.model.currencySymbol = format.symbol;
                    if (ej.isNullOrUndefined(this._options.groupSize)) this.model.groupSize = format.groupSizes[0];                    
                    break;
                case "numeric":
                    format = this.culture.numberFormat;
                    if (ej.isNullOrUndefined(this._options.negativePattern)) this.model.negativePattern = format.pattern[0];
                    if (ej.isNullOrUndefined(this._options.positivePattern)) this.model.positivePattern = ej.isNullOrUndefined(format.pattern[1]) ? "n" : format.pattern[1];
                    if (ej.isNullOrUndefined(this._options.groupSize)) this.model.groupSize = format.groupSizes[0];
                    break;
            }
        },

        _updateCultureInfo: function (flag) {
            var format, ctr = this.sfType == "ej.PercentageTextbox" ? "percent" : this.sfType == "ej.CurrencyTextbox" ? "currency" : "numeric";
            format = ctr == "numeric" ? this.culture.numberFormat : this.culture.numberFormat[ctr];
            this._oldNegativePattern = format.pattern[0];
            this._oldGroupSize = format.groupSizes[0];
            format.pattern[0] = this.model.negativePattern;
            format.groupSizes[0] = this.model.groupSize;
            this._oldPositivePattern = format.pattern[1];
            format.pattern[1] = this.model.positivePattern;
            if (ctr == "currency") {
                this._oldcurrencySymbol = format.symbol;
                format.symbol = this.model.currencySymbol;
            }
        },
        _restCultureInfo: function () {
            var format, ctr = this.sfType == "ej.PercentageTextbox" ? "percent" : this.sfType == "ej.CurrencyTextbox" ? "currency" : "numeric";
            format = ctr == "numeric" ? this.culture.numberFormat : this.culture.numberFormat[ctr];
            format.pattern[0] = this._oldNegativePattern;
            format.groupSizes[0] = this._oldGroupSize;
            format.pattern[1] = this._oldPositivePattern;
            if (ctr == "currency")
                format.symbol = this._oldcurrencySymbol;;
        },
        _toggleTextbox: function (toggle) {
            var proxy = this;
            proxy._hiddenInput.toggle(toggle);
            proxy.element.toggle(!toggle);
        },

        _paste: function (event) {
            var text;
            if (window.clipboardData && window.clipboardData.getData) { // IE
                text = window.clipboardData.getData('Text');
            }
            else if (event.originalEvent.clipboardData && event.originalEvent.clipboardData.getData) { // other browsers
                text = event.originalEvent.clipboardData.getData('text/plain');
            }
            var data = ej.parseFloat(text, this.model.locale);
            if (isNaN(data) && text) this._cancelEvent(event)
        },
        _focusIn: function (event) {
            if (this.model.readOnly)
                return;
            this._focused = true;
            if(!ej.isNullOrUndefined(this.model.value)) this.element.val(this._removeSeparator(this.model.value));
            this._toggleTextbox(false);
            this._textBox = this.element[0];
            this.element[0].focus();
            this._preVal = this.model.value;
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this.wrapper.addClass("e-focus");
            this.wrapper.removeClass('e-error');
            if (!this._error) {
                if (this._textBox.value != "") {
                    var value = this._formatValue(this._textBox.value, "n", true);
                    if (this.model.decimalPlaces == -1) {
                        this._separateValue(this._textBox.value.toString(), true, true);
                        if (!ej.isNullOrUndefined(this._afterDec) && this._afterDec != "")
                            value = this._beforeDec + this._decimalSep + this._afterDec
                    }
                    this._textBox.value = value;
                    this._hiddenInput.val(value);
                }
                this._setSelectionRange(0, this._textBox.value.length);
            }
            this._trigger("focusIn", { value: this.model.value });
        },

        _separateValue: function (value, isDecimal, isgroupSep) {
            var index = (!isDecimal) ? value.lastIndexOf(".") : value.lastIndexOf(this._decimalSep);
            this._beforeDec = (index >= 0) ? value.substr(0, index) : value;
            if (!isDecimal && isgroupSep)
                this._afterDec = (index >= 0) ? value.substr(index + 1) : "";
        },

        _focusOut: function (event) {
            this._focused = false;
            this.wrapper.removeClass("e-focus");
            this._separateValue(this._textBox.value,false,true);
            if (!this._error) {
                if (this._textBox.value != "") {
                    var value = ej.parseFloat(this._textBox.value, this.model.locale);
                    if (value < this.model.minValue) {
                        if (!this.model.enableStrictMode)
                            this._textBox.value = this._formatValue(this.model.minValue, "n", false)
                        else
                            this.isValidState = false
                    }
                    else if (value > this.model.maxValue) {
                        if (!this.model.enableStrictMode)
                            this._textBox.value = this._formatValue(this.model.maxValue, "n", false);
                        else
                            this.isValidState = false;
                    }
                    this.model.value = (this.model.decimalPlaces == -1 && !ej.isNullOrUndefined(this._afterDec) && (this._textBox.value.lastIndexOf(this._decimalSep) == -1) && (value.toString().indexOf('e') == -1)) ? ej.parseFloat(this._textBox.value + this._decimalSep + this._afterDec, this.model.locale) : ej.parseFloat(this._textBox.value, this.model.locale);
                    if (isNaN(this.model.value) && !this.model.value) {
                        this.model.value = null;
                        this.isValidState = false;
                    }
                    this._toggleTextbox(true);
                    this._textBox = this._hiddenInput[0];
                    this._localizedFormat();
                    this._checkErrorClass();
                }
                else {
                    var value = this._textBox.value == "" ? null : this._textBox.value;
                    this.model.value = value;
                    this._hiddenInput.val(value);
                    this._toggleTextbox(true);
                    this._textBox = this._hiddenInput[0];
                }
                if (this.model.value === null || this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) this.isValidState = true;
                else if (this.model.enableStrictMode) this.isValidState = false;
                this._raiseChangeEvent();
                this._setWaterMark();
                if (ej.isNullOrUndefined(this.model.value)) value = this.model.value;
                else value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
                this.element.val(value);
                this._updateSeparator();
                this._trigger("focusOut", { value: this.model.value });
            }
            this._checkErrorClass();
            this._afterDec = "";
        },

        _cancelEvent: function (e) {
            e.cancelBubble = true;
            e.returnValue = false;
            e.stopPropagation();
            e.preventDefault();
            return false;
        },

        _updateInputField: function (operation) {
            this.isValidState = true;
            if (!this._focused) $(this._hiddenInput[0]).focus();
            var step = this.model.incrementStep;
            var itemValue = this.model.value;
            if (this._textBox.value === "") {
                this._textBox.value = this._formatValue(this._startValue, "n", true);
                step = 0;
            }
            else if (this._textBox.value.indexOf(" ") >= 0)
                this._textBox.value = this._textBox.value.replace(" ", "");
            if (this.sfType === "ej.PercentageTextbox" || this.sfType === "ej.CurrencyTextbox") {
                var editorvalue = this._textBox.value, value = editorvalue;
                if (editorvalue.indexOf(ej.preferredCulture(this.model.locale).numberFormat.percent.symbol) > -1)
                    value = editorvalue.substring(0, editorvalue.length - 1);
                this.model.value = this._parseValue(value);
            }
            else if (this.sfType == "ej.NumericTextbox")
                this.model.value = ej.parseFloat(this._textBox.value, this.model.locale);

            if (isNaN(this.model.value) && !this.model.value)
                this.model.value = this._startValue;

            if (this.model.value >= this.model.minValue && this.model.value > this.model.maxValue) {
                this.model.value = this.model.maxValue;
                this._setValue(this.model.value);
            }
            else if (this.model.value < this.model.minValue && this.model.value <= this.model.maxValue) {
                this.model.value = this.model.minValue;
                this._setValue(this.model.value);
            }
            else if (this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) {
                value = operation == "increment" ? this.model.value + step : this.model.value - step;
                if(this.model.decimalPlaces == -1) {
					 if (this.value == undefined  ) {
                             this._setValue(this.model.value);
                         } 
                    value = (this.model.value.toString().indexOf('e') == -1) ? parseFloat(value.toFixed(this._afterDec.length)) : parseFloat(value);
                    };
                if (value >= this.model.minValue && value <= this.model.maxValue)
                    this._setValue(value);
            }
            this._checkErrorClass();
        },

        _validateDecimal: function (e) {
            var char = String.fromCharCode(e.keyCode);
            char = e.keyCode == 188 ? "," : (e.keyCode == 190) ? "." : (e.keyCode == 110) ? ej.preferredCulture(this.model.locale).numberFormat["."] : char;
            if (ej.preferredCulture(this.model.locale).numberFormat["."].charCodeAt(0) == char.charCodeAt(0))
                return true;
            return false;
        },

        _allowKeyCodes: function (e) {
            var keys = new Array(38, 40, 35, 36, 109, 189, 46, 8, 127, 37, 39, 190, 9, 13, 16, 17, 18, 20, 110, 173, 86, 88, 67);
            for (var i = 0; i < keys.length; i++) {
                if (e.keyCode == keys[i] || (this._validateDecimal(e) && this.model.decimalPlaces != 0))
                    return true;
            }
            return false;
        },

        _raiseChangeEvent: function (isCode) {
            var currVal = this.model.value, value;
            if ((this._checkNumValue(this._preVal) !== this._checkNumValue(currVal))) {
                this._preVal = currVal;
                this.model.value = (this.model.decimalPlaces == -1 && !ej.isNullOrUndefined(this.model.value)) ? parseFloat(this.model.value) : this._checkNumValue(this._formatValue(this._preVal, "n", false));
                this._updateHiddenField();
                if (ej.isNullOrUndefined(this.model.value)) {
                    value = this.model.value;
                    this.wrapper.removeClass('e-valid');
                }
                else {
                    value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
                    if (this.model.decimalPlaces == -1) {
                        this._separateValue(this.model.value.toString(), false,true);
                        if (!ej.isNullOrUndefined(this._afterDec) && this._afterDec != "")
                            value = this._beforeDec + this._decimalSep + this._afterDec;
                    }
                    this.wrapper.addClass('e-valid');
                }
                this.element.val(value);
			    this.wrapper.attr('aria-valuenow', value);
                this._updateSeparator();
                // Trigger the Jquery change event for the input element.
                this.element.trigger("change");
                this._trigger("_change", { value: this.model.value, isInteraction: !isCode });
                this._trigger("change", { value: this.model.value, isInteraction: !isCode });
            }
        },
        _updateHiddenField: function () {
            var prevActive = this._textBox;
            this._textBox = this._hiddenInput[0];
            this._localizedFormat();
            this._textBox = prevActive;
        },
        _removeSeparator: function (number) {
            if (ej.isNullOrUndefined(number)) return;
            var value, format, tag;
            if (this.model.decimalPlaces == -1) {
                this._separateValue(number.toString(), false,true);
            }
            if (number.toString().indexOf('e') == -1) {
                number = this._checkNumValue(this._formatValue(number, "n", false));
            }
            value = number.toString();
            format = ej.preferredCulture(this.model.locale).numberFormat;
            value = value.replace(".", format["."]);
            return value;
        },
        _updateSeparator: function () {
            if (this._changeSeparator && this.model.value) {
                var formatValue;
                    if (this.sfType === "ej.NumericTextbox")
                        formatValue = this._formatValue(this.model.value, "n", true);
                    else if (this.sfType === "ej.PercentageTextbox")
                        formatValue = this._formatValue((this.model.value) / 100, "p", true);
                    else if (this.sfType === "ej.CurrencyTextbox")
                        formatValue = this._formatValue(this.model.value, "c", true);
                    if (this.model.decimalPlaces == -1) {
                        var index = formatValue.lastIndexOf(this._decimalSep);
                        var val = formatValue.substr(index + 1);
                        this._separateValue(formatValue, true, false);
                        var symbolIndex = (this.sfType === "ej.CurrencyTextbox") ? formatValue.indexOf(this._currencySymbol) : (this.sfType === "ej.PercentageTextbox") ? this._textBox.value.indexOf(this._percentSymbol) : -1;
                        var symbolPos = this._afterDec;
                         if (symbolIndex > 1) {
                           if (this.sfType === "ej.CurrencyTextbox")
                                symbolPos = symbolPos + " " + this._currencySymbol;
                            if (this.sfType === "ej.PercentageTextbox")
                                symbolPos = symbolPos + " " + this._percentSymbol;
                         }
                        if (!ej.isNullOrUndefined(this._afterDec) && this._afterDec != "")
                            formatValue = this._beforeDec + this._decimalSep + symbolPos;
                        if (!ej.isNullOrUndefined(this._afterDec) && this._afterDec == "")
                            formatValue = this._beforeDec + this._decimalSep + val;
                    }
                
                this._hiddenInput.val(this._replaceSeparator(formatValue, ej.preferredCulture(this.model.locale).numberFormat[","], this.model.groupSeparator));
            }
        },

        _replaceSeparator: function (value, find, replaceWith) {
            this._decimalSep = ej.preferredCulture(this.model.locale).numberFormat['.'];
            var reg = find === "" ? new RegExp("\\s", "g") : new RegExp("\\" + find, "g");
            if (this.model.groupSeparator == ej.preferredCulture(this.model.locale).numberFormat['.']) {
                var decimalpoints = this.model.decimalPlaces;
                if (this.model.decimalPlaces == -1) {
                    var index = value.lastIndexOf(this._decimalSep);
                    decimalpoints = value.substr(index + 1).length;
                 }
                var valuelength = value.length - decimalpoints - 1;
                return value.substring(0, valuelength).replace(reg, replaceWith) + value.substring(valuelength, value.length);
            }
            return value.replace(reg, replaceWith);
        },

        _checkSeparator: function (value) {
            this.model.groupSeparator = value != null ? this._validateSeparator(value) : ej.preferredCulture(this.model.locale).numberFormat[','];
            this._changeSeparator = ej.preferredCulture(this.model.locale).numberFormat[","] != this.model.groupSeparator ? true : false;
            this._prevSeparator = this.model.groupSeparator;
        },
        _validateSeparator: function (value) {
            var separator = value.toString();
            var reg = new RegExp("[a-zA-Z0-9]");
            separator = (separator.length > 1) ? separator[0] : separator;
            separator = (!reg.test(separator)) ? separator : this._prevSeparator != null ? this._prevSeparator : ej.preferredCulture(this.model.locale).numberFormat[','];
            return separator;
        },
        _keyPress: function (e) {
            if (e.which === 0 || e.metaKey || e.ctrlKey || e.keyCode === 8 || e.keyCode === 13)
                return;
            var proxy = this, regExp = null, point = ".", cursor, beforeCursor, afterCursor, numberFormat, value;
            cursor = this._caretPosition();
            beforeCursor = this._textBox.value.toString().substring(0, cursor);
            afterCursor = this._textBox.value.toString().substring(cursor);
            numberFormat = ej.preferredCulture(this.model.locale).numberFormat;

            var character = String.fromCharCode(e.which);
            value = beforeCursor + character + afterCursor;
            var separator = numberFormat[point];
            separator = (separator === point) ? "\\" + separator : separator;
            regExp = proxy.model.decimalPlaces === 0 ? new RegExp("^((-)?(\\d*)(-)?)?$") : new RegExp("^(-)?(((\\d+(" + separator + "\\d*)?)|(" + separator + "\\d*)))?((-)?)$");
            // Validate the textbox value 
            if (!regExp.test(value))
                return false;
        },
        _validateDecimalOnType: function (e) {
            var cursor, cancelEvent, beforeCursor, afterCursor, sel, temp;
            cursor = this._caretPosition();
            beforeCursor = this._textBox.value.toString().substring(0, cursor);
            afterCursor = this._textBox.value.toString().substring(cursor);
            sel = this._getSelection(this._textBox.value);
            var decSep = ej.preferredCulture(this.model.locale).numberFormat["."];
            temp = (ej.isNullOrUndefined(this.model.value)) ? "" : this.model.value.toString();
            if (this.model.decimalPlaces != 0) {
                var afterdeci = (this._textBox.value).split(decSep)[1];
                if (temp.indexOf(decSep) > 0) {
                    if ((temp.substring(temp.indexOf(decSep) + 1, temp.length)).length > this.model.decimalPlaces)
                        cancelEvent = true;
                    else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                    else cancelEvent = false;
                }
                else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                else
                    cancelEvent = false;
            }
            else
                cancelEvent = false;
            if (cancelEvent) {
                this._keypressFlag = false;
                this._cancelEvent(e);
                return false;
            }
        },

        _keyDown: function (e) {
            if (this.model.readOnly) return;
            this._CurrentCultureInfo = JSON.parse(JSON.stringify(ej.preferredCulture()));
            var cursor, cancelEvent, beforeCursor, afterCursor, sel;
            if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || this._allowKeyCodes(e)) {
                if (e.shiftKey && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || e.keyCode == 46 || e.keyCode == 127) || (e.ctrlKey && (e.keyCode == 86 || e.keyCode == 118 || e.keyCode == 67 || e.keyCode == 88)))
                    return true;
                if ((((e.ctrlKey == true) && (e.keyCode != 9 && e.keyCode != 17 && e.keyCode != 86 && e.keyCode != 67))) || (e.keyCode == 67 || e.keyCode == 86 || e.keyCode == 88)) {//Prevent Shift + Tab event
                    this._keypressFlag = false;
                    this._cancelEvent(e);
                    return false;
                }

                if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || e.keyCode == 110) {//Numbers from 0 to 9 in keyboard and numpad (110 for decimal)
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.toString().substring(0, cursor);
                    afterCursor = this._textBox.value.toString().substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                    // For Numpad issue
                    if (e.keyCode >= 96 && e.keyCode <= 105)
                        e.keyCode -= 48;
                    if (this.model.validateOnType && this.model.decimalPlaces != -1) this._validateDecimalOnType(e);
                    if (this._validateOnType) {
                        var decSep = ej.preferredCulture(this.model.locale).numberFormat["."];
                        var temp = this.model.value.toString();
                        var tempIndex = temp.indexOf(decSep);
                        var value = this.model.value;

                        var replaceminVal = (this.model.decimalPlaces == -1) ? this.model.minValue : this.model.minValue.toFixed(this.model.decimalPlaces);
                        var replacemaxVal = (this.model.decimalPlaces == -1) ? this.model.maxValue : this.model.maxValue.toFixed(this.model.decimalPlaces);
                        var exp = false;
                        if (replaceminVal.toString().indexOf("e") > 0 || replacemaxVal.toString().indexOf("e") > 0)
                            exp = true;
                        if (!exp) {
                            if (decSep != ".") {
                                temp = this._textBox.value.toString();
                                if (this.model.minValue.toString().match(new RegExp(".", "g")))
                                    replaceminVal = this.model.minValue.toString().replace(/["."]/g, decSep);
                                if (this.model.maxValue.toString().match(new RegExp(".", "g")))
                                    replacemaxVal = this.model.maxValue.toString().replace(/["."]/g, decSep);
                            }
                            if (replaceminVal.toString().indexOf(decSep) > 0)
                                minVal = Number(replaceminVal.toString().substring(0, replaceminVal.toString().indexOf(decSep)));
                            else
                                minVal = this.model.minValue;
                            if (replacemaxVal.toString().indexOf(decSep) > 0)
                                maxVal = Number(replacemaxVal.toString().toString().substring(0, replacemaxVal.toString().indexOf(decSep)));
                            else
                                maxVal = this.model.maxValue;
                            if (tempIndex > 0) {
                                value = Number(temp.substring(temp.indexOf(decSep) + 1, temp.toString().length));
                                if (replaceminVal.toString().indexOf(decSep) > 0)
                                    minVal = Number(replaceminVal.toString().substring(replaceminVal.toString().indexOf(decSep) + 1, replaceminVal.toString().length));
                                else
                                    minVal = 0;
                                if (replacemaxVal.toString().indexOf(decSep) > 0)
                                    maxVal = Number(replacemaxVal.toString().substring(replacemaxVal.toString().indexOf(decSep) + 1, replacemaxVal.toString().length));
                                else
                                    maxVal = 0;
                                var valb4Dec = Number(temp.substring(0, temp.indexOf(decSep)));
                                var minValb4Dec = Number(replaceminVal.toString().substring(0, replaceminVal.toString().indexOf(decSep)));
                                var maxValb4Dec = Number(replacemaxVal.toString().substring(0, replacemaxVal.toString().indexOf(decSep)));
                                if (!this._validateValue(value, minVal, maxVal, true, valb4Dec, minValb4Dec, maxValb4Dec))
                                    cancelEvent = true;
                                else
                                    cancelEvent = false;
                            }
                            else {
                                if (!this._validateValue(value, minVal, maxVal, false))
                                    cancelEvent = true;
                                else
                                    cancelEvent = false;
                            }
                        }
                        else if (this.model.decimalPlaces != 0) {
                            var afterdeci = (this._textBox.value).split(".")[1];
                            if (temp.indexOf(decSep) > 0 || (Number(temp) < Number(replaceminVal) || Number(temp) > Number(replacemaxVal))) {
                                if ((temp.substring(temp.indexOf(decSep) + 1, temp.length)).length > this.model.decimalPlaces)
                                    cancelEvent = true;
                                else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                                else cancelEvent = false;
                            }
                            else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                            else
                                cancelEvent = false;
                        }
                        else
                            cancelEvent = false;
                        if (cancelEvent) {
                            this._keypressFlag = false;
                            this._cancelEvent(e);
                            return false;
                        }
                    }

                }
                if (e.keyCode == 38 && this._allowkeyboard) {
                    this._updateInputField("increment");
                    this._cancelEvent(e);
                }

                if (e.keyCode == 40 && this._allowkeyboard) {
                    this._updateInputField("decrement");
                    this._cancelEvent(e);

                }
                if (e.keyCode == 8) {
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.substring(0, cursor);
                    afterCursor = this._textBox.value.substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                }

                if (e.keyCode == 46 || e.keyCode == 127) {
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.substring(0, cursor);
                    afterCursor = this._textBox.value.substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                }
                if (this._validateDecimal(e) && this.model.decimalPlaces != 0 && e.keyCode != 46) {
                    var decChar = ej.preferredCulture(this.model.locale).numberFormat["."];
                    var minVal, maxVal;
                    var dotSplit = this._textBox.value.split(decChar);
                    var curPosition = this._caretPosition();
                     if(this._textBox.selectionEnd - this._textBox.selectionStart == this._textBox.value.length){
                            this._textBox.value = decChar;
                            this._setSelectionRange(curPosition + 1, curPosition + 1);
                            this._keypressFlag = false;
                            this._cancelEvent(e);
                            return false;
                        }       
                    if (dotSplit[1] == undefined) {                        
                        var strBeforeCursor = dotSplit[0].substring(0, curPosition);
                        var strAfterCursor = dotSplit[0].substring(curPosition);
                        if (this.model.minValue.toString().indexOf("e") > 0 || this.model.maxValue.toString().indexOf("e") > 0)
                            exp = true;
                        if (this.model.decimalPlaces != -1 && strAfterCursor.length > this.model.decimalPlaces && this.model.validateOnType == true) {
                            this._keypressFlag = false;
                            this._cancelEvent(e);
                            return false;
                        }
                        if (this._validateOnType && !exp) {
                            if (this.model.minValue.toString().match(new RegExp(".", "g")))
                                minVal = this.model.minValue.toString().replace(/["."]/g, decChar);
                            if (this.model.maxValue.toString().match(new RegExp(".", "g")))
                                maxVal = this.model.maxValue.toString().replace(/["."]/g, decChar);
                            if (minVal.indexOf(decChar) > 0)
                                minVal = Number(minVal.substring(0, minVal.indexOf(decChar)));
                            else
                                minVal = Number(minVal);
                            if (maxVal.indexOf(decChar) > 0)
                                maxVal = Number(maxVal.substring(0, maxVal.indexOf(decChar)));
                            else
                                maxVal = Number(maxVal);
                            if (this._validateValue(this.model.value, minVal, maxVal, "DecimalKeyPressed"))
                                this._textBox.value = strBeforeCursor + decChar + strAfterCursor;
                            else {
                                this._keypressFlag = false;
                                this._cancelEvent(e);
                                return false;
                            }
                        }
                        else
                            this._textBox.value = strBeforeCursor + decChar + strAfterCursor;
                        this._setSelectionRange(curPosition + 1, curPosition + 1);
                    }
                    this._cancelEvent(e);
                } else if (e.keyCode == 190 || e.keyCode == 110) {
                    this._cancelEvent(e);
                }
                if (e.keyCode == 109 || e.keyCode == 189 || e.keyCode == 173) { //'-' char key press.
                    if (this.model.value === this._preVal || this.model.value === null) this.model.value = this._textBox.value;
                    if ((this._caretPosition() != 0 && this._getSelection(this._removeFormats(this._textBox.value)) != this.model.value) || (this.model.minValue >= 0 && !this.model.enableStrictMode) || (this._textBox.value.toString().match(new RegExp("-", "g")) && this._getSelection(this._textBox.value) === "")){
                         this._preVal = this.model.value;
                         this.model.value = this._textBox.value;
                         this._cancelEvent(e);
                    }
                    else if (this._getSelection() == this.model.value){
                        this._preVal = this.model.value;
                        this.model.value = null;
                    }
                }

                if (e.keyCode == 13)
                    if ((this._checkNumValue(this._preVal) !== this._checkNumValue(this._textBox.value)))
                        this._setValue(this._textBox.value);
            }

            else if (e.keyCode != 27 && !e.ctrlKey || (e.ctrlKey && e.keyCode == 90 && $.trim(this._textBox.value) === "")) {
                this._keypressFlag = false;
                this._cancelEvent(e);
            }
        },
		_getLocalizedLabels: function(){
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        }
		
    });
	
    ej.NumericTextbox.Locale = ej.NumericTextbox.Locale || {} ;
    
    ej.NumericTextbox.Locale['default'] = ej.NumericTextbox.Locale['en-US'] = {
        watermarkText: "Enter value"
        
    };
	ej.PercentageTextbox.Locale = ej.PercentageTextbox.Locale || {} ;
    
    ej.PercentageTextbox.Locale['default'] = ej.PercentageTextbox.Locale['en-US'] = {
        watermarkText: "Enter value"
        
    };
	ej.CurrencyTextbox.Locale = ej.CurrencyTextbox.Locale || {} ;
    
    ej.CurrencyTextbox.Locale['default'] = ej.CurrencyTextbox.Locale['en-US'] = {
        watermarkText: "Enter value"
        
    };
	
		
})(jQuery, Syncfusion);;

/**
* @fileOverview Plugin to style the Html ScrollBar elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, window, undefined) {
    'use strict';

    ej.widget("ejScrollBar", "ej.ScrollBar", {
        defaults: {

            orientation: "horizontal",

            viewportSize: 0,

            height: 18,

            width: 18,

            smallChange: 57,

            largeChange: 57,

            value: 0,

            maximum: 0,

            minimum: 0,

            buttonSize: 18,

            infiniteScrolling: false
        },
        validTags: ["div"],
        type: "transclude",
        dataTypes: {
            buttonSize: "number",
            smallChange: "number",
            largeChange: "number",
        },
        observables: ["value"],
        value: ej.util.valueFunction("value"),
        _enabled: true,
        content: function () {
            if (!this._content || !this._content.length) {
                if (this.model.orientation === "horizontal") {
                    this._content = this.element.find(".e-hhandle");
                }
                else {
                    this._content = this.element.find(".e-vhandle");
                }
            }
            return this._content;
        },
        _init: function () {
            this.element.addClass("e-widget");
            this._ensureScrollers();
            this.content();
            this._setInitialValues();

        },

        _setInitialValues: function () {
            var xy = "X";
            if (this.model.orientation === ej.ScrollBar.Orientation.Horizontal) {
                this.element.addClass("e-hscrollbar");
            }
            else {
                this.element.addClass("e-vscrollbar");
                xy = "Y";
            }
            if (this.value() !== 0 || this.model.minimum !== 0) {
                if (this.value() < this.model.minimum)
                    this.value(this.model.minimum);
                this["scroll"](this.value(), "none");
            }
        },

        _ensureScrollers: function () {
            var jqVersion = $.fn.jquery, height, width;
            if (this.model.height) {
                this.element.height(this.model.height);
            }
            if (this.model.width) {
                this.element.width(this.model.width);
            }
            var d2;
            if (!this._scrollData) {
                if (this.model.orientation === "vertical") {
                    this._scrollData = this._createScroller("Height", "Y", "Top", "e-v");
                }
                else {
                    this._scrollData = this._createScroller("Width", "X", "Left", "e-h");
                }
            }
        },

        _setModel: function (option) {
            for (var prop in option) {
                if (prop === "value") {
                    if (this.value()) {
                        this.scroll(this.value(), "none");
                    }
                } else {
                    this.refresh();
                    break;
                }
            }
        },

        _createScroller: function (dimension, xy, position, css) {
            var height;
            var d = {};
            var jqVersion = $.fn.jquery;
            d.dimension = dimension;
            d.xy = xy;
            d.position = position;
            d.css = css;
            d.uDimension = dimension;

            this._calculateLayout(d);
            this._createLayout(d);
            var buttons = this[d.main].find(".e-button");

            this._off(buttons, "mousedown")
                ._on(buttons, "mousedown", { d: d, step: 1 }, this._spaceMouseDown);
            this._off(this[d.scroll], "mousedown")
                ._on(this[d.scroll], "mousedown", { d: d }, this._spaceMouseDown);
            this._off(this[d.handler], "mousedown touchstart")
                ._on(this[d.handler], "mousedown touchstart", { d: d }, this._mouseDown);

            return d;
        },
        _createLayout: function (d) {
            var divString = "<div class='" + d.css + "{0}' style='" + d.dimension + ":{1}px'>{2}</div>";
            var jqVersion = $.fn.jquery;
            var lit = {}, height;
            lit[d.dimension] = d.modelDim;

            var el = ej.buildTag(
                "div." + d.css + "scroll e-box",
                String.format(divString, "up e-chevron-up_01 e-icon e-box e-button", d.buttonSize) +
                String.format(divString, "handlespace", d.handleSpace,
                    String.format(divString, "handle e-box e-pinch", d.handle)) +
                String.format(divString, "down e-chevron-down_01 e-icon e-box e-button", d.buttonSize),
                lit
            );

            this.element.append(el);
            this.element.find('.e-vhandle').addClass("e-v-line e-icon");
            this.element.find('.e-hhandle').addClass("e-h-line e-icon");
            jqVersion === "1.7.1" || jqVersion === "1.7.2" ? height = d.uDimension.toLowerCase() : height = "outer" + d.uDimension;
            this[d.handler] = this.element.find("." + d.handler);
            this[d.handler].css("transition", "none");
            this[d.scroll] = this[d.handler].parent();
            this[d.main] = this[d.scroll].parent();
            this[d.main].find(".e-button")["outer" + d.uDimension](d.buttonSize);
        },
        _calculateLayout: function (d) {
            d.scrollDim = "scroll" + d.dimension;
            d.lPosition = d.position.toLowerCase();
            d.clientXy = "page" + d.xy;
            d.scrollVal = "scroll" + d.position;
            d.scrollOneStepBy = this.model.smallChange;
            d.modelDim = this.model[(d.dimension = d.dimension.toLowerCase())];
            d.handler = d.css + "handle";
            d.buttonSize = this.model.buttonSize;
            d.main = d.css + "scroll";
            d.scroll = d.css + "ScrollSpace";
            d.handleSpace = d.modelDim - 2 * d.buttonSize;
            d.scrollable = (this.model.maximum - this.model.minimum);
            var trackLength = this.model.height;
            if (this.model.orientation === "horizontal")
                trackLength = this.model.width;
            d.handle = (this.model.viewportSize / ((this.model.maximum - this.model.minimum) + this.model.viewportSize)) * (trackLength - 2 * this.model.buttonSize);
            var check;
            !ej.isNullOrUndefined(this.model.elementHeight) && typeof this.model.elementHeight === "string" && this.model.elementHeight.indexOf("%") != -1 ? check = true : check = false;
            if (d.handle < 20 && !check) d.handle = 20;
            d.onePx = d.scrollable / (d.handleSpace - d.handle);
            d.fromScroller = false;
            d.up = true;
            d.vInterval = undefined;
        },
        _updateLayout: function (d) {
            this.element.height(this.model.height);
            this.element.width(this.model.width);
            var handle = this.element.find("." + d.css + "handle");
            var handleSpace = this.element.find("." + d.css + "handlespace");
            var size = d.dimension == "width" ? handle.css('left') : handle.css('top');
            var dimension = d.dimension == "width" ? handleSpace.outerWidth() : handleSpace.outerHeight();
            if (size !== undefined && size !== "auto") {
                if (!(dimension >= d.handle + parseFloat(size)))
                    if (this.model.enableRTL) handle.css(d.dimension === "width" ? 'left' : 'top', (parseFloat(dimension) - d.handle));
                    else handle.css(d.dimension === "width" ? 'left' : 'top', (parseFloat(dimension) - d.handle) > 0 ? (parseFloat(dimension) - d.handle) : 0);
            }
            this.element.find("." + d.css + "scroll").css(d.dimension, d.modelDim + "px")
                .find(".e-button").css(d.dimension, this.model.buttonSize).end()
                .find("." + d.css + "handlespace").css(d.dimension, d.handleSpace + "px")
                .find("." + d.css + "handle").css(d.dimension, d.handle + "px");
        },
        refresh: function () {
            this._ensureScrollers();
            if (this.value()) {
                this.scroll(this.value(), "none");
            }
            if (this._scrollData) {
                this._calculateLayout(this._scrollData);
                this._updateLayout(this._scrollData);
            }
        },

        scroll: function (pixel, source, triggerEvent, e) {
            var dS = this._scrollData;
            if (!triggerEvent) {
                if (this.model.orientation === ej.ScrollBar.Orientation.Horizontal) {
                    if (this._trigger("scroll", { source: source || "custom", scrollData: this._scrollData, scrollLeft: pixel, originalEvent: e }))
                        return;
                }
                else {
                    if (this._trigger("scroll", { source: source || "custom", scrollData: this._scrollData, scrollTop: pixel, originalEvent: e }))
                        return;
                }
            }
            if (this._scrollData) {
                if (this._scrollData.enableRTL && (e == "mousemove" || e == "touchmove") && ej.browserInfo().name != "msie")
                    this.value(-dS.scrollable + pixel);
                else {
                    if (this._scrollData.enableRTL && (e == "mousemove" || e == "touchmove") && ej.browserInfo().name == "msie") this.value(-1 * pixel);
                    else this.value(pixel);
                }
                if (this.content().length > 0) {
                    if (this.model.orientation === ej.ScrollBar.Orientation.Horizontal) {
                        var left = (this.element.find('.e-hhandlespace').width() - this.element.find('.e-hhandle').outerWidth());
                        pixel = left < ((pixel - this.model.minimum) / this._scrollData.onePx) ? left : ((pixel - this.model.minimum) / this._scrollData.onePx);
                        if (this._scrollData.enableRTL && (e == "mousemove" || e == "touchmove") && ej.browserInfo().name != "msie") {
                            pixel = left - pixel;
                            pixel > 0 ? pixel = pixel * -1 : pixel;
                        }
                        if (this._scrollData.enableRTL && (e == "mousemove" || e == "touchmove") && ej.browserInfo().name == "msie") pixel = -pixel;
                        this._scrollData.enableRTL && pixel > 0 && !this._scrollData._scrollleftflag ? pixel = 0 : pixel
                        if (this._scrollData._scrollleftflag) {

                            pixel > 0 ? pixel = pixel * -1 : pixel;
                            this.value(pixel);
                        }
                        this.content()[0].style.left = pixel + "px";
                        this._scrollData._scrollleftflag = false;
                    }
                    else {
                        var top = (this.element.find('.e-vhandlespace').height() - this.element.find('.e-vhandle').outerHeight());
                        pixel = top < ((pixel - this.model.minimum) / this._scrollData.onePx) ? top : ((pixel - this.model.minimum) / this._scrollData.onePx);
                        if (ej.browserInfo().name == "msie" && isNaN(pixel)) pixel = "";
                        this.content()[0].style.top = pixel + "px";
                            }
                        }
                    }
        },

        _changeTop: function (d, step, source) {
            var start, t;
            if (d.dimension === "height")
                start = this.value();
            else
                start = this.value();
            t = start + step;
            d.step = step;
            if ((d.enableRTL && step < 0) || (step > 0 && !d.enableRTL)) {
                if (d.enableRTL) {
                    if (t < this.model.maximum * -1)
                        t = this.model.maximum * -1;
                }
                else {
                    if (t > this.model.maximum)
                        t = this.model.maximum;
                }
            }
            else {
                if (d.enableRTL) {
                    if (t > this.model.minimum)
                        t = this.model.minimum;
                }
                else {
                    if (t < this.model.minimum)
                        t = this.model.minimum;
                }
            }
            if (t !== start || this.model.infiniteScrolling) {
                this["scroll"](t, source);
            }
            return t !== start;
        },

        _mouseUp: function (e) {
            if (!e.data) return;
            var d = e.data.d;
            clearInterval(d.vInterval);
            if (e.type == "touchend") $(e.target).removeClass("e-touch");
            if (e.type === "mouseup" || e.type === "touchend" || (!e.toElement && !e.relatedTarget && !e.target)) {
                this._prevY = this._d = this._data = null;
                this._off($(document), "mousemove touchmove", this._mouseMove);
                $(document).off("mouseup touchend", ej.proxy(this._mouseUp, this));
                d.fromScroller = false;
                this[d.scroll].off("mousemove");
                this[d.handler].off("mousemove").css("transition", "");
                if (e.data.source === "thumb" && !ej.isNullOrUndefined(this.model)) {
                    $.when(this.content()).done(ej.proxy(function () {
                        this._trigger("thumbEnd", { originalEvent: e, scrollData: d });
                    }, this));
                }
            }
            d.up = true;
        },


        _mouseDown: function (down) {
            if (!this._enabled) return;
            this._d = down;
            this._data = this._d.data.d,
                this._data.target = this._d.target;
            this._data.fromScroller = true;
            this[this._data.handler].css("transition", "none");
            this._on($(document), "mousemove touchmove", { d: this._data, source: "thumb" }, this._mouseMove);
            this._trigger("thumbStart", { originalEvent: this._d, scrollData: this._data });
            $(document).one("mouseup touchend", { d: this._data, source: "thumb" }, ej.proxy(this._mouseUp, this));
            if (down.type == "touchstart") $(down.target).addClass("e-touch");
        },
        _mouseCall: function (move) {
            move.type = "mouseup";
            this._mouseUp(move);
        },
        _mouseMove: function (move) {
            var value, step = 0, top = parseInt(this[this._data.handler].css(this._data.lPosition)) || 0;
            move.preventDefault();
            var skip = 1;
            if (ej.isNullOrUndefined(move.target.tagName)) {
                if ($(move.target).is(document)) {
                    this._mouseCall(move);
                    return;
                }
            }
            else if (move.target.tagName.toLowerCase() === "iframe") { this._mouseCall(move); return; }
            var pageXY = move.type == "mousemove" ? move[this._data.clientXy] : move.originalEvent.changedTouches[0][this._data.clientXy];
            if (this._prevY && pageXY !== this._prevY) {
                step = (pageXY - this._prevY);
                if (this.model.infiniteScrolling) {
                    top = top + step;
                    this._data.step = step;
                    if (this._data.enableRTL ? top > 0 : top < 0) top = 0;
                    if ((top * (this._data.enableRTL ? -1 : 1)) + this._data.handle >= this._data.handleSpace)
                        top = (this._data.handleSpace - this._data.handle) * (this._data.enableRTL ? -1 : 1);
                    value = Math.ceil(top * this._data.onePx);
                    this["scroll"](value, "thumb");
                }
                else {
                    value = step * this._data.onePx;
                    this._changeTop(this._data, value, "thumb", this._d);
                }
                this._trigger("thumbMove", { originalEvent: move, direction: (this._data.step > 0) ? +1 : -1, scrollData: this._data });
            }
            if (skip === 1)
                this._prevY = pageXY;
        },

        _spaceMouseDown: function (e) {
            if (!e.data || !this._enabled) return;
            var d = e.data.d;
            var offsetValue = this[d.handler][0].getBoundingClientRect();
            if (e.which !== 1 || e.target === this[d.handler][0]) return;
            var step = e.data.step ? this.model.smallChange : this.model.largeChange, hTop = e.data.top || offsetValue[d.lPosition];
            e[d.clientXy] = e[d.clientXy] || 0;
            if ((e[d.clientXy] - window.pageYOffset) < hTop) step *= -1;
            d.target = e.target;
            this._changeTop(d, step, step === 3 ? "track" : "button", e);
            if (e.data.step !== 1) {
                this[d.scroll].mousemove(function () {
                    d.up = true;
                });
            }
            d.up = false;
            d.vInterval = setInterval(ej.proxy(function () {
                if (step < 0 ? hTop + (step / d.onePx) < e[d.clientXy] : hTop + d.handle + (step / d.onePx) > e[d.clientXy])
                    d.up = true;
                if (d.up) {
                    clearInterval(d.vInterval);
                    return;
                }
                this._changeTop(d, step, step === 3 ? "track" : "button", e);
                e.data ? hTop = e.data.top || offsetValue[d.lPosition] : hTop = offsetValue[d.lPosition];
            }, this), 150);

            $(document).one("mouseup", { d: d }, ej.proxy(this._mouseUp, this));
            $(document).mouseout({ d: d }, ej.proxy(this._mouseUp, this));
        },

        _remove: function () {
            if (this.model.orientation === ej.ScrollBar.Orientation.Horizontal)
                this.element.find(".e-hscroll").remove();
            if (this.model.orientation === ej.ScrollBar.Orientation.Vertical)
                this.element.find(".e-vscroll").remove();
            this._scrollData = null;
            this._content = null;
        },

        _destroy: function () {
            this.element.remove();
        },
    });

    ej.ScrollBar.Orientation = {
        Horizontal: "horizontal",
        Vertical: "vertical"
    };
})(jQuery, Syncfusion, window);;

/**
* @fileOverview Plugin to style the Html Scroller elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/


(function ($, ej, window, undefined) {
    'use strict';

    ej.widget("ejScroller", "ej.Scroller", {
        _addToPersist: ["scrollLeft", "scrollTop"],
        defaults: {

            height: 250,

            autoHide: false,

            animationSpeed: 600,

            width: 0,

            scrollOneStepBy: 57,

            buttonSize: 18,

            scrollLeft: 0,

            scrollTop: 0,

            targetPane: null,

            scrollerSize: 18,

            enablePersistence: false,

            enableRTL: undefined,

            enableTouchScroll: true,

            preventDefault: false,

            enabled: true,

            create: null,

            destroy: null,

            wheelStart: null,

            wheelMove: null,

            wheelStop: null
        },
        validTags: ["div"],
        type: "transclude",

        dataTypes: {
            buttonSize: "number",
            scrollOneStepBy: "number"
        },
        observables: ["scrollTop", "scrollLeft"],
        scrollTop: ej.util.valueFunction("scrollTop"),
        scrollLeft: ej.util.valueFunction("scrollLeft"),

        keyConfigs: {
            up: "38",
            down: "40",
            left: "37",
            right: "39",
            pageUp: "33",
            pageDown: "34",
            pageLeft: "ctrl+37",
            pageRight: "ctrl+39"
        },

        content: function () {
            if (!this._contentOffsetParent && this._content && this._content[0]) this._contentOffsetParent = this._content[0].offsetParent;
            if (!this._content || !this._content.length || !this._contentOffsetParent)
                this._content = this.element.children().first().addClass("e-content");

            return this._content;
        },
        _setFirst: true,
        _updateScroll: false,

        _init: function () {
            if (!ej.isNullOrUndefined(this.content()[0])) {
                this._isJquery3 = (parseInt($.fn.jquery) >= 3) ? true : false;
                this._tempWidth = this.model.width;
                this._prevScrollWidth = this.content()[0].scrollWidth, this._prevScrollHeight = this.content()[0].scrollHeight;
                this.element.addClass("e-widget");
                this.content();
                this._browser = ej.browserInfo().name;
                this._wheelStart = true;
                this._eleHeight = this.model.height;
                this._eleWidth = this.model.width;
                this._isNativeScroll = ej.isDevice();
                this.model.targetPane != null && this.content().find(this.model.targetPane).addClass('e-target-pane');
                if (this.model.enableRTL === undefined) {
                    this.model.enableRTL = this.element.css("direction") === "rtl";
                }
                this.model.autoHide && this._on((this.element), "mousedown", this._mouseDownInitContent);
                this._ensureScrollers();
                if (this.model.enableRTL) {
                    this.element.addClass("e-rtl");
                    this._rtlScrollLeftValue = this.content().scrollLeft();
                }
                this._isNativeScroll && this.element.addClass("e-native-scroll");
                this._on(this.content(), "scroll", this._scroll);
                this.model.targetPane != null && this._on(this.content().find(this.model.targetPane), "scroll", this._scroll);
                if (this.scrollLeft())
                    this._setScrollLeftValue(this.scrollLeft());
                if (this.scrollTop())
                    this.scrollTop(this._isJquery3 ? Math.ceil(this.scrollTop()) : this.scrollTop());
                this.content().scrollTop(this.scrollTop());

                if (this.model.autoHide) {
                    this._autohide();
                }
                if (this.model.enabled) {
                    this.enable();
                }
                else {
                    this.disable();
                }
                this._setDimension();
                if (this._prevScrollWidth !== this.content()[0].scrollWidth || this._prevScrollHeight !== this.content()[0].scrollHeight) this.refresh();
            }
            this._addActionClass();
            this._isNativeScroll && this._on(this.content(), "scrollstop", this._touchDown);
        },
        _mouseDownInitContent: function () {
            this.model.autoHide && this._on($(document), "mouseup", this._mouseUpContent);
            this.element.addClass("e-scroll-focus");
        },
        _addActionClass: function () {
            //e-pinch class enables the touch mode operations in IE browsers
            if (this._browser == "msie") {
                this.content().removeClass('e-pinch e-pan-x e-pan-y');
                if (this._vScrollbar && this._hScrollbar) this.content().addClass('e-pinch');
                else if (this._vScrollbar && !this._hScrollbar) this.content().addClass('e-pan-x');
                else if (this._hScrollbar && !this._vScrollbar) this.content().addClass('e-pan-y');
            }
        },
        _setDimension: function () {
            if (!ej.isNullOrUndefined(this.model.height) && typeof this.model.height === "string" && this.model.height.indexOf("%") != -1) {
                if (!(this._vScroll || this._hScroll)) $(this.content()[0]).height("");
                else this.model.height = this._convertPercentageToPixel(parseInt(this._eleHeight), this.element.parent().height());
            }
            if (!ej.isNullOrUndefined(this.model.width) && typeof this.model.width === "string" && this.model.width.indexOf("%") != -1) {
                if (!(this._hScroll || this._vScroll)) $(this.content()[0]).width("");
                else this.model.width = this._convertPercentageToPixel(parseInt(this._eleWidth), this.element.parent().width());
            }
        },
        _setScrollLeftValue: function (leftValue) {
            if (this.model.enableRTL) {
                if (ej.browserInfo().name == "mozilla")
                    leftValue = leftValue < 0 ? leftValue : (leftValue * -1);
                else if (!ej.isNullOrUndefined(this._rtlScrollLeftValue) && (ej.browserInfo().name == "chrome" || this._rtlScrollLeftValue > 0))
                    leftValue = leftValue < 0 ? (this._rtlScrollLeftValue + leftValue) : (this._rtlScrollLeftValue - leftValue);
                else
                    leftValue = Math.abs(leftValue);
            }
            this.content().scrollLeft(leftValue);
        },


        _ensureScrollers: function () {
            var jqVersion = $.fn.jquery, height, width;
            this.model.height = typeof this.model.height == "string" && this.model.height.indexOf("px") != -1 ? parseInt(this.model.height) : this.model.height;
            this.model.width = typeof this.model.width == "string" && this.model.width.indexOf("px") != -1 ? parseInt(this.model.width) : this.model.width;
            if (this.model.height) {
                this.element.height(this.model.height);
            }
            if (this.model.width) {
                this.element.width(this.model.width);
            }

            this._off(this.content(), "mousedown touchstart");
            if (this.content().length > 0) {
                if (this.isVScroll()) {
                    if (!this._tempVscrollbar) {
                        this._vScrollbar = this._createScrollbar(ej.ScrollBar.Orientation.Vertical, this.isHScroll());
                        this._tempVscrollbar = this._vScrollbar;
                    }
                    if (this.model.enableTouchScroll)
                        this._on(this.content(), "mousedown touchstart", { d: this._vScrollbar._scrollData }, this._mouseDownOnContent);
                } else {
                    this._vScrollbar = null;
                    this._tempVscrollbar = this._vScrollbar;
                    this.element.children(".e-vscrollbar").remove();
                }
                if (this.isHScroll()) {
                    if (!this._tempHscrollbar) {
                        this._hScrollbar = this._createScrollbar(ej.ScrollBar.Orientation.Horizontal, this.isVScroll());
                        this._tempHscrollbar = this._hScrollbar;
                    }
                    if (this.model.enableTouchScroll)
                        this._on(this.content(), "mousedown touchstart", { d: this._hScrollbar._scrollData }, this._mouseDownOnContent);
                } else {
                    this._hScrollbar = null;
                    this._tempHscrollbar = this._hScrollbar;
                    this.element.children(".e-hscrollbar").remove();
                }

                if (!this._vScrollbar && !this._hScrollbar)
                    this.content().css({ width: "auto", height: "auto" });

                if (!(this.element.find(".e-hscroll").length > 0)) {
                    if (this._vScrollbar) {
                        this.content().outerHeight(this.content().outerHeight() - 1);
                    }
                }
                jqVersion === "1.7.1" || jqVersion === "1.7.2" ? (this._contentHeight = "height", this._contentWidth = "width") : (this._contentHeight = "outerHeight", this._contentWidth = "outerWidth");
                this._hScroll = this.isHScroll(), this._vScroll = this.isVScroll();
                if (this._hScroll || this._vScroll) {
                    this.content().addClass("e-content");
                    var rect = this._exactElementDimension(this.element);
                    this._elementDimension(rect);
                    if (this.model.targetPane !== null && this.content().find(this.model.targetPane)[0] !== undefined) this.content().find(this.model.targetPane)[0].scrollLeft = this.scrollLeft();
                    else if (!this.isHScroll() && (this.element.children(".e-hscrollbar").length > 0)) this._ensureScrollers();
                    if ((isNaN(this._eleWidth) && (this._eleWidth.indexOf("%") > 0)) && (isNaN(this._eleHeight) && (this._eleHeight.indexOf("%") > 0))) $(window).on('resize', $.proxy(this._resetScroller, this));
                } else
                    this.content().removeClass("e-content");
                this._setDimension();
                this._parentHeight = $(this.element).parent().height(); this._parentWidth = $(this.element).parent().width();
            }
        },
        _elementDimension: function (rect) {
            this._ElementHeight = rect.height - (this["border_bottom"] + this["border_top"] + this["padding_bottom"] + this["padding_top"]);
            this.content()[this._contentHeight](this._ElementHeight - ((this._hScroll && !this.model.autoHide) ? this.model.scrollerSize :
                this.element.find(".e-hscrollbar").is(':visible') ? this.model.scrollerSize : 0));
            this._ElementWidth = rect.width - (this["border_left"] + this["border_right"] + this["padding_left"] + this["padding_right"]);
            this.content()[this._contentWidth](this._ElementWidth - ((this._vScroll && !this.model.autoHide) ? this.model.scrollerSize :
                this.element.find(".e-vscrollbar").is(':visible') ? this.model.scrollerSize : 0));
        },
        _convertPercentageToPixel: function (ele, outer) {
            return Math.floor((ele * outer) / 100);
        },

        isHScroll: function () {
            var updatedWidth = (parseFloat($.fn.jquery) >= 3) ? Math.ceil(this.element.width()) : this.element.width();
            var modelWidth = this.model.width;
            if (!ej.isNullOrUndefined(this.model.width)) {
                if (typeof this.model.width === "string" && this.model.width.indexOf("%") != -1) {
                    modelWidth = updatedWidth;
                } else {
                    modelWidth = (parseFloat($.fn.jquery) >= 3 && !isNaN(parseFloat(this.model.width))) ? Math.ceil(parseFloat(this.model.width)) : this.model.width;
                }
            }
            if (!ej.isNullOrUndefined(this._tempWidth) && typeof this._tempWidth === "string" && this._tempWidth.indexOf("%") != -1) {
                if (!ej.isNullOrUndefined(this.model.width) && typeof this.model.width === "string" && this.model.width.indexOf("%") != -1)
                    return this.content()[0].scrollWidth > updatedWidth;
                else if (this.content()[0].scrollWidth > updatedWidth) return true;
            }
            else {
                if (modelWidth > 0) {
                    var $paneObject = this.content().find(this.model.targetPane);
                    if (this.model.targetPane != null && $paneObject.length)
                        return ($paneObject[0].scrollWidth + $paneObject.siblings().width()) > modelWidth;
                    else {
                        if (this.content()[0].scrollWidth > modelWidth) return true;
                        else if (this.content()[0].scrollWidth == modelWidth)
                            if (this.model.autoHide && $(this.content()[0]).find('> *').length > 0) return $(this.content()[0]).find('> *')[0].scrollWidth > $(this.content()[0]).width();
                            else if ($(this.content()[0]).find('> *').length > 0) return $(this.content()[0]).find('> *')[0].scrollWidth > (!ej.isNullOrUndefined(this._tempVscrollbar) ? modelWidth - this.model.scrollerSize : modelWidth);
                        return false;
                    }
                    return false;
                }
                return false;
            }
        },

        isVScroll: function () {
            //To avoid unnecessarilly render the vertical scrollbar for 1 or 2 px difference range.
            var border = 2;
            if (!ej.isNullOrUndefined(this.model.height) && typeof this.model.height === "string" && this.model.height.indexOf("%") != -1)
                return this.content()[0].scrollHeight > this.element.outerHeight(); //this._convertPercentageToPixel(parseInt(this._eleHeight), this.element.parent().height());        
            else if (this.model.height > 0) {
                if ((this.content()[0].scrollHeight > Math.ceil(this.model.height))) return true;
                else if (this.isHScroll()) if ((this.content()[0].scrollHeight == this.model.height || (this.content()[0].scrollHeight > this.model.height - (this.model.scrollerSize - border)))) return true;
            }
            return false;
        },
        _setModel: function (option) {
            for (var prop in option) {
                switch (prop) {
                    case "enableRTL":
                        if (option[prop]) {
                            this.element.addClass("e-rtl");
                            this._rtlScrollLeftValue = this.content().scrollLeft();
                            if (!ej.isNullOrUndefined(this._hScrollbar)) this._hScrollbar._scrollData.enableRTL = true;

                        } else {
                            this.element.removeClass("e-rtl");
                            if (!ej.isNullOrUndefined(this._hScrollbar)) this._hScrollbar._scrollData.enableRTL = false;
                        }
                        if (this._hScrollbar) {
                            this.element.find(".e-hhandle").css("left", 0);
                            this._hScrollbar.value(0);
                        }
                        break;
                    case "preventDefault": this.model.preventDefault = option[prop];
                        break;
                    case "scrollLeft":
                        if (parseFloat(ej.util.getVal(option[prop])) < 0 || !this._hScroll) option[prop] = 0;
                        if (this._hScrollbar) option[prop] = parseFloat(ej.util.getVal(option[prop])) > this._hScrollbar._scrollData.scrollable ? this._hScrollbar._scrollData.scrollable : parseFloat(ej.util.getVal(option[prop]));
                        this._setScrollLeftValue(parseFloat(option[prop]));
                        this["scrollLeft"](option[prop]);
                        if (this._hScrollbar && !(this._hScrollbar._scrollData._scrollleftflag && this.model.enableRTL))
                            this.scrollX(option[prop], true);
                        break;
                    case "scrollTop":
                        if (this._vScrollbar) option[prop] = parseFloat(ej.util.getVal(option[prop])) > this._vScrollbar._scrollData.scrollable ? this._vScrollbar._scrollData.scrollable : parseFloat(ej.util.getVal(option[prop]));
                        if (parseFloat(option[prop]) < 0 || !this._vScroll) option[prop] = 0;
                        this.content().scrollTop(parseFloat(option[prop]));
                        this["scrollTop"](option[prop]);
                        this.scrollY(option[prop], true);
                        break;
                    case "touchScroll":
                        if (!this.model.enableTouchScroll)
                            this._off(this.content(), "mousedown touchstart");
                        else {
                            if (this._vScrollbar)
                                this._on(this.content(), "mousedown touchstart", { d: this._vScrollbar._scrollData }, this._mouseDownOnContent);
                            if (this._hScrollbar)
                                this._on(this.content(), "mousedown touchstart", { d: this._hScrollbar._scrollData }, this._mouseDownOnContent);
                        }
                        break;
                    case "scrollOneStepBy":
                        if (this._vScrollbar) {
                            this._vScrollbar._scrollData.scrollOneStepBy = option[prop];
                            this._vScrollbar.model.smallChange = option[prop];
                        }
                        if (this._hScrollbar) {
                            this._hScrollbar._scrollData.scrollOneStepBy = option[prop];
                            this._hScrollbar.model.smallChange = option[prop];
                        }
                        break;
                    case "buttonSize":
                        if (this._vScrollbar) this._vScrollbar.model.buttonSize = this.model.buttonSize;
                        if (this._hScrollbar) this._hScrollbar.model.buttonSize = this.model.buttonSize;
                        this.refresh();
                        break;
                    case "height": this._eleHeight = option[prop];
                        this.refresh();
                        break;
                    case "width": this._eleWidth = option[prop];
                        this.refresh();
                        break;
                    case "enabled":
                        if (!option[prop]) this.disable();
                        else this.enable();
                        break;
                    default:
                        this.refresh();
                }
            }
        },

        _createScrollbar: function (orientation, isOtherScroll) {
            var proxy = this;
            var id, viewportSize, width, height, maximum, value;
            var div = document.createElement("div");
            if (orientation === ej.ScrollBar.Orientation.Vertical) {
                width = this.model.scrollerSize;
                if (!ej.isNullOrUndefined(this.model.height) && typeof this.model.height === "string" && this.model.height.indexOf("%") != -1)
                    height = viewportSize = this.element.height() - (isOtherScroll ? this.model.scrollerSize : 0);
                else
                    height = viewportSize = this.model.height - (isOtherScroll ? this.model.scrollerSize : 0);
                maximum = this.content()[0]["scrollHeight"];
                value = this.scrollTop();
            }
            else {
                width = viewportSize = this.model.width - (isOtherScroll ? this.model.scrollerSize : 0);
                height = this.model.scrollerSize;
                if (!ej.isNullOrUndefined(this.model.width) && typeof this.model.width === "string" && this.model.width.indexOf("%") != -1) {
                    width = viewportSize = this.element.width() - (isOtherScroll ? this.model.scrollerSize : 0);
                    maximum = this.content()[0]["scrollWidth"];
                }
                else {
                    var $pane = this.content().find(this.model.targetPane);
                    if (this.model.targetPane != null && $pane.length)
                        maximum = $pane[0]["scrollWidth"] + $pane.parent().width() - $pane.width();
                    else
                        maximum = this.content()[0]["scrollWidth"];
                }
                value = this.scrollLeft();
            }
            if (this.element.children(".e-hscrollbar").length > 0)
                $(this.element.children(".e-hscrollbar")).before(div);
            else
                this.element.append(div);
            $(div).ejScrollBar({
                elementHeight: proxy._eleHeight,
                elementWidth: proxy._eleWidth,
                buttonSize: proxy.model.buttonSize,
                orientation: orientation,
                viewportSize: viewportSize,
                height: height,
                width: width,
                maximum: maximum - viewportSize,
                value: value,
                smallChange: this.model.scrollOneStepBy,
                largeChange: 3 * this.model.scrollOneStepBy,
                scroll: ej.proxy(this._scrollChanged, this),
                thumbEnd: ej.proxy(this._thumbEnd, this),
                thumbStart: ej.proxy(this._thumbStart, this),
                thumbMove: ej.proxy(this._thumbMove, this),
            });
            var scrollbar = $(div).ejScrollBar("instance");
            (orientation === ej.ScrollBar.Orientation.Vertical || !isOtherScroll) && this._off(this.element, this._browser == "msie" ? "wheel mousewheel" : "mousewheel DOMMouseScroll", this._mouseWheel)
                ._on(this.element, this._browser == "msie" ? "wheel mousewheel" : "mousewheel DOMMouseScroll", { d: scrollbar._scrollData }, this._mouseWheel);
            if (orientation === ej.ScrollBar.Orientation.Horizontal) {
                this._scrollXdata = scrollbar._scrollData;
            }
            else
                this._scrollYdata = scrollbar._scrollData;
            if (orientation === ej.ScrollBar.Orientation.Horizontal && this.model.enableRTL) {
                scrollbar._scrollData.enableRTL = true;
            }
            scrollbar._enabled = this.model.enabled;
            return scrollbar;
        },

        _updateScrollbar: function (orientation, isOtherScroll) {
            var scrollbar = orientation === ej.ScrollBar.Orientation.Vertical ? this._vScrollbar : this._hScrollbar;
            if (scrollbar) {
                if (orientation === ej.ScrollBar.Orientation.Vertical) {
                    scrollbar.model.width = this.model.scrollerSize;
                    scrollbar.model.height = scrollbar.model.viewportSize = this.model.height - (isOtherScroll ? this.model.scrollerSize : 0);
                    scrollbar.model.maximum = this.content()[0]["scrollHeight"] - scrollbar.model.viewportSize;
                    scrollbar.model.value = this.scrollTop();
                }
                else {
                    scrollbar.model.width = scrollbar.model.viewportSize = this.model.width - (isOtherScroll ? this.model.scrollerSize : 0);
                    scrollbar.model.height = this.model.scrollerSize;
                    scrollbar.model.maximum = ((this.model.targetPane != null && this.content().find(this.model.targetPane).length > 0) ? this.content().find(this.model.targetPane)[0]["scrollWidth"] + (this.content().width() - this.content().find($(this.model.targetPane)).outerWidth()) : this.content()[0]["scrollWidth"]) - scrollbar.model.viewportSize;
                    if (!this.model.enableRTL)
                        scrollbar.model.value = this.scrollLeft();
                }
            }
        },

        _autohide: function () {
            if (this.model.autoHide) {
                this.element.addClass("e-autohide");
                this._on(this.element, "mouseenter mouseleave touchstart touchend", this._scrollerHover);
                if (!$(':hover').filter(this.element[0]).length) this.content().siblings(".e-scrollbar.e-js").hide();
                this._elementDimension(this._exactElementDimension(this.element));
            }
            else {
                this.element.removeClass("e-autohide");
                this._off(this.element, "mouseenter mouseleave touchstart touchend", this._scrollerHover);
                this.content().siblings(".e-scrollbar.e-js").show();
            }
        },

        _mouseUpContent: function (e) {
            if (e.type == "mouseup") {
                this.element.removeClass("e-scroll-focus");
                this._autohide();
                this._off($(document), "mouseup", this._mouseUpContent);
            }
        },
        _scrollChanged: function (e) {
            this._updateScroll = true;
            if (e.scrollTop !== undefined)
                this.scrollY(e.scrollTop, true, "", e.source);
            else if (e.scrollLeft !== undefined)
                this.scrollX(e.scrollLeft, true, "", e.source);
            this._updateScroll = false;
            var proxy = this;
            $.when(this.content()).done(ej.proxy(function () {
                proxy._trigger("scrollEnd", { scrollData: e });
            }));
        },
        _bindBlurEvent: function (scrollObj, e) {
            this._scrollEle = $(scrollObj).data('ejScrollBar');
            this._event = e; var proxy = this;
            this._listener = function (e) {
                this._scrollEle._off($(document), "mousemove touchmove", this._scrollEle._mouseMove);
                $(document).off("mouseup touchend", ej.proxy(this._scrollEle._mouseUp, this._scrollEle));
                this._scrollEle._prevY = null;
                this._off($(document), "mousemove touchmove", this._mouseMove);
                this._off($(document), "mouseup touchend", this._mouseUp);
                this._off($(window), "blur");
                if (this._evtData.handler === "e-vhandle") this._scrollEle._trigger("thumbEnd", { originalEvent: this._event, scrollData: this._evtData });
                else this._scrollEle._trigger("thumbEnd", { originalEvent: this._event, scrollData: this._evtData });
            };
            this._on($(window), "blur", this._listener);
        },
        _thumbStart: function (e) {
            this._evtData = e.scrollData;
            var scrollObj = e.scrollData.handler === "e-vhandle" ? this.element.find('.' + e.scrollData.handler).closest('.e-scrollbar') : this.element.find('.' + e.scrollData.handler).closest('.e-scrollbar'); var scrollObj = e.scrollData.handler === "e-vhandle" ? this.element.find('.' + e.scrollData.handler).closest('.e-scrollbar') : this.element.find('.' + e.scrollData.handler).closest('.e-scrollbar');
            this._bindBlurEvent(scrollObj, e);
            this._trigger("thumbStart", e);
        },
        _thumbMove: function (e) {
            this._trigger("thumbMove", e);
        },
        _thumbEnd: function (e) {
            this._trigger("thumbEnd", e);
            this._off($(window), "blur");
        },

        refresh: function (needRefresh) {
            if (!needRefresh) {
                this.element.find(">.e-content").removeAttr("style");
            }
            else {
                this._tempVscrollbar = null;
                this.element.children(".e-vscrollbar").remove();
                this._tempHscrollbar = null;
                this.element.children(".e-hscrollbar").remove();
            }

            if (!ej.isNullOrUndefined(this._eleHeight) && typeof this._eleHeight === "string" && this._eleHeight.indexOf("%") != -1 && this._parentHeight != $(this.element).parent().height()) {
                var element = this._exactElementDimension(this.element.parent());
                element = element.height - (this["border_bottom"] + this["border_top"] + this["padding_bottom"] + this["padding_top"]);
                this.model.height = this._convertPercentageToPixel(parseInt(this._eleHeight), element);
            }
            if (!ej.isNullOrUndefined(this._eleWidth) && typeof this._eleWidth === "string" && this._eleWidth.indexOf("%") != -1 && this._parentWidth != $(this.element).parent().width()) {
                var element = this._exactElementDimension(this.element.parent());
                element = element.width - (this["border_left"] + this["border_right"] + this["padding_left"] + this["padding_right"]);
                this.model.width = this._convertPercentageToPixel(parseInt(this._eleWidth), element);
            }

            this._ensureScrollers();
            var scrollLeftValue = this.model.scrollLeft;
            if (this.model.enableRTL) {
                !this.element.hasClass("e-rtl") && this.element.addClass("e-rtl");
                this._rtlScrollLeftValue = this.content().scrollLeft();
                scrollLeftValue > 0 ? this.content().scrollLeft(this._rtlScrollLeftValue - scrollLeftValue) : this._setScrollLeftValue(scrollLeftValue);
            }
            else
                this.content().scrollLeft(scrollLeftValue);
            if ((this.scrollTop() && ej.isNullOrUndefined(this._vScrollbar)) || (!ej.isNullOrUndefined(this._vScrollbar) && (this._vScrollbar && this._vScrollbar._scrollData != null) && !this._vScrollbar._scrollData.skipChange))
                this.scrollTop(this._isJquery3 ? Math.ceil(this.scrollTop()) : this.scrollTop());
            this.content().scrollTop(this.scrollTop());

            if (this._vScrollbar) {
                this._vScrollbar._scrollData.dimension = "Height";
                this._updateScrollbar(ej.ScrollBar.Orientation.Vertical, this._hScroll);
                this._vScroll && !this._vScrollbar._calculateLayout(this._vScrollbar._scrollData) && this._vScrollbar._updateLayout(this._vScrollbar._scrollData);
            }
            if (this._hScrollbar) {
                this._hScrollbar._scrollData.dimension = "Width";
                this._updateScrollbar(ej.ScrollBar.Orientation.Horizontal, this._vScroll);
                this._hScroll && !this._hScrollbar._calculateLayout(this._hScrollbar._scrollData) && this._hScrollbar._updateLayout(this._hScrollbar._scrollData);
            }
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version == "8.0")
                this.element.find(".e-hhandle").css("left", "0px");
            else
                this.model.targetPane != null && this._on(this.content().find(this.model.targetPane), "scroll", this._scroll);
            this._addActionClass();
            this._autohide();
        },
        _exactElementDimension: function (element) {
            var rect = element.get(0).getBoundingClientRect(), direction = ["left", "right", "top", "bottom"], width, height;
            rect.width ? width = rect.width : width = rect.right - rect.left;
            rect.height ? height = rect.height : height = rect.bottom - rect.top;
            for (var i = 0; i < direction.length; i++) {
                this["border_" + direction[i]] = isNaN(parseFloat(element.css("border-" + direction[i] + "-width"))) ? 0 : parseFloat(element.css("border-" + direction[i] + "-width"));
                this["padding_" + direction[i]] = isNaN(parseFloat(element.css("padding-" + direction[i]))) ? 0 : parseFloat(element.css("padding-" + direction[i]));
            }
            return rect = { width: width, height: height };
        },
        _keyPressed: function (action, target) {
            if (!this.model.enabled) return;
            if (["input", "select", "textarea"].indexOf(target.tagName.toLowerCase()) !== -1)
                return true;

            var d, iChar;

            if (["up", "down", "pageUp", "pageDown"].indexOf(action) !== -1) {
                if (this._vScrollbar) {
                    if (ej.browserInfo().name == "msie" && this.model.allowVirtualScrolling)
                        this._content.focus();
                    d = this._vScrollbar._scrollData;
                }
                iChar = "o";
            } else if (["left", "right", "pageLeft", "pageRight"].indexOf(action) !== -1) {
                if (this._hScrollbar)
                    d = this._hScrollbar._scrollData;
                iChar = "i";
            } else return true;
            if (!d) return true;

            return !this._changeTop(d, (action.indexOf(iChar) < 0 ? -1 : 1) * (action[0] !== "p" ? 1 : 3) * d.scrollOneStepBy, "key");
        },

        scrollY: function (pixel, disableAnimation, animationSpeed, source, e) {
            var proxy = this;
            if (pixel === "") return;
            if (disableAnimation) {
                var e = { source: source || "custom", scrollData: this._vScrollbar ? this._vScrollbar._scrollData : null, scrollTop: pixel, originalEvent: e };
                pixel = (!this._isJquery3) ? e.scrollTop : Math.ceil(e.scrollTop);
                this.scrollTop(pixel);
                if (this._trigger("scroll", e)) return;
                this.content().scrollTop(pixel);
                return;
            }
            if (ej.isNullOrUndefined(animationSpeed) || animationSpeed === "") animationSpeed = 100;
            if (this._vScrollbar) pixel = parseFloat(pixel) > this._vScrollbar._scrollData.scrollable ? this._vScrollbar._scrollData.scrollable : parseFloat(pixel)
            pixel = (!this._isJquery3) ? pixel : Math.ceil(pixel);
            this.scrollTop(pixel);
            this.content().stop().animate({
                scrollTop: pixel
            }, animationSpeed, 'linear', function () {
                if (proxy._trigger("scroll", { source: source || "custom", scrollData: proxy._vScrollbar ? proxy._vScrollbar._scrollData : null, scrollTop: pixel, originalEvent: e })) return;
            })
        },

        scrollX: function (pixel, disableAnimation, animationSpeed, source, e) {
            var proxy = this;
            if (pixel === "") return;
            if (this._hScrollbar) pixel = parseFloat(pixel) > this._hScrollbar._scrollData.scrollable ? this._hScrollbar._scrollData.scrollable : parseFloat(pixel);
            var browserName = ej.browserInfo().name;
            if (this.model.enableRTL && browserName != "mozilla") {
                if (pixel < 0) pixel = Math.abs(pixel);
                var content = this.model.targetPane != null ? this.content().find(this.model.targetPane)[0] : this.content()[0];
                if (e != "mousemove" && e != "touchmove" && (browserName != "msie")) if (browserName != "msie") pixel = this._hScrollbar._scrollData.scrollable - pixel;
            }
            this.scrollLeft(pixel);
            if (disableAnimation) {
                if (this._trigger("scroll", { source: source || "custom", scrollData: this._hScrollbar ? this._hScrollbar._scrollData : null, scrollLeft: pixel, originalEvent: e }))
                    return;
                if (this.model.targetPane != null && this.content().find(this.model.targetPane).length)
                    this.content().find(this.model.targetPane).scrollLeft(pixel);
                else
                    this.content().scrollLeft(pixel);
                return;
            }
            if (ej.isNullOrUndefined(animationSpeed) || animationSpeed === "") animationSpeed = 100;
            if (this.model.targetPane != null && this.content().find(this.model.targetPane).length)
                this.content().find(this.model.targetPane).stop().animate({
                    scrollLeft: pixel
                }, animationSpeed, 'linear');
            else this.content().stop().animate({
                scrollLeft: pixel
            }, animationSpeed, 'linear', function () {
                if (proxy._trigger("scroll", { source: source || "custom", scrollData: proxy._hScrollbar ? proxy._hScrollbar._scrollData : null, scrollLeft: pixel, originalEvent: e })) return;
            });
        },

        enable: function () {
            var scroller = this.element.find(".e-vscrollbar,.e-hscrollbar,.e-vscroll,.e-hscroll,.e-vhandle,.e-hhandle,.e-vscroll .e-icon,.e-hscroll .e-icon");
            if (scroller.hasClass("e-disable")) {
                scroller.removeClass("e-disable").attr({ "aria-disabled": false });
                this.model.enabled = true;
            }
            if (this._vScrollbar)
                this._vScrollbar._enabled = this.model.enabled;
            if (this._hScrollbar)
                this._hScrollbar._enabled = this.model.enabled;
        },

        disable: function () {
            var scroller = this.element.find(".e-vscrollbar,.e-hscrollbar,.e-vscroll,.e-hscroll,.e-vhandle,.e-hhandle,.e-vscroll .e-icon,.e-hscroll .e-icon");
            scroller.addClass("e-disable").attr({ "aria-disabled": true });
            this.model.enabled = false;
            if (this._vScrollbar)
                this._vScrollbar._enabled = this.model.enabled;
            if (this._hScrollbar)
                this._hScrollbar._enabled = this.model.enabled;
        },

        _changeTop: function (d, step, source, e) {
            var start = Math.ceil(this.model.targetPane != null && d.dimension != "height" ? this.content().find(this.model.targetPane)[d.scrollVal]() : this.content()[d.scrollVal]()), t;

            if (d.dimension == "height" && start == 0)
                start = this.scrollTop() != 0 ? this.scrollTop() : 0;
            t = start + step;
            if (!d.enableRTL ? t > d.scrollable : t < d.scrollable) t = Math.round(d.scrollable);
            if (!d.enableRTL ? t < 0 : t > 0) t = 0;

            if (t !== start) {
                this["scroll" + d.xy](t, true, "", source, e);
                if (d.xy === "X" && !ej.isNullOrUndefined(this._hScrollbar))
                    this._hScrollbar["scroll"](t, source, true, e);
                else if (!ej.isNullOrUndefined(this._vScrollbar))
                    this._vScrollbar["scroll"](t, source, true, e);
            }

            return t !== start;
        },

        _mouseWheel: function (e) {
            if (this._vScrollbar && e.ctrlKey)
                return;
            if (!this._vScrollbar && !e.shiftKey)
                return;
            if (!e.data || !this.model.enabled) return;
            var delta = 0, data = e.data.d, ori = e, direction;
            e = e.originalEvent;
            this._wheelStart && this._trigger("wheelStart", { originalEvent: e, scrollData: ori.data.d });
            this._wheelStart = false;
            clearTimeout($.data(this, 'timer'));
            if (this._wheelx != 1 && (e.wheelDeltaX == 0 || e.wheelDeltaY == 0))
                this._wheelx = 1;
            if (navigator.platform.indexOf("Mac") == 0 && (this._wheelx == 0)) {
                if (this._browser == "webkit" || this._browser == "chrome")
                    return true;
            }
            if (this._browser == "mozilla")
                e.axis == e.HORIZONTAL_AXIS ? data = this._scrollXdata : this._scrollYdata;
            else if (this._browser == "msie") {
                if ((e.type == "wheel")) delta = e.deltaX / 120;
                if ((e.type == "mousewheel" && e.shiftKey)) {
                    data = this._scrollXdata;
                    e.preventDefault ? e.preventDefault() : (e.returnValue = false);
                }
            }
            else if (this._wheelx && e.wheelDeltaX != 0 && e.wheelDeltaY == 0 && this._scrollXdata)
                data = this._scrollXdata;
            if (e.wheelDeltaX == 0) this._wheelx = e.wheelDeltaX;
            if (e.wheelDelta) {
                delta = this._normalizingDelta(e);
                if (window.opera) {
                    if (parseFloat(window.opera.version, 10) < 10)
                        delta = -delta;
                }
            } else if (e.detail) delta = e.detail / 3;
            if (!delta) return;
            if ((ori.originalEvent))
                if (ori.originalEvent.wheelDelta && ori.originalEvent.wheelDelta > 0 || ori.originalEvent.detail && ori.originalEvent.detail < 0) direction = -1;
                else direction = 1;
            if (this._changeTop(data, delta * data.scrollOneStepBy, "wheel", e)) {
                e.preventDefault ? e.preventDefault() : ori.preventDefault();
                this._trigger("wheelMove", { originalEvent: e, scrollData: ori.data.d, direction: direction });
            }
            else {
                this._trigger("scrollEnd", { originalEvent: e, scrollData: ori });
                this._wheelx = 0;
            }
            var proxy = this;
            $.data(this, 'timer', setTimeout(function () {
                proxy._wheelStart = true;
                proxy._trigger("wheelStop", { originalEvent: e, scrollData: ori.data.d, direction: direction });
            }, 250));
        },

        _normalizingDelta: function (e) {
            var delta = navigator.platform.indexOf("Mac") == 0 ? -e.wheelDelta / 3 : -e.wheelDelta / 120;
            return delta;
        },

        _contentHeightWidth: function () {
            if (this.content().siblings().css("display") == "block" && this.model.autoHide) {
                this._hScroll && this.content()[this._contentHeight](this._ElementHeight - (this.model.scrollerSize));
                this._vScroll && this.content()[this._contentWidth](this._ElementWidth - (this.model.scrollerSize));
            }
            else if (this.content().siblings().css("display") == "none" && this.model.autoHide && (this._vScroll || this._hScroll)) {
                this.content()[this._contentHeight](this._ElementHeight);
                this.content()[this._contentWidth](this._ElementWidth);
            }
        },
        _scrollerHover: function (e) {
            if (this.model.enabled) {
                if ((e.type == "mouseenter" || e.type == "touchstart") && !this.content().siblings().is(":visible")) {
                    this.content().siblings().css("display", "block");
                    this._contentHeightWidth();
                    this._ensureScrollers();
                    this._setScrollLeftValue(this.model.scrollLeft);
                    this._trigger("scrollVisible", { originalEvent: e });
                }
                else if ((e.type == "mouseleave" || e.type == "touchend") && !this.element.hasClass("e-scroll-focus")) {
                    this.content().siblings().hide();
                    this._contentHeightWidth();
                    this._trigger("scrollHide", { originalEvent: e });
                }
            }
        },

        _mouseUp: function (e) {
            if (!e.data) return;
            var d = e.data.d;
            if (this.model.enableRTL && (e.type == "mouseup" || e.type == "touchend")) {
                this.model.scrollLeft = this._rtlScrollLeftValue - this.model.scrollLeft;
            }
            if (e.type === "mouseup" || e.type === "touchend" || (!e.toElement && !e.relatedTarget)) {
                this.content().css("cursor", "default");
                this._off($(document), "mousemove touchmove");
                this._off(this.content(), "touchmove", this._touchMove);
                this._off($(document), "mouseup touchend", this._mouseUp);
                d.fromScroller = false;
                if (this._mouseMoved === true && e.data.source === "thumb" && !ej.isNullOrUndefined(this.model)) {
                    $.when(this.content()).done(ej.proxy(function () {
                        this._trigger("thumbEnd", { originalEvent: e, scrollData: d });
                    }, this));
                    this._off($(window), "blur");
                }
            }
            d.up = true;
            this._mouseMoved = false;
            window.ontouchmove = null;
        },

        _mouseDownOnContent: function (down) {
            this._startX = (down.clientX != undefined) ? down.clientX : down.originalEvent.changedTouches[0].clientX;
            this._startY = (down.clientY != undefined) ? down.clientY : down.originalEvent.changedTouches[0].clientY;
            this._timeStart = down.timeStamp || Date.now();
            if (!this.model.enabled) return;
            var d = down.data.d;
            this._evtData = down.data;
            var scrollObj = d.handler === "e-vhandle" ? this.element.find('.' + d.handler).closest('.e-scrollbar') : this.element.find('.' + d.handler).closest('.e-scrollbar');
            this._bindBlurEvent(scrollObj, down);
            if (this._trigger("thumbStart", { originalEvent: down, scrollData: d }))
                return;
            if (down.which == 3 && down.button == 2) return;
            d.fromScroller = true;
            var prevY = null, skip = 1, min = 5, direction;
            this._document = $(document); this._window = $(window);
            this._mouseMove = function (move) {
                if (this.model.enableRTL) {
                    this._UpdateScrollLeftValue(down);
                }
                if (this._startX + this._startY != move.clientX + move.clientY) {
                    this._relDisX = ((move.clientX != undefined) ? this._startx = move.clientX : this._startx = move.originalEvent.changedTouches[0].clientX) - this._startX;
                    this._relDisY = ((move.clientY != undefined) ? this._starty = move.clientY : this._starty = move.originalEvent.changedTouches[0].clientY) - this._startY;
                    this._duration = (move.timeStamp || Date.now()) - this._timeStart;
                    this._velocityY = Math.abs(this._relDisY) / this._duration;
                    this._velocityX = Math.abs(this._relDisX) / this._duration;
                    if (Math.abs(this._relDisX) > Math.abs(this._relDisY))
                        this._swipe = (this._relDisX > 0) ? "left" : "right";
                    else
                        this._swipe = (this._relDisY > 0) ? "up" : "down";
                    if (!ej.isNullOrUndefined(move.target.tagName) && move.target.tagName.toLowerCase() === "iframe") {
                        move.type = "mouseup";
                        this._mouseUp(move);
                        return;
                    }
                    var pageXY = move.type == "mousemove" ? move[d.clientXy] : move.originalEvent.changedTouches[0][d.clientXy];
                    if (prevY && pageXY !== prevY) {
                        this._mouseMoved = true;
                        var diff = pageXY - prevY, sTop = this.model[d.scrollVal] - (diff);

                        if (skip == 1 && Math.abs(diff) > min) {
                            direction = d.position;
                            skip = 0;
                        }
                        if (skip == 0) prevY = pageXY;

                        if (sTop >= 0 && sTop <= d.scrollable && direction === d.position) {
                            var top = this._velocityY > 0.5 && this._duration < 50 && d.position == "Top";
                            var left = this._velocityX > 0.5 && this._duration < 50 && d.position == "Left";
                            var swipeXY = ((this._velocityY > 0.5) || (this._velocityX > 0.5)) && this._duration < 50;
                            if (swipeXY) {
                                if (top) {
                                    sTop = Math.abs(this._relDisY) + (this._duration * this._velocityY);
                                    if (this._startY > this._starty) {
                                        sTop += this.scrollTop();
                                        if (sTop > d.scrollable) sTop = d.scrollable;
                                    }
                                    else {
                                        if (sTop < this.scrollTop()) sTop = Math.abs(sTop - this.scrollTop());
                                        if (sTop > this.scrollTop())
                                            sTop = 0;
                                    }
                                    if (this.scrollTop() <= d.scrollable) this["scrollY"](sTop, false, this.model.animationSpeed, "thumb");
                                }
                                else if (left) {
                                    sTop = Math.abs(this._relDisX);
                                    if (this._startX > this._startx) {
                                        sTop += this.scrollLeft();
                                        if (sTop > d.scrollable) sTop = d.scrollable;
                                    }
                                    else {
                                        sTop -= this.scrollLeft();
                                        sTop = Math.abs(sTop);
                                        if (sTop > d.scrollable || sTop >= this.scrollLeft()) sTop = 0;
                                    }
                                    if (this.scrollLeft() <= d.scrollable) this["scrollX"](sTop, false, this.model.animationSpeed, "thumb");
                                }
                            }
                            else {
                                this["scroll" + d.xy](sTop, true, "", "thumb", move.type);
                                if (d.xy === "X")
                                    this._hScrollbar["scroll"](sTop, "thumb", true, move.type);
                                else if (!ej.isNullOrUndefined(this._vScrollbar))
                                    this._vScrollbar["scroll"](sTop, "thumb", true, move.type);
                                this.content().css("cursor", "pointer");
                                this._trigger("thumbMove", { originalEvent: move, direction: (this._swipe == "down" || this._swipe == "right") ? 1 : -1, scrollData: d });
                            }
                        }
                    }
                    window.ontouchmove = function (e) {
                        e = e || window.event;
                        if (e.preventDefault) e.preventDefault();

                        e.returnValue = false;
                    }
                    if (prevY == null) prevY = pageXY;
                    if (((Math.round(this._content["scrollTop"]()) == 0) && this._swipe == "down" || ((Math.ceil(this._content["scrollTop"]()) == d.scrollable || Math.ceil(this._content["scrollTop"]()) + 1 == d.scrollable) && this._swipe == "up"))) {
                        this._trigger("scrollEnd", { originalEvent: move.originalEvent, scrollData: move });
                        window.ontouchmove = null;
                    }
                }
            }
            this._trigger("touchStart", { originalEvent: down, direction: (this._swipe == "down" || this._swipe == "right") ? 1 : -1, scrollData: this._scrollData, scrollTop: this.content().scrollTop(), scrollLeft: this.content().scrollLeft() });
            this._on($(document), "mousemove", { d: d, source: "thumb" }, this._mouseMove);
            if (!this._isNativeScroll) this._on($(document), "touchmove", { d: d, source: "thumb" }, this._mouseMove);
            else {
                this._on(this.content(), "touchmove", { d: d, source: "thumb" }, this._touchMove);
            }
            this._on($(document), "mouseup touchend", { d: d, source: "thumb" }, this._mouseUp);
        },

        _touchMove: function (e) {
            this.content().css("cursor", "pointer");
            this._mouseMoved = true;
            this._tempLeft = this.model.targetPane != null ? this.content().find(this.model.targetPane).scrollLeft() : this.content().scrollLeft();
            this._tempTop = this.content().scrollTop();
        },

        _touchDown: function (e) {
            var data;
            if (this._tempLeft != this.scrollLeft()) data = this._scrollXdata;
            else if (this._tempTop != this.scrollTop()) data = this._scrollYdata;
            else data = (!this._scrollYdata) ? this._scrollXdata : this._scrollYdata;
            this._trigger("scrollStop", { source: "thumb" || "custom", originalEvent: e, scrollData: data, scrollTop: this.content().scrollTop(), scrollLeft: this.content().scrollLeft() });
        },

        _speedScrolling: function (e) {
            if (this._mouseMoved) {
                if (this.element.find(".e-vhandle").length > 0) {
                    var scrollTop = this.content().scrollTop();
                    if (this._tempTop !== scrollTop) {
                        this._trigger("thumbMove", { originalEvent: e, direction: (this._swipe == "down" || this._swipe == "right") ? 1 : -1, scrollData: this._scrollData });
                        this._vScrollbar["scroll"](this.content().scrollTop(), "thumb", true, "touchmove");
                        var e = { source: "thumb" || "custom", scrollData: this._vScrollbar ? this._vScrollbar._scrollData : null, scrollTop: this.content().scrollTop(), originalEvent: e };
                        var pixel = (!this._isJquery3) ? e.scrollTop : Math.ceil(e.scrollTop);
                        this.scrollTop(pixel);
                        if (this._trigger("scroll", e)) return;
                    }
                }
                if (this.element.find(".e-hhandle").length > 0) {
                    var contentArea = this.model.targetPane != null ? this.content().find(this.model.targetPane) : this.content();
                    var scrollLeft = contentArea.scrollLeft();
                    if (this._tempLeft !== scrollLeft) {
                        this._trigger("thumbMove", { originalEvent: e, direction: (this._swipe == "down" || this._swipe == "right") ? 1 : -1, scrollData: this._scrollData });
                        this._hScrollbar["scroll"](contentArea.scrollLeft(), "thumb", true, "touchmove");
                        var e = { source: "thumb" || "custom", scrollData: this._hScrollbar ? this._hScrollbar._scrollData : null, scrollLeft: this.content().scrollLeft(), originalEvent: e };
                        var pixel = (!this._isJquery3) ? e.scrollLeft : Math.ceil(e.scrollLeft);
                        this.scrollLeft(pixel);
                        if (this._trigger("scroll", e)) return;
                    }
                }
                this.content().css("cursor", "pointer");
            }
        },

        _scroll: function (e) {
            var dS = [this._vScrollbar ? this._vScrollbar._scrollData : null, this._hScrollbar ? this._hScrollbar._scrollData : null];

            if (this._evtData) var data = this._evtData.d ? this._evtData.d : this._evtData;

            for (var i = 0; i < 2; i++) {
                var d = dS[i];
                if (!d || d.skipChange) continue;
                if (this.model && ((!this.model.targetPane) || (this.model.targetPane && data && data.xy != "X")))
                    d.dimension === "height" ? this.scrollTop(e.target[d.scrollVal]) : this.scrollLeft(e.target[d.scrollVal])
                if (this.model && this.model.targetPane != null && i == 1 && this.content().find(this.model.targetPane).length)
                    d.sTop = this.content().find(this.model.targetPane)[0][d.scrollVal];
                else d.scrollVal == "scrollTop" ? d.sTop = this.scrollTop() : d.sTop = this.scrollLeft();
                this[d.scrollVal](d.sTop);
                if (d.fromScroller) continue;
                if (i === 1) {
                    var content = this.content()[0];
                    if (this._rtlScrollLeftValue && content.scrollWidth - content.clientWidth != this._rtlScrollLeftValue)
                        this._rtlScrollLeftValue = content.scrollWidth - content.clientWidth;
                    d.sTop = (this.model && ej.browserInfo().name != "mozilla" && this.model.enableRTL && !this._hScrollbar._scrollData._scrollleftflag) ? (this._rtlScrollLeftValue == 0 ? (d.sTop * -1) : (d.sTop - this._rtlScrollLeftValue)) : d.sTop;
                    this._hScrollbar["scroll"](d.sTop, "", true);
                } else
                    this._vScrollbar["scroll"](d.sTop, "", true);
                if (dS.length == 2 && i == 1 || dS.length == 1 && i == 0) {
                    this._externalScroller = false;
                    this.model && this._trigger('scroll', { source: "custom", scrollData: this._hScrollbar ? this._hScrollbar._scrollData : null, scrollLeft: this.scrollLeft(), originalEvent: e });
                }
            }
            if (this._isNativeScroll && this.model.enableTouchScroll) this._speedScrolling(e);
            this._UpdateScrollLeftValue(e);
            var proxy = this;
            if (this._vScrollbar && this._scrollYdata && this.model) {
                if ((this._scrollYdata.scrollable - this.model.scrollOneStepBy) >= this.scrollTop()) {
                    if (!$(':hover').filter(this.element[0]).length) proxy._off(ej.getScrollableParents(proxy.wrapper), "scroll", null);
                    window.onmousewheel = function (args) {
                        if (proxy.model && proxy.model.preventDefault && $(':hover').filter(proxy.element[0]).length) {
                            //args.preventDefault();
                        }
                    }
                }
            }
        },

        _UpdateScrollLeftValue: function (e) {
            if (this.model && e.type != "touchstart" && e.type != "mousedown" && this.model.enableRTL && this._rtlScrollLeftValue && this.model.scrollLeft != this._previousScrollLeft) {
                this.model.scrollLeft = this._rtlScrollLeftValue - this.model.scrollLeft;
                this._previousScrollLeft = this.model.scrollLeft;
            }
            if ((this.model && e.type == "touchstart" || e.type == "mousedown") && this.model.enableRTL) {
                this.model.scrollLeft = this.content().scrollLeft();
                this.option("scrollLeft", this.content().scrollLeft());
            }
        },

        _changevHandlerPosition: function (top) {
            var scrollbar = this._vScrollbar;
            if (scrollbar) {
                top = scrollbar._scrollData != null && top >= scrollbar._scrollData.scrollable ? scrollbar._scrollData.scrollable : top;
                if (scrollbar != null && top >= 0 && top <= scrollbar._scrollData.scrollable)
                    scrollbar[scrollbar._scrollData.handler].css(scrollbar._scrollData.lPosition, (top / scrollbar._scrollData.onePx) + "px");
            }
        },

        _changehHandlerPosition: function (left) {
            var scrollbar = this._hScrollbar;
            if (scrollbar) {
                left = scrollbar._scrollData != null && left >= scrollbar._scrollData.scrollable ? scrollbar._scrollData.scrollable : left;
                if (scrollbar != null && top >= 0 && left <= scrollbar._scrollData.scrollable)
                    scrollbar[scrollbar._scrollData.handler].css(scrollbar._scrollData.lPosition, (left / scrollbar._scrollData.onePx) + "px");
            }
        },

        _destroy: function () {
            this._off(this.content(), "scrollstop", this._touchDown);
            this._off($(document), "mouseup", this._mouseUpContent);
            this.element.css({ "width": "", "height": "" }).children(".e-vscrollbar,.e-hscrollbar").remove();
            this.content().removeClass("e-content").css({ "width": "", "height": "" });
            this.element.removeClass("e-widget");
        },
        _preventDefault: function (e) {
            e = e || window.event;
            if (e.preventDefault) e.preventDefault();

            e.returnValue = false;
        }
    });
})(jQuery, Syncfusion, window);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.gridResize = function (instance) {
        this.$headerTable = instance.getHeaderTable();
        this.gridInstance = instance;
        this._colMinWidth = 15;
        this._$visualElement = $();
        this._currentCell = -1;
        this._allowStart = false;
        this._oldWidth = null;
        this._orgX = null;
        this._orgY = null;
        this._extra = null;
        this._expand = false;
        this._target = null;
        this._cellIndex = -1;
    }

    ej.gridFeatures.gridResize.prototype = {
        _mouseHover: function (e) {
            if (this._$visualElement.is(":visible"))
                return;
            this._allowStart = false;
            if ($(e.target).is(".e-headercelldiv"))
                e.target = e.target.parentNode;
            var $target = $(e.target);
			if ($(e.target).hasClass("e-filtericon") && ($(e.target).css("cursor") == "col-resize" || $(e.target).closest("tr").css("cursor") == "col-resize")) {
                $(e.target).css("cursor", "pointer");
                $(e.target).closest("tr").css("cursor", "pointer");
            }
            if ($target.hasClass("e-headercell")) {
                var _resizableCell = e.target;
                var location = _resizableCell.getBoundingClientRect(), _x = 0, _y = 0;
                if (e.type = "mousemove") {
                    _x = e.clientX;
                    _y = e.clientY;
                }
                else if (e.type = "touchmove") {
                    _x = evt.originalEvent.changedTouches[0].clientX;
                    _y = evt.originalEvent.changedTouches[0].clientY;
                }
                else if (e.type = "MSPointerMove") {
                    _x = e.originalEvent.clientX;
                    _y = e.originalEvent.clientY;
                }
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
                    var _nlx = this.gridInstance.getHeaderContent().width() + this.gridInstance.element.children(".e-gridheader").find(".e-columnheader").offset().left;
                else
                    var _nlx = this.gridInstance.getHeaderTable().width() + this.gridInstance.element.children(".e-gridheader").find(".e-columnheader").offset().left;
                if (((_x >= (location.left + document.documentElement.scrollLeft + _resizableCell.offsetWidth - 5)) || ((_x <= (location.left + 3)))) && (_x < _nlx) && (_x >= location.left) && (_y <= location.top + document.documentElement.scrollTop + e.target.offsetHeight)) {
                    if (_x > location.left + 3)
                        var tempTarget = $(e.target).find(".e-headercelldiv");
                    else
                        var tempTarget = $(e.target).prevAll("th:visible:first").find(".e-headercelldiv");
                    var windowScrollX = window.pageXOffset || document.documentElement.scrollTop || document.body.scrollTop;
                    var _lx = (this.gridInstance.element.find(".e-headercell").not('.e-detailheadercell').offset().left + 10) - windowScrollX;
                    if ((this.gridInstance.model.enableRTL && (_x <= _lx)) || (!this.gridInstance.model.enableRTL && (_x >= _lx))) {
                        if ((this.gridInstance.model.showStackedHeader || tempTarget.length) && $.inArray($(tempTarget).attr("data-ej-mappingname"), this.gridInstance._disabledResizingColumns) == -1) {
                            this.gridInstance.model.showStackedHeader && $($target.parents('thead')).find('tr').addClass("e-resizedragicon");
                            !this.gridInstance.model.showStackedHeader && $target.parent().addClass("e-resizedragicon");
                            if ($(e.target).hasClass('e-stackedHeaderCell'))
                                this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").index(_resizableCell);
                            else
                                this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").not(".e-stackedHeaderCell,.e-detailheadercell").index(_resizableCell);
                            if (this.gridInstance.model.enableRTL)
                                this._currentCell = this._currentCell - 1;
                            this._allowStart = true;
                        }
                        else {
                            $target.parent().css("cursor", "pointer");
                            this._currentCell = -1;
                        }
                    }
                }
                else {
                    this.gridInstance.element.find(".e-columnheader").removeClass("e-resizedragicon");
                    this._currentCell = -1;
                }
            }
        },
        _start: function (_x, _y) {
            var _myrow = this.gridInstance.getHeaderTable().find(".e-columnheader"), _top;
            var _cells, _mycel;
            if ($(this._target).hasClass('e-stackedHeaderCell'))
                _cells = _myrow.find(".e-headercell").not(".e-hide");
            else
                _cells = _myrow.find(".e-headercell").not(".e-stackedHeaderCell,.e-hide");
            if (this._currentCell != -1 && this._currentCell < _cells.length)
                _mycel = _cells[this._currentCell];
            if (typeof (_mycel) == 'undefined')
                return;
            var _j = _mycel.getBoundingClientRect();
            _top = this._tableY = _j.top + parseInt(navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollTop : document.documentElement.scrollTop);
            if (this._allowStart) {
                var vElement = this._$visualElement = $(document.createElement('div')),
                _height = this.gridInstance.element.find(".e-gridcontent").first().height() + this.gridInstance.element.find(".e-gridheader").height();
                if (this.gridInstance.model.showStackedHeader && this.gridInstance.model.stackedHeaderRows.length > 0) {
                    var headerRow = this.gridInstance.getHeaderTable().find('tr.e-columnheader')
                    var lenght = headerRow.length;
                    var currentIndex = $(this._target).parent('tr')[0].rowIndex;
                    for (var i = 0; i < currentIndex; i++) {
                        _height = _height - $(headerRow[i]).height();
                    }
                    // _height = _height - $(".e-stackedHeaderRow").height();
                }
                vElement.addClass("e-reSizeColbg").appendTo(this.gridInstance.element).attr("unselectable", "on").css("visibility", "hidden");
                this.gridInstance._resizeTimeOut = setTimeout(function() {
                    vElement.css({ visibility: "visible", height: _height + 'px', cursor: 'col-resize', left: _x, top: _top, position: 'fixed' });
                }, 100);
                this._oldWidth = _mycel.offsetWidth;
                this._orgX = _x;
                this._orgY = _y;
                this._extra = _x - this._orgX;
                this._expand = true;
            }
            else {
                this._currentCell = -1;
            }
        },
        _mouseMove: function (e) {
            if (this._expand) {
                var _x = 0, _y = 0;
                if (e.type == "mousemove") {
                    _x = e.clientX;
                    _y = e.clientY;
                }                
                else if (e.type == "MSPointerMove") {
                    _x = e.originalEvent.clientX;
                    _y = e.originalEvent.clientY;
                }
                else if (e.type == "touchmove") {
                    _x = e.originalEvent.changedTouches[0].clientX;
                    _y = e.originalEvent.changedTouches[0].clientY;
                }
                if ((_x == 0 && _y == 0) && navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY;
                }
                _x += document.documentElement.scrollLeft;
                e.preventDefault();
                this._moveVisual(_x);
            }
            else
                this._mouseHover(e);
        },
        _touchStart: function (e) {
            if (this._$visualElement.is(":visible"))
                return;
            this._allowStart = false;
            if ($(e.target).is(".e-headercelldiv"))
                e.target = e.target.parentNode;
            var $target = $(e.target);            
            if ($target.hasClass("e-headercell")) {
                var _resizableCell = e.target;
                var location = _resizableCell.getBoundingClientRect(), _x = 0, _y = 0;
                if (e.type == "touchstart") {
                    _x = e.originalEvent.changedTouches[0].clientX;
                    _y = e.originalEvent.changedTouches[0].clientY;
                }
                var gridInstChildren = this.gridInstance.element.children(".e-gridheader");
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
                    var _nlx = this.gridInstance.getHeaderContent().width() + gridInstChildren.find(".e-columnheader").offset().left;
                else
                    var _nlx = this.gridInstance.getHeaderTable().width() + gridInstChildren.find(".e-columnheader").offset().left;
                if (((_x >= (location.left + document.documentElement.scrollLeft + _resizableCell.offsetWidth - 10)) || ((_x <= (location.left + 8)))) && (_x < _nlx) && (_x >= location.left) && (_y <= location.top + document.documentElement.scrollTop + e.target.offsetHeight)) {
                    if (_x > location.left + 8)
                        var tempTarget = $(e.target).find(".e-headercelldiv");
                    else
                        var tempTarget = $(e.target).prevAll("th:visible:first").find(".e-headercelldiv");
                    var windowScrollX = window.pageXOffset || document.documentElement.scrollTop || document.body.scrollTop;
                    var _lx = (this.gridInstance.element.find(".e-headercell").not('.e-detailheadercell').offset().left + 10) - windowScrollX;
                    if ((this.gridInstance.model.enableRTL && (_x <= _lx)) || (!this.gridInstance.model.enableRTL && (_x >= _lx))) {
                        if ((this.gridInstance.model.showStackedHeader || tempTarget.length) && $.inArray($(tempTarget).attr("data-ej-mappingname"), this.gridInstance._disabledResizingColumns) == -1) {                            
                            if ($(e.target).hasClass('e-stackedHeaderCell'))
                                this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").index(_resizableCell);
                            else
                                this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").not(".e-stackedHeaderCell,.e-detailheadercell").index(_resizableCell);
                            if (this.gridInstance.model.enableRTL)
                                this._currentCell = this._currentCell - 1;
                            this._allowStart = true;
                        }
                        else {                            
                            this._currentCell = -1;
                        }
                    }
                }
                else {                    
                    this._currentCell = -1;
                }
            }
            if (this._allowStart) {
                this._target = $target;
                if (this.gridInstance.pluginName == "ejGrid" && this.gridInstance.model.allowResizing) {                    
                    if (this._triggerResizeEvents("resizeStart", _x))
                        return;
                } else if (this.gridInstance.pluginName == "ejTreeGrid" && this.gridInstance.model.allowColumnResize) {
                    if (this.gridInstance._triggerColumnResize("columnResizeStart", _x, e))
                        return;
                }
                var gridobj = this;
                _x += document.documentElement.scrollLeft;
                if (e.button != 2)
                    this._start(_x, _y);
                return false;
            }
            return true;
        },
        _getCellIndex: function (e) {
            var $target = $(e._target);
            var targetCell = e._target;
            var location = targetCell.getBoundingClientRect();
            var scrollLeft = navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollLeft : document.documentElement.scrollLeft;
            if (this._orgX < location.left + 5 + scrollLeft)
                targetCell = $(targetCell).prevAll(":visible:first")[0];
            var hCellIndex = targetCell.cellIndex;
            var cellIndex = hCellIndex;
            if (e.gridInstance.model.groupSettings.groupedColumns.length) {
                cellIndex = hCellIndex - e.gridInstance.model.groupSettings.groupedColumns.length;
            }
            return cellIndex;
        },
        _reSize: function (_x, _y) {
            // Function used for Resizing the column
            var proxy = this;
            var resized = false, $content;
            if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
                this._initialTableWidth = this.gridInstance.getHeaderTable().first().parent().width() + this.gridInstance.getHeaderTable().last().parent().width();
            else
                this._initialTableWidth = this.gridInstance.getHeaderTable().parent().width();
            if (this.gridInstance.model.enableRTL && (this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid))
                this._currentCell = this._currentCell - 1;
            else
                !this.gridInstance.model.enableRTL && this._getResizableCell();
            if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns > 0)
                var _rowobj = this.gridInstance.getHeaderTable().find('thead');
            else
                var _rowobj = $(this._target).parents('thead');
            if (this._currentCell != -1 && this._expand) {
                this._expand = false;
                var _childTH = $(this._target).hasClass('e-stackedHeaderCell') ? _rowobj.find(".e-headercell:not(.e-detailheadercell)").filter(":visible") : _rowobj.find(".e-headercell:not(.e-detailheadercell,.e-stackedHeaderCell)").filter(":visible");
                var _outerCell = _childTH[this._currentCell];
                var _oldWidth = _outerCell.offsetWidth;
                var _extra = _x - this._orgX;
                if (this.gridInstance.model.enableRTL)
                    _extra = -_extra;
                //Check whether the column minimum width reached
                if (parseInt(_extra) + parseInt(_oldWidth) > this._colMinWidth) {
                    if (_extra != 0)
                        _rowobj.css("cursor", 'default');
                     var $prevheaderCol, oldColWidth;
                    if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) == 'nextcolumn') {
                     var $prevheaderCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
                     if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
                     this.gridInstance._detailColsRefresh();
                    $prevheaderCols = this.gridInstance._$headerCols;
                   }
                    var $prevheaderCol = $prevheaderCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length)
                    var oldColWidth = parseInt($prevheaderCol[0].style.width);
                   }
                    this._resizeColumnUsingDiff(_oldWidth, _extra);
                    $content = this.gridInstance.element.find(".e-gridcontent").first();
                    var scrollContent = $content.find("div").hasClass("e-content");                    
                    var browser = !ej.isIOSWebView() && this.gridInstance.getBrowserDetails();
                    if (browser && browser.browser == "msie" && this.gridInstance.model.allowScrolling) {
                        var oldWidth = this.gridInstance.getContentTable().width(), newwidth = this.gridInstance._calculateWidth();
                        if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns > 0) {
                         	if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
								this.gridInstance.getFooterTable().last().width(newwidth - this.gridInstance.getFooterContent().find(".e-frozenfootertdiv").width());
                        }
                        else {
                            if (newwidth > oldWidth) {                               
                                this.gridInstance.model.showSummary && this.gridInstance.getFooterTable().width(newwidth);
                            }
                        }
                        if (parseInt(browser.version, 10) > 8 && this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
                            if (newwidth > oldWidth) {
                                this.gridInstance.getContentTable().children("colgroup").find("col").first().css("width", (20 / $content.find("table").first().width()) * 100 + "%");
                            }
                            else {
                                this.gridInstance.getContentTable().css("width", "100%");
                                this.gridInstance._groupingAction(true);
                                this.gridInstance.getContentTable().children("colgroup").find("col").first().css("width", ((this.gridInstance.getHeaderTable().find("colgroup").find("col").first().width() / $content.find("table").first().width()) * 100).toFixed(2) + "%");
                            }
                        }
                        this.gridInstance.getHeaderTable().parent().scrollLeft($content.find(".e-content").scrollLeft() - 1);
                    }
                    this.gridInstance._colgroupRefresh();
                    if (this.gridInstance.model.allowTextWrap){
						this.gridInstance._isResized = true;
                        this.gridInstance.rowHeightRefresh();
					}
                    if (this.gridInstance.model.groupSettings.groupedColumns.length && !this.gridInstance.model.isEdit)
                        this.gridInstance._recalculateIndentWidth();
                    if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) != 'normal') {
                        if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) == 'nextcolumn') {
                            var $headerCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
                            var $ContentCols = this.gridInstance.getContentTable().find('colgroup').find("col");
                            if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
                                this.gridInstance._detailColsRefresh();
                                $headerCols = this.gridInstance._$headerCols;
                                $ContentCols = this.gridInstance._$contentCols;
                            }
                            var nextCell = this._currentCell + 1;
                            var $headerCol = $headerCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate) ? nextCell : nextCell + this.gridInstance.model.groupSettings.groupedColumns.length)
                            var newWidth = parseInt($headerCol[0].style.width) + (oldColWidth - parseInt($prevheaderCol[0].style.width)), $ContentCol;
                            if (newWidth < this._colMinWidth)
                                newWidth = this._colMinWidth;
                            $headerCol.width(newWidth);
                            if (this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
                                var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
                                var $colGroup = $tables.find("colgroup");
                                var colCount = this.gridInstance.getVisibleColumnNames().length;
                                if (this.gridInstance.getContentTable().find('.e-detailrow').length)
                                    $colGroup = $colGroup.not($tables.find(".e-detailrow").find("colgroup")).get();
                                for (var i = 0 ; i < $colGroup.length; i++) {
                                    var cols = $($colGroup[i]).find("col").filter(this._diaplayFinder);
                                    if (cols.length > colCount) cols.splice(0, (cols.length - colCount));
                                    $(cols[nextCell]).width(newWidth);
                                }
                            }
                            if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns) {
                                if (nextCell >= 0 && nextCell < this.gridInstance.model.scrollSettings.frozenColumns && this._getFrozenResizeWidth() + _extra > this.gridInstance.element.find(".e-headercontent").first().width())
                                    return;
                                $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(nextCell);
                            }
                            else
                                $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate) ? nextCell : nextCell + this.gridInstance.model.groupSettings.groupedColumns.length);
                            $ContentCol.width(newWidth);
                            this.gridInstance._findColumnsWidth();
                            if (this.gridInstance.model.scrollSettings.frozenColumns > 0 && $(_outerCell).is(":last-child") && this.gridInstance.pluginName == "ejGrid") {
                                var val = $prevheaderCol.width() - oldColWidth;
                                var frozenWidth = this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width() + val;
                                var movableWidth = this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width() - val;
                                var marginLeft = parseInt(this.gridInstance.getHeaderContent().find('.e-movableheader')[0].style["margin-left"]) + val;
                                this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width(frozenWidth);
                                this.gridInstance.getContent().find('.e-frozencontentdiv').width(frozenWidth);
                                if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
                                    this.gridInstance.getFooterContent().find('.e-frozenfooterdiv').width(frozenWidth);
                                this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width(movableWidth);
                                this.gridInstance.getContent().find('.e-movablecontentdiv').width(movableWidth);
                                if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
                                    this.gridInstance.getFooterContent().find('.e-movablefooterdiv').width(movableWidth);
                                this.gridInstance.getHeaderContent().find('.e-movableheader').css("margin-left", marginLeft);
                                this.gridInstance.getContent().find('.e-movablecontent').css("margin-left", marginLeft);
                                if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
                                    this.gridInstance.getFooterContent().find('.e-movablefooter').css("margin-left", marginLeft);
                            }
                            if (this.gridInstance.model.scrollSettings.frozenColumns > 0 && $(_outerCell).is(":last-child") && this.gridInstance.pluginName == "ejTreeGrid") {
                                var val = $prevheaderCol.width() - oldColWidth;
                                var frozenWidth = this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width() + val;
                                var movableWidth = this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width() - val;
                                var marginLeft = parseInt(this.gridInstance.getHeaderContent().find('.e-movableheader')[0].style["margin-left"]) + val;
                                this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width(frozenWidth);
                                this.gridInstance.getHeaderContent().find('.e-movableheader').css("margin-left", marginLeft);
                                this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width(movableWidth);
                                this.gridInstance.getContent().find(".e-frozencontainer").width(frozenWidth).next().css("margin-left", marginLeft + "px");
                                this.gridInstance.getContent().find('.e-movablecontent').width(movableWidth);
                                if (this.gridInstance.model.showTotalSummary) {
                                    this.gridInstance._$totalSummaryRowContainer.find(".e-frozenfooterdiv").width(frozenWidth);
                                    this.gridInstance._$totalSummaryRowContainer.find(".e-movablefooter").css("margin-left", marginLeft + "px");
                                }
                                this.gridInstance._renderScroller(true);                             
                            }

                            if (this.gridInstance.model.scrollSettings.frozenColumns > 0 && $(this._target).parent('tr').parents('div:first').hasClass('e-frozenheaderdiv') && this.gridInstance.pluginName == "ejGrid") {
                                this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width(this._newWidth);
                                this.gridInstance.getContent().find('.e-frozencontentdiv').width(this._newWidth);
                                if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
                                    this.gridInstance.getFooterContent().find('.e-frozenfooterdiv').width(this._newWidth);
                            }
                        }
                        else if (!this.gridInstance.model.scrollSettings.frozenColumns) {
                            var oldTableWidth = this.gridInstance.getHeaderTable().width();
                            if (this.gridInstance.pluginName != "ejTreeGrid" && (!this.gridInstance.model.allowScrolling && !this.gridInstance.model.isResponsive))
                                $("#" + this.gridInstance._id).css("width", oldTableWidth + parseInt(_extra));
                            else {
                               // this.gridInstance.getHeaderTable().css("width", oldTableWidth + parseInt(_extra));
                                if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterTable()))
                                    this.gridInstance.getFooterTable().css("width", oldTableWidth + parseInt(_extra));
                            }
                            this.gridInstance.model.scrollSettings.width += parseInt(_extra);
                            if (this.gridInstance.getContent().width() > this.gridInstance.getContentTable().width()) {
                                this.gridInstance.getContentTable().addClass('e-tableLastCell');
                                this.gridInstance.getHeaderTable().addClass('e-tableLastCell');
                            }
                            else {
                                this.gridInstance.getContentTable().removeClass('e-tableLastCell');
                                this.gridInstance.getHeaderTable().removeClass('e-tableLastCell');
                            }
                        }
                    }
                    if (!(browser.browser == "msie") && browser && this.gridInstance.model.allowScrolling && this.gridInstance.model.scrollSettings.frozenColumns == 0) {
                        if (this.gridInstance.model.columnLayout != "fixed"){
						    this.gridInstance.getHeaderTable().width("100%");
                            this.gridInstance.getContentTable().width("100%");
						}
                        if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterTable()))
                            this.gridInstance.getFooterTable().width("100%");
                        var tableWidth = this.gridInstance._calculateWidth();
                        if (tableWidth <= this.gridInstance.getContentTable().width() || this.gridInstance.getHeaderTable().width() > this.gridInstance.getContentTable().width()) {
                            if (this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterTable()))
                                this.gridInstance.getFooterTable().width(tableWidth);
                        }
                    }
                    if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'default') {
                        var cellIndex = this._currentCell;
                        var target = $(this._target), columnIndex = [], col = [];
                        var newWidth = _oldWidth + _extra;
                        var args = {};
                        if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                            var rowindex = target.parent(".e-stackedHeaderRow").index(),
                            stackedHeaderText = target.text(),
                            stackedHeaderCol = this.gridInstance.model.stackedHeaderRows[rowindex].stackedHeaderColumns,stackedHeaderColumns;
                            for(var i=0;i<stackedHeaderCol.length;i++){
                                if(stackedHeaderCol[i].headerText == stackedHeaderText)
                                    stackedHeaderColumns = stackedHeaderCol[i].column;
                            }
                            var columns = stackedHeaderColumns | [];
                            if (!ej.isNullOrUndefined(stackedHeaderColumns) && !(stackedHeaderColumns instanceof Array))
                                columns = stackedHeaderColumns.split(",");
                            for (var i = 0 ; i < columns.length; i++) {
                                var index = this.gridInstance.getColumnIndexByField(columns[i]);
                                columnIndex.push(index)
                                col.push(this.gridInstance.model.columns[index]);
                            }
                            args = { columnIndex: columnIndex, column: col, oldWidth: _oldWidth, newWidth: newWidth };
                        }
                        else
                        args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], oldWidth: _oldWidth, newWidth: newWidth };
                        this.gridInstance._trigger("resized", args);
                    }
                    if (this.gridInstance.model.allowScrolling) {
                        this.gridInstance.getScrollObject().refresh(this.gridInstance.model.scrollSettings.frozenColumns > 0);
                        if (this.gridInstance.model.isResponsive && this.gridInstance.model.minWidth)
                            this.gridInstance.windowonresize();
                        if (!scrollContent && $content.find("div").hasClass("e-content"))
                            this.gridInstance.refreshScrollerEvent();
                        this.gridInstance._isHscrollcss();
                    }
                }

            }

            this._target = null;
            this._$visualElement.remove();
            this._expand = false;
            this._currentCell = -1;
            this._allowStart = false;

        },
        _getFrozenResizeWidth: function () {
            var $frozenColumnsCol = this.gridInstance.getHeaderTable().find('colgroup').find("col").slice(0, this.gridInstance.model.scrollSettings ? this.gridInstance.model.scrollSettings.frozenColumns : 0), width = 0;
            for (var i = 0; i < $frozenColumnsCol.length; i++) {
                if ($frozenColumnsCol.eq(i).css("display") != "none")
                    width += parseInt($frozenColumnsCol[i].style.width.replace("px", ""));
            }
            return width;
        },
        _diaplayFinder: function () {
            return $(this).css('display') != 'none';
        },
        _resizeColumnUsingDiff: function (_oldWidth, _extra) {
            var proxy = this;			
            this._currntCe = this._currentCell;
            this._widthchanges(_oldWidth,_extra);
			var _newWidth = this._newWidth, _extraVal = this._extra, $headerCols = this._$headerCols, $ContentCols = this._$ContentCols, $ContentCol, $headerCol = this._$headerCol, $frozenCols = this._$frozenCols, $footerCol; 		
            if (this.gridInstance.pluginName == "ejTreeGrid" && _extra > 0 && !ej.isNullOrUndefined(this.gridInstance._currentCell) && this.gridInstance.model.columns[this.gridInstance._currentCell].isFrozen == true) {
                var width = this.gridInstance._frozenWidth();
                //if resizing exceeds the grid width
                if (width > this.gridInstance._gridWidth - 18 - 50) {//container width-scrollerwidth- minimum width of unfrozen column
                    return
                }
            }
            if (_newWidth > 0 && _extra != 0) {
                if (_newWidth < this._colMinWidth)
                    _newWidth = this._colMinWidth;
                if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) == 'nextcolumn') {
                    var nextCol = $headerCol.next();
                    var isFrozenLastCell = this.gridInstance.model.scrollSettings.frozenColumns && this._currentCell == this.gridInstance.model.scrollSettings.frozenColumns - 1 ? true : false;
                    if (isFrozenLastCell)
                        nextCol = $headerCols.eq(this.gridInstance.model.scrollSettings.frozenColumns);
                    if ((isFrozenLastCell || !$headerCol.is(":last-child")) && (nextCol.width() + ($headerCol.width() - _newWidth) <= this._colMinWidth))
                        _newWidth = $headerCol.width() + (nextCol.width() - this._colMinWidth);
                }
                var _extra = _newWidth - _oldWidth;
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns) {
                    if (this._currentCell >= 0 && this._currentCell < this.gridInstance.model.scrollSettings.frozenColumns && this._getFrozenResizeWidth() + _extra > this.gridInstance.element.find(".e-headercontent").first().width())
                        return;
                    $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(this._currentCell);
                }
                else
                    $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length);
                if ($(this._target).parent('tr').hasClass('e-stackedHeaderRow')) {
                    this._resizeStackedHeaderColumn($(this._target).parent('tr'), _extraVal, this._currntCe);
                }
                else
                    $headerCol.outerWidth(_newWidth);
                if (this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterTable())) {
                        this._$footerCols = this.gridInstance.getFooterTable().find('colgroup').find("col");
                        var colCount = this.gridInstance.model.columns.length;
                        if (this._$footerCols.length > colCount) this._$footerCols.splice(0, (this._$footerCols.length - colCount));
                        var $footerCols = this._$footerCols,
                        $footerCol = $footerCols.filter(this._diaplayFinder).eq(this._currentCell);
                        if(!($(this._target).parent('tr').hasClass('e-stackedHeaderRow'))){
							$footerCol.outerWidth(_newWidth);
                        }
                        else{
                            for (var i = 0; i < this._changedcell.length; i++) {
                                $footerCol = $footerCols.filter(this._diaplayFinder).eq(i);
                                var width = parseInt((_extraVal)) + parseInt($footerCols[i].style.width);
                                if (width < this._colMinWidth)
                                width = this._colMinWidth
                                $footerCol.outerWidth(width);
                            }
                        }
                }
                if ($(this._target).parent('tr').hasClass('e-stackedHeaderRow')) {
                    if (this.gridInstance.model.groupSettings.groupedColumns.length) {
                        var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
                        var $colGroup = $tables.find("colgroup");
                        for (var i = 0; i < this._changedcell.length; i++) {
                            var cellIndex = this._changedcell[i];
                            for (var j = 0 ; j < $colGroup.length; j++) {
                                var visibleCols = $($colGroup[j]).children().filter(this._diaplayFinder);
                                var width = parseInt((_extraVal)) + parseInt(visibleCols[cellIndex].style.width);
                                if (width < this._colMinWidth)
                                    width = this._colMinWidth
                                $(visibleCols[cellIndex]).width(width);
                            }
                        }
                    }
                    var length = this.gridInstance.getContentTable().find('colgroup').find("col").filter(this._diaplayFinder).length;
                    for (var i = 0; i < this._changedcell.length; i++) {
                        var $conCol = this.gridInstance.getContentTable().find('colgroup').find("col").filter(this._diaplayFinder)[this._changedcell[i]]
                        var width = parseInt((_extraVal)) + parseInt($conCol.style.width);
                        if (width < this._colMinWidth)
                            width = this._colMinWidth
                        $($conCol).outerWidth(width);
                        if (this.gridInstance.model.isEdit && (this.gridInstance.model.allowGrouping && this.gridInstance.model.groupSettings.groupedColumns.length == 0)) {
                            var $sEditCol = this.gridInstance.getContentTable().find(".gridform").find("colgroup col").filter(this._diaplayFinder)[this._changedcell[i]];
                            $($sEditCol).outerWidth(width);
                        }
                    }
                }
                else {
                    if (this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
                        var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
                        var $colGroup = $tables.find("colgroup");
                        var cellIndex = this._currentCell;
                        var colCount = this.gridInstance.getVisibleColumnNames().length;
                        if (this.gridInstance.getContentTable().find('.e-detailrow').length)
                            $colGroup = $colGroup.not($tables.find(".e-detailrow").find("colgroup")).get();
                        for (var i = 0 ; i < $colGroup.length; i++) {
                            var cols = $($colGroup[i]).find("col").filter(this._diaplayFinder);
                            if (cols.length > colCount) cols.splice(0, (cols.length - colCount));
                            $(cols[cellIndex]).width(_newWidth);
                        }
                    }
                    $ContentCol.outerWidth(_newWidth);
                    if (this.gridInstance.model.isEdit) {
                        var $editableRow = this.gridInstance.getContentTable().find(".e-editedrow,.e-addedrow");
                        var $editCols = $editableRow.find("table").find("colgroup col");
                        var addCol;
                        if ($editableRow.hasClass("e-addedrow") && this.gridInstance.model.groupSettings.groupedColumns.length)
                            addCol = this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length - 1;
                        else
                            addCol = this._currentCell;
                        var $editCol = $editCols.filter(this._diaplayFinder).eq(addCol);
                        $editCol.outerWidth(_newWidth);
                    }
                }
                this.gridInstance._findColumnsWidth();
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns && ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) != 'nextcolumn' && this.gridInstance.pluginName == "ejGrid") {
                    var frozenColumns = this.gridInstance.getContentTable().find('colgroup').find("col").slice(0, this.gridInstance.model.scrollSettings.frozenColumns)
                        , width = 0, direction;
                    for (i = 0; i < frozenColumns.length; i++)
                        width += frozenColumns[i].style.display == 'none' ? 0 : parseInt(frozenColumns[i].style.width.replace("px", ""));
                    this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width);
                    direction = this.gridInstance.model.enableRTL ? "margin-right" : "margin-left";
                    this.gridInstance.getContent().find(".e-frozencontentdiv").width(width).next().css(direction, width + "px");
                    this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width).next().css(direction, width + "px");
                    (this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent())) && this.gridInstance.getFooterContent().find(".e-frozenfooterdiv").width(width);
                }
                if (this.gridInstance.pluginName == "ejTreeGrid" && ((!ej.isNullOrUndefined(this.gridInstance._currentCell) && this.gridInstance.model.columns[this.gridInstance._currentCell].isFrozen == true && ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) != 'nextcolumn') || (!this.gridInstance._isFrozenStackedResize && this.gridInstance._isStackedResize && this.gridInstance._frozenColumnsLength > 0))) {
                    var width = this.gridInstance._frozenWidth();                    
                    this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width);
                    this.gridInstance.getContent().find(".e-frozencontainer").width(width).next().css("margin-left", width + "px");
                        this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width).next().css("margin-left", width + "px");
                        if (this.gridInstance.model.showTotalSummary) {
                            this.gridInstance._$totalSummaryRowContainer.find(".e-frozenfooterdiv").width(width);
                            this.gridInstance._$totalSummaryRowContainer.find(".e-movablefooter").css("margin-left", width + "px");
                        }
                        this.gridInstance._findColumnsWidth();
                        this.gridInstance._renderScroller(true);
                     }
			    if(!(this.gridInstance.getHeaderTable().find(".e-columnheader").hasClass("e-resizedragicon")))
                    this.gridInstance.getHeaderTable().find(".e-columnheader").css("cursor", "default");
            }
        },
        _resizeStackedHeaderColumn: function (currentTr, extra, currentCell) {
            // var currentIndex = this._currntCe;
            this._changedcell = [];
            var headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-detailheadercell");
            var preCol = 0, limit = 0, currentTh = headerCells[currentCell], currentSpan = $(currentTh).attr('colspan'), commonExtra = extra / currentSpan, tr = $(currentTh).parent('tr');
            var nextTr = tr.next();
            var currentIndex = currentTh.cellIndex;
            if (this.gridInstance.model.groupSettings.showGroupedColumn) {
                limit = this.gridInstance.model.groupSettings.groupedColumns.length;
                preCol += limit
            }
            while (currentIndex > limit) {
                currentIndex--;
                var th = $(tr).children('th').not(".e-detailheadercell")[currentIndex];
                preCol += parseInt($(th).attr('colspan'));
            }
            this._currentCell = preCol;
            var length = preCol + parseInt(currentSpan);
            for (var i = preCol; i < length; i++) {
                var $colG = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder)[i];
                this._changedcell.push(i - limit)
                var width = parseInt(extra) + parseInt($colG.style.width);
                if (width < this._colMinWidth)
                    width = this._colMinWidth;
                $($colG).outerWidth(width);
             }
        },
        _triggerResizeEvents: function (event, _x) {
            var _rowobj = this.gridInstance.getHeaderTable().find(".e-columnheader");
            var _childTH = _rowobj.find(".e-headercell").filter(":visible");
            var cellIndex = this._cellIndex,currentCell;
            var target = $(this._target), columnIndex = [], col = [];
            if (event == "resizeStart") {
                this._orgX = _x;
                cellIndex = this._cellIndex = this._getCellIndex(this, _x);
            }
            if (this.gridInstance.model.enableRTL && (this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid))
                 currentCell = this._currentCell - 1;
            else{
				 !this.gridInstance.model.enableRTL && this._getResizableCell();
				 currentCell = this._currentCell;
			}
            var _outerCell = _childTH[currentCell];
            var _oldWidth = _outerCell.offsetWidth;
            if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                var rowindex = target.parent(".e-stackedHeaderRow").index(),
                stackedHeaderText = target.text(),
                stackedHeaderCol = this.gridInstance.model.stackedHeaderRows[rowindex].stackedHeaderColumns,stackedHeaderColumns;
                for(var i=0;i<stackedHeaderCol.length;i++){
                    if(stackedHeaderCol[i].headerText == stackedHeaderText)
                        stackedHeaderColumns = stackedHeaderCol[i].column;
                }
                var columns = stackedHeaderColumns | [];
                if (!ej.isNullOrUndefined(stackedHeaderColumns) && !(stackedHeaderColumns instanceof Array))
                    columns = stackedHeaderColumns.split(",");
                for (var i = 0 ; i < columns.length; i++) {
                    var index = this.gridInstance.getColumnIndexByField(columns[i]);
                    columnIndex.push(index)
                    col.push(this.gridInstance.model.columns[index]);
                }
            }
            if (event == "resizeStart") {
                var args = {};
                if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                    args = { columnIndex: columnIndex, column: col, target: target, oldWidth: _oldWidth };
                }
                else
                    args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], target: $(_outerCell), oldWidth: _oldWidth };
                return this.gridInstance._trigger("resizeStart", args);
            }
            else {
                var _childth = _rowobj.find(".e-headercell").not(".e-detailheadercell").filter(":visible");
                var _extra = _x - this._orgX;
				this._widthchanges(_oldWidth,_extra);
                this.gridInstance._colgroupRefresh();
                var args = {};
                if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                    args = { columnIndex: columnIndex, column: col, target: $(_outerCell), oldWidth: _oldWidth, newWidth: this._newWidth, extra: _extra };
                }
                else
                    args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], target: $(_outerCell), oldWidth: _oldWidth, newWidth: this._newWidth, extra: _extra };
                return this.gridInstance._trigger("resizeEnd", args);
            }
        },
		_widthchanges:function(_oldWidth,_extra){
		     	var $headerCols = this._$headerCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
                var $ContentCols = this._$ContentCols = this.gridInstance.getContentTable().find('colgroup').find("col");
                if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
                    this.gridInstance._detailColsRefresh();
                    $headerCols = this._$headerCols =this.gridInstance._$headerCols;
                    $ContentCols = this._$ContentCols =this.gridInstance._$contentCols;
                }
                var $headerCol = this._$headerCol = $headerCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length)
                        , $ContentCol, $footerCol, $frozenCols = this._$frozenCols = $headerCols.slice(0, this.gridInstance.model.scrollSettings ? this.gridInstance.model.scrollSettings.frozenColumns : 0);
                var colWidth = $headerCol[0].style.width, isPercent = colWidth.indexOf("%") != -1;
                var _inlineWidth = (!colWidth || isPercent)? $(this._target).outerWidth() : colWidth;
                var indent = !isPercent ? _oldWidth / parseInt(_inlineWidth) : 1;
                this._extra = _extra / indent;
                this._newWidth = parseInt(_extra) + parseInt(_inlineWidth);
		},
        _mouseUp: function (e) {
            if (this.gridInstance._resizeTimeOut){
                clearTimeout(this.gridInstance._resizeTimeOut);
                this.gridInstance._resizeTimeOut = 0;
            }
            if (this._expand) {
                var _x = e.clientX, _y = e.clientY;
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY;
                }
                if (e.type == "touchend") {
                    _x = e.originalEvent.changedTouches[0].clientX;
                    _y = e.originalEvent.changedTouches[0].clientY;
                }
                if (this.gridInstance.model.allowResizing && (this.gridInstance.getHeaderTable().find(".e-columnheader").hasClass("e-resizedragicon") || e.type == "touchend")) {
                    if (this._triggerResizeEvents("resizeEnd", _x)) {
                        this.gridInstance.element.find(".e-reSizeColbg").remove();
                        return;
                    }
                }
                _x += document.documentElement.scrollLeft;
                this._reSize(_x, _y);
                if (!ej.isNullOrUndefined(this._currntCe) && this._currntCe >= 0){
					var vCols = ej.DataManager(this.gridInstance.model.columns).executeLocal(new ej.Query().where("visible","equal",true));
					var currCol = vCols[this._currntCe];
					var inx = this.gridInstance.model.columns.indexOf(currCol)
					if(vCols.length != this.gridInstance.model.columns.length)
						this.gridInstance.model.columns[inx].width = this.gridInstance.columnsWidthCollection[inx];
					else this.gridInstance.model.columns[this._currntCe].width = this.gridInstance.columnsWidthCollection[this._currntCe];
				}
            }
        },
        _getResizableCell: function () {
            var row, frozenColumns = this.gridInstance.model.scrollSettings.frozenColumns;
            if ($(this._target).hasClass('e-stackedHeaderCell'))
                row = this.gridInstance.getHeaderTable().find(".e-columnheader");
            else
                row = this.gridInstance.getHeaderTable().find(".e-columnheader").not('.e-stackedHeaderRow');
            var cell = row.find(".e-headercell").not(".e-hide,.e-detailheadercell");
            var scrollLeft = navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollLeft : document.documentElement.scrollLeft;
            //To identify whether it is previous cell to final frozen cell
            if (frozenColumns && this._currentCell != -1 && this._currentCell == frozenColumns - 1) {
                var cellPoint = cell[this._currentCell].getBoundingClientRect().left + scrollLeft + 5,
                    isFrozenPreviousCell = cellPoint > this._orgX ? true : false;
            }
            if (!frozenColumns || this._currentCell != frozenColumns - 1 || isFrozenPreviousCell){
				var inx = $(this._target).closest(".e-columnheader").index();
				row = $(this._target).hasClass('e-stackedHeaderCell') ? row[inx] : row;
				var cell = $(row).find(".e-headercell").not(".e-hide,.e-detailheadercell");
				for (var i = 0; i < cell.length; i++) {
					var point = cell[i].getBoundingClientRect();
					var xlimit = point.left + scrollLeft + 5;
					if (xlimit > this._orgX && cell[i].offsetHeight + point.top >= this._orgY) {
						this._currentCell = i - 1;
						return;
					}
					if (i == cell.length - 1 || (this.gridInstance.model.showStackedHeader && $(this._target).get(0) === cell[i])) {
						this._currentCell = i;
						return;
					}
				}
			}
        },
        _moveVisual: function (_x) {
            /// Used to move the visual element in mouse move
            var _bounds = this.gridInstance.getHeaderContent().find("div").first()[0].getBoundingClientRect();
            if ((_bounds.left + document.documentElement.scrollLeft + _bounds.width < _x) || (_x < _bounds.left + document.documentElement.scrollLeft))
                this._$visualElement.remove();
            else if (this._currentCell != -1)
                this._$visualElement.css({ left: _x, top: this._tableY });
        },
        _mouseDown: function (e) {
            if (this._allowStart && ($(e.target).closest("tr").hasClass("e-resizedragicon"))) {
                this._target = e.target;
                var _x = e.clientX, _y = e.clientY;
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY - (window.pageYOffset || document.body.scrollTop || 0);
                }
                if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").hasClass("e-resizedragicon")) {
                    if ($(e.target).is(".e-headercelldiv"))
                        e.target = e.target.parentNode;
                    this._target = e.target;
                    if (this._triggerResizeEvents("resizeStart", _x))
                        return;
                }
                var gridobj = this;
                _x += document.documentElement.scrollLeft;
                if (e.button != 2)
                    this._start(_x, _y);
                return false;
            }
            return true;
        },
        _columnResizeToFit: function (e) {
            var resize = this.gridInstance.getHeaderTable().find(".e-columnheader").filter(function (e) {
                return $(this).css("cursor") == "col-resize";
            });
            if (this.gridInstance.model.allowResizeToFit && resize.length) {
                if ($(e.target).is(".e-headercelldiv"))
                    e.target = e.target.parentNode;
                var $target = $(e.target);
                var headerCells, preCol = 0, indent = 0;
                if ($target.hasClass('e-stackedHeaderCell'))
                    headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-detailheadercell");
                else
                    headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-stackedHeaderCell,.e-detailheadercell");
                this._target = $target;
                if ($target.hasClass("e-headercell")) {
                    var targetCell = e.target;
                    var hCellIndex = $.inArray(targetCell, headerCells);
                    var cellIndex = hCellIndex;
                    this._orgX = e.pageX;
                    if(!this.gridInstance.model.enableRTL) 
						this._getResizableCell();
					else
						this._currentCell = hCellIndex;
                    if (hCellIndex != this._currentCell) {
                        hCellIndex = cellIndex = this._currentCell;
                        targetCell = e.target.previousSibling;
                    }
                    var currentTh = headerCells.filter(":visible")[cellIndex], changesCellIndex = [], changesFinalWdith = [], changesOldWidth = [];
                    indent = this.gridInstance.model.groupSettings.groupedColumns.length;
                    if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate) || !ej.isNullOrUndefined(this.gridInstance.model.childGrid))
                        indent += 1;
                    if ($(targetCell).parent("tr").hasClass('e-stackedHeaderRow')) {
                        var currentSpan = $(currentTh).attr('colspan'), tr = $(currentTh).parent('tr'), tHeadIndex = currentTh.cellIndex;
                        var nextTr = tr.next();
                        while (tHeadIndex > indent) {
                            tHeadIndex--
                            var th = $(tr).children('th')[tHeadIndex];
                            preCol += parseInt($(th).attr('colspan'))
                        };
                        var length = preCol + parseInt(currentSpan);
                    }
                    else {

                        preCol = cellIndex; length = cellIndex + 1;
                    }
                    var finalWidth = 0, headerWidth = 0, contentWidth = 0, argCols = [], argExtra = [];
                    if (preCol != -1) {
                        var hiddenLen = headerCells.slice(0, preCol + 1).filter(".e-hide").length;
                        var args = { columnIndex: preCol + hiddenLen, column: this.gridInstance.model.columns[preCol + hiddenLen], target: $target, oldWidth: oldWidth };
                        this.gridInstance._trigger("resizeStart", args);
                        for (var i = preCol; i < length; i++) {
                            hiddenLen = headerCells.slice(0, i + 1).filter(".e-hide").length;
                            contentWidth = this._getContentWidth(i + hiddenLen);
                            var $cellDiv = this.gridInstance.getHeaderTable().find('.e-headercell:not(.e-hide, .e-stackedHeaderCell)').children(".e-headercelldiv").eq(i);
                            headerWidth = this._getHeaderContentWidth($cellDiv);
                            finalWidth = headerWidth > contentWidth ? headerWidth : contentWidth;
                            finalWidth += parseInt(($cellDiv.css("padding-left"), 10) + ($cellDiv.css("padding-right"), 10));
                            var oldWidth = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder).eq(i + indent).width();
                            finalWidth = oldWidth > finalWidth ? finalWidth : (this._colMinWidth < finalWidth ? finalWidth : this._colMinWidth);

                            var headerCols = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder);
                            if(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)
                                headerCols.splice(0, 1);
                            headerCols.eq(i + indent).width(finalWidth);
                            if (this.gridInstance.model.groupSettings.groupedColumns.length) {
                                var $colGroups = this.gridInstance.getContentTable().find('.e-recordtable').find('colgroup');
                                var proxy = this;
                                $.each($colGroups, function (indx, colgroup) {
                                    $(colgroup).find('col').filter(proxy._diaplayFinder).eq(i).width(finalWidth);
                                });
                            }
                            var contentCols = this.gridInstance.getContentTable().find('col').filter(this._diaplayFinder);
                            if(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)
                                contentCols.splice(0, 1);
                            contentCols.eq(i + indent).width(finalWidth);
                            if (this.gridInstance.model.isEdit) {
                                var $editableCol = this.gridInstance.getContentTable().find(".e-editedrow").find("col");
                                var $form = this.gridInstance.element.find(".gridform");
                                for (var j = 0; j < $form.length; j++) {
                                   var $editableCol = $($form[j]).find("col")
                                   $editableCol.eq(i + indent).width(finalWidth);
                               }
                            }
                            argCols.push(this.gridInstance.model.columns[i + hiddenLen]);
                            argExtra.push(Math.abs(finalWidth - oldWidth))
                            changesCellIndex.push(i + hiddenLen); changesFinalWdith.push(finalWidth); changesOldWidth.push(oldWidth);
                            if (this.gridInstance.model.scrollSettings.frozenColumns > 0 || (this.gridInstance.model.groupSettings.groupedColumns.length && this.gridInstance.model.isEdit)) {
                                var colIndex = i + hiddenLen;
                                this.gridInstance.columnsWidthCollection[colIndex] = finalWidth;
                                this.gridInstance.setWidthToColumns();
                                if (this.gridInstance.model.scrollSettings.frozenColumns <= colIndex + 1) {
                                    this.gridInstance.getHeaderContent().find(".e-movableheader").css("margin-left", finalWidth);
                                    this.gridInstance.getContent().find(".e-movablecontent").css("margin-left", finalWidth);
                                    if(this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
                                        this.gridInstance.getFooterContent().find(".e-movablefooter").css("margin-left", finalWidth);
                                }
                            }
                        }

                    }
                    this.gridInstance._colgroupRefresh();
                    this.gridInstance._recalculateIndentWidth();
                    args = { columnIndex: changesCellIndex, column: argCols, target: currentTh, oldWidth: changesOldWidth, newWidth: changesFinalWdith, extra: argExtra };
                    this.gridInstance._trigger("resizeEnd", args);
                    for (var i = 0; i < changesCellIndex.length; i++) {
                        this.gridInstance.columnsWidthCollection[changesCellIndex[i]] = changesFinalWdith[i];
                        this.gridInstance.model.columns[changesCellIndex[i]]["width"] = changesFinalWdith[i];
                    }
                    args = { columnIndex: changesCellIndex, column: argCols, target: currentTh, oldWidth: changesOldWidth, newWidth: changesFinalWdith, extra: argExtra };
                    this.gridInstance._trigger("resized", args);
                    if (this.gridInstance.model.summaryRows.length > 0)
                        this.gridInstance._summaryColRrefresh();
					this.gridInstance._findColumnsWidth();
                }				
            }
        },
        _getContentWidth: function (cellindx) {
            var contentWidth = 0;
            var $span = ej.buildTag('span', {}, {}), proxy = this.gridInstance, tdWidth;
            if (!ej.isNullOrUndefined(proxy._gridRows)) {
                var rows = proxy._gridRows;
                if (proxy.model.scrollSettings.frozenColumns && proxy.model.currentViewData.length && cellindx >= proxy.model.scrollSettings.frozenColumns) {
                    rows = rows[1];
                    cellindx = cellindx - proxy.model.scrollSettings.frozenColumns;
                }
                $.each(rows, function (indx, row) {
                    if ($(row).is('.e-row,.e-alt_row') && !$(row).is('.e-editedrow')) {
					    var td = $(row).find('td.e-rowcell').eq(cellindx);
					    var content = $(td).html();
					    if (proxy.model.columns[cellindx]["commands"])
					        $span.html($(content).children());
					    else if (td.hasClass("e-validError"))
					        $span.html($(content).attr("value"));
					    else
						    $span.html(content);
					    $(td).html($span);
						tdWidth = td.find('span:first').width() > 0 ? td.find('span:first').width() + parseFloat(td.css("padding-left")) + parseFloat(td.css("padding-right")) : td.find('span:first').width();
					    if (tdWidth > contentWidth)
						    contentWidth = tdWidth;
					    $(td).html(content);
                    }
				});
			}
            proxy._refreshUnboundTemplate(this.gridInstance.getContentTable());
            return contentWidth;
        },
    _getHeaderContentWidth: function ($cellDiv) {
            var headerWidth = 0, $span = ej.buildTag('span', {}, {});
			var IE = this.gridInstance.getBrowserDetails().browser == "msie" ;
			if(IE)
			    $span.css("position","absolute");
            var content = $cellDiv.html();
            $span.html(content);
            $cellDiv.html($span);
            headerWidth = $cellDiv.find('span:first').width() + parseFloat($cellDiv.css("padding-left")) + parseFloat($cellDiv.css("padding-right"));
			if(IE)
                headerWidth += 2;
            if(this.gridInstance.model.allowFiltering && (this.gridInstance.model.filterSettings.filterType == "menu" || this.gridInstance.model.filterSettings.filterType == "excel")){
                var filter = $cellDiv.parent().find(".e-filtericon");
                headerWidth = headerWidth + filter.width() + 10;
				if(filter.length)
				headerWidth += parseFloat(filter.css("margin-left"));
			}
            $cellDiv.html(content);
            return headerWidth;
        },
    };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Toolbar elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) { 
    ej.widget("ejToolbar", "ej.Toolbar", {

        element: null,

        model: null,
        validTags: ["div", "span"],
        _setFirst: false,

        _rootCSS: "e-toolbar",
        angular: {
            terminal: false
        },


        defaults: {

            height: "",

            width: "",

            enabled: true,

            hide: false,

            disabledItemIndices: [],

            enabledItemIndices: [],

            enableSeparator: false,

            orientation: "horizontal",

            enableRTL: false,

            isResponsive: false,

            showRoundedCorner: false,

            htmlAttributes: {},

            dataSource: null,
			
			Items:{

                id: "id",

                tooltipText: "tooltipText",

                imageUrl: "imageUrl",

                text: "text",

                imageAttributes: "imageAttributes",

                spriteCssClass: "spriteCssClass",

                htmlAttributes: "htmlAttributes",

                group: "group",
				
                template:"template",

                overflow: 'overflow'
            },

            query: null,
		
			responsiveType:"popup",


            fields: {

                id: "id",

                tooltipText: "tooltipText",

                imageUrl: "imageUrl",

                text: "text",

                imageAttributes: "imageAttributes",

                spriteCssClass: "spriteCssClass",

                htmlAttributes: "htmlAttributes",

                group: "group",
				
                template:"template",

                overflow: 'overflow'
            },
            tooltipSettings: {
                associate: "mouseenter",
                showShadow: true,
                position: {
                    stem: { horizontal: "left", vertical: "top" }
                },
                tip: {
                    size: { width: 5, height: 5 },
					adjust: { xValue: 17, yValue: 17 }
                },
                isBalloon: false
            },

            cssClass: "",
			
			targetID : null,

            create: null,

            click: null,

            itemHover: null,

            itemLeave: null,
			
			overflowOpen:null,
			
			overflowClose:null,

            destroy: null

        },


        dataTypes: {
            enabled: "boolean",
            hide: "boolean",
            enableSeparator: "boolean",
            disabledItemIndices: "data",
            enabledItemIndices: "data",
            orientation: "enum",
            enableRTL: "boolean",
            showRoundedCorner: "boolean",
            isResponsive: "boolean",
            dataSource: "data",
            query: "data",
            fields: "data",
            cssClass: "string",
            htmlAttributes: "data",
			targetID: "string",
			responsiveType:"enum"
        },



        hide: function () {
            if (!this.model.enabled && (this.element.css("display") == "none")) return false;
            this.element.css("display", "none");
			this.model.hide = true;
        },

        show: function () {
            if (!this.model.enabled && (this.element.css("display") != "none")) return false;
            this.element.css("display", "block");
			this.model.hide = false;
        },


        _init: function () {
            if(this.model.targetID != null)
				this.element.html($("#" + this.model.targetID).find('ul,ol'));
			this._cloneElement = $(this.element).clone();
			//Stored the local & remote data source processed value. 
			 
			this._localDataSource=null;
            if (this.model.dataSource != null) {
                this._generateTemplate();
            }
			else if(this.model.Items != null)
			{
			  this._generateTemplate();
			}
            (!(this.model.dataSource instanceof ej.DataManager)) && this._initialize();
            this._renderTooltip(this.model.tooltipSettings);
        },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "height":
                        this._setHeight(options[option]);
                        break;
                    case "width":
                        this.model.width = options[option];
                        this._setWidth();
                        this._bindUnbindWidth();
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "disabledItemIndices": {
                        this._disableItemByIndex(options[option]);
						options[option] = this.model.disabledItemIndices;
                        break;
                    }
                    case "enabledItemIndices": {
						this._enableItemByIndex(options[option]); 
						break;
					}
                    case "isResponsive":
                        this.model.isResponsive = options[option];
                        if(this.model.isResponsive) {
							this._responsiveLayout();
							this._renderTooltip(this.model.tooltipSettings);
						}
						else
							this._removeResponsive();
                        break;
                    case "hide":
                        this._controlVisibleOptions(options[option]);
                        break;
                    case "orientation":
                        this._setOrientation(options[option]);
                        this.model.orientation = options[option];
                        this._wireResizing();
                        break;
					case "tooltipSettings":
					    this.model.tooltipSettings = $.extend(true, this.model.tooltipSettings, options[option]);
						this._renderTooltip(this.model.tooltipSettings);
						break;
                    case "enableRTL":
                        this._enableRTL(options[option]);
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "htmlAttributes":
                        this._addAttr(options[option]);
                        break;
                    case "enableSeparator":
                        this.model.enableSeparator = options[option];
                        this._renderToolbarSeparator();
                        break;
                    case "fields":
                        $.extend(this.model.fields, options[option]);
                        break;
                    case "query":
                        this.model.query = options[option];
                        break;
                    case "dataSource":
                        for (var optio in options) {
                            if (optio == "fields") $.extend(this.model.fields, options[optio]);
                            if (optio == "query") this.model.query = options[optio];
                        }
                        this._refreshTagItems(option, options[option]);
                        break;
					case "Items":
					 
					   $.extend(this.model.Items, options[option]);
					   this._refreshTagItems(option, options[option]);
					   break;
					case "targetID":
						this.model.targetID = options[option];
						this._setTargetID();					
						break;
					
                }
            }
        },
		
		_setTargetID: function() {
			this.element.removeAttr('role tabindex aria-disabled style');			
			$(this._spantag).remove();
			$(this._liTemplte).remove();			
			this._liTemplte = this._tipRes = null;		
			this.element.removeClass('e-widget e-box e-toolbarspan e-rtl');
			this.element.find('ul,ol').removeClass('e-ul e-horizontal e-vertical e-separator e-comnrtl');
			this.element.find('li').removeClass('e-tooltxt e-comnrtl');
			this.element.find('li').removeAttr('aria-label');
			this._init();
		},
		
        _refreshTagItems: function (key, value) {
            this.model[key] = value;
            this.element.empty();
            this._generateTemplate();
            this._initialize();
        },

        _setHeight: function (val) {
            this.element.css('height', val);
        },

        _setWidth: function () {
            if (this.model.width == "auto") {
                var itemswidth = parseFloat(this.element.css('border-left-width')) + parseFloat(this.element.css('border-right-width')),
                listElement = this.element.find('ul').children('li'), listUl = this.element.find('ul'),resEle;
				if(this.model.responsiveType=="inline")
				 resEle = this.element.find('.e-arrow-sans-down');
				 else
				resEle = this.element.find('.e-toolbar-res-arrow');
				
				for(var i=0, len = listUl.length; i < len; i++) {           // calculate separator width also
                    if (listUl[i] != null && $(listUl[i]).hasClass('e-separator'))
                        itemswidth += parseFloat(listUl.eq(i).css('border-right-width')) + parseFloat(listUl.eq(i).css('border-left-width'));
                }
                if (resEle[0] != null)
				 if(this.model.responsiveType=="inline")
                   itemswidth += Math.round(this.element.find('.e-arrow-sans-down').outerWidth()) + 8; // 8px for position
				 else
				   itemswidth += Math.round(this.element.find('.e-toolbar-res-arrow').outerWidth()) + 8;// 8px for position
                
                for (var i = 0, len = listElement.length; i < len; i++) {
                    if (listElement[i] != null)
                        itemswidth += Math.round(listElement.eq(i).outerWidth());
                }
                this.element.css("width", Math.ceil(itemswidth));
            } else
                this.element.css('width', this.model.width);
        },
        _bindUnbindWidth: function () {
            (this.model.width != "auto") ? this._off($(window), "resize", this._widthHandler) : this._on($(window), "resize", this._widthHandler);
        },
        _widthHandler: function (e) {
            this._setWidth(this.model.width);
        },

        _setOrientation: function (value) {
            if (value != ej.Orientation.Vertical) {
                this.element.removeClass(this.model.cssClass).addClass("e-toolbarspan " + this.model.cssClass);
                this.itemsContainer.removeClass("e-ul e-vertical").addClass("e-ul e-horizontal");
            }
            else {
                this.element.removeClass("e-toolbarspan " + this.model.cssClass).addClass(this.model.cssClass);
                this.itemsContainer.removeClass("e-ul e-horizontal").addClass("e-ul e-vertical");
            }
            this.items.addClass("e-tooltxt");
			
        },

        _reSizeHandler: function () {
			if (this._isResized && this._liTemplte.children().length > 0) {
                var showContainer = this.element.children("ol.e-show, ul.e-show");
                var hiddenContainer = this._liTemplte.children("ol.e-show, ul.e-show");
                if (showContainer.length > 0 || hiddenContainer.length > 0) {
                    $(this._liTemplte.children()).appendTo(this.element);
                } else {
                    $(this._liTemplte.children()).insertBefore($(this.element).find("span.e-res-pos"));
                }
                this._renderToolbarSeparator();
			  if(this.model.responsiveType!="inline")
                this._liTemplte.addClass("e-display-none");
                this._contstatus = false;
            }
			this._elementWidth = (typeof window.getComputedStyle == "function") ? parseFloat(window.getComputedStyle(this.element[0]).width) : this.element.width()-1; // -1 for IE8 get exact width of an element no border and margin            
            this._liWidth = this._spanWidth;
            var visibleContainer = this.element.children("ol.e-show:visible, ul.e-show:visible");
            var itemContainer = this.element.children("ol:visible:not(.e-show), ul:visible:not(.e-show)");
            this._spantag.removeClass("e-display-block").addClass("e-display-none");
            this._ensureOverflow(visibleContainer);
            this._ensureOverflow(itemContainer);
            if (this.model.responsiveType=="inline")
            {
                this._liTemplte.removeClass('e-normal');
                this._liTemplte.css("width",this.element.width());
            }
            this._isResized = true;
        },

        _ensureOverflow: function(itemContainer) {
            for (var i = 0; i < itemContainer.length; i++) {
                this._liWidth += $(itemContainer[i]).outerWidth(true)+8;
                if (this._liWidth > this._elementWidth) {
                    if (!this._spantag.hasClass("e-display-block"))
                    this._spantag.removeClass("e-display-none").addClass("e-display-block");
                    this._spantag.addClass('e-res-pos');
                    this._liTemplte.addClass('e-normal');
                    this._liTemplte.append(itemContainer[i]);
                }
            }
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popup);
        },
        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _btnMouseClick: function (e) {
            var args, btnpos, btnposx, btnposy, poscur = 1, eleWidth = this.element.outerWidth(), eleHeight = this.element.outerHeight(), resWidth = $(this._liTemplte).outerWidth(), winWidth = $(window).width(), winLeft = $(window).scrollLeft();
            if (!$(e.currentTarget).hasClass("e-disable")) {
                /*Context Menu Functionality*///need to write enableRTL
              var maxZ = this._getZindexPartial();
                btnpos = this._getOffset(this.element);
                btnposx = this.model.enableRTL ? btnpos.left : (btnpos.left + eleWidth - resWidth);
                btnposy = btnpos.top + eleHeight - poscur + 2;
                btnposx = btnposx < winLeft ? winLeft + poscur : ((btnposx + resWidth) > (winWidth + winLeft) ? winWidth - resWidth + winLeft - poscur : btnposx);
                if (this._contstatus) {
                    this._liTemplte.addClass("e-display-none");
					if(this.model.responsiveType=="inline")
					   this._spantag.removeClass("e-active");
                    this._contstatus = false;	
                   args = { currentTarget: e.currentTarget, clientX:e.clientX ,clientY:e.clientY , cancel:e.cancellable};					
					this._trigger("overflowClose",args);
                  					
                } else {
				   this._liTemplte.removeClass("e-display-none");
                   if(this.model.responsiveType!="inline")
				     this._liTemplte.css({ "top": btnposy + "px", "left": btnposx + "px", "z-index": maxZ });
				   if(this.model.responsiveType=="inline")	
                      this._spantag.addClass("e-active");
                    this._contstatus = true;
					args = { currentTarget: e.currentTarget, clientX:e.clientX ,clientY:e.clientY , cancel:e.cancellable};
					this._trigger("overflowOpen",args);
				 if(this.model.responsiveType!="inline")
                    this._on(ej.getScrollableParents(this.element), "scroll", this._hidecontext);
                    this.element.bind("click", $.proxy(this._hidecontext, this));
                }
                if ((this._contstatus)&&(this.model.responsiveType!="inline"))
                    this._on($(document), "mouseup", this._documentClick);
					 if(!this._contstatus)
				 this._off($(document), "mouseup", this._documentClick);
                this._removeListHover();
            }
        },

        _hidecontext: function (e) {
            if ((!$(e.target).is($("#" + this.element[0].id + "_target")))&&(this.model.responsiveType!="inline")) {
                this._liTemplte.addClass("e-display-none");
                this._contstatus = false;
                this.element.unbind("click", $.proxy(this._hidecontext, this));
                this._off(ej.getScrollableParents(this.element), "scroll", this._hidecontext);
                this._off($(document), "mouseup", this._documentClick);
            }
        },

        _documentClick: function (e) {
            if (!$(e.target).is($("#" + this.element[0].id + "_target")) && !($(e.target).closest("div#" + this.element[0].id + "_hiddenlist").length != 0 || $(e.target).parents().hasClass("e-ddl-popup"))) {
                this._liTemplte.addClass("e-display-none");
                this._contstatus = false;
				var args = { currentTarget: e.currentTarget, clientX: e.clientX, clientY: e.clientY, cancel: e.cancellable };
                this._trigger("overflowClose", args);
                this._off($(document), "mouseup", this._documentClick);
            }
        },

        _setSkin: function (skin) {
            this.element.removeClass(this.model.cssClass).addClass(skin);
			var tooltipCssClass = "e-toolbarTooltip " + skin; 
			this._subControlsSetModel("cssClass", tooltipCssClass);
        },
		_subControlsSetModel : function (prop, value){
			!ej.isNullOrUndefined(this._tipToolbar) && $(this.target).ejTooltip("option", prop, value);
			!ej.isNullOrUndefined(this._tipRes) && $(this._liTemplte).ejTooltip("option", prop, value);
		},

        _destroy: function () {
            this.element.html("");
			!ej.isNullOrUndefined(this._tipToolbar) && $(this.target).ejTooltip("destroy");
			!ej.isNullOrUndefined(this._tipRes) && $(this._liTemplte).ejTooltip("destroy");
            this._cloneElement.removeClass('e-toolbar e-js');
            this.element.replaceWith(this._cloneElement);
            this._liTemplte && this._liTemplte.remove();
            this._unWireResizing();
        },

        _initialize: function () {
            this.element.attr({ "role": "toolbar", "tabindex": "0" });
            var liList = this.element.children().find('li');
            this._focusEnable = true;
            this._renderControl();
            this._responsiveLayout();
            this._wireEvents();
        },
        _responsiveLayout: function () {
            this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.isResponsive && (this.model.orientation == "horizontal")) {
                if (!ej.isNullOrUndefined(this._liTemplte)) {
                    !ej.isNullOrUndefined(this._tipRes) && this._tipRes.destroy();
                    $(this._liTemplte).remove();
                }
				this._spantag = $("<span id='" + this.element[0].id + "_target' class='e-icon e-toolbar-res-arrow e-rel-position e-display-block' unselectable='on'></span>");
				if(this.model.responsiveType=="inline")
				{
				this._spantag.removeClass("e-toolbar-res-arrow").addClass("e-inlinearrow e-arrow-sans-down");
                }
                var visibleContainer = this.element.children("ol.e-show, ul.e-show");
                if (visibleContainer.length > 0) {
                    this.element[0].insertBefore(this._spantag[0], this.element[0].childNodes[0]);
                } else {
                    this._spantag.appendTo(this.element);
                }
				this._liTemplte = $("<div id='" + this.element[0].id + "_hiddenlist' class='e-responsive-toolbar e-display-none e-abs-position " + $(this.element)[0].className + "'></div>");
                if(this.model.responsiveType=="inline")
                   this._liTemplte.removeClass("e-abs-position").addClass("e-inline");				 
                this._spanWidth = this._spantag.outerWidth(true) + 8; // 8px from right of span 
                if (this.model.enableRTL) this._liTemplte.addClass('e-rtl');
                this._isResized = false;
				this._elementWidth = (typeof window.getComputedStyle == "function") ? parseFloat(window.getComputedStyle(this.element[0]).width) : this.element.width()-1; // -1 for IE8 get exact width of an element no border and margin            
				this._liWidth = this._spanWidth;
				for (var i = 0; i < this.itemsContainer.length; i++) {
                this._liWidth += $(this.itemsContainer[i]).outerWidth(true);
				}
                if (this._liWidth > this._elementWidth)
                this._reSizeHandler();
                else 
				this._spantag.removeClass("e-display-block").addClass("e-display-none");
				if(this.model.responsiveType=="inline")
				  $(this.element[0]).append(this._liTemplte);
				else
                  $('body').append(this._liTemplte);
                this._renderTooltip(this.model.tooltipSettings);
            }
            this._on($("#" + this.element[0].id + "_target"), "mousedown", this._btnMouseClick);
            this._wireResizing();
            this._controlVisibleOptions(this.model.hide);
            this._enableRTL(this.model.enableRTL);
			this._disabledItems = this.model.disabledItemIndices; 
            this._controlStatus(this.model.enabled);
			this.model.disabledItemIndices = this._disabledItems;
            if (this.model.disabledItemIndices.length != 0)
                this._disableItemByIndex(this.model.disabledItemIndices);
            if (this.model.enabledItemIndices.length != 0)
                this._enableItemByIndex(this.model.enabledItemIndices);
            this._setWidth();
        },
        _removeResponsive: function () {
            $(this._spantag).remove();
			!ej.isNullOrUndefined(this._tipRes) && $(this._liTemplte).ejTooltip("destroy");
            var list = $(this._liTemplte).children('ul');
            $(this._liTemplte).detach();
            $(this.element).append(list);
            this.itemsContainer = this.element.children("ol,ul");
            this.items = this.itemsContainer.children('li');
            this._off(this.items, "mouseup");
            this._off(this.items, "mousedown");
            this._off(this.element, "mousedown");
            this._wireEvents();
            this._wireResizing();
            this._setWidth();
        },

        _controlVisibleOptions: function (value) {
            value != false ? this.hide() : this.show();
        },

        _controlStatus: function (value) {
            value != true ? this.disable() : this.enable();
        },

        _roundedCorner: function (value) {
            if (value) {
                this.element.addClass('e-corner');
                this._liTemplte && this._liTemplte.addClass('e-corner');
            } else {
                this.element.removeClass('e-corner');
                this._liTemplte && this._liTemplte.removeClass('e-corner');
            }
			this._subControlsSetModel("showRoundedCorner", value);
        },

        _generateTemplate: function () {
            var proxy = this, queryPromise;
            this.element.css("visibility", "hidden");
            if (this.model.dataSource instanceof ej.DataManager) {
                queryPromise = this.model.dataSource.executeQuery(this.model.query);
                queryPromise.done(function (e) {
                    proxy._generateGroup(e.result);
                    proxy._initialize();
                    proxy.element.css("visibility", "");
                });
            } else if(this.model.dataSource!=null)
			{ 
			    proxy._generateGroup(proxy.model.dataSource);
                proxy.element.css("visibility", "");
               
            }
			else {
                proxy._generateGroup(proxy.model.Items);
                proxy.element.css("visibility", "");
            }
        },
        _generateGroup: function (value) {
            var proxy = this;
			this._localDataSource=value;
            var y = -1;
            var groupArray = [];
            for (var i = 0; i < value.length; i++) {
                if (this._isNewGroup(value[i][this.model.fields.group], groupArray)) {
                    groupArray[++y] = value[i][this.model.fields.group];
                    var index = -1;
                    proxy.itemsSource = [];
                    for (var x = i; x < value.length; x++) {
                        if (value[i][this.model.fields.group] == value[x][this.model.fields.group]) {
                            proxy.itemsSource[++index] = value[x];
                        }
                    }
                    proxy.element.append(proxy._generateTagitems());
                }
            }

        },
        _isNewGroup: function (value, group) {
            if (!group)
                return true;
            for (var i = 0; i < group.length; i++) {
                if (value == group[i])
                    return false;
            }
            return true;
        },


        _renderControl: function () {
            this.element.addClass("e-widget e-box");
            this._renderToolbarItems();
            this._addAttr(this.model.htmlAttributes);
            this._setOrientation(this.model.orientation);
            this._renderToolbarSeparator();
            this._setHeight(this.model.height);
            this._bindUnbindWidth();
        },

        _renderToolbarItems: function () {
            this.target = this.element[0];
            this.itemsContainer = this.element.children("ol,ul");
            this.itemsContainer.children("ol,ul").remove();
            this.items = this.itemsContainer.children('li');
            for (var i = 0; i < this.items.length; i++) {
                if (ej.isNullOrUndefined($(this.items[i]).attr("title")) && ej.isNullOrUndefined($(this.items[i]).attr("aria-label")))
                    $(this.items[i]).attr("aria-label", this.items[i].id);
            }
            this._liCount = this.items.length;
        },

        _generateTagitems: function () {
            var list, i;
            list = this.itemsSource;
            this.ultag = ej.buildTag('ul');
            for (i = 0; i < list.length; i++) {
                if (list[i][this.model.fields.overflow] == "show") {
                    this.ultag.addClass('e-show');
                }
                this.ultag.append(this._generateLi(list[i]));
            }
            return this.ultag;
        },

        _generateLi: function (toolbarItem) {
            var litag, imgtag, divtag, i;
            litag = ej.buildTag('li');
            if (toolbarItem[this.model.fields.id])
                litag.attr('id', toolbarItem[this.model.fields.id]);
            else 
                (toolbarItem[this.model.fields.text]) && litag.attr('id', toolbarItem[this.model.fields.text]);
            if (toolbarItem[this.model.fields.tooltipText])
                litag.attr('title', toolbarItem[this.model.fields.tooltipText]);
            if ((toolbarItem[this.model.fields.imageUrl]) && (toolbarItem[this.model.fields.imageUrl] != "")) {
                //Creating the image tag
                imgtag = ej.buildTag('img.e-align', '', {}, { 'src': toolbarItem[this.model.fields.imageUrl], 'alt': toolbarItem[this.model.fields.text] });
                if (toolbarItem[this.model.fields.imageAttributes]) this._setAttributes(toolbarItem[this.model.fields.imageAttributes], imgtag);
                litag.append(imgtag);
            }
            if ((toolbarItem[this.model.fields.spriteCssClass]) && (toolbarItem[this.model.fields.spriteCssClass] != "")) {
                //Creating the Sprite image tag
                divtag = ej.buildTag('div.e-align ' + toolbarItem[this.model.fields.spriteCssClass] + ' e-spriteimg');
                litag.append(divtag);
            }
            if ((toolbarItem[this.model.fields.text]) && (toolbarItem[this.model.fields.text] != "")) {
                //Creating text Content inside the  tag
                litag.append(toolbarItem[this.model.fields.text]);
            }
            if (toolbarItem[this.model.fields.htmlAttributes]) this._setAttributes(toolbarItem[this.model.fields.htmlAttributes], litag);
              if(toolbarItem[this.model.fields.template])
			{
			
			divtag=ej.buildTag('div .e-align' ,toolbarItem[this.model.fields.template]);
			litag.append(divtag);
			}
            return litag;
        },


        _setAttributes: function (data, element) {
            for (var key in data) {
                $(element).attr(key, data[key]);
            }
        },

        _renderToolbarSeparator: function () {
            var i, len;
            if (this.model.enableSeparator) {
                for (i = 0, len = this.itemsContainer.length - 1; i < len; i++) {
                    $(this.itemsContainer[i]).addClass("e-separator");
                }
				if (this.itemsContainer.length == 1) {
                        for (i = 0, len = this.itemsContainer[0].children.length; i < len; i++) {
                            if (i == len - 1) $(this.itemsContainer[0].children[i]).removeClass("e-separator");
                            else
                                $(this.itemsContainer[0].children[i]).addClass("e-separator");
                        }
                    }    
            } else {
                this.itemsContainer.removeClass('e-separator').find('.e-separator').removeClass('e-separator');
            }
            this._setWidth();
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.element.addClass(value);
                else if (key == "disabled" && value == "disabled") proxy.disable();
                else proxy.element.attr(key, value)
            });
        },


        _enableRTL: function (value) {
            if (value) {
                this.element.addClass('e-rtl');
                this.items.addClass('e-comnrtl');
                if (this.model.orientation == ej.Orientation.Horizontal) {
                    this.itemsContainer.addClass('e-comnrtl');
                }
                if (this._liTemplte) this._liTemplte.addClass('e-rtl');
            } else {
                this.element.removeClass('e-rtl');
                this.items.removeClass('e-comnrtl');
                if (this.model.orientation == ej.Orientation.Horizontal) {
                    this.itemsContainer.removeClass('e-comnrtl');
                }
                if (this._liTemplte) this._liTemplte.removeClass('e-rtl');
            }
            this.model.enableRTL = value;
			this._subControlsSetModel("enableRTL", value);
            this._renderToolbarSeparator();
        },

        _renderTooltip: function (options) {
            var model =$.extend(true, {}, options); 
			if(!ej.isNullOrUndefined(model.cssClass))//which holds the css for the tooltip
				model.cssClass = model.cssClass + " e-toolbarTooltip " + this.model.cssClass;
			else 
				model.cssClass = "e-toolbarTooltip " + this.model.cssClass;
            model.enableRTL = this.model.enableRTL;
			model.showRoundedCorner = this.model.showRoundedCorner;
			model.target ="li[data-content], li[title]" ;
			model.beforeOpen = this._showTooltip;
            this._tipToolbar = $(this.target).ejTooltip(model).data("ejTooltip");
			if(this.model.isResponsive && !ej.isNullOrUndefined(this._liTemplte))
				this._tipRes = $(this._liTemplte).ejTooltip(model).data("ejTooltip");
        },
		_showTooltip : function (e){
			var currentItem = $(e.event.currentTarget), targetItem = e.event.target;
			if (currentItem.hasClass("e-disable"))
				e.cancel = true;
		
		},
		_hideTooltip : function (){
			//tap to select the items, mousemove triggered after the tap, so private variable isHided of Tooltip is set as false
			if(!ej.isNullOrUndefined(this._tipToolbar)){ this._tipToolbar.hide(); this._tipToolbar._isHidden= false;}
			if(!ej.isNullOrUndefined(this._tipRes)){ this._tipRes.hide(); this._tipRes._isHidden = false;}
		},
        _addOverlay: function (element) {
            for (var i = 0; i < element.length; i++) {
                if (!$(element[i]).hasClass('e-disable')) {
                    $(element[i]).addClass('e-disable');
                    var ele = ej.buildTag("div.e-item-overlay");
                    $(element[i]).append(ele);
                }
            }
        },
        _removeOverlay: function (element) {
            for (var i = 0; i < element.length; i++) {
                $(element[i]).children(".e-item-overlay").remove();
            }
        },



        disableItem: function (lielement) {
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) return;
            if (!current.hasClass("e-disable")) {
                current.attr("aria-disabled", true).removeAttr("aria-label");
                this._addOverlay(current);
            }
            current.removeClass("e-hover e-active").attr("data-aria-selected", false);
        },


        enableItem: function (lielement) {
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) return;
            current.removeClass("e-disable").attr("aria-disabled", false).removeClass('e-disable');
            this._removeOverlay(current);
        },


        disableItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.disableItem(lielement);
        },

        enableItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.enableItem(lielement);
        },

        _enableItemByIndex: function (indices) {
            var index;
            if (!this.model.enabled) return false;
            if (indices.length != 0) {
                for (var i = 0; i < indices.length; i++) {
                    if ($.inArray(indices[i], this.model.disabledItemIndices) > -1) {
                        index = $.inArray(indices[i], this.model.disabledItemIndices);
                        this.enableItem(this.items[this.model.disabledItemIndices[index]]);
						this.model.disabledItemIndices.splice(index, 1);
                    }

                }
            }
        },

        _disableItemByIndex: function (indices) {
			if (!this.model.enabled) return false;
			this._disabledItems = this.model.disabledItemIndices; 
			for(var i=0; i< indices.length; i++){
				if ($.inArray(indices[i], this.model.disabledItemIndices) < 0)
					this._disabledItems.push(parseInt(indices[i]));
			}
			for (var i = 0; i < this.items.length; i++) {
				if ($.inArray(i, this.model.disabledItemIndices) > -1)
					this.disableItem(this.items[i]);
			}
			this.model.disabledItemIndices = this._disabledItems ;
        },

        disable: function () {
            if (this.element.attr("aria-disabled") == "true") return false;
            this.element.attr("aria-disabled", true).removeAttr("aria-label");
            this._addOverlay(this.items);
            if (this.model.isResponsive && (this.model.orientation == "horizontal"))
                this._spantag.addClass("e-disable");
            this.model.enabled = false;
			this._subControlsSetModel("enabled", false);
        },


        enable: function () {
			this.model.disabledItemIndices = [];
            if (this.element.attr("aria-disabled") == "false") return false;
            this.items.removeClass("e-disable");
            this._removeOverlay(this.items);
            this.element.attr("aria-disabled", false);
            if (this.model.isResponsive && (this.model.orientation == "horizontal"))
                this._spantag.removeClass("e-disable");
            this.model.enabled = true;
			this._subControlsSetModel("enabled", true);
        },

        refresh: function() {
            this._reSizeHandler();
        },
        
        selectItem: function (lielement) {
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) return;
            current.addClass("e-active").attr("data-aria-selected", true);
            this._activeItem = $(this.items).index(current);
        },


        deselectItem: function (lielement) {
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) return;
            current.removeClass("e-active").attr("data-aria-selected", false);
        },

        selectItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.selectItem(lielement);
        },


        deselectItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.deselectItem(lielement);
        },


        removeItem: function (lielement) {
            this.model.disabledItemIndices = [];
            var current = $(lielement);
			var j=0;
            if ((current == null) || (current.length <= 0)) return;
            current.remove();
            this.items = this.itemsContainer.children('li');
			for(var i=0; i< this.items.length ; i++){
				if($(this.items[i]).hasClass("e-disable"))
					this.model.disabledItemIndices [j++] = i;
			}
        },


        removeItemByID: function (liid) {
            var lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) return;
            this.removeItem(lielement);
        },
        _wireResizing: function () {
            (this.model.isResponsive && (this.model.orientation == "horizontal")) ? $(window).bind('resize', $.proxy(this._reSizeHandler, this)) : this._unWireResizing();
        },

        _unWireResizing: function () {
            $(window).unbind('resize', $.proxy(this._reSizeHandler, this));
        },

        _wireEvents: function () {
            this._on(this.element, "mousedown", this._clickEventHandler);
            this._on(this.element, "focus", this._focusElement);
            this._on(this.element, "blur", this._targetBlur);
            this._on(this.items, "mouseenter", this._onItemHover);
            this._on(this.items, "mouseleave", this._onItemLeave);
            this._on(this.items, "mousedown", this._onItemClick);
            this._on(this.items, "mouseup", this._onItemClick);
        },

        _onItemHover: function (e) {
            var currentItem = $(e.currentTarget), targetItem = e.target;
            if (!currentItem.hasClass("e-disable")) {
                this.items.removeClass("e-hover");
                currentItem.addClass("e-hover");
               var args = { currentTarget: currentItem, target: targetItem, status: this.model.enabled };
                this._trigger("itemHover", args);
            }
			else
				clearTimeout(this._tipToolbar.mouseTimer);
        },

        _onItemClick: function (e) {
            if ($(e.currentTarget).hasClass('e-disable') || e.which!=1) return false; //e.which for Opera
            var currentItem = e.currentTarget, targetItem = e.target;
			if(!ej.isDevice()) this._hideTooltip();
            if (e.type == "mousedown") {
                this._focusEnable = false;
                $(currentItem).addClass('e-active');
                this._focusedItem = this._currentItem = $(currentItem);
                //mappCockpit: Workaround to not click buttons on mouse up even if they are active
                this.mouseDownItem = currentItem;				
            }
            else if (e.type == "mouseup") {
                //mappCockpit: Workaround to not click buttons on mouse up even if they are active
                if(this.mouseDownItem == currentItem){
                    if($(currentItem).hasClass("e-active"))
                    {
                    this._removeSelection();
                        if (!$(currentItem).hasClass("e-disable")) {
                            var args = {currentTarget: currentItem, text: $(currentItem).attr("data-content"), target: targetItem, status: this.model.enabled, event: e };
                            if (this.model.isResponsive && this._contstatus && $(currentItem).closest('.e-responsive-toolbar').length > 0)
                                this._activeItem = this._liTemplte.find('.e-tooltxt').index(currentItem);
                            else
                                this._activeItem = $(this.items).index(currentItem);
                            
                            this._trigger("click", args);
                        }
                    }
                    //mappCockpit: Workaround to not click buttons on mouse up even if they are active
                    this.mouseDownItem = undefined;
                }
               
            }
        },

        _onItemLeave: function (e) {
            var currentItem = $(e.currentTarget), targetItem = e.target;
            if (!currentItem.hasClass("e-disable")) {
                this._removeSelection();
                currentItem.removeClass("e-hover");
               var args = { currentTarget: currentItem, target: targetItem, status: this.model.enabled };
                this._trigger("itemLeave", args);
            }
        },

        _onKeyPress: function(e) {
            var code, items, active, toFocus;
            code = (e.keyCode) ? e.keyCode : (e.which) ? e.which : e.charCode;
            if (this.model.isResponsive && this._liTemplte.find('.e-tooltxt').length > 0) {
                this._keyPressed = true;
                this._items = (this._contstatus) ? this._liTemplte.find('.e-tooltxt') : this.element.find('.e-tooltxt');
                items = this._items.filter('.e-tooltxt:visible:not(.e-hidden, .e-disable)');
            } else {
                this._keyPressed = false;
                items = this.items.filter('.e-tooltxt:visible:not(.e-hidden, .e-disable)');
            }
            if (this._focusedItem) {
                active = this._focusedItem;
                this._focusedItem = null;
            } else
                active = items.filter('.e-hover');
            if(e.type == 'keydown') {
                if(code == 9 && e.shiftKey && $(items[items.index(active) - 1]).length > 0 ){                    
                    e.preventDefault();
                    toFocus = $(items[items.index(active) - 1]);               
                } else if (code == 9 && $(items[items.index(active) + 1]).length > 0 && !e.shiftKey) {                    
                    e.preventDefault();
                    toFocus = $(items[items.index(active) + 1]);
                } else if(((code == 38 || code == 39) && this.model.orientation != ej.Orientation.Vertical) || ((code == 39 || code == 40) && this.model.orientation == ej.Orientation.Vertical)) {
                    e.preventDefault();
                    toFocus = $(items[items.index(active) + 1]).length > 0 ? $(items[items.index(active) + 1]) : items.first();
                } else if(((code == 37 || code == 40) && this.model.orientation != ej.Orientation.Vertical) || ((code == 37 || code == 38) && this.model.orientation == ej.Orientation.Vertical)) {
                    e.preventDefault();
                    toFocus = $(items[items.index(active) - 1]).length > 0 ? $(items[items.index(active) - 1]) : items.last();
                } else if(code == 33 || code == 36) {
                    e.preventDefault();
                    toFocus = items.first();
                } else if(code == 34 || code == 35) {
                    e.preventDefault();
                    toFocus = items.last();
                }
                if(toFocus) {
                    this._removeListHover();
                    toFocus.addClass('e-hover');
                }
            } else {
                switch(code) {
                    case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: break;
                    case 13: case 32:
                        e.preventDefault();
                        if (!active[0])
                            break;
                        var args = { currentTarget: active[0], target: $(active)[0], status: this.model.enabled, event: e };
                        this._trigger("click", args);
                        break;
                    case 27:
                        e.preventDefault();
                        this.element.blur();
                        break;                    
                }
            }
        },

        _removeListHover: function () {
            $(this.items).removeClass("e-hover");
        },

        _addListHover: function () {
            var activeItem = this._getActiveItem();
            if (!activeItem.hasClass('e-disable'))
                activeItem.addClass("e-hover").focus();
        },

        _getActiveItem: function () {
            if (this.model.isResponsive && this._keyPressed)
                return $(this._items[this._activeItem]);
            else
                return $(this.items[this._activeItem]);
        },

        _targetBlur: function (e) {
            e.preventDefault();
            this.element.focusout().removeClass("e-focus");
            this._removeListHover();
            this._off(this.element, "keyup", this._onKeyPress)
                ._off(this.element, "keydown", this._onKeyPress);
            this._trigger("focusOut");
        },

        _clickEventHandler: function (e) {
            this._clicked = true;
        },

        _removeSelection: function() {
            (this._currentItem && this._currentItem.attr("data-aria-selected") != "true") && this._currentItem.removeClass('e-active');
        },

        _focusElement: function (e) {
		    if(!this.element.hasClass("e-focus")){
				this.element.addClass("e-focus");
				this._on(this.element, "keyup", this._onKeyPress)
					._on(this.element, "keydown", this._onKeyPress);
				if (!this._focusEnable) {
					this._focusEnable = true;
					return;
				}
			}
            this._removeListHover();
            this._activeItem = (this._clicked) ? -1 : 0;
            if (this._getActiveItem().hasClass('e-disable') || this._getActiveItem().is(':hidden'))
                this._activeItem = $(this.items).filter('li:not([class*="e-disable"])').first().index();
            this._addListHover();
        },
    });
ej.Toolbar.ResponsiveType = {
        /**  Renders overflow popup with hamburger icon as usual. */
        Popup:"popup",
        /**  Renders overflow popup  below the toolbar itself on clicking the arrow. */
        Inline: "inline"
    };
	
})(jQuery, Syncfusion);


;
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function ($) {
    var ejTooltip = (function (_super) {
        __extends(ejTooltip, _super);
        function ejTooltip(element, options) {
            _super.call(this);
            this._rootCSS = "e-tooltip";
            this._setFirst = false;
            this.PluginName = "ejTooltip";
            this.id = "null";
            this.model = null;
            this.defaults = {
                height: "auto",
                width: "auto",
                enabled: true,
                content: null,
                containment: "body",
                target: null,
                title: null,
                closeMode: "none",
                autoCloseTimeout: 4000,
                position: {
                    stem: { horizontal: "center", vertical: "bottom" },
                    target: { horizontal: "center", vertical: "top" }
                },
                associate: "target",
                collision: "flipfit",
                showShadow: false,
                cssClass: null,
                animation: {
                    effect: "none",
                    speed: 0
                },
                isBalloon: true,
                showRoundedCorner: false,
                enableRTL: false,
                allowKeyboardNavigation: true,
                tip: {
                    size: {
                        width: 20,
                        height: 10
                    },
                    adjust: {
                        xValue: 0,
                        yValue: 0
                    }
                },
                trigger: "hover",
                create: null,
                click: null,
                destroy: null,
                hover: null,
                tracking: null,
                beforeOpen: null,
                beforeClose: null,
                open: null,
                close: null,
            };
            this.dataTypes = {
                enabled: "boolean",
                closeMode: "enum",
                autoCloseTimeout: "number",
                trigger: "enum",
                position: {
                    stem: "data",
                    target: "data"
                },
                associate: "enum",
                collision: "enum",
                showShadow: "boolean",
                animation: {
                    effect: "enum",
                    speed: "number"
                },
                isBalloon: "boolean",
                showRoundedCorner: "boolean",
                enableRTL: "boolean",
                allowKeyboardNavigation: "boolean",
                tip: {
                    size: {
                        width: "number",
                        height: "number"
                    },
                    adjust: {
                        xValue: "number",
                        yValue: "number"
                    }
                }
            };
            this.isTrack = true;
            this._isCancel = false;
            this._isHidden = true;
            this.arrowValue = { left: 0, top: 0, width: 0, height: 0, display: null };
            this.tooltipPos = { width: 0, height: 0, left: 0, top: 0, bottom: 0, right: 0, position: "absolute" };
            this.targetPos = { width: 0, height: 0, left: 0, top: 0, bottom: 0, right: 0, position: "absolute" };
            this.mouseTimer = null;
            this.positionTarget = null;
            this.positionTooltip = null;
            this.containerSize = null;
            this._createTitle = function () {
                this.tooltipTitle = ej.buildTag('div.e-def e-header', " ", {}, {});
                this.tooltipHeader = ej.buildTag('div', " ", {}, {});
                $(this.tooltipTitle).html(this.model.title).appendTo(this.tooltipHeader);
            };
            if (element) {
                if (!element["jquery"]) {
                    element = $("#" + element);
                }
                if (element.length) {
                    return $(element).ejTooltip(options).data(this.PluginName);
                }
            }
        }
        ejTooltip.prototype.setModel = function (opt, forceSet) {
            this.setModel(opt, forceSet);
        };
        ejTooltip.prototype.option = function (opt, forceSet) {
            this.option(opt, forceSet);
        };
        ejTooltip.prototype.triggerEvents = function (eventName, eventProp) {
            var temp;
            switch (eventName) {
                case "click":
                    var clickArg = eventProp;
                    temp = this._trigger(eventName, clickArg);
                    break;
                case "hover":
                    var hoverArg = eventProp;
                    temp = this._trigger(eventName, hoverArg);
                    break;
                case "tracking":
                    var trackArg = eventProp;
                    temp = this._trigger(eventName, trackArg);
                    break;
                case "beforeOpen":
                    var beforeOpenArg = eventProp;
                    temp = this._trigger(eventName, beforeOpenArg);
                    break;
                case "open":
                    var openArg = eventProp;
                    temp = this._trigger(eventName, openArg);
                    break;
                case "beforeClose":
                case "close":
                    var closeArg = eventProp;
                    temp = this._trigger(eventName, closeArg);
                    break;
            }
            return temp;
        };
        ejTooltip.prototype.enable = function (val) {
            if (this.tooltip[0].classList.contains("e-disable")) {
                this.model.enabled = true;
                this.tooltip[0].classList.remove("e-disable");
            }
        };
        ejTooltip.prototype.disable = function (val) {
            if (!this.tooltip[0].classList.contains("e-disable")) {
                this.model.enabled = false;
                this.tooltip[0].classList.add("e-disable");
            }
        };
        ejTooltip.prototype.show = function (targetElement, func) {
            if (this.model.enabled) {
                if (ej.isNullOrUndefined(targetElement)) {
                    var target = (this.model.target == null) ? this.element : $(this.element).find(this.model.target + ":first");
                    this._positionElement(target);
                }
                else {
                    this._positionElement(targetElement);
                }
                if (!ej.isNullOrUndefined(func)) {
                    if (typeof func === "string") {
                        $(this.tooltip).show(func);
                    }
                    else {
                        if (typeof func === "function") {
                            func.call.apply(this.tooltip);
                        }
                    }
                }
                else {
                    this._showTooltip();
                }
            }
        };
        ejTooltip.prototype.hide = function (func) {
            if (this.model.enabled) {
                if (!ej.isNullOrUndefined(func)) {
                    if (typeof func === "string") {
                        $(this.tooltip).hide(func);
                    }
                    else if (typeof func === "function") {
                        func.call.apply(this.tooltip);
                    }
                }
                else {
                    this._hideTooltip();
                }
            }
        };
        ejTooltip.prototype._destroy = function () {
            this.mouseTimer && clearTimeout(this.mouseTimer);
            this.timer && clearTimeout(this.timer);
            $(this.tooltip).remove();
            this.tooltip = null;
        };
        ejTooltip.prototype._setModel = function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "height":
                        this._setHeight(options[option]);
                        break;
                    case "width":
                        this._setWidth(options[option]);
                        break;
                    case "enabled":
                        this._enabled(options[option]);
                        break;
                    case "content":
                        this._setContent(options[option]);
                        break;
                    case "title":
                        this.model.title = options[option];
                        if (this.model.title == null) {
                            $(this.tooltipHeader).remove();
                            this.tooltipHeader = null;
                            this.tooltipTitle = null;
                            if (this.model.closeMode === ej.Tooltip.CloseMode.Sticky)
                                this._iconRender();
                        }
                        else
                            (ej.isNullOrUndefined(this.tooltipHeader)) ? this._createHeader() : $(this.tooltipTitle).html(this.model.title);
                        this.tooltipPos.height = $(this.tooltip).outerHeight();
                        break;
                    case "associate":
                        this.model.associate = options[option];
                        this._wireMouseEvents(false);
                        this._wireMouseEvents(true);
                        break;
                    case "position":
                        this._setPosition(options[option]);
                        break;
                    case "collision":
                        this.model.collision = options[option];
                        break;
                    case "closeMode":
                        if (typeof options[option] !== "undefined") {
                            this.model.closeMode = options[option];
                            if (this.model.closeMode == ej.Tooltip.CloseMode.Sticky)
                                this._iconRender();
                            else {
                                $(this.tooltipClose).remove();
                                this.tooltipClose = null;
                            }
                            this.tooltipPos.height = $(this.tooltip).outerHeight();
                        }
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "showShadow":
                        this._shadowEffect(options[option], this.model.position);
                        break;
                    case "isBalloon":
                        if (!ej.isNullOrUndefined(options[option])) {
                            this.model.isBalloon = options[option];
                            if (!this.model.isBalloon) {
                                $(this.tip).remove();
                                this.tip = null;
                            }
                            else
                                this._renderArrow();
                        }
                        break;
                    case "animation":
                        var val = options[option];
                        this.model.animation = $.extend(true, this.model.animation, val);
                        if (this.model.animation.effect != ej.Tooltip.Effect.None) {
                            this._off($(this.tooltip), "mouseenter", this._onTooltipMouseEnter);
                            this._off($(this.tooltip), "mouseleave", this._onTooltipMouseLeave);
                        }
                        else if (this.model.animation.effect == ej.Tooltip.Effect.None) {
                            this._on($(this.tooltip), "mouseenter", this._onTooltipMouseEnter);
                            this._on($(this.tooltip), "mouseleave", this._onTooltipMouseLeave);
                        }
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        break;
                    case "target":
                        this._wireTriggerEvents(false);
                        this.model.target = options[option];
                        this._wireTriggerEvents(true);
                        this._renderTarget();
                        break;
                    case "trigger":
                        this._setTrigger(options[option]);
                        break;
                    case "showRoundedCorner":
                        this.model.showRoundedCorner = options[option];
                        this._roundedCorner(options[option]);
                        break;
                    case "allowKeyboardNavigation":
                        this.model.allowKeyboardNavigation = options[option];
                        if (!this.model.allowKeyboardNavigation) {
                            this._off($(window), "keydown", this._keyDown);
                        }
                        else {
                            this._on($(window), "keydown", this._keyDown);
                        }
                        break;
                }
            }
        };
        ejTooltip.prototype._enabled = function (val) {
            (val) ? this.enable(val) : this.disable(val);
            this.model.enabled = val;
        };
        ejTooltip.prototype._shadowEffect = function (val, position) {
            this.model.showShadow = val;
            var shadowEffect = null;
            $(this.tooltip).removeClass("e-tooltipShadowLeft e-tooltipShadowRight");
            if (this.model.showShadow) {
                if (this.model.isBalloon) {
                    switch (position.stem.horizontal) {
                        case "center":
                            shadowEffect = (position.stem.vertical == "top") ? "e-tooltipShadowLeft" : (position.stem.vertical == "bottom") ? "e-tooltipShadowRight" : "e-tooltipShadowLeft";
                            break;
                        case "right":
                            shadowEffect = (position.target.horizontal == "center" && position.stem.vertical == "top") ? "e-tooltipShadowLeft" : "e-tooltipShadowRight";
                            break;
                        case "left":
                            shadowEffect = (position.target.horizontal == "center" && position.stem.vertical == "bottom") ? "e-tooltipShadowRight" : "e-tooltipShadowLeft";
                            break;
                    }
                }
                else
                    shadowEffect = "e-tooltipShadowLeft";
                $(this.tooltip).addClass(shadowEffect);
            }
        };
        ejTooltip.prototype._setContent = function (val) {
            this.model.content = val;
            $(this.tooltipContent).html(this.model.content);
            this.tooltipPos.height = $(this.tooltip).outerHeight();
            this.tooltipPos.width = $(this.tooltip).outerWidth();
        };
        ejTooltip.prototype._setPosition = function (val) {
            this.model.position.stem = $.extend(true, this.model.position.stem, val.stem);
            this.model.position.target = $.extend(true, this.model.position.target, val.target);
        };
        ejTooltip.prototype._setTrigger = function (val) {
            this._wireTriggerEvents(false);
            this.model.trigger = val;
            this._wireTriggerEvents(true);
        };
        ejTooltip.prototype._init = function () {
            this.id = this.element[0].id;
            this.positionTarget = $.extend(true, {}, this.model.position.target);
            this.positionTooltip = $.extend(true, {}, this.model.position.stem);
            this.tipSize = $.extend(true, {}, this.model.tip.size);
            this._initialize();
            this._render();
            this.enable(this.model.enabled);
            this._wireEvents(true);
        };
        ejTooltip.prototype._initialize = function () {
            if (ej.isNullOrUndefined(this.model.target)) {
                if (ej.isNullOrUndefined(this.model.content) && (!ej.isNullOrUndefined(this.element[0].getAttribute("tittle")))) {
                    this.model.content = this.element[0].getAttribute("tittle");
                    this.element[0].setAttribute("data-content", this.model.content);
                    this.element[0].removeAttribute("title");
                }
            }
            else
                this._renderTarget();
        };
        ejTooltip.prototype._wireEvents = function (val) {
            var wire = (val) ? "_on" : "_off";
            this._wireTriggerEvents(val);
            if (this.model.allowKeyboardNavigation)
                this[wire]($(window), "keydown", this._keyDown);
            (this.model.target != null) ? this[wire](this.element, "scroll", this.model.target, this._hideTooltip) : this[wire](this.element, "scroll", this._hideTooltip);
            this[wire]($(this.tooltip), "mouseenter", this._onTooltipMouseEnter);
            this[wire]($(this.tooltip), "mouseleave", this._onTooltipMouseLeave);
            this[wire]($(window), "resize", this._hideTooltip);
            this[wire]($(window), "touchend", this._docTouchEndHandler);
        };
        ejTooltip.prototype._wireTriggerEvents = function (val) {
            var wire = (val) ? "_on" : "_off";
            if (this.model.trigger == ej.Tooltip.Trigger.Focus)
                (this.model.target != null) ? this[wire](this.element, "blur", this.model.target, this._hideTooltip) : this[wire](this.element, "blur", this._hideTooltip);
            else
                (this.model.target != null) ? this[wire](this.element, ej.isDevice() ? "touchstart" : "mouseleave", this.model.target, this._onMouseOut) : this[wire](this.element, ej.isDevice() ? "touchstart" : "mouseleave", this._onMouseOut);
            this._wireMouseEvents(val);
            var triggerEvent = (this.model.trigger == ej.Tooltip.Trigger.Click) ? (ej.isDevice() ? "touchstart" : "click") : (this.model.trigger == ej.Tooltip.Trigger.Focus) ? (ej.isDevice() ? "touchstart" : "focus") : (ej.isDevice() ? "touchstart" : "mouseenter");
            (this.model.target != null) ? this[wire](this.element, triggerEvent, this.model.target, this._targetHover) : this[wire](this.element, triggerEvent, this._targetHover);
        };
        ejTooltip.prototype._wireMouseEvents = function (val) {
            var wire = (val) ? "_on" : "_off";
            if (this.model.associate == ej.Tooltip.Associate.MouseEnter || this.model.associate == ej.Tooltip.Associate.MouseFollow)
                (this.model.target != null) ? this[wire](this.element, ej.isDevice() ? "touchstart" : "mousemove", this.model.target, this._tooltipMove) : this[wire](this.element, ej.isDevice() ? "touchstart" : "mousemove", this._tooltipMove);
        };
        ejTooltip.prototype._render = function () {
            this.tooltip = ej.buildTag("div.e-tooltip-wrap e-widget", "", {}, { role: "tooltip", 'aria-readonly': 'true', 'aria-hidden': 'true', 'aria-describedby': this.id + '_content', 'id': this.id + '_Main' });
            this.tooltipInter = ej.buildTag("div.e-tipContainer", "", {}, {});
            this.tooltip.append(this.tooltipInter);
            if (this.model.isBalloon)
                this._renderArrow();
            $(this.model.containment).append(this.tooltip);
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
            this._createHeader();
            this._tooltipContent();
            if (this.model.cssClass)
                this.tooltip.addClass(this.model.cssClass);
            if (this.model.showRoundedCorner)
                this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.enableRTL)
                this._setRTL(this.model.enableRTL);
            this.tooltip[0].style.top = "auto";
            this.tooltip[0].style.left = "auto";
            var clientRect = this.tooltip[0].getBoundingClientRect();
            this.tooltipPos = { width: clientRect.width, height: clientRect.height, left: clientRect.left, top: clientRect.top, position: "absolute" };
            if (ej.isNullOrUndefined(this.model.target)) {
                this._containerCalc(this.element);
                this._positionElement(this.element);
            }
        };
        ejTooltip.prototype._containerCalc = function (target) {
            if (ej.isNullOrUndefined(target))
                target = this.element;
            var containerElement = { left: 0, top: 0 };
            var childElement = $(target).offset();
            this.containerSize = {
                height: (this.model.containment == "body") ? $(window).innerHeight() || document.documentElement.clientHeight || document.body.clientHeight : $(this.model.containment).innerHeight(),
                width: (this.model.containment == "body") ? $(window).innerWidth() || document.documentElement.clientWidth || document.body.clientWidth : $(this.model.containment).innerWidth()
            };
            this.containerSize.left = (this.model.containment != "body") ? ($(this.model.containment).css("position") == "static") ? ($(this.model.containment).offset().left - $(this.model.containment).offsetParent().offset().left) : 0 : 0;
            this.containerSize.top = (this.model.containment != "body") ? ($(this.model.containment).css("position") == "static") ? ($(this.model.containment).offset().top - $(this.model.containment).offsetParent().offset().top) : 0 : 0;
            childElement.left -= (this.model.containment != "body") ? (($(this.model.containment).css("position") == "static") ? $(this.model.containment).offsetParent().offset().left : $(this.model.containment).offset().left) : 0;
            childElement.top -= (this.model.containment != "body") ? (($(this.model.containment).css("position") == "static") ? $(this.model.containment).offsetParent().offset().top : $(this.model.containment).offset().top) : 0;
            this.targetPos.left = childElement.left;
            this.targetPos.top = childElement.top;
        };
        ejTooltip.prototype._setHeight = function (val) {
            this.model.height = val;
            (!isNaN(+val) && isFinite(val)) ? this.tooltip[0].style.height = val + "px" : this.tooltip[0].style.height = val;
            this.tooltip[0].style.display = "block";
            this.tooltipPos.height = this.tooltip[0].offsetHeight;
            this.tooltip[0].style.display = "none";
        };
        ejTooltip.prototype._setWidth = function (val) {
            this.model.width = val;
            if (this.model.width != "auto") {
                val = (!isNaN(+val) && isFinite(val)) ? val + "px" : val;
                this.tooltip[0].style.maxWidth = val;
                this.tooltip[0].style.minWidth = "0px";
            }
            this.tooltip[0].style.width = val;
            this.tooltip[0].style.display = "block";
            this.tooltipPos.height = this.tooltip[0].offsetHeight;
            this.tooltip[0].style.display = "none";
        };
        ejTooltip.prototype._setRTL = function (val) {
            this.model.enableRTL = val;
            val ? this.tooltip[0].classList.add("e-rtl") : this.tooltip[0].classList.remove("e-rtl");
        };
        ejTooltip.prototype._setSkin = function (skin) {
            if (this.model.cssClass != skin) {
                this.tooltip.removeClass(this.model.cssClass).addClass(skin);
                this.model.cssClass = skin;
            }
        };
        ejTooltip.prototype._roundedCorner = function (val) {
            (this.model.showRoundedCorner) ? this.tooltip[0].classList.add("e-corner") : this.tooltip[0].classList.remove("e-corner");
        };
        ejTooltip.prototype._renderArrow = function () {
            if (ej.isNullOrUndefined(this.tip)) {
                this.tip = ej.buildTag('div.e-arrowTip', " ", { 'id': this.id + "_eTip" }, {});
                var arrowTipOuter = document.createElement("div");
                arrowTipOuter.classList.add("e-arrowTipOuter");
                var arrowTipInner = document.createElement("div");
                arrowTipInner.classList.add("e-arrowTipInner");
                $(this.tip).append(arrowTipOuter).append(arrowTipInner);
                $(this.tip).insertBefore(this.tooltipInter);
            }
        };
        ejTooltip.prototype._adjustArrow = function (position) {
            var leftValue, topValue, tooltipWidth = $(this.tooltip).width(), tooltipHeight = $(this.tooltip).height();
            var positionTooltip = position.stem, positionTarget = position.target;
            var arrow = { "tipHeight": 0, "tipWidth": 0 };
            if (positionTarget.horizontal == "right" || positionTarget.horizontal == "left") {
                leftValue = (positionTooltip.horizontal == "left") ? -(this.model.tip.size.height) : (positionTooltip.horizontal == "right") ? tooltipWidth : ((tooltipWidth) / 2 - (this.tipSize.width / 2));
                if (positionTooltip.horizontal != "center")
                    topValue = (positionTooltip.vertical == "top") ? 5 : (positionTooltip.vertical == "center") ? ((tooltipHeight / 2) - (this.tipSize.width / 2)) : ((tooltipHeight - 5) - this.tipSize.width);
                else
                    topValue = (positionTooltip.vertical == "top") ? -this.tipSize.height : (positionTooltip.vertical == "bottom") ? tooltipHeight : ((this.tooltipPos.height / 2) - (this.tipSize.width / 2));
                arrow = this._arrowBinding(position, "horizontal");
            }
            else {
                topValue = (positionTooltip.vertical == "top") ? -this.tipSize.height : (positionTooltip.vertical == "bottom") ? tooltipHeight : ((tooltipHeight / 2) - (this.tipSize.width / 2));
                if (positionTooltip.vertical == "center")
                    leftValue = (positionTooltip.horizontal == "left") ? -(this.model.tip.size.height) : tooltipWidth;
                else
                    leftValue = (positionTooltip.horizontal == "left") ? 10 : (positionTooltip.horizontal == "center") ? ((this.tooltipPos.width) / 2 - (this.tipSize.width / 2)) : ((tooltipWidth - 10) - this.tipSize.width);
                arrow = this._arrowBinding(position, "vertical");
            }
            this.arrowValue.left = leftValue;
            this.arrowValue.top = topValue;
            $(this.tip).css({ height: arrow.tipHeight + "px", width: arrow.tipWidth + "px", left: leftValue + "px", top: topValue + "px", display: (positionTooltip.horizontal == "center" && positionTooltip.vertical == "center") ? "none" : "block" });
        };
        ejTooltip.prototype._arrowBinding = function (position, arrowType) {
            var positionTooltip = position.stem, condition = (arrowType == "horizontal") ? (positionTooltip.horizontal != "center") : (positionTooltip.vertical == "center");
            var tipWidth, tipHeight, borderColor = $(this.tooltip).css("border-top-color"), backgroudColor = $(this.tooltip).css("background-color"), arrowOuterSize = this.model.tip.size.height, arrowInterSize = this.model.tip.size.height - 1, arrowCalculation = { "border-top": "none", "border-bottom": "none", "border-right": "none", "border-left": "none" };
            if (condition) {
                tipWidth = this.model.tip.size.height;
                tipHeight = this.model.tip.size.width;
                $(this.tip).find(".e-arrowTipOuter").css(this._arrow(position, arrowOuterSize, borderColor, arrowCalculation, "horizontal"));
                $(this.tip).find(".e-arrowTipInner").css(this._arrow(position, arrowInterSize, backgroudColor, arrowCalculation, "horizontal"));
            }
            else {
                tipWidth = this.model.tip.size.width;
                tipHeight = this.model.tip.size.height;
                $(this.tip).find(".e-arrowTipOuter").css(this._arrow(position, arrowOuterSize, borderColor, arrowCalculation, "vertical"));
                $(this.tip).find(".e-arrowTipInner").css(this._arrow(position, arrowInterSize, backgroudColor, arrowCalculation, "vertical"));
            }
            return { tipHeight: tipHeight, tipWidth: tipWidth };
        };
        ejTooltip.prototype._arrow = function (position, size, color, arrowCalculation, arrowType) {
            var positionTooltip = position.stem, innerLeft = (arrowType == "horizontal") ? (positionTooltip.horizontal == "right") ? "0px" : "1px" : "1px", innerTop = (arrowType == "horizontal") ? "1px" : (positionTooltip.vertical == "bottom") ? "0px" : "1px";
            arrowCalculation["border-top"] = (arrowType == "horizontal") ? size + "px solid transparent" : (positionTooltip.vertical == "bottom") ? (size + "px solid " + color) : "none";
            arrowCalculation["border-bottom"] = (arrowType == "horizontal") ? size + "px solid transparent" : (positionTooltip.vertical == "top") ? (size + "px solid " + color) : "none";
            arrowCalculation["border-right"] = (arrowType == "horizontal") ? (positionTooltip.horizontal == "left") ? (size + "px solid " + color) : "none" : size + "px solid transparent";
            arrowCalculation["border-left"] = (arrowType == "horizontal") ? (positionTooltip.horizontal == "right") ? (size + "px solid " + color) : "none" : size + "px solid transparent";
            if (size == this.model.tip.size.height - 1) {
                arrowCalculation["left"] = innerLeft;
                arrowCalculation["top"] = innerTop;
            }
            return arrowCalculation;
        };
        ejTooltip.prototype._iconRender = function () {
            if (this.model.closeMode == ej.Tooltip.CloseMode.Sticky) {
                if (!ej.isNullOrUndefined(this.tooltipClose))
                    $(this.tooltipClose).remove();
                this.tooltipClose = ej.buildTag("div .e-icon", " ", {}, { 'id': "_closeIcon" });
                (this.model.title != null) ? $(this.tooltipClose).insertAfter(this.tooltipTitle).addClass("e-close") : $(this.tooltipClose).insertBefore(this.tooltipInter).addClass("e-cross-circle");
                this._on($(this.tooltipClose), "click", this._hideTooltip);
            }
        };
        ejTooltip.prototype._renderTarget = function () {
            this.targetElement = this.element.find(this.model.target);
            for (var i = 0; i < this.targetElement.length; i++) {
                if (!ej.isNullOrUndefined(this.targetElement[i].getAttribute("title"))) {
                    this.targetElement[i].setAttribute("data-content", this.targetElement[i].title);
                    this.targetElement[i].removeAttribute("title");
                }
            }
        };
        ejTooltip.prototype._tooltipContent = function () {
            this.tooltipContent = ej.buildTag('div', "", {}, { 'id': this.id + '_content', 'class': 'e-tipcontent e-def' });
            this.tooltipContent[0].innerHTML = this.model.content;
            (this.model.title != null) ? $(this.tooltipContent).insertAfter(this.tooltipHeader) : this.tooltipInter[0].appendChild(this.tooltipContent[0]);
        };
        ejTooltip.prototype._positionElement = function (target) {
            this.tooltipPos.width = $(this.tooltip).outerWidth();
            this.tooltipPos.height = $(this.tooltip).outerHeight();
            this.targetPos.width = $(target).outerWidth();
            this.targetPos.height = $(target).outerHeight();
            this._containerCalc(target);
            if (this.model.associate == ej.Tooltip.Associate.Window)
                this._browserPosition();
            else if (this.model.associate == ej.Tooltip.Associate.Axis)
                this._axisPosition();
            else if (this.model.associate == ej.Tooltip.Associate.Target)
                this._tooltipPosition(this.model.position);
            if (this.model.collision != ej.Tooltip.Collision.None && this.model.associate == ej.Tooltip.Associate.Target)
                this._calcCollision(this.model.position, target);
        };
        ejTooltip.prototype._browserPosition = function () {
            if (this.model.containment == "body") {
                this.containerSize = {
                    height: $(window).innerHeight() || document.documentElement.clientHeight || document.body.clientHeight,
                    width: $(window).innerWidth() || document.documentElement.clientWidth || document.body.clientWidth
                };
                var position = $.extend(true, {}, this.model.position);
                var calPosition = { position: "absolute", left: "auto", top: "auto", bottom: "auto", right: "auto" }, offsetTop, offsetLeft;
                if (!ej.isNullOrUndefined(this.tip))
                    $(this.tip).css({ "display": "none" });
                (this.model.position.target.horizontal == "right") ? calPosition.right = 0 : (this.model.position.target.horizontal == "left") ? calPosition.left = 0 : (calPosition.left = (this.containerSize.width / 2) - (this.tooltipPos.width / 2));
                (this.model.position.target.vertical == "top") ? (calPosition.top = 0) : (this.model.position.target.vertical == "center") ? (calPosition.top = ((this.containerSize.height / 2) - (this.tooltipPos.height / 2))) : calPosition.bottom = 0;
                if (this.model.showShadow)
                    this._shadowEffect(this.model.showShadow, position);
                $(this.tooltip).css(calPosition);
            }
        };
        ejTooltip.prototype._tooltipMove = function (event) {
            if (this.model.closeMode == ej.Tooltip.CloseMode.None && this.model.enabled) {
                var proxy = this;
                if (this._isCancel)
                    return;
                if (this.model.associate == ej.Tooltip.Associate.MouseFollow)
                    this._mousePosition(event);
                else if (this.model.associate == ej.Tooltip.Associate.MouseEnter) {
                    clearTimeout(this.mouseTimer);
                    this.mouseTimer = setTimeout(function () {
                        if (proxy.isTrack)
                            proxy._mousePosition(event);
                    }, 300);
                }
            }
        };
        ejTooltip.prototype._mousePosition = function (event) {
            var eventPageX, eventPageY;
            if (event.type == "touchstart") {
                event.preventDefault();
                eventPageX = event.touches[0].pageX;
                eventPageY = event.touches[0].pageY;
            }
            else if (event.type == "mousemove") {
                eventPageX = event.pageX;
                eventPageY = event.pageY;
            }
            this.isCollision = true;
            this._containerCalc(event.currentTarget);
            var tipGapX = 0, tipGapY = 0, tipSize = 0, positionTooltip = $.extend(true, {}, this.model.position.stem), position = $.extend(true, {}, this.model.position), containerElement = { left: 0, top: 0 }, calcPosition = { left: eventPageX, top: eventPageY }, childElement = { left: eventPageX, top: eventPageY }, containerLeft = this.containerSize.left, containerTop = this.containerSize.top;
            var targetLeft = (this.model.containment != "body") ? (eventPageX - $(this.model.containment).offset().left) : eventPageX, targetTop = (this.model.containment != "body") ? (eventPageY - $(this.model.containment).offset().top) : eventPageY;
            position.target.horizontal = position.target.vertical = "center";
            if (this.model.containment != "body")
                containerElement = ($(this.model.containment).css("position") == "static") ? $(this.model.containment).offsetParent().offset() : $(this.model.containment).offset();
            childElement.left -= containerElement.left;
            childElement.top -= containerElement.top;
            while (this.isCollision) {
                calcPosition = $.extend(true, {}, childElement);
                var tipY = (this.model.isBalloon) ? (positionTooltip.vertical == "top" || positionTooltip.vertical == "bottom") ? (5 + (this.tipSize.height / 2)) : 0 : 0, tipX = (this.model.isBalloon) ? (positionTooltip.horizontal == "right" || positionTooltip.horizontal == "left") ? (10 + (this.tipSize.width / 2)) : 0 : 0;
                tipGapX = (this.model.tip.adjust.xValue != 0) ? this.model.tip.adjust.xValue : 7;
                tipGapY = (this.model.tip.adjust.yValue != 0) ? this.model.tip.adjust.yValue : 10;
                tipSize = (this.model.isBalloon) ? (positionTooltip.horizontal != "center") ? this.model.tip.size.height : (positionTooltip.vertical != "center") ? this.model.tip.size.height : 0 : 2;
                calcPosition.left += (positionTooltip.horizontal == "right") ? -this.tooltipPos.width : (positionTooltip.horizontal == "left") ? 0 : -(this.tooltipPos.width / 2);
                calcPosition.top += (positionTooltip.vertical == "bottom") ? -this.tooltipPos.height : (positionTooltip.vertical == "top") ? 0 : -(this.tooltipPos.height / 2);
                calcPosition.left += (positionTooltip.vertical != "center") ? ((positionTooltip.horizontal == "right") ? tipX : (positionTooltip.horizontal == "left") ? -tipX : 0) : 0;
                calcPosition.left += (positionTooltip.vertical == "center") ? (positionTooltip.horizontal == "right") ? -(tipSize) : (positionTooltip.horizontal == "left") ? +(tipSize + tipGapX) : 0 : 0;
                calcPosition.top += (positionTooltip.vertical == "top") ? +(tipSize + tipGapY) : (positionTooltip.vertical == "bottom") ? -(tipSize) : 0;
                if (this.targetElement != event.currentTarget) {
                    this.targetElement = event.currentTarget;
                    if (calcPosition.left < containerLeft || (calcPosition.left + this.tooltipPos.width > (containerLeft + this.containerSize.width)))
                        this.positionTooltip.horizontal = (targetLeft >= this.tooltipPos.width) ? "right" : ((this.containerSize.width - targetLeft) >= this.tooltipPos.width) ? "left" : "center";
                    if (calcPosition.top < containerTop || ((calcPosition.top + this.tooltipPos.height) > (this.containerSize.height + containerTop)))
                        this.positionTooltip.vertical = (targetTop >= this.tooltipPos.height) ? "bottom" : ((this.containerSize.height - targetTop) >= this.tooltipPos.height) ? "top" : "center";
                }
                if (this.positionTooltip.horizontal != positionTooltip.horizontal || this.positionTooltip.vertical != positionTooltip.vertical) {
                    this.isCollision = true;
                    positionTooltip = $.extend(true, {}, this.positionTooltip);
                }
                else {
                    this.isCollision = false;
                    $(this.tooltip).css({ top: calcPosition.top + "px", left: calcPosition.left + "px", position: "absolute", right: "auto", bottom: "auto" });
                    position.stem = $.extend(true, {}, this.positionTooltip);
                    if (this.model.showShadow)
                        this._shadowEffect(this.model.showShadow, position);
                    if (this.model.isBalloon)
                        this._adjustArrow(position);
                    this._showTooltip();
                    if (this.model.associate == ej.Tooltip.Associate.MouseEnter)
                        this.isTrack = false;
                    if (this.model.associate == ej.Tooltip.Associate.MouseFollow) {
                        if (this.triggerEvents("tracking", { position: this.model.position, event: event }))
                            return;
                    }
                }
            }
        };
        ejTooltip.prototype._axisPosition = function () {
            var position = $.extend(true, {}, this.model.position);
            if (typeof this.model.position.target.horizontal == 'number')
                var leftValue = (this.model.position.target.horizontal).toString();
            if (typeof this.model.position.target.vertical == 'number')
                var topValue = (this.model.position.target.vertical).toString();
            var offsetLeft = parseInt(leftValue), offsetTop = parseInt(topValue);
            if (!ej.isNullOrUndefined(this.tip))
                $(this.tip).css({ "display": "none" });
            if (this.model.showShadow)
                this._shadowEffect(this.model.showShadow, position);
            if (this.model.isBalloon)
                this._adjustArrow(position);
            if (isFinite(offsetLeft) && isFinite(offsetTop))
                $(this.tooltip).css({ top: offsetTop, left: offsetLeft, position: "absolute" });
        };
        ejTooltip.prototype._tooltipPosition = function (position) {
            var tipSize = 0, tipGap = 0, tipAdjustment = 0, positionTooltip = $.extend(true, {}, position.stem), positionTarget = $.extend(true, {}, position.target);
            var calcPosition = $.extend(true, {}, this.targetPos);
            var tipY = (positionTooltip.vertical === "top" || positionTooltip.vertical === "bottom") ? (5 + (this.tipSize.width / 2)) : 0, tipX = (positionTooltip.horizontal === "right" || positionTooltip.horizontal === "left") ? (10 + (this.tipSize.width / 2)) : 0, tipSize = (this.model.isBalloon) ? (positionTooltip.horizontal !== "center") ? this.model.tip.size.height : (positionTooltip.vertical !== "center") ? this.model.tip.size.height : 0 : 0;
            var tipGapX = (this.model.tip.adjust.xValue != 0) ? this.model.tip.adjust.xValue : (this.model.isBalloon) ? 0 : 2, tipGapY = (this.model.tip.adjust.yValue != 0) ? this.model.tip.adjust.yValue : (this.model.isBalloon) ? 0 : 2;
            calcPosition.left += (positionTarget.horizontal === "right") ? this.targetPos.width : (positionTarget.horizontal === "left") ? 0 : (this.targetPos.width / 2);
            calcPosition.top += (positionTarget.vertical === "bottom") ? this.targetPos.height : (positionTarget.vertical === "top") ? 0 : (this.targetPos.height / 2);
            calcPosition.left += (positionTooltip.horizontal === "right") ? -this.tooltipPos.width : (positionTooltip.horizontal === "left") ? 0 : -(this.tooltipPos.width / 2);
            calcPosition.top += (positionTooltip.vertical === "bottom") ? -this.tooltipPos.height : (positionTooltip.vertical === "top") ? 0 : -(this.tooltipPos.height / 2);
            calcPosition.left += (positionTarget.horizontal !== "center") ? (positionTooltip.horizontal === "right") ? -tipSize : (positionTooltip.horizontal === "left") ? tipSize : 0 : (positionTooltip.vertical === "center") ? (positionTooltip.horizontal === "right") ? -tipSize : (positionTooltip.horizontal === "left") ? tipSize : 0 : 0;
            calcPosition.top += (positionTarget.horizontal === "center") ? ((positionTooltip.vertical === "bottom") ? -tipSize : (positionTooltip.vertical === "top") ? tipSize : 0) : (positionTooltip.horizontal === "center") ? (positionTooltip.vertical === "bottom") ? -tipSize : (positionTooltip.vertical === "top") ? tipSize : 0 : 0;
            calcPosition.left += (positionTarget.horizontal === "center" && positionTooltip.vertical !== "center") ? ((positionTooltip.horizontal === "right") ? tipX : (positionTooltip.horizontal === "left") ? -tipX : 0) : 0;
            calcPosition.top += (positionTarget.horizontal !== "center" && positionTooltip.horizontal !== "center") ? ((positionTooltip.vertical === "top") ? -tipY : (positionTooltip.vertical === "bottom") ? tipY : 0) : 0;
            calcPosition.left += (positionTarget.horizontal !== "center") ? (positionTooltip.horizontal === "right") ? -tipGapX : (positionTooltip.horizontal === "left") ? tipGapX : 0 : (positionTooltip.vertical === "center") ? (positionTooltip.horizontal === "right") ? -tipGapX : (positionTooltip.horizontal === "left") ? tipGapX : 0 : 0;
            calcPosition.top += (positionTarget.horizontal === "center") ? ((positionTooltip.vertical === "bottom") ? -tipGapY : (positionTooltip.vertical === "top") ? tipGapY : 0) : (positionTooltip.horizontal === "center") ? (positionTooltip.vertical === "bottom") ? -tipGapY : (positionTooltip.vertical === "top") ? tipGapY : 0 : 0;
            this.tooltipPos.left = calcPosition.left;
            this.tooltipPos.top = calcPosition.top;
            if (this.model.collision === ej.Tooltip.Collision.None) {
                if (this.model.isBalloon)
                    this._adjustArrow(position);
                this._shadowEffect(this.model.showShadow, position);
                $(this.tooltip).css({ "top": calcPosition.top + "px", "left": calcPosition.left + "px", position: "absolute" });
            }
        };
        ejTooltip.prototype._calcCollision = function (position, target) {
            var position = $.extend(true, {}, position), newPosition = $.extend(true, {}, position), arrowSize = this.model.tip.size.height, isCollision = true;
            var targetLeft = (this.model.containment != "body") ? ($(target).offset().left - $(this.model.containment).offset().left) : $(target).offset().left, targetTop = (this.model.containment != "body") ? ($(target).offset().top - $(this.model.containment).offset().top) : $(target).offset().top;
            var availSpace = {
                topSpace: targetTop,
                rightSpace: this.containerSize.width - (targetLeft + this.targetPos.width),
                bottomSpace: this.containerSize.height - (targetTop + this.targetPos.height),
                leftSpace: targetLeft,
                centerRight: this.containerSize.width - (targetLeft + (this.targetPos.width / 2)),
                centerLeft: (targetLeft + (this.targetPos.width / 2)),
                centerTop: targetTop + (this.targetPos.height / 2),
                centerBottom: this.containerSize.height - (targetTop + (this.targetPos.height / 2)),
                tooltipWidth: this.tooltipPos.width + arrowSize,
                tooltipHeight: this.tooltipPos.height + arrowSize
            };
            if (this.model.collision === ej.Tooltip.Collision.Fit)
                this._collisionFit(position, availSpace);
            else {
                while (isCollision) {
                    newPosition = this._collisionFlip(newPosition, availSpace);
                    if (newPosition.target.horizontal != position.target.horizontal || newPosition.target.vertical != position.target.vertical || newPosition.stem.horizontal != position.stem.horizontal || newPosition.stem.vertical != position.stem.vertical) {
                        this._tooltipPosition(newPosition);
                        position = $.extend(true, {}, newPosition);
                    }
                    else
                        isCollision = false;
                }
                if (!isCollision) {
                    if (this.model.collision == ej.Tooltip.Collision.FlipFit)
                        this._collisionFit(newPosition, availSpace);
                    else {
                        this._adjustArrow(newPosition);
                        this._shadowEffect(this.model.showShadow, newPosition);
                        $(this.tooltip).css({ "top": this.tooltipPos.top + "px", "left": this.tooltipPos.left + "px", position: "absolute" });
                    }
                }
            }
        };
        ejTooltip.prototype._collisionFlip = function (position, availSpace) {
            var tooltipPos = $.extend(true, {}, this.tooltipPos), newPosition = $.extend(true, {}, position);
            var scrollLeft = $(this.model.containment).scrollLeft(), scrollTop = $(this.model.containment).scrollTop();
            var containerLeft = this.containerSize.left, containerTop = this.containerSize.top;
            if ((tooltipPos.left + tooltipPos.width) > (containerLeft + this.containerSize.width + scrollLeft) || (tooltipPos.left < containerLeft)) {
                if (position.target.horizontal != "center")
                    newPosition.target.horizontal = (availSpace.leftSpace >= availSpace.tooltipWidth) ? "left" : (availSpace.rightSpace >= availSpace.tooltipWidth) ? "right" : "center";
                else
                    newPosition.stem.horizontal = (availSpace.centerLeft >= availSpace.tooltipWidth) ? "right" : (availSpace.centerRight >= availSpace.tooltipWidth) ? "left" : "center";
            }
            if (tooltipPos.top < containerTop)
                newPosition.target.vertical = (availSpace.bottomSpace >= availSpace.tooltipHeight) ? "bottom" : "center";
            if ((tooltipPos.top + tooltipPos.height) > (this.containerSize.height + scrollTop + containerTop))
                newPosition.target.vertical = (availSpace.topSpace >= availSpace.tooltipHeight) ? "top" : "center";
            if (newPosition.target.horizontal != position.target.horizontal || newPosition.target.vertical != position.target.vertical) {
                if (newPosition.target.horizontal == "center")
                    newPosition.stem.horizontal = (availSpace.centerLeft >= availSpace.tooltipWidth) ? "right" : (availSpace.centerRight >= availSpace.tooltipWidth) ? "left" : "center";
                else
                    newPosition.stem.horizontal = (newPosition.target.horizontal == "right") ? "left" : "right";
            }
            if (newPosition.target.vertical != position.target.vertical || newPosition.target.horizontal != position.target.horizontal) {
                if (newPosition.target.vertical == "center")
                    newPosition.stem.vertical = (availSpace.centerTop >= availSpace.tooltipHeight) ? "bottom" : (availSpace.centerBottom >= availSpace.tooltipHeight) ? "top" : (availSpace.centerTop > availSpace.centerBottom) ? "bottom" : "top";
                else
                    newPosition.stem.vertical = (newPosition.target.vertical == "top") ? "bottom" : "top";
            }
            return newPosition;
        };
        ejTooltip.prototype._collisionFit = function (position, availSpace) {
            var tooltipPos = $.extend(true, {}, this.tooltipPos), isHorizontalCollision = false, isVerticalCollision = false;
            var leftValue = 1, topValue = 1, arrowValue = null;
            var scrollLeft = $(this.model.containment).scrollLeft();
            var scrollTop;
            if (this.model.containment == "body") {
                scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
            }
            else {
                scrollTop = $(this.model.containment).scrollTop();
            }
            var containerLeft = this.containerSize.left, containerTop = this.containerSize.top;
            if (tooltipPos.left < containerLeft || ((tooltipPos.left + tooltipPos.width) > (this.containerSize.width + scrollLeft + containerLeft))) {
                leftValue = (tooltipPos.left < containerLeft) ? containerLeft : ((tooltipPos.left + tooltipPos.width) > (this.containerSize.width + scrollLeft + containerLeft)) ? (tooltipPos.left - ((tooltipPos.left + tooltipPos.width) - (this.containerSize.width + containerLeft))) : 1;
                isHorizontalCollision = true;
            }
            if (tooltipPos.top < containerTop || ((tooltipPos.top + tooltipPos.height) > (this.containerSize.height + scrollTop + containerTop))) {
                topValue = (tooltipPos.top < containerTop) ? containerTop : ((tooltipPos.top + tooltipPos.height) > (this.containerSize.height + scrollTop + containerTop)) ? (tooltipPos.top - ((tooltipPos.top + tooltipPos.height) - (this.containerSize.height + containerTop))) : 1;
                isVerticalCollision = true;
            }
            $(this.tooltip).css({
                top: (topValue != 1) ? topValue + "px" : tooltipPos.top + "px",
                left: (leftValue != 1) ? leftValue + "px" : tooltipPos.left + "px",
                position: "absolute"
            });
            this._adjustArrow(position);
            arrowValue = { left: this.arrowValue.left, top: this.arrowValue.top, height: this.model.tip.size.height, width: this.model.tip.size.width, display: $(this.tip).css("display") };
            this.tooltipPos.top = topValue = (topValue != 1) ? topValue : tooltipPos.top;
            this.tooltipPos.left = leftValue = (leftValue != 1) ? leftValue : tooltipPos.left;
            var tooltipWidth = $(this.tooltip).width(), tooltipHeight = $(this.tooltip).height();
            if (isHorizontalCollision || isVerticalCollision && (arrowValue.display != "none")) {
                if (this.model.isBalloon) {
                    if (isHorizontalCollision)
                        this.arrowValue.left = this._horizontalAdjustment(position, availSpace);
                    if (isVerticalCollision)
                        this.arrowValue.top = this._verticalAdjustment(position, availSpace);
                }
                if (this.arrowValue.left == -this.model.tip.size.height || this.arrowValue.left == tooltipWidth) {
                    $(this.tip).css({ left: this.arrowValue.left + "px", top: this.arrowValue.top + "px", display: "block" });
                }
                else if (this.arrowValue.top == -this.model.tip.size.height || this.arrowValue.top == tooltipHeight) {
                    $(this.tip).css({ left: this.arrowValue.left + "px", top: this.arrowValue.top + "px", display: "block" });
                }
                else {
                    $(this.tip).css({ left: this.arrowValue.left + "px", top: this.arrowValue.top + "px", display: "none" });
                }
            }
            this._shadowEffect(this.model.showShadow, position);
        };
        ejTooltip.prototype._horizontalAdjustment = function (position, availSpace) {
            var arrowValue = { left: this.arrowValue.left, top: this.arrowValue.top };
            $(this.tooltip).css({ "display": "block" });
            var arrowSize = (position.target.horizontal != "center") ? this.model.tip.size.height : this.model.tip.size.height;
            var arrowLeft = (position.target.horizontal != "center" && position.stem.horizontal == "left") ? $(this.tip).offset().left : (position.target.horizontal != "center" && position.stem.horizontal == "right") ? $(this.tip).offset().left + arrowSize : $(this.tip).offset().left;
            $(this.tooltip).css({ "display": "none" });
            if ((arrowLeft > availSpace.leftSpace) && ((arrowLeft + arrowSize) < (availSpace.leftSpace + this.targetPos.width)))
                return arrowValue.left;
            else {
                if ((arrowLeft > (availSpace.leftSpace + this.targetPos.width)) || (arrowLeft < availSpace.leftSpace))
                    arrowValue.left = (availSpace.leftSpace + this.targetPos.width / 2) - parseInt(this.tooltipPos.left.toString());
                return arrowValue.left;
            }
        };
        ejTooltip.prototype._verticalAdjustment = function (position, availSpace) {
            var arrowValue = { left: this.arrowValue.left, top: this.arrowValue.top, height: this.model.tip.size.height, width: this.model.tip.size.width, display: this.arrowValue.display };
            $(this.tooltip).css({ "display": "block" });
            var arrowSize = (position.target.horizontal != "center") ? this.model.tip.size.height : this.model.tip.size.height;
            var arrowTop = (position.target.horizontal == "center" && position.stem.vertical == "top") ? $(this.tip).offset().top : $(this.tip).offset().top + arrowSize;
            $(this.tooltip).css({ "display": "none" });
            if ((arrowTop > availSpace.topSpace) && (arrowTop < (availSpace.topSpace + this.targetPos.height)))
                return arrowValue.top;
            else {
                if ((arrowTop < availSpace.topSpace) || ((arrowTop + arrowSize) > (availSpace.topSpace + this.targetPos.height)))
                    arrowValue.top = (availSpace.topSpace + this.targetPos.height / 2) - parseInt(this.tooltipPos.top.toString());
                return arrowValue.top;
            }
        };
        ejTooltip.prototype._createHeader = function () {
            if (this.model.title != null) {
                if (ej.isNullOrUndefined(this.tooltipTitle))
                    this._createTitle();
                if (ej.isNullOrUndefined(this.tooltipContent))
                    $(this.tooltipHeader).appendTo(this.tooltipInter).addClass("e-tooltipHeader");
                else
                    $(this.tooltipHeader).insertBefore(this.tooltipContent).addClass("e-tooltipHeader");
            }
            if (this.model.closeMode == ej.Tooltip.CloseMode.Sticky)
                this._iconRender();
        };
        ejTooltip.prototype._hideTooltip = function () {
            var speed;
            this._isHidden = true;
            speed = (this.model.animation.speed != 0) ? this.model.animation.speed : (this.model.animation.effect == ej.Tooltip.Effect.Slide) ? 200 : (this.model.animation.effect == ej.Tooltip.Effect.Fade) ? 800 : 0;
            if (this.model.enabled == true && $(this.tooltip).css("display") == 'block') {
                if (this.triggerEvents("beforeClose", {}))
                    return;
                (this.model.animation.effect == ej.Tooltip.Effect.Fade) ? $(this.tooltip).fadeOut(speed) : (this.model.animation.effect == ej.Tooltip.Effect.Slide) ? $(this.tooltip).slideUp(speed) : $(this.tooltip).css({ display: "none" });
                if ($(this.tooltip).css("display") == 'none')
                    $(this.tooltip).attr('aria-hidden', 'true').removeClass("e-customAnimation");
                if (this.triggerEvents("close", {}))
                    return;
            }
        };
        ejTooltip.prototype._showTooltip = function () {
            if (this._isHidden) {
                var speed = (this.model.animation.speed != 0) ? this.model.animation.speed : (this.model.animation.effect == ej.Tooltip.Effect.Slide) ? 200 : (this.model.animation.effect == ej.Tooltip.Effect.Fade) ? 800 : 0;
                this._isHidden = false;
                if ($(this.tooltip).css("display") == 'none' && this.model.enabled == true) {
                    (this.model.animation.effect == ej.Tooltip.Effect.Fade) ? $(this.tooltip).fadeIn(speed) : (this.model.animation.effect == ej.Tooltip.Effect.Slide) ? $(this.tooltip).slideDown(speed) : $(this.tooltip).css({ display: "block" });
                    if ($(this.tooltip).css("display") == 'block') {
                        var parents = $(this.tooltip[0]).parents();
                        var bodyEle = $('body').children();
                        $(bodyEle).each(function (i, ele) { parents.push(ele); });
                        var toolTipParents = $(this.model.target).parents();
                        $(toolTipParents).each(function (i, ele) { parents.push(ele); });
                        var zIndex = Math.max.apply(zIndex, $.map(parents, function (e, n) {
                            if ($(e).css('position') != 'static')
                                return parseInt($(e).css('z-index')) || 1;
                        }));
                        if (!zIndex || zIndex < 10000)
                            zIndex = 10000;
                        else
                            zIndex += 1;
                        $(this.tooltip).attr('aria-hidden', 'false').css({ zIndex: zIndex });
                        if (this.model.animation.effect == ej.Tooltip.Effect.None)
                            $(this.tooltip).addClass("e-customAnimation");
                        var elements = this._getScrollableParents();
                        this._on(elements, "scroll", this._hideTooltip);
                    }
                    if (this.triggerEvents("open", {}))
                        return;
                }
            }
        };
        ejTooltip.prototype._getScrollableParents = function () {
            return $(this.element).parentsUntil("html").filter(function () {
                return $(this).css("overflow") != "visible";
            }).add($(window));
        };
        ejTooltip.prototype._tooltipAuto = function () {
            var proxy = this;
            this.timer = setTimeout(function () {
                proxy._hideTooltip();
            }, proxy.model.autoCloseTimeout);
        };
        ejTooltip.prototype._beforeOpenTooltip = function (event) {
            this.positionTooltip = $.extend(true, {}, this.model.position.stem);
            this.positionTarget = $.extend(true, {}, this.model.position.target);
            this.targetElement = this.element;
            if (!ej.isNullOrUndefined(this.model.target)) {
                if (!ej.isNullOrUndefined($(event.currentTarget).attr('data-content'))) {
                    this.model.content = $(event.currentTarget).attr('data-content');
                    this._setContent(this.model.content);
                }
            }
        };
        ejTooltip.prototype._targetHover = function (event) {
            this.isTrack = true;
            if (this.model.enabled) {
                if (this._isHidden || ((ej.browserInfo().name == 'msie' || ej.browserInfo().name == 'edge') && this.model.associate == ej.Tooltip.Associate.MouseFollow)) {
                    this.tooltip.stop(true, true);
                    if (this.triggerEvents("beforeOpen", { event: event })) {
                        this._isCancel = true;
                        return;
                    }
                    this._isCancel = false;
                    this._beforeOpenTooltip(event);
                    if (this.model.associate != ej.Tooltip.Associate.MouseEnter && this.model.associate != ej.Tooltip.Associate.MouseFollow) {
                        (!ej.isNullOrUndefined(this.model.target)) ? this._positionElement(event.currentTarget) : this._positionElement(this.element);
                        clearTimeout(this.timer);
                        this._showTooltip();
                        if (this.model.closeMode == ej.Tooltip.CloseMode.Auto)
                            this._tooltipAuto();
                        (event.type == "click") ? this.triggerEvents("click", { event: event }) : this.triggerEvents("hover", { event: event });
                    }
                    else
                        this.isTrack = true;
                }
                else if (!ej.isNullOrUndefined(this.model.target))
                    this._positionElement(event.currentTarget);
            }
        };
        ejTooltip.prototype._onMouseOut = function (event) {
            if (this.model.enabled && !this._isHidden) {
                if (this.model.closeMode == ej.Tooltip.CloseMode.None)
                    this._hideTooltip();
                clearTimeout(this.mouseTimer);
            }
            this.isTrack = false;
        };
        ejTooltip.prototype._onTooltipMouseEnter = function (event) {
            var proxy = this;
            if (this.model.enabled) {
                if (this.model.animation.effect == ej.Tooltip.Effect.None)
                    $(proxy.tooltip).css({ display: "block" });
            }
        };
        ejTooltip.prototype._onTooltipMouseLeave = function (event) {
            var proxy = this;
            if (this.model.enabled) {
                if (this.model.animation.effect == ej.Tooltip.Effect.None) {
                    if (proxy.model.closeMode == ej.Tooltip.CloseMode.None)
                        $(proxy.tooltip).css({ display: "none" });
                }
            }
        };
        ejTooltip.prototype._docTouchEndHandler = function (e) {
            if (!$(e.target).closest('.e-tooltip').length && this.model.closeMode == ej.Tooltip.CloseMode.None)
                this._hideTooltip();
        };
        ejTooltip.prototype._keyDown = function (event) {
            var code = (event.keyCode) ? event.keyCode : (event.which) ? event.which : event.charCode;
            if (this.model.enabled) {
                switch (code) {
                    case 27:
                        event.preventDefault();
                        this._hideTooltip();
                        break;
                }
            }
        };
        return ejTooltip;
    }(ej.WidgetBase));
    window.ej.widget("ejTooltip", "ej.Tooltip", new ejTooltip());
    window["ejTooltip"] = null;
})(jQuery);
ej.Tooltip.CloseMode = {
    Auto: "auto",
    None: "none",
    Sticky: "sticky"
};
ej.Tooltip.Effect = {
    Slide: "slide",
    Fade: "fade",
    None: "none"
};
ej.Tooltip.Trigger = {
    Hover: "hover",
    Click: "click",
    Focus: "focus"
};
ej.Tooltip.Collision = {
    Flip: "flip",
    FlipFit: "flipfit",
    None: "none",
    Fit: "fit"
};
ej.Tooltip.Associate = {
    Window: "window",
    MouseFollow: "mousefollow",
    MouseEnter: "mouseenter",
    Target: "target",
    Axis: "axis"
};
;
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejMaskEdit", "ej.MaskEdit", {

        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["value"],
        _setFirst: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true
        },

        defaults: {

            maskFormat: "",

            value: null,

            watermarkText: "",

            name : null,

            height: "",

            width: "",

            showError: false,

            htmlAttributes: {},

            cssClass: "",

            customCharacter: null,

            inputMode: "text",

            readOnly: false,

            textAlign: ej.TextAlign.Left,

            hidePromptOnLeave: false,

            showRoundedCorner: false,

            enablePersistence: false,

            enabled: true,

            locale:"en-US",

            showPromptChar: true,

            validationRules: null,

            validationMessage: null,

            keydown: null,

            keyup: null,

            keyPress: null,

            change: null,

            mouseover: null,

            mouseout: null,

            focusIn: null,

            focusOut: null,

            create: null,

            destroy: null

        },

        dataTypes: {
            maskFormat: "string",
            showError: "boolean",
            enabled: "boolean",
            customCharacter: "string",
            cssClass: "string",
            watermarkText: "string",
            showRoundedCorner: "boolean",
            showPromptChar: "boolean",
            inputMode: "enum",
            textAlign: "enum",
            hidePromptOnLeave: "boolean",
            readOnly: "boolean",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data"
        },

        _setModel: function (jsondata) {
            for (var key in jsondata) {
                switch (key) {
                    case "value":
					this.temp_index=0;
					this.indexValue=[];
                        if (ej.isPlainObject(jsondata[key])) jsondata[key] = null;
                        this._setValue(jsondata[key]);
                        this._initObjects();
                        jsondata[key] = this.get_UnstrippedValue(); this._raiseEvents("change", true); break;
						
                    case "width": this._setWidth(jsondata[key]); break;
                    case "height": this._setHeight(jsondata[key]); break;
                    case "watermarkText": this.model.watermarkText = jsondata[key]; this._changeWatermark(jsondata[key]); break;
                    case "showRoundedCorner": this._roundedCorner(jsondata[key]); break;
                    case "showPromptChar": this._setShowPrompt(jsondata[key]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this._hiddenInput.rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = jsondata[key];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessage = jsondata[key];
                        if (this.model.validationRules != null && this.model.validationMessage != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "textAlign": this._setTextAlign(jsondata[key]); break;
                    case "inputMode": this._setInputMode(jsondata[key]); break;
                    case "maskFormat":
                        this.model.maskFormat = jsondata[key];
                        this._valueMapper();
                        this._maskModel = this.model.maskFormat;
                        this._setMask(jsondata[key]);
                        this._initObjects();
                        jsondata[key] = this.model.maskFormat;
                        break;
                    case "locale":
                         this.model.value = this.get_StrippedValue();
                         this.model.locale = jsondata[key];
                         this._setValue(this.model.value);
                         this._initObjects();                        
                         break;
                    case "cssClass": this._setSkin(jsondata[key]); break;
                    case "readOnly": this._setReadOnly(jsondata[key]); break;
                    case "enabled": this.model.enabled = jsondata[key]; this._controlStatus(jsondata[key]); break;
                    case "htmlAttributes": this._addAttr(jsondata[key]); break;
                    case "hidePromptOnLeave": this.model.hidePromptOnLeave = jsondata[key];
                        if (this._textbox.value != "") {
                            if(this.model.hidePromptOnLeave) {
                                this._unStrippedMask = this._textbox.value;
                                this._textbox.value = this.get_UnstrippedValue();
                            }
                            else this._textbox.value = this._textbox.value.replace(/[ ]/g, '_');
                            this.model.value = this._textbox.value;
                        }
                }
            }
        },
        observables: ["value"],


        _destroy: function () {
            if (!ej.isNullOrUndefined(this._hiddenInput)) this.element.attr("name", this._hiddenInput.attr("name"));
            if (this._isWatermark) this.element.removeAttr("placeholder");
            this.element.insertAfter(this.wrapper);
            if (!ej.isNullOrUndefined(this.wrapper)) this.wrapper.remove();
            if (this.model.textAlign) this.element.css("text-align", "");
            this.element.val("").removeClass(' e-mask e-input e-disable').empty();
            this.element.removeAttr('aria-invalid aria-disabled');
        },


        _init: function (options) {
            this.indexValue = [];
            this.temp_index = 0;
            this._options = options;
            this._tempMask = this.model.maskFormat;
            this._keyFlag = false;
            this._keyupFlag = true;
            this._checkMask = false;
            this._isAndroid = (/android/i.test(navigator.userAgent.toLowerCase()));
            if (this.element.is("input") && (this.element.is("input[type=text]") || this.element.is("input[type=password]") || !this.element.attr('type'))) {
                this.element.attr('autocomplete', 'off');
                this._isWatermark = 'placeholder' in document.createElement('input');
                this._setValues();
                this._valueMapper();
                this._renderControl();
                this._initObjects();
                this._wireEvents();
				this._addAttr(this.model.htmlAttributes);
                if (this.model.validationRules != null) {
                    this._initValidator();
                    this._setValidation();
                }
            } else {
                this._destroy();
                return false;
            }
            if (options && options.value != undefined && this.model.value !== options.value)
                this._trigger("_change", { value: this.get_UnstrippedValue(), unmaskedValue: this.get_StrippedValue()});            
        },

        _initValidator: function () {
			(!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
				else if(keyName == "name") proxy._hiddenInput.attr(key,value);
                else if (keyName == "disabled" && value == "disabled") proxy.disable();
                else if (keyName == "readonly" && value == "readOnly") proxy._setReadOnly(true);
                else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
                else if (ej.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
                else proxy.wrapper.attr(key, value);
            });
        },
        _setValidation: function () {
            this._hiddenInput.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            var name = this._hiddenInput.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },

        _setShowPrompt:function(value){
            this.model.showPromptChar = value;
            this._textbox.value = this.model.showPromptChar ? this._unStrippedMask : this.get_UnstrippedValue();
        },

        _controlStatus: function (value) {
            value != true ? this.disable() : this.enable();
        },

        _setValues: function () {
            this._unStrippedMask = null;
            //Predefined character definitions
            this._charMap = {
                '9': "[0-9 ]",
                'a': "[A-Za-z0-9 ]",
                'A': "[A-Za-z0-9]",
                'N': "[0-9]",
                '#': "[0-9]",
                '&': '[^\x7f]+',
                '<': "",
                '>': "",
                'C': this.model.customCharacter != null ? "[" + this.model.customCharacter + "]" : "[A-Za-z ]",
                '?': "[A-Za-z]",
            };
        },

        _renderControl: function () {
            this.model.name = this.element.attr("name") != null ? this.element.attr("name") : (this.model.name != null ? this.model.name : this.element[0].id);
            if (this.element.attr("name") != null)
                this.element.removeAttr('name');
            this.wrapper = ej.buildTag("span.e-mask e-widget " + this.model.cssClass);
            this.innerWrapper = ej.buildTag("span.e-in-wrap e-box");
            this.wrapper.append(this.innerWrapper).insertBefore(this.element);
            this.innerWrapper.append(this.element);
            this._hiddenInput = ej.buildTag("input#" + this._id + "_hidden", "", {}, { type: "hidden" }).insertBefore(this.element);
            if (!this._isWatermark && this.model.inputMode != "password") {
                this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(this.model.watermarkText);
                this._hiddenSpan.css("display", "none");
                this._hiddenSpan.bind("mousedown", $.proxy(this._OnFocusHandler, this));
            }
            if(ej.isNullOrUndefined(this.model.value) && this.element[0].value != "") this.model.value =  this.element[0].value;
            if (!ej.isNullOrUndefined(this.model.value)) {
                this.wrapper.addClass('e-valid');
                if (typeof this.model.value == "number")
                    this.model.value = this.model.value.toString();
            }
            this._hiddenInput.attr({ "name": this.model.name, "value": this.model.value });
            this.element.attr({ 'aria-invalid': false }).addClass('e-input')
            if (this.model.maskFormat == "" && this.model.value == null) {
                var proxy = this;
                setTimeout(function () {
                    if (proxy.element.val() != "") {
                        proxy.option('value', proxy.element.val());
                        proxy.previousValue = proxy.model.value;
                        proxy._initObjects();
                    }
                }, 500)
            }
            else this.element.attr({ 'value': this.model.value });
            if (ej.isNullOrUndefined(this._options.inputMode) && !ej.isNullOrUndefined(this.element.attr("type")))
                this.model.inputMode = this.element.attr("type");
            else
                this._setInputMode(this.model.inputMode);
            this._setWidth(this.model.width);
            this._setHeight(this.model.height);
            this._roundedCorner(this.model.showRoundedCorner);
            this._setTextAlign(this.model.textAlign);
            this._setReadOnly(this.model.readOnly);
            this._controlStatus(this.model.enabled);
            this.previousValue = this.model.value;
        },

        _initObjects: function () {
            this._textbox = this.element[0];
            this._keypressFlag = 0;
            this._selectedTextKeyDown = 0;
            // KeyDown trace [ 0 - None, 1 - BackSpace, 2 - Delete]
            this._keydownFlag = 0;
            // Length of the Mask
            if (!(this.model.maskFormat.indexOf("\\") >= 0))
                this._maskLength = this.model.maskFormat.length;
            else {
                var _position = 0;
                for (var temp = 0; temp < this.model.maskFormat.length; temp++) {
                    if ((this.model.maskFormat[temp] == "\\"))
                        _position += 1;
                }
                this._maskLength = this.model.maskFormat.length - _position;
            }
            //Replacing all [9?$CANa*] to '_'           
            if (!(this.model.maskFormat.indexOf("\\") >= 0))
                this._maskModel = this.model.maskFormat.replace(/[9?CANa#&]/g, '_');
            else {
              if(!this.model.value) {
                this._maskModel = this._emptyMask;
              } else {
                this._maskModel = "";
                  for (var pos = 0; pos < this.model.maskFormat.length; ++pos) {
                      if (this.model.maskFormat[pos] == "\\"){
                            this._maskModel += this.model.maskFormat[++pos];
                        } else if (!(this.model.maskFormat[pos] == "\\"))
                            this._maskModel += this.model.maskFormat[pos].replace(/[9?CANa#&]/g, '_');
                    }
                }
            }
            this._changeMask(this.model.locale);
            if (this._maskModel.indexOf("<") >= 0 || this._maskModel.indexOf(">") >= 0) {
                this._maskModel = this._maskModel.replace(/[<>]/g, '');
                this.model.maskFormat = this.model.maskFormat.replace(/[<>]/g, '');
                this._valueMapper();
            }

            this._validatedValue = this._maskModel;
            if (this.model.inputMode != "password") {
                this._setValue(this.model.value);
                this._setWaterMark();
            }
            if (this.model.showError) {
                this.element.addClass("e-error").attr('aria-invalid', "true");
            }
            this._prevValue = this.model.watermarkText ? (this._textbox.value ? this._textbox.value : this._maskModel) : this._textbox.value;
        },


        _setWidth: function (value) {
            this.wrapper.width(value);
        },

        _setHeight: function (value) {
            this.wrapper.height(value);
        },

        _roundedCorner: function (value) {
            if (value && !this.innerWrapper.hasClass('e-corner')) {
                this.innerWrapper.addClass('e-corner');
            }
            else if (this.innerWrapper.hasClass('e-corner')) {
                this.innerWrapper.removeClass('e-corner');
            }
        },

        _setTextAlign: function (align) {
            if (align == "right") {
                this.element.css("text-align","");
                this.wrapper.addClass('e-rtl');
            }
            else {
                this.wrapper.removeClass('e-rtl');
                this.element.css("text-align",align);
            }
        },

        _setInputMode: function (type) {
            this.element.attr('type', type);
        },

        _setReadOnly: function (bool) {
            this.model.readOnly = bool;
            if (bool) this.element.attr("readonly", true);
            else this.element.removeAttr("readonly");
        },

        _setSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass);
            this.wrapper.addClass(skin);
        },

        _setWaterMark: function () {
            var formatValue = this.model.showPromptChar ? this._maskModel : (this._maskModel != "" && this._maskModel != null) ? this._maskModel.replace(/[_]/g, " ") : this._maskModel;
            if (!(this.model.maskFormat.indexOf("\\") >= 0))
                this._maskModel = $.trim(this.model.maskFormat.replace(/[9?CANa#&]/g, '_')) === "" ? null : this.model.maskFormat.replace(/[9?CANa#&]/g, '_');
            else
                this._maskModel = this.model.maskFormat === "" ? null : formatValue;
            if ((this._maskModel != ''&&this._maskModel !=null&& this._textbox.value == formatValue) || (formatValue == '' && this._textbox.value == "") && this.model.inputMode != "password") this._textbox.value = "";
            if(this.model.watermarkText.length==0 && !ej.isNullOrUndefined(this.element.attr("placeholder"))) this.model.watermarkText = this.element.attr("placeholder");
            if (this.model.watermarkText) {
                if (this._isWatermark)
                    this.element.attr("placeholder", this.model.watermarkText);
                else {
                    if (this._textbox.value) this._hiddenSpan.css("display", "none").text(this.model.watermarkText);
                    else this._hiddenSpan.css("display", "block").text(this.model.watermarkText);
                }
            }
            if (!this.model.watermarkText && !this._textbox.value && this.model.maskFormat) {
                if (!this.model.hidePromptOnLeave) this._textbox.value = formatValue;
            else { this._unStrippedMask = this._maskModel; this._textbox.value = this.get_UnstrippedValue(); }
            }
        },

        _changeWatermark: function (text) {
            if (!this.model.enabled) return false;
            var formatValue = this.model.showPromptChar ? this._maskModel : (this._maskModel != "" && this._maskModel != null) ? this._maskModel.replace(/[_]/g, " ") : this._maskModel;
            if ((this._textbox.value == formatValue || this._textbox.value == '' || $.trim(this.get_StrippedValue()) == "") && this.model.inputMode != "password") this._textbox.value = "";
            (this._isWatermark ? this.element.attr("placeholder", text) : this._hiddenSpan.text(text))
            if (!this.model.watermarkText && $.trim(this.get_StrippedValue()) == "" && this.model.maskFormat) {
                if (!this.model.hidePromptOnLeave) this._textbox.value = formatValue;
                else { this._unStrippedMask = this._maskModel; this._textbox.value = this.get_UnstrippedValue(); }
            }
        },

        _showAlert: function () {
            var ptr = this;
            this.element.addClass("e-error").attr('aria-invalid', "true").animate({ Opacity: 1 }, 700, null, function () {
                $(ptr._textbox).removeClass("e-error").attr('aria-invalid', "false");
            });
        },

        _unMask: function () {
            var tempModel = "";
            var indexValue = 0;
            var valueIndex = -1, maskIndex = 0, i = 0, chr, prompt = "_", rule;
            var newValue = this.model.value.toString();
            var tempValue = "";
            var rules = this._rules.slice();
            for (var k = 0; k < this._rules.length; k++) {
                for (var j = 0;j < newValue.length; j++) {
                    if (rules[k].rule && newValue[j].match(rules[k].rule) || rules[k].rule === undefined) {
                        tempValue += rules[k].rule ? newValue.charAt(j) : rules[k];
                        newValue = rules[k].rule ? newValue.slice(j + 1, newValue.length) : ((rules[k] === newValue[j]) ? newValue.slice(j + 1, newValue.length) : newValue);
						indexValue = 1;
                        break;
                    }
                }
                if (indexValue === 0 && newValue.length > 0) {
                    tempValue += (rules[k].rule === undefined) ? rules[k] : "";
                }
				indexValue = 0;
            }
            while (maskIndex < this._rules.length) {
                chr = tempValue[i];
                rule = this._rules[maskIndex];
                if (chr == undefined) break;
                if (chr === rule || chr === prompt) {
                    tempModel += chr === prompt ? prompt : chr;
                    i += 1;
                    maskIndex += 1;
                }
				else if (rule.rule === undefined) {
					tempModel += rule;
					maskIndex += 1;
				}
                else if (this._rules[maskIndex].rule != undefined && chr.match(this._rules[maskIndex].rule)) {
                    var charCode = tempValue.charCodeAt(i);
					var temp = maskIndex;
					if (this._rules["0"] === ">" || this._rules["0"] === "<") var temp = maskIndex-1;
                    if (this._validateChars(charCode, temp)) {
                        tempModel += tempValue.charAt(i);
                        maskIndex++;
                        i++;
                    } else maskIndex++;
                } 
                else if (typeof rule !== "string") {
                    if (chr.match(this._rules[maskIndex].rule)) {
                        var charCode = tempValue.charCodeAt(i);
                        if (this._validateChars(charCode, maskIndex)) {
                            tempModel += tempValue.charAt(i);
                            maskIndex++;
                            i++;
                        }
                    } else { i++; maskIndex++;}
                } else maskIndex++;
                if (i > tempValue.length) break;
            }
            return tempModel;
        },

        _validateValue: function () {
            if (ej.isNullOrUndefined(this.model.value)) return;
            var tempValue = this.model.value;
            var tempModel = this._maskModel;
            var valueIndex = -1, maskIndex = i = 0, chr, prompt = "_", rule;
            var oldvalue = this._unMask();
            if (!this._isWatermark && this.model.inputMode != "password")
                this._hiddenSpan.css("display", "none");
            // Check if Mask is Empty display the text
            if (this._maskLength == 0) {
                this._textbox.value = tempValue;
                this._setWaterMark();
                return true;
            }
            else {
                var replacestring = this.model.value.toString();
                if (!((this.model.maskFormat.indexOf("\\") >= 0)) && this.model.customCharacter == null)
                    tempValue = this.model.value = replacestring;
                else
                    tempValue = this.model.value;
            }

            while (maskIndex < this._rules.length) {
                chr = oldvalue[i];
				if(chr === "_" && this._rules[maskIndex].rule === "[^]+") {this.indexValue[this.temp_index]= maskIndex;
				this.temp_index++;}
                rule = this._rules[maskIndex];
                if (chr == undefined) break;
                if (chr === rule || chr === prompt) {
                    chr === prompt ? prompt : "";
                    var strBefore = tempModel.substring(0, maskIndex);
                    var strAfter = tempModel.substring(maskIndex);
                    tempModel = strBefore + chr + strAfter.substr(1, strAfter.length);
                    i += 1;
                    maskIndex += 1;
                }
                else if (this._rules[maskIndex].rule != undefined ) {
                    var charCode = oldvalue.charCodeAt(i);
					var temp = maskIndex;
					if(this._rules["0"] === ">" || this._rules["0"] === "<")var temp = maskIndex-1;
                    if (this._validateChars(charCode, temp)) {
                        var strBefore = tempModel.substring(0, temp);
                        var strAfter = tempModel.substring(temp);
                        tempModel = strBefore + oldvalue.charAt(i) + strAfter.substr(1, strAfter.length);
                        maskIndex++;
                        i++;
                    } else maskIndex++;
                } 
                else if (typeof rule !== "string") {
                    if (chr.match(this._rules[maskIndex].rule)) {
                        var charCode = oldvalue.charCodeAt(i);
                        if (this._validateChars(charCode, maskIndex)) {
                            var strBefore = tempModel.substring(0, maskIndex);
                            var strAfter = tempModel.substring(maskIndex);
                            tempModel = strBefore + oldvalue.charAt(i) + strAfter.substr(1, strAfter.length);
                            maskIndex++;
                            i++;
                        } else maskIndex++;
                    } else {
                        var strBefore = tempModel.substring(0, maskIndex);
                        var strAfter = tempModel.substring(maskIndex);
                        tempModel = strBefore + prompt + strAfter.substr(1, strAfter.length);
                        i++;
                        maskIndex++;
                    }
                } else maskIndex++;
            }
            if (this.model.value) {
                this._textbox.value = tempModel;
                this.model.value = this.get_UnstrippedValue();
				if (this.model.value === null) this.model.value = tempModel;
                if (!(this.model.maskFormat.indexOf("\\") >= 0)) {
                    if (!this.model.hidePromptOnLeave) this._textbox.value = tempModel;
                    else { this._unStrippedMask = tempModel.replace(/[ ]/g, '_'); this._textbox.value = tempModel; }
                }         
                else {
                    this._textbox.value = "";
                    var _tPos = 0;
                    for (var _pos = 0; _pos < this.model.maskFormat.length; _pos++) {
                        if (this.model.maskFormat[_pos] == "\\")
                            _tPos += 1;
                    }
                    var _position = 0;
                    if (this.model.value.length == tempModel.length - _tPos) {
                        for (var pos = 0; pos < this.model.maskFormat.length; ++pos) {
                            if (this.model.maskFormat[pos] == "\\")
                                _position = _position + 1;
                            else if (this.model.maskFormat[pos - 1] == "\\")
                                this._textbox.value += tempValue[pos - _position];
                            else if (!(this.model.maskFormat[pos] == "\\")) {
                                if (tempValue.length <= pos - _position)
                                    this._textbox.value += tempModel[pos].replace(/[9?CANa#&]/g, '_');
                                else
                                    this._textbox.value += tempValue[pos - _position].replace(/[9?CANa#&]/g, '_');
                            }

                        }
                    }
                    else {
                       this._textbox.value = tempModel;
                    }
                }
            }
            else {
                if (!(this.model.maskFormat.indexOf("\\") >= 0))
                    this._textbox.value = this.model.maskFormat.replace(/[9?CANa#&]/g, '_');
                else {
                    for (var pos = 0; pos < this.model.maskFormat.length; ++pos) {
                        var val;
                        if (this.model.maskFormat[pos - 1] == "\\")
                            this._textbox.value += this.model.maskFormat[pos];

                        else if (!(this.model.maskFormat[pos] == "\\"))
                            this._textbox.value += this.model.maskFormat[pos].replace(/[9?CANa#&]/g, '_');

                    }
                }
            }
            if (this._textbox.value != undefined && this.model.hidePromptOnLeave) {
                this._unStrippedMask = this._textbox.value.replace(/[ ]/g, '_');
                this._textbox.value = this.get_UnstrippedValue();
            }
            if (this._maskModel!=null &&(this._textbox.value.indexOf(">") >= 0 || this._textbox.value.indexOf("<") >= 0)) {
                this._textbox.value = this._textbox.value.replace(/[<>]/g, '');
                this._tempMask = this.model.maskFormat;
                this.model.maskFormat = this.model.maskFormat.replace(/[<>]/g, '');                
            }
            if (!this.model.showPromptChar)
                this._textbox.value = this._getUnstrippedValue(true);
            // Update the character to upper and lower case.
            if (this._tempMask != null) {
                for (var i = 0; i < this._textbox.value.length; i++) {
                    var tempkey = this._updateCasing(this._textbox.value[i], i);
                    if (!ej.isNullOrUndefined(tempkey))
                        this._textbox.value = this._textbox.value.substring(0, i) + tempkey + this._textbox.value.substring(i + tempkey.length);
                }
            }
            
            this._setWaterMark();
        },


        _selectionText: function (begin, end) {
            var replaceValue = !ej.isNullOrUndefined(this._maskModel)?this._maskModel.substring(begin, end):"";
            this._textbox.value = this._textbox.value.substring(0, begin) + replaceValue + this._textbox.value.substring(end);
            if (this._keydownFlag == 1) {
                this._setCaretPosition(begin);
                return begin;
            }
            else if (this._keydownFlag == 2) {
                this._setCaretPosition(end);
                return end;
            }
            return begin;
        },


        _caretPosition: function (textbox) {
            var caretPos = 0;
            // Microsoft supports only IE for using document.selection
            if (document.selection) {
                // Create a Range of selected position
                var selectedRange = document.selection.createRange();
                var selectionLength = selectedRange.text.length;
                // Move selection start to 0 position
                selectedRange.moveStart('character', -textbox.value.length);
                // Get caret position by selection length, becoz now range is from Zero to current focus
                caretPos = selectedRange.text.length - selectionLength;
                if (selectionLength != 0) {
                    caretPos = this._selectionText(caretPos, selectedRange.text.length);
                    this._selectedTextKeyDown = 1;
                }
            }
            // For Firefox
            else if (textbox.selectionStart || textbox.selectionStart == '0') {
                caretPos = textbox.selectionStart;
                if (textbox.selectionStart != textbox.selectionEnd) {
                    if (this._keydownFlag)
                        caretPos = this._selectionText(textbox.selectionStart, textbox.selectionEnd);
                    this._selectedTextKeyDown = 1;
                }
            }
            return (caretPos);
        },


        _setCaretPosition: function (caretPos) {
            var element = this._textbox;
            //For IE
            if (window.navigator.appName == "Microsoft Internet Explorer") {
                if (element.createTextRange) {
                    var range = element.createTextRange();
                    range.move('character', caretPos);
                    range.select();
                }
            }
            else
            /* For FireFox and Chrome */
                if (element.selectionStart || element.selectionStart == '0') {
                    element.focus();
                    if (this._isAndroid) {
                        setTimeout(function () {
                            element.setSelectionRange(caretPos, caretPos);
                        }, 0);
                    } else {
                        element.setSelectionRange(caretPos, caretPos);
                    }
                }
                else
                    element.focus();
        },


        _validateChars: function (keyChar, caretPos) {
            var charmap = this._charMap, match = false;
            if (this.model.maskFormat.indexOf("\\") >= 0) {
                var _position = this._getCunrrentPos(caretPos);
                var maskChar = this.model.maskFormat.substr(caretPos + _position, 1);
            }
            else
                var maskChar = this.model.maskFormat.substr(caretPos, 1);
            var customChar = this.model.customCharacter;
            var actualkey = String.fromCharCode(keyChar);
            $.each(charmap, function (key, value) {
                if (maskChar == key) {
                    if (customChar != null) {
                        if (key == "C")
                            value = "[" + customChar + "]";
                        else if (key == "A" || key == "N" || key == "#")
                            value = value.replace(("]"), "") + customChar + "]";
                    }
                    if (actualkey.match(new RegExp(value))) match = true;
                    else match = false;
                }
            });
            return match;
        },


        _seekNext: function (isAfter, diffLen) {
            var caretPos = this._caretPosition(this._textbox);
            var currentPos = isAfter ? (diffLen ? (caretPos - diffLen - 1) : caretPos - 1) : caretPos;
            var tempPos = currentPos;
            var seekFlag = true;
            //seeking the focus to next valid position on right of MaskEdit TextBox
            while (seekFlag) {
                if (currentPos >= 0 && currentPos < this._maskLength) {
                    var _position = 0;
                    for (var temp = 0; temp <= currentPos; temp++) {
                        if ((this.model.maskFormat[temp] == "\\"))
                            _position += 1;
                    }
                    if (this.model.maskFormat.charAt(currentPos) != "C") {
                        if (this.model.maskFormat.indexOf("\\") >= 0) {
                            if (this.model.maskFormat.charAt(currentPos + _position) != "\\" && this.model.maskFormat.charAt(currentPos + _position - 1) != "\\") {
                                if (!this._charMap[this.model.maskFormat.charAt(currentPos + _position)]) {
                                    currentPos++;
                                }
                            }
                            else{
                                if (this.model.maskFormat.charAt(currentPos + _position) != "\\" && this.model.maskFormat.charAt(currentPos + _position - 1) == "\\") {
                                       ++currentPos;
                                }
                            }
                        }
                        else {
                            if (!this._charMap[this.model.maskFormat.charAt(currentPos)]) {
                                currentPos++;
                            }
                        }
                        if (currentPos != tempPos) {
                            tempPos = currentPos;
                            continue;
                        }
                    }
                }
                seekFlag = false;
            }
            return currentPos;
        },


        _seekBefore: function (isBefore) {
            var caretPos = this._caretPosition(this._textbox);
            var currentPos = isBefore ? (caretPos + 1) : caretPos;
            var tempPos = --currentPos;
            var seekFlag = true;
            // Stop Seek when backspace of select more than a char
            if (this._selectedTextKeyDown == 1)
                seekFlag = false;
            //seeking the focus to next valid position on left of MaskEdit TextBox
            while (seekFlag) {
                if (currentPos >= 0 && currentPos < this._maskLength) {
                    var _position = 0;
                    for (var temp = 0; temp <= currentPos; temp++) {
                        if ((this.model.maskFormat[temp] == "\\"))
                            _position += 1;
                    }
                    if (this.model.maskFormat.charAt(currentPos) != "C") {
                        if (this.model.maskFormat.indexOf("\\") >= 0) {
                            if (this.model.maskFormat.charAt(currentPos + _position) != "\\" && this.model.maskFormat.charAt(currentPos + _position - 1) != "\\") {
                                if (!this._charMap[this.model.maskFormat.charAt(currentPos + _position)]) {
                                    this._setCaretPosition(--currentPos);
                                }
                            } else{
								if (this.model.maskFormat.charAt(currentPos + _position - 1) == "\\") {
                                   this._setCaretPosition(--currentPos + _position);
                                }
							}

                        }
                        else {
                            if (!this._charMap[this.model.maskFormat.charAt(currentPos)]) {
                                this._setCaretPosition(--currentPos);
                            }
                        }
                    }
                    if (currentPos != tempPos) {
                        tempPos = currentPos;
                        continue;
                    }
                }
                seekFlag = false;
            }
            return currentPos;
        },


        _writeBuffer: function (keyValue, cursorPos, evt) {
            if (cursorPos <= this._maskLength) {
                var input = this._textbox.value;
			 if (this.indexValue != null && evt.keyCode != "95") {
               for (var temp=0;temp<this.indexValue.length;temp++) {
                    if (this.indexValue[temp] == cursorPos) {
                        if (keyValue != "_" || evt.keyCode == "8") this.indexValue[temp]="";
                    }	
                }
            }	
            if (evt.keyCode == "95") { this.indexValue[this.temp_index] = cursorPos; this.temp_index++; }
           
                if (this._tempMask != null)
                    var tempkey = this._updateCasing(keyValue, cursorPos);
                    keyValue = (tempkey == undefined) ? keyValue : tempkey;
                var strBeforeCursor = input.substring(0, cursorPos);
                var strAfterCursor = input.substring(cursorPos);
                if (this.model.maskFormat.indexOf("\\") >= 0) {
                    var _position = 0;
                    for (var temp = 0; temp <= cursorPos; temp++) {
                        if ((this.model.maskFormat[temp].indexOf("\\") >= 0) && (cursorPos != 0))
                            _position += 1;
                    }
                    if (this.model.maskFormat[cursorPos + _position].indexOf("\\") >= 0)
                        this._textbox.value = strBeforeCursor + input[cursorPos] + strAfterCursor.substr(1, strAfterCursor.length);
                    else
                        this._textbox.value = strBeforeCursor + keyValue + strAfterCursor.substr(1, strAfterCursor.length);
                }
                else
                    this._textbox.value = strBeforeCursor + keyValue + strAfterCursor.substr(1, strAfterCursor.length);
                this._setCaretPosition(cursorPos + 1);
            }
        },

        _updateCasing: function (key, pos) {
            for (var i = 0; i < pos + 1; i++) {
                if (this._tempMask.substr(i, 1) == '<' || this._tempMask.substr(i, 1) == '>')
                    pos++;
            }

            for (var j = pos; j > -1; j--) {
                if (this._tempMask.substr(j, 1) == '<') {
                    return key.toLowerCase();
                }
                else if (this._tempMask.substr(j, 1) == '>') {
                    return key.toUpperCase();
                }
            }
        },


        _getStrippedValue: function (isEmpty) {
            var i, value, mask = this.model.maskFormat, stripVal = isEmpty ? '' : null;
            value = (this._textbox.value == "" && this.model.inputMode != "password") ? this._maskModel : this._textbox.value;
            if (mask.length == 0) return value;
            var _position = 0;
            for (var i = 0; i < mask.length; i++) {
                stripVal = isEmpty ? stripVal : $.trim(stripVal);
                if ((this.model.maskFormat.indexOf("\\") >= 0)) {
                    if ((this.model.maskFormat[i] == "\\"))
                        _position += 1;
                    else if (this.model.maskFormat[i - 1] == "\\")
                        stripVal += this._textbox.value[i - _position];
                    else {
                        var char = mask[i], exp = null;

                        if ("9?$a*".indexOf(char) != -1)
                            exp = this._charMap[char];
                        else if (char == "A" || char == "N" || char == "#")
                            exp = this._charMap[char].replace(("]"), "") + this.model.customCharacter + "]";
                        else if (char == "C")
                            exp = "[" + this.model.customCharacter + "]";
                        else if (char == "&")
                            stripVal += value[i - _position];
                        if (exp && value[i - _position] && value[i - _position].match(new RegExp(exp)))
                            stripVal += value[i - _position];
                    }

                }
                else {
                    var char = mask[i], exp = null;

                    if ("9?$a*".indexOf(char) != -1)
                        exp = this._charMap[char];
                    else if (char == "A" || char == "N" || char == "#")
                        exp = this._charMap[char].replace(("]"), "") + this.model.customCharacter + "]";
                    else if (char == "C")
                        exp = "[" + this.model.customCharacter + "]";
                    else if (char == "&")
                        stripVal += value[i - _position];
                    if (exp && value[i] && value[i].match(new RegExp(exp)))
                        stripVal += value[i];
                }
            }
            return stripVal;
        },


        _getUnstrippedValue: function (isEmpty) {
            var temp_val = 0;
            var value = (this._textbox.value == "" && this.model.inputMode != "password") ? this._maskModel : this._textbox.value, unstripVal = null;
            if (this.model.maskFormat.length == 0) return value;

            if (value != undefined)
                unstripVal = $.trim(value.replace(/[_]/g, " ")) == "" ? null : value.replace(/[_]/g, " ");
            if (this.model.customCharacter == "_" && unstripVal == null) unstripVal="";
			if (unstripVal == null && this.indexValue[temp_val] != null) unstripVal="";
            if (value != undefined && this.indexValue[temp_val] != null && unstripVal != null) {   
                for(;temp_val<this.indexValue.length;temp_val++) {
					if (this.indexValue[temp_val] != "" || this.indexValue[temp_val] == "0"){
                        unstripVal=unstripVal.substr(0, this.indexValue[temp_val]) + "_"+ unstripVal.substr(this.indexValue[temp_val]+1);
                    }
                }
            }
            return (unstripVal == null && isEmpty) ? '' : unstripVal;
        },

        get_StrippedValue: function () {
            return this._getStrippedValue();
        },

        get_UnstrippedValue: function () {
            return this._getUnstrippedValue();
        },

        _setValue: function (value) {
            if (ej.isNullOrUndefined(value) || $.trim(value) == "") value = null;
            this.model.value = value;
            if (!this._isWatermark && this.model.inputMode != "password")
                this._hiddenSpan.css("display", "none");
            if (!ej.isNullOrUndefined(this.model.maskFormat) && this.model.maskFormat != "") {
                this._validateValue();
                if (ej.isNullOrUndefined(this.model.value)) { 
				    this._textbox.value = ej.isNullOrUndefined(value) ? "" : value; 
                    this._unStrippedMask = this._maskModel; 
                }
            }
            else { this._textbox.value = ej.isNullOrUndefined(value) ? "" : value;  this._unStrippedMask = this._textbox.value; }
            this._setWaterMark();
            this._prevValue = this._textbox.value;
            this._prevPosition = this.element[0].selectionStart;
        },


        _valueMapper: function () {
            var mapper = [], mapperIdx = 0, mask = this.model.maskFormat || "", maskChars = mask.split(""), i = 0, chr,idx = 0;
            var emptyMask = "", rule, rules = this._charMap, promptChar = "_";

            for (; i < mask.length; i++) {
                chr = maskChars[i];
                rule = rules[chr];
                if (rule) {
                    mapper[mapperIdx] = { rule: rule };
                    emptyMask += promptChar;
                    mapperIdx += 1;
                } else {
                    if (chr === "\\") {
                        idx = i + 1;
                        i++;
                        chr = maskChars[idx];
                    }
                    chr = chr.split("");
                    for (var j = 0; j < chr.length; j++) {
                        mapper[mapperIdx] = chr[j];
                        emptyMask += chr[j];
                        mapperIdx += 1;
                    }
                }
            }
            this._rules = mapper;
            this._emptyMask = emptyMask;
            this._maskLength = emptyMask.length;
        },
        _changeMask:function(locale){
            if (this._maskModel.length != 0) {
                var preferredlocale = ej.preferredCulture(locale), groupSep, currecySymbol, decimalSep,unmask = "";
                groupSep = preferredlocale.numberFormat[','];
                currecySymbol = preferredlocale.numberFormat.currency.symbol;
                decimalSep = preferredlocale.numberFormat['.'];
                for (var i = 0; i < this._maskModel.length; i++) {
                    if (this._maskModel[i] == ",")
                        unmask += groupSep;
                    else if (this._maskModel[i] == ".")
                        unmask += decimalSep;
                    else if (this._maskModel[i] == "$")
                        unmask += currecySymbol;
                    else
                        unmask += this._maskModel[i];
                }
                this._maskModel = unmask;
            }
        },
        _setMask: function (maskValue) {
            this._maskLength = maskValue.length;
            this.model.maskFormat = maskValue;
            this._tempMask = this.model.maskFormat;
            this._maskModel = maskValue.replace(/[9?CANa]/g, '_');
            if (this._maskModel.indexOf("<") >= 0 || this._maskModel.indexOf(">") >= 0) {
                this._maskModel = this._maskModel.replace(/[<>]/g, '');
                this.model.maskFormat = this.model.maskFormat.replace(/[<>]/g, '');
            }            
            if (!ej.isNullOrUndefined(this.model.maskFormat) && this.model.maskFormat != "") 
                this._validateValue();
            else if (!this.model.watermarkText && this._textbox.value != this._maskModel) {
                if (!this.model.maskFormat) {
                    var unstripVal = this._unStrippedMask.replace(/[_]/g, " ");
                    this._textbox.value = (this.model.customCharacter == null) ? $.trim(unstripVal.replace(/[\(\)-]/g, "")) : $.trim(unstripVal);
                    this._unStrippedMask = this._textbox.value;
                }
                else if (this.model.hidePromptOnLeave) {
                    this._textbox.value = this._maskModel;
                    this._unStrippedMask = this._textbox.value;
                    this._textbox.value = this.get_UnstrippedValue();
                }
                else this._textbox.value = this._maskModel;
            }
        },

        enable: function () {
            this.element.disabled = false;			
            this.element.removeAttr("disabled").removeClass('e-disable').attr({ "aria-disabled": false });
            if (this.wrapper.find('.e-placeholder').length > 0) this.wrapper.find('.e-placeholder').removeAttr("disabled", "disabled");
			this.wrapper.removeClass('e-disable-wrap');
            this.model.enabled = true;
        },

        disable: function () {
            this.element.disabled = true;
            this.element.attr("disabled", "disabled").addClass('e-disable').attr({ "aria-disabled": true });
            if (this.wrapper.find('.e-placeholder').length > 0) this.wrapper.find('.e-placeholder').attr("disabled", "disabled");
			this.wrapper.addClass('e-disable-wrap');
            this.model.enabled = false;
        },

        clear: function () {
            this._textbox.value = this.model.maskFormat.replace(/[9?aCAN]/g, '_');
            this.model.value = this.get_StrippedValue();
        },

        _wireEvents: function () {
            this._on(this.element, 'focus', this._OnFocusHandler);
            this._on(this.element, 'blur', this._OnBlurHandler);
            this._on(this.element, 'keydown', this._OnKeyDownHandler);
            this._on(this.element, 'input', this._OnInputHandler);
            this._on(this.element, 'keypress', this._OnKeyPressHandler);
            this._on(this.element, 'keyup', this._OnKeyUpHandler);
            this._on(this.element, 'mouseover', this._OnMouseOverHandler);
            this._on(this.element, 'mouseout', this._OnMouseOutHandler);
            this._on(this.element, 'paste', this._OnPasteHandler);
            this._on(this.element, 'cut', this._OnCutHandler);
        },

        _OnCutHandler: function (e) {
            var selectedValue = !ej.isNullOrUndefined(this._maskModel)?this._maskModel.substring(this._textbox.selectionStart, this._textbox.selectionEnd):"";
            var beforeSelection = this._textbox.value.substring(0, this._textbox.selectionStart);
            var afterSelection = this._textbox.value.substring(this._textbox.selectionEnd);
            var cursorPosition = this._textbox.selectionStart;
            var context = this;
            setTimeout(function () {
                context._textbox.value = beforeSelection + selectedValue + afterSelection;
                context._setCaretPosition(cursorPosition);
                context._prevValue = context._textbox.value;
                context._prevPosition = context.element[0].selectionStart;
                context._raiseEvents("change");
            }, 0);
        },


        _OnPasteHandler: function (e) {
            var context = this;
            this._keyFlag = true;
            setTimeout(function () {
                var text = $(context._textbox).val();
                context._setValue(text);
                context._raiseEvents("change");
            }, 0);
            return true;
        },


        _OnFocusHandler: function (e) {
            this.wrapper.addClass("e-focus");
            var formatValue = this.model.showPromptChar ? this._maskModel : (this._maskModel != "" && this._maskModel != null) ? this._maskModel.replace(/[_]/g, " ") : this._maskModel;
            if (this.model.readOnly)
                return;
            this._focusValue = this.model.value;
            if (!this._isWatermark && this.model.inputMode != "password")
                this._hiddenSpan.css("display", "none");
            if (this._textbox.value == "" && this._maskModel != "" && this.model.inputMode != "password")
                if (this.model.maskFormat.indexOf("\\") >= 0) {
                    this._textbox.value = formatValue;
                }
                else
                    this._textbox.value = ej.isNullOrUndefined(this._maskModel) ? "" : formatValue;
            if (this._maskModel != null && (this._textbox.value.indexOf("<") >= 0 || this._textbox.value.indexOf(">") >= 0)) {
                this._textbox.value = this._textbox.value.replace(/[<>]/g, '');
                this._maskModel = this._textbox.value;
                this._tempMask = this.model.maskFormat;
                this.model.maskFormat = this.model.maskFormat.replace(/[<>]/g, '');
            }

            if (this._textbox.value != formatValue && this._unStrippedMask != null && this.model.hidePromptOnLeave)
                this._textbox.value = this._unStrippedMask;

            if (!this.model.showPromptChar) this._textbox.value = this._getUnstrippedValue(true);

            $.fn.selectRange = function (start, end) {
                return this.each(function () {
                    if (this.setSelectionRange) {
                        this.focus();
                        this.setSelectionRange(start, end);
                    } else if (this.createTextRange) {
                        var range = this.createTextRange();
                        range.collapse(true);
                        range.moveEnd('character', end);
                        range.moveStart('character', start);
                        range.select();
                    }
                });
            };
            if (this.model.maskFormat) {
                $(this.element).selectRange(0, 0);
            }
            var proxy = this;
            setTimeout(function () {
                proxy._prevPosition = proxy.element[0].selectionStart;
            }, 0);
            this._raiseEvents("focusIn");
        },

        _OnBlurHandler: function (e) {
            this.wrapper.removeClass("e-focus");            
            this.model.value = this.get_StrippedValue();
            var dup = new Array();
            var option = new Array();
            if ((this._textbox.value.indexOf('_') != -1 || this._textbox.value.indexOf(' ') != -1)&& !ej.isNullOrUndefined(this.model.value)) {
                for (var i = 0; i < this.model.maskFormat.length; i++) {
                    if ((this.model.maskFormat[i] == "A") || (this.model.maskFormat[i] == "?")) dup.push(i);
                    else if ((this.model.maskFormat[i] == "9") || (this.model.maskFormat[i] == "a") || (this.model.maskFormat[i] == "C")) {
                        option.push(i);
                    }
                }
                for (var i = 0; i < dup.length; i++) {
                    if (this._textbox.value[dup[i]] === "_") {
                        this._showAlert();
                        this.model.value = this._textbox.value;
                    }
                }
                for (var i = 0; i < option.length; i++) {
                    if ((this.model.value[option[i]] == "_") || (this.model.value[option[i]] == " ")) {
                        this.model.value = this.model.value.substr(0, option[i]) + this.model.value.substr(option[i] + 1, this.model.value.length)
                        for (var j = i; j < option.length; j++) {
                            option[j] = option[j] - 1;
                        }
                    }
                }
            }
            this.model.value = (this.model.value != null) ? this.model.value.replace(/\s+/g, "") : this.model.value;
            if (this._textbox.value != undefined && (this.model.watermarkText == "" || (this.model.watermarkText != "" && this.model.value != ""))) {
                if (this.model.hidePromptOnLeave) {
                    this._unStrippedMask = this._textbox.value;
                    this._textbox.value = this.get_UnstrippedValue();
                }
                else this._unStrippedMask = this._textbox.value;
            }
            if (this.model.inputMode != "password")
                this._setWaterMark();
            this._raiseEvents("change");
            this._raiseEvents("focusOut");
        },


        _OnKeyDownHandler: function (e) {
            if (this.model.readOnly) return;
            this._keyFlag = true;
            if (this._checkMask) {
                var pos = this.element[0].selectionStart;
                var txt = this._getStrippedValue(true);
                this._setValue(txt);
                this._setCaretPosition(pos);
                this._checkMask = false;
            }
            this._keypressFlag = 0;
            this._keyupFlag = true;
            var val = ej.browserInfo().name;
            var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
            if ((ej.isDevice() && ej.isTouchDevice()) && !iOS && (e.keyCode == 229 || ((val == "mozilla") && e.keyCode == 0 && e.charCode == 0) || val == "edge" || val == "msie")) {
                this._keyupFlag = false;
            }
            this._raiseEvents("onKeyDown", null, { keyCode: e.keyCode, altKey: e.altKey, shiftKey: e.shiftKey, ctrlKey: e.ctrlKey, originalArgs: e });
			this._raiseEvents("keyDown", null, { keyCode: e.keyCode, altKey: e.altKey, shiftKey: e.shiftKey, ctrlKey: e.ctrlKey, originalArgs: e });
            this.element.removeClass("error");

            if (this._maskLength == 0)
                return true;

            var unicode = e.keyCode ? e.keyCode : e.charCode;
            var actualkey = String.fromCharCode(unicode);
            var currentPos = this._seekNext();
            var promptChar = this.model.showPromptChar ? "_" : " ";
            var val = ej.browserInfo().name;
            if ((val == "msie") && (this._textbox.value == "")) {
                if (!(this.model.maskFormat.indexOf("\\") >= 0))
                    this._textbox.value = this.model.maskFormat.replace(/[9?CANa#&]/g, '_');
                else {
                    for (var pos = 0; pos < this.model.maskFormat.length; ++pos) {
                        var val;
                        if (this.model.maskFormat[pos - 1] == "\\")
                            this._textbox.value += this.model.maskFormat[pos];
                        else

                            if (!(this.model.maskFormat[pos] == "\\"))
                                this._textbox.value += this.model.maskFormat[pos].replace(/[9?CANa#&]/g, '_');
                    }
                }
                this._setCaretPosition(currentPos);
            }

            if (unicode >= 35 && unicode <= 41) {
                if (window.navigator.appCodeName == "Mozilla" || window.navigator.appCodeName == "opera") {
                    this._keypressFlag = 1;
                }
            }
            if (e.shiftKey && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || e.keyCode == 46 || e.keyCode == 127) || (e.ctrlKey && (e.keyCode == 86 || e.keyCode == 65 || e.keyCode == 67 || e.keyCode == 88))) {
                this._keypressFlag = 1;
                return;
            }
            else if (unicode == 8) {

                if (this.model.inputMode != "password") {
                    this._keydownFlag = 1;
                    // Seek to next valid position
                    var currentPos = this._seekBefore();
                    if (!this._selectedTextKeyDown) {
                        if (currentPos >= 0 && currentPos < this._maskLength)
                            this._writeBuffer(promptChar, currentPos, e);                       
                        if (currentPos < 0) currentPos = 0;
                        this._setCaretPosition(currentPos);
                    }
                    else if (!this.model.showPromptChar && this._selectedTextKeyDown)
                    {                        
                        if (e.keyCode == 8 && currentPos == "-1" && this.indexValue != null) {
						    this.indexValue = [];
							this.temp_index = 0;
						}
						this._textbox.value = this.get_UnstrippedValue();
                        this._setCaretPosition(currentPos+1);
                    }
                    this._keydownFlag = 0;
                    this._selectedTextKeyDown = 0;
                    if (e.keyCode == 8 && currentPos == "-1" && this.indexValue != null) {
						this.indexValue = [];
						this.temp_index = 0;
					}
                    e.preventDefault();
                    this._prevValue = this._textbox.value;
                    this._prevPosition = this.element[0].selectionStart;
                    this._keyFlag = false;
                    return false;
                }
                this._keypressFlag = 1;
                return true;
            }
            else if (e.keyCode == 46 || e.keyCode == 127) {
                if (this.model.inputMode != "password") {
                    this._keydownFlag = 2;
                    // Seek to next valid position
                    currentPos = this._seekNext();
                    if (!this._selectedTextKeyDown) {
                    if (currentPos >= 0 && currentPos < this._maskLength) {                        
                       var _position=this. _getCunrrentPos(currentPos);
                            if (!((this.model.maskFormat[currentPos + _position] == "&")))
                                this._writeBuffer(promptChar, currentPos, e);
                        }
                    }
                    else if (!this.model.showPromptChar && this._selectedTextKeyDown) {
                        this._textbox.value = this.get_UnstrippedValue();
                        this._setCaretPosition(currentPos);
                    }
                    this._keydownFlag = 0;
                    this._selectedTextKeyDown = 0;
                    //if (e.keyCode == 46 && currentPos == "13" && this.indexValue != null) this.indexValue = [];
                    e.preventDefault();
                    return false;
                }
                this._keypressFlag = 1;
                return true;
            }
        },


        _ErrorHandler: function (currentPos) {
            var promptChar = this.model.showPromptChar ? "_" : " ";
            if (this._textbox.value == "") this._textbox.value = this.model.maskFormat.replace(/[9?$CANa*]/g, promptChar);
            this._setCaretPosition(currentPos);
            this._showAlert();
        },
        _getCunrrentPos: function (currentPos) {
            var _position = 0;
            for (var temp = 0; temp <= currentPos + _position; temp++) {
                if ((this.model.maskFormat[temp] == "\\"))
                    _position += 1;
            }
            return _position;
        },


        _OnKeyPressHandler: function (e) {
            if (this.model.readOnly) return;
            this._keyFlag = false;
            this._raiseEvents("keyPress", null, { keyCode: e.keyCode, altKey: e.altKey, shiftKey: e.shiftKey, ctrlKey: e.ctrlKey, originalArgs: e });
            if (this._maskLength == 0)
                return true;

            var unicode = e.keyCode ? e.keyCode : e.charCode;
            var actualkey = String.fromCharCode(unicode);
            var promptChar = this.model.showPromptChar ? "_" : " ";
            var currentPos = this._seekNext();
            var val = ej.browserInfo().name;
            var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
            if ((ej.isDevice() && ej.isTouchDevice()) && !iOS && (val == "edge" || val == "msie")) {
                return true;
            }
            if (this._validateChars(unicode, currentPos)) {
                if (((val == "mozilla") || (val == "opera")) && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39)) {
                }
                else if (((val == "mozilla") || (val == "opera")) && (e.ctrlKey && (unicode == 97 || unicode == 99 || unicode == 118 || unicode == 120))) {
                }
                else {
                    if (this._textbox.value == "") this._textbox.value = this.model.maskFormat.replace(/[9?$CANa&*]/g, promptChar);
                    if (this.model.maskFormat.indexOf("\\") >= 0) {
                        if (currentPos < this._maskLength)
                            this._writeBuffer(actualkey, currentPos, e);
                    }
                    else
                        this._writeBuffer(actualkey, currentPos, e);
                }
                this._prevValue = this._textbox.value;
            }
            else
                if (((val == "mozilla") || (val == "opera")) && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39)) {
                }
                else if (((val == "mozilla") || (val == "opera")) && (e.ctrlKey && (unicode == 97 || unicode == 99 || unicode == 118 || unicode == 120))) {
                }
                else if (this.model.maskFormat.indexOf("&") >= 0 || this.model.maskFormat.indexOf("\\") >= 0) {
                    var _position = this._getCunrrentPos(currentPos);
                    if (!((this.model.maskFormat[currentPos + _position] == "&") && (unicode == 127))) {
                        if (this.model.maskFormat.indexOf("\\") >= 0) {
                            if (currentPos < this._maskLength) {
                                if (this._validateChars(unicode, currentPos + _position) || (this.model.maskFormat[currentPos + _position - 1] == "\\"))
                                    this._writeBuffer(actualkey, currentPos, e);
                                else
                                    this._ErrorHandler(currentPos);
                            }
                        }
                        else {
                            if (this._validateChars(unicode, currentPos + _position))
                                this._writeBuffer(actualkey, currentPos, e);
                            else
                                this._ErrorHandler(currentPos);
                        }
                    }
                }
                else
                    this._ErrorHandler(currentPos);

            if (!this._keypressFlag && unicode != 9) {
                this._keypressFlag = 0;
                e.preventDefault();
                return false;
            }
            this._keypressFlag = 0;
        },

        _OnInputHandler: function (e) {
            var val = ej.browserInfo().name;
            var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream && !this._keyFlag;
            var isIE = (this._keyupFlag && (val == "edge" || val == "msie"));
			if (this._maskLength == 0)
                return true;
            if ((ej.isDevice() && ej.isTouchDevice()) && (iOS || isIE)) {
                var diffLen = this._textbox.value.length - this._prevValue.length;
                var pos = (diffLen == 1) ? this._seekNext(true) : this._seekNext(true, diffLen - 1), keyCode;
                var value = this._textbox.value[this.element[0].selectionStart - 1];
                keyCode = value.charCodeAt(0);
                if (!this._validateChars(keyCode, pos)) {
                    this._textbox.value = this._prevValue;
                    this._setCaretPosition(pos);
                    this._ErrorHandler(pos);
                }
                else {
                    this._textbox.value = this._prevValue;
                    var actualkey = String.fromCharCode(keyCode);
                    this._writeBuffer(actualkey, pos, e);
                }
                this._prevValue = this._textbox.value;
                this._prevPosition = this.element[0].selectionStart;
                this._checkMask = true;
            }
            if ((ej.isDevice() && ej.isTouchDevice()) && !iOS && !this._keyupFlag) {
                var start = this.element[0].selectionStart;
                var end = this.element[0].selectionEnd;
                if (start != end) {
                    this._textbox.setSelectionRange(end, end);
                }
                var promptChar = this.model.showPromptChar ? "_" : " ";
                var diffLen = this._textbox.value.length - this._prevValue.length;
                var isBackSpace = (diffLen <= 0) ? true : false;
                var currentPosition = isBackSpace ? this._seekBefore(true) : this._seekNext(true), keyCode;
                var value = this._textbox.value[this.element[0].selectionStart - 1];
                var start = 0;
                if (this.element[0].selectionStart > 0)
                    keyCode = value.charCodeAt(0);
                if (this._tempMask.length > this._textbox.value.length) {
                    if (ej.isNullOrUndefined(value) && this._emptyMask.slice(1, this._emptyMask.length) == this._textbox.value)
                        this._textbox.value = this._emptyMask;
                    else {
                        if (isBackSpace) {
                            this._textbox.value = this._prevValue;
                            this._writeBuffer(promptChar, currentPosition, e);
                        } else {
                            var pos = currentPosition;
                            if (!this._validateChars(keyCode, pos)) {
                                this._textbox.value = this._prevValue;
                                this._setCaretPosition(pos);
                                this._ErrorHandler(pos);
                            }
                            else {
                                this._textbox.value = this._prevValue;
                                var actualkey = String.fromCharCode(keyCode);
                                this._writeBuffer(actualkey, pos, e);
                            }
                        }
                    }
                    this._setCaretPosition(currentPosition);
                }
                else {
                    var pos = currentPosition;
                    if (!this._validateChars(keyCode, pos)) {
                        this._textbox.value = this._prevValue;
                        this._setCaretPosition(pos);
                        this._ErrorHandler(pos);
                    }
                    else {
                        this._textbox.value = this._prevValue;
                        var actualkey = String.fromCharCode(keyCode);
                        this._writeBuffer(actualkey, pos, e);
                        for (var i = 0; i < this._emptyMask.length; i++) {
                            if (this._emptyMask[i] == " " && this._textbox.value[i] != " " && value == this._textbox.value[i]) {
                                this._textbox.value = this._textbox.value.substring(0, startPos - 1) + " " + value + this._textbox.value.substring(endPos, this._textbox.value.length);
                                this._setCaretPosition(currentPosition + 1);
                            }
                        }
                    }
                }
                this._prevValue = this._textbox.value;
                this._prevPosition = this.element[0].selectionStart;
                this._keyupFlag = true;
            }
            this._keyFlag = false;
        },

        _OnKeyUpHandler: function (e) {
            if (this._maskLength == 0) this._raiseEvents("change");
            this._raiseEvents("keyUp", null, { keyCode: e.keyCode, altKey: e.altKey, shiftKey: e.shiftKey, ctrlKey: e.ctrlKey, originalArgs: e });
            if (!ej.isNullOrUndefined(this.model.validationRules)) this._hiddenInput.valid();
        },


        _OnMouseOverHandler: function (e) {
            this._raiseEvents("mouseOver");
        },


        _OnMouseOutHandler: function (e) {
            this._raiseEvents("mouseOut");
        },


        _raiseEvents: function (eventName, isCode, additionalArgs) {
            var eventArgs, strippedVal = this.get_StrippedValue(), unstrippedVal = this.get_UnstrippedValue();
            this.model.value = unstrippedVal !== null ? (this.model.customCharacter == null && $.trim(unstrippedVal.replace(/[\(\)-]/g, "")) == "") ? null : unstrippedVal : null;
            if (eventName == "change") {
                if (this.previousValue != this.model.value) {
                    this.previousValue = this.model.value;
                }
                else {
                    if (this._focusValue == this.model.value)
                        return false;
                }
            }
            eventArgs = { value: unstrippedVal, unmaskedValue: strippedVal };
            if (eventName == "change") eventArgs["isInteraction"] = !isCode ;
            if (eventName == "change") {
                this._trigger("_change", eventArgs);
                ej.isNullOrUndefined(this.model.value) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
            }
            if (additionalArgs) $.extend(true, eventArgs, additionalArgs);
			this._hiddenInput.val(strippedVal);
			this._trigger(eventName, eventArgs);
			},

        _OnValueChange: function () {
            if (this._textbox.value == "" && this._maskModel != "")
                this._textbox.value = this._maskModel;
            this._setValue(this._textbox.value);
        }

    });

    ej.InputMode = {
		/**  support for user enter character in password format. */
		Password: "password", 
		/**  support for user enter character in normal format. */
        Text: "text"
    };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to select the date and time values.
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejDateTimePicker", "ej.DateTimePicker", {

        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["value"],
        _setFirst: false,
        _rootCSS: "e-datetimepicker",
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true
        },
        _requiresID: true,


        defaults: {

            cssClass: "",

            locale: "en-US",

            readOnly: false,

            showRoundedCorner: false,

            enableRTL: false,

            htmlAttributes: {},
            allowEdit: true,

            enabled: true,

            value: "",

            name: null,

            minDateTime: new Date("1/1/1900 12:00:00 AM"),

            maxDateTime: new Date("12/31/2099 11:59:59 PM"),

            height: "",

            width: "",

            dateTimeFormat: "",

            showPopupButton: true,

            enableStrictMode: false,

            buttonText: {

                today: "Today",

                timeNow: "Time Now",

                done: "Done",

                timeTitle: "Time"
            },

            watermarkText: "Select datetime",

            enablePersistence: false,

            interval: 30,

            timeDisplayFormat: "",

            timePopupWidth: 105,
            popupPosition: "bottom",

            dayHeaderFormat: "short",

            startLevel: "month",

            depthLevel: "",

            startDay: -1,

            stepMonths: 1,

            showOtherMonths: true,

            specialDates: null,

            highlightWeekend: false,

            enableAnimation: true,

            headerFormat: 'MMMM yyyy',

            validationRules: null,

            validationMessage: null,

            validationMessages: null,
            timeDrillDown: {
                enabled: false,
                interval: 5,
                showMeridian: false,
                autoClose: true,
                showFooter: true
            },

            beforeOpen: null,

            beforeClose: null,

            open: null,

            close: null,

            change: null,

            create: null,

            destroy: null,

            focusIn: null,

            focusOut: null,

            disableDateTimeRanges: null,

            timeZone: true,
			
			disableTimeRanges: null,
        },


        dataTypes: {
            allowEdit: "boolean",
            cssClass: "string",
            locale: "string",
            readOnly: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            enabled: "boolean",
            enableAnimation: "boolean",
            dateTimeFormat: "string",
            showPopupButton: "boolean",
            buttonText: "data",
            watermarkText: "string",
            enablePersistence: "boolean",
            enableStrictMode: "boolean",
            interval: "number",
            timeDrillDown: "data",
            timeDisplayFormat: "string",
            dayHeaderFormat: "string",
            startLevel: "string",
            depthLevel: "string",
            startDay: "number",
            stepMonths: "number",
            showOtherMonths: "boolean",
            highlightWeekend: "boolean",
            specialDates: "data",
            headerFormat: "string",
            validationRules: "data",
            validationMessage: "data",
            validationMessages: "data",
            htmlAttributes: "data",
            disableDateTimeRanges: "data",
			disableTimeRanges: "data"
        },

        _setModel: function (options) {
		
            var option, validate = false;
            for (option in options) {
			if(option != "allowEdit" && option != "readOnly" && option != "enabled" && option != "validationRules" && option != "validationMessages" && option != "enableStrictMode" &&
			option != "height" && option != "width" && option != "showPopupButton" && option != "dateTimeFormat" && option != "watermarkText" && option != "htmlAttributes"){
					if (!this.popup) this._renderDropdown();
				}
                switch (option) {
                    case "allowEdit": this._changeEditable(options[option]); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "locale": this._localize(options[option]); break;
                    case "readOnly": this._readOnly(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "enableRTL": this._setRtl(options[option]); break;
                    case "enabled": this._enabled(options[option]); break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessages = null;
                        }
                        this.model.validationRules = options[option];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessages = options[option];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessages":
                        this.model.validationMessages = options[option];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "value":
                        options[option] = this._setValue(options[option]);
                        if (this._specificFormat())
                            this._stopRefresh = true
                        validate = true;
                        this._prevDateTime = this._prevDateTimeVal || this._preVal;
                        break;
                    case "enableStrictMode":
                        this.model.enableStrictMode = options[option];
                        validate = true;
                        break;
                    case "minDateTime":
                        var temp = this._stringToObject(options[option]);
                        var mintime = this._getFormat(temp, this.timePicker.model.timeFormat);
                        if (this._isValidDate(temp)) {
                            this.datePicker.option("minDate", temp);
                            if(this.datePicker.model.value && this.datePicker.model.value.toDateString() == this.datePicker.model.minDate.toDateString() )this.timePicker.option("minTime", mintime);
                            options[option] = temp;
                            this.model.minDateTime = temp;
                        }
                        else options[option] = this.model[option];
                        validate = true;
                        break;
                    case "maxDateTime":
                        var temp = this._stringToObject(options[option]);
                        var maxtime = this._getFormat(options[option], this.timePicker.model.timeFormat);
                        if (this._isValidDate(temp)) {
                            this.datePicker.option("maxDate", temp);
                            if(this.datePicker.model.value && this.datePicker.model.value.toDateString() == this.datePicker.model.maxDate.toDateString() )this.timePicker.option("maxTime", maxtime);
                            options[option] = temp;
                            this.model.maxDateTime = temp;
                        }
                        else options[option] = this.model[option];
                        validate = true; break;
                    case "height": this.wrapper.height(options[option]); break;
                    case "width": this.wrapper.width(options[option]); break;
                    case "dateTimeFormat":
                        this.model.dateTimeFormat = options[option];
                        if (this.isValidState) this._setValue(this.model.value);
                        break;
                    case "showPopupButton": this._showButton(options[option]); break;
                    case "watermarkText":
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options[option] = this.model.watermarkText = options[option];
                        this._localizedLabels.watermarkText = this.model.watermarkText;
                        this._setWaterMark();
                        break;
                    case "buttonText":
                        if (!ej.isNullOrUndefined(this._options))
                            this._options["buttonText"] = this.model.buttonText = options[option];
                        this._localizedLabels.buttonText = this.model.buttonText;
                        this._buttonText(options[option]); break;
                    case "interval":
                        this._updateTimeHeight();
                        this.timePicker.option("interval", options[option]); break;
                    case "timeDisplayFormat":
                        this._updateTimeHeight();
                        this.timePicker.option("timeFormat", options[option]); break;
					case "disableDateTimeRanges": 
					if(this._disabledDate) this._disabledDates = false;
					this.model.disableDateTimeRanges = (options[option]);
					this._setValue(this.model.value);
					break;
					case "disableTimeRanges":
                        this.model.disableTimeRanges = options[option];
                        this.timePicker.option('disableTimeRanges', this.model.disableTimeRanges);
                        break;
                    case "timePopupWidth":
                        this._updateTimeHeight();
                        var width = options[option];
                        if ((typeof (width) == "string" && width.indexOf("%") != -1) || typeof (width) == "string" )  options[option] = parseInt(width) > 0 ? width : 105;
                        else {
                            options[option] = width > 0 ? width : 105;
                        }
                        this.timePicker.option("popupWidth", options[option]);
                        break;
                    case "dayHeaderFormat": this.datePicker.option("dayHeaderFormat", options[option]); break;
                    case "startLevel": this.datePicker.option("startLevel", options[option]); break;
                    case "depthLevel": this.datePicker.option("depthLevel", options[option]); break;
                    case "startDay": this.datePicker.option("startDay", options[option]);
                        this.model.startDay = this.datePicker.model.startDay;
                        options[option] = this.model.startDay; break;
                    case "stepMonths": this.datePicker.option("stepMonths", options[option]); break;
                    case "showOtherMonths": this.datePicker.option("showOtherMonths", options[option]); break;
                    case "highlightWeekend": this.datePicker.option("highlightWeekend", options[option]); break;
                    case "specialDates": this.datePicker.option("specialDates", options[option]); this.model.specialDates = this.datePicker.model.specialDates; break;
                    case "headerFormat": this.datePicker.option("headerFormat", options[option]); break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "popupPosition": this.model.popupPosition = options[option]; this._setListPosition(); break;
                    case "timeDrillDown":

                        // For timeDrillDown.enabled
                        if (!ej.isNullOrUndefined(options[option].enabled)) {
                            this.model.timeDrillDown.enabled = options[option].enabled; this._changeDesign();
                        }

                        // For timeDrillDown.interval
                        if (!ej.isNullOrUndefined(options[option].interval)) {
                            this.model.timeDrillDown.interval = options[option].interval;
                            this._generateMins($.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)));
                        }

                        // For timeDrillDown.showMeridian
                        if (!ej.isNullOrUndefined(options[option].showMeridian)) {
                            this.model.timeDrillDown.showMeridian = options[option].showMeridian;
                            this._sfTimeHour.empty(); this._renderHourTable();
                        }

                        // For timeDrillDown.showFooter
                        if (!ej.isNullOrUndefined(options[option].showFooter)) {
                            this.model.timeDrillDown.showFooter = options[option].showFooter;
                            this._changeDesign();
                        }
                        break;

                }
            }
            if (validate) this._validateMinMax();
            this._valueChange(true);
            if (option == "value") options[option] = this.model.value;
            if(this.popup)this._updateTimeHeight();
            this._checkErrorClass();
        },
        observables: ["value"],

        _destroy: function () {
            if (this.isPopupOpen)
                this._hideResult();
            if (this.wrapper) {
                this.element.insertAfter(this.wrapper);
                this.wrapper.remove();
            }
            this.element.removeClass("e-js e-input").removeClass(ej.util.getNameSpace(this.sfType));
            this.element.removeAttr(" type aria-atomic aria-live tabindex aria-expanded aria-disabled placeholder role")
            !this._cloneElement[0].hasAttribute("name") && this.element.removeAttr("name");
            if (!ej.isNullOrUndefined(this.datePicker))
                this.datePicker.destroy();
            if (!ej.isNullOrUndefined(this.timePicker))
                this.timePicker.destroy();
            if(this.popup)this.popup.remove();
        },
        _initDisableTimeRanges: function (currvalue) {
            var value = this._getDateObj(currvalue, this.datePicker.model.dateFormat);
                for (var i = 0; i < this.model.disableDateTimeRanges.length; i++) {
					if(ej.isNullOrUndefined(this.model.disableDateTimeRanges[i].endDateTime)) this.model.disableDateTimeRanges[i].endDateTime = this.model.disableDateTimeRanges[i].startDateTime;
					if(this.model.disableDateTimeRanges[i].startDateTime instanceof Date || this.model.disableDateTimeRanges[i].endDateTime instanceof Date){
						var sdate = this._getFormat(this.model.disableDateTimeRanges[i].startDateTime, this.datePicker.model.dateFormat);
						var edate = this._getFormat(this.model.disableDateTimeRanges[i].endDateTime, this.datePicker.model.dateFormat);
					}
                    else{
						var sdate = this.model.disableDateTimeRanges[i].startDateTime.split(' ')[0];
						var edate = this.model.disableDateTimeRanges[i].endDateTime.split(' ')[0];
					}
                    var startval = new Date(this.model.disableDateTimeRanges[i].startDateTime);
                    var endval = new Date(this.model.disableDateTimeRanges[i].endDateTime);
                    if (sdate == edate) {
                        if (this._compare(value, this._setEmptyTime(this.model.disableDateTimeRanges[i].startDateTime))) {
                            var stime = this._getFormat(startval, this.timePicker.model.timeFormat);
                            var etime = this._getFormat(endval, this.timePicker.model.timeFormat);
                            var values = [];
                            values.push({ startTime: stime, endTime: etime });
                            this.timePicker.option("disableTimeRanges", values);
							return;
                        }
                        else
                            this.timePicker.option("disableTimeRanges", this._defaultMinVal());
					if(!this._disabledDates && this.model.disableDateTimeRanges[i].endDateTime == this.model.disableDateTimeRanges[i].startDateTime){
						if(this.model.disableDateTimeRanges[i].endDateTime instanceof Date == false){
							if((this._getFormat(this.model.disableDateTimeRanges[i].endDateTime,this.model.dateTimeFormat) == this._getFormat(this.model.disableDateTimeRanges[i].endDateTime,this.model.dateFormat) && ej.isNullOrUndefined(this.model.disableDateTimeRanges[i].endDateTime.split(' ')[1]))){
									this._between.push(new Date(this.model.disableDateTimeRanges[i].endDateTime));
								}
						}
					}
                   }
                    else if (sdate != edate) {                            
						if (this._compare(value, this._setEmptyTime(this.model.disableDateTimeRanges[i].startDateTime))||this._compare(value, this._setEmptyTime(this.model.disableDateTimeRanges[i].endDateTime))) {
							var stime = this.timePicker.model.minTime,etime = this.timePicker.model.maxTime;
                            if(this.datePicker.model.value.toDateString() == new Date(this.model.disableDateTimeRanges[i].startDateTime).toDateString()) stime = this._getFormat(new Date(this.model.disableDateTimeRanges[i].startDateTime), this.timePicker.model.timeFormat);
                            if(this.datePicker.model.value.toDateString() == new Date(this.model.disableDateTimeRanges[i].endDateTime).toDateString()) etime = this._getFormat(new Date(this.model.disableDateTimeRanges[i].endDateTime), this.timePicker.model.timeFormat);
                            var values = [];
                            values.push({ startTime: stime, endTime: etime });
                            this.timePicker.option("disableTimeRanges", values);
							return;
                        }
						if(!this._disabledDates){
							var stime = this._getFormat(new Date(this.model.disableDateTimeRanges[i].startDateTime), this.timePicker.model.timeFormat);
							var etime = this._getFormat(new Date(this.model.disableDateTimeRanges[i].endDateTime), this.timePicker.model.timeFormat);
							if(stime == this.timePicker.model.minTime){
								this._between.push(new Date(this.model.disableDateTimeRanges[i].startDateTime));
							}
							if(this.model.disableDateTimeRanges[i].endDateTime instanceof Date == false){
								if(this._getFormat(this.model.disableDateTimeRanges[i].endDateTime,this.model.dateTimeFormat) == this._getFormat(new Date(this.model.disableDateTimeRanges[i].endDateTime), this.datePicker.model.dateFormat)){
									etime = this.timePicker.model.maxTime;
								}
							}
							if(etime == this.timePicker.model.maxTime){
								this._between.push(new Date(this.model.disableDateTimeRanges[i].endDateTime));
							}
						}
                    }

            }
        },
		_disableBetweenDates: function(){
			for (var i = 0; i < this.model.disableDateTimeRanges.length; i++) {
					var datePickedStr1 = this.model.disableDateTimeRanges[i].startDateTime;
                    var datePickedDate1 = this._setEmptyTime(datePickedStr1);
					var startDateTimeVal = this._getFormat(new Date(this.model.disableDateTimeRanges[i].startDateTime), this.timePicker.model.timeFormat);
                    var endDateTimeVal = this._getFormat(new Date(this.model.disableDateTimeRanges[i].endDateTime), this.timePicker.model.timeFormat);
                    var datePickedStr2 = this.model.disableDateTimeRanges[i].endDateTime;
                    var datePickedDate2 = this._setEmptyTime(datePickedStr2);
                        while (datePickedDate1 < datePickedDate2) {
                           datePickedDate1.setDate(datePickedDate1.getDate() + 1);
							if(new Date(datePickedDate1) < datePickedDate2){
								this._between.push(new Date(datePickedDate1));
								}
                        }
					
			}
			this._datesDisabled = true;
		},
		_init: function (options) {
		    this._cloneElement = this.element.clone();
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            this._options = options;
            this._ISORegex();
            this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
            this._validateMeridian();
            this._checkAttribute();
            this._initialize();
            this._initial = true;
            this._interval = 60;
            this._render();
            this._wireEvents();
            this._addAttr(this.model.htmlAttributes);
            if (!ej.isNullOrUndefined(options) && !ej.isNullOrUndefined(options.validationMessage))
                this.model.validationMessages = this.model.validationMessage;
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
			this._removeWatermark();
            if (options && options.value != undefined && options.value != this.element.val()) {
                this._trigger("_change", { value: this.element.val() });
            }
        },
        _ISORegex: function () {
            this._tokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            // complex case for iso 8601 regex only
            this._extISORegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._basicISORegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._numberRegex = {
                2: /\d\d?/,
                4: /^\d{4}/,
                "z": /Z|[+-]\d\d(?::?\d\d)?/gi,
                "t": /T/,
                "-": /\-/,
                ":": /:/
            };
            this._zeroRegex = /Z|[+-]\d\d(?::?\d\d)?/;
            this._dates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                // YYYYMM is NOT allowed by the standard
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/]
            ];

            // iso time formats and regexes
            this._times = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/]
            ];
        },
        _changeDesign: function () {
            if (this.model.timeDrillDown.enabled) {
                var state = this.model.timeDrillDown.showFooter ? "block" : "none";
                this.popup.addClass("e-drill-down");
                this._timeContainer.css("display", "none");
                this._buttonContainer.css("display", "none");
                this.datePicker.option("showFooter", this.model.timeDrillDown.showFooter);
                $('.e-footer', this._sfTimeHour).css("display", state);
                $('.e-footer', this._sfTimeMins).css("display", state);
            }
            else {
                this.popup.removeClass("e-drill-down");
                this._sfTimeHour.hide();
                this._sfTimeMins.hide();
                this._updateTimeHeight();
                this._dateContainer.show();
                this._timeContainer.show();
                this._buttonContainer.show();
                this.datePicker.option("showFooter", false);
                this.timePicker._refreshScroller();
                this.timePicker._changeActiveEle();
            }
        },
        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _checkAttribute: function () {
            this.model.value = this.model.value === "" ? this.element[0].value : this.model.value;
            if (!this._options.minDateTime) this.model.minDateTime = this.element[0].min;
            if (!this._options.maxDateTime) this.model.maxDateTime = this.element[0].max;
            if (ej.isNullOrUndefined(this._options.readOnly)) this.model.readOnly = this.element.is("[readonly]");
            if (ej.isNullOrUndefined(this._options.enabled)) this.model.enabled = !this.element.is("[disabled]");
        },
        _setValidation: function () {
            this.element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            var name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessages)
                            ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },
		_validateDisableRanges: function(){
			for (var i = 0; i < this.model.disableDateTimeRanges.length; i++) {
				var tempValue = this.model.value;
				if(new Date(this.model.value).getTime() >= new Date(this.model.disableDateTimeRanges[i].startDateTime).getTime() && new Date(this.model.value).getTime() <= new Date(this.model.disableDateTimeRanges[i].endDateTime).getTime()) this.model.value = null;
				if(this.model.value == null && tempValue !=null && this.model.enableStrictMode) this.isValidState = false;	
				if(this.isValidState) this.element.val(this._getFormat(this.model.value,this.model.dateTimeFormat));
			}
		},
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
                else if (keyName == "disabled") proxy._enabled(false);
                else if (keyName == "readOnly") proxy._readOnly(true);
                else if (keyName == "style") proxy.wrapper.attr(key, value);
                else if (keyName == "id") {
                    proxy.wrapper.attr(key, value + "_wrapper");
                    proxy.element.attr(key, value);
                }
                else if (ej.isValidAttr(proxy.element[0], keyName)) proxy.element.attr(keyName, value);
                else proxy.wrapper.attr(keyName, value);
            });
        },
        _validateMeridian: function () {
            var culture = ej.preferredCulture(this.model.locale);
            if (culture) this.model.locale = culture.name == "en" ? "en-US" : culture.name;
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.timeDrillDown)) {
                    if (ej.isNullOrUndefined(this._options.timeDrillDown.showMeridian))
                        this.model.timeDrillDown.showMeridian = ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard["AM"]) ? false : true;
                }
                else this.model.timeDrillDown.showMeridian = ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard["AM"]) ? false : true;
            }
            else
                this.model.timeDrillDown.showMeridian = ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard["AM"]) ? false : true;
        },
        _initialize: function () {
            var val;
            this.popup = null;
            this.isPopupOpen = false;
            this.isValidState = true;
            this._localizedLabels = this._getLocalizedLabels();
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.buttonText))
                    $.extend(this._localizedLabels.buttonText, this._options.buttonText);
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            this._localizedLabelToModel();
            if (this.model.startDay == -1) this.model.startDay = ej.preferredCulture(this.model.locale).calendar.firstDay;
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            this._isIE9 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "9.0") ? true : false;
            if (!this.model.dateTimeFormat || !this.model.timeDisplayFormat) this._getDateTimeFormat();
            if (!this.model.value || (typeof JSON === "object" && JSON.stringify(this.model.value) === "{}")) val = null;
            else if (!(this.model.value instanceof Date)) {
                var dateTimeObj = ej.parseDate(this.model.value, this.model.dateTimeFormat, this.model.locale);
                val = dateTimeObj ? dateTimeObj : (dateTimeObj = this._checkJSONString(this.model.value)) ? dateTimeObj : null;
            }
            else val = this.model.value;
            if (val) this.model.value = val;
            var min = this.model.minDateTime = this._stringToObject(this.model.minDateTime);
            if (!min || !this._isValidDate(min)) this.model.minDateTime = this.defaults.minDateTime;
            var max = this.model.maxDateTime = this._stringToObject(this.model.maxDateTime);
            if (!max || !this._isValidDate(max)) this.model.maxDateTime = this.defaults.maxDateTime;
        },
        _checkJSONString: function (dateTimeString) {
            // Validate the string value
            var dateTimeObj = new Date(dateTimeString);
            if (!isNaN(Date.parse(dateTimeObj))) {
                if ((dateTimeObj.toJSON() === this.model.value) || (dateTimeObj.toGMTString() === this.model.value) ||
                    (dateTimeObj.toISOString() === this.model.value) || (dateTimeObj.toLocaleString() === this.model.value) ||
                    (dateTimeObj.toString() === this.model.value) || (dateTimeObj.toUTCString() === this.model.value))
                    if (this.model.timeZone) {
                        return new Date(new Date(dateTimeObj).getTime() + (ej.serverTimezoneOffset * 60 * 60 * 1000));
                    } else {
                        if (dateTimeString.match(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i) && dateTimeString.match(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i).length > 0) {
                            var date = dateTimeString.split('Z')
                            date = date[0];
                            return new Date(date);
                        }
                    }
                else if (typeof dateTimeString == "string") return this._dateFromISO(dateTimeString);
            } else if (this._extISORegex.exec(dateTimeString) || this._basicISORegex.exec(dateTimeString)) return this._dateFromISO(dateTimeString);
        },
        _render: function () {
            this._renderWrapper();
            this._renderIcon();
            this._setDimentions();
            this._checkProperties();
        },

        _renderWrapper: function () {
            this.element.addClass("e-input").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', "tabindex": "0", 'role':'combobox','aria-expanded':'false' });
            this.wrapper = ej.buildTag("span.e-datetime-wrap e-widget " + this.model.cssClass + "#" + this.element[0].id + "_wrapper").insertAfter(this.element);
            this._setValue(this.model.value);
            this.wrapper.attr("style", this.element.attr("style"));
            this.element.removeAttr("style");
            if (!ej.isTouchDevice()) this.wrapper.addClass('e-ntouch');
            this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
            this.wrapper.append(this.container);
            if (!this._isSupport) {
                this._hiddenInput = ej.buildTag("input.e-input e-placeholder ", "", {}, { type: "text" }).insertAfter(this.element);
                this._hiddenInput.val(this._localizedLabels.watermarkText);
                this._hiddenInput.css("display", "block");
                var proxy = this;
                $(this._hiddenInput).focus(function () {
                    proxy.element.focus();
                });
            }
        },
        _removeWatermark: function () {
            if (this.element.val() != "" && !this._isSupport && this._hiddenInput)
                this._hiddenInput.css("display", "none");
        },
        _renderIcon: function () {
            if (!this.model.showPopupButton) return false;
            this.datetimeIcon = ej.buildTag("span.e-select", "", {}).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var icon = ej.buildTag("span.e-icon e-datetime", "", {}, { "aria-label": "select" }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this.datetimeIcon.append(icon);
            this.container.append(this.datetimeIcon).addClass("e-padding");
            this._on(this.datetimeIcon, "click", this._iconClick);
            this._on(this.datetimeIcon, "mousedown", function (e) { e.preventDefault(); });
        },
        _setDimentions: function () {
            if (!this.model.height) this.model.height = this.element.attr("height"); if (!this.model.width) this.model.width = this.element.attr("width");
            this.wrapper.height(this.model.height);
            this.wrapper.width(this.model.width);
        },

        _renderDropdown: function () {
            var oldWrapper = $("#" + this.element[0].id + "_popup").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.popup = ej.buildTag("div.e-datetime-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.element[0].id + "_popup").css("visibility", "hidden");
            if (!ej.isTouchDevice()) this.popup.addClass('e-ntouch');
            $('body').append(this.popup);
            this._renderControls();

            var _timeTitle, _dateContainer, popupContainer, _today, _now, _done;

            _timeTitle = ej.buildTag("div.e-header", this._localizedLabels.buttonText.timeTitle).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._dateContainer = ej.buildTag("div.e-datecontainer").append(this.datePicker.popup).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._timeContainer = ej.buildTag("div.e-timecontainer").append(_timeTitle, this.timePicker.popup).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._drillDownContainer = ej.buildTag("div.e-drillDowncontainer").append().attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            popupContainer = ej.buildTag("div.e-popup-container").append(this._dateContainer, this._timeContainer, this._drillDownContainer).attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            _today = ej.buildTag("div.e-dt-button e-dt-today e-btn e-select e-flat", this._localizedLabels.buttonText.today).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            _now = ej.buildTag("div.e-dt-button e-dt-now e-btn e-select e-flat", this._localizedLabels.buttonText.timeNow).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            _done = ej.buildTag("div.e-dt-button e-dt-done e-btn e-select e-flat", this._localizedLabels.buttonText.done).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._buttonContainer = ej.buildTag("div.e-button-container").append(_today, _now, _done).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._renderDrillDown();
            this.popup.append(popupContainer, this._buttonContainer);
            this._checkForResponsive();
            this._updateTimeHeight();

            this._bindOperations();
            this._updateValues();
            this.popup.css({ "visibility": "visible", "display": "none" });

            this._on(_today, "click", this._todayClick);
            this._on(_now, "click", this._nowClick);
            this._on(_done, "click", this._doneClick);
            this.popup.on("mouseenter touchstart", $.proxy(function () { this._popClose = true; }, this));
            this.popup.on("mouseleave touchend", $.proxy(function () { this._popClose = false; }, this));
            this._changeDesign();
        },
        _renderControls: function () {
            this._renderDateControl();
            this._renderTimeControl();
            var tempContainer = ej.buildTag("span").append(this.datePicker.wrapper, this.timePicker.wrapper);
            tempContainer.find("span").css("display", "none");
            this.popup.append(tempContainer);
        },
        _renderDrillDown: function () {
            this._renderHourPopup();
            this._renderMinsPopup();
        },
        _renderHourPopup: function () {
            var table;
            this._sfTimeHour = ej.buildTag('div.e-timepicker e-popup e-widget ' + this.model.cssClass + ' e-time-hours ', "", {}, { id: (this._id ? 'e-hours-' + this._id : "") }).attr({ 'aria-hidden': 'true' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
            if (!ej.isTouchDevice()) this._sfTimeHour.addClass('e-ntouch');
            this._drillDownContainer.append(this._sfTimeHour);
            this._renderHourTable();
        },
        _renderHourTable: function () {
            // Rendering header template
            ej.buildTag("div.e-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                   .append(ej.buildTag("span.e-prev").append(ej.buildTag('a.e-icon e-arrow-sans-left').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-hours-headertext").text("October 2015").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(ej.buildTag("span.e-next").append(ej.buildTag('a.e-icon e-arrow-sans-right').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .appendTo(this._sfTimeHour);

            // Render meridian calendar popup.
            if (this._interval < 1) return false;
            var start, end, timeVal, rowCount, table, tr, interval = this._interval * 60000;
            var tableCount = this.model.timeDrillDown.showMeridian ? 2 : 1; rowCount = this.model.timeDrillDown.showMeridian ? 6 : 4;
            var timeDisplayFormat = this.model.timeDrillDown.showMeridian ? "hh" : "HH:00";
            var meridianText = ["AM", "PM"], count = 0, meridianClass = "";

            start = this.timePicker._createObject("12:00:00 AM");
            end = this.model.timeDrillDown.showMeridian ? this.timePicker._createObject("11:59:59 AM") : this.timePicker._createObject("11:59:59 PM");

            for (var i = 0; i < tableCount; i++) {
                if (this.model.timeDrillDown.showMeridian) {
                    meridianClass = meridianText[i].toLowerCase();
                    var txt = !ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard[meridianText[i]]) ? ej.preferredCulture(this.model.locale).calendars.standard[meridianText[i]][0] : "";
                    ej.buildTag("div.e-header-" + meridianClass).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                      .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-hours-meridiantxt-" + meridianClass).text(txt)
                      .attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                      .appendTo(this._sfTimeHour);
                }

                // Table for Time Value
                table = ej.buildTag("table.e-dp-viewhours", "", {}).data("e-table", "data").attr({ 'role': 'grid' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                this._sfTimeHour.append(table);

                var tbody = ej.buildTag('tbody.e-timepicker-hours').attr((this._isIE8) ? { 'unselectable': 'on' } : {});

                tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});

                while (this.timePicker._compareTime(end, start, true)) {
                    timeVal = this._localizeTime(start, timeDisplayFormat);
                    var tdtag = ej.buildTag("td.e-hour e-state-default", timeVal);
                    this.model.timeDrillDown.showMeridian && tdtag.addClass("e-hour-" + meridianClass);
                    if (this._isIE8) tdtag.attr("unselectable", "on");
                    tr.append(tdtag);
                    count++;
                    if (count >= rowCount) {
                        count = 0;
                        tbody.append(tr);
                        tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    }
                    start = this.timePicker._createObject(start).getTime() + interval;
                }

                //tbody.append(tr);
                table.append(tbody);

                if (this.model.timeDrillDown.showMeridian) {
                    start = this.timePicker._createObject("12:00:00 PM");
                    end = this.timePicker._createObject("11:59:59 PM");
                }
            }

            // Rendering the footer template
            ej.buildTag("div.e-footer")
              .append(ej.buildTag("span.e-footer-icon"))
              .append(ej.buildTag("span.e-footer-text"))
              .appendTo(this._sfTimeHour);
            $('.e-footer-text', this._sfTimeHour).html(this._localizedLabels.buttonText.timeNow);
            $(".e-hours-headertext", this._sfTimeHour).text(ej.format(this.datePicker.model.value, "dd MMM yyyy"));

            // Bind action to the item.
            this._on(this._sfTimeHour.find('.e-hour'), "click", $.proxy(this._hourNavHandler, this));
            this._on($('.e-next', this._sfTimeHour), "click", $.proxy(this._prevNextHourHandler, this));
            this._on($('.e-prev', this._sfTimeHour), "click", $.proxy(this._prevNextHourHandler, this));
            this._on($('.e-footer', this._sfTimeHour), "click", this._todayBtn);
            $('.e-hours-headertext', this._sfTimeHour).on("click", $.proxy(this._forwardNavHandler, this));

            this._sfTimeHour.hide();
        },
        _localizeTime: function (value, format) {
            return $.trim(ej.format(this.timePicker._createObject(value), format, this.model.locale));
        },
        _renderMinsPopup: function () {
            this._sfTimeMins = ej.buildTag('div.e-timepicker e-popup e-widget ' + this.model.cssClass + ' e-time-minitues ', "", {}, { id: (this._id ? 'e-time-minitues-' + this._id : "") }).attr({ 'aria-hidden': 'true' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
            if (!ej.isTouchDevice()) this._sfTimeMins.addClass('e-ntouch');
            this._drillDownContainer.append(this._sfTimeMins);

            // Rendering header template
            ej.buildTag("div.e-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                   .append(ej.buildTag("span.e-prev").append(ej.buildTag('a.e-icon e-arrow-sans-left').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-minitues-headertext").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .append(ej.buildTag("span.e-next").append(ej.buildTag('a.e-icon e-arrow-sans-right').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                   .appendTo(this._sfTimeMins);

            // Meridian Header template
            ej.buildTag("div.e-mins-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                          .append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-minitues-meridiantxt").text("AM")
                          .attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                          .appendTo(this._sfTimeMins);

            // Table for Time Value
            var table = ej.buildTag("table.e-dp-viewmins", "", {}).data("e-table", "data").attr({ 'role': 'grid' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._sfTimeMins.append(table);

            var tbody = ej.buildTag('tbody.e-timepicker-mins').attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            // Render Time value
            if (this._intervall < 1) return false;
            var start, end, timeVal, interval = this._interval * 60000;
            start = this.timePicker._createObject("12:00:00 AM");
            end = this.timePicker._createObject("11:59:59 PM");
            var tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var count = 0;
            while (this.timePicker._compareTime(end, start, true)) {
                timeVal = this._localizeTime(start, "HH:00");
                var tdtag = ej.buildTag("td.e-mins e-state-default", timeVal);
                if (this._isIE8)
                    tdtag.attr("unselectable", "on");
                tr.append(tdtag);
                count++;
                if (count >= 4) {
                    count = 0;
                    tbody.append(tr);
                    tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                }
                start = this.timePicker._createObject(start).getTime() + interval;
            }
            //tbody.append(tr);
            table.append(tbody);
            $('.e-minitues-headertext', this._sfTimeMins).text($('.e-hours-headertext', this._sfTimeHour).text());

            // Rendering the footer template
            ej.buildTag("div.e-footer")
               .append(ej.buildTag("span.e-footer-icon"))
               .append(ej.buildTag("span.e-footer-text"))
               .appendTo(this._sfTimeMins);
            $('.e-footer-text', this._sfTimeMins).html(this._localizedLabels.buttonText.timeNow);
            $(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this.datePicker.model.value, "dd MMM yyyy"));
            !this.model.timeDrillDown.showMeridian && $(".e-mins-header", this._sfTimeMins).css("display", "none");

            // Bind action to the item.
            this._on(table.find('.e-mins'), "click", $.proxy(this._minsNavHandler, this));
            this._on($('.e-next', this._sfTimeMins), "click", $.proxy(this._prevNextMinsHandler, this));
            this._on($('.e-prev', this._sfTimeMins), "click", $.proxy(this._prevNextMinsHandler, this));
            this._on($('.e-footer', this._sfTimeMins), "click", this._todayBtn);
            $('.e-minitues-headertext', this._sfTimeMins).on("click", $.proxy(this._forwardNavHandler, this));
            this._sfTimeMins.hide();
        },
        _todayBtn: function () {
            this._nowClick();
            this._hideResult();
        },
        _hourNavHandler: function (e) {
            var value;
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e && $(e.target).hasClass("e-disable")) return false;
            if (e && e.type) e.preventDefault();

            $("table", this._sfTimeHour).find("td").removeClass("e-active");
            $(e.target).addClass("e-active");

            this._sfTimeHour.hide();
            this._sfTimeMins.show();
            this._addFocus(this._sfTimeMins);
            if (this.model.timeDrillDown.showMeridian) {
                var txt = $(e.target).hasClass("e-hour-am") ? "AM" : "PM";
                value = $(e.target).text() + ":00 " + txt;
            }
            else
                value = $(e.target).text();
            this._generateMins(value);
            var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
            var val = $.trim(ej.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
            var val2 = $.trim(ej.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));
            var index = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
            index = Math.ceil(index);
            this._hoverMins = this._setFocusByIndex("mins", index, this._sfTimeMins);
        },
        _minsNavHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e && $(e.target).hasClass("e-disable")) return false;
            if (e && e.type) e.preventDefault();
            $("table", this._sfTimeMins).find("td").removeClass("e-active").removeClass("e-state-hover");
            $(e.target).addClass("e-active");
            if (this.model.timeDrillDown.showMeridian) {
                var value = $(e.target).text() + " " + ej.format(this._datetimeValue, "tt", "en-US");
                value = this.timePicker._localizeTime(value)
            }
            else
                value = $(e.target).text();
            this.timePicker.option("value", value);
            this.datePicker.option("value", this._datetimeValue);
            this._datetimeValue = new Date(this.model.value.toString());
            this._updateInput();
            this.model.timeDrillDown.autoClose && this._hideResult(e);
        },
        _generateMins: function (value) {
            var minsTable = $('table', this._sfTimeMins);
            minsTable.empty();
            this.model.timeDrillDown.showMeridian ? $(".e-mins-header", this._sfTimeMins).show() : $(".e-mins-header", this._sfTimeMins).hide()
            var displayFormat = this.model.timeDrillDown.showMeridian ? "hh:mm" : "HH:mm";
            $('.e-minitues-headertext', this._sfTimeMins).text($('.e-hours-headertext', this._sfTimeHour).text());
            var tbody = ej.buildTag('tbody.e-timepicker-mins').attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var start, tr, end, timeVal, count = 0, interval = this.model.timeDrillDown.interval * 60000;
            start = this.timePicker._createObject(value);
            this._datetimeValue.setHours(start.getHours());
            end = this.timePicker._createObject(start).getTime() + 59 * 60000;
            tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            tbody.append(tr);
            while (this.timePicker._compareTime(end, start, true)) {
                if (count >= 4) {
                    count = 0;
                    tr = ej.buildTag('tr', "").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    tbody.append(tr);
                }
                timeVal = this._localizeTime(start, displayFormat);
                var tdtag = ej.buildTag("td.e-mins e-state-default", timeVal);
                if (this._isIE8)
                    tdtag.attr("unselectable", "on");
                tr.append(tdtag);
                count++;
                start = this.timePicker._createObject(start).getTime() + interval;
            }
            minsTable.append(tbody);
            $(".e-mins-header", this._sfTimeMins).find('.e-minitues-meridiantxt').text(ej.format(this._datetimeValue, "tt", this.model.locale))
            this._disableRange("mins");
            this._on(minsTable.find('.e-mins'), "click", $.proxy(this._minsNavHandler, this));
        },
        _prevNextHourHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            event.preventDefault();
            var element = ($(event.target).is('a')) ? $(event.target.parentNode) : $(event.target);
            var progress = element.hasClass('e-prev') ? true : false;
            this._processNextPrev(progress, this._sfTimeHour);
        },
        _prevNextMinsHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            event.preventDefault();
            var element = ($(event.target).is('a')) ? $(event.target.parentNode) : $(event.target);
            var progress = element.hasClass('e-prev') ? true : false;
            this._processNextPrev(progress, this._sfTimeMins);
        },
        _processNextPrev: function (progress, wrapper) {
            if (progress && wrapper.find(".e-arrow-sans-left").hasClass("e-disable")) return false;
            else if (!progress && wrapper.find(".e-arrow-sans-right").hasClass("e-disable")) return false;
            var currentTable = $("table", wrapper), temp;
            var incVal, tClassName = currentTable.get(0).className;
            switch (tClassName) {
                case "e-dp-viewhours":
                    incVal = progress ? -1 : 1;
                    this._datetimeValue.setDate(this._datetimeValue.getDate() + incVal);
                    this._disableRange("hour");

                    this._hoverHour = this._setFocusByIndex("hour", this._hoverHour, this._sfTimeHour);
                    $(".e-hours-headertext", this._sfTimeHour).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
                    $(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
                    break;
                case "e-dp-viewmins":
                    incVal = progress ? -1 : 1;
                    this._datetimeValue.setHours(this._datetimeValue.getHours() + incVal);
                    this._generateMins($.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)));

                    var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
                    var val = $.trim(ej.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
                    var val2 = $.trim(ej.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));

                    var index = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
                    index = Math.ceil(index);

                    this._disableRange("mins");

                    this._hoverMins = this._setFocusByIndex("mins", index, this._sfTimeMins);

                    $(".e-hours-headertext", this._sfTimeHour).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
                    $(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
                    break;
            }
        },
        _forwardNavHandler: function (event, table) {
            if (this.model.readOnly || !this.model.enabled) return false;
            var hclassName, proxy = this;
            if (event) event.preventDefault();
            if (event)
                hclassName = $(event.currentTarget).get(0).className;
            else
                hclassName = table.find(".e-text>span").get(0).className;

            switch (hclassName) {
                case "e-hours-headertext":
                    this._sfTimeHour.css("display", "none");
                    this._dateContainer.css("display", "block");
                    this._addFocus(this._dateContainer.find('.e-datepicker'));
                    break;
                case "e-minitues-headertext":
                    this._sfTimeMins.css("display", "none");
                    this._disableRange("hour");

                    var start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
                    var val = $.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale));
                    var indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
                    indx = Math.floor(indx);

                    this._hoverHour = this._setFocusByIndex("hour", indx, this._sfTimeHour);

                    $(".e-hours-headertext", this._sfTimeHour).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
                    $(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
                    this._sfTimeHour.css("display", "block");
                    this._addFocus(this._sfTimeHour);
                    break;
            }
        },
        _renderDateControl: function () {
            var dateInput = ej.buildTag("input#" + this.element[0].id + "_date", "", {}, { "type": "text" });
            this.popup.append(dateInput);
            dateInput.ejDatePicker({

                height: "0px", width: "0px",
                displayInline: true,
                showDateIcon: false,
                showFooter: this.model.timeDrillDown.enabled ? this.model.timeDrillDown.showFooter : false,
                enableStrictMode: true,
                buttonText: this._localizedLabels.buttonText.today,

                minDate: this._stringToObject(this.model.minDateTime),
                maxDate: this._stringToObject(this.model.maxDateTime),

                dayHeaderFormat: this.model.dayHeaderFormat,
                startLevel: this.model.startLevel,
                depthLevel: this.model.depthLevel,
                startDay: this.model.startDay,
                stepMonths: this.model.stepMonths,
                showOtherMonths: this.model.showOtherMonths,
                specialDates: this.model.specialDates,
                highlightWeekend: this.model.highlightWeekend,
                headerFormat: this.model.headerFormat,

                enabled: this.model.enabled,
                enableRTL: this.model.enableRTL,
                showRoundedCorner: this.model.showRoundedCorner,
                readOnly: this.model.readOnly,
                cssClass: this.model.cssClass,
                locale: this.model.locale,
                
            });
            if (!ej.isNullOrUndefined(this.model.value))
                this._datetimeValue = new Date(this.model.value.toString());
            this.datePicker = dateInput.data("ejDatePicker");
            this._datetimeValue = new Date(this.datePicker._dateValue.toString());
            this.model.startDay = this.datePicker.model.startDay;
            this.datePicker._getInternalEvents = true;
            this.datePicker._dt_drilldown = true;
            this.datePicker.popup.css({ "position": "static", "display": "block" });
        },
        _renderTimeControl: function () {
            var timeInput = ej.buildTag("input#" + this.element[0].id + "_time", "", {}, { "type": "text" });
            this.popup.append(timeInput);
            var popupWidth = this.model.timePopupWidth,width;
            if ((typeof (popupWidth) == "string" && popupWidth.indexOf("%") != -1) || typeof (popupWidth) == "string") width = parseInt(popupWidth) > 0 ? popupWidth : 105 && (this.model.timePopupWidth = 105);
            else {
                width = popupWidth > 0 ? popupWidth : 105 && (this.model.timePopupWidth = 105);
            }
            timeInput.ejTimePicker({
                height: "0px", width: "0px",
                interval: this.model.interval,
                timeFormat: this.model.timeDisplayFormat,
                popupWidth: width,
                enabled: this.model.enabled,
                enableRTL: this.model.enableRTL,
                showRoundedCorner: this.model.showRoundedCorner,
                readOnly: this.model.readOnly,
                cssClass: this.model.cssClass,
                locale: this.model.locale,
				disableTimeRanges: this.model.disableTimeRanges,
            });
            this.timePicker = timeInput.data("ejTimePicker");
            this.timePicker._renderDropdown();
            this.timePicker.popup.css({ "position": "static", "display": "block" });
            this.timePicker._getInternalEvents = true;
            this.timePicker.showDropdown = true;
            this.timePicker._dateTimeInternal = true;
            var min = (this.model.minDateTime) ? this._stringToObject(this.model.minDateTime) : this.defaults.minDateTime;
            var max = (this.model.maxDateTime) ? this._stringToObject(this.model.maxDateTime) : this.defaults.maxDateTime;

        },
        _updateTimeHeight: function () {
            var height = this.popup.find(".e-timecontainer .e-header").is(":visible") ? this.datePicker.popup.height() - this.popup.find(".e-header").height() : this.datePicker.popup.height();
            height = this.popup.hasClass("e-dt-responsive") ? "98px" : height;
            this.timePicker.option("popupHeight", height);
        },

        _bindOperations: function () {
            var proxy = this;
            this.datePicker.option("layoutChange", function () { proxy._updateTimeHeight(); });
            this.datePicker.option("outOfRange", function () { proxy.isValidState = false; });
            this.timePicker.option("outOfRange", function () { proxy.isValidState = false; });
            this.datePicker.option("change", function (a) {
                proxy._refreshTimes(a);
            });
            this.datePicker.option("select", function (e) {
                proxy._updateInput(e);
            });
            this.datePicker.option("dt_drilldown", function (e) {
                if (proxy.model.timeDrillDown.enabled) {
                    proxy._updateInput(e);
                    proxy._switchToDrilDown(e);
                }
            });
            this.timePicker.option("select", function () { proxy._updateInput(); });
        },
        _switchToDrilDown: function (e) {
            this._dateContainer.hide();
            this._sfTimeHour.show();
            this._addFocus(this._sfTimeHour);
            var selected = new Date(this.model.value.toString());
            this._datetimeValue = new Date(selected.setHours(this._datetimeValue.getHours(), this._datetimeValue.getMinutes(), this._datetimeValue.getSeconds(), this._datetimeValue.getMilliseconds()));

            // To hide the hours that exceeds the min and max.
            this._disableRange("hour");

            var start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
            var val = $.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale));
            var indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
            indx = Math.floor(indx);

            this._hoverHour = this._setFocusByIndex("hour", indx, this._sfTimeHour);

            $(".e-hours-headertext", this._sfTimeHour).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
            $(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
        },
        _disableRange: function (view) {
            var interval = view == "hour" ? this._interval : this.model.timeDrillDown.interval, table = view == "hour" ? this._sfTimeHour : this._sfTimeMins
            var addClassName = view == "hour" ? "e-hide-hour e-disable" : "e-hide-mins e-disable";
            table.find('tbody tr td.e-' + view).removeClass(addClassName);
            table.find('.e-arrow-sans-left').removeClass("e-disable");
            table.find('.e-arrow-sans-right').removeClass("e-disable");
            var start = view == "hour" ? this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00") :
                this._localizeTime($.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)), "HH:00");

            if (this._compareDate(this.model.minDateTime, this._datetimeValue)) {
                if (view == "mins")
                    if (!(this.model.minDateTime.getHours() === this._datetimeValue.getHours())) return false;
                var val = $.trim(ej.format(this.timePicker._createObject(this.model.minDateTime), "HH:mm", this.model.locale));
                var indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (interval * 60000);
                indx = view == "hour" ? Math.floor(indx) : Math.ceil(indx);
                for (var i = 0; i < indx; i++) {
                    var allValues = table.find('tbody tr td.e-' + view), cell;
                    cell = allValues[i];
                    $(cell).addClass(addClassName);
                }
                table.find('.e-arrow-sans-left').addClass("e-disable");
            }
            if (this._compareDate(this.model.maxDateTime, this._datetimeValue)) {
                if (view == "mins")
                    if (!(this.model.maxDateTime.getHours() === this._datetimeValue.getHours())) return false;
                var val = $.trim(ej.format(this.timePicker._createObject(this.model.maxDateTime), "HH:mm", this.model.locale));
                var indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (interval * 60000);
                indx = Math.floor(indx) + 1;
                var length = table.find('tbody tr td.e-' + view).length
                for (var i = indx; i < length; i++) {
                    var allValues = table.find('tbody tr td.e-' + view), cell;
                    cell = allValues[i];
                    $(cell).addClass(addClassName);
                }
                table.find('.e-arrow-sans-right').addClass("e-disable");
            }
        },
        _setFocusByName: function (name, value, table) {
            var allValues = table.find('tbody tr td.e-' + name), index, cell;
            $(allValues).each(function (i, ele) {
                if (ele.innerHTML == value) {
                    index = i;
                    return;
                }
            });
            cell = allValues[index];
            if (!cell) cell = allValues.last();
            table.find('table td').removeClass("e-state-hover").removeClass('e-active');
            if (!$(cell).hasClass("e-hide-" + name))
                $(cell).addClass("e-state-hover");
            this._setActiveState(name, table);
            return index;
        },

        _setFocusByIndex: function (name, index, table) {
            var allValues = table.find('tbody tr td.e-' + name), cell;
            cell = allValues[index];
            if (!cell) cell = allValues.last();
            table.find('table td').removeClass("e-state-hover").removeClass('e-active');
            if (!$(cell).hasClass("e-hide-" + name))
                $(cell).addClass("e-state-hover");
            this._setActiveState(name, table);
            return index;
        },

        _setActiveState: function (selection, table) {
            var items = table.find('tbody tr td.e-' + selection), cell, proxy = this;
            var indx = -1;
            switch (selection) {
                case "hour":
                    if (this._compareDate(this.model.value, this._datetimeValue)) {

                        var start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
                        var val = $.trim(ej.format(this.timePicker._createObject(this.model.value), "HH:00", this.model.locale));
                        indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
                        indx = Math.floor(indx);

                    }
                    break;
                case "mins":
                    if (this._compareDate(this.model.value, this._datetimeValue) && (this.model.value.getHours() === this._datetimeValue.getHours())) {

                        var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
                        var val = $.trim(ej.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
                        var val2 = $.trim(ej.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));

                        indx = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
                        indx = Math.ceil(indx);
                    }
                    break;
            }
            cell = items[indx];
            if (cell) {
                table.find('table td').removeClass("e-active");
                $(cell).removeClass("e-state-hover").addClass("e-active");
            }
        },

        _compareDate: function (first, second) {
            var val1 = new Date(first.toString()).setHours(0, 0, 0, 0);
            var val2 = new Date(second.toString()).setHours(0, 0, 0, 0);
            var result = (+val1 === +val2) ? true : false;
            return result;
        },

        _updateInput: function (e) {
            var minVal =  ((+new Date() < +this.model.minDateTime) || (+new Date() > +this.model.maxDateTime)) ? this.model.minDateTime : new Date().setHours(0, 0, 0, 0);
            var date = this._getDate() || new Date(minVal), time = this._getTime() || this.timePicker._createObject(minVal);
            this.model.value = new Date(date.getFullYear(), date.getMonth(), date.getDate(),
                time.getHours(), time.getMinutes(), time.getSeconds());
            this._updateDateTime();
            this._raiseChangeEvent();
            this._updateModel(e, true);
            if (e)
                e.cancel = true;
        },
        _updateDateTime: function () {
            this.isValidState = true;
            var datetime = this._objectToString(this.model.value);
            this.element.val(datetime);
            this._removeWatermark();
        },
        _refreshTimes: function (args) {
            var value = this._getDateObj(args.value, this.datePicker.model.dateFormat);
            if (!value) return false;
            this.isValidState = true;

            if (this._compare(value, this._setEmptyTime(this.model.minDateTime))) {
                var mintime = this._getFormat(this.model.minDateTime, this.timePicker.model.timeFormat);
                var preTime = this._getTime();
                this.timePicker.option("minTime", mintime);
                if (!this.model.enableStrictMode) {
                    this._updateInput();
                }
            }
            else
                this.timePicker.option("minTime", this._defaultMinVal());

            if (this._compare(value, this._setEmptyTime(this.model.maxDateTime))) {
                var maxtime = this._getFormat(this.model.maxDateTime, this.timePicker.model.timeFormat);
                var preTime = this._getTime();
                this.timePicker.option("maxTime", maxtime);
                if (!this.model.enableStrictMode) {
                    this._updateInput();
                }
            }
            else
                this.timePicker.option("maxTime", this._defaultMaxVal());

            this.timePicker._changeActiveEle();
            if (!ej.isNullOrUndefined(this.model.disableDateTimeRanges)) {
                this._setDisabledTimeRanges(args);				
            }

        },
		_setDisabledTimeRanges: function(args){
				var currvalue = args? args.value : this._setEmptyTime(this.model.value);
				this._between=[];
                this._initDisableTimeRanges(currvalue);
				if(!this._datesDisabled){
					this._disableBetweenDates();
					this.datePicker.option("blackoutDates", this._between);
				}
		},

        _defaultMinVal: function () {
            var minVal = new Date().setHours(0, 0, 0, 0);
            var minTimeVal = ej.format(this.timePicker._createObject(minVal), this.timePicker.model.timeFormat, this.timePicker.model.locale);
            return minTimeVal;
        },
        _defaultMaxVal: function () {
            var maxval = new Date().setHours(23, 59, 59, 59);
            var maxTimeVal = ej.format(this.timePicker._createObject(maxval), this.timePicker.model.timeFormat, this.timePicker.model.locale);
            return maxTimeVal;
        },
        _updateValues: function () {
            var dateValue = this.model.enableStrictMode && this.model.value == null ? this.element.val() : this.model.value;
            if (this.model.value != null) {
                this.datePicker.option("value", this.model.value);
                this.timePicker.option("value", this.model.value);
            }
            this._setValue(dateValue);
            this._validateMinMax();
            this._preVal = this.element.val();
            this._checkErrorClass();
        },
        _specificFormat: function () {
            var parseInfo = ej.globalize._getDateParseRegExp(ej.globalize.findCulture(this.model.locale).calendar, this.model.dateTimeFormat);
            return ($.inArray("dddd", parseInfo.groups) > -1 || $.inArray("ddd", parseInfo.groups) > -1)
        },
        _changeEditable: function (bool) {
            var action = bool ? "_on" : "_off";
            if (this.element.is(":input")) {
                if (bool) {
                    if (!this.model.readOnly) this.element.attr("readonly", false);
                    this.element.off("mousedown", $.proxy(this._showhidePopup, this));
                }
                else {
                    if (!this.model.readOnly) this.element.attr("readonly", "readonly");
                    this.element.on("mousedown", $.proxy(this._showhidePopup, this));
                }
                this[action](this.element, "blur", this._targetBlur);
                this[action](this.element, "focus", this._targetFocus);
                this[action](this.element, "keydown", this._keyDownOnInput);
            }
            this._change("allowEdit", bool);
        },
        _setValue: function (value) {
            if (!value || (typeof JSON === "object" && JSON.stringify(value) === "{}")) {
                this.element.val("");
                this.model.value = null;
                this.isValidState = true;
                this.wrapper.removeClass('e-valid');
            }
            else if (typeof value === "string") {
                if (this._extISORegex.exec(value) || this._basicISORegex.exec(value)) this._checkObject(this._dateFromISO(value));
                else {
                    this.element.val(value);
                    this._updateModel();
                    this._validateMinMax();
                    this._checkStrictMode();
                    this.wrapper.addClass('e-valid');
                }
            }
            else if (value instanceof Date && this._isValidDate(value)) {
                this._checkObject(value);
            }
			if(!ej.isNullOrUndefined(this.model.disableDateTimeRanges))this._validateDisableRanges();
            this._checkErrorClass();
            return this.model.value;
        },
        _checkObject: function (value) {
            if (value instanceof Date && this._isValidDate(value)) {
                this.model.value = value;
                this._updateDateTime();
                this._validateMinMax();
                this._checkStrictMode();
            }
        },
        _dateFromISO: function (date) {
            var result = this._extISORegex.exec(date) || this._basicISORegex.exec(date), dateFormat = '', timeFormat = '', zeroFormat = '', format;
            if (result) {
                for (var i = 0; i < this._dates.length; i++) {
                    if (this._dates[i][1].exec(result[1])) {
                        dateFormat = this._dates[i][0];
                        break;
                    }
                }
                if (result[3]) {
                    for (var k = 0; k < this._times.length; k++) {
                        if (this._times[k][1].exec(result[3])) {
                            // result[2] should be 'T' (time) or space
                            timeFormat = (result[2] || ' ') + this._times[k][0];
                            break;
                        }
                    }
                }
                if (result[4]) if (this._zeroRegex.exec(result[4])) zeroFormat = 'Z';
                format = dateFormat + timeFormat + zeroFormat;
                var token = format.match(this._tokens), input, val = [], literal, char;
                for (var j = 0; j < token.length; j++) {
                    var str = token[j];
                    literal = this._checkLiteral(token[j]);
                    var rg = this._numberRegex[literal ? token[j].toLowerCase() : str.length] || new RegExp('^\\d{1,' + str.length + '}');
                    input = date.match(rg);
                    if (input) {
                        if (date.substr(0, date.indexOf(input)) >= 0 && !literal) token[j].indexOf('M') >= 0 ? val.push(parseInt(input[0]) - 1) : val.push(parseInt(input[0]));
                        date = date.slice(date.indexOf(input[0]) + input[0].length);
                    }
                }
                //if you want to get the value in UTC format use the "new Date(Date.UTC.apply(null, val)"
                //return the date object value as exact as given input value
                //new Date(year, month, day, hour, minute, seconds);
                return result[4] == "Z" ? new Date(Date.UTC.apply(null, val)) : new Date(val[0], val[1], val[2], val[3], val[4], val[5]);
            }
            else {
                return new Date(date + "");
            }
        },
        _checkLiteral: function (str) {
            var char = str.toLowerCase();
            return (char == 't' || char == 'z' || char == ':' || char == '-') ? true : false;
        },
        _validateValue: function (value) {
            var dateObj = ej.parseDate(value, this.model.dateTimeFormat,this.model.locale);
			var timeVal = null;
			if (this.timePicker != undefined) {
			    timeVal = this._getFormat(dateObj, this.timePicker.model.timeFormat);
			}
            if (!dateObj || dateObj < this.model.minDateTime || dateObj > this.model.maxDateTime || !ej.isNullOrUndefined(this.timePicker) && this.timePicker._ensureTimeRange(timeVal)) {
                this.model.value = null;
                this._change("value", this.model.value);
                this.isValidState = false;
            }
            else {
                this._change("value", this.model.value);
                this.isValidState = true;
            }
        },
        _validateMinMax: function () {
            var value, min, max;
            value = (this.model.value) ? this._stringToObject(this.model.value) : null;
            min = (this.model.minDateTime) ? this._stringToObject(this.model.minDateTime) : this.defaults.minDateTime;
            max = (this.model.maxDateTime) ? this._stringToObject(this.model.maxDateTime) : this.defaults.maxDateTime;
            if (!value || !min || !max) return false;
            if (min > max) this.model.minDateTime = this.model.maxDateTime;
            if (value < min) {
                if (!this.model.enableStrictMode) {
                    this._setValue(min);
                    this.isValidState = true;
                }
                else if (this.model.enableStrictMode) {
					if (this.popup){
                    this.datePicker.option('minDate', this._getFormat(min, this.datePicker.model.dateFormat));
                    this.timePicker.option('minTime', this._getFormat(min, this.timePicker.model.timeFormat));
					}
                    this.isValidState = false;
                }
            }
            if (value > max) {
                if (!this.model.enableStrictMode) {
                    this._setValue(max);
                    this.isValidState = true;
                }
                else if (this.model.enableStrictMode) {
					if (this.popup){
                    this.datePicker.option('maxDate', this._getFormat(max, this.datePicker.model.dateFormat));
                    this.timePicker.option('maxTime', this._getFormat(max, this.timePicker.model.timeFormat));
					}
                    this.isValidState = false;

                }
            }

            if (!(value < min) && !(value > max)) this.isValidState = true;
        },

        _checkProperties: function () {
            this.model.readOnly && this._readOnly(true);
            this.model.showRoundedCorner && this._setRoundedCorner(true);
            this.model.enableRTL && this._setRtl(true);
            this.model.enabled && this._enabled(true);
            if (!this.model.enabled) this._enabled(false);
            else if (this.model.enabled && this.element.hasClass("e-disable")) this._enabled(true);
            this.model.name = !this._options.name ? !this.element.attr("name") ? this.element[0].id : this.element.attr("name") : this.model.name;
            this.element.attr("name", this.model.name);
            this._checkStrictMode();
            this._checkErrorClass();
            this._setWaterMark();
        },

        _checkStrictMode: function () {
            if (!this.model.enableStrictMode) {
                if (!this.isValidState) {
                    if (this.model.value < this.model.minDateTime) {
                        this.element.val(this._objectToString(this.model.minDateTime));
                        this.model.value = this.model.minDateTime;
                        this.isValidState = true;
                    }
                    else if (this.model.value > this.model.maxDateTime) {
                        this.element.val(this._objectToString(this.model.maxDateTime));
                        this.model.value = this.model.maxDateTime;
                        this.isValidState = true;
                    }
                    else {
                        this.model.value = "";
                        this.element.val("");
                        this.isValidState = true;
                    }
                }
            }
            else if (this.model.enableStrictMode) {
                if (!this.isValidState) {

                    this.model.value = null;
                    this.isValidState = false;
                }
            }
        },

        _targetFocus: function (e) {
            e.preventDefault();
            this.isFocused = true;
            this.wrapper.addClass("e-focus");
            this.wrapper.removeClass("e-error");
            if (!this._isSupport) this._hiddenInput.css("display", "none");
            this._prevDateTimeVal = this.element.val();
            if (!this.model.showPopupButton && !this.model.readOnly) this._showResult();
            if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
            if (!this.model.showPopupButton && this.model.readOnly) this._off(this.element, "click", this._elementClick);
            this._trigger("focusIn", { value: this.model.value });
            this.wrapper.addClass('e-valid');
        },
        _targetBlur: function () {
            this.isFocused = false;
            this.wrapper.removeClass("e-focus");
            if (!this.model.showPopupButton) this._hideResult();
            var dateObj = ej.parseDate(this.element.val(), this.model.dateTimeFormat, this.model.locale);
            if (dateObj && !this.model.enableStrictMode) {
                if (dateObj < this.model.minDateTime || dateObj > this.model.maxDateTime) {
                    dateObj = dateObj < this.model.minDateTime ? this.model.minDateTime : this.model.maxDateTime;
                    this.element.val(this._objectToString(dateObj));
                }
            }
            var val = ej.parseDate(this.element.val(), this.model.dateTimeFormat, this.model.locale);
            if (val == null && !this.model.enableStrictMode) {
                if (this._prevDateTimeVal == null || this.element.val() == "") {
                    this.element.val("");
                } else
                    this.element.val(this._preVal);
            }
            this._valueChange();
            if (!this.model.enableStrictMode) {
                if (!this.isValidState) {
                    this.element.val(this._prevDateTimeVal);
                    this._preVal = this._prevDateTimeVal;
                    this.model.value = this._stringToObject(this._prevDateTimeVal);
                    this.isValidState = true;
                }
                else
                    this._prevDateTimeVal = this.element.val();
            } else if (this.element.val() != "")
                this._validateValue(this.element.val());
            if (!this._isSupport && this.element.val() == "")
                this._hiddenInput.css("display", "block");
            this._checkErrorClass();
            if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
            this._trigger("focusOut", { value: this.model.value });
            (ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
            this._previousDateUpdate();
        },
        _previousDateUpdate: function () {
            var previous = ej.parseDate(this._prevDateTime, this.model.dateTimeFormat);
            var current = ej.parseDate(this.element.val(), this.model.dateTimeFormat);
            if (!(+previous === +current)) {
                this._preValString = this._prevDateTime;
                this._prevDateTime = this.element.val();
            }
            return this._preValString;
        },
        _elementClick: function () {
            if (!this.isPopupOpen) this._showResult();
        },
        _keyDownOnInput: function (e) {
            switch (e.keyCode) {
                case 40:
                    if (e.altKey) this._showhidePopup();
                    break;
                case 37:
                case 39:
                    if (!this.model.timeDrillDown.enabled)
                        if (e.altKey && this.isPopupOpen) {
                            e.preventDefault();
                            this._addPrevNextFocus(e.keyCode == 37);
                        }
                    break;
                case 27:
                    e.preventDefault();
                case 9:
                    this._hideResult();
                    break;
                case 13:    // Enter Key
                    var val = ej.parseDate(this.element.val(), this.model.dateTimeFormat);
                    if (val == null && !this.model.enableStrictMode) {
                        if (this._prevDateTimeVal == null || this.element.val() == "") {
                            this.element.val("");
                        } else
                            this.element.val(this._preVal);
                    }
                    this._valueChange();
                    if (!this.model.timeDrillDown.enabled) {
                        this._valueChange();
                        if (this.model.enableStrictMode)
                            this._checkErrorClass();
                        break;
                    }
            }
        },
        _addFocus: function (target) {
            if (!target.hasClass("e-focus")) {
                this._removeFocus();
                target.addClass("e-focus");
                if (target.hasClass("e-datepicker e-popup"))
                    $(document).on("keydown", $.proxy(this.datePicker._keyboardNavigation, this.datePicker));
                else if (target.hasClass("e-timecontainer"))
                    $(document).on("keydown", $.proxy(this.timePicker._keyDownOnInput, this.timePicker));
                else if (target.hasClass("e-time-hours"))
                    $(document).on("keydown", $.proxy(this._keyDownOnHours, this));
                else if (target.hasClass("e-time-minitues"))
                    $(document).on("keydown", $.proxy(this._keyDownOnMinutes, this));
                else if (target.hasClass("e-dt-button"))
                    $(document).on("keydown", $.proxy(this._buttonClick, this));
            }
        },
        _removeFocus: function () {
            var target = this._getFocusedElement();
            if (target.length > 0) {
                target.removeClass("e-focus");
                if (target.hasClass("e-datepicker e-popup"))
                    $(document).off("keydown", $.proxy(this.datePicker._keyboardNavigation, this.datePicker));
                else if (target.hasClass("e-timecontainer"))
                    $(document).off("keydown", $.proxy(this.timePicker._keyDownOnInput, this.timePicker));
                else if (target.hasClass("e-time-hours"))
                    $(document).off("keydown", $.proxy(this._keyDownOnHours, this));
                else if (target.hasClass("e-time-minitues"))
                    $(document).off("keydown", $.proxy(this._keyDownOnMinutes, this));
                else if (target.hasClass("e-dt-button"))
                    $(document).off("keydown", $.proxy(this._buttonClick, this));
            }
        },
        _addPrevNextFocus: function (flag) {
            // flag true means previous focus, false means next focus
            var target = this._getFocusedElement(), next;
            if (target.length > 0) {
                if (target.hasClass("e-datepicker e-popup"))
                    next = flag ? this.popup.find(".e-dt-done") : this.popup.find(".e-timecontainer");
                else if (target.hasClass("e-timecontainer"))
                    next = flag ? this.popup.find(".e-datecontainer >.e-datepicker.e-popup") : this.popup.find(".e-dt-today");
                else if (target.hasClass("e-dt-today"))
                    next = flag ? this.popup.find(".e-timecontainer") : this.popup.find(".e-dt-now");
                else if (target.hasClass("e-dt-now"))
                    next = flag ? this.popup.find(".e-dt-today") : this.popup.find(".e-dt-done");
                else if (target.hasClass("e-dt-done"))
                    next = flag ? this.popup.find(".e-dt-now") : this.popup.find(".e-datecontainer >.e-datepicker.e-popup");
            }
            else next = flag ? this.popup.find(".e-dt-done") : this.popup.find(".e-datecontainer >.e-datepicker.e-popup");
            this._addFocus(next);
        },
        _getFocusedElement: function () {
            return this.popup.children("div").find("div.e-focus")
        },
        _keyDownOnHours: function (e) {
            if ((e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
                e.preventDefault && e.preventDefault();
                var t = { row: null, col: null };

                t.col = this._sfTimeHour.find('tbody tr td.e-state-hover').index();
                t.row = this._sfTimeHour.find('tbody tr td.e-state-hover').parent().index();

                if (t.col != -1)
                    t.col = t.col + 1;
                else
                    t.col = this._sfTimeHour.find('tbody tr td.e-active').index() + 1;


                if (t.row != -1) {
                    t.row = t.row + 1;
                    if (this.model.timeDrillDown.showMeridian && this._sfTimeHour.find('tbody tr td.e-state-hover').hasClass('e-hour-pm'))
                        t.row = t.row + 2;
                }
                else {
                    t.row = this._sfTimeHour.find('tbody tr td.e-active').parent().index() + 1;
                    if (this.model.timeDrillDown.showMeridian && this._sfTimeHour.find('tbody tr td.e-active').hasClass('e-hour-pm'))
                        t.row = t.row + 2;
                }

                var tableClass = this._sfTimeHour.find('table')[0].className, next;
                var rowLength = this._sfTimeHour.find('tbody.e-timepicker-hours tr').length, colLength = this.model.timeDrillDown.showMeridian ? 6 : 4;
                next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "hours", e.ctrlKey);
                if (!e.ctrlKey) this._hoverHour = this._sfTimeHour.find('tbody.e-timepicker-hours tr td').index(next);

                if (!e.ctrlKey) {
                    this._sfTimeHour.find('table td').removeClass("e-state-hover");
                    next.addClass("e-state-hover");
                }
            }
        },

        _changeRowCol: function (t, key, rows, cols, target, ctrlKey) {
            var eleClass, table, hiddenClass, cls = { parent: null, child: null };
            switch (target) {
                case "hours": eleClass = "tbody.e-timepicker-hours tr td.e-hour";
                    cls.parent = ".e-timepicker-hours", cls.child = ".e-hour";
                    hiddenClass = ".e-hide-hour";
                    table = this._sfTimeHour;
                    break;
                case "mins": eleClass = "tbody.e-timepicker-mins tr td.e-mins";
                    cls.parent = ".e-timepicker-mins", cls.child = ".e-mins";
                    hiddenClass = ".e-hide-mins";
                    table = this._sfTimeMins;
                    cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child).length;
                    break;

            }
            if (t.row <= 0 && t.col <= 0)
                return table.find(eleClass + ':not(.e-disable):first');
            var cell, proxy = this;
            switch (key) {
                case 36:
                    return table.find(eleClass + ':not(.e-disable):first');
                case 35:
                    return table.find(eleClass + ':not(.e-disable):last');
                case 38:
                    if (ctrlKey) {
                        this._forwardNavHandler(null, table);
                    }
                    else if (t.row > 1) {
                        t.row -= 1;
                    }
                    else {
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':nth-child(' + t.col + '):last');
                        return cell;
                    }
                    cell = this._getCell(t, cls, table).not(hiddenClass);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "up", table);
                        if (cell !== null) return cell;
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':nth-child(' + t.col + '):last');
                    }
                    return cell;
                case 37:
                    if (ctrlKey) {
                        this._processNextPrev(true, table);
                        return table.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col > 1)
                        t.col -= 1;
                    else if (t.row > 1) {
                        t = { row: t.row - 1, col: cols }
                        // different columns for the mins popup.
                        if (target == "mins") t.col = cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child).length;
                    }
                    else {
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':not(.e-disable):last');
                        return cell;
                    }
                    cell = this._getCell(t, cls, table).not(hiddenClass);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "left", table);
                        if (cell !== null) return cell;
                        this._processNextPrev(true, table);
                        cell = table.find(eleClass + ':not(.e-disable):last');
                    }
                    return cell;
                case 39:
                    if (ctrlKey) {
                        this._processNextPrev(false, table);
                        return table.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col < cols)
                        t.col += 1;
                    else if (t.row < rows) {
                        t = { row: t.row + 1, col: 1 }
                    }
                    else {
                        this._processNextPrev(false, table);
                        cell = table.find(eleClass + ':not(.e-disable):first');
                        return cell;
                    }
                    cell = this._getCell(t, cls, table).not(hiddenClass);
                    if (cell.length <= 0) {
                        cell = this._findVisible(t, cls, "right", table);
                        if (cell !== null) return cell;
                        this._processNextPrev(false, table);
                        cell = table.find(eleClass + ':not(.e-disable):first');
                    }
                    return cell;
                case 40:
                    if (!ctrlKey) {
                        if (t.row < rows) {
                            t.row += 1;
                        }
                        else {
                            this._processNextPrev(false, table);
                            cell = table.find(eleClass + ':nth-child(' + t.col + '):first');
                            return cell;
                        }
                        cell = this._getCell(t, cls, table).not(hiddenClass);
                        if (cell.length <= 0) {
                            cell = this._findVisible(t, cls, "down", table);
                            if (cell !== null) return cell;
                            this._processNextPrev(false, table);
                            cell = table.find(eleClass + ':nth-child(' + t.col + '):first');
                        }
                        return cell;
                    }
                case 13:
                    var ele, args, element;
                    ele = this._getCell(t, cls, table); element = $(ele)[0];
                    args = { type: null, target: ele };
                    if (target == "hours") this._hourNavHandler(args);
                    if (target == "mins") this._minsNavHandler(args);
                    break;
            }
            return this._getCell(t, cls, table).not(hiddenClass);
        },
        _getCell: function (t, cls, table) {
            var row = t.row;
            if (this.model.timeDrillDown.showMeridian && t.row > 2 && table.hasClass('e-time-hours'))
                row = row - 2;
            var cell = table.find('tbody' + cls.parent + ' tr:nth-child(' + row + ') td' + cls.child + ':nth-child(' + t.col + ')');
            if (this.model.timeDrillDown.showMeridian && cell.length > 0 && table.hasClass('e-time-hours'))
                cell = t.row <= 2 ? $(cell[0]) : $(cell[1]);
            return cell;
        },
        _findVisible: function (t, cls, key, table) {
            var cols = t.col, rows = t.row, requiredClass = cls.child.slice(1, cls.child.length);
            for (var i = 0; i >= 0; i++) {
                //nextElement = table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td:nth-child(' + cols + ')');
                var nextElement = this._getCell({ row: rows, col: cols }, cls, table)
                if (nextElement.length <= 0) {
                    return null;
                }
                if (nextElement.hasClass('e-disable') || !nextElement.is(":visible")) {
                    key == "right" || key == "left" ? (key == "right" ? cols++ : cols--) : (key == "down" ? rows++ : rows--);
                    if ((rows <= 0) || (rows > table.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                    // Column exceeds the range. 
                    if (cols > table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length) {
                        //move to next row and select first column
                        rows++;
                        cols = 1;
                    }
                    if (cols <= 0) {
                        //move to previous row and select last column
                        rows--;
                        cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length;
                    }
                    // Row exceeds the range.
                    if ((rows <= 0) || (rows > table.find('tbody' + cls.parent + ' tr').length)) {
                        // No more rows there in popup.
                        return null;
                    }
                } else if (nextElement.hasClass(requiredClass)) {
                    t.col = cols; t.row = rows;
                    nextElement = this._getCell(t, cls, table)
                    return nextElement;
                }
            }
        },
        _keyDownOnMinutes: function (e) {
            if ((e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
                e.preventDefault && e.preventDefault();
                var t = { row: null, col: null };

                t.col = this._sfTimeMins.find('tbody tr td.e-state-hover').index();
                t.row = this._sfTimeMins.find('tbody tr td.e-state-hover').parent().index();

                t.col = (t.col != -1) ? t.col + 1 : this._sfTimeMins.find('tbody tr td.e-active').index() + 1;
                t.row = (t.row != -1) ? t.row + 1 : this._sfTimeMins.find('tbody tr td.e-active').parent().index() + 1;

                var tableClass = this._sfTimeMins.find('table')[0].className, next;
                var rowLength = this._sfTimeMins.find('tbody.e-timepicker-mins tr').length, colLength = 4;
                next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "mins", e.ctrlKey);
                if (!e.ctrlKey) this._hoverHour = this._sfTimeMins.find('tbody.e-timepicker-mins tr td').index(next);

                if (!e.ctrlKey) {
                    this._sfTimeMins.find('table td').removeClass("e-state-hover");
                    next.addClass("e-state-hover");
                }
            }
        },
        _valueChange: function (isCode) {
            if (!this.model.enableStrictMode) {
                if (this._preVal != this.element.val()) {
                    this._preVal = this.element.val();
                    this._updateModel();
                    this._validateMinMax();
                    this._raiseChangeEvent(isCode);
                }
                this._setWaterMark();
            }
            else if (this.model.enableStrictMode) {
                if (this._preVal != this.element.val() || this.model.value < this.model.minDateTime || this.model.value > this.model.maxDateTime) {
                    this._updateModel();
                    this._raiseChangeEvent(isCode);
                }
            }
        },
        _updateModel: function (e, stopUpdateModel) {
            if (this._stopRefresh) {
                this._stopRefresh = false
                return;
            }
            var value = this.element.val();
            if (value == "") {
                this.model.value = null;
                this._change("value", this.model.value);
                this.isValidState = true;
            }
            else {
                var dateObj;
                if (e != undefined && e.type == "select" || this._prevDateTimeVal == this.element.val()) dateObj = this.model.value;
                else dateObj = ej.parseDate(value, this.model.dateTimeFormat, this.model.locale);
                if (dateObj) {
                    this.model.value = dateObj;
                    this.isValidState = true;
                    this._refreshPopup(stopUpdateModel);
                    if (this._specificFormat() && this._prevDateTimeVal != this.element.val())
                        this.element.val(this._objectToString(this.model.value));
                }
                else {
                    this.model.value = null;
                    this._change("value", this.model.value);
                    this.isValidState = false;
                    if (!this.model.enableStrictMode)
                        this.element.val(this._objectToString(this.model.value));
                }
            }
        },
        _refreshPopup: function (stopUpdateModel) {
            if (this.isValidState && this.isPopupOpen) {
                var date = this._setEmptyTime(this.model.value), time = this._setEmptyDate(this.model.value);
                var getDate = this._getDate(), getTime = this._getTime();
                if (!getDate || !this._compare(getDate, date)) this.datePicker.option("value", date);
				if ((!getTime || !this._compare(getTime, time)) && !stopUpdateModel) this.timePicker.option("value", time);
            }
        },

        _buttonClick: function (e) {
            if (e.keyCode == 13) {
                e.preventDefault();
                var target = this._getFocusedElement();
                if (target.hasClass("e-dt-today"))
                    this._todayClick();
                else if (target.hasClass("e-dt-now"))
                    this._nowClick();
                else if (target.hasClass("e-dt-done"))
                    this._doneClick();
            }
        },
        _todayClick: function () {
            if (!this.model.enabled || this.model.readOnly) return false;
            if (!this.datePicker.popup.find(".today").hasClass("e-active") ||
                !this.datePicker.popup.children("table").hasClass("e-dp-viewdays") ||
                this.element.val() == "" || !this.isValidState) {
                this.datePicker._setCurrDate();
                this._updateInput();
            }
        },
        _nowClick: function () {
            if (!this.model.enabled || this.model.readOnly) return false;
            this.timePicker.setCurrentTime();
            var mintime = this.model.minDateTime, maxtime = this.model.maxDateTime, date = this.datePicker.model.value, time = new Date();
            date = ej.isNullOrUndefined(date) ? new Date() : date;
            var currTime = new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds());
            if (currTime < mintime)
                this.timePicker.option("value", this.timePicker._localizeTime(mintime));
            else if (currTime > maxtime)
                this.timePicker.option("value", this.timePicker._localizeTime(maxtime));
            this._updateInput();
        },
        _doneClick: function () {
            this._hideResult();
        },

        _iconClick: function (e) {
            e.preventDefault();
            if (!this.isFocused && (!ej.isTouchDevice())) this.element.focus();
            this._showhidePopup();
			if(this.model.disableDateTimeRanges && ej.isNullOrUndefined(this.model.value)) this._setDisabledTimeRanges(this.datePicker.model.value);
            if (this._isIE9)
                this.popup.find(".e-popup-container").css("display", "inline-block");
        },
        _setInitialSelection: function () {
            var elements = this.timePicker.ul.find("li");
            if (elements.hasClass('e-hover')) { this._calcScrollTop(); return; }
            var currentTime = this.timePicker._setEmptyDate(new Date()), selected;
            selected = currentTime;
            if (this.timePicker.minTime && !this._compareTime(this._createObject(currentTime), this.timePicker.minTime, true))
                selected = this.timePicker.minTime;
            if (this.timePicker.maxTime && !this._compareTime(this.timePicker.maxTime, this._createObject(currentTime), true))
                selected = this.timePicker.maxTime;
            var firstTime = elements.first().html(), index;
            index = (this.timePicker._parse(selected) - this.timePicker._parse(firstTime)) / (this.timePicker.model.interval * 60000);
            index = Math.round(index);
            var activeItem = (index == elements.length) ? index : index + 1;
            if (activeItem < 0 || activeItem > elements.length || isNaN(activeItem)) activeItem = 1;
            var activeEle = $(this.timePicker.ul.find("li")[activeItem - 1]);
            activeEle.addClass('e-hover');
            this._calcScrollTop();
        },
        _calcScrollTop: function () {
            var ulH = this.timePicker.ul.outerHeight(), liH = this.timePicker.ul.find("li").outerHeight(), index, top;
            index = this.timePicker.ul.find("li.e-hover").index();
            top = (liH * index) - ((this.timePicker.popupList.outerHeight() - liH) / 2);
            this.timePicker.scrollerObj.setModel({ "scrollTop": top });
        },
        _showhidePopup: function () {
            if (this.model.readOnly) return false;
            if (!this.isPopupOpen)
                this._showResult();
            else
                this._hideResult();
        },
        _showResult: function () {
            if (!this.popup) this._renderDropdown();
            if (this.isPopupOpen || !this.model.enabled) return false;
			this._setRtl(this.model.enableRTL);
			this._setRoundedCorner(this.model.showRoundedCorner);
            if (this._trigger("beforeOpen", { element: this.popup })) return false;
            this.isPopupOpen = true;
			this.element.attr({'aria-expanded':'true'})
            this._setListPosition();
            this._checkForResponsive();
            var proxy = this;
            this.popup.slideDown(this.model.enableAnimation ? 200 : 0, function () {
                proxy._on($(document), "mousedown", proxy._OnDocumentClick);
                proxy.model.timeDrillDown.enabled && proxy._addFocus(proxy._dateContainer.find('.e-datepicker'));
                if (!proxy.timePicker.model.value) proxy._setInitialSelection();
            });
            this._updateModel();
            this._updateTimeHeight();
            this._validateMinMax();
            this._on($(window), "resize", this._OnWindowResize);
            this._on(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
            this._on(ej.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
            this._raiseEvent("open");
            if (this._initial) {
                this.timePicker._refreshScroller();
                this.timePicker._changeActiveEle();
                this._initial = false;
            }
            this.wrapper.addClass("e-active");
        },
        _hideResult: function (e) {
			if ( e && (e.type == "touchmove" || e.type== "scroll")) {
				if ($(e.target).parents("#"+this.popup[0].id).length > 0)
				return;
	        }
            var proxy = this;
            if (!this.isPopupOpen) return false;
            if (this._trigger("beforeClose", { element: this.popup })) return false;
            this.isPopupOpen = false;
			this.element.attr({'aria-expanded':'false'})
            this._removeFocus();
            if (this._popClose && e && e.type != "click") {
                this.isPopupOpen = true;
                return;
            }
            this.popup.slideUp(this.model.enableAnimation ? 100 : 0, function () {
                if (proxy.model) {
                    if (proxy.model.timeDrillDown.enabled) {
                        proxy._sfTimeHour.hide();
                        proxy._sfTimeMins.hide();
                        proxy._dateContainer.show();
                    }
                    if (!ej.isNullOrUndefined(proxy.model.value))
                        proxy._datetimeValue = new Date(proxy.model.value.toString());
                }
            });
            this._raiseEvent("close");
            this._off($(document), "mousedown", this._OnDocumentClick);
            this._off($(window), "resize", this._OnWindowResize);
            this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
            this._off(ej.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
            this.wrapper.removeClass("e-active");
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.popup.outerHeight(),
            popupWidth = this.popup.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
			popupPosition = this.model.popupPosition;
            if (this.model.popupPosition == ej.PopupPosition.Bottom)
                var topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            else
                var topPos = ((popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popup.outerWidth() - elementObj.outerWidth();
            this.popup.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });
        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _OnDocumentClick: function (e) {
            if (this.model) {
                if (!$(e.target).is(this.popup) && !$(e.target).parents(".e-datetime-popup").is(this.popup) &&
                    !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-datetime-wrap").is(this.wrapper)) {
                    this._hideResult();
                }
                else if ($(e.target).is(this.popup) || $(e.target).parents(".e-datetime-popup").is(this.popup)) {
                    e.preventDefault();
                    if ($(e.target).parents(".e-datepicker").length > 0) this._addFocus($(e.target).parents(".e-datepicker"));
                    else if ($(e.target).parents(".e-timecontainer").length > 0) this._addFocus($(e.target).parents(".e-timecontainer"));
                    else if ($(e.target).hasClass("e-dt-button")) this._addFocus($(e.target));
                    else if ($(e.target).parents(".e-time-hours").length > 0) this._addFocus($(e.target).parents(".e-time-hours"));
                    else if ($(e.target).parents(".e-time-minitues").length > 0) this._addFocus($(e.target).parents(".e-time-minitues"));
                    else this._removeFocus();
                }
            }
        },
        _OnWindowResize: function (e) {
            this._setListPosition();
            this._checkForResponsive();
            this._updateTimeHeight();
        },

        _raiseChangeEvent: function (isCode) {
            var previous = ej.parseDate(this._prevDateTimeVal, this.model.dateTimeFormat);
            var current = ej.parseDate(this.element.val(), this.model.dateTimeFormat);
            if (!(+previous === +current)) {
                this._preVal = this.element.val();
                var data = { prevDateTime: this._prevDateTimeVal, value: this.element.val(), isInteraction: !isCode, isValidState: this.isValidState };
				if (this.timePicker && this.timePicker.model) {
					var timeVal = this._getFormat(current, this.timePicker.model.timeFormat);
					if (!this.timePicker._ensureTimeRange(timeVal)) {
						this._prevDateTimeVal = this.element.val();
					}
					else {
						this._prevDateTimeVal = "";
						this.model.value = null;
						this.isValidState = false;
					}
				} else { 
					this._prevDateTimeVal = this.element.val();
				}
				this._trigger("_change", data);
				data.value = $.trim(this.element.val()) == "" ? null : this.element.val();
                data.value = this._formatter(this.model.value, this.model.dateTimeFormat);
                this._trigger("change", data);
			}
			
            else if ((this._prevDateTimeVal != this.element.val())) {
                var data = { prevDateTime: this._prevDateTimeVal, value: this.element.val(), isValidState: this.isValidState };
                this._prevDateTimeVal = this.element.val()
                this._trigger("_change", data);
            }
        },
		_formatter: function (date, format) {
            var newFormat = this._checkFormat(format);
            return ej.format(date, newFormat, this.model.locale);
        },
        _raiseEvent: function (name) {
            var dateStringVal = this._previousDateUpdate();
            if (this.element != null && this.model[name])
                return this._trigger(name, { prevDateTime: ej.isNullOrUndefined(dateStringVal || this._preValString) ? '' : dateStringVal || this._preValString, value: this.element.val() });
            return false;
        },
        _getDateTimeFormat: function () {
            var pattern = ej.preferredCulture(this.model.locale).calendar.patterns;

            if (!this.model.dateTimeFormat) this.model.dateTimeFormat = pattern.d + " " + pattern.t;
            if (!this.model.timeDisplayFormat) this.model.timeDisplayFormat = pattern.t;
        },
        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popup);
        },
        _checkErrorClass: function () {
            if (this.isValidState) this.wrapper.removeClass("e-error");
            else this.wrapper.addClass("e-error");
        },
        _getDate: function () {
            return this.datePicker.model.value;
        },
        _getTime: function () {
            return this._getDateObj(this.timePicker.model.value, this.timePicker.model.timeFormat);
        },
        _setEmptyTime: function (date) {
            var newDate = new Date(date);
            newDate.setMilliseconds(0);
            newDate.setSeconds(0);
            newDate.setMinutes(0);
            newDate.setHours(0);
            return newDate;
        },
        _setEmptyDate: function (date) {
            var newDate = new Date(date);
            newDate.setDate(1);
            newDate.setMonth(0);
            newDate.setFullYear(2000);
            return newDate;
        },
        _objectToString: function (obj) {
            return this._getFormat(obj, this.model.dateTimeFormat);
        },
        _stringToObject: function (value) {
            return this._getDateObj(value, this.model.dateTimeFormat);
        },
        _getFormat: function (value, format) {
            if (value instanceof Date) {
                var newFormat = this._checkFormat(format);
                return ej.format(value, newFormat, this.model.locale);
            }
            else return value;
        },
        _checkFormat: function (format) {
            var proxy = this;
            var dateFormatRegExp = this._regExp();
            return format.replace(dateFormatRegExp, function (match) {
                match = match === "/" ? ej.preferredCulture(proxy.model.locale).calendars.standard['/'] !== "/" ? "'/'" : match : match;
                return match;
            });
        },
        _regExp: function () {
            return /\/dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|gg|g|"[^"]*"|'[^']*'|[/]/g;
        },
        _getDateObj: function (value, format) {
            if (typeof value === "string") {
                var newFormat = this._checkFormat(format);
                var temp = ej.parseDate(value, newFormat, this.model.locale);
                if (temp != null)
                    return temp;
                else {
                    if (value != "" && value != null) {
                        var dateregexp = /^\s*(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d):(\d\d).*Z\s*$/, month, datetimesplit = dateregexp.exec(value);
                        var datevariable = new Date();
                        if (datetimesplit) {
                            datevariable = new Date();
                            month = +datetimesplit[2];
                            datevariable.setUTCFullYear(datetimesplit[1], month - 1, datetimesplit[3]);
                            datevariable.setUTCHours(datetimesplit[4], datetimesplit[5], datetimesplit[6]);
                            if (month != datevariable.getUTCMonth() + 1)
                                datevariable.setTime();
                        }
                        if (this._isValidDate(datevariable))
                            return datevariable;
                    }
                    else return null;
                }
            }
            else return value;
        },
        _compare: function (obj1, obj2) {
            return obj1 && obj2 && obj1.getTime() == obj2.getTime();
        },
        _isValidDate: function (dateObj) {
            return dateObj && typeof dateObj.getTime === "function" && isFinite(dateObj.getTime());
        },


        _change: function (property, value) {
            if (this.popup) {
                this.datePicker.option(property, value);
                this.timePicker.option(property, value);
            }
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            this.popup.removeClass(this.model.cssClass).addClass(skin);

            this._change("cssClass", skin);
        },
        _localize: function (culture) {
            this.model.locale = culture;
            if (ej.isNullOrUndefined(this._options.timeDisplayFormat))
                this.model.timeDisplayFormat = "";
            if (ej.isNullOrUndefined(this._options.dateTimeFormat))
                this.model.dateTimeFormat = "";
            var meridianText = ["AM", "PM"];
            this._getDateTimeFormat();
            this.timePicker.option("timeFormat", this.model.timeDisplayFormat);
            this._localizedLabels = this._getLocalizedLabels();
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.buttonText))
                    $.extend(this._localizedLabels.buttonText, this._options.buttonText);
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            this._localizedLabelToModel();
            this._buttonText(this._localizedLabels.buttonText);
            if (this.isValidState || (this.model.value instanceof Date && this._isValidDate(this.model.value)))
                this.element.val(this._objectToString(this.model.value));
            this._preVal = this.element.val();
            this._change("locale", culture);
            this.model.startDay = this.datePicker.model.startDay;
            this._validateMeridian();
            this._sfTimeHour.empty();
            this._renderHourTable();

            // Update the meridian support
            if (this.model.timeDrillDown.showMeridian)
                for (var i = 0; i < 2; i++) {
                    var txt = !ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard[meridianText[i]]) ? ej.preferredCulture(this.model.locale).calendars.standard[meridianText[i]][0] : "";
                    $("span.e-hours-meridiantxt-" + meridianText[i].toLowerCase(), this._sfTimeHour).text(txt);

                }
        },
        _setWaterMark: function () {
            if (this.element != null && this.element.hasClass("e-input")) {
                if (this._localizedLabels.watermarkText && this.element.val() == "") {
                    this.isValidState = true;
                    this._checkErrorClass();
                }
                if ((!this._isSupport) && this.element.val() == "") {
                    this._hiddenInput.css("display", "block").val(this._localizedLabels.watermarkText);
                }
                else {
                    $(this.element).attr("placeholder", this._localizedLabels.watermarkText);
                }
                return true;
            }
        },
        _localizedLabelToModel: function () {
            this.model.watermarkText = this._localizedLabels.watermarkText;
            this.model.buttonText = this._localizedLabels.buttonText;
        },
        _readOnly: function (boolean) {
            this.model.readOnly = boolean;
            if (boolean) this.element.attr("readonly", "readonly");
            else this.element.prop("readonly", false);

            this._change("readOnly", boolean);
        },
        _setRoundedCorner: function (boolean) {
            if (boolean) {
                this.container.addClass("e-corner");
                if(this.popup)this.popup.addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                if(this.popup) this.popup.removeClass("e-corner");
            }
            !ej.isNullOrUndefined(this.datePicker) && this.datePicker.option("showRoundedCorner", boolean);
			!ej.isNullOrUndefined(this.timePicker) && this.timePicker.option("showRoundedCorner", boolean);
        },
        _setRtl: function (boolean) {
            if (boolean) {
                this.wrapper.addClass("e-rtl");
                if(this.popup) this.popup.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                if(this.popup) this.popup.removeClass("e-rtl");
            }

            this._change("enableRTL", boolean);
        },
        _enabled: function (boolean) {
            if (boolean) {
                this.model.enabled = false;
                this.enable();
            }
            else {
                this.model.enabled = true;
                this.disable();
            }
        },
        _showButton: function (show) {
            this.model.showPopupButton = show;
            if (show) {
                this.container.addClass("e-padding");
                this._renderIcon();
            }
            else {
                this.container.removeClass("e-padding");
                this.datetimeIcon.remove();
                this.datetimeIcon = null;
            }
        },
        _buttonText: function (data) {
            $.extend(this.model.buttonText, data);
            this.popup.find(".e-dt-today").html(this.model.buttonText.today);
            this.popup.find(".e-dt-now").html(this.model.buttonText.timeNow);
            this.popup.find(".e-dt-done").html(this.model.buttonText.done);
            this.popup.find(".e-timecontainer").find(".e-header").html(this.model.buttonText.timeTitle);
        },
        _checkForResponsive: function () {
            if (($(window).outerWidth() > 200) && ($(window).outerWidth() <= 500)) {
                if (!this.popup.hasClass("e-dt-responsive")) {
                    this.popup.addClass("e-dt-responsive");
                    this.timePicker.option("popupWidth", this.datePicker.popup.outerWidth());
                    this.timePicker.option("popupHeight", 98);
                    this.timePicker._refreshScroller();
                    this.timePicker._changeActiveEle();
                }
            }
            else if (this.popup.hasClass("e-dt-responsive")) {
                this.popup.removeClass("e-dt-responsive");
                this.timePicker.option("popupWidth", this.model.timePopupWidth);
                var height = this.datePicker.popup.height() - this.popup.find(".e-header").height();
                this.timePicker.option("popupHeight", height);
                this.timePicker._refreshScroller();
                this.timePicker._changeActiveEle();
            }
        },

        enable: function () {
            if (!this.model.enabled) {
                this.element[0].disabled = false;
                this.model.enabled = true;
                this.element.prop("disabled", false);
                this.wrapper.removeClass("e-disable");
                this.element.removeClass("e-disable").attr("aria-disabled", false);
                if (!this._isSupport)
                    this._hiddenInput.prop("disabled", false);
                if (this.datetimeIcon) this.datetimeIcon.removeClass("e-disable").attr("aria-disabled", false);
                if (this._isIE8 && this.datetimeIcon) this.datetimeIcon.children().removeClass("e-disable");
                if (this.popup) {
                    this.popup.children("div").removeClass("e-disable").attr("aria-disabled", false);
                    this._change("enabled", true);
                }
            }
        },


        disable: function () {
            if (this.model.enabled) {
                this.element[0].disabled = true;
                this.model.enabled = false;
                this.wrapper.addClass("e-disable");
                this.element.addClass("e-disable").attr("aria-disabled", true);
                this.element.attr("disabled", "disabled");
                if (!this._isSupport)
                    this._hiddenInput.attr("disabled", "disabled");
                if (this.datetimeIcon) this.datetimeIcon.addClass("e-disable").attr("aria-disabled", true);
                if (this._isIE8 && this.datetimeIcon) this.datetimeIcon.children().addClass("e-disable");
                this._hideResult();
                this._change("enabled", false);
                if (this.popup) {
                    this.popup.children("div").addClass("e-disable").attr("aria-disabled", true);
                    this.datePicker.popup.removeClass("e-disable").attr("aria-disabled", false);
                    this.timePicker.popup.removeClass("e-disable").attr("aria-disabled", false);
                }
            }
        },


        getValue: function () {
            return this._objectToString(this.model.value);
        },


        setCurrentDateTime: function () {
            if (!this.model.readOnly)
                this._setValue(new Date());
        },


        show: function () {
            this._showResult();
        },


        hide: function () {
            this._hideResult();
        },


        _wireEvents: function () {
            if (this.model.allowEdit) {
                this._on(this.element, "focus", this._targetFocus);
                this._on(this.element, "blur", this._targetBlur);
                this._on(this.element, "keydown", this._keyDownOnInput);
            }
            if (!this.model.allowEdit) {
                this.element.attr("readonly", "readonly");
                this.element.on("mousedown", $.proxy(this._showhidePopup, this));
            }
        },

        _getLocalizedLabels: function () {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        }
    });

    ej.DateTimePicker.Locale = ej.DateTimePicker.Locale || {};

    ej.DateTimePicker.Locale['default'] = ej.DateTimePicker.Locale['en-US'] = {
        watermarkText: "Select datetime",
        buttonText: {
            today: "Today",
            timeNow: "Time Now",
            done: "Done",
            timeTitle: "Time"
        }
    };

    ej.PopupPosition = {
        Bottom: "bottom",
        Top: "top"
    };
})(jQuery, Syncfusion);;

/**
* @fileOverview Plugin to style the Dialog control
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejDialog", "ej.Dialog", {
        _rootCSS: "e-dialog",

        element: null,
        _ignoreOnPersist: ["drag", "dragStart", "dragStop", "resizeStop", "resizeStart", "resize", "beforeClose", "beforeOpen", "collapse", "expand", "close", "open", "destroy", "create", "ajaxSuccess", "ajaxError", "contentLoad", "actionButtonClick", "enableResize"],

        model: null,
        validTags: ["div", "span"],
        _setFirst: false,
        angular: {
            terminal: false
        },

        defaults: {

            showOnInit: true,

            closeOnEscape: true,

            //currently we have deprecated this API
            closeIconTooltip: "close",

            enableAnimation: true,

            allowDraggable: true,

            backgroundScroll: true,

            height: "auto",

            minHeight: 120,

            minWidth: 200,

            maxHeight: null,

            maxWidth: null,

            enableModal: false,

            position: { X: "", Y: "" },

            containment: null,

            enableResize: true,

            htmlAttributes: {},

            showHeader: true,

            showFooter: false,

            contentType: null,

            contentUrl: null,

            ajaxSettings: {

                type: 'GET',

                cache: false,

                data: {},

                dataType: "html",

                contentType: "html",

                async: true
            },

            title: "",

            width: 400,

            zIndex: 1000,

            cssClass: "",

            enableRTL: false,

            allowKeyboardNavigation: true,

            showRoundedCorner: false,

            actionButtons: ["close"],

            animation:{
                show:{
                    effect:"fade",
                    duration:400
                },
                hide:{
                    effect:"fade",
                    duration:400
                }
            },            

            tooltip:{
                close: "Close",
                collapse: "Collapse",
                restore: "Restore",
                maximize: "Maximize",
                minimize: "Minimize",
                expand: "Expand",
                unPin: "UnPin",
                pin: "Pin"
            },

            footerTemplateId: null,
            
            locale:"en-US",
            
            faviconCSS: null,

            content: null,

            target: null,

            enablePersistence: false,

            enabled: true,

            isResponsive: false,

            actionButtonClick: null,

            beforeClose: null,

            close: null,            

            expand: null,

            collapse: null,

            beforeOpen: null,

            open: null,

            drag: null,

            dragStart: null,

            dragStop: null,

            resize: null,

            resizeStart: null,

            resizeStop: null,

            contentLoad: null,

            ajaxSuccess: null,

            ajaxError: null,

            create: null,

            destroy: null,

            /*Deprecated*/            
            Close:null
        },

        dataTypes: {
            showOnInit: "boolean",
            closeOnEscape: "boolean",
            enableAnimation: "boolean",
            backgroundScroll: "boolean",
            position: "data",
            animation:"data",
            closeIconTooltip: "string",
            tooltip: "data",
            allowDraggable: "boolean",
            enableModal: "boolean",
            enableResize: "boolean",
            isResponsive: "boolean",
            showHeader: "boolean",
            showFooter: "boolean",
            title: "string",
            faviconCSS:"string",
            zIndex: "number",
            cssClass: "string",
            enablePersistence: "boolean",
            contentUrl: "string",
            contentType: "string",
            enableRTL: "boolean",
            enabled: "boolean",
            allowKeyboardNavigation: "boolean",
            showRoundedCorner: "boolean",
            locale: "string",
            htmlAttributes: "data",
            ajaxSettings: "data",
            actionButtons: "array",
			footerTemplateId: "string"
        },

        _setModel: function (options) {
            for (var key in options) {
                switch (key) {
                    case "closeIconTooltip": this._dialogClose.attr("title", options[key]); break;
                    case "tooltip": this._tooltipText(options[key]); break;
                    case "title":
                        this.model.title = options[key];
                        if (this._ejDialog.find("span.e-title").length <= 0) 
                            this._addTitleText();
                        else
                            this._ejDialog.find("span.e-title").html(options[key]);
                        this._updateCaptionWidth();
                        break;
                    case "width": this.model.width = options[key]; this._changeSize(); this._updateCaptionWidth(); options[key] = this.model.width; break;
                    case "height": this.model.height = options[key]; this._changeSize(); options[key] = this.model.height; break;
                    case "position": this.model.position = options[key]; this._dialogPosition(); break;
                    case "cssClass": this._changeSkin(options[key]); break;
                    case "showRoundedCorner": this.model.showRoundedCorner=options[key]; this._roundedCorner(options[key]); break;
                    case "contentType": { this.model.contentType = options[key]; this._appendContent(options[key]); break; }
                    case "enabled": { this.model.enabled = options[key]; this._enabledAction(options[key]); break; }
                    case "contentUrl": { this.model.contentUrl = options[key]; this._appendContent(this.model.contentType); break; }
					case "backgroundScroll":
						this.model.backgroundScroll = options[key]; 
						if (!this.model.backgroundScroll && this.model.enableModal) $("body").addClass("e-dialog-modal");
						else $("body").removeClass("e-dialog-modal");
						break;
                    case "content":
                    case "target": 
                        this._ejDialog.appendTo($(options[key]));
                        this.model.target = this.model.content = options[key];
                        this._dialogPosition();
                        break;
                    case "containment":
                        this._setDragArea(options[key]);
                        !ej.isNullOrUndefined(this._target) ? this._ejDialog.appendTo(this._target) : this._ejDialog.appendTo(document.body);
                        this.model.position.X = this.model.position.Y = "";
                        this._dialogPosition();
                        this.model.containment = options[key] = this._target;
                        this.model.enableModal && this._createOverlay();
                        this._dialogTitlebar.ejDraggable({ dragArea: this._target });
                        break;
                    case "locale":
					    this.model.locale = options[key];
                        this.localizedLabels = this._getLocalizedLabels(); 
                        this._setLocaleCulture(this.localizedLabels, true);
                        this._tooltipText(this.model.tooltip);
						if (this._ejDialog.find("span.e-title").length <= 0) 
                            this._addTitleText();
                        else
                            this._ejDialog.find("span.e-title").html(this.model.title);
                        this._updateCaptionWidth();                       				
                        break;
                    case "minHeight": { this.model.minHeight = options[key]; this._ejDialog.css("minHeight", options[key]); this._minMaxValidation(); this._resetScroller(); this._resizeDialog(); break; }
                    case "minWidth": { this.model.minWidth = options[key]; this._ejDialog.css("minWidth", options[key]); this._minMaxValidation(); this._resetScroller(); this._resizeDialog(); break; }
                    case "maxHeight": { this.model.maxHeight = options[key]; this._ejDialog.css("maxHeight", options[key]); this._minMaxValidation(); this._resetScroller(); this._resizeDialog(); break; }
                    case "maxWidth": { this.model.maxWidth = options[key]; this._ejDialog.css("maxWidth", options[key]); this._minMaxValidation(); this._resetScroller(); this._resizeDialog(); break; }
                    case "zIndex": { this._ejDialog.css('z-index', options[key]); break; }
                    case "faviconCSS":
                        this.model.faviconCSS = options[key]; this._favIcon();this._updateCaptionWidth(); break;
                    case "isResponsive": {
                        this.model.isResponsive = options[key];
                        this.model.isResponsive ? this._ejDialog.addClass("e-dialog-resize") : this._ejDialog.removeClass("e-dialog-resize");
                        this._wireResizing();
                        break;
                    }
                    case "allowDraggable": {
                        this.model.allowDraggable = options[key];
                        if (options[key])
                            this._enableDrag();
                        else {
                            this._dialogTitlebar.removeClass("e-draggable");
                        }
                        break;
                    }
                    case "enableResize": {
                        this.model.enableResize = options[key];
                        if (options[key])
                            this._enableResize();
                        else {
                            this._ejDialog.removeClass("e-resizable");
                            this._ejDialog.find(".e-resize-handle").remove();
                        }
                        this._reRenderScroller();
                        break;
                    }
                    case "showHeader": {
                        this.model.showHeader = options[key];
                        if (options[key]) {
                            this._renderTitleBar();
                            this._iconsRender(this.model.actionButtons);
                            if (this.model.faviconCSS) { this._dialogFavIcon = false; this._favIcon(); }
                            this._enableDrag();
                            if (!this._maximize) this._updateScroller((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? (this._ejDialog.outerHeight(true) - (this._dialogTitlebar.outerHeight(true))) : this._ejDialog.outerHeight(true) - 1 - (this._dialogTitlebar.outerHeight(true)), (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._ejDialog.width() : this._ejDialog.width() - 2);
                        }
                        else {
                            this._ejDialog.find(".e-titlebar").remove();
                            this._maximize ? this.refresh() : this._updateScroller((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._ejDialog.outerHeight(true) : this._ejDialog.outerHeight(true) - 1, (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._ejDialog.width() : this._ejDialog.width() - 2);
                        }
                        this._roundedCorner(this.model.showRoundedCorner);
                        if (this.model.showFooter) this._setContainerSize()._resetScroller();
                        break;
                    }
                    case "showFooter": {
                        this.model.showFooter = options[key];
                        if (options[key]) {
                            this._appendContent();
                            this._ejDialog.find(".e-resizable").remove();
                        }
                        else 
                            this._ejDialog.find(".e-footerbar").remove();
                        this._enableResize()._enableDrag()._sizeInPercent();
                        this._reRenderScroller();
                        this._setContainerSize()._resetScroller();
                        this._roundedCorner(this.model.showRoundedCorner);
                        break;
                    }
                    case "footerTemplateId": {
                        this.model.footerTemplateId = options[key];
                        if (this.model.showFooter) {
                            this._ejDialog.find(".e-footerbar").empty();
                            var templateContent = $('body').find("#" + this.model.footerTemplateId).html();
                            this._dialogFooterbar.append(templateContent);
                            this._enableResize();
                        }
                        break;
                    }
                    case "enableRTL":
                        {
                            this.model.enableRTL = options[key];
                            if (this.model.faviconCSS) this._favIcon();
                            if (options[key]) {
                                this._ejDialog.addClass("e-rtl");
                                this.iframe && this.iframe.contents().find("body").css("direction", "rtl");
                                if (this.scroller) 
                                    this._resetScroller();
                            } else {
                                this._ejDialog.removeClass("e-rtl");
                                this.iframe && this.iframe.contents().find("body").css("direction", "ltr");
                                if (this.scroller) 
                                    this._resetScroller();
                            }
                            break;
                        }
                    case "actionButtons":
                        {
                            if (!ej.isNullOrUndefined(this._dialogTitlebar) ){
                                this._removeAllIcons();
                                this._iconsRender(options[key]);
                            }
                            this.model.actionButtons = options[key];
                            this._updateCaptionWidth();
                            break;
                        }
                    case "enableModal": {
                        this._enableModal(options[key]);
                        break;
                    }
                    case "htmlAttributes": this._addAttr(options[key]); break;
                }
            }
        },


        _destroy: function () {
            if (this._overLay) this._overLay.remove();
            this._cloneElement.appendTo(this._ejDialog.parent());
            this._ejDialog.remove();
            if (this.model.enableAnimation) this._ejDialog.stop();
            this._cloneElement.removeClass("e-dialog");
            this.element = this._cloneElement;
            this._isOpen = false;
            $(window).off("resize", $.proxy(this._reSizeHandler, this));
        },

        keyConfigs: [37, 38, 39, 40],

        _init: function () {
			this._init=true;
            this._widthPercent = null;
            this._heightPercent = null;
            this._windowSize = { outerWidth: $(window).outerWidth(), outerHeight: $(window).outerHeight() };
            this._initSize = { width: this.model.width, height: this.model.height };
            this._sizeType = { width: isNaN(this.model.width) ? this.model.width.match(/px|%|auto/g)[0] : null, height: isNaN(this.model.height) ? this.model.height.match(/px|%|auto/g)[0] : null };
            this._isOpen = this._maximize = this._minimize = false;
            this.localizedLabels = this._getLocalizedLabels(); 
            this._setLocaleCulture(this.localizedLabels);
            this._setDimension();
            if (!this.model.close) this.model.close = this.model.Close;
            if (!this.model.target) this.model.target = this.model.content;
			this._responsive();
            this._renderControl();
            this._wireEvents();    
            this.scrObj= this._ejDialog.closest(".e-dialog.e-js").data("ejDialog")
            if(this.scrObj) this.scrObj._resetScroller(); 
			this.hidden=false;			
            this._init=false;
            this._keyNavigation=false;	
        },
		
		_responsive: function () {
            this.width = this.model.width;
            $(this.element).width(this.width);

            this.height = this.model.height;
            $(this.element).height(this.height);
            $(window).on("resize", $.proxy(this._resizeHandler, this));
        },
        
        _resizeHandler: function () {
            if (this._maximize) {
                this.width = $(this._dialogTitlebar).outerWidth();
                $(this.contentDiv).width(this.width);
                $(this.contentDiv).children().width(this.width);

                this.model.height = this.height = $(window).height();
                this._ejDialog.css({ height: this.height });
                this.contentDiv.height(this._ejDialog.height() - $(this._dialogTitlebar).outerHeight() - $(this._dialogFooterbar).outerHeight());
                this.element.height(this.contentDiv.height());
            }
			if(!ej.isNullOrUndefined(this.element) && !this._collapsible) this._resetScroller();
        },
       
        _setLocaleCulture:function(localizedLabels, isSetModel){
            //Deprecated closeIconTooltip locale
            if(this.defaults.closeIconTooltip===this.model.closeIconTooltip)
                this.model.closeIconTooltip=localizedLabels.closeIconTooltip;
			
                if (isSetModel) {	
                 	 this.model.tooltip= this.localizedLabels.tooltip ;
                     this.model.title= this.localizedLabels.title;			 
				} 
				if(JSON.stringify(this.model.tooltip) === JSON.stringify(this.defaults.tooltip))
                this.model.tooltip=localizedLabels.tooltip;  				
				if(this.model.title === this.defaults.title)
				this.model.title=localizedLabels.title;  
        },

        _setDragArea: function (value) {
            if (!ej.isNullOrUndefined(value))
            {
                if (typeof value == "string") {
                    if (value == "parent") this._target = $(this.element).parent();
                    if (value.toLowerCase() == "document") this._target = $(document);
                    if (value.toLowerCase() == "window") this._target = $(window);
                    else if ($(value).length > 0) this._target = $(value);
                } else if (typeof value == "object") {
                    if (value.length > 0) this._target = value;
                }
                else this._target = null;
            } else this._target = null;
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy._ejDialog.addClass(value);
                else if (key == "disabled" && value == "disabled") { proxy.model.enabled = false; proxy._enabledAction(false); }
                else{
					if(proxy._ejDialog[0].hasAttribute("style")){
					 var newValue = proxy._ejDialog[0].getAttribute("style") + value;
					 proxy._ejDialog.attr(key, newValue);
					}					
				} 
            });
        },
        _tooltipText: function(data){
            $.extend(this.model.tooltip, data);
            if(!ej.isNullOrUndefined(this._dialogClose) && this._dialogClose.hasClass('e-close'))
                this._dialogClose.attr("title", this.model.tooltip.close);
            if (!ej.isNullOrUndefined(this._dialogCollapsible) && (data.collapse || data.expand)) {
                if (this._dialogCollapsible.hasClass('e-arrowhead-up'))
                    this._dialogCollapsible.attr("title", this.model.tooltip.collapse);
                if (this._dialogCollapsible.hasClass('e-arrowhead-down'))
                    this._dialogCollapsible.attr("title", this.model.tooltip.expand);
            }
            if (!ej.isNullOrUndefined(this._dialogMaximize) && (data.maximize || data.restore)) {
                if (this._dialogMaximize.hasClass('e-maximize'))
                    this._dialogMaximize.attr("title", this.model.tooltip.maximize);
                if (this._dialogMaximize.hasClass('e-restore'))
                    this._dialogMaximize.attr("title", this.model.tooltip.restore);
            }
            if (!ej.isNullOrUndefined(this._dialogMinimize) && (data.minimize || data.restore)) {
                if (this._dialogMinimize.hasClass('e-minus'))
                    this._dialogMinimize.attr("title", this.model.tooltip.minimize);
                if (this._dialogMinimize.hasClass('e-restore'))
                    this._dialogMinimize.attr("title", this.model.tooltip.restore);
            }
            if (!ej.isNullOrUndefined(this._dialogPin) && (data.pin || data.unPin)) {
                if (this._dialogPin.hasClass('e-unpin'))
                    this._dialogPin.attr("title", this.model.tooltip.pin);
                if (this._dialogPin.hasClass('e-pin'))
                    this._dialogPin.attr("title", this.model.tooltip.unPin);
            }
        },
        _renderControl: function () {
            this._cloneElement = this.element.clone();
            this.element.attr("tabindex", 0).attr({ "role": "dialog"});
            if(this.model.showHeader) this.element.attr({"aria-labelledby": this.element.prop("id") + "_title"});
            this._ejDialog = ej.buildTag("div.e-dialog e-widget e-box " + this.model.cssClass + " e-dialog-wrap e-shadow#" + (this.element.prop("id") == "" ? "" : this.element.prop("id") + "_wrapper"), "", { display: "none", zIndex: this.model.zIndex }, { tabindex: 0 });
            if(this.model.isResponsive) this._ejDialog.addClass("e-dialog-resize");
            this.wrapper = this._ejDialog;
            this._addAttr(this.model.htmlAttributes);
            this._setDragArea(this.model.containment);
            if(!ej.isNullOrUndefined(this.model.containment) && !ej.isNullOrUndefined(this._target)) var target = this._target;                
            else if(!ej.isNullOrUndefined(this.model.target)) var target = this.model.target;
            var wrapperTarget = !ej.isNullOrUndefined(target) ? target : document.body;
            var oldWrapper = $(wrapperTarget).find("#" + this._id + "_wrapper").get(0);
            if (oldWrapper) $(oldWrapper).remove();
            this._ejDialog.appendTo(wrapperTarget);
            if (this.model.enableRTL) this._ejDialog.addClass("e-rtl");
            if (this.model.showHeader) {
                this._renderTitleBar();
                this._iconsRender(this.model.actionButtons);
                if (this.model.faviconCSS) this._favIcon();
            }
            this._appendContent(this.model.contentType);
            this._enableResize()._enableDrag()._setSize();
			if(this.model.height != "auto") this._sizeInPercent();
            if (this.model.contentType != "ajax"){                                                                  
                if (this.model.showOnInit && this.open()) {
                    this._setContainerSize()._resetScroller();
                }
                else this._setHiddenDialogSize();
            }
            this._roundedCorner(this.model.showRoundedCorner);
            this._enabledAction(this.model.enabled);
            if (this._sizeType.width == "auto") this._maxWidth = this.model.width;
            if (this._sizeType.height == "auto") this._maxHeight = this.model.height;
        },

        _setContainerSize: function () {
            if (this.model.height != "auto") {
                var cntHeight = this._ejDialog.outerHeight() - ((this.model.showHeader)? $(this._ejDialog.find("div.e-titlebar")).outerHeight(true) : 0)  + ((this.model.showFooter)? $(this._ejDialog.find("div.e-footerbar")).outerHeight(true) : 0) - 1;
                this.contentDiv.height(cntHeight);
                this.element.outerHeight(cntHeight);
            }
            return this;
        },

        _changeSize: function () {
            this._initSize = { width: this.model.width, height: this.model.height };
            this._sizeType.width = isNaN(this.model.width) ? this.model.width.match(/px|%|auto/g) : null;
            this._sizeType.height = isNaN(this.model.height) ? this.model.height.match(/px|%|auto/g) : null;
            this._setSize()._sizeInPercent()._setContainerSize()._resetScroller();
        },

        _enableDrag: function () {
            if (this.model.allowDraggable && this.model.showHeader) {
                this._dialogTitlebar.addClass("e-draggable");
                this._dragDialog();
            }
            return this;
        },

        _enableResize: function () {
            if (this.model.enableResize) {
                this._ejDialog.addClass("e-resizable");
                var resizeDiv = ej.buildTag("div.e-icon e-resize-handle");
                if (this.model.showFooter) 
                    resizeDiv.appendTo(this._dialogFooterbar);
                else
                    resizeDiv.appendTo(this._ejDialog);
                this._resizeDialog();
            }
            return this;
        },


        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this._ejDialog.removeClass(this.model.cssClass).addClass(skin);
            }
        },
        _enableModal: function (value) {
            if (value) this._isOpen && this._createOverlay();
            else if (this._overLay) this._overLay.remove();
        },

        _enabledAction: function (flag) {
            if (flag) {
                this._ejDialog.removeClass("e-disable");
                this.wrapper.children(".e-disable-overlay").remove();
                if (!ej.isNullOrUndefined(this.scroller))
                    this.scroller.enable();
            }
            else {
                this._ejDialog.addClass("e-disable");
                ej.buildTag("div.e-disable-overlay").appendTo(this.wrapper);
                if (!ej.isNullOrUndefined(this.scroller))
                    this.scroller.disable();
            }
        },

        _renderTitleBar: function () {
            this._elementTitle = this.element.attr("title");
            if (typeof this._elementTitle !== "string")
                this._elementTitle = "";
            this.model.title = this.model.title || this._elementTitle;
            this._dialogTitlebar = ej.buildTag("div#" + this.element.prop("id") + "_title.e-titlebar e-header e-dialog").prependTo(this._ejDialog);
            this._addTitleText();
        },

        _renderFooterBar: function () {
            this._dialogFooterbar = ej.buildTag("div#" + this.element.prop("id") + "_foot.e-footerbar e-dialog e-js").appendTo(this._ejDialog);
        },

        _addTitleText: function () {
            if (this.model.title) 
                this._titleText = ej.buildTag("span.e-title", this.model.title).prependTo(this._dialogTitlebar);
            return this;
        },
        _updateCaptionWidth: function () {
            var addWidth=this.model.faviconCSS && !ej.isNullOrUndefined(this._dialogFavIcon)?this._dialogFavIcon.outerWidth():0;
			if(this._titleText && !ej.isNullOrUndefined(this._dialogTitlebar))
			    this._titleText.css("max-width", (this._dialogTitlebar.width() - 20 - (this._dialogTitlebar.find(".e-dialog-icon").width() * this._dialogTitlebar.find(".e-dialog-icon").length) - addWidth));
			return this;
        },
        _iconsRender: function (iconArray) {
            for (var icon = 0; icon < iconArray.length; icon++) {
                switch ((ej.browserInfo().name == "msie" && ej.browserInfo().version <= 8) ? $.trim(iconArray[icon]) : iconArray[icon].trim()) {
                    case "close": {
                        this._closeIcon();
                        break;
                    }
                    case "collapse":
                    case "collapsible": {
                        this._collapsibleIcon();
                        break;
                    }
                    case "maximize": {
                        this._maximizeIcon();
                        break;
                    }
                    case "minimize": {
                        this._minimizeIcon();
                        break;
                    }
                    case "pin": {
                        this._pinIcon();
                        break;
                    }
                    default: {
                        this._customIconsRender(iconArray[icon]);
                        break;
                    }
                }
            }
        },

        _customIconsRender: function (icon) {
            this._customIcon = ej.util.buildTag("div#" + this.element[0].id + "_" + icon + "button.e-dialog-icon e-icon e-" + icon, null, null).attr('tabIndex', '0').attr('title', icon);
            this._customIcon.appendTo(this._dialogTitlebar);
            this._on(this._customIcon, "touchstart click", this._iconClick);
        },

        _iconClick: function (event) {
            
            if (!this.element.hasClass("e-disable")) {
                var args = {
                    cancel: false,
                    buttonID: $(event.target).attr("id"),
                    event: event.type,
                    model: this.model,
                    currentTarget: event.currentTarget.title
                }
                this._trigger("actionButtonClick", args);
            }
        },

        _removeAllIcons: function () {
            this._dialogTitlebar.find("div.e-dialog-icon").remove();
        },

        _appendContent: function (contentType) {
            this.contentDiv = ej.isNullOrUndefined(this.contentDiv) ? ej.buildTag("div.e-dialog-scroller") : this.contentDiv;
            this.element.removeAttr("title").addClass("e-widget-content e-box");
            var proxy = this;
            if (!ej.isNullOrUndefined(this.model.contentUrl) && !ej.isNullOrUndefined(contentType)) {
                if (contentType == "ajax") {
                    this.model.ajaxSettings.url = this.model.contentUrl;
                    this._sendAjaxOptions(this.element, this.model.ajaxSettings.url);
                }
                else if (contentType == "iframe") {
                    if (this.element.children('.e-iframe').length > 0) {
                        this.iframe = this.element.find('iframe.e-iframe');
                        this.iframe.attr('src', this.model.contentUrl);
                    }
                    else {
                        this.iframe = ej.buildTag("iframe.e-iframe", "", { width: "100%", height:"100%" }, { scrolling: "auto", frameborder: 0, src: this.model.contentUrl });
                        this.element.appendTo(this.contentDiv).append(this.iframe).show();
                    }
                    if (this.model.enableRTL) {
                        $(this.iframe).load(function () {
                            proxy.iframe.contents().find("body").css("direction", "rtl");
                        });
                    }
                    this._trigger("contentLoad", { contentType: contentType, url: this.model.contentUrl });
                }
                else if (contentType == "image") {
                    var img = ej.buildTag("img.e-images", "", "", { src: this.model.contentUrl });
                    this.element.append(img).show().appendTo(this.contentDiv);
                    $(img).on("load", function () {
                        proxy._dialogPosition();
                    });
                    this._trigger("contentLoad", { contentType: contentType, url: this.model.contentUrl });
                }
                else
                    this.element.show().appendTo(this.contentDiv);
            }
            else {
				this.dialogIframeContent = this.element.children().find('iframe').contents()[0];
				if (!ej.isNullOrUndefined(this.dialogIframeContent)) {
				   this.element.show().appendTo(this.contentDiv).find('iframe').append(this.dialogIframeContent.lastChild);
				}
				else
					this.element.show().appendTo(this.contentDiv);
			}
            if (this._ejDialog.find("div.e-resize-handle").length > 0) {
                if (this._ejDialog.find(".e-footerbar").length == 0)
				this.contentDiv.insertBefore(this._ejDialog.find("div.e-resize-handle"));
			}
			else {
				var dialogIframeContent = this.element.children().find('iframe').contents()[0];
				if (!ej.isNullOrUndefined(dialogIframeContent)) {
                    this.contentDiv.appendTo(this._ejDialog);
					var getid = $("#"+this.contentDiv.find('iframe').attr('id'));
					$(getid[0].contentDocument.lastChild).remove();
				    getid[0].contentDocument.appendChild(dialogIframeContent);
					if(ej.browserInfo().name == "mozilla")
					setTimeout(function () {
						$(getid[0].contentDocument.lastChild).remove();
				        getid[0].contentDocument.appendChild(dialogIframeContent);
                    },500);
				}
				else {
					if(this._ejDialog.find(".e-footerbar").length == 0)
					this.contentDiv.appendTo(this._ejDialog);
				    else
                    this.contentDiv.insertBefore(this._dialogFooterbar);
				     }
				}
            if (this.model.showFooter && this._ejDialog.find(".e-footerbar").length == 0) {
                this._renderFooterBar();
                if (this.model.footerTemplateId != null) {
                    var templateContent = $('body').find("#" + this.model.footerTemplateId).html();
                    this._dialogFooterbar.append(templateContent);
                }
            }
        },

        _roundedCorner: function (value) {
            this._ejDialog[(value ? "addClass" : "removeClass")]('e-corner');
            this.contentDiv.removeClass('e-dialog-top e-dialog-bottom e-dialog-content');
            if (this.model.showRoundedCorner) {
                this.model.showHeader && !this.model.showFooter ? this.contentDiv.addClass('e-dialog-bottom') : !this.model.showHeader && this.model.showFooter ? this.contentDiv.addClass('e-dialog-top') : !this.model.showHeader && !this.model.showFooter ? this.contentDiv.addClass('e-dialog-content') : true;
            }
        },

        _reRenderScroller: function () {
            if (this.scroller != undefined) {
                    this.scroller.refresh(true);
                if (!this.model.enableRTL) {
                    if ((this.scroller._vScrollbar && this.scroller._vScrollbar._scrollData) && this.model.enableResize) {
                        if (this.model.showFooter) 
                            var height = this.scroller._vScrollbar.element.find('> div.e-vscroll').height(), padngSpace = 0, resizeHandleSize = 0;
                        else
                            var height = this.scroller._vScrollbar.element.find('> div.e-vscroll').height(), padngSpace = 2, resizeHandleSize = this._ejDialog.find('div.e-resize-handle').outerHeight();
	                    if (Math.floor(this.contentDiv.outerHeight()) === Math.floor(this.scroller._vScrollbar.model.height + 1)) {
                            this.scroller._vScrollbar.model.height -= resizeHandleSize + padngSpace;
                            this.scroller._vScrollbar._scrollData.handle -= resizeHandleSize;
                            this.scroller._vScrollbar._scrollData.handleSpace -= resizeHandleSize + padngSpace;
                            this.scroller._vScrollbar._updateLayout(this.scroller._vScrollbar._scrollData);
                            this.scroller._vScrollbar.element.find('> div.e-vscroll').height(height - resizeHandleSize - padngSpace);
                        }
                    }
                    if (!(this.scroller._vScrollbar && this.scroller._vScrollbar._scrollData) && (this.scroller._hScrollbar && this.scroller._hScrollbar._scrollData) && this.model.enableResize) {
                        if (this.model.showFooter) 
                            var width = this.scroller._hScrollbar.element.find('> div.e-hscroll').width(), padngSpace = 0, resizeHandleSize = 0;
                        else
                            var width = this.scroller._hScrollbar.element.find('> div.e-hscroll').width(), padngSpace = 2, resizeHandleSize = this._ejDialog.find('div.e-resize-handle').outerWidth();
                        this.scroller._hScrollbar.model.width -= resizeHandleSize + padngSpace;
                        this.scroller._hScrollbar._scrollData.handle -= resizeHandleSize + padngSpace;
                        this.scroller._hScrollbar._scrollData.handleSpace -= resizeHandleSize + padngSpace;
                        this.scroller._hScrollbar._updateLayout(this.scroller._hScrollbar._scrollData);
                        this.scroller._hScrollbar.element.find('> div.e-hscroll').width(width - resizeHandleSize - padngSpace);
                    }
                }
            }
        },       

        _dialogMaxZindex: function () {
            var parents = this.element.parents(), bodyEle, contEle;
            bodyEle = $('body').children();
            $(bodyEle).each(function (i, ele) { parents.push(ele); });
            contEle = $(this.model.target).children();
            $(contEle).each(function (i, ele) { parents.push(ele); });
            var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;
        },

        _setZindex: function () {
            var zindex = this._dialogMaxZindex();
            if (this.model.zIndex <= zindex)
                this._ejDialog.css({ zIndex: zindex + 1 });
        },

        _createOverlay: function () {
            var zindex = this._ejDialog.css('zIndex'), target, element, position;
            !ej.isNullOrUndefined(this._overLay) && this._overLay.remove();
            if (!this.model.backgroundScroll) $("body").addClass("e-dialog-modal");
            this._overLay = ej.buildTag("div#" + this.element.attr("id") + "_overLay.e-overlay", "", { zIndex: zindex - 1 });
			$(this._overLay).addClass("e-widget");
            if (!ej.isNullOrUndefined(this.model.containment) && !ej.isNullOrUndefined(this._target)) target = this._target;
            else if (!ej.isNullOrUndefined(this.model.target)) target = this.model.target;
            this._overLay.appendTo(!ej.isNullOrUndefined(target) ? target : document.body);
            var position = !ej.isNullOrUndefined(this.model.containment) && !ej.isNullOrUndefined(this._target) ? "absolute" : "fixed";
            var left =(ej.isNullOrUndefined(target) || position=="fixed") ? 0 : $(target).css('position').toLowerCase() != "static" ? 0 : $(target).offset().left;
            var top = (ej.isNullOrUndefined(target) || position=="fixed") ? 0 : $(target).css('position').toLowerCase() != "static" ? 0 : $(target).offset().top;
            this._overLay.css({ top: top, left: left, position: position });
        },

        _sendAjaxOptions: function (content, link) {
            //load waiting popup
            content.addClass("e-load");
            var proxy = this;
            var curTitle = this.model.title;
            var hrefLink = link;
            var ajaxOptions = {
                "success": function (data) {
                    try { proxy._ajaxSuccessHandler(data, content, link, curTitle); }
                    catch (e) { }
                },
                "error": function (e) {
                    try { proxy._ajaxErrorHandler({ "status": e.status, "responseText": e.responseText, "statusText": e.statusText }, content, link, curTitle); }
                    catch (e) { }
                },
                "complete": function () {
                    try {
                        proxy._setContainerSize();
                        proxy._resetScroller();
                        if (!proxy.model.showOnInit) proxy._setHiddenDialogSize();
                    } catch (e) {}
                }
            };
            $.extend(true, ajaxOptions, this.model.ajaxSettings);
            this._sendAjaxRequest(ajaxOptions);
        },

        _setHiddenDialogSize: function () {
            if (!this._isOpen) {
                this._ejDialog.css({ "display": "block", "visibility": "hidden" });
                this._setContainerSize()._resetScroller();
                this._ejDialog.css({ "display": "none", "visibility": "" });
            }
        },

        _sendAjaxRequest: function (ajaxOptions) {
            $.ajax({
                type: ajaxOptions.type,
                cache: ajaxOptions.cache,
                url: ajaxOptions.url,
                dataType: ajaxOptions.dataType,
                data: ajaxOptions.data,
                contentType: ajaxOptions.contentType,
                async: ajaxOptions.async,
                success: ajaxOptions.success,
                error: ajaxOptions.error,
                beforeSend: ajaxOptions.beforeSend,
                complete: ajaxOptions.complete
            });
        },

        _ajaxSuccessHandler: function (data, content, link, curTitle) {
            content.removeClass("e-load");
            content.html(data).addClass("e-dialog-loaded").appendTo(this._ejDialog);
            content.appendTo(this.contentDiv);
            this._dialogPosition();
            if (this.model.showOnInit)
                this.open();
            this._trigger("ajaxSuccess", { data: data, url: link });
        },

        _ajaxErrorHandler: function (data, content, link, curTitle) {
            content.addClass("e-dialog-loaded").appendTo(this.contentDiv);
            this._dialogPosition().open();
            this._trigger("ajaxError", { data: data, url: link });
        },
        _closeIcon: function () {
            this._dialogClose = ej.util.buildTag("div#" + this.element[0].id + "_closebutton.e-dialog-icon e-icon e-close",null,null).attr('tabIndex','0');            
            if(this.model.closeIconTooltip == "close" && this.model.tooltip.close == "Close")
                this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
            else if(this.model.closeIconTooltip != "close" && this.model.tooltip.close == "Close")
                this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.closeIconTooltip);
            else if(this.model.closeIconTooltip == "close" && this.model.tooltip.close != "Close")
                this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
            else   this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
            this._on(this._dialogClose, "touchstart click", this._closeClick);
        },
		
        _collapsibleIcon: function () {            
            this._dialogCollapsible = ej.util.buildTag("div#" + this.element[0].id + "_collapsbutton.e-dialog-icon e-icon",null,null).attr('tabIndex','0');             
            if (this._collapsible) {
                this._dialogCollapsible.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.expand).addClass("e-arrowhead-down").removeClass("e-arrowhead-up");
            }
            else {
                this._dialogCollapsible.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.collapse).addClass("e-arrowhead-up").removeClass("e-arrowhead-down");
            }
            this._on(this._dialogCollapsible, "touchstart click", this._collapsibleClick);
        },

        _maximizeIcon: function () {
            this._dialogMaximize = ej.util.buildTag("div#" + this.element[0].id + "_maximizebutton.e-dialog-icon e-icon",null,null).attr('tabIndex','0'); 
            if (this._maximize) {
                this._dialogMaximize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.restore).addClass("e-restore").removeClass("e-maximize");
            }
            else {
                this._dialogMaximize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.maximize).addClass("e-maximize").removeClass("e-restore");
            }
            this._on(this._dialogMaximize, "touchstart click", this._maximizeClick);
        },

        _minimizeIcon: function () {
            this._dialogMinimize = ej.util.buildTag("div#" + this.element[0].id + "_minimizebutton.e-dialog-icon e-icon",null,null).attr('tabIndex','0');           
            if (this._minimize) {
                this._dialogMinimize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.restore).addClass("e-restore").removeClass("e-minus");
            }
            else {
                this._dialogMinimize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.minimize).addClass("e-minus").removeClass("e-restore");
            }
            this._on(this._dialogMinimize, "touchstart click", this._minimizeClick);
        },

        _pinIcon: function () {
            this._dialogPin = ej.util.buildTag("div#" + this.element[0].id + "_pinbutton.e-dialog-icon e-icon",null,null).attr('tabIndex','0'); 
            this._dialogPin.appendTo(this._dialogTitlebar).attr("title", this.dialogPin ? this.model.tooltip.unPin : this.model.tooltip.pin).addClass(this.dialogPin ? "e-pin" : "e-unpin").removeClass(this.dialogPin ? "e-unpin" : "e-pin");
            this._on(this._dialogPin, "touchstart click", this._pinClick);
        },

        _favIcon: function () {
            if (!this._dialogFavIcon) {
                this._dialogFavIcon = ej.util.buildTag("div.e-dialog-favicon", "", {}, { style: "float:"+ (this.model.enableRTL?"right":"left") });
                var span = ej.util.buildTag("span.e-dialog-custom", "", {}, { role: "presentation" });
                span.appendTo(this._dialogFavIcon);
                this._dialogFavIcon.appendTo(this._dialogTitlebar);
            }
            else 
                span = this._dialogFavIcon.find("span").removeClass().addClass("e-dialog-custom");
            if (!this.model.faviconCSS) this._dialogFavIcon.remove();
            else span.addClass(this.model.faviconCSS); this._dialogFavIcon.css("float", (this.model.enableRTL ? "right" : "left"));
        },

        _minMaxValidation: function () {
            var _minWidth = parseInt(this.model.minWidth), _minHeight = parseInt(this.model.minHeight), _maxWidth = parseInt(this.model.maxWidth), _maxHeight = parseInt(this.model.maxHeight),_width = parseInt(this.model.width), _height = parseInt(this.model.height), parentObj = this._getParentObj();
            if (isNaN(this.model.minWidth) && (this.model.minWidth.indexOf("%") > 0))
                _minWidth = this._convertPercentageToPixel(parentObj.outerWidth(), _minWidth);
            if (isNaN(this.model.minHeight) && (this.model.minHeight.indexOf("%") > 0))
                _minHeight = this._convertPercentageToPixel(parentObj.outerHeight(), _minHeight);
            if (isNaN(this.model.maxWidth) && (this.model.maxWidth.indexOf("%") > 0))
                _maxWidth = this._convertPercentageToPixel(parentObj.innerWidth(), _maxWidth);
            if (isNaN(this.model.maxHeight) && (this.model.maxHeight.indexOf("%") > 0))
                _maxHeight = this._convertPercentageToPixel(parentObj.innerHeight(), _maxHeight);
			if (isNaN(this.model.width) && (this.model.width.indexOf("%") > 0))
                _width = this._convertPercentageToPixel(parentObj.innerWidth(), _width);
            if (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0))
                _height = this._convertPercentageToPixel(parentObj.innerHeight(), _height);
            if (_maxWidth && _width > _maxWidth || _minWidth && _width < _minWidth) {
                if (_width > _maxWidth) this.model.width = _maxWidth;
                else this.model.width = _minWidth;
            }
            if (_maxHeight && _height >_maxHeight || _minHeight && _height< _minHeight) {
                if (_height > _maxHeight) this.model.height = _maxHeight;
                else this.model.height = _minHeight;
            }
			 
        },

        _setSize: function () {
            var mdl = this.model;
            this._minMaxValidation();
            this._ejDialog.css({ width: mdl.width, minWidth: mdl.minWidth, maxWidth: mdl.maxWidth });
            this._ejDialog.css({ height: mdl.height, minHeight: mdl.minHeight, maxHeight: mdl.maxHeight });
            this._dialogPosition();
            return this;
        },

        _resetScroller: function () {		
			this.element.css({ "height": "auto", "max-width": "", "max-height": "", "width": "" });
            var scrHeight = this._ejDialog.outerHeight(true) - ((this.model.showHeader)? $(this._ejDialog.find("div.e-titlebar")).outerHeight(true) : 0)-((this.model.showFooter)? $(this._ejDialog.find("div.e-footerbar")).outerHeight(true) : 0), eleHeight;
            var scrModel = { width: (this.contentDiv.css('border-width') == "0px" || this.contentDiv.css('border-left-width') == "0px") ? Math.round(this._ejDialog.width()) : Math.round(this._ejDialog.width() - 2), enableRTL: this.model.enableRTL, height: (this.contentDiv.css('border-width') == "0px") ? scrHeight : scrHeight - 1, enableTouchScroll: false }; // 2px border width
            if ((this.model.height == "auto") && (this.element.height() < this.model.maxHeight || !this.model.maxHeight) && !this._maximize)
                scrModel.height = "auto";
            if (this.model.width == "auto" && !this._maximize)
                scrModel.width = this.model.width;
            this.contentDiv.ejScroller(scrModel);
            this.scroller = this.contentDiv.data("ejScroller");
            this._reRenderScroller();
            this._padding = parseInt($(this.element).css("padding-top")) + parseInt($(this.element).css("padding-bottom"));
            if(($(this._ejDialog).css("display"))=="none"){
				  this.hidden=true;         
                  this._ejDialog.css({"display":"block"}); 
			}		
			if (!ej.isNullOrUndefined(this.contentDiv.height()) && this.contentDiv.height() > 0) {
                if (!ej.isNullOrUndefined(this.scroller))
                    if (!this.scroller._hScrollbar && this.scroller._vScrollbar)
                        eleHeight = this.contentDiv.outerHeight();
                    else if (this.scroller._hScrollbar)
                         eleHeight = this.contentDiv.outerHeight() - this.scroller.model.buttonSize;
                     else  eleHeight = this.contentDiv.outerHeight();
                 else
                    eleHeight = this.contentDiv.outerHeight() - this._padding;
                if ((this.model.height != "auto" && this.model.height != "100%"))
                    this.element.css({ "height": eleHeight-1 });
                else
                    this.element.css("height", this.model.height);
                if ((this.model.height == "auto" || this.model.height == "100%") && !this.scroller._vScrollbar)
                    this.element.css({ "min-height": this.model.minHeight -((this.model.showHeader)? $(this._ejDialog.find("div.e-titlebar")).outerHeight(true) : 0)});
                if (!this.scroller._vScrollbar && (this.model.width != "auto" && this.model.width != "100%"))
                    this.element.outerWidth((this.contentDiv.css('border-width') == "0px" || this.contentDiv.css('border-left-width') == "0px") ? this._ejDialog.width() : this._ejDialog.width() - 2);
                else if (!this.scroller._vScrollbar)
                    this.element.css("width", this.model.width);
                this.element.css({"max-width": this.model.maxWidth, "max-height": this.model.maxHeight });
            }
			if(this.hidden) this._ejDialog.css({"display":"none"});					
			this.hidden=false;
        },

        _updateScroller: function (height, width) {
            this.contentDiv.ejScroller({ width: width, height: height, enableRTL: this.model.enableRTL, enableTouchScroll: false });
            this.scroller = this.contentDiv.data("ejScroller");
            this._reRenderScroller();
			this._changeSize();
        },

        _dragDialog: function () {
            var proxy = this;
            var pos = this._ejDialog.parents(".e-dialog-scroller");
            this._dialogTitlebar.ejDraggable({
                handle: ".e-titlebar",
                cursorAt: { top: 0, left: 0 },
                dragArea: proxy._target,
                dragStart: function (event) {
					event.element.attr('aria-grabbed', true);
                    proxy._clickHandler();
                    if (proxy.dialogPin || !proxy.model.allowDraggable || !proxy.model.enabled) {
                        event.cancel = true;
                        return false;
                    }
                    if (proxy._trigger("dragStart", { event: event })) {
                        event.cancel = true;
                        return false;
                    }
                },
                drag: function (event) {
                    proxy._trigger("drag", { event: event });
                },
                dragStop: function (event) {
                    proxy._ejDialog.focus();
					event.element.attr('aria-grabbed', false);
                    if (proxy.element.find("> .e-draggable.e-titlebar")) {
                       var dragobject = $("#" + proxy.element.find("> .e-draggable.e-titlebar").attr("id")).data("ejDraggable");
                        if (dragobject)
                            dragobject.option("cursorAt", proxy.element.offset());
                    }
                    var pos = this.helper.offsetParent().offset();
                    proxy._trigger("dragStop", { event: event });
                    proxy.model.position.X = ej.isNullOrUndefined(this.position.left) ? parseInt(this.helper.css('left')) : this.position.left - [pos.left + parseFloat(this.helper.offsetParent().css('border-left-width'))];
                    proxy.model.position.Y = ej.isNullOrUndefined(this.position.top) ? parseInt(this.helper.css('top')) : this.position.top - [pos.top + parseFloat(this.helper.offsetParent().css('border-top-width'))];
                    proxy._positionChanged = true;
                    proxy.dlgresized = true;
                },
                helper: function (event) {
                    return $(proxy._ejDialog).addClass("dragClone");
                }
            });
            return this;
        },

        _resizeDialog: function () {
            if (!this.model.enableResize)  return;
            var proxy = this, started = false, parentObj;
            var _minWidth = parseInt(this.model.minWidth), _minHeight = parseInt(this.model.minHeight);
            var _maxWidth = parseInt(this.model.maxWidth), _maxHeight = parseInt(this.model.maxHeight);
            parentObj = this._getParentObj();
            if (isNaN(this.model.minWidth) && (this.model.minWidth.indexOf("%") > 0))
                _minWidth = this._convertPercentageToPixel(parentObj.outerWidth(), _minWidth);
            if (isNaN(this.model.minHeight) && (this.model.minHeight.indexOf("%") > 0))
                _minHeight = this._convertPercentageToPixel(parentObj.outerHeight(), _minHeight);
            if (isNaN(this.model.maxWidth) && (this.model.maxWidth.indexOf("%") > 0))
                _maxWidth = this._convertPercentageToPixel(parentObj.innerWidth(), _maxWidth);
            if (isNaN(this.model.maxHeight) && (this.model.maxHeight.indexOf("%") > 0))
                _maxHeight = this._convertPercentageToPixel(parentObj.innerHeight(), _maxHeight);
            this._ejDialog.find("div.e-resize-handle").ejResizable(
                {
                    minHeight: _minHeight,
                    minWidth: _minWidth,
                    maxHeight: _maxHeight,
                    maxWidth: _maxWidth,
                    handle: "e-widget-content",
                    resizeStart: function (event) {
                        proxy.dlgresized=true;
                        if (!proxy.model.enabled)
                            return false;
                        !started && proxy._trigger("resizeStart", { event: event });
                        started = true;
                        proxy.model.position = { X: proxy._ejDialog.css("left"), Y: proxy._ejDialog.css("top") };
                        proxy._dialogPosition();
                    },
                    resize: function (event) {
                        proxy.dlgresized=true;
                        var reElement = $(event.element).parents("div.e-dialog-wrap");
                        proxy.model.height = $(reElement).outerHeight();
                        proxy.model.width = $(reElement).outerWidth();
                        proxy._setSize();
                        proxy._setContainerSize();
                        proxy._resetScroller();
                        proxy._updateCaptionWidth();
                        proxy._trigger("resize", { event: event });
                        proxy._sizeType = { width: "px", height: "px" };
                        if(this.scrObj) this.scrObj._resetScroller();                      
                    },
                    resizeStop: function (event) {
                        proxy.dlgresized=true;
                        proxy._ejDialog.focus();
                        proxy._sizeInPercent();
                        var reElement = $(event.element).parents("div.e-dialog-wrap");
                        proxy.model.height = $(reElement).outerHeight();
                        proxy.model.width = $(reElement).outerWidth();
                        proxy._setSize();
                        proxy._setContainerSize();
                        proxy._resetScroller();
                        started && proxy._trigger("resizeStop", { event: event });
                        started = false;
                        proxy._setDimension();
                    },
                    helper: function (event) {
                        return $(proxy._ejDialog);
                    }
                });
            return this;
        },

        _dialogPosition: function () {
            if (this._ejDialog.parents("form").length > 0 && ej.isNullOrUndefined(this.model.containment) && ej.isNullOrUndefined(this.model.target)) {
                this._ejDialog.appendTo(this._ejDialog.parents("form"));
            }
            if (this.model.position.X != "" || this.model.position.Y != "") {
                this._ejDialog.css("position", "absolute");
                if(ej.isNullOrUndefined(this.model.target) && ej.isNullOrUndefined(this.model.containment)) {
                this._ejDialog.css("left", this.model.position.X);
                this._ejDialog.css("top", this.model.position.Y);
				}
				else {
					  var containerEle=ej.isNullOrUndefined(this.model.containment)?this.model.target:this.model.containment;
					  if (this.dlgresized || this._keyNavigation){
                         this._ejDialog.css("left", this.model.position.X);
                         this._ejDialog.css("top", this.model.position.Y);                   
                                    }
                      else{
                      this._ejDialog.css("left", $(containerEle).offset()["left"]+ parseInt(this.model.position.X));
					  this._ejDialog.css("top", $(containerEle).offset()["top"]+ parseInt(this.model.position.Y));
				}
            }
            }
            else {
                this._centerPosition();
            }
            return this;
        },
        _centerPosition:function(){
            var x = 0, y = 0;
            if (!ej.isNullOrUndefined(this.model.target) ||!ej.isNullOrUndefined(this._target) && !$(this._target).is($(document)) && !($(this._target).is($(window)))) {
                var $content = !ej.isNullOrUndefined(this._target) ? $(this._target) : $(this.model.target);
                if ($content.css("position") == 'static') {
                    var parentOffset = $content.offsetParent().offset();
                    var contentOffset = $content.offset();
                    x = contentOffset.left - parentOffset.left;
                    y = contentOffset.top - parentOffset.top;
                }
                if ($content.outerWidth() > this._ejDialog.width()) x += ($content.outerWidth() - this._ejDialog.width()) / 2;
                if ($content.outerHeight() > this._ejDialog.height()) y += ($content.outerHeight() - this._ejDialog.height()) / 2;
            }
            else {
                var doc = document.documentElement;
                x = (($(window).outerWidth() > this._ejDialog.width()) ? ($(window).outerWidth() - this._ejDialog.outerWidth()) / 2 : 0) + (window.pageXOffset || doc.scrollLeft);
                y = (($(window).outerHeight() > this._ejDialog.height()) ? ($(window).outerHeight() - this._ejDialog.outerHeight()) / 2 : 0) + (window.pageYOffset || doc.scrollTop);
            }
            this._ejDialog.css({ top: y, left: x });
            this._ejDialog.css("position", "absolute");
        },
        _closeClick: function (event) {
			if(event.type == "touchstart")
		    	event.preventDefault();
            if (this.model.enabled) {
                event.stopPropagation();
                this.close(event);
            }
        },

        _collapsibleClick: function (e) {
            if (this.model.enabled) {
                if ($(e.target).hasClass("e-arrowhead-up")) {
                    this._actionCollapse(e);
                }
                else if ($(e.target).hasClass("e-arrowhead-down")) {
                    this._actionExpand(e);
                }
            }
        },
        _actionCollapse: function (e) {
            if (!this._minimize) {
                this._dialogCollapsible&& this._dialogCollapsible.removeClass("e-arrowhead-up").addClass("e-arrowhead-down");
                this._dialogCollapsible && this._dialogCollapsible.attr("title", this.model.tooltip.expand);
                this._ejDialog.find("div.e-resize-handle").hide();
                this._ejDialog.find(".e-widget-content").parent().slideUp("fast");
                if(this.model.showFooter)  this._dialogFooterbar.slideUp("fast");
                this._ejDialog.removeClass("e-shadow");
                this._ejDialog.css("minHeight", "0");
                this._ejDialog.height("auto");
                this._trigger("collapse",{isInteraction :(e ? true : false )});
                this._collapsible = true;
            }
        },
        _actionExpand: function (e) {
            if (!this._minimize) {
                this._dialogCollapsible&& this._dialogCollapsible.removeClass("e-arrowhead-down").addClass("e-arrowhead-up");
                this._dialogCollapsible && this._dialogCollapsible.attr("title", this.model.tooltip.collapse);
                this._ejDialog.addClass("e-shadow");
                this._ejDialog.find(".e-widget-content").parent().slideDown("fast");
                if (this.model.showFooter) this._dialogFooterbar.slideDown("fast");
                if (this._maximize) {
                    this._ejDialog.css({ width: "100%", height: "100%" });
                    this.element.css({ width: "100%", height: "100%" });
                    this.contentDiv.css({ width: "100%", height: "100%" });
                }
                else this._ejDialog.height(this.model.height);
                this._ejDialog.find("div.e-resize-handle").show();
                this._trigger("expand",{isInteraction :(e ? true : false )});
                this._collapsible = false;
            }
        },

        _maximizeClick: function (e) {
            if (this.model.enabled) {
                var _target = $(e.target);
                var hideIcon = this._dialogMaximize;
                if (_target.hasClass("e-maximize")) {
                    this._actionMaximize();
                    if (this._dialogTitlebar){
                        this._dialogTitlebar.find('.e-restore').removeClass('e-restore').addClass('e-minus');
                        this._dialogMinimize && this._dialogMinimize.attr('title', this.model.tooltip.minimize);
                    }
                    _target.removeClass("e-maximize").addClass("e-restore");
                    this._dialogMaximize.attr('title', this.model.tooltip.restore);
                    this._hideIcon(true);
                }
                else if (_target.hasClass("e-restore")) {
                    this._actionRestore();
                    _target.removeClass("e-restore").addClass("e-maximize");
                    this._dialogMaximize.attr('title', this.model.tooltip.maximize);
                    if (!ej.isNullOrUndefined(hideIcon) && $(hideIcon).hasClass('e-arrowhead-down')){
                        $(hideIcon).removeClass('e-arrowhead-down').addClass('e-arrowhead-up');
                        this._dialogMaximize.attr('title', this.model.tooltip.collapse);
                    }
                    this._hideIcon(true);
                }
            }
			this._resetScroller();
        },
        _actionMaximize: function () {
            this._ejDialog.css("top", "0px").css("left", "0px").css("overflow", "hidden").css("position", (this.model.containment ? "absolute" : this.model.target ? "absolute" : "fixed"));
            this._ejDialog.css({ width: "100%", height: "100%" });
            this.element.css({ width: "100%", height: "100%" });
            this.contentDiv.css({ width: "100%", height: "100%" });
            this._maximize = true;
            this._minimize = false;
            var proxy=this;
            if (this._dialogCollapsible && !ej.isNullOrUndefined(this._dialogCollapsible.hasClass("e-arrowhead-down"))) {
                this._dialogCollapsible.removeClass("e-arrowhead-down").addClass("e-arrowhead-up");
                this._dialogCollapsible.attr('title', this.model.tooltip.collapse);
                this._collapseValue = true
            }
            if(this._collapseValue == true) {
                this._ejDialog.find(".e-widget-content").parent().slideDown("fast",function(){
					proxy.refresh();
                    proxy._reRenderScroller();
                });
            }
            this._resetScroller();
			if($(this.contentDiv).is(":hidden"))
			    this.contentDiv.show();
        },
        _actionRestore: function () {
            this.element.height("").width("");
            this.contentDiv.height("").width("");
            this._restoreDialog();
            this._maximize = this._minimize = false;
        },

        _minimizeClick: function (e) {
            if (this.model.enabled) {
                var _target = $(e.target);
                var hideIcon = this._dialogMinimize.hasClass("e-icon")&& this._dialogMinimize;
                if (_target.hasClass("e-minus")) {
                    if (this._maximize)
                        this._setSize();
                    this._actionMinimize();
                } else if (_target.hasClass("e-restore")) {
                    this._actionRestore();
                    _target.removeClass("e-restore").addClass("e-minus");
                    this._dialogMinimize.attr('title', this.model.tooltip.minimize);
                    if (!ej.isNullOrUndefined(hideIcon) && $(hideIcon).hasClass('e-arrowhead-down')){
                        $(hideIcon).removeClass('e-arrowhead-down').addClass('e-arrowhead-up');
                        this._dialogMinimize.attr('title', this.model.tooltip.collapse);
                    }
                    this._hideIcon(true);
                }
            }
        },

        _actionMinimize: function () {
            var top = ($(window).height() - this._ejDialog.height()) + this.element.height() + 14, _height;
            this._ejDialog.css("top", "").css("bottom", "0").css("left", "0").css("position", (this.model.containment ? "absolute" : this.model.target ? "absolute" : "fixed"));
            this._ejDialog.css("minHeight", "0");
            if (this._dialogTitlebar) {
                this._dialogTitlebar.find('.e-restore').removeClass('e-restore').addClass('e-maximize');
                this._dialogMaximize && this._dialogMaximize.attr('title', this.model.tooltip.maximize);
                this._dialogTitlebar.find(".e-minus").removeClass("e-minus").addClass("e-restore");
                this._dialogMinimize && this._dialogMinimize.attr('title', this.model.tooltip.restore);
                if (this._isOpen)
                    _height = this._dialogTitlebar.outerHeight();
                else {
                    this._ejDialog.css({ "display": "block", "visibility": "hidden" });
                    _height = this._dialogTitlebar.outerHeight();
                    this._ejDialog.css({ "display": "none", "visibility": "" });
                }
                this._ejDialog.css("height", _height + 2); // 1px bordertop + 1px borderbottom of the dialog wrapper is added
                this._hideIcon(false);
            } else this._ejDialog.css("height", "");
            this.contentDiv.hide();
			if(this.model.showFooter) this._dialogFooterbar.hide();
            this._maximize = false;
            this._minimize = true;
        },

        _hideIcon: function (value) {
            var hideIcon = this._dialogCollapsible ? this._dialogCollapsible : null;
            if (value) {
                if (!ej.isNullOrUndefined(hideIcon)) $(hideIcon).parent('.e-dialog-icon').show();
                this._ejDialog.find("div.e-resize-handle").show();
            } else {
                if (!ej.isNullOrUndefined(hideIcon)) $(hideIcon).parent('.e-dialog-icon').hide();
                this._ejDialog.find("div.e-resize-handle").hide();
            }
        },

        _pinClick: function (e) {
            if (this.model.enabled) {
                var _target = $(e.target);
                if (_target.hasClass("e-unpin")) {
                    this.dialogPin = true;
                    _target.removeClass("e-unpin").addClass("e-pin");
                    this._dialogPin.attr('title', this.model.tooltip.unPin);
                }
                else if (_target.hasClass("e-pin")) {
                    this.dialogPin = false;
                    _target.removeClass("e-pin").addClass("e-unpin");
                    this._dialogPin.attr('title', this.model.tooltip.pin);
                }
            }
        },

        _restoreDialog: function () {
            this.contentDiv.show();
			if(this.model.showFooter) this._dialogFooterbar.show();
            this._ejDialog.css({"position": "absolute", "bottom": ""}).addClass("e-shadow");
            this._setSize()._resetScroller();
            if (this._dialogTitlebar) {
                this._dialogTitlebar.find(".e-minus").parent().show();
                if (this._dialogCollapsible) {
                    this._dialogCollapsible.removeClass("e-arrowhead-down").addClass("e-arrowhead-up");
                    this._dialogCollapsible.attr("title", this.model.tooltip.collapse);
                }
            }
        },

        _clickHandler: function (e) {
            var zindex = this._dialogMaxZindex();
            if (parseInt(this._ejDialog.css("zIndex")) < zindex) 
                this._ejDialog.css({ zIndex: zindex + 1 });            
        },

        _mouseClick: function (e) {
			if(e.currentTarget==this._id)
				if ($(e.target).hasClass("e-dialog") || $(e.target).hasClass("e-icon e-resize-handle")) {
					this._setZindex();
					$(e.target).closest(".e-dialog.e-widget").focus();
				}
        },

        _keyDown: function (e) {
            var code;
            if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
            else if (e.which) code = e.which; // ns4 and opera
            else code = e.charCode;
            if (this.model.allowKeyboardNavigation && this.model.enabled && $(e.target).hasClass("e-dialog"))
                if ($.inArray(code, this.keyConfigs) > -1 && this.model.allowDraggable && !this.dialogPin) {
                    this._keyPressed(code, e.ctrlKey);
                    e.preventDefault();
                }            
            if (this.model.closeOnEscape && code === 27 && this.model.enabled) 
                if (!this.element.find(".e-js.e-dialog").first().is(":visible")) {
                    this.close(e);
                    e.preventDefault();
                }
            if (code===13 && this.model.enabled){
                if($(e.target).hasClass("e-close")) this.close(e);
                else if ($(e.target).hasClass("e-arrowhead-up") || $(e.target).hasClass("e-arrowhead-down")) this._collapsibleClick(e);                
                if ($(e.target).hasClass("e-maximize") || ($(e.target).hasClass("e-restore") && $(e.target).is(this._dialogMaximize)))
				    this._maximizeClick(e);
                else if ($(e.target).hasClass("e-minus") || ($(e.target).hasClass("e-restore") && $(e.target).is(this._dialogMinimize)))
				    this._minimizeClick(e);
				if ($(e.target).hasClass("e-pin") || $(e.target).hasClass("e-unpin")){
				    this._pinClick(e);
					}
            }
            if (code == 9 && this.model.enableModal)
                this._focusOnTab(e);
        },

        _focusOnTab: function (e) {
            var focusEle = this._ejDialog.find("a, button, :input, select, [tabindex]:not('-1')");
            focusEle = $(focusEle).find("a, button, :input, select, [tabindex]:not('')");
            if (e.shiftKey) {
                if (!focusEle[focusEle.index(e.target) - 1]) {
                    e.preventDefault();
                    focusEle.last().focus();
                }
            }
            else if (!focusEle[focusEle.index(e.target) + 1]) {
                e.preventDefault();
                focusEle[0].focus();
            }
        },

        _keyPressed: function (code, ctrlKey) {
            this._keyNavigation=true;
            switch (code) {
                case 40:
                    ctrlKey ?  this._resizing("height", (this._ejDialog.outerHeight() + 3)) : this.option("position", { X: this._ejDialog.position().left, Y: (this._ejDialog.position().top + 3) });
                    break;
                case 39:
                    ctrlKey ? this._resizing("width", (this._ejDialog.outerWidth() + 3)) : this.option("position", { X: (this._ejDialog.position().left + 3), Y: this._ejDialog.position().top });
                    break;
                case 38:
                    ctrlKey ? this._resizing("height", (this._ejDialog.outerHeight() - 3)) : this.option("position", { 
						X: (this._ejDialog.position().left == 0 ? 0 : this._ejDialog.position().left),
						Y: (this._ejDialog.position().top > 3 ? this._ejDialog.position().top - 3 : 0) 
					});
                    break;
                case 37:
                    ctrlKey ? this._resizing("width", (this._ejDialog.outerWidth() - 3)) : this.option("position", { 
						X: (this._ejDialog.position().left > 3 ? this._ejDialog.position().left - 3 : 0), 
						Y: (this._ejDialog.position().top == 0 ? 0 : this._ejDialog.position().top)
					});
                    break;
            }
        },

        _resizing:function(key, value){
            if (this.model.enableResize) this.option(key, value);
        },

        _sizeInPercent: function () {
            if (!this._enableWindowResize()) return this;
            var parentObj = this._getParentObj();
            if (this._sizeType.width == "%") this._widthPercent = parseFloat(this.model.width);
            else this._widthPercent = this._convertPixelToPercentage(parentObj.outerWidth(), this._ejDialog.outerWidth());
            if (this._sizeType.height == "%") this._heightPercent = parseFloat(this.model.height);
            else this._heightPercent = this._convertPixelToPercentage(parentObj.outerHeight(), this._ejDialog.outerHeight());
            if (this._widthPercent >= 100) {
                this._widthPercent = 100;
                this._ejDialog.outerWidth(parentObj.outerWidth());
                this.model.width = this._ejDialog.width();
            }
            if (this._heightPercent >= 100) {
                this._heightPercent = 100;
                this._ejDialog.outerHeight(parentObj.outerHeight());
                this.model.height = this._ejDialog.height();
            }
            return this;
        },

        _getParentObj: function () {
            return (!ej.isNullOrUndefined(this.model.containment) ? $(this.model.containment) : !ej.isNullOrUndefined(this.model.target) ? $(this.model.target) : $(document));
        },

        _convertPercentageToPixel: function (parent, child) {
            return Math.round((child * parent) / 100);
        },

        _convertPixelToPercentage: function (parent, child) {
            return Math.round((child / parent) * 100);
        },

        _reSizeHandler: function () {
            var parentObj;
            if (this._maximize) { this._resetScroller(); return; }
            if (this.model.position.X == "" || this.model.position.Y == "" && !this._minimize) this._centerPosition();
            parentObj = this._getParentObj();
            this._change = false;
            if (this._windowSize.outerWidth != $(window).outerWidth()) {
                if (this._sizeType.width == "%") this._percentageWidthDimension(parentObj);
                else this._pixelsWidthDimension(parentObj);
            }
            else if (this._windowSize.outerHeight != $(window).outerHeight()) {
                if (this._sizeType.height == "%") this._percentageHeightDimension(parentObj);
                else this._pixelsHeightDimension(parentObj);
            }
            this._change && this._resizeContainer(parentObj);
            this._windowSize = { outerWidth: $(window).outerWidth(), outerHeight: $(window).outerHeight() };
			this._centerPosition();
        },
        _setDimension:function(){
            if (ej.isNullOrUndefined(this.model.maxWidth)) {
                if (ej.isNullOrUndefined(this._sizeType.width)) this._maxWidth = +this.model.width;
                else if (this._sizeType.width == "px" || this._sizeType.width == "auto") this._maxWidth = this.model.width;
            } else this._maxWidth = this.model.maxWidth;
            if (ej.isNullOrUndefined(this.model.maxHeight)) {
                if (ej.isNullOrUndefined(this._sizeType.height)) this._maxHeight = +this.model.height;
                else if (this._sizeType.height == "px" || this._sizeType.height == "auto") this._maxHeight = this.model.height;
            } else this._maxHeight = this.model.maxHeight;
        },
        _percentageWidthDimension: function (parentObj) {
            this._ejDialog.outerWidth(this._convertPercentageToPixel(parentObj.outerWidth(), this._widthPercent));
            this._change = true;
        },
        _percentageHeightDimension: function (parentObj) {
            this._ejDialog.outerHeight(this._convertPercentageToPixel(parentObj.outerHeight(), this._heightPercent));
            this._change = true;
        },
        _pixelsWidthDimension: function (parentObj) {
            if ($(parentObj).outerWidth() <= this._ejDialog.outerWidth()) this._setWidth(parentObj);
            if (($(parentObj).outerHeight() <= this._ejDialog.outerHeight()) && !this.model.isResponsive) this._setHeight(parentObj);
            if (parseInt(this._ejDialog.css("width")) < parseInt(this._maxWidth)) {
                if (parseInt(this._maxWidth) < $(parentObj).outerWidth()) this._ejDialog.outerWidth((parseInt(this._maxWidth)));
                else this._ejDialog.outerWidth((parentObj.outerWidth()));
                this._change = true;
            }
        },
        _pixelsHeightDimension: function (parentObj) {
            if (($(parentObj).outerHeight() <= this._ejDialog.outerHeight()) && !this.model.isResponsive) this._setHeight(parentObj);
            if ($(parentObj).outerWidth() <= this._ejDialog.outerWidth()) this._setWidth(parentObj);
            if (parseInt(this._ejDialog.css("height")) < parseInt(this._maxHeight)) {
                if (parseInt(this._maxHeight) < $(parentObj).outerHeight()) this._ejDialog.outerWidth((parseInt(this._maxHeight)));
                else this._ejDialog.outerHeight((parentObj.outerHeight()));
                this._change = true;
            }
        },
        _setWidth: function (parentObj) {
            this._ejDialog.outerWidth((parentObj.outerWidth()));
            this._change = true;
        },
        _setHeight: function (parentObj) {
            this._ejDialog.outerHeight((parentObj.outerHeight()));
            this._change = true;
        },
        _resizeContainer: function (parentObj) {
            this.contentDiv.width(this._ejDialog.width());
            this.element.outerWidth(this.contentDiv.width());
            var contentDivheight = this._ejDialog.height() - ((this.model.showHeader) ? $(this._ejDialog.find("div.e-titlebar")).outerHeight(true) : 0);
            this.contentDiv.height((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? contentDivheight : contentDivheight - 1);
            this.element.outerHeight((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? contentDivheight : contentDivheight - 1);
            this.scroller = this.contentDiv.ejScroller({ width: (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") ? this._ejDialog.width() : this._ejDialog.width() - 2 : false , height: (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") ? this.element.outerHeight() : this.element.outerHeight() - 2 : false, rtl: this.model.rtl, enableTouchScroll: false });
            this.scroller = this.contentDiv.data("ejScroller");
            this._reRenderScroller();
            if ((this.model.position.X == "" || this.model.position.Y == "" && !this._minimize)||(this._positionChanged)) this._centerPosition();
            else this._ejDialog.css("height", this._dialogTitlebar.outerHeight());
            this._updateCaptionWidth();
            this._change = false;
        },
        _getLocalizedLabels:function(){
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        }, 

        _enableWindowResize: function () {
            return (this.model.isResponsive || ((isNaN(this.model.width) && (this.model.width.indexOf("%") > 0)) && (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0) && (this.model.height != "auto")))) ? true : false;
        },

        _wireResizing: function () {             
            $(window)[(this._enableWindowResize() ? "on" : "off")]('resize', $.proxy(this._reSizeHandler, this));                        
        },

        _wireEvents: function () {
            this._on(this._ejDialog, "keydown", this._keyDown);
            this._on(this._ejDialog, "click", this._mouseClick);
            this._wireResizing();
        },

        refresh: function () {
            this._resetScroller();
        },

        open: function () {
            if (this._isOpen) return true;
            if (true == this._trigger("beforeOpen")) return false;
            this.element.css("display", "block");
            this._setZindex();
            if (!this._minimize && !this._maximize && !this._init) this._dialogPosition();
            var proxy = this, effect = {}, height;
            this._ejDialog.show();
            if (this.model.enableAnimation) {
                this._ejDialog.css({ "opacity": 0});
                if (this.model.animation.show.effect == "slide") {
                    var eLeft = this._ejDialog.css("left");
                    this._ejDialog.css({ "left": -this._ejDialog.width() });
                    effect = { left: eLeft, opacity: 1 };
                }
                else {
                    effect = { opacity: 1 };
                }
            }
            this._ejDialog.animate(effect, (this.model.enableAnimation ? Number(this.model.animation.show.duration) : 0), function () {
                if (proxy.model) {
					  if (proxy._ejDialog.css("display") == "none") proxy._ejDialog.show();
                    proxy._ejDialog.eq(0).focus();
                    proxy._ejDialog.css({ "opacity": "" });
                    proxy.contentDiv.find("a:visible:enabled, button:visible:enabled, :input:visible:enabled, select:visible:enabled, .e-input").first().focus();
                    proxy._trigger("open");
                    proxy._updateCaptionWidth();
					if(proxy.model.enableModal && !proxy.model.backgroundScroll)
					{
						if( proxy._ejDialog.height() > $(window).height()) proxy._ejDialog.css("height",$(window).height());
						proxy.model.height=$(window).height(); proxy._overLay.css("position","fixed");
						proxy.scroller.refresh(true); proxy.refresh();
					}
                    if (proxy.model.maxHeight || proxy.model.maxWidth)
                    {
                        height = proxy._ejDialog.outerHeight(true) - ((proxy._dialogTitlebar ? proxy._dialogTitlebar.outerHeight(true) : 0));
                        if ((proxy.model.height == "auto" || proxy.model.height == "100%"))
                            height = proxy.model.height;
                        proxy._updateScroller((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? height : height - 2, (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? proxy._ejDialog.width() : proxy._ejDialog.width() - 2);
						proxy.scroller.refresh();
                    }
                }
            });
            if (this.model.enableModal == true) this._createOverlay();
            this._isOpen = true;
            if (this.element.find("> .e-draggable.e-titlebar")) {
               var dragobject = $("#" + this.element.find("> .e-draggable.e-titlebar").attr("id")).data("ejDraggable");
                if (dragobject)
                    dragobject.option("cursorAt", this.element.offset());
            }
            return this;
        },

        close: function (event) {
            if (!this._isOpen || !this.model.enabled) return true;
            var isInteraction= event ? true : false;            
            if (true == this._trigger("beforeClose", { event: event,isInteraction:isInteraction })) return false;
            this._isOpen = false;
            var proxy = this, effect = {};
            if (this.model.enableAnimation) 
            effect = this.model.animation.hide.effect == "slide" ? { left: -this._ejDialog.width(), opacity: 0 } : { opacity: 0 };
            this._ejDialog.animate(effect, (this.model.enableAnimation ? Number(this.model.animation.hide.duration) : 0), function () {
                proxy._trigger("close", { event: event, isInteraction:isInteraction });
                proxy._ejDialog.hide();
            });
            if (this.model.enableModal){
                if (this._overLay) this._overLay.remove();
                if (!this.model.backgroundScroll) $("body").removeClass("e-dialog-modal");
            }
            return this;
        },

        isOpened: function () { return this.isOpen() },
        isOpen: function () { return this._isOpen; },

        setTitle: function (titleText) {
            this.model.title = titleText;
            this._titleText.text(titleText);
            this._updateCaptionWidth();
            return this;
        },

        setContent: function (htmlContent) {
            if (!this.model.enabled) return false;
            this.element.html(htmlContent);
            this._resetScroller();
            return this;
        },      

        focus: function () {
            this._setZindex();
            this.element.focus();
            return this;
        },

        minimize: function () {
			if(this.model.showHeader){
            this._actionMinimize();
            $(this.wrapper.find(".e-minus")[0]).parent().hide();
            return this;
			}
        },

        maximize: function () {
			if(this.model.showHeader){
            this._actionMaximize();
            $(this.wrapper.find(".e-maximize")[0]).removeClass("e-maximize").addClass("e-restore");
            $(this.wrapper.find(".e-restore")[1]).removeClass("e-restore").addClass("e-minus");
            this._dialogMaximize && this._dialogMaximize.attr('title', this.model.tooltip.restore);
            this._dialogTitlebar && this._dialogTitlebar.find(".e-minus").parent().show();
            this._hideIcon(true);
            return this;
			}
        },

        restore: function () {
			if(this.model.showHeader){
            var action = this._minimize;
            this._actionRestore();
            $(this.wrapper.find(".e-restore")[0]).removeClass("e-restore").addClass(action ? "e-minus" : "e-maximize");
            this._dialogMaximize && this._dialogMaximize.attr('title', this.model.tooltip.maximize);
            this._hideIcon(true);
            return this;
			}
        },

        pin: function () {
			if(this.model.showHeader){
            this.dialogPin = true;
            $(this.wrapper.find(".e-unpin")[0]).removeClass("e-unpin").addClass("e-pin");
            this._dialogPin && this._dialogPin.attr('title', this.model.tooltip.unPin);
            return this;
			}
        },

        unpin: function () {
            if(this.model.showHeader){
			this.dialogPin = false;
            $(this.wrapper.find(".e-pin")[0]).removeClass("e-pin").addClass("e-unpin");
            this._dialogPin && this._dialogPin.attr('title', this.model.tooltip.pin);
            return this;
			}
        },

        collapse: function () {
			if(this.model.showHeader){
            this._actionCollapse();
            this._collapseValue=true;
            return this;
			}
        },

        expand: function () {
			if(this.model.showHeader){
            this._actionExpand();
            return this;
			}
        }
    });
    
ej.Dialog.Locale = ej.Dialog.Locale || {} ;
    
ej.Dialog.Locale["default"] = ej.Dialog.Locale["en-US"] = {
    tooltip:{
                close: "Close",
                collapse: "Collapse",
                restore: "Restore",
                maximize: "Maximize",
                minimize: "Minimize",
                expand: "Expand",
                unPin: "UnPin",
                pin: "Pin"
            },
    title:"",
     //currently we have deprecated this API
    closeIconTooltip: "close"
};

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to craete a Timepicker with the Html input element
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejTimePicker", "ej.TimePicker", {

        element: null,

        model: null,
        validTags: ["input"],
        _addToPersist: ["value"],
        _rootCSS: "e-timepicker",
        _setFirst: false,
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions'],
            requireFormatters: true
        },
        _requiresID: true,

        defaults: {

            cssClass: "",

            timeFormat: "",

            value: null,

            enableAnimation: true,

            locale: "en-US",

            htmlAttributes: {},

            readOnly: false,

            showPopupButton: true,

            enableStrictMode: false,

            interval: 30,

            hourInterval: 1,

            minutesInterval: 1,

            secondsInterval: 1,

            height: "",

            width: "",

            minTime: "12:00 AM",

            maxTime: "11:59 PM",

            showRoundedCorner: false,

            enableRTL: false,

            popupHeight: "191px",

            popupWidth: "auto",

            enabled: true,

            enablePersistence: false,

            disableTimeRanges: null,

            validationRules: null,

            validationMessages: null,

            focusIn: null,

            focusOut: null,

            beforeChange: null,

            change: null,

            select: null,

            create: null,

            destroy: null,

            beforeOpen: null,

            beforeClose: null,

            open: null,

            close: null,

            watermarkText:"select a time"
        },


        dataTypes: {
            timeFormat: "string",
            minTime: "string",
            maxTime: "string",
            readOnly: "boolean",
            interval: "number",
            showPopupButton: "boolean",
            locale: "string",
            hourInterval: "number",
            minutesInterval: "number",
            secondsInterval: "number",
            enabled: "boolean",
            enablePersistence: "boolean",
            enableAnimation: "boolean",
            enableStrictMode: "boolean",
            disableTimeRanges: "data",
            htmlAttributes: "data",
            validationRules: "data",
            validationMessages: "data",
            watermarkText:"string"
        },

        observables: ["value"],

        enable: function () {
            if (!this.model.enabled) {
                this.element[0].disabled = false;
                this.element.prop("disabled", false);
                this.model.enabled = true;
                this.wrapper.removeClass('e-disable');
                this.element.removeClass("e-disable").attr("aria-disabled", false);
                if (this.model.showPopupButton) {
                    this.timeIcon.removeClass("e-disable").attr("aria-disabled", false);
                    if (this.popupList) this.popupList.removeClass("e-disable").attr("aria-disabled", false);
                }
                if (this._isIE8) this.timeIcon.children().removeClass("e-disable");
            }
        },


        disable: function () {
            if (this.model.enabled) {
                this.element[0].disabled = true;
                this.model.enabled = false;
                this.element.attr("disabled", "disabled");
                this.wrapper.addClass('e-disable');
                this.element.addClass("e-disable").attr("aria-disabled", true);
                if (this.model.showPopupButton) {
                    this.timeIcon.addClass("e-disable").attr("aria-disabled", true);
                    if (this.popupList) this.popupList.addClass("e-disable").attr("aria-disabled", true);
                }
                if (this._isIE8) this.timeIcon.children().addClass("e-disable");
                this._hideResult();
            }
        },


        getValue: function () {
            return this.element.val();
        },


        setCurrentTime: function () {
            if (!this.model.readOnly) this._setMask();
        },
        
        setValue: function (value) {
            var prevValue = this.model.value;
            this.model.value = ej.format(this._createObject(value, true), this.model.timeFormat, this.model.locale);
            this._ensureValue();
            this._enableMask();
            if (this.model.enableStrictMode && !this._isValid(value, true)) {
                    var tval = this._isValid(this.model.value) ? this._localizeTime(this.model.value) : this.model.value;
                     this.element.val(tval);
            }
            if (prevValue != this.model.value) {
                this._raiseChangeEvent(prevValue, true);
            }
            this._checkErrorClass();
        },

        show: function () {
            (!this.showDropdown && !this._getInternalEvents) && this._showResult();
        },

        hide: function () {
            (this.showDropdown) && this._hideResult();
        },


        _ISORegex: function () {
            this._tokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            // complex case for iso 8601 regex only
            this._extISORegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._basicISORegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
            this._numberRegex = {
                2: /\d\d?/,
                4: /^\d{4}/,
                "z": /Z|[+-]\d\d(?::?\d\d)?/gi,
                "t": /T/,
                "-": /\-/,
                ":": /:/
            };
            this._zeroRegex = /Z|[+-]\d\d(?::?\d\d)?/;
            this._dates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                // YYYYMM is NOT allowed by the standard
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/]
            ];

            // iso time formats and regexes
            this._times = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/]
            ];
        },

        _timeFormat: function (format) {
            if (!format)
                format = ej.preferredCulture(this.model.locale).calendars.standard.patterns.t;
            var validatedformat = this._validateTimeFormat(format);
            if (validatedformat) {
                this.model.timeFormat = validatedformat;
                // Only change the format when model is not null.   
                this.model.minTime = ej.format(this._createObject(this._minTimeObj), this.model.timeFormat, this.model.locale);
                this.model.maxTime = ej.format(this._createObject(this._maxTimeObj), this.model.timeFormat, this.model.locale);

                if (this.model.value) {
                    this._setModelOption = true;
                    this.model.value = this._localizeTime(this.model.value);
                    this.element.val(this.model.value);
                }
                else {
                    this._setModelOption = false;
                    var timeValue = this._localizeTime(this.element.val());
                    if (timeValue && this._checkMinMax(timeValue)) {
                        this.model.value = timeValue;
                        this.element.val(timeValue);
                    }
                }
            }
            return validatedformat;
        },

        _getTimeFormat: function () {
            if (this._prevTimeFormat)
                this.model.timeFormat = ej.preferredCulture(this.model.locale).calendar.patterns.t || "h:mm tt";
            this.seperator = this._getSeperator();
        },

        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            if (this.popupList) this.popupList.removeClass(this.model.cssClass).addClass(skin);
        },

        _localize: function (culture) {
            var currentTime = this._createObject(this.model.value, true);
            this.model.locale = culture;
            this._getTimeFormat();

            this.model.minTime = ej.format(this._createObject(this._minTimeObj), this.model.timeFormat, this.model.locale);
            this.model.maxTime = ej.format(this._createObject(this._maxTimeObj), this.model.timeFormat, this.model.locale);
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            if (currentTime) {
                this.model.value = this._localizeTime(currentTime);
                this.element.val(this.model.value);
            }
            else {
                currentTime = this._localizeTime(this.element.val());
                if (currentTime && this._checkMinMax(currentTime)) {
                    this.model.value = currentTime;
                    this.element.val(currentTime);
                }
            }
            this._getAmPm();
        },
        _setWaterMark: function () {
            if (this.element != null && this.element.hasClass("e-input")) {
                if (this._localizedLabels.watermarkText && this.element.val() == "") {
                    this.isValidState = true;
                    this._checkErrorClass();
                }
                if ((!this._isSupport) && this.element.val() == "") {
                    this._hiddenInput.css("display", "block").val(this._localizedLabels.watermarkText);
                }
                else {
                    $(this.element).attr("placeholder", this._localizedLabels.watermarkText);
                }
                return true;
            }
        },
        _localizedLabelToModel: function () {
            this.model.watermarkText = this._localizedLabels.watermarkText;
            this.model.buttonText = this._localizedLabels.buttonText;
        },
        _setLocalize: function (culture) {
            var culture = ej.preferredCulture(culture);
            if (culture) {
                this.model.locale = culture.name == "en" ? "en-US" : culture.name;
                if (!ej.isNullOrUndefined(this._options) && (ej.isNullOrUndefined(this._options.timeFormat) || (!this._options.timeFormat)))
                    this.model.timeFormat = ej.preferredCulture(this.model.locale).calendars.standard.patterns.t;
                    this._prevTimeFormat = (ej.isNullOrUndefined(this._options.timeFormat)||this._options.timeFormat=="") ? true : false;
            }
        },
        _updateInput: function () {
            if (ej.isNullOrUndefined(this._options)) return;
            var value = this._localizeTime(this._options.value);
            if (!ej.isNullOrUndefined(value))
                if (typeof value === "string" && this.model.enableStrictMode && !this.model.value) {
                    this.element.val(this._options.value);
                    this.isValidState = (this.element.val() == "") ? true : false;
                    this._checkErrorClass();
                }
        },
        _createMinMaxObj: function () {
            // create minTime object
            this._minTimeObj = this._createObject(this.model.minTime);
            if (!this._minTimeObj)
                this.model.minTime = ej.format(this._createObject(new Date().setHours(0, 0, 0, 0)), this.model.timeFormat, this.model.locale);

            // create maxTime object
            this._maxTimeObj = this._createObject(this.model.maxTime);
            if (!this._maxTimeObj)
                this.model.maxTime = ej.format(this._createObject(new Date().setHours(23, 59, 59, 59)), this.model.timeFormat, this.model.locale);
        },
        _setMinMax: function () {
            var minVal = new Date().setHours(0, 0, 0, 0);
            var maxval = new Date().setHours(23, 59, 59, 59);
            if (!ej.isNullOrUndefined(this._options) && ej.isNullOrUndefined(this._options.minTime))
                this.model.minTime = ej.format(this._createObject(minVal), this.model.timeFormat, this.model.locale);
            if (!ej.isNullOrUndefined(this._options) && ej.isNullOrUndefined(this._options.maxTime))
                this.model.maxTime = ej.format(this._createObject(maxval), this.model.timeFormat, this.model.locale);
            this._createMinMaxObj();
        },
        _init: function (options) {
            this._options = options;
            this._cloneElement = this.element.clone();
            this._ISORegex();
            this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            this._initialize();
            this._render();
            this._wireEvents();
            if (options && options.value != undefined && options.value != this.element.val()) {
                this._trigger("_change", { value: this.element.val() });
            }
            this._updateInput();
            this._updateTextbox();
            if (this.model.validationRules != null) {
                this._initTimeValidator();
                this._setTimeValidation();
            }

        },
        _updateTextbox: function () {
            if (this._options.disableTimeRanges) {
                var isValid = true;
                for (var i = 0; i < this._options.disableTimeRanges.length; i++) {
                    if (this.model.minTime >= this._options.disableTimeRanges[i].startTime || this.model.minTime <= this._options.disableTimeRanges[i].endTime) {
                        if ((this._options.disableTimeRanges[i].startTime == this.model.minTime)) {
                            isValid = false;
                            break;
                        }
                    }
                }

                if (this._options === undefined || (this._options.value === undefined && !this.model.value && isValid))
                    this._setTime(this._localizeTime(this.model.minTime));
            }

            else if (this._options === undefined || (this._options.value === undefined && !this.model.value))
                this._setTime(this._localizeTime(this.model.minTime));
        },

        _setMinMaxTime: function (prev, options) {
            if (!ej.isNullOrUndefined(options["minTime"]) && $.trim(options["minTime"]) && this._isValid(options["minTime"])) {
                this.model.minTime = options["minTime"];
                this._minTimeObj = this._createObject(this.model.minTime);
                this._validateTimes();
            }
            if (!ej.isNullOrUndefined(options["maxTime"]) && $.trim(options["maxTime"]) && this._isValid(options["maxTime"])) {
                this.model.maxTime = options["maxTime"];
                this._maxTimeObj = this._createObject(this.model.maxTime);
                this._validateTimes();
            }

            this._validateMinMax();
            this._createMinMaxObj();
            if (!ej.isNullOrUndefined(options["minTime"])) options["minTime"] = this.model.minTime;
            if (!ej.isNullOrUndefined(options["maxTime"])) options["maxTime"] = this.model.maxTime;
            if (!this._checkMinMax(this.model.value)) {
                if (!this.model.enableStrictMode) {
                    if (this.model.minTime && !this._compareTime(this.model.value, this.model.minTime, true))
                        this.model.value = this.model.minTime;
                    if (this.model.maxTime && !this._compareTime(this.model.maxTime, this.model.value, true))
                        this.model.value = this.model.maxTime;
                }
                else {
                    this.isValidState = false;
                    this.model.value = null;
                }
            }
            if (prev !== this.model.value && this._isValid(this.model.value, true))
                this.element.val(this.model.value);
        },
        _setModel: function (options) {
            var change = false, prev = this.model.value;
			
            for (var option in options) {
			if(option != "height" && option != "width" && option != "htmlAttributes" && option != "watermarkText" && option != "enabled" && option != "validationRules" && option != "validationMessages"){
				if (ej.isNullOrUndefined(this.popupList)) this._renderDropdown();
			}
                switch (option) {
                    case "timeFormat":
                        var prevTime = this._createObject(this.model.value);
                        this._preTimeformat = this.model.timeFormat;
                        var newFormat = this._timeFormat(options[option]);
                        options[option] = this.model.timeFormat;
                        if (newFormat)
                            this.seperator = this._getSeperator();
                        var currentTime = this._createObject(this.model.value);
                        change = (+prevTime === +currentTime) ? false : true;
                        break;
                    case "locale":
                        var prevTime = this._createObject(this.model.value);
                        this._localize(options[option]);
                        this.model.minTime = ej.format(this._createObject(this._minTimeObj), this.model.timeFormat, this.model.locale);
                        this.model.maxTime = ej.format(this._createObject(this._maxTimeObj), this.model.timeFormat, this.model.locale);
                        var currentTime = this._createObject(this.model.value);
                        change = (+prevTime === +currentTime) ? false : true;
                        break;
                    case "interval":
                        this.model.interval = options[option];
                        break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "enableRTL": this._setRtl(options[option]); break;
                    case "height":
                        this._setHeight(options[option]); break;
                    case "width":
                        this.wrapper.width(options[option]);
                        this._setListWidth();
                        break;
                    case "value":
                        if (ej.isPlainObject(options[option])) options[option] = null;
                        this.model.value = ej.format(this._createObject(options[option], true), this.model.timeFormat, this.model.locale);
                        this._ensureValue();
                        this._enableMask();
                        if (this.model.enableStrictMode && !this._isValid(options[option], true)) {
                            var tval = this._isValid(options[option]) ? this._localizeTime(options[option]) : options[option];
                            this.element.val(tval);
                        }
                        options[option] = this.model.value;
                        change = true;
                        break;
                    case "enableStrictMode":
                        this.model.enableStrictMode = options[option];
                        break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessages = null;
                        }
                        this.model.validationRules = options[option];
                        if (this.model.validationRules != null) {
                            this._initTimeValidator();
                            this._setTimeValidation();
                        }
                        break;
                    case "validationMessages":
                        this.model.validationMessages = options[option];
                        if (this.model.validationRules != null && this.model.validationMessages != null) {
                            this._initTimeValidator();
                            this._setTimeValidation();
                        }
                        break;
                    case "popupHeight": this.model.popupHeight = options[option]; this._setListHeight(); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "enabled": if (options[option]) this.enable(); else this.disable(); break;
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "disableTimeRanges":
                        this.model.disableTimeRanges = options[option];
                        this._initStartEnd();
                        this.model.value = ej.format(this._createObject(this.element.val(), true), this.model.timeFormat, this.model.locale);
                        this._ensureValue();
                        this._enableMask();
                        if (this.model.enableStrictMode && !this._isValid(this.element.val(), true))
                            this.element.val(this.element.val());
                        change = true;
                        break;
                    case "watermarkText":
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options[option] = this.model.watermarkText = options[option];
                        this._localizedLabels.watermarkText = this.model.watermarkText;
                        this._setWaterMark();
                        break;
                }
            }
            if (!ej.isNullOrUndefined(options["minTime"]) || !ej.isNullOrUndefined(options["maxTime"])) {
                this._setMinMaxTime(prev, options);
                change = true;
            }
            if (!ej.isNullOrUndefined(options["showPopupButton"]))
                this._showButton(options[option]);
            else if (this.model.showPopupButton && (newFormat || !ej.isNullOrUndefined(options["minTime"]) || !ej.isNullOrUndefined(options["maxTime"]) ||
                   !ej.isNullOrUndefined(options["locale"]) || !ej.isNullOrUndefined(options["interval"]) || !ej.isNullOrUndefined(options["disableTimeRanges"]))) {
                this._reRenderDropdown();
            }
            if (change) {
                this._raiseChangeEvent(prev, true);
                options["value"] = this.model.value;
            }
            this._checkErrorClass();
        },


        _destroy: function () {
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
            this.element.removeClass("e-input").removeAttr("ondragstart draggable aria-atomic aria-live aria-readonly").val(this.element.attr("value"));
            if (!this._cloneElement.attr('name')) this.element.removeAttr('name');
            if (this.popupList) this.popupList.remove();
        },

        _initialize: function () {
            this.target = this.element[0];
            this.timeIcon = null;
            this._disabledItems = [];
            this.popupList = null;
            this.focused = false;
            this.start = 0;
            this.end = 0;
            this.min = null;
            this.max = null;
            this.incomplete = false;
            this.downPosition = 0;
            this._setLocalize(this.model.locale);
            this._setMinMax();
            this._getAmPm();
            this.showDropdown = false;
            this._activeItem = 0;
            this.isValidState = true;
            this._manualFocus = false;
            this._isIE7 = this._checkIE7();
            this._initStartEnd();
            this._localizedLabels = this._getLocalizedLabels();
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.watermarkText))
                    this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            if (ej.isNullOrUndefined(this.model.value) && this.element[0].value != "")
                this.model.value = this.element[0].value;
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            // _getInternalEvents is used when TimePicker used as a subcontrol of DateTimePicker 
            this._getInternalEvents = false;
            this._dateTimeInternal = false;
            if (!this.model.timeFormat) this._getTimeFormat();
            else this.seperator = this._getSeperator();
        },

        _render: function () {
            this._renderWrapper();
            this._setDimentions();
            this._renderTimeIcon();
            this._validateTimes();
            this._createMinMaxObj();
            this._addAttr(this.model.htmlAttributes);
            this._checkProperties();
            this._enableMask();
            this._checkErrorClass();
            this.element.attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', "aria-readonly": this.model.readOnly, "value": this.model.value });
            (ej.isNullOrUndefined(this.model.value)) ? this.wrapper.addClass('e-valid') : this.wrapper.removeClass('e-valid');
        },

        _renderWrapper: function () {
            this.element.addClass("e-input").attr({'tabindex':'0','role':'combobox','aria-expanded':'false'});
            this.wrapper = ej.buildTag("span.e-timewidget e-widget " + this.model.cssClass + "#" + this.target.id + "_timewidget").insertAfter(this.element);
            this.wrapper.attr("style", this.element.attr("style"));
            this.element.removeAttr('style');
            if (!ej.isTouchDevice()) this.wrapper.addClass('e-ntouch');
            this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
            this.wrapper.append(this.container);
            if (!this._isSupport) {
                this._hiddenInput = ej.buildTag("input.e-input e-placeholder ", "", {}, { type: "text" }).insertAfter(this.element);
                this._hiddenInput.val(this._localizedLabels.watermarkText);
                this._hiddenInput.css("display", "block");
                var proxy = this;
                $(this._hiddenInput).focus(function () {
                    proxy.element.focus();
                });
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                var keyName = key.toLowerCase();
                if (keyName == "class") proxy.wrapper.addClass(value);
                else if (keyName == "disabled" && value == "disabled") proxy.disable();
                else if (keyName == "readOnly" && value == "readOnly") proxy.model.readOnly = true;
                else if (keyName == "style") proxy.wrapper.attr(key, value);
                else if (keyName == "id") {
                    proxy.wrapper.attr(key, value + "_wrapper");
                    proxy.element.attr(key, value);
                }
                else if (ej.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
                else proxy.wrapper.attr(key, value);

            });
        },
        _initTimeValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setTimeValidation: function () {
            this.element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            var name = this.element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessages)
                            ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },
        _renderTimeIcon: function () {
            if (this.model.showPopupButton) {
                this.timeIcon = ej.buildTag("span.e-select").attr({ 'role': 'button', 'aria-label': 'select' });
                var icon = ej.buildTag("span.e-icon e-clock").attr('role', 'presentation');
                if (this._isIE8) {
                    this.timeIcon.attr("unselectable", "on");
                    icon.attr("unselectable", "on");
                }
                this.timeIcon.append(icon);
                this.container.append(this.timeIcon).addClass("e-padding");
                this._on(this.timeIcon, "mousedown", this._timeIconClick);
            }

        },
        _elementClick: function (e) {
            if (!this.showDropdown) this._showResult();
        },
        _renderDropdown: function () {
            var oldWrapper = $("#" + this.element[0].id + "_popup").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            if (this.popupList) return false;
            this.popupList = ej.buildTag("div.e-time-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.target.id + "_popup", "", {}, { 'tabindex': 0, 'role':'listbox'});
            if (!ej.isTouchDevice()) this.popupList.addClass('e-ntouch');
            this.popup = this.popupList;
            this.ul = ej.buildTag("ul.e-ul");
            if (this._isIE8)
                this.ul.attr("unselectable", "on");
            var scrollDiv = ej.buildTag("div").append(this.ul);
            $('body').append(this.popupList.append(scrollDiv));
            this._renderLiTags();
            this._setListHeight();
            this._setListWidth();
            this.popupList.ejScroller({ height: this.popupList.height(), width: 0, scrollerSize: 20 });
            this.scrollerObj = this.popupList.ejScroller("instance");
            this.popupList.css("display", "none");
            this._listSize = this.ul.find("li").length;
        },
        _renderLiTags: function () {
            this._disabledItems = [];
            var start, end, timeVal, interval = this.model.interval * 60000;
            // Maintain the min and max time as object;
            var disableTime = (!ej.isNullOrUndefined(this.model.disableTimeRanges) && this.model.disableTimeRanges.length > 0) ? true : false;
            start = this._minTimeObj;
            end = this._maxTimeObj;
            var i = 0;
            while (this._compareTime(end, start, true)) {
                timeVal = this._localizeTime(start);
                var litag = $(document.createElement('li'));
                litag[0].appendChild(document.createTextNode(timeVal));
                if (this._isIE8) litag.attr("unselectable", "on");
                if (disableTime) {
                    if (this._ensureTimeRange(timeVal)) {
                        litag.addClass('e-disable');
                        this._disabledItems.push(i);
                    }
                    else {
                        litag.removeClass('e-disable');
                    }
                }
                this.ul[0].appendChild(litag[0]);
                start = new Date(start).getTime() + interval;
                i++;
            }

            var liTags = this.ul.find("li");
            if (!ej.isTouchDevice()) {
                this._on(liTags, "mouseenter", $.proxy(this._OnMouseEnter, this));
                this._on(liTags, "mouseleave", $.proxy(this._OnMouseLeave, this));
            }
            this._on(liTags, "click", $.proxy(this._OnMouseClick, this));
            if (this.model.showPopupButton || !ej.isNullOrUndefined(this.popupList))
                this.ul.find("li").attr({ 'tabindex': -1, 'aria-selected': false,'role':'option' });
        },
        _ensureTimeRange: function (value) {
            if (!ej.isNullOrUndefined(this.model.disableTimeRanges)) {
                var timeVal = this._makeDateTimeObj(value);
                for (var i = 0; i < this.model.disableTimeRanges.length; i++) {
                    if (+timeVal >= +this._makeDateTimeObj(this.model.disableTimeRanges[i].startTime) && +timeVal <= +this._makeDateTimeObj(this.model.disableTimeRanges[i].endTime))
                        return true;
                }
            }
            return false;
        },
        _initStartEnd: function () {
            this._startTime = [];
            this._endTime = [];
            if (!ej.isNullOrUndefined(this.model.disableTimeRanges)) {
                for (var i = 0; i < this.model.disableTimeRanges.length; i++) {
                    this._startTime[i] = this._makeDateTimeObj(this.model.disableTimeRanges[i].startTime);
                    this._endTime[i] = this._makeDateTimeObj(this.model.disableTimeRanges[i].endTime);
                }
            }
        },
        _makeDateTimeObj: function (value) {
            if (typeof value === "string") {
                var dateFormat = ej.preferredCulture(this.model.locale).calendar.patterns.d;
                var dateValue = ej.format(new Date("1/1/2000"), dateFormat, this.model.locale);
                var obj = ej.parseDate(dateValue + " " + value, dateFormat + " " + this.model.timeFormat, this.model.locale);
                if (!obj) {
                    var isJSONString = new Date(value);
                    if (!isNaN(Date.parse(isJSONString)) && !ej.isNullOrUndefined(value))
                        return this._setEmptyDate(value);
                    else
                        obj = new Date("1/1/2000 " + value);
                }
                return obj;
            }
            else if (value instanceof Date)
                return this._setEmptyDate(value);
            else return null;
        },
        _reRenderDropdown: function () {
            this.ul.empty();
            this._renderLiTags();
            this._refreshScroller();
            this._changeActiveEle();
        },
        _refreshScroller: function () {
            var flag = this.popupList.css("display") == "none" ? true : false;
            this.popupList.css("height", "auto");
            this.popupList.find(".e-content, .e-vscroll").removeAttr("style");
            this.popupList.find(".e-vscroll div").removeAttr("style");

            if (flag) this.popupList.css("display", "block");
            this.scrollerObj.model.height = this.popupList.height();
            this.scrollerObj.model.scrollTop = 0;
            this.scrollerObj.refresh();
            if (this._isIE8) {
                $("#" + this.scrollerObj._id).children('.e-vscroll').children().attr("unselectable", "on");
                $("#" + this.scrollerObj._id).find('.e-vhandle').attr("unselectable", "on");
            }
            if (flag) this.popupList.css("display", "none");
        },

        _removeWatermark: function () {
            if (this.element.val() != "" && !this._isSupport)
                this._hiddenInput.css("display", "none");
        },

        _setListWidth: function () {
            if (this.popupList) {
                var timePopupWidth = this.model.popupWidth,width;
                if ((typeof (timePopupWidth) == "string" && timePopupWidth.indexOf("%") != -1) || typeof (timePopupWidth) == "string") width = parseInt(timePopupWidth) > 0 ? timePopupWidth : "auto" && (this.model.popupWidth = "auto");
                else {
                    width = timePopupWidth > 0 ? timePopupWidth : "auto" && (this.model.popupWidth = "auto");
                }
                if (width && width != "auto") this.popupList.css({ "width": width });
                else this.popupList.css({ "width": this.wrapper.width() });
            }
            if (this.scrollerObj) {
                this._refreshScroller();
                this._updateScrollTop();
            }
        },
        _setListHeight: function () {
            if (this.popupList) this.popupList.css({ "max-height": this.model.popupHeight || "191px" });
            if (this.scrollerObj) {
                this._refreshScroller();
                this._updateScrollTop();
            }
        },
        _updateScrollTop: function () {
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
        },
        _refreshPopup: function () {
            if (this.model.popupWidth == "auto") this.popupList.css({ "width": this.wrapper.width() });
            this._setListPosition();
            this._refreshScroller();
        },

        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.popupList.outerHeight(),
            popupWidth = this.popupList.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popupList.outerWidth() - elementObj.outerWidth();
            this.popupList.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });
        },

        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.popupList);
        },

        _enableMask: function () {
            var flag = false;
            if ((this.model.minTime && this._compareTime(this.model.minTime, this.model.value)) ||
                this.model.maxTime && this._compareTime(this.model.value, this.model.maxTime))
                this.isValidState = false;
            else this.isValidState = true;
            this._setTime(this.model.value);
            (ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
            if (this._getInternalEvents && !this.isValidState) this._trigger("outOfRange");
            this._changeActiveEle();
            this._preVal = this.element.val();
        },
        _setTime: function (time) {
            var modifiedTime = this._localizeTime(time);
            this.element.val(modifiedTime);
            if (this.model.enableStrictMode) {
                this.model.value = (this._compareTime(this.model.value, this.model.minTime, true) && this._compareTime(this.model.maxTime, this.model.value, true)) ? modifiedTime : null;
            } else {
                this.model.value = modifiedTime;
            }
            this._setWaterMark();
        },
        _timeFromISO: function (date) {
            var result = this._extISORegex.exec(date) || this._basicISORegex.exec(date), dateFormat = '', timeFormat = '', zeroFormat = '', format;
            if (result) {
                for (var i = 0; i < this._dates.length; i++) {
                    if (this._dates[i][1].exec(result[1])) {
                        dateFormat = this._dates[i][0];
                        break;
                    }
                }
                if (result[3]) {
                    for (var k = 0; k < this._times.length; k++) {
                        if (this._times[k][1].exec(result[3])) {
                            // result[2] should be 'T' (time) or space
                            timeFormat = (result[2] || ' ') + this._times[k][0];
                            break;
                        }
                    }
                }
                if (result[4]) if (this._zeroRegex.exec(result[4])) zeroFormat = 'Z';
                format = dateFormat + timeFormat + zeroFormat;
                var token = format.match(this._tokens), input, val = [], literal, char;
                for (var j = 0; j < token.length; j++) {
                    var str = token[j];
                    literal = this._checkLiteral(token[j]);
                    var rg = this._numberRegex[literal ? token[j].toLowerCase() : str.length] || new RegExp('^\\d{1,' + str.length + '}');
                    input = date.match(rg);
                    if (input) {
                        if (date.substr(0, date.indexOf(input)) >= 0 && !literal) token[j].indexOf('M') >= 0 ? val.push(parseInt(input[0]) - 1) : val.push(parseInt(input[0]));
                        date = date.slice(date.indexOf(input[0]) + input[0].length);
                    }
                }
                //if you want to get the value in UTC format use the "new Date(Date.UTC.apply(null, val)"
                //return the date object value as exact as given input value
                //new Date(year, month, day, hour, minute, seconds);
                return result[4] == "Z" ? new Date(Date.UTC.apply(null, val)) : new Date(val[0], val[1], val[2], val[3], val[4], val[5]);
            }
            else {
                return new Date(date + "");
            }
        },
        _checkLiteral: function (str) {
            var char = str.toLowerCase();
            return (char == 't' || char == 'z' || char == ':' || char == '-') ? true : false;
        },
        _setMask: function () {
            this.model.value = new Date();
            this._enableMask();
        },

        _validateTimes: function () {
            var validatedformat = this._validateTimeFormat(this.model.timeFormat);
            if (validatedformat) this.model.timeFormat = validatedformat;
            else this.model.timeFormat = "h:mm tt";
            if (!this._isValid(this.model.minTime)) this.model.minTime = "12:00 AM";
            if (!this._isValid(this.model.maxTime)) this.model.maxTime = "11:59 PM";
            if (!this._isValid(this.model.value, true)) this.model.value = null;
            if (!this._checkMinMax(this.model.value) && !this.model.enableStrictMode) {
                if (this.model.minTime && !this._compareTime(this.model.value, this.model.minTime, true))
                    this.model.value = this.model.minTime;
                if (this.model.maxTime && !this._compareTime(this.model.maxTime, this.model.value, true))
                    this.model.value = this.model.maxTime;
            }
            this._validateMinMax();
        },
        _ensureValue: function () {
            if (!this._checkMinMax(this.model.value) && this._isValid(this.model.value, true)) {
                if (!this.model.enableStrictMode) {
                    if (this.model.minTime && !this._compareTime(this.model.value, this.model.minTime, true))
                        this.model.value = this.model.minTime;
                    if (this.model.maxTime && !this._compareTime(this.model.maxTime, this.model.value, true))
                        this.model.value = this.model.maxTime;
                }
                else
                    this.isValidState = false;
            }
        },
        _validateMinMax: function () {
            if (this.model.minTime && this.model.maxTime && this._compareTime(this.model.minTime, this.model.maxTime)) {
                this.model.minTime = this.model.maxTime;
            }
        },
        _checkProperties: function () {
            if (!this.model.enabled) {
                this.model.enabled = true;
                this.disable();
            }
            else if (this.model.enabled && this.element.hasClass("e-disable")) {
                this.model.enabled = false;
                this.enable();
            }
            this._addProperty();
            this._checkAttributes();
        },
        _addProperty: function () {
            this._setRtl(this.model.enableRTL);
            this._setRoundedCorner(this.model.showRoundedCorner);
        },
        _setRtl: function (boolean) {
            if (boolean) {
                this.wrapper.addClass("e-rtl");
                if (this.popupList) this.popupList.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                if (this.popupList) this.popupList.removeClass("e-rtl");
            }
        },
        _setRoundedCorner: function (boolean) {
            if (boolean) {
                this.container.addClass("e-corner");
                if (this.popupList) this.popupList.addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                if (this.popupList) this.popupList.removeClass("e-corner");
            }
        },
        _showButton: function (show) {
            this.model.showPopupButton = show;
            if (show) {
                this.container.addClass("e-padding");
                this._renderTimeIcon();
                this._renderDropdown();
                this._addProperty();
            }
            else {
                this.container.removeClass("e-padding");
                this.timeIcon.remove();
                this.popupList.remove();
                this.timeIcon = this.popupList = null;
                $(document).off("mousedown", $.proxy(this._OnDocumentClick, this));
            }
        },
        _checkAttributes: function () {
            if (!this.element.attr("name"))
                this.element.attr({ "name": this.element[0].id });
            if ('ondragstart' in document.createElement('input'))
                this.element.attr({ "ondragstart": "return false" });
            if ('draggable' in document.createElement('input'))
                this.element.attr({ "draggable": "false" });
        },

        _getAmPm: function () {
            var dateObj = new Date();
            dateObj.setHours(0);
            this.ttAM = $.trim(this._localizeMeridian(dateObj));
            dateObj.setHours(23);
            this.ttPM = $.trim(this._localizeMeridian(dateObj));
        },

        _setDimentions: function () {
            if (!this.model.height) this.model.height = this.element.attr("height"); if (!this.model.width) this.model.width = this.element.attr("width");
            this._setHeight(this.model.height);
            if (this.model.width) this.wrapper.width(this.model.width);
        },
        _setHeight: function (height) {
            if (height) this.wrapper.height(height);
            if (this._isIE7) this.element.height(this.container.height());
        },

        _validateTimeFormat: function (timeFormat) {
            var parts = timeFormat.split(" "), format = "";
            if (parts.length == 1 || parts.length == 2) {
                $(parts).each(function (i, part) {
                    format += $.trim(part) + " ";
                });
                return $.trim(format);
            }
            else return null;
        },

        _getSeperator: function () {
            var p = this._getElePlace(), formats = this._formatparts[p.time];
            var regex = new RegExp("^[a-zA-Z0-9]+$");

            for (var i = 0; i < formats.length; i++) {
                if (!regex.test(formats.charAt(i))) return formats.charAt(i);
            }
        },

        _checkInComplete: function () {
            var pos = this._getCaretSelection(), cursor = this._getStartEnd(pos);
            var replace = "00", selected = this._getSelectedValue(cursor), category = this._getCategory(cursor);
            if (pos.end - pos.start == this.element.val().length) this._checkAll();

            if (category && category != "tt") {
                this._findCategoryPosition(category);
                if (selected == "__") {
                    if (category == "h" || category == "hh") replace = "12";
                    this._changeToDefault(replace);
                }
                else if (category.length != 1 && selected.length == 1) {
                    selected = this._changeWhole(selected);
                    this.element.val(this._replaceAt(this.target.value, this.start, this.end, selected));
                }
            }
        },
        _checkAll: function () {
            var i, p = this._getElePlace(), categories = this._formatparts[p.time].split(this.seperator);
            for (i = 0; i < categories.length; i++) {
                this._findCategoryPosition(categories[i]);
                var selected = this._getSelectedValue({ start: this.start, end: this.end });

                if (categories[i].length != 1 && selected.length == 1) {
                    selected = this._changeWhole(selected);
                    this.element.val(this._replaceAt(this.element.val(), this.start, this.end, selected));
                }
            }
        },

        _changeToDefault: function (replace) {
            this.incomplete = true;
            var preVal = this.element[0].value
            this.element[0].value = this._replaceAt(this.target.value, this.start, this.end, replace);
            var timeValue = this._checkExceedRange(this.target.value);
            if (!!timeValue) {
                this._setTime(this.model[timeValue]);
            }
            this._setSelection(this.start, this.end);
            this._raiseChangeEvent(preVal);
        },

        _setSelection: function (start, end) {
            var element = this.element[0];

            if (element.setSelectionRange)
                element.setSelectionRange(start, end);
            else if (element.createTextRange) {
                // For lower version browsers (IE8, IE7 ...)
                element = element.createTextRange();
                element.collapse(true);
                element.moveEnd('character', end);
                element.moveStart('character', start);
                element.select();
            }
        },

        _getSelectedValue: function (cursor) {
            return this.target.value.substring(cursor.start, cursor.end);
        },

        _getMinMax: function (currPart, keydown) {
            if (currPart == "hh" || currPart == "h") {
                this.min = 1; this.max = 11;
                if (keydown) this.max = 12;
            }
            else if (currPart == "HH" || currPart == "H") {
                this.min = 0; this.max = 23;
            }
            else if (currPart == "mm" || currPart == "m" || currPart == "ss" || currPart == "s") {
                this.min = 0; this.max = 59;
            }
        },

        _focusElement: function () {
            this._manualFocus = true;
            this.element.focus();
        },
        _targetFocus: function (e) {
            this._clearRange();
            e.preventDefault();
            this.focused = true;
            this.element.on('mousewheel DOMMouseScroll', $.proxy(this._mouseWheel, this));
            this.wrapper.addClass("e-focus").removeClass("e-error").attr('aria-invalid', "false");
            this._getExactPostions();
            if (!this._manualFocus) {
                this._findCategoryPosition(this._getLeast(false));
                this._setSelection(this.start, this.end);
            }
            this._manualFocus = false;
            this._prevTimeVal = this.element.val();
            this._raiseEvent("focusIn");
            this.wrapper.addClass('e-valid');
            if (!this.model.showPopupButton) this._showResult();
            if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
        },
        _targetBlur: function () {
            this.focused = false;
            this.element.off('mousewheel DOMMouseScroll', $.proxy(this._mouseWheel, this));
            if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
            this.wrapper.removeClass("e-focus");
            if (!this.model.enableStrictMode) {
                // To remove the min value mask while focusout the timepicker.
                if (this.target.value.indexOf('_') > -1) this.element.val('');
            }
            if (!this._checkMinMax(this.target.value) && this._isValid(this.target.value, true)) {
                if (!this.model.enableStrictMode) {
                    if (this.model.minTime && !this._compareTime(this._createObject(this.target.value), this.model.minTime, true))
                        this.element.val(this.model.minTime);
                    if (this.model.maxTime && !this._compareTime(this.model.maxTime, this._createObject(this.target.value), true))
                        this.element.val(this.model.maxTime);
                    if (!this._isValid(this.model.value, true))
                        this.element.val(null);
                    this.isValidState = true;
                    (ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
                }
                else
                    this.isValidState = false;
            }
            else this.isValidState = true;
            this._ensureValue();
            this._raiseChangeEvent();
            this._checkErrorClass();
            this._raiseEvent("focusOut");
            if (!this.model.enableStrictMode) this._checkInComplete();
            (ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid') : this.wrapper.addClass('e-valid');
        },
        _clearRange: function () {
            var input = this.element[0];
            if (!isNaN(input.selectionStart)) {
                input.selectionStart = 0;
                input.selectionEnd = 0;
            }
        },
        _checkErrorClass: function () {
            if (this.isValidState) this.wrapper.removeClass("e-error").attr('aria-invalid', "false");
            else this.wrapper.addClass("e-error").attr('aria-invalid', "true");
        },

        _getExactPostions: function(){
            var timeFormat = this.model.timeFormat;
            var tempParts = this.model.timeFormat.split(" ");
            this._formatparts= []; this._valueparts = [];
            this._amPMPosition = timeFormat.match("([t][t]+)") ?timeFormat.match("([t][t]+)").index : null ;
            if(this._amPMPosition == undefined){
                this._formatparts= this.model.timeFormat.split(" "); 
                this._valueparts = this.element.val().split(" ");
                this._noTT = true;
            }
            else{
                if(this._amPMPosition == this.model.timeFormat.length - 2){
                    this._ttAtEnd = true;
                    this._isSpace = this.model.timeFormat[this.model.timeFormat.split("").indexOf("t") - 1] == " ";
                }
                else {
                    this._ttAtEnd = false;
                    this._isSpace = this.model.timeFormat[this.model.timeFormat.split("").indexOf("t") + 2] == " ";
                }

                if(this._ttAtEnd == true){
                    this._ttStartPostion = this.model.timeFormat.match("([t]?[t]+)").index; this._ttEndPosition = this.model.timeFormat.length;
                    this._formatStartPosition = 0; 
                    var difference = 0;
                    if(this.element && this.element.val()){
                        difference = this.element.val().length - this.model.timeFormat.length;
                    }
                    this._updatedttStartPosition = this._ttStartPostion + difference;
                    this._formatEndPostion= this.model.timeFormat.match("([t][t]+)").index;
                    this._formatparts[0] = this.model.timeFormat.substr(this._formatStartPosition, this._formatEndPostion).trim();
                    this._formatparts[1] = this.model.timeFormat.substr(this._ttStartPostion,this._ttEndPosition).trim();
                    this._valueparts[0] = this.element.val().substr(this._formatStartPosition, this._formatEndPostion + difference).trim();
                    this._valueparts[1] = this.element.val().substr(this._ttStartPostion + difference, this._ttEndPosition).trim();
                }
                else{
                    this._ttStartPostion = 0; this._ttEndPosition = this.model.timeFormat.match("([t]?[t]+)") ? this._ttStartPostion + this.model.timeFormat.match("([t]?[t]+)")[0].length: 0;
                    this._formatStartPosition = this._isSpace ? this._ttEndPosition + 1: this._ttEndPosition; 
                    this._formatEndPostion= this.model.timeFormat.length;
                    this._formatparts[1] = this.model.timeFormat.substr(this._formatStartPosition, this._formatEndPostion).trim();
                    this._formatparts[0] = this.model.timeFormat.substr(this._ttStartPostion,this._ttEndPosition).trim();
                    this._valueparts[1] = this.element.val().substr(this._formatStartPosition, this._formatEndPostion).trim();
                    this._valueparts[0] = this.element.val().substr(this._ttStartPostion, this._ttEndPosition).trim();
                }
            }
        },

        _getCaretSelection: function () {
            var input = this.element[0], start = 0, end = 0;
            if (!isNaN(input.selectionStart)) {
                start = input.selectionStart;
                end = input.selectionEnd;
                return { start: Math.abs(start), end: Math.abs(end) };
            }
            // For lower version browsers (IE8, IE7 ...)
            var bookmark = document.selection.createRange().getBookmark();
            var selection = input.createTextRange();
            selection.moveToBookmark(bookmark);

            var before = input.createTextRange();
            before.collapse(true);
            before.setEndPoint("EndToStart", selection);
            var beforeLength = before.text.length, selLength = selection.text.length;
            return { start: beforeLength, end: beforeLength + selLength };
        },

        _mouseDownOnInput: function (e) {
            if (!this.focused && (!ej.isTouchDevice())) this._focusElement();
             this._getExactPostions();
            this.downPosition = this._getCaretSelection();
            $(document).on("mouseup", $.proxy(this._mouseUpOnInput, this));
        },

        _mouseUpOnInput: function (e) {
            e.preventDefault();
            $(document).off("mouseup", $.proxy(this._mouseUpOnInput, this));
            var pos = this._getCaretSelection();

            if (this.incomplete) {
                this.incomplete = false;
                pos = this.downPosition;
            }
            // Select the Complete Time value using mouse.            
            if (this.target.value != this._getSelectedText()) {
                pos = this._getStartEnd(pos);
                this._setSelection(pos.start, pos.end);
            }
        },

        _getCategoryPosition: function (category) {
            var s = 0, e = 0, parts = this._getTimeParts(), p = this._getElePlace(), sep = this.seperator, valid = false;
            var fParts = this._getFormatParts()[p.time].split(sep);
            var tParts = parts[p.time].split(sep);
            if (fParts.length > tParts.length) return { start: s, end: e, isValid: valid };

            if (category == "tt") {
                if (parts[p.tt] == this.ttAM || parts[p.tt] == this.ttPM) {
                    if (p.tt == 0) s = 0;
                    else s = parts[p.time].length + 1;
                    e = s + parts[p.tt].length;
                    if(!this._isSpace && this._ttAtEnd){
                        s = s -1;
                        e = e-1;
                    } 
                    valid = true;
                }
            }
            else {
                if (p.time == 0) s = 0;
                else s = parts[p.tt].length + 1;

                var index = fParts.indexOf(category);
                if (index != -1) {
                    for (var i = 0; i < fParts.length; i++) {
                        e = tParts[i].length + 1;
                        if (i == index) break;
                        else s += e;
                    }
                    e += s - 1;
                    if(!this._noTT && !this._isSpace && !this._ttAtEnd){
                        s = s -1;
                        e = e-1;
                    } 
                    valid = true;
                }
            }
            return { start: s, end: e, isValid: valid };
        },
        _getCategory: function (cursor) {
            var parts = this._getFormatParts(), sep = this.seperator;
            var p = this._getElePlace();
            if (cursor.isTT) return parts[p.tt];
            else return parts[p.time].split(sep)[cursor.index];
        },

        _getTimeParts: function(){
            if(this.model.timeFormat == "h:mm tt" || this.model.timeFormat == "h:m tt" || this.model.timeFormat == "hh:m tt" || this.model.timeFormat == "hh:mm:s tt"){
                var parts = this.element.val().split(" ");
            }
            else var parts = this._valueparts;
            return parts;
        },

        _getFormatParts: function(){
            if(this.model.timeFormat == "h:mm tt" || this.model.timeFormat == "h:m tt" || this.model.timeFormat == "hh:m tt" || this.model.timeFormat == "hh:mm:s tt"){
                var formatparts = this.model.timeFormat.split(" ");;
            }
            else var formatparts = this._formatparts;
            return formatparts;
        },

        _getStartEnd: function (pos) {
            this._getExactPostions();
            var tt, sep = this.seperator;
            var value = this.element.val(), parts = this._valueparts, s = 0, e = 0, place = tt = null, i, j;
            
            for (j = 0; j < parts.length; j++) {
                if (parts[j] != this.ttAM && parts[j] != this.ttPM) {
                    var time = parts[j].split(sep), tempS = s, tempE = s + time[0].length;
                    for (i = 0; i < time.length; i++) {
                        e = time[i].length + s;
                        if(!this._isSpace && this._ttAtEnd && pos.start >= this._updatedttStartPosition && pos.end <=  this._ttEndPosition
                            && this._formatparts[0].split(this._getSeperator())[1].length == this._valueparts[0].split(this._getSeperator())[1].length) {
                            s += time[i].length + 1;
                            continue;
                        }
                        if (pos.start <= e) {
                            place = i;
                            tt = false;
                            j = parts.length;
                            break;
                        }
                        else s += time[i].length + 1;
                    }
                }
                else {
                    if (!this._isSpace && !this._ttAtEnd ? pos.start < s + parts[j].length : pos.start <= s + parts[j].length) {
                        e = parts[j].length + s;
                        place = 0;
                        tt = true;
                        j = parts.length;
                        if(!this._isSpace && this._ttAtEnd){
                            s = s-1;
                            e = e-1;
                        }
                        break;
                    }
                    else s += parts[j].length + 1;
                    if(!this._isSpace && !this._ttAtEnd) s = s -1;
                }
            }
            if (place == null) s = tempS, e = tempE, place = 0, tt = false;

            return { start: s, end: e, index: place, isTT: tt };
        },

        _modifyValue: function (isIncrement) {
            if (!this._isValid(this.target.value)) return;
            if (!this.model.enableStrictMode) this._checkInComplete();
            var pos = this._getCaretSelection(), cursor;
            if (pos.start == pos.end) {
                var cate = this._getLeast(true);
                var position = this._getCategoryPosition(cate);
                cursor = this._getStartEnd(position);
            }
            else cursor = this._getStartEnd(pos);
            this.start = cursor.start; this.end = cursor.end;
            this._changeValue(cursor, isIncrement);
        },

        _keyUpOnInput: function (e) {
            e.preventDefault();
            if (this._preVal != this.element.val()) {
                this._preVal = this.element.val();
            }
            var proxy = this;
            var pos = this._getCaretSelection();
            var cursor = this._getStartEnd(pos);
            var category = this._getCategory(cursor);
            proxy = this;
            var currSelection = this._getSelectedValue(cursor);
            var spl = this.element.val();
            spl.split(":");
            if (spl[0] < 3)
                if (isNaN(spl[0] + spl[1]) == true && (spl[0]) < 10)
                    this._poschange = true;
                else
                    this._poschange = false;

            if (((category == 'h') && (pos.start == 2 && pos.end == 2) && (currSelection > 9 && currSelection < 13)) || ((category == 'H') && (currSelection > 9 && currSelection < 24)) || ((category == 'H') && (currSelection < 9) && (pos.start == 2 && pos.end == 2)) || (category == "mm" && this._poschange == true && (pos.start == 4 && pos.end == 4)) || (category == "ss" && (pos.start == 8 && pos.end == 8)) || (category == "ss" && this._poschange == true && (pos.start == 7 && pos.end == 7)) || (category == 'mm' && (pos.start == 5 && pos.end == 5))) {
                if (!((category == 'mm' && (this.model.timeFormat == "HH:mm" || this.model.timeFormat == "hh:mm" || this.model.timeFormat == "H:mm" || this.model.timeFormat == "h:mm")) || (category == "ss" && (this.model.timeFormat == "HH:mm:ss" || this.model.timeFormat == "hh:mm:ss" || this.model.timeFormat == "H:mm:ss" || this.model.timeFormat == "h:mm:ss"))))
                    this._movePosition(pos, null);
            }
            else if (((category == 'hh' || category == 'HH') && (pos.start && pos.end == 2)) && (currSelection < 24)) {
                this._movePosition(pos, null);
            }
        },

        _getNextCategory: function (cate, direction) {
            var categories = [], sep = this.seperator;
            var fParts = this._getFormatParts();
            $(fParts).each(function (i, part) {
                if (part == "tt") categories.push(part);
                else {
                    var inner = part.split(sep);
                    categories = inner.concat(categories);
                }
            });
            var index = categories.indexOf(cate), ix;
            if (index != -1) {
                if (direction) {
                    if (index == 0) ix = categories.length - 1;
                    else ix = index - 1;
                }
                else {
                    if (index == categories.length - 1) ix = 0;
                    else ix = index + 1;
                }
                return categories[ix];
            }
            return cate;
        },
        _getElePlace: function () {
            this._getExactPostions();
            var fParts = this._getFormatParts(), time, tt;
            if (fParts[0] == "tt") time = 1, tt = 0;
            else time = 0, tt = 1;
            return { time: time, tt: tt };
        },
        _movePosition: function (pos, direction) {
            var cursor = this._getStartEnd(pos);
            var currCate = this._getCategory(cursor);
            if (!currCate) currCate = this._getLeast(direction);
            var next = this._getNextCategory(currCate, direction);
            var cursor = this._getCategoryPosition(next);

            if (cursor.isValid) {
                this._setSelection(cursor.start, cursor.end);
            }
        },
        _findActiveIndex: function () {
            var elements = this.ul.find("li");
            var currTime = this.element.val(), firstTime = elements.first().html(), index;
            index = (this._parse(currTime) - this._parse(firstTime)) / (this.model.interval * 60000);
            index = Math.round(index);
            this._activeItem = (index == elements.length) ? index : index + 1;
            if (this._activeItem < 0 || this._activeItem > elements.length || isNaN(this._activeItem)) this._activeItem = 0;
        },
        _keyDownOnInput: function (e) {
            if (this.model.readOnly && !this._readOnlyKeys(e)) return false;
            var pos, cursor, category, key = e.keyCode, activeItem, prevActiveItem;

            // _getInternalEvents is set to true when TimePicker used inside DateTimePicker control
            // in DateTimePicker control it allows Up, Down, Home, End, Tab keys only
            if (this._getInternalEvents && key != 38 && key != 40 && key != 36 && key != 35 && key != 9) return false;
            // Up, Down, Esc
            if (!this.model.enableStrictMode) {
                // Prevent type operation on popup open in state.
                if (this.showDropdown && key != 38 && key != 40 && key != 27 && !this._readOnlyKeys(e)) return false;
                else if (this.showDropdown && (key == 37 || key == 39)) e.keyCode = (key == 37) ? 38 : 40;
            }
            pos = this._getCaretSelection();
            cursor = this._getStartEnd(pos);
            category = this._getCategory(cursor);
            switch (e.keyCode) {
                case 38:
                    e.preventDefault();
                    if (!this.showDropdown) {
                        if (this._isValid(this.target.value)) this._modifyValue(true);
                    }
                    else if (this.showDropdown) {
                        e.preventDefault();
                        this._findActiveIndex();
                        prevActiveItem = this._activeItem;
                        this._activeItem = this._disableItemSelectUp(this._activeItem - 1);
                        if (this._activeItem == 0) this._activeItem = prevActiveItem;
                        this._addListHover();
                        activeItem = this._getActiveItem();
                        if (activeItem.length) this._selectTimeItem(activeItem);
                    }
                    break;
                case 40:
                    e.preventDefault();
                    if (e.altKey && this.model.showPopupButton)
                        this._showhidePopup();
                    else if (!this.showDropdown) {
                        if (this._isValid(this.target.value)) this._modifyValue(false);
                    }
                    else if (this.showDropdown) {
                        e.preventDefault();
                        this._findActiveIndex();
                        prevActiveItem = this._activeItem;
                        this._activeItem = this._disableItemSelectDown(this._activeItem);
                        if (this._activeItem < this._listSize) this._activeItem += 1;
                        else
                            this._activeItem = prevActiveItem;
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 37:
                    e.preventDefault();
                    if (pos.start == pos.end) this._setSelection(pos.start - 1, pos.start - 1);
                    else this._movePosition(pos, true);
                    break;
                case 39:
                    e.preventDefault();
                    if (pos.start == pos.end) this._setSelection(pos.start + 1, pos.start + 1);
                    else this._movePosition(pos, false);
                    break;

                case 36:
                    // Home key 
                    e.preventDefault();
                    if (!this.showDropdown) {
                        var homecate = this._firstlastVal(true);
                        var hPos = this._getCategoryPosition(homecate);
                        if (hPos.isValid) this._setSelection(hPos.start, hPos.end);
                    }
                    else {
                        this._activeItem = 0;
                        prevActiveItem = this._activeItem;
                        this._activeItem = this._disableItemSelectDown(this._activeItem);
                        if (this._activeItem < this._listSize) this._activeItem += 1;
                        else
                            this._activeItem = prevActiveItem;
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 35:
                    // End key
                    e.preventDefault();
                    if (!this.showDropdown) {
                        var endcate = this._firstlastVal(false);
                        var ePos = this._getCategoryPosition(endcate);
                        if (ePos.isValid) this._setSelection(ePos.start, ePos.end);
                    }
                    else {
                        this._activeItem = this._listSize + 1;
                        prevActiveItem = this._activeItem;
                        this._activeItem = this._disableItemSelectUp(this._activeItem - 1);
                        if (this._activeItem == 0) this._activeItem = prevActiveItem;
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 9:
                    if (this._getInternalEvents) break;
                    this._hideResult();
                    var flag = null;
                    if (e.shiftKey && pos.start > 0) flag = true;
                    else if (!e.shiftKey && pos.end < this.element.val().length) flag = false;
                    if (flag != null) {
                        e.preventDefault();
                        this._checkInComplete();
                        this._movePosition(pos, flag);
                    }
                    break;
                case 13:
                    if (!this.showDropdown) {
                        this._raiseChangeEvent();
                        break;
                    }
                case 27:
                    e.preventDefault();
                    this._hideResult();
                    break;
                case 8:
                case 46:
                    if (this.model.enableStrictMode) return;
                    if (this.target.value != this._getSelectedText()) {
                        e.preventDefault();
                        if (category && category != "tt") {
                            this._findCategoryPosition(category);
                            var _doBackspace = (key == 8 && pos.start != this.start), _doDelete = (key == 46 && pos.end != this.end), len;
                            len = this.end - this.start;

                            if ((pos.start != pos.end || len == 1) && (_doBackspace || _doDelete || pos.start != pos.end)) {
                                var s1 = this.start, s2 = this.end, te;
                                this.element[0].value = this._replaceAt(this.target.value, s1, s2, "__");
                                te = (s2 - s1 != 2) ? s2 + 1 : s2;
                                this._setSelection(s1, te);
                            }
                            else {
                                if (_doBackspace) {
                                    this.element[0].value = this._replaceAt(this.target.value, pos.start - 1, pos.start, "");
                                    this._setSelection(pos.start - 1, pos.start - 1);
                                }
                                else if (_doDelete) {
                                    this.element[0].value = this._replaceAt(this.target.value, pos.end, pos.end + 1, "");
                                    this._setSelection(pos.end, pos.end);
                                }
                            }
                        }

                    }
                    break;

            }

            var currSelection = this._getSelectedValue(cursor);
            var unicode = e.keyCode ? e.keyCode : e.charCode, actualkey;

            if (e.keyCode > 47 && e.keyCode < 58)
                actualkey = String.fromCharCode(unicode);
            else if (e.keyCode > 95 && e.keyCode < 106)
                actualkey = String.fromCharCode(unicode - 48);
            if (category == "tt" && ((!e.shiftKey && !e.ctrlKey && !e.altKey) && (e.keyCode > 64 && e.keyCode < 91) || (e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106))) {
                e.preventDefault();
                var ttPos = this._getCategoryPosition(category);
                this.start = ttPos.start;
                this.end = ttPos.end;
                this._changeAmPm(currSelection);
                this._raiseChangeEvent();
            }

            // Select complete text and then press time value in the textbox               
            if (this.target.value == this._getSelectedText() && (!e.shiftKey && !e.ctrlKey && !e.altKey)) {
                if (e.keyCode > 64 && e.keyCode < 91 && !this.model.enableStrictMode) e.preventDefault();
                if ((e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106)) {
                    var cursor = this._getStartEnd(pos);
                    this._setSelection(cursor.start, cursor.end);
                }
            }

            if ((!e.shiftKey && !e.ctrlKey && !e.altKey) && (e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106)) {
                if (category != "tt") {
                    this._getMinMax(category, true);
                    if (pos.start == pos.end) {
                        this._findCategoryPosition(category);
                        var newVal;
                        if (pos.start == this.start) {
                            newVal = actualkey + currSelection;
                            if (this.model.enableStrictMode == false) {
                                this._validateTimes();
                                this._targetBlur();
                            }
                            if (this.model.value == null) this.element.val(this.model.minTime);
                            var cursor = this._getStartEnd(pos);
                            this._setSelection(cursor.start, cursor.end);
                        }
                        else {
                            newVal = currSelection + actualkey;
                        }
                        if (newVal.length > 2 || !(Number(newVal) >= this.min && this.max >= Number(newVal))) {
                            !this.model.enableStrictMode && e.preventDefault();
                        }
                    }
                    else if (!(Number(actualkey) >= this.min && this.max >= Number(actualkey))) {
                        !this.model.enableStrictMode && e.preventDefault();
                    }
                }
            }
            else if (!this._allowKeyCodes(e)) {
                !this.model.enableStrictMode ? (e.keyCode == 8 || e.keyCode == 46) ? e.stopPropagation() : e.preventDefault() : e.stopPropagation();
            }
        },

        _getSelectedText: function (e) {
            if (window.getSelection) {
                var element = $('#' + this.element[0].id).get(0);
                return element.value.substring(element.selectionStart, element.selectionEnd);
            }
                // For IE
            else return document.selection.createRange().text;
        },
        _allowKeyCodes: function (e) {
            if ((e.ctrlKey && (e.keyCode == 65 || e.keyCode == 67 || e.keyCode == 90 || e.keyCode == 89))
                || e.keyCode == 9 || e.keyCode == 116 || e.keyCode == 13)
                return true;
            return false;
        },
        _readOnlyKeys: function (e) {
            if (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || this._allowKeyCodes(e))
                return true;
            return false;
        },

        _firstlastVal: function (initial) {
            var parts = this._getFormatParts(), sep = this.seperator;
            if (initial) {
                if (parts[0] != "tt") return parts[0].split(sep)[0];
                return "tt";
            }
            else {
                if (parts[0] != "tt") return "tt";
                else if (parts[1]) {
                    var lastItem = parts[1].split(sep);
                    return lastItem.length ? lastItem[lastItem.length - 1] : "tt";
                }
                return "tt";
            }
        },

        _mouseWheel: function (event) {
            event.preventDefault();
            if (this.model.readOnly) return false;
            var delta, rawEvent = event.originalEvent;
            if (rawEvent.wheelDelta) {
                // IE and Opera use wheelDelta, which is a multiple of 120 (possible values -120, 0, 120).
                delta = rawEvent.wheelDelta / 120;
                // In Opera, value is negated.
                //if (Sys.Browser.agent === Sys.Browser.Opera) delta = -delta;
            }
            else if (rawEvent.detail) {
                // Firefox uses detail property, which is a multiple of 3.
                delta = -rawEvent.detail / 3;
            }
            if (delta > 0)
                this._modifyValue(true);
            else if (delta < 0)
                this._modifyValue(false);
        },

        _addListHover: function () {
            this._addSelected();
            this._updateScrollTop();
        },
        _addSelected: function () {
            this.ul.find("li").removeClass("e-active e-hover");
            var activeItem = this._getActiveItem();
            if (activeItem.length && !activeItem.hasClass('e-disable'))
                activeItem.addClass('e-active');
        },
        _disableItemSelectDown: function (current) {
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if ($.inArray(current, this._disabledItems) < 0)
                    return current;
                else
                    return this._disableItemSelectDown(current + 1);
            }
            else return this._listSize;
        },

        _disableItemSelectUp: function (current) {
            current = current - 1;
            if (current == null || current < 0) current = 0;
            if (current < this._listSize) {
                if ($.inArray(current, this._disabledItems) < 0)
                    return current + 1;
                else if (current > 0)
                    return this._disableItemSelectUp(current);
            }
            return 0;
        },
        _getActiveItem: function () {
            return $(this.ul.find("li")[this._activeItem - 1]);
        },

        _timeIconClick: function (event) {
            if (ej.isNullOrUndefined(this.popupList)) {
                this._renderDropdown();
                this._addProperty();
            };
            var isRightClick = false;
            if (event.button)
                isRightClick = (event.button == 2);
            else if (event.which)
                isRightClick = (event.which == 3); //for Opera
            if (isRightClick) return;
            event.preventDefault();
            if (!this.model.enabled || this.model.readOnly || this.ul.find("li").length < 1) return false;
            this._showhidePopup();
            var len = this.element.val().length;
            if (!ej.isTouchDevice()) this._setSelection(len, len);
        },
        _showhidePopup: function () {
            if (this._getInternalEvents) return false;
            if (!this.showDropdown)
                this._showResult();
            else
                this._hideResult();
        },
        _showResult: function () {
            if (this.popupList == null) this._renderDropdown();
            if (this._raiseEvent("beforeOpen")) return false;
            if (!this.focused && (!ej.isTouchDevice())) this._focusElement();
            if (this.model.value) this._changeActiveEle();
            else
                this.ul.find("li").removeClass("e-active");

            var proxy = this, sTop = this._visibleAndCalculateTop();
            this.popupList.slideDown(this.model.enableAnimation ? 200 : 0, function () {
                $(document).on("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
            });
            this.scrollerObj.setModel({ "scrollTop": sTop });
            this.showDropdown = true;
            this._listSize = this.ul.find("li").length;
            $(window).on("resize", $.proxy(this._OnWindowResize, this));
            this._on(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
            this._on(ej.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
            this._raiseEvent("open");
            this.wrapper.addClass("e-active");
        },
        _hideResult: function (e) {
            if (this._raiseEvent("beforeClose")) return false;
			if ( e && (e.type == "touchmove" || e.type== "scroll")) {
				if ($(e.target).parents("#"+this.popupList[0].id).length > 0)
			   return;
			}           
			if (this.showDropdown && !this._getInternalEvents) {
			this.showDropdown = false;
			this.popupList.slideUp(this.model.enableAnimation ? 100 : 0);
			$(document).off("mousedown", $.proxy(this._OnDocumentClick, this));
			$(window).off("resize", $.proxy(this._OnWindowResize, this));
			this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
			this._off(ej.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
			this._raiseEvent("close");
			this.wrapper.removeClass("e-active");
            }
        },

        _visibleAndCalculateTop: function () {
            this.popupList.css({ "display": "block" });
            var scrollTop = this._calcScrollTop();
			this._refreshPopup();
            this.popupList.css({ "display": "none" });
            return scrollTop;
        },
        _calcScrollTop: function () {
            var ulH = this.ul.outerHeight(), liH = this.ul.find("li").outerHeight(), index, top;
            index = this.ul.find("li.e-active").index();
            top = (liH * index) - ((this.popupList.outerHeight() - liH) / 2);
            return top;
        },
        _changeActiveEle: function () {
            if (!this.popupList) return false;
            var elements = this.ul.find("li");
            var currTime = this.element.val(), firstTime = elements.first().html(), index;
            index = (this._parse(currTime) - this._parse(firstTime)) / (this.model.interval * 60000);
            index = Math.round(index);
            this._activeItem = (index == elements.length) ? index : index + 1;
            if (this._activeItem < 0 || this._activeItem > elements.length || isNaN(this._activeItem) || this._ensureTimeRange(currTime)) this._activeItem = 0;
            this._addListHover();
        },

        _OnDocumentClick: function (e) {
            if (!$(e.target).is(this.popupList) && !$(e.target).parents(".e-time-popup").is(this.popupList) &&
                !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-timewidget").is(this.wrapper)) {
                this._hideResult();
            }
            else if ($(e.target).is(this.popupList) || $(e.target).parents(".e-time-popup").is(this.popupList))
                e.preventDefault();
        },
        _OnWindowResize: function (e) {
            this._refreshPopup();
        },

        _OnMouseEnter: function (e) {
            var targetEle = e.target;
            this.ul.find("li").removeClass("e-hover");
            if (!$(targetEle).hasClass('e-disable'))
                $(targetEle).addClass("e-hover");
        },
        _OnMouseLeave: function (e) {
            if (!this._dateTimeInternal || this.model.value)
                this.ul.find("li").removeClass("e-hover");
        },
        _OnMouseClick: function (e) {
            e.preventDefault();
            if ($(e.target).hasClass('e-disable')) return;
            if (this.model.enabled && !this.model.readOnly) {
                this._activeItem = $(e.target).index() + 1;
                this.ul.find("li").attr({ 'tabindex': -1, 'aria-selected': false });
                $(e.target).attr({ 'aria-selected': true, 'tabindex': 0 });
                this._addSelected();
                this._selectTimeItem($(e.target));
            }
            this._showhidePopup();
        },
        _selectTimeItem: function (ele) {
            this._beforeChange(ele);
            var flag = this._raiseChangeEvent();
            if (flag)
                this._trigger("select", { value: this.model.value, prevTime: this._previousValue });
        },

        _findCategoryPosition: function (category) {
            if (category == "least") category = this._getLeast(true);
            var pos = this._getCategoryPosition(category);
            this.start = pos.start;
            this.end = pos.end;
        },

        _getLeast: function (lower) {
            var formats = this._getFormatParts(), sep = this.seperator, res = null;
            $(formats).each(function (i, e) {
                if (e != "tt") {
                    var times = e.split(sep);
                    if (lower) res = times[times.length - 1];
                    else res = times[0];
                }
            });
            return res;
        },

        _changeValue: function (cursor, isIncrement) {
            var preVal = this.target.value, currValue, category = this._getCategory(cursor);
            if (!category) return false;
            this._setSelection(this.start, this.end);
            currValue = this.target.value.substring(this.start, this.end);
            if (this._checkMinMax(this.target.value)) {
                if (currValue != this.ttAM && currValue != this.ttPM) {
                    currValue = this._changeCurrentValue(currValue, category, isIncrement);
                    if (category.length != 1) currValue = this._changeWhole(currValue);
                    this._findCategoryPosition(category);
                    this.element.val(this._replaceAt(this.target.value, this.start, this.end, currValue));
                    this.end = this.start + currValue.toString().length;
                    this._setSelection(this.start, this.end);
                    if (this._ensureTimeRange(this.target.value) && this._checkMinMax(this.target.value)) {
                        var timeObject = this._createObject(this.target.value);
                        var hour = timeObject.getHours();
                        var fromTime = isIncrement ? this._startTime : this._endTime;
                        var toTime = isIncrement ? this._endTime : this._startTime;
                        if (!ej.isNullOrUndefined(this.model.disableTimeRanges)) {
                            for (var i = 0; i < this.model.disableTimeRanges.length; i++) {
                                if ((fromTime[i].getHours() === hour) || ((+timeObject >= +this._startTime[i]) && +timeObject <= +this._endTime[i])) {
                                    this.target.value = this._localizeTime(toTime[i]);
                                    this._findCategoryPosition(category);
                                    this._setSelection(this.start, this.end);
                                    this._changeValue(cursor, isIncrement);
                                }
                            }
                        }
                    }
                }
                else this._changeAmPm(currValue);
            }
            else {
                var timeValue = this._checkExceedRange(this.target.value);
                this._setTime(this.model[timeValue]);
                this._findCategoryPosition(category);
                this._setSelection(this.start, this.end);
            }
            if (!this._checkMinMax(this.target.value)) {
                this.element.val(this.model.value);
                this._findCategoryPosition(category);
                this._setSelection(this.start, this.end);
            }
            else this._raiseChangeEvent();
        },

        _checkMinMax: function (value) {
            var res = this._checkExceedRange(value);
            if (res == null) res = false;
            return !res;
        },
        _checkExceedRange: function (value) {
            if (value) {
                if (this.model.minTime && !this._compareTime(value, this.model.minTime, true)) return "minTime";
                if (this.model.maxTime && !this._compareTime(this.model.maxTime, value, true)) return "maxTime";
            }
            return null;
        },

        _changeWhole: function (currValue) {
            return currValue > 9 ? "" + currValue : "0" + currValue;
        },
        _changeAmPm: function (ampm) {
            ampm = ampm == this.ttAM ? this.ttPM : this.ttAM;
            this.element.val(this._replaceAt(this.target.value, this.start, this.end, ampm));
            this._setSelection(this.start, this.end);
        },
        _changeMinute: function (isIncrement) {
            var formats = ["mm", "m"];
            var currFormat = this._getExactFormat(formats);
            if (currFormat) {
                this._findCategoryPosition(currFormat);
                var minute = Number(this.target.value.substring(this.start, this.end));
                this._getMinMax(currFormat);
                if (isIncrement) {
                    if (minute == this.max) {
                        minute = this.min;
                        this._changeHour(isIncrement);
                    }
                    else minute += 1;
                }
                else {
                    if (minute == this.min) {
                        minute = this.max;
                        this._changeHour(isIncrement);
                    }
                    else minute -= 1;
                }
                this._findCategoryPosition(currFormat);
                if (currFormat.length != 1) minute = this._changeWhole(minute);
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, minute));
            }
        },
        _changeHour: function (isIncrement) {
            var formats = ["hh", "h", "HH", "H"];
            var currFormat = this._getExactFormat(formats);
            if (currFormat) {
                this._findCategoryPosition(currFormat);
                var hour = Number(this.target.value.substring(this.start, this.end));
                this._getMinMax(currFormat);
                if (isIncrement) {
                    if (hour == this.max) {
                        hour += 1;
                        this._changeMeridian();
                    }
                    else if (hour > this.max) hour = this.min;
                    else hour += 1;
                }
                else {
                    if (hour == this.min) hour = this.max + 1;
                    else if (hour > this.max) {
                        hour = this.max;
                        this._changeMeridian();
                    }
                    else hour -= 1;
                }
                this._findCategoryPosition(currFormat);
                if (currFormat.length != 1) hour = this._changeWhole(hour);
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, hour));
            }
        },
        _getExactFormat: function (cate) {
            var tFormat = this.model.timeFormat;
            for (var i = 0; i < cate.length; i++) {
                if (tFormat.indexOf(cate[i]) != -1) return cate[i];
            }
            return null;
        },
        _changeMeridian: function () {
            var start = this.model.timeFormat.indexOf("tt");
            if (start != -1) {
                this._findCategoryPosition("tt");
                var meridian = this.target.value.substring(this.start, this.end);
                meridian = (meridian == this.ttAM) ? this.ttPM : this.ttAM;
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, meridian));
            }
        },
        _changeCurrentValue: function (current, category, isIncrement) {
            current = Number(current);
            var c = category, step = 1, change = true;
            this._getMinMax(c);

            if (c == "hh" || c == "h" || c == "HH" || c == "H") step = this.model.hourInterval;
            else if (c == "mm" || c == "m") step = this.model.minutesInterval;
            else if (c == "ss" || c == "s") step = this.model.secondsInterval;
            if (step <= 0) return current;

            if (isIncrement) {
                if ((c == "hh" || c == "h") && current > this.max) current = this.min - 1 + step;
                else if (current < this.max) current += step;
                else {
                    change = false;
                    if (c != "hh" && c != "h") current = this.min - 1 + step;
                    else current += step;
                    this._changeAdjacent(c, isIncrement);
                }
                if ((c == "hh" || c == "h") && current == this.max + 1)
                    change && this._changeAdjacent(c, isIncrement);
                else if (current > this.max + 1) {
                    current = current - (this.max + 1);
                    change && this._changeAdjacent(c, isIncrement);
                }
                if ((c != "hh" && c != "h") && current == this.max + 1) {
                    current = this.min;
                    change && this._changeAdjacent(c, isIncrement);
                }
            }
            else {
                if ((c != "hh" && c != "h") && current > this.min) current -= step;
                else if ((c == "hh" || c == "h") && current > this.min && current <= this.max) current -= step;
                else if ((c == "hh" || c == "h") && current == this.min) current = this.max + 2 - step;
                else {
                    change = false;
                    current = this.max + 1 - step;
                    this._changeAdjacent(c, isIncrement);
                }
                if (current < this.min) {
                    current = current + (this.max + 1);
                    change && this._changeAdjacent(c, isIncrement);
                }
            }
            return current;
        },
        _changeAdjacent: function (c, isIncrement) {
            if (c == "ss" || c == "s") this._changeMinute(isIncrement);
            else if (c == "mm" || c == "m") this._changeHour(isIncrement);
            else if (c == "hh" || c == "h" || c == "HH" || c == "H") this._changeMeridian();
        },

        _valueChange: function (e) {
            this._raiseChangeEvent();
        },

        _beforeChange: function (ele) {
            if (!this._raiseEvent("beforeChange")) {
                this.element.val(ele.text());
            }
            return true;
        },

        _raiseChangeEvent: function (prev, isCode) {
            prev = (prev === undefined) ? this.model.value : prev;
            this._previousValue = prev;
            var current = !this.target.value ? null : this.target.value;
            if (prev == current) return false;
            if (this._checkMinMax(this.target.value) && this._isValid(this.target.value, this.model.enableStrictMode) || !this.target.value) this.isValidState = true;
            else this.isValidState = false;
            this.model.value = this._isValid(this.target.value, true) && this._checkMinMax(this.target.value) ? this.target.value : null;
            if (!this.model.value && !this.model.enableStrictMode) this._setTime(this.model.value);
            if (this.model.value == this._previousValue) return false;
            this._raiseEvent("change", isCode);
            this._raiseEvent("_change", isCode);
            return true;
        },
        _raiseEvent: function (name, isCode) {
            var data = { value: this.model.value, prevTime: this._previousValue };
            if (name == "change") data.isInteraction = !isCode;
            return (this._trigger(name, data));
        },
        _checkIE7: function () {
            if (navigator.appName == 'Microsoft Internet Explorer') {
                var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"), version = -1;
                if (re.exec(navigator.userAgent) != null)
                    version = parseFloat(RegExp.$1);
                if (version >= 7 && version < 8) return true;
            }
            return false;
        },
        _replaceAt: function (mainString, from, to, replace) {
            return mainString.substring(0, from) + replace + mainString.substring(to);
        },
        _localizeTime: function (value) {
            if (value)
                return $.trim(ej.format(this._createObject(value), this.model.timeFormat, this.model.locale));
            return null;
        },
        _localizeMeridian: function (value) {
            return $.trim(ej.format(value, "tt", this.model.locale));
        },
        _compareTime: function (time1, time2, orEqual) {
            orEqual = (!orEqual) ? false : true;
            if (orEqual) return this._parse(time1) >= this._parse(time2);
            else return this._parse(time1) > this._parse(time2);
        },
        _isValid: function (time, validate) {
            time = this._createObject(time, validate);
            return time && typeof time.getTime === "function" && isFinite(time.getTime());
        },
        _parse: function (time) {
            return Date.parse(this._createObject(time));
        },
        _setEmptyDate: function (date) {
            var newDate = new Date(date);
            newDate.setDate(1);
            newDate.setMonth(0);
            newDate.setFullYear(2000);
            return newDate;
        },
        _createObject: function (value, validate) {
            var obj = null;
            if (typeof value === "string") {
                var format = this._setModelOption ? this._preTimeformat : this.model.timeFormat;
                var dateFormat = ej.preferredCulture(this.model.locale).calendar.patterns.d;
                var dateValue = ej.format(new Date("1/1/2000"), dateFormat, this.model.locale);
                obj = ej.parseDate(dateValue + " " + value, dateFormat + " " + format, this.model.locale);
                if (this._extISORegex.exec(value) || this._basicISORegex.exec(value)) this.model.value = obj = this._timeFromISO(value);
                this._setModelOption = false;
                if (!obj) {
                    var isJSONString = new Date(value);
                    if (!isNaN(Date.parse(isJSONString)) && !ej.isNullOrUndefined(value))
                        obj = this._setEmptyDate(value);
                    else
                        obj = !this._dateTimeInternal || value == "" ? null : new Date("1/1/2000 " + value);
                }
            }
            else if (typeof value === "number")
                obj = new Date(value);
            else if (value instanceof Date)
                obj = this._setEmptyDate(value);

            if (obj && !this._dateTimeInternal && validate) {
                var timeVal = this._localizeTime(obj);
                if (this._ensureTimeRange(timeVal))
                    obj = null;
            }
            return obj;
        },
        _getLocalizedLabels: function () {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        },

        _wireEvents: function () {
            this._on(this.element, "focus", this._targetFocus);
            this._on(this.element, "blur", this._targetBlur);
            this._on(this.element, "mousedown", this._mouseDownOnInput);
            this._on(this.element, "keydown", this._keyDownOnInput);
            this._on(this.element, "keyup", this._keyUpOnInput);
        }
    });
    ej.TimePicker.Locale = ej.TimePicker.Locale || {};

    ej.TimePicker.Locale['default'] = ej.TimePicker.Locale['en-US'] = {
        watermarkText: "select a time",
    };
    
})(jQuery, Syncfusion);;
/**
 * @fileOverview Plugin to style the Html TreeGrid elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2014. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */

(function ($, ej, undefined) {
    'use strict';
    ej.widget("ejTreeGrid", "ej.TreeGrid", {
        // widget element will be automatically set in this
        _rootCSS: "e-treegrid",

        // widget element will be automatically set in this
        element: null,

        validTags: ["div"],

        // user defined model will be automatically set in this
        model: null,

        _requiresID: true,
        _tags: [
        {
            tag: "columns",
            attr: ["field", "headerText", "allowSorting", "editType", "allowFiltering", "filterEditType", "width", "visible", "editParams", 
			"format", "isFrozen", "allowFreezing", "headerTemplateID", "allowCellSelection", "showCheckbox","showInColumnChooser", "validationRules.minlength", "isTemplateColumn",
			"validationRules.maxlength", "validationRules.range", "validationRules.number", "validationRules.required", "displayAsCheckbox", "editTemplate", "priority","filterType", [{ tag: "commands", attr: ["type", "buttonOptions"] }]],
            content: "template"
        },
        {
            tag: "summaryRows",
            attr: ["title", "summaryColumns"],
            content: "template"
        },
        {
            tag: "stackedHeaderRows",
            attr: ["stackedHeaderColumns"],
            content: "template"
        },

         {
             tag: "summaryRows.summaryColumns",
             attr: ["summaryType", "dataMember", "displayColumn", "prefix", "suffix", "format", "customSummaryValue"],
             content: "template"
         },
        {
            tag: "sortSettings.sortedColumns",
            attr: ["field", "direction"]
        },
        {
            tag: "sizeSettings",
            attr:["height","width"]
        },
        {
            tag:"columnResizeSettings",
            attr: ["columnResizeMode"]
        }
        ],
        _columns: function (index, property, value, old) {
            var proxy = this, model = proxy.model,
                columns = model.columns, isPropertyUpdated = false,
                length = columns.length,
                runTimeProperties = ['allowCellSelection', 'allowEditing', 'allowFilteringBlankContent', 'allowFreezing',
                    'allowSorting', 'editParams', 'headerTooltip', 'tooltip', 'validationRules'];

            if (!ej.isNullOrUndefined(index)) {
                //Refresh column property changes by Angular
                if (typeof index === 'object') {
                    for (var colIndex = 0; colIndex < index.length; colIndex++) {
                        var updatedColumn = index[colIndex];
                        if (!ej.isNullOrUndefined(updatedColumn.index) && !ej.isNullOrUndefined(updatedColumn['change'])) {
                            for (var i = 0; i < length; i++) {
                                var column = columns[i];
                                if (column.index && column.index == updatedColumn.index) {
                                    for (var prop in updatedColumn['change']) {
                                        if (runTimeProperties.indexOf(prop) == -1)
                                            isPropertyUpdated = true;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
                    // Refresh Column changes by Angularjs
                else if (property && value) {
                    if (runTimeProperties.indexOf(prop) == -1)
                        isPropertyUpdated = true;
                }
                else
                    isPropertyUpdated = true;

                if (isPropertyUpdated) {
                    proxy.updateColumns();
                }
            }
        },
        keyConfigs: {
            focus: "e",
            editRecord: "113", //F2
            saveRequest: "13", // enter
            cancelRequest: "27", //Esc         
            firstRowSelection: "36", //"Home",
            lastRowSelection: "35", //"End",
            leftArrow:"37",//Left arrow
            upArrow: "38", //Up arrow
            rightArrow:"39",//Right arrow
            downArrow: "40", //Down arrow
            moveCellRight: "9", //tab
            moveCellLeft: "shift+9", //shifttab
            shiftDownArrow: "shift+40", //shift + DownArrow
            shiftUpArrow: "shift+38", //shift + UpArrow
            shiftRightArrow: "shift+39", //shift + RightArrow
            shiftLeftArrow: "shift+37", //shift + LeftArrow
            shiftHomeButton: "shift+36",//shift + HomeButton
            shiftEndButton: "shift+35",//shift + EndButton
            selectedRowExpand: "alt+40", //"AltPlusDownArrow",
            totalRowExpand: "ctrl+40", //"CtrlPlusDownArrow",
            selectedRowCollapse: "alt+38", //"AltPlusUpArrow",
            totalRowCollapse: "ctrl+38", //"CtrlPlusUpArrow"
            deleteRecord: "46", // delete
            spaceBar: "32", // spacebar
            topRowSelection: "ctrl+36", //CtrlPlusHome
            bottomRowSelection: "ctrl+35",//CtrlPlusEnd
            nextPage: "33", //PageUp
            prevPage:"34", //PageDown            
        },
      
        defaults: {
            expandStateMapping:"",
            allowFiltering: false,            
            allowDragAndDrop: false,            
            dragTooltip: {                
                showTooltip: false,                
                tooltipItems:[],                
                tooltipTemplate: "",
            },  
            allowSorting: false,            
            allowColumnResize: false, 
            allowSelection: true,   
            allowPaging: false,
            allowSearching: false,
            dataSource: null,
            query: ej.Query(),            
            idMapping: "",            
            parentIdMapping: "",
            hierarchyRowIndexMapping: "",
            readOnly: false,
            showGridCellTooltip: false,
            cellTooltipTemplate:null,
            showGridExpandCellTooltip: false,
            showColumnChooser: false,
            showColumnOptions: false,
            enableAltRow: true,			
            enableLoadOnDemand: false,
            totalSummaryHeight: 90,
            collapsibleTotalSummary :false,
            hasChildMapping: "",
            selectedItem: null,            
            showStackedHeader: false,
            stackedHeaderRows:[],
            toolbarSettings: {                
                showToolbar: false,                
                toolbarItems: [],
                customToolbarItems:[]
            },         
            editSettings: {       
                allowEditing: false,  
                allowAdding: true,
                allowDeleting: true,                
                editMode: "cellEditing",                
                rowPosition: "top",
                beginEditAction: "dblclick",
                dialogEditorTemplateID: "",
                showDeleteConfirmDialog: false,
                showConfirmDialog: true,
                batchEditSettings: { editMode: "cell" }
            },                   
            enableVirtualization: false,   
            allowMultiSorting: false,
            sortSettings: {                
                sortedColumns: []
            },
            filterSettings: {
                filterBarMode: "immediate",
                filteredColumns: [],
                filterType: "filterbar",
                maxFilterChoices:1000,
                enableCaseSensitivity:false,
                enableComplexBlankFilter:true,
                blankValue: "",
                filterHierarchyMode:"parent"
            },
            printingEnabled:false,
            selectionType: "single",    
            selectionMode: "row",
            selectionSettings: {
                selectionType: "single",
                selectionMode: "row",
                enableHierarchySelection: true,
                enableSelectAll: true,
            },
            searchSettings: {
                fields: [],
                key: "",
                operator: "contains",
                ignoreCase: true,
                searchHierarchyMode: "parent"
            },
            selectedCellIndexes: [],
            selectedRowIndex: -1,
            showSummaryRow: false,
            summaryRows: [],            
            showTotalSummary: false,    
            allowKeyboardNavigation: true,
            cssClass: "",           
            locale: "en-US",
            isEdit: false,
            allowScrolling: false,
            scrollSettings: {
                frozenColumns: 0
            },
            groupSettings: {
                groupedColumns:[]
            },            
            sizeSettings: {                
                height: "",                
                width: "",
            },            
            enableResize: true,            
            allowTextWrap: false,
            isResponsive: true,
            showDetailsRow: false,            
            showDetailsRowInfoColumn: false,            
            detailsTemplate: "",            
            detailsRowHeight: 100,    
            rowDataBound: null,                        
            load: null,
            create:null,
            queryCellInfo: null,            
            rowSelecting: null,           
            rowSelected: null,           
            cellSelecting: null,
            cellSelected: null,
            beginEdit: null,            
            endEdit: null,            
            expanding: null,            
            expanded: null,            
            collapsing: null,            
            collapsed: null,            
            dataBound:null,
            beforePrint:null,
            actionComplete: null,            
            actionBegin: null,
            actionFailure: null,
            currentViewData: [],
            flatRecords: [],
            parentRecords: [],
            updatedRecords:[],
            summaryRowRecords: [],
            selectedItems: [],
            ids: [],      
            columns: [
            {
                field: "",
                headerText: "",
                editType: "",
                filterEditType: "",
                allowFiltering: false,
                allowFilteringBlankContent: true,
                allowSorting: false,
                visible: "",
                textAlign: ej.TextAlign.Left,
                headerTextAlign: ej.TextAlign.Left,
                allowCellSelection: true,
                clipMode: "",
                headerTooltip: "",
                tooltip:"",
                showInColumnChooser:true,
                commands: [{
                    type: "",
                    buttonOptions:{},
                }],
                filterType:null
                //isFrozen: false,
                //allowFreezing: false
                //displayAsCheckbox
            },
            ],
            columnDialogFields: [],
            commonWidth: 150,
            dateFormat: "MM/dd/yyyy",   
            rowHeight: 30,
            emptyRecordText: "No Records To Display",            
            treeColumnIndex: 0,
            //API for toggle between datepicker and datetimepicker
            workingTimeScale: 'TimeScale8Hours',            
            childMapping: "",             
            enableCollapseAll:false,
            rowTemplateID: "",
            altRowTemplateID: "",
            parseRowTemplate: true,
            contextMenuSettings: {                
                showContextMenu: false,                
                contextMenuItems: []
            },            
            contextMenuOpen: null,            
            rowDragStart: null,            
            rowDrag: null,            
            rowDragStop: null,       
            rowDropActionBegin:null,
            detailsDataBound: null,            
            detailsShown: null,            
            detailsHidden: null,
            toolbarClick: null,
            columnResizeStart: null,
            columnResizeEnd: null,
            columnResized:null,
            recordClick:null,
            recordDoubleClick:null,
            exportToPdfAction: "",
            exportToExcelAction: "",
            allowMultipleExporting: false,
            headerTextOverflow: "none",
            pageSettings: {
                pageSize: 12,
                pageCount: 8,
                currentPage: 1,
                totalPages: 0,
                totalRecordsCount: null,
                pageSizeMode: "all",
                template: null,                
                printMode:"allPages",
            },
            allowColumnReordering: false,
            columnResizeSettings: {
                columnResizeMode: "normal"
            }
        },

        dataTypes: {
            columns: "array",            
            totalSummaryHeight: "number",
            collapsibleTotalSummary :"boolean",
            summaryRows: "array",
            sortSettings: {
                sortedColumns: "array"
            },
            searchSettings:{
                fields: "array"
            },
            dragTooltip:{
                tooltipItems: "array"
            },
            columnDialogFields: "array",
            filterSettings: {
                filteredColumns: "array",
                filterType: "string",
            },
            dataSource: "data",
            query: "data",
            currentViewData: "array",
            flatRecords: "array",
            parentRecords: "array",
            updatedRecords:"array",
            summaryRowRecords: "array",
            ids: "array",
            contextMenuSettings: {
                contextMenuItems: "array"
            },
            toolbarSettings: {
                toolbarItems: "array",
                customToolbarItems: "array"
            },
            stackedHeaderRows:"array",
            selectedItem: "data",            
        },
        ignoreOnExport: [
            "isEdit", "toolbarClick", "query", "queryCellInfo", "selectionType", "currentViewData", "enableRTL", "rowDataBound", "rowTemplate","parseRowTemplate",
             "detailsTemplate", "editSettings", "localization", "cssClass", "dataSource", "allowKeyboardNavigation","pageSettings","columnResizeSettings"
        ],
        observables: ["selectedRowIndex", "dataSource", "selectedCellIndexes","pageSettings.currentPage"],
        selectedItem: ej.util.valueFunction("selectedItem"),
        selectedRowIndex: ej.util.valueFunction("selectedRowIndex"),
        selectedCellIndexes: ej.util.valueFunction("selectedCellIndexes"),
        dataSource: ej.util.valueFunction("dataSource"),
        _currentPage: ej.util.valueFunction("pageSettings.currentPage"),
        _dataSource: ej.util.valueFunction("dataSource"),

        //GET THE LOCALIZATION OBJECT
        _getLocalizedLabels: function () {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        },

        //GET THE GRID HEADER TABLE FOR COLUMNRESIZE
        getHeaderTable: function () {
            return this._$gridHeaderTable;
        },

        //SET THE GRID HEADER TABLE
        setGridHeaderTable: function (value) {
            this._$gridHeaderTable = value;
        },

        //GET THE GRIDHEADERCONTENT
        getHeaderContent: function () {
            return this._$gridHeaderContent;
        },

        //SET THE GRIDHEADERCONTENT
        setGridHeaderContent: function (value) {
            this._$gridHeaderContent = value;
        },

        //GET THE GRID CONTENT TABLE
        getContentTable: function () {
            return this._$gridContentTable;
        },

        getContent: function () {
            return this._$gridContent;
        },
        
        //SET THE GRID CONTENT TABLE
        setGridContentTable: function (value) {
            this._$gridContentTable = value;
        },

        //GET TREEGRID ROWS
        getRows: function () {
            var $gridRows = this._excludeDetailRows();
            return $gridRows;
        },

        //GET SELECTED CELLS
        getSelectedCells: function () {
            var proxy = this, model = proxy.model;
            var selectedCellElement = [];
            this._selectedCellDetails.forEach(function (item) {
                //Replace the current view cell Element after scrolling.
                var record = item.data,
                    currentRowIndex = model.currentViewData.indexOf(record), $target = $(item.cellElement);
                if (currentRowIndex != -1) {
                    if (proxy._frozenColumnsLength > 0) {
                        if ($target.closest(".e-frozencontentdiv").length > 0)
                            item.cellElement = proxy.getRows()[0][currentRowIndex].childNodes[item.cellIndex];
                        else if ($target.closest(".e-movablecontentdiv").length > 0)
                            item.cellElement = proxy.getRows()[1][currentRowIndex].childNodes[(item.cellIndex - proxy._frozenColumnsLength)];
                    } else {
                        item.cellElement = proxy.getRows()[currentRowIndex].childNodes[item.cellIndex];
                    }
                }
                selectedCellElement.push(item.cellElement);
            });
            return selectedCellElement;
        },

        //SET TREEGRID ROWS
        setGridRows: function (value) {
            this._$gridRows = value;
        },

        //GET CURRENTVIEWPORT DATA
        getCurrentViewData: function () {
            return this.model.currentViewData;
        },

        //GET UPDATED CURRENT VIEW DATA
        getUpdatedCurrentViewData: function () {
            this._updateCurrentViewData();
            return this.model.currentViewData;
        },

        //GET FLAT RECORDS
        getFlatRecords: function () {
            return this.model.flatRecords;
        },

        //SET THE HEIGHT BASED ON THE RECORD COUNT
        setHeight: function (value) {
            this._totalHeight = value;
        },

        //GET THE UPDATEDRECORDS[SORTED,FILTERED,EXPANDCOLLAPSED]
        getUpdatedRecords: function () {
            var model = this.model,updatedRecords = [];
            if (!this._isFromGantt && model.allowPaging)
                updatedRecords = this._updatedPageData;
            else
                updatedRecords = (this._isHierarchyFiltering && model.enableVirtualization) ? this._updateFilterParent : model.updatedRecords;
            return updatedRecords;
        },

        //GET THE SUMMARY ROW RECORDS
        getsummaryRowRecords: function () {
            return this.model.summaryRowRecords;
        },
        //GET THE UPDATED DATASOURCE
        getDataSource: function () {
            return this.dataSource();
        },

        //get the ids collection after perform the addition/delete operation
        //GET THE IDS COLLECTION AFTER PERFORM THE ADDITION/DELETE OPERATION
        getUpdatedIds: function () {
            return this.model.ids;
        },

        //GET THE RECORDS COUNT
        getRecordsCount: function () {
            return this._recordsCount;
        },

        //SET THE RECORDS COUNT
        setRecordsCount: function (value) {
            this._recordsCount = value;
        },
        // SET FOCUS ON ELEMENT
        setFocusOnTreeGridElement: function(){
            this._focusTreeGridElement();
        },

        //update the collapseRecount by updatedRecord collection
        updateCollapsedRecordCount:function()
        {
            var proxy = this,
                model = this.model,
                resultRecord = [];
            resultRecord = model.updatedRecords.filter(function (record) {
                return proxy.getExpandStatus(record) == false;
            });
            proxy._totalCollapsedRecordCount = resultRecord.length;
        },

        //In virtualization get expaned records from total record collection only
        _getDetailsExpandedRecords: function (records) {            
            var resultRecord = records.filter(function (record) {
                return record.isDetailsExpanded == true;
            });
            return resultRecord;
        },

        /* Get expanded details row height */
        _getExpandedDetailsRowHeight:function()
        {
            var proxy = this,                
                expandedRecords, 
                detailExpandedRecords,
                updatedRecords = proxy.getUpdatedRecords();

            expandedRecords = this.getExpandedRecords(updatedRecords);
            detailExpandedRecords = this._getDetailsExpandedRecords(expandedRecords);
            detailExpandedRecords = proxy._spliceSummaryRows(detailExpandedRecords);
            return (proxy._detailsRowHeight * detailExpandedRecords.length);
        },
        //return collapsed recount length in updatedRecord collectio
        getCollapsedRecordCount: function (records) {
            return this._totalCollapsedRecordCount;
        },
        
        _colgroupRefresh: function () {
            var gridheaderCol, gridcontentCol;
            
            if (this._frozenColumnsLength > 0) {
                gridheaderCol = $(this.getHeaderTable()).find('colgroup');
                gridcontentCol = $(this.getContentTable()).find('colgroup');
            }
            else {
                gridheaderCol = $(this.getHeaderTable()).find('colgroup')[0];
                gridcontentCol = $(this.getContentTable()).find('colgroup')[0];
            }
            var headerColClone = $(gridheaderCol).clone();
            var contentColClone = $(gridcontentCol).clone();
            var footerColClone = $(gridcontentCol).clone();
            $(gridcontentCol).remove();
            $(gridheaderCol).remove();
            if (this._frozenColumnsLength > 0) {
                $(headerColClone[0]).prependTo(this.getHeaderTable()[0]);
                $(headerColClone[1]).prependTo(this.getHeaderTable()[1]);
                $(contentColClone[0]).prependTo(this.getContentTable()[0]);
                $(contentColClone[1]).prependTo(this.getContentTable()[1]);
                if (this._$footertableContent) {
                    $(this._$footertableContent).find('colgroup').remove();
                    $(footerColClone[0]).prependTo(this._$footertableContent[0]);
                    $(footerColClone[1]).prependTo(this._$footertableContent[1]);
                }
                if (this._$totalSummaryRowContainer) {
                    if (!this.mobileDevice() && this.getBrowserDetails().browser == "safari")
                        this._$totalSummaryRowContainer.find("#e-movablefooter" + this._id).css("margin-left", "auto");
                }
                if (!this.mobileDevice() && this.getBrowserDetails().browser == "safari")
                    this.getHeaderContent().find("#e-movableheader" + this._id).add(this.getContent().find("#e-movablecontainer" + this._id)).css("margin-left", "auto");
                $("#e-frozencontentdiv" + this._id).length && $("#e-frozencontentdiv" + this._id).css("width", "100%");
            }
            else {
                $(headerColClone).prependTo(this.getHeaderTable());
                $(contentColClone).prependTo(this.getContentTable());
                if (this._$footertableContent) {
                    $(this._$footertableContent).find('colgroup').remove();
                    $(footerColClone).prependTo(this._$footertableContent);
                }
            }
        },
        _detailColsRefresh: function () {
            this._$headerCols = this.getHeaderTable().children("colgroup").find("col");
            this._$contentCols = this.getContentTable().children("colgroup").find("col");
            if (this.model.detailsTemplate && this.model.showDetailsRow && this.model.showDetailsRowInfoColumn || this.model.isFromGantt) {
                var colCount = this.model.columns.length;
                if (this._$headerCols.length > colCount) this._$headerCols.splice(colCount, 1);
                if (this._$contentCols.length > colCount) this._$contentCols.splice(colCount, 1);
            }
        },

        _swipeAction: function (e) {
            var proxy = this,curPage = this._currentPage(), doPage = true;
            var hScroll = (this.getScrollObject() || {})._scrollXdata;
            if (hScroll)
                doPage = e.type == "swipeleft" ? hScroll.scrollable - hScroll.sTop == 0 : hScroll.sTop == 0;

            switch (e.type) {
                case "swipeleft":
                    if (this.model.allowPaging && curPage != this.model.pageSettings.totalPages && !this.model.isEdit && !this._isRowEdit) {
                        if (doPage || !proxy.getScrollElement().ejScroller("isHScroll")) {
                            this.element.ejTreeGrid("gotoPage", curPage + 1);
                        }
                    }
                    break;
                case "swiperight":
                    if (this.model.allowPaging && curPage > 1 && !this.model.isEdit && !this._isRowEdit) {
                        if (doPage || !proxy.getScrollElement().ejScroller("isHScroll")) {
                            this.element.ejTreeGrid("gotoPage", curPage - 1);
                        }
                    }
                    break;
            }
        },

        // Move to the given page number
        gotoPage: function (pageIndex) {
            var proxy = this, model = proxy.model,
               args = {}, returnValue;

            if (!this.model.allowPaging)
                return;
            if (this._isLoadonDemand && pageIndex && pageIndex != this._currentPage()) {
                this._currentPage(pageIndex);
                proxy._refreshDataSource();
                if (this._prevPageNo != pageIndex)
                    this._prevPageNo = pageIndex;
                return;
            }
            if (ej.isNullOrUndefined(pageIndex))
                pageIndex = proxy._currentPage();
            else {
                if (pageIndex <= 0)
                    pageIndex = 1;
                else if (pageIndex > model.pageSettings.totalPages)
                    pageIndex = model.pageSettings.totalPages;
            }
            pageIndex = ej.isNullOrUndefined(pageIndex) ? proxy._currentPage() : pageIndex;
            this._currentPage(pageIndex);           
            args.previousPage = this._prevPageNo;                      
            args.currentPage = pageIndex;
            if (model.allowPaging) {                
                args.requestType = ej.TreeGrid.Actions.Paging;
            }
            proxy._setScrollTop();
            proxy._updateCurrentViewData();
            if (model.enableVirtualization && model.pageSettings.pageSizeMode == ej.TreeGrid.PageSizeMode.Root && $.inArray(pageIndex, proxy._expandCollapsePages) == -1) {
                proxy._isInExpandCollapseAll = true;
                if (proxy._expandCollapseSettings.state == "collapseAll")
                    proxy._collapseAllData();
                else if (proxy._expandCollapseSettings.state == "expandAll")
                    proxy._expandAllData();
                if (proxy._expandCollapseSettings.atLevel == "collapseAtLevel")
                    proxy._collapsePageLevelData();
                else if (proxy._expandCollapseSettings.atLevel == "expandAtLevel")
                    proxy._expandPageLevelData();
                if(model.enableAltRow)
                    proxy.updateAltRow();
            }
            proxy.renderRecords(args);
            proxy._isInExpandCollapseAll = false;
            proxy._updateWrapRowHeights("total,header");
            proxy.updateHeight();
            proxy._updateScrollCss();
            if (model.allowTextWrap && model.enableVirtualization)
                proxy._updateWrapRowHeights("header", "refreshAll");
            if (returnValue)
                this._currentPage(args.previousPage);
            if (args.previousPage != args.currentPage) {                
                proxy.clearSelection(-1);
                proxy.selectedRowIndex(-1);
                proxy.model.selectedItem = null;
                proxy._cancelSaveTools();
                proxy._clearContextMenu();
                if (proxy.model.allowSelection && proxy.model.selectionSettings.selectionType == "multiple" && this._multiSelectPopup && this._multiSelectPopup.is(":visible")) {
                    proxy._clearMultiSelectPopup();
                }
                this._prevPageNo = args.currentPage;
            }
        },

        /*Handler for pager change event*/
        _pagerClickHandler: function (sender) {
            var proxy = this;
            if (proxy.model.pageSettings.pageSizeMode == ej.TreeGrid.PageSizeMode.Root && proxy._batchEditStarts && !(proxy._confirmDialog).is(":visible")) {
                proxy._batchSaveLostWarning("Paging");
                proxy._batchTempDetails.currentPage = sender.currentPage;
                return true;
            }
            if (this._prevPageNo == sender.currentPage)
                return;
            proxy._isNextPage = true;
            if (proxy._isRowEdit)
                proxy.cancelRowEditCell();
            else if (proxy.model.isEdit)
                proxy.cancelEditCell();
            this.gotoPage(sender.currentPage);
            return false;
        },
        /*CONSTRUCTOR FUNCTION*/
        _init: function () {

            var proxy = this;

            /* default value for asp designer */
            if (proxy.model.isdesignMode) {
                proxy.model.columns = [
                    { "field": "Column1", "HeaderText": "Column1" },
                    { "field": "Column2", "HeaderText": "Column2" },
                    { "field": "Column3", "HeaderText": "Column3" },
                    { "field": "Column4", "HeaderText": "Column4" }];
                proxy.model.childMapping = "Children";
                var tempDataSource = [{ Column1: "Value 1", Column2: "Value 2", Column3: "Value 3", Column4: "Value 4", Children: [] }];

                for (var count = 1; count < 4; count++) {
                    var data = { Column1: "Value 1", Column2: "Value 2", Column3: "Value 3", Column4: "Value 4" };
                    tempDataSource[0].Children.push(data);
                }
                this.dataSource(tempDataSource);
                this.model.sizeSettings.height = "250px";
                this.model.sizeSettings.width = "600px";
            }            
            proxy._detailsColumnWidth = 35; //default width of details info column
            proxy._summaryColumnIndex = 0;
            if (proxy.model.summaryRows.length <= 1)
                proxy.model.collapsibleTotalSummary = false;
            proxy._trigger("load");
            proxy._validateColumnFields();
            if (!proxy.model.isFromGantt)
                proxy._validateColumnVisible(true);
            proxy._initPrivateProperties();
            proxy._setCultureInfo();

            if (this.dataSource() instanceof ej.DataManager && this.dataSource().ready != undefined) {
                var proxy = this;
                proxy._renderWaitingPopup();
                this.dataSource().ready.done(function (args) {                    
                    proxy.model.dataSource = ej.DataManager(args.result);
                    proxy._initDatasource();
                });
            }
            else
                proxy._initDatasource();
            proxy._processEditing();
            if (proxy.model.showColumnChooser && proxy.model.showColumnOptions) {
                proxy.columnAddDialogTemplate();
                proxy._renderUpdateConfirmDialog();
            }
            proxy._createDragTooltipTemplate();
            proxy._createTooltipTemplate();
        },

        // Method to render the outer div element for Add/edit dialog into the DOM
        _renderEditDialog: function () {
            var $dialog = ej.buildTag("div.e-editdialog-padding", "", { display: "none" }, { id: this._id + "_dialogEdit" });
            return $dialog;
        },

        // Method to validate the column fields
        _validateColumnFields: function ()
        {
            var proxy = this, column = proxy.model.columns;
            if (!ej.isNullOrUndefined(column)) {
                for (var index = 0; index < column.length; index++) {
                    if (ej.isNullOrUndefined(column[index].field)) {
                        column[index].field = "";
                        column[index].allowEditing = false;
                        column[index].allowSorting = false;
                        column[index].allowFiltering = false;
                    }
                    if (proxy._isCommandColumn(column[index])) {                       
                        column[index].allowEditing = false;
                        column[index].allowSorting = false;
                        column[index].allowFiltering = false;
                        column[index].showCheckbox = false;
                    }
                    if (ej.isNullOrUndefined(column[index].editType)) {
                        column[index].editType = "stringedit";
                    }
                    if (column[index].editType == "maskedit" && ej.isNullOrUndefined(column[index].filterEditType)) {
                        column[index].filterEditType = "stringedit";
                    }
                }
            }

        },

        //Set the column visibility based on column priority and document width
        _validateColumnVisible: function (isLoad) {
            var proxy = this,
                model = proxy.model;
            proxy._autoHideColumns = [];
            proxy._autoShowColumns = [];
            if (model.isResponsive && model.enableResize) {
                var width = document.body.clientWidth,
                    priority = null;
                if (width >= 960 && width <= 1120)
                    priority = 6;
                else if (width >= 800 && width <= 959)
                    priority = 5;
                else if (width >= 640 && width <= 799)
                    priority = 4;
                else if (width >= 480 && width <= 639)
                    priority = 3;
                else if (width >= 0 && width <= 479)
                    priority = 2;
                var columns = model.columns,
                    length = columns.length;
                if (isLoad) {
                    for (var index = 0; index < length; index++) {
                        if (priority != null) {
                            if (columns[index].priority)
                                if (columns[index].priority >= priority)
                                    columns[index].visible = false;
                                else
                                    columns[index].visible = true;
                        }
                        else {
                            if (!ej.isNullOrUndefined(columns[index].priority))
                                columns[index].visible = true;
                        }
                    }
                }
                else
                {
                    for (var index = 0; index < length; index++) {
                        if (priority != null) {
                            if (columns[index].priority)
                                if (columns[index].priority >= priority) {
                                    if (columns[index].visible != false)
                                        proxy._autoHideColumns.push(columns[index]);
                                }
                                else
                                {
                                    if (columns[index].visible == false)
                                        proxy._autoShowColumns.push(columns[index]);
                                }
                                    
                        }
                        else {
                            if (!ej.isNullOrUndefined(columns[index].priority))
                                if (columns[index].visible == false)
                                    proxy._autoShowColumns.push(columns[index]);
                        }
                    }
                }
            }
        },
        //Hidden column using column values
        _hideColumns: function (columns) {
            var proxy = this,
                model = proxy.model;
            columns.reverse();
            columns.sort(function (column1, column2) {
                return column2.priority - column1.priority;
            });
            if (columns && columns.length > 0) {
                var length = columns.length;
                //Table column width not properly set in firefox, so just remove and add the e-table class from both header and content table
                proxy.getHeaderTable().removeClass("e-table");
                proxy.getContentTable().removeClass("e-table");
                for (var columnIndex = 0; columnIndex < length; columnIndex++) {
                    var column = columns[columnIndex],
                        index = $.inArray(column, model.columns),
                        headerText = column.headerText,
                        hiddenColumnIndex = $.inArray(headerText, proxy._hiddenColumns);
                    /* check this is single column in frozen or movable column*/
                    if (column && !proxy._isColumnHidable(column))
                        continue;
                    if (index != -1 && index != model.treeColumnIndex && hiddenColumnIndex == -1)
                        proxy._autoHideShowColumn(headerText,index, true);
                    index = $.inArray(headerText, proxy._visibleColumns);
                    if (index != -1)
                        proxy._visibleColumns.splice(index, 1);
                }
                proxy.getHeaderTable().addClass("e-table");
                proxy.getContentTable().addClass("e-table");
                proxy._updateHideShowColumnAlignment();
            }
        },
        //Show the hidden column using column values
        _showColumns: function (columns) {
            var proxy = this,
                model = proxy.model;
            if (columns && columns.length > 0) {
                var length = columns.length;
                for (var columnIndex = 0; columnIndex < length; columnIndex++) {
                    var column = columns[columnIndex],
                        index = $.inArray(column, model.columns),
                        headerText = column.headerText,
                        visibleColumnIndex = $.inArray(headerText, proxy._visibleColumns);
                    if (index != -1 && visibleColumnIndex == -1)
                        proxy._autoHideShowColumn(headerText,index, false);
                    index = $.inArray(headerText, proxy._hiddenColumns);
                    if (index != -1)
                        proxy._hiddenColumns.splice(index, 1);
                }
                proxy._updateHideShowColumnAlignment();
            }
        },

        //Hide or show the tree grid column
        _autoHideShowColumn: function (headerText,index, isHide)
        {
            var proxy = this,
                model = proxy.model;
            /* Cancel edited cell before sort the column*/
            proxy._cancelEditState();
            if (isHide) {
                proxy._hiddenColumns.push(headerText);
                model.columns[index].visible = false;
            }
            else {
                proxy._visibleColumns.push(headerText);
                model.columns[index].visible = true;
            }
            var headerrows,
                headerColgroup = proxy.getHeaderTable().find('colgroup').find("col"),
                headerRows = proxy.getHeaderTable().find('thead').find("th.e-headercell");
            if (model.allowFiltering && model.filterSettings.filterType == "filterbar") {
                headerrows = proxy.getHeaderTable().find('thead').find("th.e-filterbarcell");
            }
            if (proxy.model.columns[index].isFrozen == true) {
                proxy._updateFrozenColumnOnResize(index);
                proxy.setWidthToColumns();
            }
            var gridColGroup = proxy.getContentTable().find("colgroup").find("col"),
                isFrozenTable = true, cellIndex = index, footerRows,gridrows;
            gridrows = proxy.getRows();
            footerRows = proxy._getFooterRows();
            if (isHide) {
                $(headerColgroup).eq(index).hide();
                $(headerRows).eq(index).addClass("e-hide");
                headerrows && $(headerrows).eq(index).addClass("e-hide");
                $(gridColGroup).eq(index).hide();
            }
            else {
                $(headerColgroup).eq(index).show();
                $(headerRows).eq(index).removeClass("e-hide");
                headerrows && $(headerrows).eq(index).removeClass("e-hide");
                $(gridColGroup).eq(index).show();
            }

            if (proxy._frozenColumnsLength > 0) {
                if (index < proxy._frozenColumnsLength) {
                    gridrows = $(proxy.getRows()[0]);
                    footerRows = $(footerRows[0]);
                    if (proxy._gridRows && $(proxy.getTreeGridRows()[0]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").length > 0) {
                        var tempColSpan = parseInt($(proxy.getTreeGridRows()[0]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan"));
                        tempColSpan = isHide ? (tempColSpan - 1) : (tempColSpan + 1);
                        $(proxy.getTreeGridRows()[0]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan", tempColSpan);
                    }
                }
                else {
                    gridrows = $(proxy.getRows()[1]);
                    footerRows = $(footerRows[1]);
                    isFrozenTable = false;
                    cellIndex = index - this._frozenColumnsLength;
                    if (proxy._gridRows && $(proxy.getTreeGridRows()[1]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").length > 0) {
                        var tempColSpan = parseInt($(proxy.getTreeGridRows()[1]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan"));
                        tempColSpan = isHide ? (tempColSpan - 1) : (tempColSpan + 1);
                        $(proxy.getTreeGridRows()[1]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan", tempColSpan);
                    }
                }
            } else {
                if (proxy._gridRows && $(proxy.getTreeGridRows()).find(".e-detailscellwrapper").parent(".e-detailsrowcell").length > 0) {
                    var tempColSpan = parseInt($(proxy.getTreeGridRows()).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan"));
                    tempColSpan = isHide ? (tempColSpan - 1) : (tempColSpan + 1);
                    $(proxy.getTreeGridRows()).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan", tempColSpan);
                }
            }

            //Display or hide the specified column     
            gridrows.each(function () {
                var td = $(this).children("td").eq(cellIndex);
                isHide ? $(td).addClass("e-hide") : $(td).removeClass("e-hide");
                if (model.showSummaryRow && $(td).hasClass('e-summaryrowcell') && isFrozenTable)
                    proxy._updateSummaryRowTitleCell(headerColgroup, td[0].parentElement);
            });

            //Show or Hide the specific column from total summary row.
            if (model.showTotalSummary) {
                var footerColGroup = proxy._$footertableContent.find("colgroup").find("col");
                isHide ? $(footerColGroup).eq(index).hide() : $(footerColGroup).eq(index).show();
                footerRows.each(function () {
                    var footerSummarytd = $(this).children("td").eq(cellIndex);
                    isHide ? $(footerSummarytd).addClass("e-hide"):$(footerSummarytd).removeClass("e-hide");
                    if ($(footerSummarytd).hasClass('e-footersummaryrowcell'))
                        proxy._updateSummaryRowTitleCell(footerColGroup, footerSummarytd[0].parentElement);
                });
            }
        },

        //Update the tree grid alignment after hide and show the column
        _updateHideShowColumnAlignment:function()
        {
            var proxy = this,
                model = proxy.model;
            proxy._addInitTemplate();
            var gridContent = proxy.getScrollElement();
            if (model.columnResizeSettings.columnResizeMode == ej.TreeGrid.ColumnResizeMode.FixedColumns && !model.isFromGantt)
                proxy._updateTableWidth();
            gridContent.ejScroller("refresh");
            proxy._updateScrollCss();
            proxy._updateHeaderScrollLeft();
            if (model.showColumnChooser) {
                proxy._renderColumnChooserList(true);
                proxy._updateColumnMenuVisibility();
            }
        },
        // Method to create a template for add/edit dialog.
        _treeGridAddEditDialog: function () {
            if (this.model.columns.length == 0)
                return;
            var $formbody = ej.buildTag('div');
            var $form = ej.buildTag('form.e-treegridform', "", {}, { id: this._id + "EditFormDialog" });
            var $table = ej.buildTag('table', "", { "margin": "0 auto" }, {});
            var $innerTr, $labelTd, $valueTd, trElement, tdElement;
            for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
                if ((this.model.columns[columnCount].visible || ej.isNullOrUndefined(this.model.columns[columnCount].visible)) && this.model.columns[columnCount].field != "checkboxState" && !this._isCommandColumn(this.model.columns[columnCount])) {
                    trElement = 'tr';
                    tdElement = 'td';
                    $innerTr = ej.buildTag(trElement);
                    $labelTd = ej.buildTag(tdElement + ".e-editdialoglabel", "", { "text-align": "right" });
                    $valueTd = ej.buildTag(tdElement + ".e-editdialogrowcell", "", { "text-align": "left" });
                    if (this.model.columns[columnCount].allowEditing != false) {
                        $innerTr.append($labelTd.get(0)).append($valueTd.get(0));
                    }
                    if (this.model.columns[columnCount].headerText == undefined)
                        this.model.columns[columnCount].headerText = this.model.columns[columnCount].field;
                    $labelTd.append("<label>" + this.model.columns[columnCount].headerText + "</label>");
                    if (this.model.columns[columnCount]["allowEditing"] != false && this.model.columns[columnCount]["field"])
                        ej.TreeGrid._initCellEditType(this, $valueTd, this._id, columnCount);
                    this.model.columns[columnCount]["allowEditing"] == false && $valueTd.find(".e-field").attr("disabled", true).addClass("e-disable");
                    if (this.model.columns[columnCount]["visible"] === false)
                        $innerTr.addClass("e-hide");
                    $table.append($innerTr);
                }
            }
            $form.append($table);
            $form.appendTo($formbody);
            $formbody = this._renderDiaglogButton($form, $formbody, $table);
            $.templates(this._id + "_JSONDialogEditingTemplate", $formbody.html());
        },

        //  Method to create a template for add/edit template dialog.
        _treeGridAddEditDialogTemplate: function () {
            if (this.model.columns.length == 0)
                return;
            var $tbody = ej.buildTag('div', "", { 'display': 'none' });
            var $form = ej.buildTag('form.e-treegridform', "", {}, { id: this._id + "EditFormDialog" });
            var cloneElement = this.model.editSettings.dialogEditorTemplateID;
            $form.html($(cloneElement).html());
            $tbody = this._renderDiaglogButton($form, $tbody);
            $.templates(this._id + "_JSONdialogTemplateMode", $tbody.html());
        },

        // To render the save/cancel buttons for treegrid add/edit dialog and add/edit template dialog
        _renderDiaglogButton: function (form, $formbody, $table) {
            var btnId, contextMenuLabel = this._contextMenuTexts, savebtn, cancelbtn;
            btnId = "EditFormDialog_";
            if (ej.isNullOrUndefined($table)) {
                savebtn = ej.buildTag('input.e-save e-button e-btnsub e-flat', "", { 'margin-left': '33%' }, { type: "button", id: btnId + this._id + "_Save" });
                savebtn.ejButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, text: contextMenuLabel["saveText"], width: "30%" });
                cancelbtn = ej.buildTag('input.e-cancel e-button e-btncan e-flat', "", { 'margin-left': '7%' }, { type: "button", id: btnId + this._id + "_Cancel" });
                cancelbtn.ejButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, text: contextMenuLabel["cancelText"], width: "30%" });
            } else {
                savebtn = ej.buildTag('input.e-save e-button e-btnsub e-flat', "", { 'margin-left': '0px' }, { type: "button", id: btnId + this._id + "_Save" });
                savebtn.ejButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, text: contextMenuLabel["saveText"], width: "45%" });
                cancelbtn = ej.buildTag('input.e-cancel e-button e-btncan e-flat', "", { 'margin-left': '10%' }, { type: "button", id: btnId + this._id + "_Cancel" });
                cancelbtn.ejButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, text: contextMenuLabel["cancelText"], width: "45%" });
            }
            var btnDiv = ej.buildTag('div', "", {}, { 'class': "e-editform-btn e-editdialogbutton" }),
                $innerTr, $innerTd1, $innerTd2;
            if (!ej.isNullOrUndefined($table)) {
                $innerTr = ej.buildTag('tr');
                $innerTd1 = ej.buildTag('td.e-editdialoglabel');
                $innerTd2 = ej.buildTag('td.e-editdialogrowcell');
            }
            btnDiv.append(savebtn);
            btnDiv.append(cancelbtn);
            if (!ej.isNullOrUndefined($table)) {
                $innerTd2.append(btnDiv);
                $innerTr.append($innerTd1);
                $innerTr.append($innerTd2);
                $table.append($innerTr);
            }
            form.appendTo($formbody);
            if (!ej.isNullOrUndefined($table))
                form.append($table);
            else
                form.append(btnDiv);
            return $formbody;
        },

        /* update allow keyboard navigation value*/
        updateAllowKeyboardNavigation: function (bool)
        {
            this.model.allowKeyboardNavigation = bool;
        },
        _updateSummaryTitleColumn: function () {
            var proxy = this,
                model = this.model;
            if (model.collapsibleTotalSummary && this._summaryColumnIndex == 0){
                if(model.columns[this._summaryColumnIndex].visible && !$("#" + proxy._id + "-footersummaryrow").find(".e-summarytitle").hasClass("e-summarycell")) {
                    $("#" + proxy._id + "-footersummaryrow").find(".e-summarytitle").addClass("e-summarycell");
                    $("#" + proxy._id + "-footersummaryrow").find(".e-summarycell").css({ "overflow": "hidden", "padding-left": "25px" , "float":"none" });
                    $("#" + proxy._id + "-footersummaryrow").find(".e-summarytitle").parent().addClass("e-summaryindend").css({ "padding-left": '0px' });
                }
                else if (!model.columns[this._summaryColumnIndex].visible && $("#" + proxy._id + "-footersummaryrow").find(".e-summarytitle").hasClass("e-summarycell")) {
                    $("#" + proxy._id + "-footersummaryrow").find(".e-summarytitle").removeClass("e-summarycell");
                    $("#" + proxy._id + "-footersummaryrow").find(".e-summarytitle").css({ "padding-left": "0px" , "float": "left"});
                    $("#" + proxy._id + "-footersummaryrow").find(".e-summarytitle").parent().removeClass("e-summaryindend").css({ "padding-left": '10px' });
                }
            }
        },
        /* Refresh footer summary records if total summary exist */
        _refreshFooterSummaryRecords: function () {
            var proxy = this,
                model = this.model;
            if (model.showTotalSummary && proxy._$footerContainer.length > 0) {
                if (this._frozenColumnsLength > 0) {
                    proxy._$footerContainer.html(this._renderSummaryByFrozenDesign());
                    this._renderFrozenSummary();
                } else {
                    var $table = ej.buildTag('table.e-table e-zerospace#' + proxy._id + "summarye-table", "",
                    { top: "0px" }),
                      $tbody = ej.buildTag('tbody');
                    $table.append(proxy.getContentTable().find('colgroup').clone()).append($tbody);
                    $tbody.html($.render[this._id + "_Template"](proxy._footerSummaryRecord));
                    proxy._$footerContainer.empty().append($table);
                }
                proxy._$footertableContent = proxy._$footerContainer.find(".e-table");
                proxy._updateSummaryTitleColumn();
            }
        },
        /* update scrollLeft of header container with content scrollLeft*/
        _updateHeaderScrollLeft: function (scrollLeft) {
            var proxy = this;
            if (ej.isNullOrUndefined(scrollLeft))
                scrollLeft = proxy.getScrollElement().ejScroller("option", "scrollLeft");
            if (this._frozenColumnsLength > 0) {
                proxy._$gridHeaderContainer.find("#e-movableheader" + this._id).scrollLeft(scrollLeft);
                if (proxy.model.showTotalSummary && proxy._$footerContainer)
                    proxy._$footerContainer.find("#e-movablefooter" + this._id).scrollLeft(scrollLeft);
            } else {
                proxy._$gridHeaderContainer.scrollLeft(scrollLeft);
                if (proxy.model.showTotalSummary && proxy._$footerContainer)
                    proxy._$footerContainer.scrollLeft(scrollLeft);
            }
        },
        //Update Columns Dynamically.
        updateColumns: function (columns) {
            var proxy = this,
               model = this.model;
            if (!ej.isNullOrUndefined(columns))
                model.columns = columns;
            if (model.isFromGantt && model.enableSerialNumber)
                proxy._updateTreeColumnIndex();
            proxy._refreshFrozenColumns();
            proxy._updateWrapRowHeights(null, "refreshAll");
            if (model.isFromGantt)
                proxy._updateAddEditDialogTemplate();
        },
        //Update the Gantt Columns from TreeGrid Columns.
        updateToGanttColumns: function () {
            var proxy = this,
                model = proxy.model,
                columns = model.columns,
                ganttObject = $("#" + proxy._id.replace("ejTreeGrid", "")).data("ejGantt");
            ganttObject.updateGanttColumns(columns);            
        },

        //Update the add and edit dialog template.
        _updateAddEditDialogTemplate: function () {
            var proxy = this, ganttObject;
            ganttObject = $("#" + proxy._id.replace("ejTreeGrid", "")).data("ejGantt");
            ganttObject.addDialogTemplate();
            ganttObject.editDialogTemplate();
        },
        /* Refresh columns collection with freeze and unfreeze*/
        _refreshFrozenColumns: function (isDataSourceUpdate) {
            var proxy = this,
               model = this.model,
               layoutUpdated = false;
            proxy._initFrozenColumns();
            proxy._processEditing();
            //Rerendering the column header with new columns.;
            proxy._$gridHeaderContent.replaceWith(proxy._renderGridHeader());
            proxy._addInitTemplate();
            if (model.isFromGantt)
                proxy._$gridContent.removeClass("e-borderbox");
            /* Render frozen and movable table if any column is frozen*/
            if (this._frozenColumnsLength > 0 && proxy._$frozenTableContent.length == 0) {
                layoutUpdated = true;
                var contentWidth = proxy._$gridContent.css("width"),
                    contentHeight = proxy._$gridContent.css("height");
                proxy._$gridContent.ejScroller("destroy");
                proxy._$gridContent.css("width", contentWidth);
                proxy._$gridContent.css("height", contentHeight);
                proxy._$gridContainer.html(proxy._renderByFrozenDesign());
                proxy.setGridContentTable(proxy._$gridContainer.find(".e-table"));
                if (model.allowTextWrap && !model.enableVirtualization)
                    proxy._$gridContainer.find("#e-movablecontent" + proxy._id + ",#e-movablecontentdiv" + proxy._id + ",#e-frozencontentdiv" + proxy._id).css("height", "auto");
                else
                    proxy._$gridContainer.find("#e-movablecontent" + proxy._id + ",#e-movablecontentdiv" + proxy._id + ",#e-frozencontentdiv" + proxy._id).css("height", proxy._$gridContainer.css("height"));
                proxy._renderScroller(true);
            } else if (proxy._$frozenTableContent.length > 0 && this._frozenColumnsLength == 0) {
                layoutUpdated = true;
                proxy._$gridContent.find("#e-movablecontainer" + proxy._id).ejScroller("destroy");
                var $table = ej.buildTag('table.e-table e-zerospace#' + proxy._id + "e-table", "",
                     { top: "0px", "position": "relative" }),
                     $tbody = ej.buildTag('tbody');
                $table.append(proxy.getHeaderTable().find('colgroup').clone()).append($tbody);
                proxy._$gridContainer.html($table);
                proxy.setGridContentTable($table);
                proxy._renderScroller(true);
            }
            /* Update table private  properties*/
            proxy._$frozenTableContent = $("#" + proxy._id + "frozene-table");
            proxy._$movableTableContent = $("#" + proxy._id + "movablee-table");
            proxy._$tableContent = $("#" + proxy._id + "e-table");

            if (model.showTotalSummary && proxy._$footerContainer.length > 0 && !isDataSourceUpdate) {
                proxy._refreshFooterSummaryRecords();
            }

            if (layoutUpdated) {
                proxy.onScrollHelper(0);
            }
            if (!isDataSourceUpdate) {
                var args = {};
                args.requestType = ej.TreeGrid.Actions.Refresh;
                /* for details rows detailsDataBound event can be called after the width update of column */
                proxy._isRendered = false;
                //Rerendering the content of the tree grid
                proxy.sendDataRenderingRequest(args);
                proxy._isRendered = true;
            }
            proxy.setWidthToColumns();
            proxy._trigger("headerRefresh");
            proxy._isRendered = true;
            if (!isDataSourceUpdate) {
                /* trigger queryCellInfo ,detailsDataBoundEvent after update the width of the columns */
                proxy._trigger("refresh");
                this._eventBindings();
            }
            this._hideCollapsedDetailsRows();

            /* Update the scrollbar*/
            if (!isDataSourceUpdate) {
                proxy.getScrollElement().ejScroller("refresh");
                proxy._updateScrollCss();
                if (model.isFromGantt) {
                    proxy._trigger("refreshScrollCss");
                }
            }
            if (model.showColumnChooser || model.contextMenuSettings.showContextMenu)
                proxy._renderColumnChooserList(true);
            /* update header and footer scrollLeft value*/
            proxy._updateHeaderScrollLeft();            
            
            if (model.isFromGantt) {
                /*Add additional td on column header to maintain column width*/
                proxy._addEmptyColumntoGrid();
                /*Updating the column properties to Gantt's model.columns*/
                proxy.updateToGanttColumns();
            }           
        },
        /* Freeze all Columns before argumented column*/
        freezePrecedingColumns: function (field) {
            var proxy = this, model = this.model,
                columns = model.columns,
                currentColumn = this.getColumnByField(field),
                columnIndex = columns.indexOf(currentColumn);
            /* Clear edit state , context menu and details template*/
            proxy._saveEditedElements();

            this._clearContextMenu();
            this._removeDetailsRow();
            this._clearColumnMenu();

            /* Check column is available or not*/
            if (ej.isNullOrUndefined(currentColumn) || columnIndex == -1)
                return false;
            /*Check all previous columns are in frozen*/
            if (columnIndex == 0 && columnIndex <= this._frozenColumnsLength)
                return false;
            /*Check frozen column width and container width */
            var frozenWidth = this._getFrozenColumnWidth(columnIndex);
            frozenWidth = frozenWidth + 18;
            if (frozenWidth > this._gridWidth)
                return false;
            /* update isFrozen API of columns and refresh the columns*/
            for (var count = 0; count < columnIndex; count++) {
                columns[count].isFrozen = true;
            }
            proxy._refreshFrozenColumns();
            proxy._updateWrapRowHeights(null,"virtualRefresh");
        },
        /* Public method for freeze or unfreeze the columns */
        freezeColumn: function (field, isFrozen) {
            var proxy = this, model = this.model,
                columns = model.columns,                
                currentColumn = this.getColumnByField(field);

            /* Clear edit state , context menu and details template*/
            proxy._saveEditedElements();

            this._clearContextMenu();
            this._removeDetailsRow();
            this._clearColumnMenu();

            if (model.selectionSettings.selectionMode == "cell")
                proxy.clearSelection();

            /* Check column is available or not*/
            if (ej.isNullOrUndefined(currentColumn))
                return false;
            /*Check all other columns are in frozen*/
            if (proxy._frozenColumnsLength == model.columns.length - 1 && isFrozen)
                return false;
            /* Check column is in same state*/
            if (currentColumn.isFrozen == isFrozen)
                return false;
            /*Check frozen column width and container width */
            var frozenWidth = this._getFrozenColumnWidth(),
                columnIndex = columns.indexOf(currentColumn);
            frozenWidth = frozenWidth + (isFrozen ? (this.columnsWidthCollection[columnIndex] + 18) : (-this.columnsWidthCollection[columnIndex]));
            if (frozenWidth > this._gridWidth)
                return false;

            currentColumn.isFrozen = isFrozen;
            /* refresh columns collection in UI*/
            proxy._refreshFrozenColumns();
            /*Updating the frozen columns when dynamically freeze the column */
            if (isFrozen)
                proxy._allowFreezingDefault = this._frozenColumnsLength > 0 ? true : false;
			proxy._off(proxy.element, "mousewheel DOMMouseScroll", proxy._mouseWheel);
            if (this._frozenColumnsLength)
                proxy._on(proxy.element, "mousewheel DOMMouseScroll", proxy._mouseWheel);
            proxy._updateWrapRowHeights(null, "virtualRefresh");
        },

        //Public method use to change checkbox Column
        updateCheckboxColumn: function(fieldName){
            var proxy = this, model = proxy.model,
                columns = model.columns,
                column = proxy.getColumnByField(fieldName);
            if (!proxy._checkboxSelection)
                return;
            $.each (columns, function (index, value) {
                value["showCheckbox"] = false;
            });
            if (!ej.isNullOrUndefined(column)) {                
                var index = columns.indexOf(column);
                if(index > -1)
                    columns[index]["showCheckbox"] = true;
            }            
            var selectionSettings = {}, args = {};
            selectionSettings.selectionType = ej.TreeGrid.SelectionType.Checkbox;
            args.selectionSettings = selectionSettings;
            proxy._refreshSelectionSettings(args, "selectionSettings");
        },

        //Refresh selectionSettings when update by setModel
        _refreshSelectionSettings: function (options, prop) {
            var proxy = this,
                model = proxy.model,
                isSelectionChanged = false;

            isSelectionChanged = !ej.isNullOrUndefined(options[prop].selectionType) || !ej.isNullOrUndefined(options[prop].selectionMode);

            if (prop == "selectionType") {
                model.selectionSettings.selectionType = options[prop];
                isSelectionChanged = true;
            }
            else if (prop == "selectionMode") {
                model.selectionSettings.selectionMode = options[prop];
                isSelectionChanged = true;
                if (model.showColumnChooser && model.showColumnOptions)
                    proxy.columnAddDialogTemplate();
            }
            else
                $.extend(model.selectionSettings, options[prop]);
                    

            var isCheckboxType = (model.selectionSettings.selectionType == ej.TreeGrid.SelectionType.Checkbox &&
              model.selectionSettings.selectionMode == ej.TreeGrid.SelectionMode.Row);

            // Unchecked all checked records
            if ((!ej.isNullOrUndefined(options[prop].enableHierarchySelection) && model.selectedItems.length > 0) ||
                    (!isCheckboxType && proxy._checkboxSelection)) {
                proxy._isFromSetmodel = true;
                proxy.selectAllRows(false);
                proxy._isFromSetmodel = false;
            }

            if (proxy._checkboxSelection || isCheckboxType) {
                proxy._checkboxSelection = isCheckboxType;
                proxy._processEditing();
                if ((!isCheckboxType && proxy._checkboxColumnName == "checkboxState") ||
                        (model.columns[0].nonColumn && proxy._checkboxColumnName != "checkboxState")) {
                    var treeGridIndexColumn = model.columns[model.treeColumnIndex];
                    if (model.columns[0]['isFrozen']) {
                        model.columns[0]['isFrozen'] = false;
                        proxy._frozenColumnsLength -= 1;
                        var index = proxy._frozenColumns.indexOf(model.columns[0]);
                        proxy._frozenColumns.splice(index, 1);
                        model.scrollSettings.frozenColumns = this._frozenColumnsLength;
                    }
                    model.columns.splice(0, 1);
                    if (treeGridIndexColumn)
                        model.treeColumnIndex = model.columns.indexOf(treeGridIndexColumn);
                }
                if (!proxy._checkboxSelection) proxy._checkboxColumnName = null;

                proxy._$gridHeaderContent.replaceWith(proxy._renderGridHeader());
                proxy._setWidthToHeaders();
                proxy._trigger("headerRefresh");
                if (model.allowFiltering)
                    proxy._resizeFilteringElements();
                if (isSelectionChanged) {
                    proxy._addInitTemplate();
                    this.renderRecords();
                }
                proxy.setWidthToColumns();
                proxy.getScrollElement().ejScroller("refresh");
                proxy._updateScrollCss();
                proxy._updateHeaderScrollLeft();
                //Updating header checkbox state while render dynamically            
                if (model.selectedItems.length > 0)
                    proxy.selectAllRows();
            }
            if(model.isFromGantt)
                proxy._processEditing();

        },

        //#region RUNTIME UPDATE METHOD FOR TREEGRID
        //METHOD FOR UPDATE THE TREEGRID IN RUN TIME
        _setModel: function (options) {

            var proxy = this,
                model = proxy.model,
                updatedRecords = proxy.getUpdatedRecords();

            for (var prop in options) {

                switch (prop) {

                    case "enableAltRow":
                        model.enableAltRow = options[prop];
                        proxy._addInitTemplate();
                        proxy.renderRecords(args);
                        proxy._updateWrapRowHeights("header", "refreshAll");
                        break;
                    case "allowFiltering":
                        if (!model.allowFiltering && proxy._filteredColumnValueID.length > 0) {
                            proxy._clearAllFilter(proxy._filteredColumnValue);
                        }
                        model.allowFiltering = options[prop];
                        proxy._initiateSetModel();
                        model.allowFiltering = options[prop];
                        var scroller = proxy.getScrollElement().ejScroller("instance"),
                          left = scroller.scrollLeft(), totalSummaryHeight = 0,
                          top = scroller.scrollTop();
                        //Re render the grid header
                        proxy._$gridHeaderContent.replaceWith(proxy._renderGridHeader());
                        proxy._setWidthToHeaders();
                        proxy._trigger("headerRefresh");
                        if (model.showTotalSummary)
                            totalSummaryHeight = proxy.element.find('.e-footersummaryrowdiv').outerHeight();
                        $("#" + proxy._id).addClass('e-treegrid-overflow');
                        proxy._viewPortHeight = proxy.element.height() - (proxy._getNonContentHeight() + totalSummaryHeight);
                        $("#" + proxy._id).removeClass('e-treegrid-overflow');
                        if (proxy._frozenColumnsLength > 0) {
                            proxy._$gridContent.css("height", proxy._viewPortHeight);
                        }
                        scroller.option("height",model.sizeSettings.height == "auto"?0:proxy._viewPortHeight);
                        if (model.enableVirtualization) {
                            var length = model.currentViewData.length,
                                rowHeight = model.rowHeight, isTopChanged;
                            rowHeight += (model.showDetailsRow && !model.showDetailsRowInfoColumn) ? model.detailsRowHeight : 0;
                            if ((length * rowHeight) < proxy._viewPortHeight) {
                                if (length > 0) {
                                    top = top - (proxy._viewPortHeight - ((length - 1) * rowHeight));
                                    if (top < 0)
                                        top = 0;
                                } else {
                                    proxy.processBindings();
                                    proxy.renderRecords();
                                }
                            }
                        }
                        //Update columnOptions fields
                        if (model.showColumnChooser && model.showColumnOptions)
                            proxy.columnAddDialogTemplate();
                        if (model.allowFiltering && model.filterSettings.filterType == "menu" && proxy._renderedFilterMenuDialog.length == 0)
                            proxy._renderFilterMenu();
                        //update the column width
                        this.setWidthToColumns();
                        scroller.scrollY(top, true);
                        scroller.scrollX(left, true);
                        proxy._updateHeaderScrollLeft(left);
                        proxy._updateScrollCss();
                        proxy._updateWrapRowHeights("row,total", "refreshAll");
                        break;
                    case "enableResize":
                        proxy.model.enableResize = options[prop];
                        if (model.enableResize) {
                            proxy._on($(window), "resize", proxy._windowResize);
                        }
                        else {
                            proxy._off($(window), "resize", proxy._windowResize);
                        }
                        break;

                    case "isResponsive":
                        proxy.model.isResponsive = options[prop];
                        if (model.isResponsive) {
                            proxy._on($(window), "resize", proxy._windowResize);
                            $("#" + proxy._id + "_toolbarItems").addClass("e-treegridadaptivetoolbar");
                            proxy._mediaQueryUpdate();
                        }
                        else {
                            proxy._off($(window), "resize", proxy._windowResize);
                            $("#" + proxy._id + "_toolbarItems").removeClass("e-treegridadaptivetoolbar");
                            proxy._mediaQueryUpdate();
                        }
                        break;

                    case "enableVirtualization":
                        model.enableVirtualization = options[prop];
                        var previousRecord = proxy._prevSelectedItem,
                            selectedRecord = proxy.selectedRowIndex() && updatedRecords[proxy.selectedRowIndex()];
                        proxy._vScrollDist = 1; //To set table top value properly on virtualization enabled mode while updating current view data
                        proxy.processBindings();
                        // change the table top position is 0 and change the update records for non-virtulization mode.
                        if (!model.enableVirtualization) {
                            if (this._frozenColumnsLength > 0) {
                                proxy._$frozenTableContent.css({
                                    "top": 0
                                });
                                proxy._$movableTableContent.css({
                                    "top": 0
                                });
                            } else {
                                proxy._$tableContent.css({
                                    "top": 0
                                });
                            }
                        }
                        selectedRecord && proxy.selectedRowIndex(updatedRecords.indexOf(selectedRecord));
                        var args = {};
                        args.requestType = ej.TreeGrid.Actions.Refresh;
                        proxy.sendDataRenderingRequest(args);
                        proxy._updateWrapRowHeights(null,"refreshAll");
                        proxy._isRowEdit = model.isEdit = false;
                        proxy._cancelSaveTools();
                        proxy._clearColumnMenu();
                        proxy._clearContextMenu();
                        this._removeDetailsRow();
                        proxy._vScrollDist = 0;
                        break;

                    case "allowColumnResize":
                        model.allowColumnResize = options[prop];
                        if (model.allowColumnResize)
                            proxy._resizer = new ej.gridFeatures.gridResize(proxy);
                        proxy._enableColumnResizeEvents();
                        break;

                    case "allowSorting":
                        model.allowSorting = options[prop];
                        proxy.sortSetting(options[prop]);
                        if (model.showColumnChooser && model.showColumnOptions)
                            proxy.columnAddDialogTemplate();
                        break;
                    case "allowPaging":
                        var $pagerElement = proxy.element.find("#" + proxy._id + "Pager");
                        if (model.allowPaging) {
                            proxy._updateTotalRecordsCount();
                            proxy.element.append(proxy._renderGridPager());
                            proxy.element.append($pagerElement);
                            proxy.element.find(".e-pager").css({ "width": proxy._gridWidth - 2 });
                            var scroller = proxy.getScrollElement().ejScroller("instance"),
                                left = scroller.scrollLeft(),
                                top = scroller.scrollTop();
                            proxy._viewPortHeight = proxy._getViewPortHeight();
                            if (model.showTotalSummary)
                                proxy._viewPortHeight -= proxy._$totalSummaryRowContainer.outerHeight();
                            if (proxy._frozenColumnsLength > 0)
                                proxy._$gridContent.css("height", proxy._viewPortHeight);
                            scroller.option("height", model.sizeSettings.height == "auto" ? 0 : proxy._viewPortHeight);
                            scroller.scrollY(top, true);
                            scroller.scrollX(left, true);
                            proxy._pagerHeight = $($pagerElement).outerHeight();
                            proxy.gotoPage();
                        }
                        else {

                            var height = $($pagerElement).outerHeight();
                            $($pagerElement).remove();
                            proxy._viewPortHeight = proxy._viewPortHeight + height;
                            if (this._frozenColumnsLength > 0) {
                                proxy._$gridContent.css("height", proxy._viewPortHeight);
                            }

                            proxy.getScrollElement().ejScroller({
                                height: proxy._viewPortHeight,//for border-width of gridcontent
                            });
                            if (model.pageSettings.totalRecordsCount > 0) {
                                model.pageSettings.totalRecordsCount = null;
                                proxy._refreshDataSource();
                            }
                            else
                                proxy.refreshContent();
                            proxy.renderRecords();
                            proxy._isRefreshAddedRecord = false;
                        }
                        proxy._updateWrapRowHeights("header", "refreshAll");
                        break;
                   
                    case "dragTooltip":
                        var tooltipValue = options[prop].tooltipItems;
                        if (tooltipValue && !Array.isArray(tooltipValue)) {
                            tooltipValue = tooltipValue.length > 0 ? tooltipValue.split(",") : [];
                            options[prop].tooltipItems = tooltipValue;
                        }
                        $.extend(model.dragTooltip, options[prop]);
                        proxy._createDragTooltipTemplate();
                        proxy.refreshContent();
                        break;

                    case "allowDragAndDrop":
                        model.allowDragAndDrop = options[prop];
                        var matched = jQuery.uaMatch(navigator.userAgent);                                                
                        proxy.refreshContent();
                        break;

                    case "sortSettings":
                        $.extend(model.sortSettings, options[prop]);
                        proxy.refreshContent();
                        var refreshArgs = {};
                        refreshArgs.requestType = ej.TreeGrid.Actions.Sorting;
                        proxy.sendDataRenderingRequest(refreshArgs);                       
                        break;

                    case "allowSelection":                      
                        model.allowSelection = options[prop];
                        if (!model.allowSelection) {
                            if (proxy._checkboxSelection && model.selectedItems.length > 0) {
                                proxy._isFromSetmodel = true;
                                proxy.selectAllRows(false);
                                proxy._isFromSetmodel = false;
                            }
                            proxy.clearSelection(-1);
                            proxy.selectedRowIndex(-1);
                            proxy.model.selectedItem = null;
                            proxy._cancelSaveTools();
                        }
                        break;

                    case "allowTextWrap":
                    case "headerTextOverflow":
                        if (prop == "allowTextWrap")
                            model.allowTextWrap = options[prop];
                        if (prop == "headerTextOverflow") {
                            model.headerTextOverflow = options[prop];
                            proxy._$gridHeaderContent.replaceWith(proxy._renderGridHeader());
                            proxy.setWidthToColumns();
                            proxy._trigger("headerRefresh");
                            proxy.getScrollElement().ejScroller("refresh");
                            proxy._updateScrollCss();
                        }
                        if (prop == "allowTextWrap") {
                            proxy._addInitTemplate();
                            proxy.renderRecords(args);
                            if (proxy.model.showTotalSummary) {
                                proxy._createTotalSummaryRow();
                            }
                        }
                        proxy._updateWrapRowHeights(null,"refreshAll");
                        break;

                    case "selectionType":
                    case "selectionMode":
                    case "selectionSettings":
                        this._initiateSetModel();
                        proxy.clearAllSelection();
                        proxy._refreshSelectionSettings(options, prop);
                        if (proxy.model.allowSelection && proxy.model.selectionSettings.selectionType == "multiple" && $("#" + proxy._id + "_selectionpopup").length == 0 && !proxy.model.isFromGantt) {
                            proxy._renderMultiSelectionIndicator();
                        }
                        break;
                    case "showSummaryRow":
                        model.showSummaryRow = options[prop];
                        if (model.showSummaryRow) {
                            proxy._createSummaryRow();
                            var refreshArgs = {};
                            refreshArgs.requestType = ej.TreeGrid.Actions.Refresh;
                            proxy.sendDataRenderingRequest(refreshArgs);
                        }
                        else {
                            $(proxy.element).find(".e-summaryrow").hide();
                            model.updatedRecords = proxy._spliceSummaryRows(model.updatedRecords);
                            if (model.allowPaging) { 
                                proxy._updateCurrentViewData();
                                var refreshArgs = {};
                                refreshArgs.requestType = ej.TreeGrid.Actions.Refresh;
                                proxy.sendDataRenderingRequest(refreshArgs);
                            }
                        }                       
                        proxy.updateCollapsedRecordCount();
                        proxy._updateWrapRowHeights("header");
                        proxy.updateHeight();
                        if (model.allowTextWrap || model.headerTextOverflow == "wrap") {
                            proxy._updateGridContentHeight();
                        }
                        break;
                    case "totalSummaryHeight":
                        if (!model.showTotalSummary) return;                        
                        proxy._createTotalSummaryRow();
                        proxy._viewPortHeight = proxy._getViewPortHeight();                  
                        proxy._viewPortHeight -= proxy._$totalSummaryRowContainer.outerHeight();                      
                        proxy._updateSummaryHeight();                                
                        break;
                    case "collapsibleTotalSummary":
                        if (!model.showTotalSummary) return;
                        if (model.summaryRows.length == 1) {
                            model.collapsibleTotalSummary = false;
                            return;
                        }
                        proxy._addInitTemplate();
                        proxy._createTotalSummaryRow();
                        if (!model.collapsibleTotalSummary) {
                            proxy._viewPortHeight = proxy._getViewPortHeight();
                            proxy._viewPortHeight -= $(proxy._$totalSummaryRowContainer).outerHeight();
                            proxy._updateSummaryHeight();
                        }
                        break;
                    case "showTotalSummary":
                        model.showTotalSummary = options[prop];
                        if (model.showTotalSummary) {
                            proxy._createTotalSummaryRow();
                            proxy._viewPortHeight = proxy._getViewPortHeight();
                            proxy._viewPortHeight -= $(proxy._$totalSummaryRowContainer).outerHeight();
                        }
                        else {
                            $(proxy.element).find(".e-footersummaryrowdiv").remove();
                            proxy._$totalSummaryRowContainer = null,
                            proxy._$footertableContent = null,
                            proxy._$footerContainer = null,
                            proxy._footerSummaryRecord = [];
                            proxy._footerSummaryRows = [];
                            proxy._viewPortHeight = proxy._getViewPortHeight();
                        }
                        proxy._updateSummaryHeight();
                       
                        break;
                    case "selectedRowIndex":
                        if (!this.isEdit && !this._isRowEdit) {
                            if (this.selectedRowIndex() >= 0
                                && !ej.isNullOrUndefined(this.selectedRowIndex()) && model.allowSelection && updatedRecords.length > this.selectedRowIndex()
                                && this.getExpandStatus(updatedRecords[this.selectedRowIndex()])) {
                                var index = this.selectedRowIndex();
                                if (!proxy._rowSelectingEventTrigger(this._previousIndex, index)) {
                                    if (model.showSummaryRow) {
                                        var recordsWithOutSummary = proxy._spliceSummaryRows(model.updatedRecords),
                                            currentSelectedRecord = recordsWithOutSummary[index];
                                        index = updatedRecords.indexOf(currentSelectedRecord);
                                    }
                                    proxy.selectRows(index);
                                    proxy._rowSelectedEventTrigger(index);
                                }
                            } else {
                                proxy.clearSelection(-1);
                                proxy.selectedRowIndex(-1);
                                proxy.model.selectedItem = null;
                                proxy._previousIndex = -1;
                            }
                            proxy._cancelSaveTools();
                        } else {
                            this.selectedRowIndex(updatedRecords.indexOf(proxy._prevSelectedItem));
                        }
                        break;
                    case "selectedCellIndexes":
                        if (model.allowSelection && model.selectionSettings.selectionMode == "cell") {                            
                            proxy.selectCells(options[prop]);                            
                        }
                        break;
                    case "showStackedHeader":
                    case "stackedHeaderRows":
                        if (model.showStackedHeader && ((model["stackedHeaderRows"] && model.stackedHeaderRows.length > 0) ||
                            (options["stackedHeaderRows"] && options.stackedHeaderRows.length > 0))) {
                            if (ej.getObject("stackedHeaderRows.length", options))
                                model.stackedHeaderRows = options["stackedHeaderRows"];
                            (proxy.getHeaderTable().find(".e-stackedHeaderRow").length>0) && proxy.getHeaderTable().find(".e-stackedHeaderRow").remove();
                            proxy._refreshStackedHeader();
                        }
                        else
                            (proxy.getHeaderTable().find(".e-stackedHeaderRow").length > 0) && proxy.getHeaderTable().find(".e-stackedHeaderRow").remove();
                        break;
                    case "editSettings":
                        $.extend(model.editSettings, options[prop]);
                        proxy._processEditing();
                        proxy._enableEditingEvents();
                        proxy._updateToolbarItems();
                        if (model.editSettings.allowDeleting && model.editSettings.showDeleteConfirmDialog)
                        ej.isNullOrUndefined(proxy._confirmDialog) && proxy._renderConfirmDialog();
                        break;

                    case "allowKeyboardNavigation":
                        model.allowKeyboardNavigation = options[prop];
                        break;

                    case "dataSource":
                        var eventArgs = {};
                        eventArgs["requestType"] = ej.TreeGrid.Actions.RefreshDataSource;
                        eventArgs["isUpdateColumns"] = false;
                        if (!proxy._isRowEdit && !proxy.model.isEdit && !proxy._trigger("actionBegin", eventArgs)) {
                            proxy._fieldNamesToQuery = [];
                            proxy._assignedIdCollections = [];
                            proxy._assignedParendIDs = [];
                            proxy._refreshDataSource(eventArgs);
                        }
                        break;

                    case "columns":
                        model.columns = options[prop].slice(0);
                        proxy._validateColumnFields();
                        proxy._validateColumnVisible(true);
                        proxy._refreshFrozenColumns();
                        proxy._updateWrapRowHeights(null, "refreshAll");
                        break;
                    
                    case "rowHeight":
                        model.rowHeight = options[prop];
                        proxy._addInitTemplate();
                        proxy.renderRecords(args);
                        if (proxy.model.showTotalSummary) {
                            proxy._createTotalSummaryRow();
                            proxy._viewPortHeight = proxy._getViewPortHeight();
                            proxy._viewPortHeight -= proxy._$totalSummaryRowContainer.outerHeight();
                            proxy._updateSummaryHeight();                           
                        }
                        proxy.updateHeight();
                        break;

                    case "treeColumnIndex":
                        proxy.columnIndex(options[prop]);
                        break;

                    case "showColumnChooser":
                        model.showColumnChooser = options[prop];
                        proxy._$gridHeaderContent.replaceWith(proxy._renderGridHeader());
                        proxy.setWidthToColumns();
                        proxy._trigger("headerRefresh");
                        proxy.getScrollElement().ejScroller("refresh");
                        proxy._updateScrollCss();
                        if (!model.showColumnChooser){
                            proxy._clearColumnMenu();
                            $("#" + proxy._id + "ccDiv_wrapper").remove();
                            $("#" + proxy._id + "filterMenu_wrapper").remove();
                        }
                        else {
                            proxy._renderColumnChooser();
                            if(model.allowFiltering && model.filterSettings.filterType == "menu" && proxy._renderedFilterMenuDialog.length == 0)
                            proxy._renderFilterMenu();
                        }
                        proxy._updateWrapRowHeights("row,total", "refreshAll");
                        /*Add empty column in gantt*/
                        if (model.isFromGantt) {
                            proxy._addEmptyColumntoGrid();
                            this._updateHeaderScrollLeft(this.getScrollElement().ejScroller("model.scrollLeft"));
                        }
                        break;
                    case "showColumnOptions":
                        model.showColumnOptions = options[prop];
                        proxy._$gridHeaderContent.replaceWith(proxy._renderGridHeader());
                        proxy.setWidthToColumns();
                        proxy._trigger("headerRefresh");
                        proxy.getScrollElement().ejScroller("refresh");
                        proxy._updateScrollCss();
                        if (model.showColumnChooser && model.showColumnOptions) {
                            proxy.columnAddDialogTemplate();
                            proxy._renderUpdateConfirmDialog();
                        }
                        else {
                            proxy._clearColumnMenu();
                            $("#" + proxy._id + "ccDiv_wrapper").remove();
                            $("#" + proxy._id + "filterMenu_wrapper").remove();
                        }
                        proxy._updateWrapRowHeights("row,total", "refreshAll");
                        /*Add empty column in gantt*/
                        if (model.isFromGantt) {
                            proxy._addEmptyColumntoGrid();
                        }
                        break;
                    case "locale":
                        proxy._clearContextMenu();
                        proxy._clearColumnMenu();
                        proxy._removeDetailsRow();
                        model.locale = options[prop];
                        proxy._setCultureInfo();
                        proxy._processEditing();
                        proxy._addInitTemplate();
                        proxy.refreshContent();
                        //Re render the grid header(for updating filtering elements also) and content
                        proxy._$gridHeaderContent.replaceWith(proxy._renderGridHeader());
                        proxy.renderRecords(args);
                        proxy.setWidthToColumns();
                        proxy._trigger("headerRefresh");
                        // Update the scrollbar
                        proxy.getScrollElement().ejScroller("refresh");
                        proxy._updateScrollCss();
                        // Update the column chooser
                        if (model.showColumnChooser)
                            proxy._renderColumnChooserList(true);
                        // Update the toolbar
                        if (model.toolbarSettings.showToolbar)
                            proxy._updateToolbar();
                        if (model.allowPaging)
                            proxy.getPager().ejPager("option", options[prop]).ejPager("refreshPager");
                        if (proxy.model.showColumnChooser && proxy.model.showColumnOptions) {
                            proxy.columnAddDialogTemplate();
                            proxy._renderUpdateConfirmDialog();
                        }
                        if (model.allowFiltering && model.filterSettings.filterType == "menu")
                            proxy._renderFilterMenu();
                        proxy._updateWrapRowHeights(null,"refreshAll");
                        break;
                    case "toolbarSettings": 
                        $.extend(proxy.model.toolbarSettings, options[prop]);
                        proxy._updateToolbar();
                        proxy._updateWrapRowHeights("header","refreshAll");
                        break;
                    case "contextMenuSettings":
                        $.extend(proxy.model.contextMenuSettings, options[prop]);
                        if (!model.contextMenuSettings.showContextMenu)
                            proxy._clearContextMenu();
                        this._removeDetailsRow();
                        break;
                    case "enableCollapseAll":
                        model.enableCollapseAll = options[prop];
                        if (model.enableCollapseAll)
                            proxy.collapseAll();
                        else
                            proxy.expandAll();
                        break;
                    case "showDetailsRow":
                        model.showDetailsRow = options[prop];
                        this._updateDetailsRowProperties("showDetailsRow");
                        break;
                    case "detailsRowHeight":
                        model.detailsRowHeight = options[prop];
                        this._updateDetailsRowProperties("detailsRowHeight");
                        break;
                    case "detailsTemplate":
                        model.detailsTemplate = options[prop];
                        this._updateDetailsRowProperties("detailsTemplate");
                        break;
                    case "showDetailsRowInfoColumn":
                        model.showDetailsRowInfoColumn = options[prop];
                        this._updateDetailsRowProperties("showDetailsRowInfoColumn");
                        break;
                    case "altRowTemplateID":
                        this._initiateSetModel();
                        model.altRowTemplateID = options[prop];
                        proxy._addInitTemplate();
                        proxy.renderRecords(args);
                        proxy._updateWrapRowHeights("header");
                        this.updateHeight();
                        if (model.allowTextWrap || model.headerTextOverflow == "wrap") {
                            proxy._updateGridContentHeight();
                        }
                        break;
                    case "rowTemplateID":
                        this._initiateSetModel();
                        model.rowTemplateID = options[prop];
                        proxy._addInitTemplate();
                        proxy.renderRecords(args);
                        proxy._updateWrapRowHeights("header");
                        this.updateHeight();
                        if (model.allowTextWrap || model.headerTextOverflow == "wrap") {
                            proxy._updateGridContentHeight();
                        }
                        break;
                    case "pageSettings":
                        this._initiateSetModel();
                        if (model.allowPaging) {
                            var pagerModel = {};
                            $.extend(model.pageSettings, options[prop]);
                            $.extend(pagerModel, model.pageSettings);
                            delete pagerModel.template;
                            this.getPager().ejPager("option", pagerModel).ejPager("refreshPager");
                            if (options[prop].totalRecordsCount > 0) {
                                proxy._refreshDataSource();
                            }
                                else
                                    proxy.gotoPage();
                            }
                        break;
                    case "sizeSettings":
                        this._initiateSetModel();
                        $.extend(model.sizeSettings, options[prop]);

                        this._calculateDimensions();
                        if (this._getViewPortHeight() <= 0) {
                            model.sizeSettings.height = "450px";
                            this._updateElementHeight();
                        }
                        this._windowResize();
                        break;
                    case "readOnly":
                        model.readOnly = options[prop];
                        break;
                    case "showGridCellTooltip":
                        model.showGridCellTooltip = options[prop];
                        break;

                    case "showGridExpandCellTooltip":
                        model.showGridExpandCellTooltip = options[prop];
                        break;

                    case "allowMultiSorting":
                        model.allowMultiSorting = options[prop];
                        break;

                    case "query":
                        if (!ej.isNullOrUndefined(options[prop]))
                            model.query = options[prop];
                        else
                            model.query = ej.Query();
                        proxy._refreshDataSource();
                        break;
                    case "filterSettings":
                        if (model.allowFiltering) {
                            if (!options.filterSettings.filterType && model.filterSettings.filterType == "filterbar") {
                            var filterSettings,
                                filterBarMode, args = {};
                            $.extend(proxy.model.filterSettings, options[prop]);
                            filterSettings = proxy.model.filterSettings;
                            filterBarMode = ej.isNullOrUndefined(filterSettings.filterBarMode) ? "immediate" : filterSettings.filterBarMode;
                            // Get the filteredColumn value before going to clear the filter columns
                            var newFilterColumn = $.extend([], filterSettings.filteredColumns);

                            for (var column = 0; column < model.columns.length; column++) {
                                if (model.columns[column].allowFiltering)
                                proxy._clearFilterElementValue(model.columns[column]);
                            }

                            filterSettings.filteredColumns = newFilterColumn;
                            filterSettings.filterBarMode = filterBarMode;
                            args.requestType = "filtering";

                            for (var i = 0; i < newFilterColumn.length; i++)
                                $("#" + proxy._id + "_" + newFilterColumn[i].field.split('.').join("") + "_filterbarcell").val(newFilterColumn[i].value);
                            //Render the record with sorting and filtering
                            proxy._ensureDataSource(args);
                            proxy._off(proxy.element, "keyup", ".e-filterbarcell input", proxy._filterBarHandler);
                            proxy._off(proxy.element, "click", ".e-filterbarcell .e-checkbox", proxy._filterBarHandler);
                            //Method binding for filtering data.
                            if (filterBarMode == "immediate") {
                                proxy._on(proxy.element, "keyup", ".e-filterbarcell input", proxy._filterBarHandler);
                                proxy._off(proxy.element, "click", ".e-filterbarcell .e-checkbox")._on(proxy.element, "click", ".e-filterbarcell .e-checkbox", proxy._filterBarHandler);
                            }
                            }
                            else if (options.filterSettings.filterType) {
                                proxy.clearFilter();
                                model.allowFiltering = true;
                                $.extend(proxy.model.filterSettings, options[prop]);
                                proxy._initiateSetModel();
                                if (proxy._isExcelFilter) {
                                    proxy._isExcelFilter = false;
                                    proxy._excelFilter.resetExcelFilter();
                                    proxy._excelFilter = null;
                                    proxy._excelColTypes = [];
                                }
                                var scroller = proxy.getScrollElement().ejScroller("instance"),
                                  left = scroller.scrollLeft(),
                                  top = scroller.scrollTop();
                                //Re render the grid header
                                proxy._$gridHeaderContent.replaceWith(proxy._renderGridHeader());
                                proxy._setWidthToHeaders();
                                proxy._trigger("headerRefresh");
                                $("#" + proxy._id).addClass('e-treegrid-overflow');
                                proxy._viewPortHeight = proxy._getViewPortHeight();
                                $("#" + proxy._id).removeClass('e-treegrid-overflow');
                                if (model.filterSettings.filterType == "menu" && proxy._renderedFilterMenuDialog.length == 0)
                                    proxy._renderFilterMenu();
                                else if (model.filterSettings.filterType == "excel") {
                                    proxy._renderExcelFilter();
                                }
                                if (proxy._frozenColumnsLength > 0) {
                                    proxy._$gridContent.css("height", proxy._viewPortHeight);
                                }
                                scroller.option("height", model.sizeSettings.height == "auto" ? 0 : proxy._viewPortHeight);
                                if (model.enableVirtualization) {
                                    var length = model.currentViewData.length,
                                        rowHeight = model.rowHeight, isTopChanged;
                                    rowHeight += (model.showDetailsRow && !model.showDetailsRowInfoColumn) ? model.detailsRowHeight : 0;
                                    if ((length * rowHeight) < proxy._viewPortHeight) {
                                        if (length > 0) {
                                            top = top - (proxy._viewPortHeight - ((length - 1) * rowHeight));
                                            if (top < 0)
                                                top = 0;
                                        } else {
                                            proxy.processBindings();
                                            proxy.renderRecords();
                                        }
                                    }
                                }
                                //Update columnOptions fields
                                if (model.showColumnChooser && model.showColumnOptions)
                                    proxy.columnAddDialogTemplate();
                                //update the column width
                                this.setWidthToColumns();
                                scroller.scrollY(top, true);
                                scroller.scrollX(left, true);
                                proxy._updateHeaderScrollLeft(left);
                                proxy._updateScrollCss();
                            }
                            else
                            {
                                if (model.filterSettings.filterType == "excel") {
                                    proxy._excelColTypes = [];
                                    proxy._excelFilter.resetExcelFilter();
                                    proxy._excelFilter = null;
                                    proxy._renderExcelFilter();
                                }
                            }
                            if (options.filterSettings.filterHierarchyMode)
                                proxy.clearFilter();
                        }
                        break;
                    case "searchSettings":
                        var settings = options[prop];
                        for (var setting in settings) {
                            switch (setting) {
                                case "searchHierarchyMode":
                                    proxy.model.searchSettings.searchHierarchyMode = settings[setting];
                                    proxy.element.find("input.e-searchinput").val("");
                                    $("span.e-searchcancel").addClass("e-hide");
                                    proxy.search("");
                                    break;
                            }
                        }
                    case "columnResizeSettings":
                        var $headerTable, $contentTable, $totalSummaryTable;
                        this._initiateSetModel();
                        $.extend(model.columnResizeSettings, options[prop]);
                        this._updateGridResizeSettings();
                        var columnResizeMode = model.columnResizeSettings.columnResizeMode;
                        if (columnResizeMode == ej.TreeGrid.ColumnResizeMode.FixedColumns) {
                            this._updateTableWidth();
                        } else {
                            if (this._frozenColumnsLength > 0) {
                                $headerTable = $(this.getHeaderTable()[1]);
                                $contentTable = $(this.getContentTable()[1]);
                                $totalSummaryTable = model.showTotalSummary ? $(this._$footertableContent[1]) : null;
                            } else {
                                $headerTable = this.getHeaderTable();
                                $contentTable = this.getContentTable();
                                $totalSummaryTable = model.showTotalSummary ? $(this._$footertableContent[0]) : null;
                            }
                            //set width to 100% for all tables in treegrid in normal resize mode
                            $headerTable.css("width", "").removeClass("e-tableLastCell");
                            $contentTable.css("width", "").removeClass("e-tableLastCell");
                            $totalSummaryTable && $totalSummaryTable.css("width", "").removeClass("e-tableLastCell");
                        }
                        this._updateScrollCss();
                        break;
                    case "cssClass":
                        this.element.removeClass(proxy._cssClass).addClass(options[prop]);
                        this.model.allowPaging && ($("#" + this._id + "Pager").ejPager("model.cssClass", options[prop]));
                        model.toolbarSettings.showToolbar && ($("#" + proxy._id + "_toolbarItems").ejToolbar("model.cssClass", options[prop]));
                        if (proxy._updateConfirmDialog) {
                            proxy._updateConfirmDialog.data("ejDialog") && proxy._updateConfirmDialog.ejDialog("model.cssClass", options[prop]);
                        }
                        for (var count = 0; count < proxy._renderedFilterMenuDialog.length; count++) {
                            if (proxy._renderedFilterMenuDialog[count] == "stringedit") {
                                $("#" + this._id + "filterStringMenuDiv_wrapper").find(".e-dropdownlist").ejDropDownList("model.cssClass", options[prop]);
                                $("#" + this._id + "filterStringMenuDiv_wrapper").find(".e-button").ejButton("model.cssClass", options[prop]);
                                $("#" + this._id + "filterStringMenuDiv_wrapper").find(".e-autocomplete").ejAutocomplete("model.cssClass", options[prop]);
                            }
                            else if (proxy._renderedFilterMenuDialog[count] == "numericedit") {
                                $("#" + this._id + "filterNumericMenuDiv_wrapper").find(".e-dropdownlist").ejDropDownList("model.cssClass", options[prop]);
                                $("#" + this._id + "filterNumericMenuDiv_wrapper").find(".e-button").ejButton("model.cssClass", options[prop]);
                                $("#" + this._id + "filterNumericMenuDiv_wrapper").find(".e-numerictextbox").ejNumericTextbox("model.cssClass", options[prop]);
                            }
                            else if (proxy._renderedFilterMenuDialog[count] == "datepicker") {
                                $("#" + this._id + "filterDatepickerMenuDiv_wrapper").find(".e-dropdownlist").ejDropDownList("model.cssClass", options[prop]);
                                $("#" + this._id + "filterDatepickerMenuDiv_wrapper").find(".e-button").ejButton("model.cssClass", options[prop]);
                                $("#" + this._id + "filterDatepickerMenuDiv_wrapper").find(".e-datepicker").ejDatePicker("model.cssClass", options[prop]);
                            }
                            else if (proxy._renderedFilterMenuDialog[count] == "datetimepicker") {
                                $("#" + this._id + "filterDatetimePickerMenuDiv_wrapper").find(".e-dropdownlist").ejDropDownList("model.cssClass", options[prop]);
                                $("#" + this._id + "filterDatetimePickerMenuDiv_wrapper").find(".e-button").ejButton("model.cssClass", options[prop]);
                                $("#" + this._id + "filterDatetimePickerMenuDiv_wrapper").find(".e-datetimepicker").ejDateTimePicker("model.cssClass", options[prop]);
                            }
                            else if ("#" + proxy._renderedFilterMenuDialog[count] == "dropdownedit") {
                                $("#" + this._id + "filterDropdownMenuDiv_wrapper").find(".e-dropdownlist").ejDropDownList("model.cssClass", options[prop]);
                                $("#" + this._id + "filterDropdownMenuDiv_wrapper").find(".e-button").ejButton("model.cssClass", options[prop]);
                            }
                            else if ("#" + proxy._renderedFilterMenuDialog[count] == "booleanedit") {
                                $("#" + this._id + "filterBooleanMenuDiv_wrapper").find(".e-dropdownlist").ejDropDownList("model.cssClass", options[prop]);
                                $("#" + this._id + "filterBooleanMenuDiv_wrapper").find(".e-button").ejButton("model.cssClass", options[prop]);
                            }
                        }
                        this.columnAddDialogTemplate();
                        $("#" + proxy._id + 'ConfirmDialog_wrapper').find(".e-button").ejButton("model.cssClass", options[prop]);
                        if (this.model.editSettings.allowEditing && this.model.editSettings.editMode == "dialogEditing" && (ej.isNullOrUndefined(proxy.model.editSettings.dialogEditorTemplateID) || proxy.model.editSettings.dialogEditorTemplateID == "")) {
                            proxy._treeGridAddEditDialog();
                        } else if (this.model.editSettings.allowEditing && this.model.editSettings.editMode == "dialogEditing" && (!ej.isNullOrUndefined(proxy.model.editSettings.dialogEditorTemplateID) && proxy.model.editSettings.dialogEditorTemplateID != "")) {
                            proxy._treeGridAddEditDialogTemplate();
                        }
                        if (model.showColumnChooser)
                            this._renderColumnChooserList(true);
                        proxy._cssClass = options[prop];
                        break;
                    case "enableLoadOnDemand":
                        model.enableLoadOnDemand = options[prop];
                        proxy._refreshDataSource();
                        break;
                }
            }
        },
        //update container height on dynamic update of total summary
        _updateSummaryHeight: function () {
            var proxy = this,
               model = this.model, prevSummaryTop;
            var scroller = proxy.getScrollElement().ejScroller("instance"),
                           left = scroller.scrollLeft(),
                           top = scroller.scrollTop();
            prevSummaryTop = top;
            if (proxy._frozenColumnsLength > 0) {
                proxy._$gridContent.css("height", proxy._viewPortHeight);
            }
            scroller.option("height", model.sizeSettings.height == "auto" ? 0 : proxy._viewPortHeight);          
            if (model.enableVirtualization) {
                var length = model.currentViewData.length,
                    rowHeight = model.rowHeight;
                rowHeight += (model.showDetailsRow && !model.showDetailsRowInfoColumn) ? model.detailsRowHeight : 0;
                if ((length * rowHeight) < proxy._viewPortHeight) {
                    if (length > 0) {
                        top = top - (proxy._viewPortHeight - ((length - 1) * rowHeight));
                        if (top < 0)
                            top = 0;
                    } else {
                        proxy.processBindings();
                        proxy.renderRecords();
                    }
                }
            }
            scroller.scrollY(top, true);
            scroller.scrollX(left, true);
            proxy._updateHeaderScrollLeft(left);
            proxy._updateScrollCss();
            proxy._updateWrapRowHeights("header", "refreshAll");
            if (prevSummaryTop == top) {
                proxy._updateCurrentViewData();
                var refreshArgs = {};
                refreshArgs.requestType = ej.TreeGrid.Actions.Refresh;
                proxy.sendDataRenderingRequest(refreshArgs);
            }
        },
        /* clear contextMenu, columnChooser, detailsTemplate and save edited item before change
        property by setModel*/
        _initiateSetModel: function ()
        {
            var proxy = this;

            proxy._saveEditedElements();
            proxy._clearContextMenu();
            proxy._clearColumnMenu();
            proxy._removeDetailsRow();
        },
        /* update the tree grid control as per new detailsRow fetaures API values by setModel */
        _updateDetailsRowProperties: function (property) {

            var proxy = this,
                model = this.model;

            /* cance edited cell or row */
            if(model.isEdit || this._isRowEdit){
                this.cancelRowEditCell();
                this._cancelSaveTools();
            }
            /* clear columnchooser menu and contextmenu and detail wrapper */
            this.clearColumnMenu();
            this._clearContextMenu();
            this._removeDetailsRow();
             
            /* update the detailsRowHeight private property */
            if (model.showDetailsRow && model.detailsTemplate && !model.showDetailsRowInfoColumn) {
                proxy._detailsRowHeight = model.detailsRowHeight;
            } else {
                proxy._detailsRowHeight = 0;
            }

            /* update the details expand status as per details feture API values */
            model.flatRecords.forEach(function (record) {
                if (model.showDetailsRow && model.detailsTemplate) {
                    record.isDetailsExpanded = model.showDetailsRowInfoColumn ? false : true;
                } else {
                    record.isDetailsExpanded = false;
                }
            });
            
            /* update the tree grid control as per new detailsRow API's */
            if ((property == "detailsTemplate" || property == "detailsRowHeight") && model.showDetailsRowInfoColumn) {
                proxy._addInitTemplate();
            } else {
                proxy._$gridHeaderContent.replaceWith(proxy._renderGridHeader());
                proxy._addInitTemplate();
                /* while changing details row features API scroll top is assigned to beacause of rowHeight changes*/
                this.onScrollHelper(0);
                proxy.refreshContent();

                /* for details rows detailsDataBound event can be called after the width update of column */
                proxy._isRendered = false;
                //Rerendering the content of the tree grid
                var refreshArgs = {};
                refreshArgs.requestType = ej.TreeGrid.Actions.Refresh;
                proxy.sendDataRenderingRequest(refreshArgs);
                proxy.setWidthToColumns();
                proxy._isRendered = true;
                proxy._trigger("headerRefresh");
                proxy._trigger("refresh");
                /* trigger queryCellInfo ,detailsDataBoundEvent after update the width of the columns */
                this._eventBindings();
                this._hideCollapsedDetailsRows();

                proxy.getScrollElement().ejScroller("refresh");
                proxy._updateScrollCss();
            }
            proxy._updateWrapRowHeights(null,"refreshAll");
        },
        /* hide the collapsed state detail rows for prevent alignement issue for rendering sf control in  display none state*/
        _hideCollapsedDetailsRows:function()
        {
            var proxy = this, model = this.model;
            /* Collapse hidden expanded details rows */
            if (model.showDetailsRow && model.detailsTemplate && !model.showDetailsRowInfoColumn) {
                if (this._frozenColumnsLength > 0)
                    $(proxy.getTreeGridRows()[0]).add(proxy.getTreeGridRows()[1]).filter("tr.e-collapsedrowexpandeddetailsrow").css("display", "none");
                else
                    $(proxy.getTreeGridRows()).filter("tr.e-collapsedrowexpandeddetailsrow").css("display", "none");
            }
        },
        _updateToolbar: function () {
            var proxy = this,
                model = proxy.model,
                scroller = proxy.getScrollElement().ejScroller("instance"),
                           left = scroller.scrollLeft(),
                           top = scroller.scrollTop();
            //$.extend(proxy.model.toolbarSettings, options[prop]);
            $("#" + proxy._id + "_toolbarItems").remove();
            $("#" + proxy._id + "_toolbarItems_Main").remove();
            if (model.toolbarSettings.showToolbar)
                proxy._renderToolbarTemplate().insertBefore($("#" + proxy._id + "e-gridheader"));
            if (model.isEdit)
                proxy.cancelEditCell();
            if (proxy._isRowEdit) {
                proxy.cancelRowEditCell();
                proxy._cancelSaveTools();
            }
            proxy._viewPortHeight = proxy._getViewPortHeight();
            if (proxy._frozenColumnsLength > 0) {
                proxy._$gridContent.css("height", proxy._viewPortHeight);
            }
            scroller.option("height", model.sizeSettings.height == "auto" ? 0 : proxy._viewPortHeight);
            if (model.enableVirtualization) {
                proxy.processBindings();
                proxy.renderRecords();
            }
            scroller.option("scrollTop", top);
            scroller.option("scrollLeft", left);
            proxy._clearContextMenu();
            this._removeDetailsRow();

        },
        //refresh data source on set model     
        _refreshDataSource: function (refreshArgs)
        {
            var proxy = this, model = this.model, args;
            //Cancelling the editable state of the row
            if (proxy._isRowEdit || proxy.model.isEdit) {
                proxy.cancelRowEditCell();
            }
            proxy.resetModelCollections();
            proxy._createdAt = "load";
            if (refreshArgs && refreshArgs.isUpdateColumns) {
                proxy._validateColumnFields();
                proxy._validateColumnVisible(true);
                proxy._refreshFrozenColumns(true);
            }

            proxy._dataManager = proxy.dataSource() instanceof ej.DataManager ? proxy.dataSource() :
                proxy.dataSource() != null ? ej.DataManager(proxy.dataSource()) : null;

            if (this.dataSource() instanceof ej.DataManager || this.dataSource()) {
                proxy._isForDataSourceRefresh = true;
                proxy._initDatasource(); 
            }
            else if (this.dataSource() == null) {
                args = {};
                args["requestType"] = ej.TreeGrid.Actions.RefreshDataSource;
                proxy._ensureDataSource(args);
                proxy._createdAt = null;
                if (model.showSummaryRow || model.showTotalSummary) {
                    proxy._summaryRow();
                }
            }
            $(".e-tooltiptable").remove();
        },
        //REFRESH THE TREEGRIDCONTENT
        refreshContent: function () {

            var proxy = this,
                args = {};     
            args.requestType = ej.TreeGrid.Actions.Refresh;
            proxy.processBindings(args);
        },


        //RESET THE COLLECTIONS WHILE CHANGING THE DATASOURCE
       
        resetModelCollections: function () {

            var proxy = this,
            model = proxy.model;

            // model.sortSettings.sortedColumns = [];
            model.currentViewData = [];
            model.flatRecords = [];
            model.parentRecords = [];
            model.updatedRecords = [];
            model.summaryRowRecords = [];
            model.ids = [];
            proxy.secondaryDatasource = [];
            proxy._parentRecords = [];
            proxy._storedIndex = -1;
            proxy._idGenerator = -1; //unique id only use for treegrid
            proxy._taskIds = [];
            proxy._jsonData = null;
            proxy._lastInsertedId = -1;
        },        

        //#endregion

        //DECLARE THE PRIVATE VARIABLES
        _initPrivateProperties: function () {

            var proxy = this,
                model = this.model;
            proxy._isInManualExpandCollapse = false; // Property to diffrentiate footer expand and collapse action by user or by method
            proxy._id = proxy.element.attr("id"),
            proxy.columnsWidthCollection = [],
            proxy._cSortedColumn = null,
            proxy._taskIds=[],
            proxy._maxZIndex=0,
            proxy._cSortedDirection = null,
            proxy._dataManager = null,
            proxy._persistCollapseState = false,
            proxy._filteredRecords = [],
            proxy._disabledToolItems = [],
            proxy._currentFilterColumn = [],
            proxy._fieldColumnNames = [],
            proxy._multiSortRequest = null,
            proxy._$gridContainer = null,
            proxy._$gridContent = null,
            proxy._$gridContentTable = null,
            proxy._$gridHeaderTable = null,
            proxy._$gridHeaderContainer = null,
            proxy._$totalSummaryRowContainer = null,
            proxy._recordsCount = null,
            proxy._$gridRows = null,
            proxy._gridRows = null,
            proxy._commandColumnLength = 0,
            this._frozenColumnsLength = 0,
            proxy._initFrozenColumns(),
            proxy._allowFreezingDefault = this._frozenColumnsLength > 0 ? true : false;
            proxy._calculateDimensions(),
            proxy._headerColumnNames = [],
            proxy._hiddenColumns = [],
            proxy._multiSelectCtrlRequest = false,
            proxy._multiSelectShiftRequest = false,
            proxy._ganttTouchTrigger = false,
            proxy._moveRow = false,
            proxy._draggedRecords = [];
            proxy._offset = 0,
            proxy._previousIndex = -1,
            proxy._prevRBottom = 0,
            proxy._prevRTop = 0,
            proxy._prevScrollTop = 0,
            proxy._prevScrollLeft = 0,
            proxy._prevVBottom = 0,
            proxy._resizer = null,
            proxy._scrollTop = 0,
            proxy._scrollLeft = 0,
            proxy._searchString = "",
            proxy._fieldName = "",
            proxy._selectedCellsinARow = [],
            proxy._currentRecordIndex = -1,
            proxy._sortedRecords = [],
            proxy._storedIndex = -1,
            proxy._rowIndex = -1,
            proxy._$tableContent = null,
            proxy._$footertableContent = null,
             proxy._$footerContainer = null,
            proxy._summaryExpanded = true,
            proxy._tempsortedrecords = [],
            proxy._totalHeight = 0,
            proxy._viewPortHeight = 0,
            proxy._recordIndexCount = 0,
            proxy._totalCollapsedRecordCount = 0,
            proxy._visibleColumns = [],
            proxy._visibleRange = null,
            proxy._vScrollDir = 1,
            proxy._vScrollDist = 0,
            proxy._cellEditTemplate = $(),
            proxy._tooltipTimer,
            proxy._totalBorderWidth = 2;//left and right border width
            proxy._totalBorderHeight = 1;
            proxy._toolboxTooltipTexts = null;
            proxy._contextMenuTexts = null;
            proxy._columnMenuTexts = null;
            proxy._deleteColumnText = null;
            proxy._okButtonText = null;
            proxy._cancelButtonText = null;
            proxy._confirmDeleteText = null;
            proxy._dropDownListBlanksText = null;
            proxy._editTypeText = null;
            proxy._textAlignType = null;
            proxy._clipMode = null;
            proxy._dropDownListClearText = null;
            proxy._trueText = null;
            proxy._falseText = null;
            proxy._rowDragIndexes = [];
            proxy._dropCancel = false;
            proxy._cellEditingDetails = {
                cellValue: null,
                rowIndex: -1,
                columnIndex: -1,
                fieldName: null,
                _data: null,
                cellEditType: "",
                cancelSave: false,
                defaultData: null,
                insertedTrCollection: [],
                data: null
            },
           proxy._previousSelectedCellDetails = {
               rowElement: null,
               cellElement: null,
               cellIndex: -1,
               rowIndex: -1,
           },
           proxy._shiftKeyFirstElementDetails = {
               firstElementRowIndex: -1,
               firstElementCellIndex: -1
           },
            proxy._selectedCellDetails = [];
            proxy._focusingRowIndex = -1,
            proxy._rowIndexOfLastSelectedCell = -1,
            proxy._lastSelectedCellIndex = -1,
            proxy._isEnterKeyPressed = false,
            proxy._isShiftKeyNavigation = false;
            proxy._scrollBarHeight = 18,
            proxy._removedCount = 0,
            proxy._$gridHeaderContent = null,
            proxy.secondaryDatasource = [],
            //variables for context menu items
            proxy._contextMenuItems = null;
            proxy._subContextMenuItems = null;
           
            proxy._createContextMenuTemplate();
            proxy._createColumnMenuTemplate();
            proxy._retrivedData = this.dataSource();
            proxy._createdAt = "load";
            proxy._isInExpandCollapseAll = false;
            proxy._isLoadonDemand = false;
            proxy._assignedIdCollections = [];
            proxy._totalItemCounts = null;
            proxy._assignedParendIDs = [];
            proxy._fieldNamesToQuery = [];
            proxy._isForDataSourceRefresh = false;
            proxy._allParentItems = [];
            proxy._queryForLoadonDemand = [];
            proxy._pageRecordCountOnDemand = null;
            proxy._isFromDemandMethod = false;                        
            proxy._dataManager = proxy.dataSource() instanceof ej.DataManager ? proxy.dataSource() :
                proxy.dataSource() != null ? ej.DataManager(proxy.dataSource()) : null;
            proxy._dragMouseDown = false;
            proxy._dragTooltip = false;
            proxy._dragMouseLeave = false;
            proxy._timerDragDown = null;
            proxy._timerDragUp = null;
            /* Check data manger is updatable */ 
            proxy._isDataManagerUpdate = false;
            proxy._jsonData = null;

            /* flag for refreshing newly added record */
            proxy._isRefreshAddedRecord = false;
            /* Used as flag for refresh chart and grid rows on adding when parent item is in collpased state*/
            proxy._isInAdd = false;         
            /* get unique index for tree grid add whil add */
            proxy._maxRowIndex = 0;
           /* used to check treegrid rendering is completed on load time*/
            proxy._isRendered = false;
            this._updateGridResizeSettings();
            proxy.batchChanges = {
                added: [],
                deleted: [],
                changed: [],
                updatedHierarchyRowIndexData: []
            };
            proxy._batchEditCancel = false;
            proxy._isSummaryRow = false;
            proxy._flatChildRecords = [];
            proxy._footerSummaryRecord = [];
            proxy._filteredChildRecords = [];
            proxy._parentRecords = [];
            proxy._zerothLevelParentRecords = [];
            proxy._detailsRowHeight = 0;
            if (model.showDetailsRow && model.detailsTemplate && !model.showDetailsRowInfoColumn)
            {
                proxy._detailsRowHeight = model.detailsRowHeight;
            }
            proxy._isEmptyRow = false;            
            proxy._prevSelectedItem = null;
            proxy._dataSourcefields = [];
            proxy._columnDialogTexts = null;
            proxy._columnDialogTitle = null;
            proxy._addColumnFields = [];
            proxy._addColumnFieldsTxt = [];
            proxy._targetColumnIndex = 0;
            proxy._insertPosition = null;
            proxy._updateconfirmDialog = null;
            proxy._columnRenameDialog = null;
            proxy._renderedSubMenuType = null;
            proxy.localizedLabels = proxy._getLocalizedLabels();
            proxy._gridRecordsCount = model.pageSettings.totalRecordsCount;                            
            proxy._gridPager = null;
            proxy._summaryRowsCount = 0;                                 
            proxy._updatedPageData = [];
            proxy._isNextPage = false;
            model.selectionSettings.selectionType = model.selectionSettings.selectionType != "single" ? model.selectionSettings.selectionType :
                    model.selectionType != "single" ? model.selectionType : model.selectionSettings.selectionType;
            model.selectionSettings.selectionMode = model.selectionSettings.selectionMode != "row" ? model.selectionSettings.selectionMode :
                    model.selectionMode != "row" ? model.selectionMode : model.selectionSettings.selectionMode;
            proxy._idGenerator = -1;
            proxy._checkboxColumnName = null;
            proxy._isFromSetmodel = false;
            proxy._flatFilteredRecords = [];
            proxy._checkboxSelection = (model.selectionSettings.selectionType == ej.TreeGrid.SelectionType.Checkbox && 
                model.selectionSettings.selectionMode == ej.TreeGrid.SelectionMode.Row),            
            proxy._addCheckboxColumn = this._getDefaultCheckboxColumn(),
            proxy._filteredColumnValue = [];
            proxy._filteredColumnValueID = [];
            proxy._filterIconTarget = null;
            proxy._renderedFilterMenuDialog = [];
            proxy._filtermenutext = null;
            proxy._headerDragStatus = "";
            proxy._draggedColumn = null;
            proxy._mouseDragged = false;
            if (!ej.isNullOrUndefined(model.indentLevelWidth) && model.isFromGantt)
                proxy.treeIndentLevelWidth = model.indentLevelWidth;
            else
                proxy.treeIndentLevelWidth =  proxy.treeIndentLevelWidth ? proxy.treeIndentLevelWidth : 10;
            proxy._draggedColumnTemplate = null;
            proxy._viewPortWidth = proxy._gridLeft = 0;            
            proxy._responsiveMinWidth = 768;
            proxy._dy = proxy._dx = 0;
            proxy._isTouchEvent = false;
            proxy._isTouchTrigger = false;
            proxy._currentEditRecordDialogIndex = -1;
            proxy._isTreeAddEditDialogSave = false;
            proxy._displayContextMenu = model.contextMenuSettings.showContextMenu ? true : false;
            proxy._isEmptyRowDeleted = false;
            proxy._cssClass = this.model.cssClass;
            proxy._batchEditStarts = false;
            proxy._batchSaveCancel = "";
            proxy._batchSaveConfirmText = null;
            proxy._batchSaveLostChangesText = null;
            proxy._cancelEditText = null;
            proxy._batchTempDetails = {};
            proxy._autoHideColumns = [];
            proxy._autoShowColumns = [];
            proxy._textWrapRowsDatas = [];
            proxy._textWrapNoCalculate = false;
            proxy._expandCollapsePages = [];
            proxy._expandCollapseSettings = {
                state: "",
                atLevel: "",
                level: 0,
            };
            proxy._excelFilter = null;
            proxy._menuColTypes = [];
            proxy._excelColTypes = [];
            proxy._isExcelFilter = false;
            proxy._customFilter = null;
            proxy._mediaStatus = false;
            proxy._filterString = "";
            proxy._isCloseFilterMenu = false;
            proxy._isRemoteData = false;
            proxy._lastInsertedId = -1;
            proxy._confirmDialog = null;
            proxy._shiftSelectedRecord = null;
            proxy._deleteRowIndex = -1;
            proxy._isFromContextmenu = false;
            proxy._emptyRowIndex = -1;
        },
        //Return default check box selection column obect
        _getDefaultCheckboxColumn: function () {
            return {
                field: "checkboxState",
                headerText: "",
                allowEditing: false,
                allowDelete: false,
                allowSorting: false,
                allowFiltering: false,
                allowCellSelection: false,
                isFrozen: false,
                nonColumn:true,
                editType: "booleanedit",
                width: 50,
                textAlign:"center"
            };
        },
        //update columnResizeSettings API to grid resizeSettings API
        _updateGridResizeSettings: function () {
            var resizeSettings = {
                resizeMode: (this.model.columnResizeSettings.columnResizeMode == "fixedcolumns" ? "control" : this.model.columnResizeSettings.columnResizeMode)
            };
            this.model.resizeSettings = resizeSettings;
        },
        //set size to treegrid core by user values
        _calculateDimensions: function ()
        {
            var proxy = this, model = this.model;

            if (!model.isFromGantt) {
                if (model.sizeSettings.width)
                    proxy.element.css("width", model.sizeSettings.width);

                if (model.sizeSettings.height)
                    proxy.element.css("height", model.sizeSettings.height);
                else
                {
                    if (!proxy.element[0].style.height) {
                        proxy.element.height(450);
                    }
                    else
                        model.sizeSettings.height = proxy.element[0].style.height;
                }
            }
            proxy._gridHeight = Math.round(proxy.element.height());
            proxy._gridWidth = Math.round(proxy.element.width());

            if (this._frozenColumnsLength > 0) {
                var frozenWidth = 0;
                for (var count = 0; count <= this._frozenColumnsLength; count++) {
                    if (model.columns[count])
                        frozenWidth += ej.isNullOrUndefined(model.columns[count].width) ? 150 : parseInt(model.columns[count].width);
                }
                if (proxy._gridWidth < frozenWidth) {
                    proxy.element.css("width", frozenWidth);
                    model.sizeSettings.width = proxy._gridWidth = frozenWidth;
                }
            }
        },

        /* Reordering and initialize frozen and unfrozen columns*/
        _initFrozenColumns: function ()
        {
            var frozen = [], unfrozen = [], visibleFrozenColumns = 0, visibleUnfrozenColumns = 0,
                model = this.model, columns = model.columns, treeColumn, summaryTreeColumn;
            treeColumn = columns[model.treeColumnIndex];
            if (model.showTotalSummary && model.collapsibleTotalSummary) summaryTreeColumn = columns[this._summaryColumnIndex];
            for (var columnCount = 0; columnCount < columns.length; columnCount++) {
                if (columns[columnCount]["isFrozen"] === true) {
                    frozen.push(columns[columnCount]);
                    if (ej.isNullOrUndefined(columns[columnCount].visible) || columns[columnCount].visible || columns[columnCount] == treeColumn)
                        visibleFrozenColumns += 1;
                }
                else {
                    unfrozen.push(columns[columnCount]);
                    if (ej.isNullOrUndefined(columns[columnCount].visible) || columns[columnCount].visible || columns[columnCount] == treeColumn)
                        visibleUnfrozenColumns += 1;
                }
            }
            if (frozen.length > 0) {
                /*one column must be in un frozen state*/
                if (model.columns.length && model.columns.length == frozen.length) {
                    unfrozen = frozen.splice(frozen.length - 1, 1);
                    unfrozen[0].isFrozen = false;
                }
                model.columns = $.merge($.merge([], frozen), unfrozen);
            }
            this._frozenColumns = frozen;
            this._unFrozenColumns = unfrozen;
            /*Update minimum number of column to visible*/
            if (visibleFrozenColumns == 0 && this._frozenColumns[0])
                this._frozenColumns[0].visible = true;
            if (visibleUnfrozenColumns == 0 && this._unFrozenColumns[0])
                this._unFrozenColumns[0].visible = true;
            if (treeColumn)
                model.treeColumnIndex = model.columns.indexOf(treeColumn);
            if (model.showTotalSummary && model.collapsibleTotalSummary)
                this._summaryColumnIndex = model.columns.indexOf(summaryTreeColumn);
            this._frozenColumnsLength = frozen.length;
            model.scrollSettings.frozenColumns = this._frozenColumnsLength;
        },
        //update altrow when enableCollapseAll enabled.
        updateAltRowOnCollapseAll: function () {
            var proxy=this, model=proxy.model;
            if (model.enableAltRow && model.enableCollapseAll) {
                var records = model.parentRecords,
                    record;
                for (var count = 0; count < records.length; count++) {
                    record = records[count];
                    if (record.isSummaryRow)
                        continue;
                    record.isAltRow = count % 2 == 0 ? false : true;
                }
            }
        },
        //update altrow when expandStateMapping is defined.
        updateAltRowOnRendering: function () {
            var proxy = this, model = proxy.model;           
            var records = model.updatedRecords.filter(function (record) {
                if (record.parentItem == null)
                    return record;
                else if (record.parentItem.expanded)
                    return record;
            });
            for (var count = 0; count < records.length; count++) {
                var record = records[count];
                if (record.isSummaryRow)
                    continue;
                record.isAltRow = count % 2 == 0 ? false : true;
            }            
        },
        //DATASOURCE CHECKING
        _checkDataBinding: function () {

            var proxy = this,
                model = proxy.model;
            $("#" + proxy._id).addClass('e-treegrid-overflow');
            proxy._createdAt = null;
            proxy.element.addClass('e-treegrid-core');
            proxy.element.attr("tabindex", "0");
            model.cssClass && this.element.addClass(model.cssClass);
            proxy._renderToolbar();
            if (proxy._checkboxSelection)
                proxy._updateCheckboxColumnName();
            if (model.isFromGantt && model.enableSerialNumber)
                proxy._updateTreeColumnIndex();
            proxy._renderAfterColumnInitialize();
            if (proxy.model.showColumnChooser || model.contextMenuSettings.showContextMenu) {
                proxy._renderColumnChooser();
            }
            if (proxy.model.allowFiltering && model.filterSettings.filterType == "menu")
                proxy._renderFilterMenu();
            else if (model.allowFiltering && model.filterSettings.filterType == "excel")
                proxy._renderExcelFilter();
            proxy._setWidthToHeaders();
            if (proxy.model.allowPaging) {
                proxy.element.append(proxy._renderGridPager());
            }
            proxy._viewPortHeight = proxy._getViewPortHeight();

            //rendering confirmation dialog initially
            if (proxy.model.editSettings.showConfirmDialog || proxy.model.editSettings.showDeleteConfirmDialog) {
                proxy._renderConfirmDialog();
            }

            /* check if viewport heigth value*/
            if (!model.isFromGantt && proxy._viewPortHeight < 0) {
                proxy._updateElementHeight();
            }
            proxy._searchString = model.searchSettings.key;
            proxy._ensureDataSource();
            if (model.showSummaryRow)
                proxy._createSummaryRow();
            if (!model.isFromGantt)
                proxy.updateAltRowOnCollapseAll();
            if (model.expandStateMapping && model.enableAltRow)
                proxy.updateAltRowOnRendering();
            proxy._initGridRender();          
            proxy._$gridContent = $("#" + proxy._id + "e-gridcontent");
            proxy._$gridContainer = $("#" + proxy._id + "e-gridcontainer");
            proxy._$tableContent = $("#" + proxy._id + "e-table");
            proxy._$frozenTableContent = $("#" + proxy._id + "frozene-table");
            proxy._$movableTableContent = $("#" + proxy._id + "movablee-table");
            proxy._viewPortHeight = proxy._getViewPortHeight();
            proxy._$gridContent.css({ "height": proxy._viewPortHeight + "px" });
            proxy.element.find(".e-pager").css({ "width": proxy._gridWidth - 2 });
            proxy._pagerHeight = proxy.element.find(".e-pager").outerHeight();
            if (model.showTotalSummary) {
                proxy._createTotalSummaryRow();
                proxy._viewPortHeight = proxy._getViewPortHeight();
                if (!model.allowPaging || model.sizeSettings.height) {
                    proxy._viewPortHeight -= proxy._$totalSummaryRowContainer.height() < model.totalSummaryHeight ? proxy._$totalSummaryRowContainer.height() : model.totalSummaryHeight;
                    proxy._viewPortHeight = proxy._viewPortHeight - 1 // border bottom
                }
            }
            proxy._updatePagerTextAlignment();
           // proxy.updateHeight();
            proxy._wireEvents();
            
            proxy.setWidthToColumns();
            proxy._trigger("headerRefresh");
            proxy._renderScroller();
            proxy._updateWrapRowHeights();
            if (model.allowTextWrap && model.enableVirtualization) {
                proxy._textWrapRowsDatas = proxy._getAvgTextWrapRowHeight("getAvgHeight");
            }
            proxy.updateHeight();
            proxy._updateScrollCss();
            proxy._resizeFilteringElements();
            proxy._updateFixedTableBorder();
            proxy._initialEndRendering();
            if (model.allowTextWrap || model.headerTextOverflow == "wrap")
                proxy._updateGridContentHeight();
            if (model.isFromGantt) {
                proxy._addEmptyColumntoGrid();
            }
            if (!model.isFromGantt) {
                proxy._checkDataManagerUpdate();
            } else {
                proxy._isDataManagerUpdate = model.dataManagerUpdate.isDataManagerUpdate;
                proxy._jsonData = model.dataManagerUpdate.jsonData;
            }
            if (proxy.model.allowSelection && proxy.model.selectionSettings.selectionType == "multiple" && !proxy.model.isFromGantt) {
                proxy._renderMultiSelectionIndicator();
            }
            $("#" + proxy._id).removeClass('e-treegrid-overflow');
        },

        //Render Multi selection indicator
        _renderMultiSelectionIndicator: function () {
            this._multiSelectPopup = ej.buildTag("div.e-treegridpopup#" + this._id + "_selectionpopup", "", { display: "none" });
            var $content = ej.buildTag("div.e-popupcontent"), $downTail = ej.buildTag("div.e-downtail e-tail");
                var $selElement = ej.buildTag("span.e-rowselect e-icon");
                $content.append($selElement);
            this._multiSelectPopup.append($content);
            this._multiSelectPopup.append($downTail);
            this.element.append(this._multiSelectPopup);
        },

        //Updated records of online data manager 
        getUpdatedDataManagerData: function () {
            var proxy = this, data;
            data = proxy._jsonData;
            return data;
        },
        /* To update tree column index of TaskId column during Serial number */
        _updateTreeColumnIndex: function () {
            var proxy = this, model = proxy.model,
                columns = model.columns,
                taskIdColumn, taskIdIndex,
                treeIndex = +(model.treeColumnIndex);
            $.map(columns, function (col) {
                if (col.field == "taskId") {
                    taskIdColumn = col;
                    return false;
                }
            });
            taskIdIndex = columns.indexOf(taskIdColumn);
            if (taskIdIndex == treeIndex) {
                if (taskIdIndex != columns.length - 1)
                    model.treeColumnIndex = treeIndex + 1;
                else
                    model.treeColumnIndex = treeIndex - 1;
            }
        },

        //Method to update the text wrap grids heights.
        //element atgument is used prevent the specific row heights.
        //refreshAction argument is used to make necessary view port height updation.
        //Index and type argument is used to update the specific row height.
        _updateWrapRowHeights: function (element, refreshAction, index, type) {
            var proxy = this, model = this.model;
            if ((model.allowTextWrap || model.headerTextOverflow == "wrap") && proxy._$frozenTableContent.length > 0) {
                proxy.getScrollElement().ejScroller("refresh");
                if (model.headerTextOverflow == "wrap" && (ej.isNullOrUndefined(element) || element.indexOf("header") == -1))
                    proxy._updateHeaderHeight();
                if (model.allowTextWrap && (ej.isNullOrUndefined(element) || element.indexOf("row") == -1)) {
                    if (ej.isNullOrUndefined(index) && ej.isNullOrUndefined(type))
                        proxy._updateRowHeight();
                    else
                        proxy._updateRowHeight(index, type);
                    if (model.showTotalSummary && (ej.isNullOrUndefined(element) || element.indexOf("total") == -1)) {
                        proxy._updateTotalSummaryHeight();
                    }
                    proxy.getScrollElement().ejScroller("refresh");
                    var movableScrollTop = proxy.getScrollElement().ejScroller("model.scrollTop");
                    proxy._getFrozenScrollElement().scrollTop(movableScrollTop);
                }
            }
            if (refreshAction == "virtualRefresh" && (model.allowTextWrap || model.headerTextOverflow == "wrap")) {
                if (model.allowTextWrap && model.enableVirtualization) {
                    proxy.updateHeight();
                }
                proxy._updateGridContentHeight();
            } else if (refreshAction == "refreshAll" && (model.allowTextWrap || model.headerTextOverflow == "wrap")) {
                proxy.updateHeight();
                proxy._updateGridContentHeight();
            }
            if (model.sizeSettings.height == "auto") {
                proxy._updateContentHeight();
            }
        },

        //Update Header height when and frozen column text wrap is in enable state.
        _updateHeaderHeight: function () {
            var proxy = this, maxheight = 0, frozen = proxy.getHeaderContent().find("#e-frozenheaderdiv" + this._id).find('tr')[0],
                movable = proxy.getHeaderContent().find("#e-movableheaderdiv" + this._id).find('tr')[0];
            $(movable).css('height', 'auto');
            $(frozen).css('height', 'auto');
            if (frozen.offsetHeight > movable.offsetHeight)
                $(movable).css('height', frozen.offsetHeight);
            else if (movable.offsetHeight > frozen.offsetHeight)
                $(frozen).css('height', movable.offsetHeight);
        },

        //Update total summary row height when text wrap and frozen column  is in enable state.
        _updateTotalSummaryHeight: function () {
            var proxy = this, model = this.model, maxheight = 0, frozen = $(proxy._$footertableContent[0]).find('tr'),
                movable = $(proxy._$footertableContent[1]).find('tr'), length = $(frozen).length, frozenHeight, movableHeight;
            for (var index = 0; index < length; index++) {
                $(movable[index]).css('height', model.rowHeight);
                $(frozen[index]).css('height', model.rowHeight);
                frozenHeight = $(frozen[index]).height();
                movableHeight = $(movable[index]).height();
                if (frozenHeight >= movableHeight) {
                    $(movable[index]).css('height', frozenHeight);
                    $(frozen[index]).css('height', frozenHeight);
                } else if (movableHeight > frozenHeight) {
                    $(frozen[index]).css('height', movableHeight);
                    $(movable[index]).css('height', movableHeight);
                }
            }
                if (proxy._$totalSummaryRowContainer.hasClass("e-scroller"))
                    proxy._$totalSummaryRowContainer.ejScroller("refresh");
        },

        //Update all rows height when text wrap and frozen column is in enable state.
        _updateRowHeight: function (index, type) {
            if (this.getRows().length > 0) {
            var proxy = this, model = this.model, frozenHeight = 0, start = 0, movableHeight = 0, length = 0, frozen = [], movable = [], currentData;
            if (!ej.isNullOrUndefined(index)) {
                if (model.enableVirtualization && type != "rowEdit") {
                    currentData = model.currentViewData[index];
                    index = proxy.getUpdatedRecords().indexOf(currentData);
                }
                start = index;
                length = index + 1;
                frozen[start] = $(ej.TreeGrid.getRowByIndex(proxy, index)[0]);
                movable[start] = $(ej.TreeGrid.getRowByIndex(proxy, index)[1]);
            } else {
                start = 0;
                length = proxy.getRows()[0] ? proxy.getRows()[0].length : 0;
                frozen = proxy.getRows()[0];
                movable = proxy.getRows()[1];
            }
            for (var rowIndex = start; rowIndex < length; rowIndex++) {
                if ((!ej.isNullOrUndefined(index) && (type == "rowEdit" || type == "savecell")) || type == "resize") {
                    $(frozen[rowIndex]).css('height', model.rowHeight);
                    $(movable[rowIndex]).css('height', model.rowHeight);
                }
                if (type != "rowEdit") {
                    frozenHeight = $(frozen[rowIndex]).height();
                    movableHeight = $(movable[rowIndex]).height();
                    if (frozenHeight >= movableHeight) {
                        $(movable[rowIndex]).css('height', frozenHeight);
                        $(frozen[rowIndex]).css('height', frozenHeight);
                    } else if (movableHeight > frozenHeight) {
                        $(frozen[rowIndex]).css('height', movableHeight);
                        $(movable[rowIndex]).css('height', movableHeight);
                    }
                }
            }
                }
        },

        //Check if data manager is updatable
        _checkDataManagerUpdate: function () {
            var proxy = this,
                dataSource = this.dataSource();
            proxy._isDataManagerUpdate = false;
            proxy._jsonData = null;

            if (dataSource instanceof ej.DataManager) {
                if (dataSource.dataSource.offline && dataSource.dataSource.json) {
                    proxy._isDataManagerUpdate = true;
                    proxy._jsonData = dataSource.dataSource.json;
                }
                else if (!dataSource.dataSource.offline) {
                    proxy._isDataManagerUpdate = true;
                    proxy._jsonData = proxy._retrivedData;
                }
            }
        },

        _initDatasource: function () {
            var proxy = this,
                model = proxy.model, retriveData;
            if (!model.isFromGantt) {
                if (this.dataSource() instanceof ej.DataManager) {

                    if (ej.isNullOrUndefined(proxy._waitingPopupObj))
                        proxy._renderWaitingPopup();
                    else
                        proxy._waitingPopupObj.show();
                    var isRemoteData = this.dataSource().adaptor instanceof ej.UrlAdaptor || this.dataSource().adaptor instanceof ej.WebMethodAdaptor ||
                                            this.dataSource().adaptor instanceof ej.WebApiAdaptor || this.dataSource().adaptor instanceof ej.ODataAdaptor,
                        isStaticData = (ej.pvt.filterQueries(model.query.queries, "onTake").length == 0 && ej.pvt.filterQueries(model.query.queries, "onPage").length == 0
                                        && ej.pvt.filterQueries(model.query.queries, "onWhere").length == 0) ? false : true;
                    proxy._isRemoteData = isRemoteData;
                    if (isRemoteData && !this.dataSource().dataSource.offline && !isStaticData && model.enableLoadOnDemand) {
                        proxy._isLoadonDemand = true;
                        proxy._getAndRenderRecordsonDemand();
                    }
                    else {
                        proxy._isLoadonDemand = false;
                        model.query.requiresCount();
                        var queryPromise = this.dataSource().executeQuery(model.query);
                        queryPromise.done(ej.proxy(function (e) { proxy._renderQueriedRecords(e, proxy); }))
                                    .fail(ej.proxy(function (e) { proxy._triggerFailureEvent(e, proxy); }));                           
                    }
                }
                else if (this.dataSource()) {
                    proxy._retrivedData = proxy.dataSource();
                    proxy._renderQueriedRecords(null, proxy, proxy._retrivedData);                    
                }
                else {
                    proxy._checkDataBinding();
                }
            } else {
                proxy._isLoadonDemand = model.isLoadonDemand;
                proxy._checkDataBinding();
            }            
        },
        _intersectionObjects: function (flatCollection, rootCollection) {
            var result = [];
            while (flatCollection.length > 0 && rootCollection.length > 0) {
                var index = rootCollection.indexOf(flatCollection[0]);
                if ( index == -1) {
                    flatCollection.shift();
                }
                else {
                    result.push(flatCollection.shift());
                    rootCollection.splice(index, 1);
                }
            }

            return result;
        },

        _getAndRenderRecordsonDemand:function(){
            var proxy = this, model = proxy.model;
            model.query.requiresCount();
            model.pageSettings.pageSizeMode = ej.TreeGrid.PageSizeMode.Root;
            if (model.parentIdMapping) {
                proxy._queryAndRenderParentRecords();
            }
            else {
                var newQuery = proxy._updateQueryForLoadonDemand();
                var queryPromise = proxy.dataSource().executeQuery(newQuery);
                queryPromise.done(ej.proxy(function (e) {
                    //proxy._fieldNamesToQuery = existSelectQuery[0].e.fieldNames;
                    proxy._pageRecordCountOnDemand = e.count;
                    proxy._renderQueriedRecords(e, proxy);
                    proxy._setScrollTop();
                    proxy.updateHeight();

                })).fail(ej.proxy(function (e) { proxy._triggerFailureEvent(e, proxy); }));                   
            }
            proxy._allParentItems = $.extend([], model.parentRecords);
        },

        /*Create waiting popup for load on demand request*/
        _renderWaitingPopup: function () {
            var proxy=this;
            $(this.element).ejWaitingPopup({ showOnInit: true, });
            this._waitingPopupObj = $(this.element).data("ejWaitingPopup")
        },

        _renderQueriedRecords: function (e, proxy, retrivedItems) {
            var model = proxy.model;
            if (retrivedItems)
                proxy._retrivedData = retrivedItems;
            else {
                proxy._retrivedData = e.result;
                if (proxy._fieldNamesToQuery.length == 0 && proxy._retrivedData.length > 0) {
                    for (var field in e.result[0])
                        proxy._fieldNamesToQuery.push(field);
                }
            }
            if (model.flatRecords.length == 0) {
                if (model.allowPaging && model.parentIdMapping) {
                    if (!proxy._isRemoteData) {
                        if (ej.isNullOrUndefined(model.pageSettings.totalRecordsCount))
                            model.pageSettings.totalRecordsCount = e && !ej.isNullOrUndefined(e.count) ? e.count : null;
                        else
                            proxy._retrivedData = proxy._retrivedData.splice(model.pageSettings.totalRecordsCount);
                    }
                    else
                        model.pageSettings.totalRecordsCount = e.count;
                }
                
                proxy._createQueriedRecords(proxy._retrivedData);
            }
            if (!proxy._isForDataSourceRefresh) {
                if (model.showSummaryRow && model.printingEnabled)
                    proxy._parentRecords = proxy._getParentRecords(model.updatedRecords, proxy)
                proxy._checkDataBinding();
            }
            else {
                var args = {};
                args["requestType"] = ej.TreeGrid.Actions.RefreshDataSource;
                proxy._ensureDataSource(args);
                if (!model.isFromGantt) {
                    proxy._checkDataManagerUpdate();
                }
                if (proxy.selectedRowIndex() !== -1 && proxy.selectedRowIndex() < proxy.model.currentViewData.length) {
                    proxy.selectRows(proxy.selectedRowIndex());
                }
                if (proxy.getScrollElement().hasClass("e-scroller"))
                    proxy.getScrollElement().ejScroller("refresh");
                if (model.showSummaryRow || model.showTotalSummary) {
                    proxy._summaryRow();
                }
                proxy._createdAt = null;
                proxy._isForDataSourceRefresh = false;
            }
            if (e)
                proxy._waitingPopupObj.hide();
        },

        _createQueriedRecords: function (retrivedItems) {
            var proxy = this, model = proxy.model;
            if (model.idMapping && model.parentIdMapping && retrivedItems.length > 0) {
                //cloning the datasource                    
                var data = []; proxy._taskIds = [], proxy._lastInsertedId = -1;
                for (var i = 0; i < retrivedItems.length; i++) {
                    var tempData = retrivedItems[i];
                    data.push($.extend(true, {}, tempData));
                    if (!ej.isNullOrUndefined(tempData[model.idMapping])) {
                        proxy._updateLastInsertedId(tempData[model.idMapping]);
                        proxy._taskIds.push(tempData[model.idMapping]);
                    }
                }
                proxy._reconstructDatasource(data);
                proxy._createRecords(proxy.secondaryDatasource);
            }
            else
                retrivedItems && proxy._createRecords(retrivedItems);
        },

        _queryAndRenderParentRecords: function () {
            var proxy = this, model = proxy.model;
            if (model.hasChildMapping)
                proxy._renderRootRecords(proxy);            
            else {
                if (proxy._assignedIdCollections.length == 0 && proxy._assignedParendIDs.length == 0) {
                var queryParentIds = ej.Query(), parentIdQueryPromise,
                    existSelectQuery = ej.pvt.filterQueries(model.query.queries, "onSelect");

                queryParentIds.queries = $.extend([], model.query.queries);
                queryParentIds.requiresCount();
                if (existSelectQuery.length > 0)
                    queryParentIds.queries.splice($.inArray(existSelectQuery[0], queryParentIds.queries), 1);
                queryParentIds.select(model.parentIdMapping, model.idMapping);

                parentIdQueryPromise = this.dataSource().executeQuery(queryParentIds);
                parentIdQueryPromise.done(ej.proxy(function (e) {
                    e.result.map(function (res) {
                        proxy._assignedIdCollections.push(res[model.idMapping]);
                        if (res[model.parentIdMapping] && proxy._assignedParendIDs.indexOf(res[model.parentIdMapping]) == -1)
                            proxy._assignedParendIDs.push(res[model.parentIdMapping]);
                    });

                    proxy._totalItemCounts = e.result.length;
                        proxy._renderRootRecords(proxy);

                    })).fail(ej.proxy(function (e) { proxy._triggerFailureEvent(e, proxy); }));
                }
                else
                    proxy._renderRootRecords(proxy);
            }
        },

        _renderRootRecords:function(proxy){
                    var updatedQuery = proxy._updateQueryForLoadonDemand();
                    var queryPromise = proxy.dataSource().executeQuery(updatedQuery);

                    queryPromise.done(ej.proxy(function (e) { proxy._renderZerothLevelParentItems(e); }))
                                .fail(ej.proxy(function (e) { proxy._triggerFailureEvent(e, proxy); }));
        },
        _renderExpandedChildRecords: function (expcolargs) {
            var proxy = this, model = proxy.model;          
            proxy._ensureDataSource(expcolargs);
            if (model.showSummaryRow) {
                proxy._parentRecords = proxy._allParentItems;
                proxy._createSummaryRow();
            }
            if (model.enableAltRow) {
                proxy.updateAltRow();
            }
            proxy.sendDataRenderingRequest(expcolargs);
            proxy._setScrollTop();
            proxy.updateHeight();
            proxy._waitingPopupObj.hide();            
        },
        _triggerFailureEvent: function (e, proxy) {
            proxy._waitingPopupObj.hide();
            var args = { error: e.error };
            proxy._trigger("actionFailure", args);
        },
        _renderZerothLevelParentItems: function (e) {
            var proxy = this, model = proxy.model;           
            proxy._pageRecordCountOnDemand = e.count;
            proxy._renderQueriedRecords(e, proxy);
            proxy._allParentItems = $.extend([], model.parentRecords);
            proxy._isForDataSourceRefresh = false;
            proxy._maxRowIndex = proxy._totalItemCounts;
        },
        _updateQueryForLoadonDemand: function () {
            var proxy = this, model = proxy.model,
                updateQuery = new ej.Query(),
                condition = ej.Predicate(model.parentIdMapping, ej.FilterOperators.equal, null);

            updateQuery.queries = $.extend([], model.query.queries);
            if (model.parentIdMapping)
                updateQuery.where(condition);
            if (model.allowPaging)
                updateQuery.page(proxy._currentPage(), proxy.model.pageSettings.pageSize);
            updateQuery.requiresCount();
            proxy._queryForLoadonDemand = updateQuery;
            //model.query = updateQuery;
            return updateQuery;
        },
                    
        _reconstructDatasource: function (datasource) {
            var proxy = this, model = proxy.model, data, filter;                      

            filter = ej.Predicate(model.parentIdMapping, ej.FilterOperators.notEqual, "null");
            data = ej.DataManager(datasource).executeLocal(ej.Query().where(filter).group(model.parentIdMapping));            
            var tempParent = [];

            if (!model.childMapping) model.childMapping = "Children";

            for (var i = 0; i < data.length; i++) {
                if (!ej.isNullOrUndefined(data[i].key)) {

                    var index = proxy._taskIds.indexOf(data[i].key);
                    if (index > -1) {
                        if (model.hierarchyRowIndexMapping && data[i].items.length > 1)
                            datasource[index][model.childMapping] = ej.DataManager(data[i].items).executeLocal(ej.Query().sortBy(model.hierarchyRowIndexMapping, ej.sortOrder.Ascending, false));
                        else
                            datasource[index][model.childMapping] = data[i].items;
                        continue;
                    }
                }
                tempParent.push.apply(tempParent, data[i].items);
            }
            proxy.secondaryDatasource = proxy._intersectionObjects(datasource, tempParent);
            if (model.hierarchyRowIndexMapping && proxy.secondaryDatasource.length > 1)
                proxy.secondaryDatasource = ej.DataManager(proxy.secondaryDatasource).executeLocal(ej.Query().sortBy(model.hierarchyRowIndexMapping, ej.sortOrder.Ascending, false));
        },        
               
        //Window resize event
        _windowResize: function (e)
        {
            if (!this.element.is(":visible")) {
                return;
            }
            var proxy = this,
               model = this.model;
            $("#" + proxy._id).addClass('e-treegrid-overflow');

            var treeGridHeader = proxy._$gridHeaderContent,
               totalSummaryRowContent = proxy._$totalSummaryRowContainer,
               treeGridContent,
               treegridToolbar = $("#" + proxy._id + "_toolbarItems"),
               sizeSettingsHeight = model.sizeSettings.height,
               sizeSettingsWidth = model.sizeSettings.width,
               elementStyleWidth = proxy.element[0].style.width,
               elementStyleHeight = proxy.element[0].style.height,
               width, height;

            proxy._clearContextMenu();
            if (!proxy.model.isResponsive && !ej.isTouchDevice()) {
                    proxy._clearColumnMenu();
                    proxy._clearFilterMenu();
            }
            else {
                if (!ej.isTouchDevice()) {
                    proxy._clearColumnMenu('resize');
                }
            }
            if (model.isResponsive && proxy._isExcelFilter)
            {
                if (proxy._checkBoxDiv)
                    proxy._checkBoxDiv.ejScroller({ width: "100%" }).ejScroller('refresh');
                if (proxy._customFilter) {
                    proxy._customFilter.ejDialog("width", "99.9%");
                   // proxy._customFilter.css("width", "95.5%");
                }
            }
            if (this._frozenColumnsLength > 0)
                treeGridContent = this.element.find("#e-movablecontainer" + this._id);
            else
                treeGridContent = $("#" + proxy._id + "e-gridcontent");


            $("#" + this._id + "detailscellwrapper").length > 0 && this._removeDetailsRow();

            //Width calculation
            if ((sizeSettingsWidth && (typeof(sizeSettingsWidth) != "number" && sizeSettingsWidth.indexOf("%") != -1)) || elementStyleWidth.indexOf("%") != -1) {
                var ganttWidth = sizeSettingsWidth ? sizeSettingsWidth : elementStyleWidth;
                var containerWidth = $(proxy.element).parent().width() ? $(proxy.element).parent().width() : $(proxy.element).width();
                var tempWidth = (containerWidth / 100) * parseInt(ganttWidth);
                width = tempWidth;
            }
            else
                width = $(proxy.element).width();
            proxy._gridWidth = Math.round(width);
            if (proxy._frozenColumnsLength > 0) {
                var totalWidth = 0;
                for (var i = 0; i < proxy._frozenColumnsLength; i++) {
                    if (model.columns[i].visible == true) {
                        totalWidth += proxy.columnsWidthCollection[i];
                    }
                }
                if (width < totalWidth)
                    proxy._gridWidth = width = totalWidth;
            }
            //height calculation
            if ((sizeSettingsHeight && (typeof (sizeSettingsHeight) != "number" && sizeSettingsHeight.indexOf("%") != -1)) || elementStyleHeight.indexOf("%") != -1) {
                var ganttHeight = sizeSettingsHeight ? sizeSettingsHeight : elementStyleHeight;
                var containerHeight = $(proxy.element).parent().height() ? $(proxy.element).parent().height() : $(proxy.element).height();
                var tempHeight;
                if ($(proxy.element).parent().height())
                    tempHeight = (containerHeight / 100) * parseInt(ganttHeight);
                else
                    tempHeight = $(proxy.element).height();
                height = tempHeight;
            }
            else
                height = $(proxy.element).height();

            //excludes border 
            height = height - proxy._totalBorderHeight; 
            
            if (proxy._$totalSummaryRowContainer)
                height -= proxy._$totalSummaryRowContainer.outerHeight();
            width = Math.round(width - proxy._totalBorderWidth);
            var treeGridWidth, headerHeight, headerWidth, top, left,
                toolbarHeight = treegridToolbar.length > 0 ? treegridToolbar.outerHeight() : 0;
            top = treeGridContent.ejScroller("option", "scrollTop");
            left = treeGridContent.ejScroller("option", "scrollLeft");
            var scrollerWidth = width,
                PagerHgDiff = 0;
            if (model.allowPaging) {
                var pagerHeight = proxy.element.find('.e-pager').outerHeight(),
                    isPagerTemplate = ej.isNullOrUndefined(model.pageSettings.template)? false : true;
                height -= pagerHeight;               
                if (!model.sizeSettings.height) {
                    var totalWidth = 0;
                    if (pagerHeight > proxy._pagerHeight && !isPagerTemplate)
                        PagerHgDiff = pagerHeight - proxy._pagerHeight;
                    for (var i = 0; i < proxy.columnsWidthCollection.length; i++)
                        totalWidth += proxy.columnsWidthCollection[i];
                    if (totalWidth > proxy._gridWidth) {
                        height = height + proxy._scrollBarHeight;
                    }                   
                }
            }
            if (this._frozenColumnsLength > 0) {
                proxy._$gridContent.css("width", width);
                proxy._$gridContent.css("height", height - $(treeGridHeader).outerHeight() - toolbarHeight);
                scrollerWidth = width - this._getFrozenColumnWidth() - 1;//frozen div border width
            }
            proxy.getScrollElement().ejScroller({
                width: scrollerWidth,
                height: height - $(treeGridHeader).outerHeight() - toolbarHeight + PagerHgDiff//for border-width of gridcontent
            });
            proxy._updateScrollCss();
           
            if (model.showTotalSummary && proxy._$totalSummaryRowContainer) {
                if (proxy._$totalSummaryRowContainer.height() >= model.totalSummaryHeight && proxy._$totalSummaryRowContainer.hasClass("e-scroller"))
                    proxy._$totalSummaryRowContainer.ejScroller("refresh");
                else if ($(totalSummaryRowContent).hasClass("e-scrollcss") && proxy.getScrollElement().children(".e-vscrollbar").length > 0 )
                    $(totalSummaryRowContent).width(width - 17);
                else 
                    $(totalSummaryRowContent).width(width);
            }
            if (model.toolbarSettings.showToolbar && treegridToolbar.length > 0) {
                treegridToolbar.width(width);
            }

            proxy.getScrollElement().ejScroller("refresh");

            if ($(treeGridHeader).hasClass("e-scrollcss") && proxy.getScrollElement().children(".e-vscrollbar").length > 0) {
                $(treeGridHeader).width(width - 17);
            }
            else {
                $(treeGridHeader).width(width);
            }

            proxy.updateViewPortHeight();

            if(model.showTotalSummary)
                proxy._viewPortHeight = proxy._viewPortHeight - proxy._$totalSummaryRowContainer.outerHeight();
            proxy.getScrollElement().ejScroller("option", "scrollTop",top);
            proxy.getScrollElement().ejScroller("option", "scrollLeft", left);
            proxy._updateHeaderScrollLeft();
            if (model.enableVirtualization) {
                proxy.cancelRowEditCell(); // To hide or destroy popup menu
                var tempArgs = {},
                    rowHeight = model.rowHeight;
                tempArgs.requestType = ej.TreeGrid.Actions.Refresh;
                proxy.processBindings(tempArgs);                
                proxy.sendDataRenderingRequest(tempArgs);
                /* check detail template and its row height */
                if (model.showDetailsRow && model.detailsTemplate && !model.showDetailsRowInfoColumn)
                {
                    rowHeight += model.detailsRowHeight;
                }
                
                if ((model.currentViewData.length * rowHeight) < proxy._viewPortHeight) {

                    var currentPosition = top - (proxy._viewPortHeight - model.currentViewData.length * rowHeight);
                    if (currentPosition < 0)
                        currentPosition = 0;
                    proxy.getScrollElement().ejScroller("scrollY",currentPosition, true);
                }
            }
            if (model.allowPaging)
                proxy.element.find(".e-pager").css({ "width": proxy._gridWidth - 2 });
            proxy._resizeFilteringElements();
            if (model.columnResizeSettings.columnResizeMode == ej.TreeGrid.ColumnResizeMode.FixedColumns && !model.isFromGantt) {
                this._updateTableWidth(true);
            }
            if (proxy.model.isResponsive && !proxy.model.isFromGantt) {
                proxy._mediaQueryUpdate();
            }
            proxy._updatePagerTextAlignment();
            proxy._updateWrapRowHeights(null, "virtualRefresh", null, "resize");
            if (model.allowPaging && !model.sizeSettings.height) {
                proxy.updateHeight();
            }
            if (model.allowTextWrap || model.headerTextOverflow == "wrap") {
                if (proxy.model.allowTextWrap && proxy.model.enableVirtualization) {
                    proxy.updateHeight();
                }                
            }
            proxy._updateGridContentHeight();
            if (proxy.model.allowSelection && proxy.model.selectionSettings.selectionType == "multiple" && this._multiSelectPopup && this._multiSelectPopup.is(":visible")) {
                proxy._alignMultiSelectPopup();
            }
            $("#" + proxy._id).removeClass('e-treegrid-overflow');
            if (model.isResponsive && model.enableResize) {
                proxy._validateColumnVisible();
                proxy._hideColumns(proxy._autoHideColumns);
                proxy._showColumns(proxy._autoShowColumns);
            }
        },
		
        _updatePagerTextAlignment: function () {
            var proxy = this;
            if (proxy.model.allowPaging) {
                if (($('#' + proxy._id + 'Pager').find('.e-pagercontainer').outerWidth() + $('#' + proxy._id + 'Pager').find('.e-parentmsgbar').outerWidth() + 10) > $('#' + proxy._id).width()) {
                    var pagecontainer = ($('#' + proxy._id).width() - $('#' + proxy._id + 'Pager').find('.e-pagercontainer').outerWidth()) / 2;
                    var parentmsgbar = ($('#' + proxy._id).width() - $('#' + proxy._id + 'Pager').find('.e-parentmsgbar').width()) / 2;
                    if (pagecontainer > 0) {
                        $('#' + proxy._id + 'Pager').find('.e-pagercontainer').css("margin-left", pagecontainer + 'px');
                    }
                    if (parentmsgbar > 0) {
                        $('#' + proxy._id + 'Pager').find('.e-parentmsgbar').css("margin-right", (parentmsgbar - 6) + 'px');
                    }
                } else {
                    $('#' + proxy._id + 'Pager').find('.e-pagercontainer').css("margin-left", "");
                    $('#' + proxy._id + 'Pager').find('.e-parentmsgbar').css("margin-right", "");
                }
            }
        },

        _alignMultiSelectPopup: function() {
            var proxy = this,
                contentHeightLimit = proxy._$gridContent.offset().top + proxy._$gridContent.outerHeight(),
                contentWidthLimit = proxy._$gridContent.offset().left + proxy._$gridContent.outerWidth();
            if ((proxy._multiSelectPopup.offset().top + proxy._multiSelectPopup.outerHeight() + 10) > contentHeightLimit || proxy._multiSelectPopup.offset().top < proxy._$gridContent.offset().top || (proxy._multiSelectPopup.offset().left + proxy._multiSelectPopup.outerWidth()) > contentWidthLimit || proxy._multiSelectPopup.offset().left < proxy._$gridContent.offset().left) {
                var top = proxy._$gridContent.offset().top + (proxy._$gridContent.outerHeight() / 2),
               left = proxy._$gridContent.offset().left + (proxy._$gridContent.outerWidth() / 2);
                if (proxy._$gridContent.find(".e-hscrollbar").length > 0)
                    top = top - proxy._$gridContent.find(".e-hscrollbar").outerHeight();
                if (proxy._$gridContent.find(".e-vscrollbar").length > 0)
                    left = left - proxy._$gridContent.find(".e-vscrollbar").outerWidth();
            proxy._multiSelectPopup.offset({ top: (top - (this._multiSelectPopup.height() / 2) - 5), left: (left - (this._multiSelectPopup.width() / 2)) });
        }
        },

        _mediaQueryUpdate: function () {
            var proxy = this, length, sliceFilterMenuDivID, filterMenuDivID,
                temp = "",
                controlPosition  = proxy.getOffsetRect($("#" + proxy._id)[0]);

            // Insert dialog-box changes with respect to window resize.

            if ($("#" + proxy._id + "_dialogColumnAdd_wrapper").length > 0 && $("#" + proxy._id + "_dialogColumnAdd_wrapper").css('display') != 'none') {
                if ($(window).width() <= proxy._responsiveMinWidth && proxy.model.isResponsive) {

                        $("#" + proxy._id + "_dialogColumnAdd").removeClass("e-treegridadaptivedialog");
                        $("#" + proxy._id + "_dialogColumnAdd_wrapper").removeClass("e-treegridadaptivedialog");
                        $("#" + proxy._id + "_dialogColumnAdd_wrapper").find("div.e-dialog-scroller").removeClass("e-treegridadaptivedialog");
                        $("#" + proxy._id + "_dialogColumnAdd").find(".e-dropdowntreegrid").css('width', ($("#" + proxy._id).width() - 80) + 'px');  // 80px ((28px of $("#" + proxy._id + "_dialogColumnAdd"))+(18px of Hscrollbar)+(30px of $("#" + proxy._id + "ColumnAddForm div"))) get minused in width to place the dropdown dialog treegrid div in absolute position.
                        $("#" + proxy._id + "_dialogColumnAdd").ejDialog({ width: $("#" + proxy._id).width() + "px", height: $("#" + proxy._id).height() + "px", minHeight: "150px", minWidth: "150px", showOnInit: false, enableResize: false, allowDraggable: false, enableModal: false, isResponsive: false });

                        $("#" + proxy._id + "_dialogColumnAdd_wrapper").css({ 'left': controlPosition.left + "px", 'top': controlPosition.top + "px" });
                        $("#" + proxy._id + "_dialogColumnAdd_wrapper").removeClass("e-shadow");
                        $("#" + proxy._id + "_dialogColumnAdd").removeClass("e-shadow");

                } else {
                    $("#" + proxy._id + "_dialogColumnAdd").ejDialog({ width: "auto", height: "auto", minHeight: 0, minWidth: 0, showOnInit: false, enableResize: false, allowDraggable: true, enableModal: true, isResponsive: true });
                    $("#" + proxy._id + "_dialogColumnAdd").addClass("e-treegridadaptivedialog");
                    $("#" + proxy._id + "_dialogColumnAdd_wrapper").addClass("e-treegridadaptivedialog e-treegrid-dialog");
                    $("#" + proxy._id + "_dialogColumnAdd").find(".e-dropdowntreegrid").css('width', '438px');  // fixed width of dialog dropdown treegrid div.
                    $("#" + proxy._id + "_dialogColumnAdd_wrapper").find("div.e-dialog-scroller").removeClass("e-treegridadaptivedialog");
                    $("#" + proxy._id + "_dialogColumnAdd_wrapper").addClass("e-shadow");
                }
            }

            // Column rename dialog-box changes with respect to window resize.

            if ($("#" + proxy._id + "ColumnRenameDialog_wrapper").length > 0 && $("#" + proxy._id + "ColumnRenameDialog_wrapper").css('display') != 'none') {

                if ($(window).width() <= proxy._responsiveMinWidth && proxy.model.isResponsive) {

                        $("#" + proxy._id + "ColumnRenameDialog").removeClass("e-treegridadaptivedialog");
                        proxy._columnRenameDialog.ejDialog({ width: $("#" + proxy._id).width() + "px", height: $("#" + proxy._id).height() + "px", position: { X: controlPosition.left, Y: controlPosition.top }, minHeight: "50px", minWidth: "50px", showOnInit: false, allowDraggable: false, enableResize: false, enableModal: false, isResponsive: false });
                        $("#" + proxy._id + "ColumnRenameDialog_wrapper").css({ 'left': controlPosition.left + "px", 'top': controlPosition.top + "px" });
                        $("#" + proxy._id + "ColumnRenameDialog_wrapper").removeClass("e-shadow");
                        $("#" + proxy._id + "ColumnRenameDialog").removeClass("e-shadow");
                        $("#" + proxy._id + "ColumnRenameDialog_wrapper").removeClass("e-treegridadaptivedialog");

                } else {
                    proxy._columnRenameDialog.ejDialog({ width: "auto", height: "auto", minHeight: 0, minWidth: 0, showOnInit: false, enableResize: false, allowDraggable: true, enableModal: true, isResponsive: true });
                    $("#" + proxy._id + "ColumnRenameDialog").addClass("e-treegridadaptivedialog");
                    $("#" + proxy._id + "ColumnRenameDialog_wrapper").addClass("e-treegridadaptivedialog e-treegrid-dialog");
                }
            }

            // Filter menu dialog-box changes with respect to window resize.

            if (proxy._renderedSubMenuType) { // proxy._renderedSubMenuType shows the rendered type of sub menu (filter menu / column chooser) dialog of column menu.
                temp = "";
                if (proxy._renderedSubMenuType.indexOf("Desktop") == -1) {
                    temp = proxy._renderedSubMenuType;
                } else {
                    var index = proxy._renderedSubMenuType.indexOf("Desktop");
                    temp = proxy._renderedSubMenuType.slice(0, index);
                }
                if ($(temp + "_wrapper").length > 0 && $(temp + "_wrapper").css('display') != 'none') {
                    if ($(window).width() <= proxy._responsiveMinWidth && proxy._renderedSubMenuType.indexOf("Desktop") == -1 && proxy.model.isResponsive) {

                        var dialogInnerDivHeight = ($("#" + proxy._id).height() - 50) + "px"; // (48px - Dialog box header height) + (2px - excess border of parent div).
                            $(proxy._renderedSubMenuType + "_wrapper").find("div.e-dialog-scroller").addClass("e-treegridadaptivewidth");
                            $(proxy._renderedSubMenuType).ejDialog({ width: $("#" + proxy._id).width() + "px", height: $("#" + proxy._id).height() + "px", position: { X: controlPosition.left + "px", Y: controlPosition.top + "px" }, minHeight: "50px", minWidth: "50px", showOnInit: false, enableResize: false, enableModal: false, isResponsive: false });
                            if ($(proxy._renderedSubMenuType).height() > $(proxy._renderedSubMenuType + "_wrapper").height() - 48) { // 48px - Dialog box header height
                                $(proxy._renderedSubMenuType + "_wrapper").find("div.e-dialog-scroller").css({ 'height': ($("#" + proxy._id).height() - 48) + "px", 'width': 'auto', 'padding': '0px' }); // 48px - Dialog box header height
                                $(proxy._renderedSubMenuType).ejDialog("refresh"); // 'refresh' event get called inorder to update dialog scroll bar
                            } else {
                                $(proxy._renderedSubMenuType+"_wrapper").find("div.e-dialog-scroller").css({ 'height': dialogInnerDivHeight, 'width': 'auto' });
                              //$(proxy._renderedSubMenuType).ejDialog("refresh"); // 'refresh' event get called inorder to update dialog scroll bar
                            }

                    } else {
                        if (ej.isTouchDevice()) {
                            if (((proxy._renderedSubMenuType.indexOf("Desktop") == -1) && ($(window).width() > proxy._responsiveMinWidth)) || ((proxy._renderedSubMenuType.indexOf("Desktop") != -1) && ($(window).width() <= proxy._responsiveMinWidth))) {
                                proxy._clearColumnMenu();
                                proxy._clearFilterMenu();
                            }
                        } else {
                            proxy._clearFilterMenu();
                        }
                    }
                } else if ((ej.isTouchDevice() && !proxy._renderedSubMenuType) || (ej.isTouchDevice() && $(temp + "_wrapper").length > 0 && $(temp + "_wrapper").css('display') == 'none')) {
                    proxy._clearColumnMenu();
                }
            } else if ((ej.isTouchDevice() && !proxy._renderedSubMenuType) || (ej.isTouchDevice() && $(temp + "_wrapper").length > 0 && $(temp + "_wrapper").css('display') == 'none')) {
                proxy._clearColumnMenu();
            }
            if (proxy._isExcelFilter) {
                var isResponsive = $(window).width() > proxy._responsiveMinWidth;
                if (!proxy._mediaStatus || (proxy._mediaStatus && isResponsive)) {
                    proxy._excelFilter.closeXFDialog();
                    proxy._mediaStatus = false;
                    //proxy._clearFilterMenu();
                    if (proxy._customFilter)
                    {
                        var customFilterId = $(proxy._customFilter).attr("id");
                        $("#"+customFilterId).css("display", "none");
                        $("#" + customFilterId + "_CustomFDlg_wrapper").css("display", "none");
                    }

                }
            }

            // Column chooser dialog-box changes with respect to window resize.

            if ($("#" + proxy._id + "ccDiv_wrapper").length > 0 && $("#" + proxy._id + "ccDiv_wrapper").css('display') != 'none') {
                if ($(window).width() < proxy._responsiveMinWidth && proxy._renderedSubMenuType.indexOf("AdaptiveColChooser") == 0 && proxy.model.isResponsive) {

                    var dialogInnerDivHeight = ($("#" + proxy._id).height() - 66) + "px"; //(48px - Dialog box header height) + (16px - $("#" + proxy._id + "ccDiv_wrapper").find("div.e-dialog-scroller") of padding) + (2px - excess border of parent div) 
                        $("#" + proxy._id + "ccDiv").ejDialog({ width: $("#" + proxy._id).width() + "px", height: $("#" + proxy._id).height() + "px", minHeight: "150px", minWidth: "150px", showOnInit: false, enableResize: false, enableModal: false, isResponsive: false });
                        $("#" + proxy._id + "ccDiv_wrapper").find("div.e-dialog-scroller").removeClass("e-treegridadaptivedialog");
                        $("#" + proxy._id + "ccDiv").css({ 'width': '100%', 'height': 'auto' });
                        if ($("#" + proxy._id + "ccDiv").height() > $("#" + proxy._id + "ccDiv_wrapper").height() - 48) { //(48px - Dialog box header height)
                            $("#" + proxy._id + "ccDiv_wrapper").find("div.e-dialog-scroller").css({ 'height': ($("#" + proxy._id).height() - 48) + "px", 'width': 'auto', 'padding': '0px' }); //(48px - Dialog box header height)
                            $("#" + proxy._id + "ccDiv").removeClass("e-columnSelector");
                            $("#" + proxy._id + "ccDiv").ejDialog("refresh");
                        } else {
                            $("#" + proxy._id + "ccDiv_wrapper").find("div.e-dialog-scroller").css({ 'height': dialogInnerDivHeight, 'width': 'auto', 'padding': '8px 16px' });
                            $("#" + proxy._id + "ccDiv").css({ 'padding': '0px' });
                        }
                        $("#" + proxy._id + "ccDiv_wrapper").removeClass("e-shadow");
                        $("#" + proxy._id + "ccDiv").removeClass("e-shadow");

                } else {
                    proxy._clearColumnMenu();
                }
            }

            if ($("#" + proxy._id + "_dialogEdit").length > 0 && $("#" + proxy._id + "_dialogEdit").css('display') != 'none') {
                if ($(window).width() <= proxy._responsiveMinWidth && proxy.model.isResponsive) {
                    $("#" + proxy._id + "_dialogEdit").ejDialog({ width: $("#" + proxy._id).width() + "px", height: $("#" + proxy._id).height() + "px", minHeight: "150px", minWidth: "150px", showOnInit: false, enableResize: false, allowDraggable: false, enableModal: false, isResponsive: false });
                    $("#" + proxy._id + "_dialogEdit_wrapper").css({ 'left': controlPosition.left + "px", 'top': controlPosition.top + "px" });
                    $("#" + proxy._id + "_dialogEdit_wrapper").removeClass("e-shadow").removeClass("e-treegridadaptivedialog");
                    $("#" + proxy._id + "_dialogEdit").removeClass("e-shadow");
                } else {
                    $("#" + proxy._id + "_dialogEdit").ejDialog({ width: "auto", height: "auto", minHeight: "150px", minWidth: "150px", showOnInit: false, enableResize: false, allowDraggable: true, enableModal: true, isResponsive: true });
                    $("#" + proxy._id + "_dialogEdit_wrapper").addClass("e-shadow").addClass("e-treegridadaptivedialog");
                    $("#" + proxy._id + "_dialogEdit").addClass("e-shadow");
                }
            }

            if (proxy._renderedSubMenuType && (proxy._renderedSubMenuType.indexOf("AdaptiveColChooser") == 0 || proxy._renderedSubMenuType.indexOf("ColumnDesktop") == 0)) {
                proxy._clearColumnMenu();
            }
        },

        updateResponsiveMinWidth: function (width) {
            var proxy = this;
            if (parseInt(width) < 150)
                width = 150;

            proxy._responsiveMinWidth = parseInt(width);

            proxy._mediaQueryUpdate();

        },

        //PROCESSBINDING
        processBindings: function (args) {

            var proxy = this,
                model = proxy.model;

            model.query = new ej.Query();

            if (!proxy._isEmptyRow && !proxy._moveRow && proxy._trigger("actionBegin", args)) {
                if (args.requestType == "filtering") 
                    $("#" + proxy._id + "_" + args.currentFilteringColumn + "_filterbarcell").val("");               
                return true;
            }

            proxy._ensureDataSource(args);

        },
        //updated the treegrid record collection after record update in Gantt
        setUpdatedRecords: function (flatRecords, updatedRecords, ids, parentRecords, dataSource) {
            var model = this.model;
            model.flatRecords = flatRecords;
            model.updatedRecords = updatedRecords;
            model.ids = ids;
            model.parentRecords = parentRecords;
            this.dataSource(dataSource);
        },
        //In virtualization get expaned records from total record collection only
        getExpandedRecords: function (records) {
            var proxy = this;
            var resultRecord = records.filter(function (record) {
                return proxy.getExpandStatus(record) == true;
            });
            return resultRecord;
        },

        //update the expandStatus of all child records in non-virtualization mode
        updateExpandStatus:function(record , expanded)
        {
            var proxy = this,
                childRecords = record.childRecords;
                for (var count = 0; count < childRecords.length; count++) {
                    childRecords[count].isExpanded = expanded;
                    if (childRecords[count].hasChildRecords && childRecords[count].expanded) {
                        proxy.updateExpandStatus(childRecords[count], expanded);
                    }
                }
        },
        //Expand collapse, sort, delete, filter search the record collections
        _ensureDataSource: function (args) {

            var proxy = this,
                model = proxy.model,
                sortcolumns = model.sortSettings.sortedColumns,
                filteredColumns = model.filterSettings.filteredColumns,
                isupdatedHeight = false,
                index,
                dataSource = this.dataSource(),
                childIndex, ganttObject = $("#" + proxy._id.replace("ejTreeGrid", "")).data("ejGantt");
            proxy._filteredRecords = [];
            proxy._flatFilteredRecords = [];

            model.query.requiresCount();
            proxy._queryManagar = new ej.Query();
            proxy._queryManagar.requiresCount();

            if ($.type(dataSource) !== "array" && !(dataSource instanceof ej.DataManager)) {
                this.dataSource([]);
                dataSource = this.dataSource();
            }

            //Expand Collapse Opearation
            if (args && args.requestType === ej.TreeGrid.Actions.ExpandCollapse) {

                isupdatedHeight = true;
                proxy._filteredRecords = [];
                args.data.expanded = args.expanded;               
                if (!ej.isNullOrUndefined(args.data.item[model.expandStateMapping])) {
                    args.data[model.expandStateMapping] = args.expanded;
                    args.data.item[model.expandStateMapping] = args.expanded;
                }
                model.updatedRecords = [];
                proxy._flatFilteredRecords = model.flatRecords;
                proxy._filteredRecords = proxy._flatFilteredRecords.filter(function (record) {
                    return proxy.getExpandStatus(record) == true;
                });
                model.updatedRecords = proxy._filteredRecords;

                //condition for refreshing last record only
                if (args.isFromExpandCollapse && !args.isLastRefresh)
                    return;
            }

            // Condition for filtering columns.
            if ((args && args.requestType == "filtering") || (model.allowFiltering || model.isFromGantt) && filteredColumns.length) {
                //Removed the summary rows before filtering the datasource.
                if (model.showSummaryRow) {
                    model.updatedRecords = proxy._spliceSummaryRows(model.updatedRecords);
                    model.flatRecords = proxy._spliceSummaryRows(model.flatRecords);
                }
                if (((model.allowFiltering || model.isFromGantt) && filteredColumns.length)) {
                    var predicate, firstFilterCondition = filteredColumns[0];
                    // Condition to collect the details of filtering column.
                    if (proxy._isExcelFilter && !(firstFilterCondition instanceof ej.Predicate)) {
                        predicate = proxy._getExcelPredicate(args);
                    }
                    else {
                        if (firstFilterCondition.value == proxy._dropDownListBlanksText) {
                            predicate = ej.Predicate(firstFilterCondition.field, "equal", null, true);
                            predicate = predicate["or"](firstFilterCondition.field, "equal", "", true);
                        }
                        else if (firstFilterCondition.value == proxy._dropDownListClearText)
                            predicate = ej.Predicate(firstFilterCondition.field, "equal", "", true);
                        else if (!firstFilterCondition.isComplex)
                            predicate = ej.Predicate(firstFilterCondition.field, firstFilterCondition.operator, firstFilterCondition.value, !firstFilterCondition.matchcase);
                        else
                            predicate = firstFilterCondition;
                    if (ej.isNullOrUndefined(args))
                        proxy._storePreviousFilteredValue(firstFilterCondition.field, firstFilterCondition.value, firstFilterCondition.operator);
                    for (var i = 1; i < filteredColumns.length; i++) {
                        //Loop to gather all the column condition as array.
                        if (!filteredColumns[i].isComplex)
                            predicate = predicate[filteredColumns[i].predicate](filteredColumns[i].field, filteredColumns[i].operator, filteredColumns[i].value, !filteredColumns[i].matchcase);
                        else
                            predicate = predicate["and"](filteredColumns[i]);
                        if (ej.isNullOrUndefined(args))
                            proxy._storePreviousFilteredValue(filteredColumns[i].field, filteredColumns[i].value, filteredColumns[i].operator);
                    }
                    }
                    proxy._queryManagar.where(predicate);
                    proxy._filteredRecords = model.flatRecords.slice();
                    var dataManager = new ej.DataManager(proxy._filteredRecords);
                    proxy._tempfilteredrecords = dataManager.executeLocal(proxy._queryManagar).result;
                    proxy._updateFilteredRecords(proxy._tempfilteredrecords,false);
                    model.updatedRecords = (proxy._isHierarchyFiltering && model.enableVirtualization) ? proxy._updateFilterParent : proxy._filteredRecords;
                    if (model.allowPaging && model.pageSettings.pageSizeMode === ej.TreeGrid.PageSizeMode.Root)
                        model.parentRecords = proxy._getParentRecords(model.updatedRecords, proxy, true);
                    if (model.allowSorting && model.sortSettings.sortedColumns.length > 0) {
                        proxy._sortingRecords();
                    }
                } else {
                    model.updatedRecords = model.enableVirtualization ? proxy.getExpandedRecords(model.flatRecords) : model.flatRecords.slice();
                    proxy._updateHasFilteredChildRecordsStatus(model.updatedRecords);
                    if (proxy._isHierarchyFiltering) 
                        proxy._clearFilterLevel(proxy.model.flatRecords)
                    if (model.allowPaging && model.pageSettings.pageSizeMode === ej.TreeGrid.PageSizeMode.Root)
                        model.parentRecords = proxy._getParentRecords(model.updatedRecords, proxy, true);
                    if (proxy._isExcelFilter) {
                        proxy._getExcelPredicate(args);
                    }
                }
                if (!model.allowSearching || proxy._searchString.length == 0)
                    proxy._updatedFilteredRecords(args);
                isupdatedHeight = true;
                //// Updating checkbox state of parent records when enableHierarchySelection is true
            }

            if ((model.allowSearching && proxy._searchString.length) || (args && args.requestType==="searching")) {

                if (model.showSummaryRow) {
                    model.updatedRecords = proxy._spliceSummaryRows(model.updatedRecords);
                    model.flatRecords = proxy._spliceSummaryRows(model.flatRecords);
                }
                var operator = proxy._searchString.length > 0 ? model.searchSettings.operator : "contains";
                proxy._queryManagar.search(proxy._searchString, proxy.getColumnFieldNames(), operator, true);
                if (model.filterSettings.filterHierarchyMode == "parent" || proxy._searchString.length > 0 || model.filterSettings.filteredColumns.length == 0) {
                    var isSearching = true;
                    if (model.isFromGantt) {
                        proxy._filteredRecords = model.flatRecords.filter(function (record) {
                            return record.hasChildRecords === false;
                        });
                    } else {
                        proxy._filteredRecords = model.flatRecords.slice();
                    }
                }
                else
                    isSearching = false;
                if (model.isFromGantt) {
                    ganttObject.model.searchSettings = {
                        fields: proxy._getColumnMappingNames(),
                        key: proxy._queryManagar.queries[0].e.searchKey,
                        operator: "contains",
                        ignoreCase: true
                    };  
                }           
                var dataManager = new ej.DataManager(proxy._filteredRecords);
                proxy._tempfilteredrecords = dataManager.executeLocal(proxy._queryManagar).result;
                proxy._updateFilteredRecords(proxy._tempfilteredrecords, isSearching);
                model.updatedRecords = proxy._filteredRecords;
                if (model.allowPaging && model.pageSettings.pageSizeMode === ej.TreeGrid.PageSizeMode.Root)
                    model.parentRecords = proxy._getParentRecords(model.updatedRecords, proxy, true);
                //Render parent records again while no childs are retrieved from server.
                if (proxy._isLoadonDemand && proxy._searchString.length == 0 && proxy._filteredRecords == 0)
                    model.updatedRecords = model.flatRecords;
                if (model.allowSorting && model.sortSettings.sortedColumns.length > 0) {
                    proxy._sortingRecords();
                }
                proxy._updatedFilteredRecords(args);
                isupdatedHeight = true;               
                proxy.clearSelection();

            }
            else if (model.allowSorting && sortcolumns.length > 0 || (args && args.requestType == "sorting")) {
                
                proxy._sortingRecords();
                if (model.showSummaryRow)
                    proxy._createSummaryRow(args);
                if (!isupdatedHeight)
                {
                    proxy.updateCollapsedRecordCount();
                    proxy.updateHeight();
                    isupdatedHeight = true;
                }
            }

            if (args && (args.requestType === "outdent" || args.requestType === "indent")) {
                args = {};
                args.requestType = ej.TreeGrid.Actions.Refresh;
                isupdatedHeight = true;
            }
            if (args && model.allowPaging && args.requestType == "delete") {
                var arg = {};
                if (!proxy._isLoadonDemand) {
                arg.totalRecordsCount = proxy.getExpandedRecords(model.flatRecords).length;                
                proxy.getPager().ejPager("option", arg).ejPager("refreshPager");
                var pagerModel = this.getPager().ejPager("model");
                if (proxy._currentPage() > pagerModel.totalPages)
                    proxy._currentPage(pagerModel.totalPages);
                isupdatedHeight = true;                
            }
            }

            if (!isupdatedHeight) {
                proxy._zerothLevelParentRecords = model.parentRecords.slice();
                model.updatedRecords = model.enableVirtualization ? ((model.enableCollapseAll && !args) ? proxy._zerothLevelParentRecords : proxy.getExpandedRecords(model.flatRecords)) : model.flatRecords.slice();
                proxy.updateCollapsedRecordCount();
                proxy.updateHeight();
            }

            if (!args) {
                args = {};
                if (model.allowPaging)
                    args.requestType = ej.TreeGrid.Actions.Paging;
                else
                    args.requestType = ej.TreeGrid.Actions.Refresh;
                args.inital = true;
            }
            

            proxy._updateCurrentViewData(args.requestType);

            if (!ej.isNullOrUndefined(model.printingEnabled) && model.printingEnabled && model.pageSettings.printMode=="currentPage") {
                var updatedRecords = this.getExpandedRecords(model.updatedRecords),
                    dataManager = new ej.DataManager(updatedRecords),
                    result = dataManager.executeLocal(model.query);
                model.currentViewData = result.result;
            }

            if ((!model.isFromGantt && args.requestType === "save") || args.requestType === "sorting" || args.requestType === "searching"
                || args.requestType === "delete" || args.requestType === "refreshDataSource" || args.requestType === "filtering"
                || args.requestType === "dragAndDrop" || args.requestType === "rowIndexUpdate" || (!args.inital && args.requestType === "paging")) {
				    proxy._isRefreshAddedRecord = false; /* flag new added record is sorted or filtered in treegrid */
                proxy.renderRecords(args);
                proxy._updateWrapRowHeights(null,"refreshAll");
                proxy._setScrollTop(args.requestType);
                proxy._updateFixedTableBorder(args.requestType);
                proxy.getScrollElement().ejScroller("refresh");
                proxy._updateScrollCss();
            }
        },

        _updatedFilteredRecords:function(args){
            var proxy = this, model = proxy.model;
            if (args && (args.requestType == "filtering" || args.requestType == "searching") && proxy._checkboxSelection &&
         model.selectionSettings.enableHierarchySelection) {
                if (args.requestType == "filtering" || args.requestType == "searching") {
                    $.each(model.updatedRecords, function (index, record) {
                        if (record.hasChildRecords)
                            proxy._updateParentSelection(record);

                    });
                    proxy.selectAllRows();
                }
            }

            if (model.showSummaryRow)
                proxy._createSummaryRow(args);
            if (args) {
                if (model.showTotalSummary)
                    proxy._updateTotalSummaryRow(args);
            }
            proxy.updateCollapsedRecordCount();
            proxy.updateHeight();         
            if (model.enableAltRow) {
                proxy.updateAltRow();
            }
        },
         //Remove parent & children records which available in the data collection 
        _removeChildRecords: function(data, record){
            var proxy = this, model = proxy.model,
                childRecords = ej.isNullOrUndefined(record.childRecords) ? [] : record.childRecords;
            var recordIndex = data.indexOf(record);
            if(recordIndex > -1){
                record.checkboxState = "unchecked";
                data.splice(recordIndex, 1);
            }
            for(var i = 0; i < childRecords.length; i++){                
                if(childRecords[i].hasChildRecords)
                    proxy._removeChildRecords(data, childRecords[i]);
                else{
                    recordIndex = data.indexOf(childRecords[i]);
                    if(recordIndex > -1){
                        childRecords[i].checkboxState = "unchecked";
                        data.splice(recordIndex, 1);
                    }
                }
            }
            if(record.parentItem && model.selectionSettings.enableHierarchySelection){                
                proxy._updateParentSelection(record.parentItem);
            }
        },
        //remove child record in data source on self reference
        _removeChildItem: function (record) {
            var currentRecord, proxy = this, idx;
            for (var i = 0; i < record.childRecords.length; i++) {
                currentRecord = record.childRecords[i];
                if (this.dataSource() instanceof ej.DataManager) {
                    if (this.dataSource().dataSource.offline && this.dataSource().dataSource.json) {
                        idx = this.dataSource().dataSource.json.indexOf(currentRecord.item);
                        if(idx!==-1)
                            this.dataSource().dataSource.json.splice(idx, 1);

                        if (currentRecord.hasChildRecords) {
                            proxy._removeChildItem(currentRecord);
                        }
                    }
                    else if (proxy._isDataManagerUpdate) {
                        idx = proxy._jsonData.indexOf(currentRecord.item);
                        if (idx !== -1)
                            proxy._jsonData.splice(idx, 1);
                        if (currentRecord.hasChildRecords) {
                            proxy._removeChildItem(currentRecord);
                        }
                    }
                } else {
                    idx = this.dataSource().indexOf(currentRecord.item);
                    if (idx !== -1)
                        this.dataSource().splice(idx, 1);

                    if (currentRecord.hasChildRecords) {
                        proxy._removeChildItem(currentRecord);
                    }
                }
            }
        },

        //Update checkbox columnName to change dynamically 
        _updateCheckboxColumnName: function(){
            var proxy = this,
                model = proxy.model;

            // Checkbox column is decide by showCheckbox API or default 
            if (proxy._checkboxSelection && !(model.rowTemplateID || model.altRowTemplateID)) {
                var column = model.columns.filter(function (column) {
                    return column['showCheckbox'] == true;
                });
                proxy._addCheckboxColumn = this._getDefaultCheckboxColumn();
                proxy._checkboxColumnName = column.length > 0 ? column[0].isTemplateColumn ? null : column[0].field : null;
                if (ej.isNullOrUndefined(proxy._checkboxColumnName)) {
                    var treeGridIndexColumn = model.columns[model.treeColumnIndex];
                    if (!model.columns[0].nonColumn) {
                        for (var i = 0; i < model.columns.length; i++) {
                            // to remove the existing default checkbox column
                            if (model.columns[i].nonColumn == true) {
                                model.columns.splice(i, 1);
                            }
                        }
                        model.columns.splice(0, 0, proxy._addCheckboxColumn);
                        proxy._checkboxColumnName = proxy._addCheckboxColumn.field;
                    }
                    else
                        proxy._checkboxColumnName = model.columns[0].field;
                    if (treeGridIndexColumn)
                        model.treeColumnIndex = model.columns.indexOf(treeGridIndexColumn);
                }
                if (proxy._frozenColumnsLength > 0 && !model.columns[0]['isFrozen'] &&
                        proxy._checkboxColumnName == proxy._addCheckboxColumn.field) {
                    model.columns[0]['isFrozen'] = true;
                    proxy._frozenColumnsLength += 1;
                    proxy._frozenColumns.splice(0, 0, model.columns[0]);
                    model.scrollSettings.frozenColumns = this._frozenColumnsLength;
                }

            }
        },
        //To save batch edited values
        batchSave: function () {
            var proxy = this,
                model = proxy.model, cArgs = {},
                batchChanges = proxy.batchChanges,
                batchEditedRecords = batchChanges.changed,
                batchDeletedRecords = batchChanges.deleted,
                batchAddedRecords = batchChanges.added;
            cArgs.type = "beforeBatchSave";
            cArgs.batchChanges = batchChanges;
            if (proxy._trigger("beforeBatchSave", cArgs))
                return true;
            //Clear filtered columns
            var filteredColumns = model.filterSettings.filteredColumns;
            if (filteredColumns && filteredColumns.length > 0)
                proxy.clearFilter();
            //To remove batchEditedField collection from modified data
            for (var e = 0; e < batchEditedRecords.length; e++) {
                delete batchEditedRecords[e].batchEditedFields;
            }
            //To remove isBatchAdd property and batchEditedField collection from added data
            for (var a = 0; a < batchAddedRecords.length; a++) {
                delete batchAddedRecords[a].isBatchAdd;
                if (batchAddedRecords[a].batchEditedFields)
                    delete batchAddedRecords[a].batchEditedFields;
            }
            //To remove batch deleted rows
            if (batchDeletedRecords.length)
                proxy.deleteRow();
            if (proxy._batchEditStarts)
                proxy._batchEditStarts = false;
            proxy._cancelSaveTools();
            proxy._checkboxSelection && proxy._resetCheckboxState();
            proxy.processBindings();
            proxy.renderRecords();
            cArgs.requestType = "batchSave";
            cArgs.batchChanges = batchChanges;
            proxy._trigger("actionComplete", cArgs);
            proxy.batchChanges.changed = [];
            proxy.batchChanges.added = []; 
            proxy.batchChanges.deleted = [];
            proxy.batchChanges.updatedHierarchyRowIndexData = [];
            proxy._batchSaveCancel = "";
        },
        //To cancel batch edited values
        batchCancel: function () {
            var proxy = this,
                model = proxy.model,
                batchChanges = proxy.batchChanges,
                batchEditedRecords = batchChanges.changed,
                batchDeletedRecords = batchChanges.deleted,
                batchAddedRecords = batchChanges.added, args = {}, changedRecords = proxy._mergeRecords();
            //Clear filtered columns
            var filteredColumns = model.filterSettings.filteredColumns;
            if (filteredColumns && filteredColumns.length > 0)
                proxy.clearFilter();
            //Remove the batch added rows
            if (batchAddedRecords.length)
                proxy.deleteRow();
            //To reset the original value and remove batchEditedField collection from modified data
            for (var e = 0; e < batchEditedRecords.length; e++) {
                var fieldsData = batchEditedRecords[e].batchEditedFields;
                for (var field in fieldsData) {
                    batchEditedRecords[e][field] = fieldsData[field];
                    batchEditedRecords[e].item[field] = fieldsData[field];
                }
                delete batchEditedRecords[e].batchEditedFields;
            }
            //To remove isBatchDelete, isBatchAdd and batchEditedField collection from deleted data
            for (var a = 0; a < batchDeletedRecords.length; a++) {
                proxy._updateBatchDeletedRecord(batchDeletedRecords[a]);                
            }

            proxy.batchChanges.changed = [];
            proxy.batchChanges.added = [];
            proxy.batchChanges.deleted = [];
            proxy.batchChanges.updatedHierarchyRowIndexData = [];
            proxy._batchSaveCancel = "";
            if (proxy._batchEditStarts)
                proxy._batchEditStarts = false;
            proxy._cancelSaveTools();
            proxy._checkboxSelection && proxy._resetCheckboxState();
            if (model.showSummaryRow) {
                proxy._batchEditCancel = true;
                for (var i = 0; i < changedRecords.length; i++) {
                    args.record = changedRecords[i];
                    proxy._updateSummaryRow(args);
                }
            }
            if (model.showTotalSummary) {
                args.editType = "celledit";
                proxy._updateTotalSummaryRow(args);
            }
            proxy.processBindings();
            proxy.renderRecords();
            proxy._batchEditCancel = false;
        },

        //Reset checkbox state
        _resetCheckboxState: function () {
            var proxy = this, model = proxy.model;
            if (proxy._checkboxSelection) {
                var flatData = model.flatRecords;
                $.map(flatData, function (record) {
                    if (record.checkboxState == "checked" || record.checkboxState == "indeterminate")
                        record.checkboxState = "unchecked";
                });               
                proxy.selectAllRows();
            }
        },

        _updateBatchDeletedRecord: function (record) {
            var proxy = this, model = proxy.model;
            delete record.isBatchDelete;
            if (record.isBatchAdd) {
                //To delete the batch added row that is in batch delete collection
                proxy.batchChanges.added = [];
                proxy.batchChanges.added.push(record);
                proxy.deleteRow();
                return true;
            }
            if (record.batchEditedFields) {
                var fieldsData = record.batchEditedFields;
                for (var field in fieldsData) {
                    record[field] = fieldsData[field];
                }
                delete record.batchEditedFields;
            }
            if (record.hasChildRecords) {
                var childs = record.childRecords;
                for (var c = 0; c < childs.length; c++) {
                    proxy._updateBatchDeletedRecord(childs[c]);
                }
            }
        },
        //CHECK EDITING OPTIONS 
        _processEditing:function(){

            var proxy = this,
                model = proxy.model;

            if (proxy._checkboxSelection)
                proxy._updateCheckboxColumnName();

            if (model.editSettings.allowEditing || model.editSettings.allowAdding) {
                if (model.editSettings.editMode.toLowerCase() === "cellediting" || model.editSettings.editMode.toLowerCase() === "rowediting" || (model.editSettings.editMode.toLowerCase() == "batchediting" && (model.editSettings.batchEditSettings.editMode == "cell" || model.editSettings.batchEditSettings.editMode == "row")) || (model.editSettings.editMode.toLowerCase() === "normal" && model.selectionSettings.selectionMode.toLowerCase() === "cell")) {
                    proxy._addCellEditTemplate();
                } else if ((model.editSettings.editMode.toLowerCase() === "dialogediting" || (model.editSettings.editMode.toLowerCase() == "batchediting" && model.editSettings.batchEditSettings.editMode == "dialog")) && (ej.isNullOrUndefined(model.editSettings.dialogEditorTemplateID) || model.editSettings.dialogEditorTemplateID == "")) {
                    proxy._treeGridAddEditDialog();
                    if ($("#" + this._id + "_dialogEdit").length == 0)
                        this.element.append(this._renderEditDialog());
                } else if ((model.editSettings.editMode.toLowerCase() === "dialogediting" || (model.editSettings.editMode.toLowerCase() == "batchediting" && model.editSettings.batchEditSettings.editMode == "dialog")) && (!ej.isNullOrUndefined(model.editSettings.dialogEditorTemplateID) && model.editSettings.dialogEditorTemplateID != "")) {
                    proxy._treeGridAddEditDialogTemplate();
                    if ($("#" + this._id + "_dialogEdit").length == 0)
                        this.element.append(this._renderEditDialog());
                }
            }

        },

        _toolBarClick: function (sender) {

            //Skip the mouse right click and mouse wheel
            if ((sender.event.which && (sender.event.which == 3 || sender.event.which == 2)) ||
                     (sender.event.button && sender.event.button == 2))
                return false;

            var proxy = this,
               model = proxy.model,
               $gridEle = $(this.itemsContainer).closest(".e-treegrid"),
               gridInstance = $gridEle.ejTreeGrid("instance"),
               gridId = $gridEle.attr('id'),
                toolbarObj = $("#" + gridInstance._id + "_toolbarItems");
            
            if (sender.event == undefined && sender.target.tagName == "INPUT" && sender.currentTarget.id == gridId + "_search")
                return false;

            if (gridInstance.model.dateFormat.toLowerCase().indexOf("hh") != -1)
                $.isFunction($.fn.ejDateTimePicker) && $("#" + gridId + "EditForm").find(".e-datepicker").ejDateTimePicker("hide");
            else
                $.isFunction($.fn.ejDatePicker) && $("#" + gridId + "EditForm").find(".e-datepicker").ejDatePicker("hide");
            var currentTarget = sender.currentTarget; var target = sender.target;
            var args = {
                itemName: sender.text,
                currentTarget: currentTarget,
                model: gridInstance.model,
                sender: sender
            };
            if ($gridEle.ejTreeGrid("instance")._trigger("toolbarClick", args))
                return false;
            $(toolbarObj).ejToolbar('deselectItem', sender.currentTarget);
            switch (sender.currentTarget.id) {

                case gridId + "_add":
                    gridInstance._toolbarOperation(gridId + "_add", sender);
                    break;

                case gridId + "_edit":
                    gridInstance._toolbarOperation(gridId + "_edit", sender);
                    break;

                case gridId + "_delete":
                    gridInstance._toolbarOperation(gridId + "_delete", sender);
                    break;

                case gridId + "_update":
                    gridInstance._toolbarOperation(gridId + "_update", sender);
                    break;

                case gridId + "_cancel":
                    gridInstance._toolbarOperation(gridId + "_cancel", sender);
                    break;

                case gridId + "_expandAll":
                    gridInstance._toolbarOperation(gridId + "_expandAll", sender);
                    break;

                case gridId + "_collapseAll":
                    gridInstance._toolbarOperation(gridId + "_collapseAll", sender);
                    break;
                case gridId + "_pdfExport":
                    gridInstance._toolbarOperation(gridId + "_pdfExport",sender);
                    break;
                case gridId + "_excelExport":
                    gridInstance._toolbarOperation(gridId + "_excelExport", sender);
                    break;
                case gridId + "_print":
                    gridInstance._toolbarOperation(gridId + "_print", sender);
                    break;
                case gridId + "_search":
                    if (gridInstance._isRowEdit)
                        gridInstance.cancelRowEditCell();
                    else if (gridInstance.model.isEdit)
                        gridInstance.cancelEditCell();
                    break;
            }
            return false;
        },
        _toolbarOperation: function (operation, searchEle) {
            var $gridEle = this.element, gridObject = $gridEle.ejTreeGrid("instance"), gridId = $gridEle.attr('id'), proxy = this;
            var selectedrow = this.selectedItem();
            var parentEle = searchEle.target;
            var index = proxy.model.allowPaging ? this._updatedPageData.indexOf(selectedrow) : this.selectedRowIndex();
            gridObject._exportTo = gridObject["export"];
            switch (operation) {

                case gridId + "_add":
                    if (proxy.model.selectionSettings.selectionMode == "cell") {
                        proxy.model.editSettings.rowPosition = "top";
                    }
                    if (proxy.model.editSettings.allowEditing && (proxy.model.editSettings.editMode == "dialogEditing" || (proxy.model.editSettings.editMode.toLowerCase() == "batchediting" && proxy.model.editSettings.batchEditSettings.editMode == "dialog"))) {
                        proxy._showTreeGridAddEditDialog(-1, "add");
                    } else {
                        proxy._startAdd(parentEle, null);
                    }
                    break;
                    
                case gridId + "_edit":
                    proxy.updateScrollBar();
                    if (proxy.model.editSettings.allowEditing && (proxy.model.editSettings.editMode == "dialogEditing" || (proxy.model.editSettings.editMode.toLowerCase() == "batchediting" && proxy.model.editSettings.batchEditSettings.editMode == "dialog"))) {
                        proxy._showTreeGridAddEditDialog(index);
                    } else {
                        proxy._editRow(index);
                    }
                    break;

                case gridId + "_delete":
                    proxy.deleteRow();
                    if (!proxy.model.editSettings.showDeleteConfirmDialog)
                        proxy._cancelSaveTools();
                    proxy._isRefreshAddedRecord = false;/* flag new added record is sorted or filtered in treegrid */
                    break;

                case gridId + "_update":
                    editMode = proxy.model.editSettings.editMode;
                    if (editMode.toLowerCase() == "cellediting") {
                        proxy._saveEditedElements();
                    }
                    else if (editMode.toLowerCase() == "rowediting")
                        proxy.saveRow();
                    else if (editMode.toLowerCase() == "batchediting") {                        
                        proxy.cancelEdit();
                        proxy._batchSaveCancel = "save";
                        proxy.model.editSettings.showConfirmDialog ? proxy._confirmDialog.find(".e-content").html(proxy._batchSaveConfirmText).end().ejDialog("open") : proxy.batchSave();
                    }
                    proxy._clearContextMenu();
                    this._removeDetailsRow();
                    proxy._focusTreeGridElement();

                    break;

                case gridId + "_cancel":
                    var editMode = proxy.model.editSettings.editMode;
                    if (editMode.toLowerCase() == "cellediting") {
                        if (proxy._isRowEdit)
                            proxy.cancelRowEditCell();
                        else proxy.cancelEditCell();
                    }
                    else if (editMode.toLowerCase() == "rowediting")
                        proxy.cancelRowEditCell();
                    else if (editMode.toLowerCase() === "batchediting") {                        
                        if (proxy._isRowEdit)
                            proxy.cancelRowEditCell();
                        else if (proxy.model.isEdit)
                            proxy.cancelEditCell();
                        proxy._batchSaveCancel = "cancel";
                        proxy.model.editSettings.showConfirmDialog ? proxy._confirmDialog.find(".e-content").html(proxy._cancelEditText).end().ejDialog("open") : proxy.batchCancel();
                    }
                    if (proxy.model.sizeSettings.height == "auto")
                        proxy._updateContentHeight();
                    proxy._cancelSaveTools();
                    proxy._clearContextMenu();
                    this._removeDetailsRow();
                    break;

                case gridId + "_expandAll":
                    proxy.expandAll();
                    break;

                case gridId + "_collapseAll":
                    proxy.collapseAll();
                    break;
                case gridId + "_pdfExport":
                    gridObject._exportTo(gridObject.model.exportToPdfAction, 'pdfExporting', gridObject.model.allowMultipleExporting);
                    break;
                case gridId + "_excelExport":
                    gridObject._exportTo(gridObject.model.exportToExcelAction, 'excelExporting', gridObject.model.allowMultipleExporting);
                    break;
                case gridId + "_print":
                    gridObject.print();
                    break;
                case gridId + "_search":
                    if (proxy._batchEditStarts && !(proxy._confirmDialog).is(":visible")) {
                        proxy._batchSaveLostWarning("Searching");
                        proxy._batchTempDetails.searchTarget = searchEle;
                        proxy._batchTempDetails.searchString = searchEle.value;
                        return true;
                    }
                    if (proxy._searchString != searchEle.value) {
                        proxy.search(searchEle.value);
                        proxy._updateToolbarItems();
                        proxy._isRefreshAddedRecord = false;
                    }
                    break;
            }
            proxy._refreshToolBar();
            return false;
        },

        //To render alert dialog for batch save lost
        _batchSaveLostWarning: function (action) {
            var proxy = this, model = proxy.model;
            if (model.editSettings.editMode.toLowerCase() == "batchediting") {
                if (model.isEdit)
                    proxy.saveCell();
                else if (proxy._isRowEdit)
                    proxy.saveRow();
                proxy._batchSaveCancel = "saveLost" + action;
                model.editSettings.showConfirmDialog ? proxy._confirmDialog.find(".e-content").html(proxy._batchSaveLostChangesText).end().ejDialog("open") : proxy.batchCancel();
            }
        },

       // To render a delete confirmation dialog
        _renderConfirmDialog: function () {
            var proxy = this;
            var $contentDiv = ej.buildTag('div.e-content', proxy.localizedLabels.deleteRecordText),
                $buttons = ej.buildTag('span.e-buttons', '<input type="button" class="e-flat e-btnsub" id=' + proxy._id + "_ConfirmDialogOK" + ' value="' + this.localizedLabels.okButtonText + '" /> '
                + "<input type='button' class='e-flat e-btncan' id=" + proxy._id + '_ConfirmDialogCancel' + " value='" + proxy.localizedLabels.cancelButtonText + "' />", { float: "right", padding: ".5em 0em" });
            proxy._confirmDialog = ej.buildTag('div#' + proxy._id + '_ConfirmDialog', { height: "auto", width: "auto", float: "left" });
            proxy._confirmDialog.append($contentDiv).append($buttons);
            proxy.element.append(proxy._confirmDialog);
            $buttons.find("input").ejButton({
                cssClass: proxy.model.cssClass,
                showRoundedCorner: true,
                size: "mini",
                click: $.proxy(proxy._triggerConfirm, proxy)
            });
            proxy._confirmDialog.ejDialog({ showOnInit: false,enableAnimation: false, showHeader: false, width: "auto", minWidth: 0, minHeight: 0, enableModal: true, enableResize: false });
		   },
		   
		// To confirm whether to delete a row or not   
		   _triggerConfirm: function (args) {
		       var proxy = this, model = proxy.model;
		       if (args !== undefined && args.model.text == proxy.localizedLabels.okButtonText) {
		           if (proxy._batchSaveCancel == "save") {
		               proxy.batchSave();
		           }
		           else if (proxy._batchSaveCancel == "cancel") {
		               proxy.batchCancel();
		           }
		           else if (proxy._batchSaveCancel == "saveLostDrag") {
		               proxy._batchSaveCancel = "cancel";
		               proxy.batchCancel();
		           }
		           else if (proxy._batchSaveCancel == "saveLostColumnMenu") {
		               proxy._batchSaveCancel = "cancel";
		               proxy.batchCancel();
		               proxy._renderColumnMenu(proxy._batchTempDetails.menuTarget);
		           }
		           else if (proxy._batchSaveCancel == "saveLostSearching") {
		               proxy._batchSaveCancel = "cancel";
		               proxy.batchCancel();
		               proxy.search(proxy._batchTempDetails.searchString);
		               proxy._updateToolbarItems();
		               proxy._isRefreshAddedRecord = false;
		           }
		           else if (proxy._batchSaveCancel == "saveLostPaging") {
		               proxy._batchSaveCancel = "cancel";
		               proxy.batchCancel();
		               if (proxy._prevPageNo == proxy._batchTempDetails.currentPage)
		                   return;
		               proxy._isNextPage = true;
		               if (proxy._isRowEdit)
		                   proxy.cancelRowEditCell();
		               else if (proxy.model.isEdit)
		                   proxy.cancelEditCell();
		               proxy.gotoPage(proxy._batchTempDetails.currentPage);
		           }
		           else if (proxy._batchSaveCancel == "saveLostFiltering") {
		               proxy._batchSaveCancel = "cancel";
		               proxy.batchCancel();
		               var batchDetails = proxy._batchTempDetails;
		               if (model.filterSettings.filterType == "filterbar") {
		                   proxy.filterColumn(batchDetails.fieldName, batchDetails.filterOperator, batchDetails.filterValue,
                               batchDetails.predicate, batchDetails.matchcase, batchDetails.actualFilterValue);
		               }
		               else if (model.filterSettings.filterType == "excel" || model.filterSettings.filterType == "menu") {
		                   proxy._onHeaderClick(batchDetails.filterTarget);
		               }
		           }
		           else proxy.deleteRow(null, proxy._isFromContextmenu, proxy._deleteRowIndex);
		           proxy._confirmDialog.ejDialog("close");
		           proxy._cancelSaveTools();
		       }
		       else {
		           proxy._confirmDialog.ejDialog("close");
		           if (proxy._batchSaveCancel == "saveLostFiltering") {
		               if (model.filterSettings.filterType == "filterbar") {
		                   var targetElem = $(proxy._batchTempDetails.filterTarget);
		                   if (targetElem.hasClass("e-numerictextbox"))
		                       targetElem.ejNumericTextbox({ value: null });
		                   else if (targetElem.hasClass("e-dropdownlist"))
		                       targetElem.ejDropDownList({ value: null });
		                   else targetElem.closest("input").val("");
		               }
		           }
		           if (proxy._batchSaveCancel == "saveLostSearching") {
		               if (!proxy._searchString) {
		                   var targetElem = $(proxy._batchTempDetails.searchTarget);
		                   if (targetElem.hasClass("e-ejinputtext"))
		                       targetElem.closest("input").val("");
		               }
		           }
		           if (proxy._batchSaveCancel == "saveLostPaging") {
		               var pagerModel = this.getPager().ejPager("model");
		               pagerModel.currentPage = proxy._prevPageNo;
		               proxy.getPager().ejPager("refreshPager");
		           }
		       }
		           proxy._focusTreeGridElement();
		       proxy._deleteRowIndex = -1;
		       proxy._isFromContextmenu = false;
		       proxy._batchSaveCancel = "";
		   },

        // To print the page
        print: function () {
            var args = {}, proxy = this, model = proxy.model;
            args.requestType = "print";
            proxy._trigger("actionBegin", args);
            var printWin = window.open('', 'print', "height=452,width=1024,tabbar=no"), $printDiv = ej.buildTag("div#" + proxy._id + "Print"),
                cloneTreeGridModel = $.extend({}, proxy.model), cloneTreeGridModelColumn = $.extend(true, [], model.columns),
                columns = cloneTreeGridModelColumn, length = columns.length;
            cloneTreeGridModel.toolbarSettings = $.extend({}, model.toolbarSettings);
            cloneTreeGridModel.toolbarSettings.showToolbar = cloneTreeGridModel.allowPaging = false;
            cloneTreeGridModel.selectedItem = null;
            cloneTreeGridModel.enableVirtualization = false;
            cloneTreeGridModel.query.queries = [];
            cloneTreeGridModel.printingEnabled = true;            
            //To remove the frozen columns while printing.
            if (this._frozenColumnsLength > 0) {
                for (var i = 0; i < length; i++) {
                    if (columns[i].isFrozen)
                        columns[i].isFrozen = false;
                }
                cloneTreeGridModel.columns = columns;
            }
            if (this._commandColumnLength > 0) {
                for (var i = 0; i < length; i++) {
                    if (columns[i].commands) {
                        columns.splice(i, 1);
                        length--;
                        i--;
                    }
                }
                cloneTreeGridModel.columns = columns;
            }
            //To check the page settings to print the current page or all the pages.
            if (model.allowPaging && model.pageSettings.printMode == ej.TreeGrid.PrintMode.CurrentPage) {
                cloneTreeGridModel.query.queries = [{ fn: "onPage", e:{ pageIndex: proxy._currentPage(), pageSize: model.pageSettings.pageSize }}];
                cloneTreeGridModel.dataBound = function () {
                    this._printProcess(printWin);
                }
            }
            else {                
                cloneTreeGridModel.dataBound = function () {
                    this._printProcess(printWin);
                }
            }
            $printDiv.ejTreeGrid(cloneTreeGridModel);            
        },
        //To call the print option for TreeGrid.
        _printProcess: function (printWin) {
            var proxy = this,
                elementClone = this.element,
                args = { requestType: "print", element: elementClone};                      
            if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
                elementClone.find(".e-filterbar").remove();
            $(elementClone).find(".e-gridheader").css({ "width": "auto" });
            this.clearSelection();
            elementClone.show();
            proxy._trigger("beforePrint", args);          
            ej.print(elementClone, printWin);
            proxy._trigger("actionComplete", args);
        },

		 // Perform Tree grid context menu operations.
        contextMenuOperations:function(option){
            var proxy = this,
                 model = proxy.model,
                 index = proxy._contextMenuSelectedIndex,
                 e = proxy._contextMenuEvent,
                 fieldName,
                 item = proxy._contextMenuSelectedItem,
                 editSettings = model.editSettings,
                 editMode = editSettings.editMode.toLowerCase();
            if(!this._isContextMenuItems)
                column = proxy._contextMenuColumnDetails;
            switch (option)
            {
                case "contextMenu_Unfreeze":
                    if ($(this).find(".e-expander").length == 0) {
                        if (!$(this).hasClass("e-disable")) {
                            if (proxy._checkboxSelection && proxy._frozenColumnsLength == 2) {
                                if (model.columns[0].nonColumn && model.columns[0].isFrozen)
                                    model.columns[0]['isFrozen'] = false;
                            }
                            proxy.freezeColumn(column.field, false);
                        }
                    }
                    break;
                case "contextMenu_Freeze":
                    if ($(this).find(".e-expander").length == 0) {
                        if (!$(this).hasClass("e-disable")) {
                            if (proxy._checkboxSelection) {
                                if (model.columns[0].nonColumn && !model.columns[0].isFrozen)
                                    model.columns[0]['isFrozen'] = true;
                            }
                            proxy.freezeColumn(column.field, true);
                        }
                    }
                    break;
                case "contextMenu_FreezePreceding":
                    if ($(this).find(".e-expander").length == 0) {
                        if (!$(this).hasClass("e-disable"))
                            proxy.freezePrecedingColumns(column.field);
                    }
                    break;
                case "contextMenu_SortDescending":
                    if (model.allowMultiSorting) proxy._multiSortRequest = true;
                    if ($(this).find(".e-expander").length == 0) {
                        if (!model.isFromGantt)
                            proxy.sortColumn(column.field, ej.sortOrder.Descending);
                        proxy._multiSortRequest = false;
                    }
                    break;
                case "contextMenu_SortAscending":

                    if (model.allowMultiSorting) proxy._multiSortRequest = true;
                    if ($(this).find(".e-expander").length == 0) {
                        if (!model.isFromGantt)
                            proxy.sortColumn(column.field, ej.sortOrder.Ascending);
                        proxy._multiSortRequest = false;
                    }
                    break;
                case "Delete":
                    proxy.deleteRow(null, true, proxy._contextMenuSelectedIndex);
                    proxy._cancelSaveTools();
                    proxy._clearContextMenu();
                    break;
                case "Above":
                    proxy._subContextMenuAction(item, index, "Above");
                    proxy._focusTreeGridElement();
                    break;
                case "Below":
                    proxy._subContextMenuAction(item, index, "Below");
                    proxy._focusTreeGridElement();
                    break;
                case "Add":
                    proxy._setInitialData();
                    proxy._clearContextMenu();
                    break;
                case "Edit":
                    if (editMode == "cellediting" || (editMode == "batchediting" && editSettings.batchEditSettings.editMode == "cell")) {
                        var column = model.columns[proxy.getCellIndex(e)];
                        if (!ej.isNullOrUndefined(column) && column.allowEditing != false) {
                            proxy._focusTreeGridElement();
                            proxy._cellEditingDetails.columnIndex = proxy.getCellIndex(e);
                            proxy._editedRowIndex = proxy._cellEditingDetails.rowIndex = proxy.getRowIndex(e);
                            fieldName = proxy._cellEditingDetails.columnIndex >= 0 && column.field;
                            if (fieldName) {
                                proxy.updateScrollBar();
                                model.editSettings.allowEditing &&
                                    proxy.cellEdit(proxy._cellEditingDetails.rowIndex, fieldName) && proxy._editAddTools();
                            }
                        }
                    }
                    else if (editMode == "rowediting" || (editMode == "batchediting" && editSettings.batchEditSettings.editMode == "row")) {
                        proxy.updateScrollBar();
                        proxy._editRow(index);
                    } else if (editMode == "dialogediting" || (editMode == "batchediting" && editSettings.batchEditSettings.editMode == "dialog")) {
                        proxy._showTreeGridAddEditDialog(index);
                    }
                    proxy._clearContextMenu();
                    break;
                case "Save":
                    if (editMode == "cellediting" || (editMode == "batchediting" && editSettings.batchEditSettings.editMode == "cell")) {
                        if (this.editFormValidate()) {
                            if (proxy._isRowEdit)
                                proxy._endEdit();
                            else proxy.saveCell();
                        }
                        else
                            return true;
                    }
                    else if (editMode == "rowediting" || (editMode == "batchediting" && editSettings.batchEditSettings.editMode == "row"))
                        proxy.saveRow();
                    proxy._clearContextMenu();
                    proxy._focusTreeGridElement();
                    break;
                case "Cancel":
                    if (editMode == "cellediting" || (editMode == "batchediting" && editSettings.batchEditSettings.editMode == "cell")) {
                        if (proxy._isRowEdit)
                            proxy.cancelRowEditCell();
                        else if (model.isEdit) proxy.cancelEditCell();
                    }
                    else if (editMode == "rowediting" || (editMode == "batchediting" && editSettings.batchEditSettings.editMode == "row"))
                        proxy.cancelRowEditCell();
                    proxy._clearContextMenu();
                    proxy._focusTreeGridElement();
                    break;
                default:
                    var eventArgs = {};
                    if (this._isContextMenuItems) {
                        eventArgs.data = item;
                        eventArgs.menuId = option;
                        proxy._triggerMenuEventHandler(option, eventArgs, true);
                        proxy._clearContextMenu();
                    }
                    else {
                        eventArgs.column = proxy._contextMenuColumnDetails;
                        eventArgs.menuId = option;
                        proxy._triggerMenuEventHandler(option, eventArgs, false);
                         proxy._clearContextMenu();
                    }
                    break;
            }
            if (model.enableAltRow && model.currentViewData[0])
                ej.TreeGrid.updateAltRow(proxy, model.currentViewData[0], 0, 0);            
        },
        //Change the text based on culture information.
        _setCultureInfo: function () {
            var proxy = this,
              model = proxy.model,
              culture = model.locale,
              localization = proxy.localizedLabel, 
              defaultLocalization = ej.TreeGrid.Locale["default"];
            if (!(model.predecessorTable || model.resourceTable))
                localization = ej.TreeGrid.Locale[culture];
            else
                localization = ej.Gantt.Locale[culture];
            //Tooltip Text to be displayed in the Toolbar
            proxy._toolboxTooltipTexts = (localization && localization["toolboxTooltipTexts"])?
                localization["toolboxTooltipTexts"] : defaultLocalization["toolboxTooltipTexts"];

            //Context Menu Text
            proxy._contextMenuTexts = (localization && localization["contextMenuTexts"]) ?
                localization["contextMenuTexts"] : defaultLocalization["contextMenuTexts"];

            if (proxy.model.isFromGantt) {
                proxy._columnMenuTexts = proxy.model.columnMenuTexts;
                proxy._deleteColumnText = proxy.model.deleteColumnText;
                proxy._okButtonText = proxy.model.okButtonText;
                proxy._cancelButtonText = proxy.model.cancelButtonText;
                proxy._columnDialogTexts = proxy.model.columnDialogTexts;
                proxy._columnDialogTitle = proxy.model.columnDialogTitle;
                proxy._confirmDeleteText = proxy.model.confirmDeleteText;
                proxy._editTypeText = proxy.model.editTypeText;
                proxy._textAlignTypeText = proxy.model.textAlignTypeText;
                proxy._clipModeText = proxy.model.clipModeText;
            }
            else {
                //Column Menu Text
                proxy._columnMenuTexts = (localization && localization["columnMenuTexts"]) ?
                    localization["columnMenuTexts"] : defaultLocalization["columnMenuTexts"];
                
                //Add Column Dialog Text to be displayed in popup window
                proxy._columnDialogTexts = (localization && localization["columnDialogTexts"]) ?
                    localization["columnDialogTexts"] : defaultLocalization["columnDialogTexts"];

                //Add Column Dialog Titles
                proxy._columnDialogTitle = (localization && localization["columnDialogTitle"]) ?
                    localization["columnDialogTitle"] : defaultLocalization["columnDialogTitle"];

                //Deleting the column texts 
                proxy._deleteColumnText = (localization && localization["deleteColumnText"]) ?
                    localization["deleteColumnText"] : defaultLocalization["deleteColumnText"];
                proxy._okButtonText = (localization && localization["okButtonText"]) ?
                    localization["okButtonText"] : defaultLocalization["okButtonText"];
                proxy._cancelButtonText = (localization && localization["cancelButtonText"]) ?
                    localization["cancelButtonText"] : defaultLocalization["cancelButtonText"];
                proxy._confirmDeleteText = (localization && localization["confirmDeleteText"]) ?
                    localization["confirmDeleteText"] : defaultLocalization["confirmDeleteText"];

                //edit Types text
                proxy._editTypeText = (localization && localization["editTypeTexts"]) ?
                    localization["editTypeTexts"] : defaultLocalization["editTypeTexts"];

                //Edit types text
                proxy._textAlignTypeText = (localization && localization["textAlignTypes"]) ?
                    localization["textAlignTypes"] : defaultLocalization["textAlignTypes"];

                //Clip mode types text
                proxy._clipModeText = (localization && localization["clipModeTexts"]) ?
                    localization["clipModeTexts"] : defaultLocalization["clipModeTexts"];

                //String to be displayed in drop down list for filtering blank items
                proxy._dropDownListBlanksText = (localization && localization["dropDownListBlanksText"]) ?
                    localization["dropDownListBlanksText"] : defaultLocalization["dropDownListBlanksText"];

                //String to be displayed in drop down list to clear filtered items
                proxy._dropDownListClearText = (localization && localization["dropDownListClearText"]) ?
                    localization["dropDownListClearText"] : defaultLocalization["dropDownListClearText"];

                //Text to be displayed in drop down list for TRUE value in boolean edit type column
                proxy._trueText = (localization && localization["trueText"]) ?
                    localization["trueText"] : defaultLocalization["trueText"];

                //Text to be displayed in drop down list for FALSE value in boolean edit type column
                proxy._falseText = (localization && localization["falseText"]) ?
                    localization["falseText"] : defaultLocalization["falseText"];

                //Batch editing confirm dialog texts 
                proxy._batchSaveConfirmText = (localization && localization["batchSaveConfirmText"]) ?
                    localization["batchSaveConfirmText"] : defaultLocalization["batchSaveConfirmText"];
                proxy._batchSaveLostChangesText = (localization && localization["batchSaveLostChangesText"]) ?
                    localization["batchSaveLostChangesText"] : defaultLocalization["batchSaveLostChangesText"];
                proxy._cancelEditText = (localization && localization["cancelEditText"]) ?
                    localization["cancelEditText"] : defaultLocalization["cancelEditText"];

                //EmptyRecord text to be displayed with dataSource is null
                proxy.model.emptyRecordText = (localization && localization["emptyRecord"]) ?
                    localization["emptyRecord"] : defaultLocalization["emptyRecord"];

                //Text to be displayed in filter menu
                proxy._filterMenuTexts = (localization && localization["filterMenuTexts"]) ?
                    localization["filterMenuTexts"] : defaultLocalization["filterMenuTexts"];
            }
        },

        
		
        //Public method to pass a datasource from customer side.

        //REFRESH THE TREEGRIDCONTENT
        

        refresh:function(datasource, query){
            var proxy = this, model = proxy.model;
            if (!ej.isNullOrUndefined(datasource)) {
                proxy.resetModelCollections();
                proxy._fieldNamesToQuery = [];
                proxy._assignedIdCollections = [];
                proxy._assignedParendIDs = [];
                model.dataSource = datasource;
                model.query = query;
                proxy.element.ejTreeGrid("destroy").ejTreeGrid(model);                
            }
            else {
                var args = {};
                args.requestType = ej.TreeGrid.Actions.Refresh;
                this.sendDataRenderingRequest(args);
            }
        },		
        /* get index for new record */
        _getNewIndex: function () {
            var proxy = this;
            proxy._maxRowIndex += 1;
            return (proxy._maxRowIndex);            
        },
        _getNewId: function () {
            var proxy = this,
                newId = proxy._lastInsertedId + 1;
            return newId;
        },
        _updateLastInsertedId: function (Id) {
            var proxy = this, newId = isNaN(parseInt(Id)) ? proxy._lastInsertedId < 1 ? 1 : proxy._lastInsertedId : parseInt(Id);
            proxy._lastInsertedId = proxy._lastInsertedId < newId ? newId : proxy._lastInsertedId;
        },
        _updateHierarchyRowIndexData: function (args, recordCollection, recordIndex) {
            var proxy = this, model = proxy.model, editMode = model.editSettings.editMode.toLowerCase();
            args.updatedHierarchyRowIndexData = [];
            for (var e = recordIndex; e < recordCollection.length; e++) {
                recordCollection[e].hierarchyRowIndex = e;
                if (model.hierarchyRowIndexMapping)
                    recordCollection[e].item[model.hierarchyRowIndexMapping] = e;                
                if (editMode != "batchediting")
                    args.updatedHierarchyRowIndexData.push(recordCollection[e]);
                else
                    proxy.batchChanges.updatedHierarchyRowIndexData.indexOf(recordCollection[e]) == -1 && proxy.batchChanges.updatedHierarchyRowIndexData.push(recordCollection[e]);
            }
        },
        //Add new record in treeGrid control
        _addRecord: function (data, rowPosition, isEdit, isFrom) {
            var proxy = this;

            /*Cancel if treegrid is in edit*/
            if (proxy.model.isEdit || proxy._isRowEdit) {
                proxy.cancelRowEditCell();
            }

            var model = this.model,
                selectedRowIndex = this.selectedRowIndex(),
                //selectedCellIndexes = this.selectedCellIndexes(),
                _cAddedRecord,
                updatedRecords = model.updatedRecords,
                flatRecords = model.flatRecords,
                parentRecords = model.parentRecords,
                selectedItem = model.selectionSettings.selectionMode == "row" ? this.selectedItem() : updatedRecords[proxy._rowIndexOfLastSelectedCell],
                columns = model.columns,
                dataSource = this.dataSource(),
                level = 0, insertIndex, validateArgs = {}, currentPageRowIndex = -1,
                isRecordAdded = false,
                isToolbarAdd = false,
                newIndex,                
                dataChildCount,
                editMode = model.editSettings.editMode.toLowerCase(),
                parentItem, nextBelowItemInflatRecords, nextBelowItemInUpdatedRecords,
                isParentItemAdd = false, args = {}, argsLevel, argsParentItem;

            if ($.type(dataSource) !== "array" && !(dataSource instanceof ej.DataManager)) {
                this.dataSource([]);
                dataSource = this.dataSource();
            }
            if (ej.isNullOrUndefined(data)) {
                data = null;
                for (var count = 0; count < columns.length; count++) {
                    if (!ej.isNullOrUndefined(columns[count].nonColumn))
                        continue;
                    data = proxy._restoreCustomData(data, "", columns[count].field);
                }
                isToolbarAdd = true;
            }
            if (editMode == "batchediting")
                data.isBatchAdd = true;
            if (model.idMapping && model.parentIdMapping && !ej.isNullOrUndefined(data[proxy.model.parentIdMapping]) && rowPosition != "child") {
                var parentRec = model.flatRecords.filter(function (item) {
                    return item[model.idMapping] == data[model.parentIdMapping];
                });
                if (parentRec.length > 0) {
                    selectedItem = parentRec[0];
                    rowPosition = ej.TreeGrid.RowPosition.Child;
                    isParentItemAdd = true;
                }
            }

            if ((selectedRowIndex === -1 && proxy._rowIndexOfLastSelectedCell == -1) && (rowPosition === ej.TreeGrid.RowPosition.Above
                 || rowPosition === ej.TreeGrid.RowPosition.Below
                 || rowPosition === ej.TreeGrid.RowPosition.Child) || !rowPosition || (model.selectedItems.length > 1 && !proxy._checkboxSelection)) {
                if (!isParentItemAdd)
                    rowPosition = ej.TreeGrid.RowPosition.Top;
            }
            if (rowPosition == ej.TreeGrid.RowPosition.Top || rowPosition == ej.TreeGrid.RowPosition.Bottom)
            {
                argsLevel = 0;
                argsParentItem = null;
            }
            else if (rowPosition == ej.TreeGrid.RowPosition.Above || rowPosition == ej.TreeGrid.RowPosition.Below) {
                argsLevel = selectedItem.level;
                argsParentItem = selectedItem.parentItem;
            }
            else if (rowPosition == ej.TreeGrid.RowPosition.Child) {
                argsLevel = selectedItem.level + 1;
                argsParentItem = selectedItem;
            }
            if (model.idMapping && model.parentIdMapping) {
                var id = data[model.idMapping];
                if (ej.isNullOrUndefined(id) || id == "" || isFrom == "contextMenu")
                    data[model.idMapping] = proxy._getNewId();
                else if (proxy._validateIdValue(id)) return false;
            }

            args.requestType = "add";
            args.data = data;
            args.level = argsLevel;
            args.rowPosition = rowPosition;
            args.parentItem = argsParentItem;
            if (!proxy._trigger("actionBegin", args)) {
                data = args.data;

                if (rowPosition != args.rowPosition)
                    rowPosition = args.rowPosition;

                if (data[model.childMapping] && data[model.childMapping].length)
                    delete data[model.childMapping]; // Remove the child items for externally adding row

                //Clear previously selected Item
                //proxy.clearSelection()
                proxy.selectRows(-1);
                newIndex = this._getNewIndex();

                switch (rowPosition) {
                    case ej.TreeGrid.RowPosition.Top:
                        level = 0;
                        parentItem = null;
                        _cAddedRecord = proxy._createRecord(data, level);
                        _cAddedRecord.index = newIndex;
                        
                        /*record update*/
                        flatRecords.splice(0, 0, _cAddedRecord);
                        updatedRecords.splice(0, 0, _cAddedRecord);
                        if (proxy._isHierarchyFiltering)
                            proxy._updateFilterParent.splice(0, 0, _cAddedRecord);
                        parentRecords.splice(0, 0, _cAddedRecord);

                        //Update hierarchyRowIndex for level 0 records
                        proxy._updateHierarchyRowIndexData(args, parentRecords, 0);

                        /*data source update*/
                        if (proxy._isDataManagerUpdate) {
                            proxy._jsonData.splice(0, 0, _cAddedRecord.item);
                        } else {
                            dataSource.splice(0, 0, _cAddedRecord.item);
                        }
                        insertIndex = 0;
                        break;

                    case ej.TreeGrid.RowPosition.Bottom:
                        level = 0;
                        parentItem = null;
                        _cAddedRecord = proxy._createRecord(data, level);
                        _cAddedRecord.index = newIndex;
                        
                        /*record update*/
                        flatRecords.push(_cAddedRecord);
                        updatedRecords.push(_cAddedRecord);
                        if (proxy._isHierarchyFiltering)
                            proxy._updateFilterParent.push(_cAddedRecord);
                        //ids.push(newIndex);
                        parentRecords.push(_cAddedRecord);
                        /*data source update*/
                        if (proxy._isDataManagerUpdate) {
                            proxy._jsonData.push(_cAddedRecord.item);
                        } else {
                            dataSource.push(_cAddedRecord.item);
                        }
                        insertIndex = updatedRecords.indexOf(_cAddedRecord);
                        break;

                    case ej.TreeGrid.RowPosition.Above:
                        level = selectedItem.level;
                        parentItem = selectedItem.parentItem;
                        _cAddedRecord = proxy._createRecord(data, level, parentItem);
                        _cAddedRecord.index = newIndex;
                        if (proxy._isHierarchyFiltering && selectedItem.filterLevel > -1)
                            _cAddedRecord.filterLevel = selectedItem.filterLevel;

                        var childIndex, recordIndex, updatedCollectionIndex;
                        /*Record Updates*/
                        recordIndex = flatRecords.indexOf(selectedItem);
                        updatedCollectionIndex = updatedRecords.indexOf(selectedItem);
                        flatRecords.splice(recordIndex, 0, _cAddedRecord);
                        updatedRecords.splice(updatedCollectionIndex, 0, _cAddedRecord);
                        if (proxy._isHierarchyFiltering)
                            proxy._updateFilterParent.splice(updatedCollectionIndex, 0, _cAddedRecord);
                        //ids.splice(recordIndex, 0, newIndex);

                        if (!ej.isNullOrUndefined(parentItem)) {
                            childIndex = parentItem.childRecords.indexOf(selectedItem);
                            /*Child collection update*/
                            parentItem.childRecords.splice(childIndex, 0, _cAddedRecord);
                            if (!model.parentIdMapping) {
                                parentItem.item[model.childMapping].splice(childIndex, 0, _cAddedRecord.item);
                            }
                            else {
                                _cAddedRecord.item[model.parentIdMapping] = _cAddedRecord.parentItem.item[model.idMapping];
                                _cAddedRecord[model.parentIdMapping] = _cAddedRecord.parentItem.item[model.idMapping];
                                if (proxy._isDataManagerUpdate) {
                                    proxy._jsonData.push(_cAddedRecord.item);

                                } else {
                                    dataSource.push(_cAddedRecord.item);
                                }
                            }
                            //Update hierarchyRowIndex for level 1 and above records
                            var childRecords = parentItem.childRecords;
                            proxy._updateHierarchyRowIndexData(args, childRecords, childIndex);
                        } else {
                            /* Parent records collection and data source update*/
                            parentRecords.splice(parentRecords.indexOf(selectedItem), 0, _cAddedRecord);
                            if (proxy._isDataManagerUpdate) {
                                proxy._jsonData.splice(proxy._jsonData.indexOf(selectedItem.item), 0, _cAddedRecord.item);
                            }
                            else {
                                dataSource.splice(dataSource.indexOf(selectedItem.item), 0, _cAddedRecord.item);
                            }
                            //Update hierarchyRowIndex for level 0 records
                            var pIndex = parentRecords.indexOf(selectedItem);
                            proxy._updateHierarchyRowIndexData(args, parentRecords, pIndex);
                        }
                        insertIndex = updatedCollectionIndex;
                        break;
                    case ej.TreeGrid.RowPosition.Below:
                        level = selectedItem.level;
                        parentItem = selectedItem.parentItem;
                        _cAddedRecord = proxy._createRecord(data, level, parentItem);
                        _cAddedRecord.index = newIndex;
                        if (proxy._isHierarchyFiltering && selectedItem.filterLevel>-1)
                            _cAddedRecord.filterLevel = selectedItem.filterLevel;

                        //find next item position
                        var currentItemIndex = flatRecords.indexOf(selectedItem);

                        if (selectedItem.hasChildRecords) {
                            dataChildCount = proxy.getChildCount(selectedItem, 0);
                            recordIndex = currentItemIndex + dataChildCount + 1;
                            updatedCollectionIndex = updatedRecords.indexOf(selectedItem) + proxy._getVisibleChildRecordCount(selectedItem, 0, updatedRecords) + 1;

                        } else {
                            recordIndex = currentItemIndex + 1;
                            updatedCollectionIndex = updatedRecords.indexOf(selectedItem) + 1;
                        }

                        /* Record collection update */
                        flatRecords.splice(recordIndex, 0, _cAddedRecord);
                        updatedRecords.splice(updatedCollectionIndex, 0, _cAddedRecord);
                        if (proxy._isHierarchyFiltering)
                            proxy._updateFilterParent.splice(updatedCollectionIndex, 0, _cAddedRecord);
                        //ids.splice(recordIndex, 0, newIndex);

                        /* data Source update */
                        if (!ej.isNullOrUndefined(parentItem)) {
                            childIndex = parentItem.childRecords.indexOf(selectedItem);
                            /*Child collection update*/
                            parentItem.childRecords.splice(childIndex + 1, 0, _cAddedRecord);
                            if (!model.parentIdMapping) {
                                parentItem.item[model.childMapping].splice(childIndex + 1, 0, _cAddedRecord.item);
                            }
                            else {
                                _cAddedRecord.item[model.parentIdMapping] = _cAddedRecord.parentItem.item[model.idMapping];
                                _cAddedRecord[model.parentIdMapping] = _cAddedRecord.parentItem.item[model.idMapping];
                                if (proxy._isDataManagerUpdate) {
                                    proxy._jsonData.push(_cAddedRecord.item);

                                } else {
                                    dataSource.push(_cAddedRecord.item);
                                }
                            }
                            //Update hierarchyRowIndex for level 1 and above records
                            var childRecords = parentItem.childRecords;
                            proxy._updateHierarchyRowIndexData(args, childRecords, childIndex + 1);
                        } else {
                            /* Parent records collection and data source update*/
                            parentRecords.splice(parentRecords.indexOf(selectedItem) + 1, 0, _cAddedRecord);
                            if (proxy._isDataManagerUpdate) {
                                proxy._jsonData.splice(proxy._jsonData.indexOf(selectedItem.item) + 1, 0, _cAddedRecord.item);
                            }
                            else {
                                dataSource.splice(dataSource.indexOf(selectedItem.item) + 1, 0, _cAddedRecord.item);
                            }
                            //Update hierarchyRowIndex for level 0 records
                            var pIndex = parentRecords.indexOf(selectedItem);
                            proxy._updateHierarchyRowIndexData(args, parentRecords, pIndex + 1);
                        }
                        insertIndex = updatedCollectionIndex;
                        break;
                    case ej.TreeGrid.RowPosition.Child:
                        level = selectedItem.level + 1;
                        parentItem = selectedItem;
                        _cAddedRecord = proxy._createRecord(data, level, parentItem);
                        _cAddedRecord.index = newIndex;
                        if (proxy._isHierarchyFiltering && selectedItem.filterLevel > -1)
                            _cAddedRecord.filterLevel = selectedItem.filterLevel+1;
                        
                        //find next item position
                        var currentItemIndex = flatRecords.indexOf(selectedItem);

                        if (selectedItem.hasChildRecords) {
                            dataChildCount = proxy.getChildCount(selectedItem, 0);
                            recordIndex = currentItemIndex + dataChildCount + 1;
                            //Expand Add record's parent item 
                            if (!selectedItem.expanded || !proxy.getExpandStatus(selectedItem)) {
                                var expanargs = {};
                                expanargs.expanded = true;
                                expanargs.data = selectedItem;
                                proxy._isInAdd = true;
                                /* refresh Added row on expand collapse */
                                if (proxy._isRefreshAddedRecord) {
                                    expanargs.data.expanded = true;
                                    proxy.updateExpandStatus(args.data, args.expanded);
                                    proxy.refreshContent();
                                    proxy._isRefreshAddedRecord = false;
                                } else {
                                    proxy._expandRecord(selectedItem);
                                }
                                updatedRecords = model.updatedRecords;
                                proxy._isInAdd = false;                              
                            }
                            updatedCollectionIndex = updatedRecords.indexOf(selectedItem) + proxy._getVisibleChildRecordCount(selectedItem, 0, updatedRecords) + 1 - (model.showSummaryRow ? model.summaryRows.length:0);

                        } else {
                            if (proxy._isLoadonDemand)
                                selectedItem.isChildRetrieved = true;
                            if (!proxy.getExpandStatus(selectedItem))
                                proxy._expandRecord(selectedItem.parentItem);                            
                            selectedItem.hasChildRecords = true;
                            selectedItem.childRecords = [];
                            selectedItem.expanded = true;
                            if (!model.parentIdMapping) {
                                selectedItem.item[model.childMapping] = [];
                            }
                            selectedItem.isMilestone = false;
                            recordIndex = currentItemIndex + 1;
                            updatedCollectionIndex = updatedRecords.indexOf(selectedItem) + 1;
                        }

                        /* Record collection update */
                        flatRecords.splice(recordIndex, 0, _cAddedRecord);
                        if (proxy._isHierarchyFiltering)
                            proxy._updateFilterParent.splice(updatedCollectionIndex, 0, _cAddedRecord);
                        if (proxy._isLoadonDemand) {
                            if (selectedItem.isChildRetrieved)
                                updatedRecords.splice(updatedCollectionIndex, 0, _cAddedRecord);
                        }
                        else
                            updatedRecords.splice(updatedCollectionIndex, 0, _cAddedRecord);
                        //ids.splice(recordIndex, 0, newIndex);

                        /* data Source update */
                        if (!ej.isNullOrUndefined(parentItem)) {
                            childIndex = parentItem.childRecords.indexOf(selectedItem);
                            /*Child collection update*/
                            parentItem.childRecords.splice(childIndex + 1, 0, _cAddedRecord);
                            if (!model.parentIdMapping) {
                                parentItem.item[model.childMapping].splice(childIndex + 1, 0, _cAddedRecord.item);
                            }
                            else {
                                _cAddedRecord.item[model.parentIdMapping] = _cAddedRecord.parentItem.item[model.idMapping];
                                _cAddedRecord[model.parentIdMapping] = _cAddedRecord.parentItem.item[model.idMapping];
                                if (proxy._isDataManagerUpdate) {
                                    proxy._jsonData.push(_cAddedRecord.item);
                                } else {
                                    dataSource.push(_cAddedRecord.item);
                                }
                            }
                            //Update hierarchyRowIndex for level 1 and above records
                            var childRecords = parentItem.childRecords;
                            proxy._updateHierarchyRowIndexData(args, childRecords, 0);
                        }
                        insertIndex = updatedCollectionIndex;
                        break;
                }
                if (model.allowPaging) {
                    //Goto next page if New record insertIndex exit than pagesize
                    if (rowPosition == ej.TreeGrid.RowPosition.Below || rowPosition == ej.TreeGrid.RowPosition.Child) {
                        if ((model.pageSettings.pageSizeMode !== "root" || ej.isNullOrUndefined(selectedItem.parentItem))) {
                            var targetData = proxy._updatedPageData[proxy._updatedPageData.length - 1],
                                currentIndex = proxy._updatedPageData.length == model.pageSettings.pageSize ?
                                model.updatedRecords.indexOf(targetData) : insertIndex;
                            if (insertIndex > currentIndex) {
                                proxy._currentPage(this._currentPage() + 1);
                                currentPageRowIndex = 0;
                            }
                        }
                    }
                        //Goto first page
                    else if (rowPosition == ej.TreeGrid.RowPosition.Top && (proxy._currentPage() > 1 || proxy._currentPage() < 1)) {
                        proxy._currentPage(1);
                        currentPageRowIndex = 0;
                    }
                        //Goto last page
                    else if (rowPosition == ej.TreeGrid.RowPosition.Bottom && proxy._currentPage() < model.pageSettings.totalPages) {
                        proxy._currentPage(model.pageSettings.totalPages);
                        currentPageRowIndex = insertIndex;
                    }

                }
                //For update selectedItems if Add record once after filtered
                if ((model.allowFiltering && model.filterSettings.filteredColumns.length > 0) || proxy._searchString.length > 0)
                    proxy._flatFilteredRecords.push(_cAddedRecord);

                if (!isToolbarAdd && (ej.TreeGrid.RowPosition.Above || ej.TreeGrid.RowPosition.Below)) {
                    var args = {},
                        currentValue = {},
                        columns = model.columns,
                        length = columns.length;
                    if (!model.allowPaging)
                        currentPageRowIndex = insertIndex;
                    args.rowIndex = insertIndex;
                    args.requestType = "addNewRow";
                    args.addedRow = data;

                    if (editMode == "batchediting" || !proxy._trigger("actionComplete", args)) {
                        proxy._updateAction(args);
                        proxy._renderAddedRow(insertIndex, _cAddedRecord);
                        if (model.showSummaryRow) {
                            if (args.requestType == "addNewRow" && rowPosition == "child") {
                                proxy._createAndRenderSummaryRecords(args);
                            }
                            proxy._updateSummaryRow(args);
                        }
                        if (model.showTotalSummary)
                            proxy._updateTotalSummaryRow(args);
                        isRecordAdded = true;
                        if (model.idMapping && model.parentIdMapping) {
                            proxy. _updateLastInsertedId(_cAddedRecord[model.idMapping]);                            
                        }                        
                    }
                    else {
                        updatedRecords.splice(insertIndex, 1);
                    }
                }
                else {
                    proxy._renderAddedRow(insertIndex, _cAddedRecord);
                    isRecordAdded = true;
                    proxy._emptyRowIndex = model.selectionSettings.selectionMode == "cell" ? insertIndex : null;
                }
                if (editMode == "batchediting" && isRecordAdded && !isToolbarAdd) {
                    proxy.batchChanges.added.push(_cAddedRecord);
                    proxy._batchEditStarts = true;
                }
                /*Set flag for refresh newly added record in non virtalization mode*/
                if (model.enableVirtualization === false &&
                    (model.sortSettings.sortedColumns.length > 0 || model.filterSettings.filteredColumns.length > 0)) {
                    proxy._isRefreshAddedRecord = true;
                }
                if (model.allowPaging)
                    updatedRecords = proxy._updatedPageData;
                /* select add row */
                var currentRowIndex = isRecordAdded ? updatedRecords.indexOf(_cAddedRecord) : selectedRowIndex;
                
                if (currentRowIndex == -1)
                    currentRowIndex = selectedRowIndex;

                if (model.allowSelection && model.selectionSettings.selectionMode == "row") {
                    
                    if (!proxy._rowSelectingEventTrigger(this._previousIndex, currentRowIndex)) {  
						proxy.selectRows(currentRowIndex);					
                        if (model.selectionSettings.enableSelectAll)
                            proxy.selectAllRows();
                        if (proxy._checkboxSelection && model.selectionSettings.enableHierarchySelection && _cAddedRecord.parentItem)
                            proxy._updateParentSelection(_cAddedRecord.parentItem);
                        proxy._rowSelectedEventTrigger(currentRowIndex);
                    }
                }
                if (!model.allowSelection && model.selectionSettings.selectionMode == "row") {
                    proxy.selectRows(currentRowIndex);
                }
                if (model.selectionSettings.selectionMode == "cell")
                    proxy._rowIndexOfLastSelectedCell = updatedRecords.indexOf(_cAddedRecord);
                /* scroll to new added record */
                proxy.updateScrollBar();

                if (isEdit == "isEditRow") {
                    proxy._editRow(updatedRecords.indexOf(_cAddedRecord), _cAddedRecord);
                }
                else {
                    ej.TreeGrid.refreshRow(proxy, model.currentViewData.indexOf(_cAddedRecord));
                    proxy._cancelSaveTools();
                    if (model.enableAltRow)
                        ej.TreeGrid.updateAltRow(proxy, proxy.model.currentViewData[0], 0, 0);
                }
                //refresh parent item for expand collapse icons
                if (_cAddedRecord.parentItem && rowPosition == ej.TreeGrid.RowPosition.Child && (_cAddedRecord.parentItem.childRecords.length == 1 || !_cAddedRecord.parentItem.hasFilteredChildRecords)) {
                    _cAddedRecord.parentItem.hasFilteredChildRecords = true;
                    ej.TreeGrid.refreshRow(proxy, model.currentViewData.indexOf(_cAddedRecord.parentItem));
                }
                if (model.allowTextWrap && proxy._$frozenTableContent.length > 0) {
                    proxy._updateWrapRowHeights("total,header");
                    proxy.updateHeight();
                } else if (model.allowTextWrap && model.enableVirtualization) {
                    proxy.updateHeight();
                }
            } else {
                if (isFrom == "dialog")
                    return false;
            }
            if (proxy._commandColumnLength > 0) {
                if (ej.isNullOrUndefined(isEdit)) {
                    var tr = ej.TreeGrid.getRowByIndex(proxy, currentRowIndex)
                    proxy._refreshUnboundTemplate(tr);
                }
                if (rowPosition == ej.TreeGrid.RowPosition.Child) {
                    var parentIndex = updatedRecords.indexOf(_cAddedRecord.parentItem),
                    parentTr = ej.TreeGrid.getRowByIndex(proxy, parentIndex);
                    proxy._refreshUnboundTemplate(parentTr);
                }
            }
            return true;
        },

        //validate the taskId to avoid duplicate value
        _validateIdValue: function (dataID) {
            var proxy = this, model = proxy.model,
                matchedItem = [],
                fRecords = model.flatRecords;
            if (proxy._isLoadonDemand) {
                matchedItem = $.map(proxy._assignedIdCollections, function (value) {
                    if (value == dataID)
                        return value;
                });
            }
            else {
                matchedItem = $.map(fRecords, function (record) {
                    if (record[model.idMapping] == dataID)
                        return record;
                });
            }
            if (matchedItem.length)
                return true;
            else return false;
        },         
         
        // Method to trigger the actionbegin event while close the Add/Edit dialog
        _closeTreegridAddEditDialog: function (args, type) {
            var proxy = this;
            var eventArgs = {};
            this._off($("#" + this._id + "_dialogEdit"),
                "click keypress", "#EditFormDialog_" + this._id + "_Save ,#EditFormDialog_" + this._id + "_Cancel", proxy._buttonClick);
            if (proxy._isTreeAddEditDialogSave)
                proxy._isTreeAddEditDialogSave = false;
            else {
                if (type === "Add")
                    eventArgs.requestType = "closeAddDialog";
                else
                    eventArgs.requestType = "closeEditDialog";
                return proxy._trigger("actionBegin", eventArgs);
            }
        },

        // Public method to show the Add dialog/Add template dialog
        showAddDialog: function () {
            var proxy = this;
            if (proxy.model.editSettings.allowAdding && proxy.model.editSettings.editMode == "dialogEditing")
                proxy._showTreeGridAddEditDialog(null, "add");
        },

        // Public method to show the Edit dialog/Edit template dialog
        showEditDialog: function (index) {
            var proxy = this;
            if (proxy.model.editSettings.allowEditing && proxy.model.editSettings.editMode == "dialogEditing")
                proxy._showTreeGridAddEditDialog(index);
        },

        // Method to open/show the ADD/EDIT dialog from all possible ways (double/single click edit, toolbar click, public method, context menu)
        _showTreeGridAddEditDialog: function (index, addrow) {
            var temp = document.createElement('div'), proxy = this,
            $temp = $(temp), controlPosition = proxy.getOffsetRect($("#" + proxy._id)[0]),
            currentData = [], columns = proxy.model.columns, contextMenuLabel = proxy._contextMenuTexts;
            if ((ej.isNullOrUndefined(index) || index == -1) && !addrow) {
                if (proxy.model.selectionSettings.selectionMode == "cell")
                    index = proxy.selectedCellIndexes()[0].rowIndex;
                else
                    index = proxy.selectedRowIndex();
            }
            currentData[0] = proxy.model.allowPaging ? this._updatedPageData[index] : proxy.model.updatedRecords[index];
            if (addrow && addrow.toLowerCase() === "add") {
                if (ej.isNullOrUndefined(currentData[0])) {
                    currentData[0] = null;
                    for (var count = 0; count < columns.length; count++) {
                        currentData[0] = proxy._restoreCustomData(currentData[0], "", columns[count].field);
                    }
                    if (proxy.model.parentIdMapping)
                        currentData[0][proxy.model.idMapping] = proxy._getNewId();
                }
                $temp.addClass("e-dialogaddrow");
            } else {
                $temp.addClass("e-dialogeditedrow");
            }
            if (ej.isNullOrUndefined(proxy.model.editSettings.dialogEditorTemplateID) || proxy.model.editSettings.dialogEditorTemplateID == "")
                temp.innerHTML = $.render[this._id + "_JSONDialogEditingTemplate"](currentData);
            else if (!ej.isNullOrUndefined(proxy.model.editSettings.dialogEditorTemplateID) && proxy.model.editSettings.dialogEditorTemplateID != "")
                temp.innerHTML = $.render[this._id + "_JSONdialogTemplateMode"](currentData);

            if (this.model.editSettings.editMode == "dialogEditing" || (proxy.model.editSettings.editMode.toLowerCase() == "batchediting" && proxy.model.editSettings.batchEditSettings.editMode == "dialog")) {
                $("#" + this._id + "_dialogEdit").html($(temp));
                var model = {};
                model.cssClass = this.model.cssClass;
                model.enableRTL = false;
                model.enableResize = false;
                model.showOnInit = false;
                model.content = "#" + this._id;
                if ($(window).width() <= proxy._responsiveMinWidth && proxy.model.isResponsive) {
                    model.width = $("#" + proxy._id).width() + "px";
                    model.height = $("#" + proxy._id).height() + "px";
                    model.enableModal = false;
                    model.isResponsive = false;
                    model.allowDraggable = false;
                } else {
                    model.width = "auto";
                    model.height = "auto";
                    model.enableModal = true;
                    model.isResponsive = false;
                    model.allowDraggable = true;
                }
                model.allowKeyboardNavigation = false;
                if (addrow && addrow.toLowerCase() === "add") {
                    model.title = contextMenuLabel["addRowText"];
                    model.beforeClose = function (args) {
                        if (proxy._closeTreegridAddEditDialog(args, "Add"))
                            args.cancel = true; // Cancel the add dialog box close.
                            proxy._focusTreeGridElement();
                    };
                }
                else {
                    model.title = contextMenuLabel["editText"];
                    model.beforeClose = function (args) {
                        if (proxy._closeTreegridAddEditDialog(args, "Edit"))
                            args.cancel = true; // Cancel the add dialog box close.
                            proxy._focusTreeGridElement();
                    };
                }
                $("#" + this._id + "_dialogEdit").ejDialog(model);
                var dialogArgs = {};
                dialogArgs.data = currentData[0];
                if (addrow && addrow.toLowerCase() === "add") {
                    dialogArgs.requestType = "beforeOpenAddDialog";
                    dialogArgs.rowPosition = proxy.model.editSettings.rowPosition;
                }
                else
                    dialogArgs.requestType = "beforeOpenEditDialog";
                dialogArgs.element = $("#" + proxy._id + "_dialogEdit");
                if (!proxy._trigger("actionBegin", dialogArgs)) {
                    var args = {};
                    args.columnIndex = index;
                    args.data = dialogArgs.data;
                    args.requestType = "beginEdit";
                    proxy._refreshEditForm(args);
                    dialogArgs.data = args.data;
                    if (addrow && addrow.toLowerCase() === "add")
                        dialogArgs.requestType = "openAddDialog";
                    else
                        dialogArgs.requestType = "openEditDialog";
                    dialogArgs.element = $("#" + proxy._id + "_dialogEdit");
                    if (!proxy._trigger("actionBegin", dialogArgs)) {
                        $("#" + this._id + "_dialogEdit").ejDialog("open");
                        proxy._currentEditRecordDialogIndex = this.model.currentViewData.indexOf(args.data);
                        if ($(window).width() <= proxy._responsiveMinWidth && proxy.model.isResponsive) {
                            $("#" + proxy._id + "_dialogEdit_wrapper").css({ 'left': controlPosition.left + "px", 'top': controlPosition.top + "px" });
                            $("#" + proxy._id + "_dialogEdit_wrapper").removeClass("e-shadow").removeClass("e-treegridadaptivedialog");
                            $("#" + proxy._id + "_dialogEdit").removeClass("e-shadow");
                        } else {
                            $("#" + proxy._id + "_dialogEdit_wrapper").addClass("e-shadow").addClass("e-treegridadaptivedialog");
                            $("#" + proxy._id + "_dialogEdit").addClass("e-shadow");
                        }
                        this._on($("#" + this._id + "_dialogEdit"),
                       "click keypress", "#EditFormDialog_" + this._id + "_Save ,#EditFormDialog_" + this._id + "_Cancel", proxy._buttonClick);
                        $("#" + proxy._id + "_dialogEdit").ejDialog("refresh");
                    }
                }
            }
            if ($.isFunction($.validator)) {
                proxy._initValidator();
                proxy.setValidation();
            }
        },

        //Public method for adding new record
        addRow: function (data, rowPosition) {
            var proxy = this, model = proxy.model;
            /* Cancel edited cell before sort the column*/
            proxy._cancelEditState();

            if (!data) {
                proxy._addRecord(null, rowPosition, "isEditRow");
            } else {
                if (proxy._addRecord(data, rowPosition)) return true;
                else
                    return false;
            } 
        },

        _startAdd: function (parentEle, rowPos) {
            var proxy = this, model = this.model, rowPosition;
            if (proxy.model.allowSelection && proxy.model.selectionSettings.selectionType == "multiple" && this._multiSelectPopup && this._multiSelectPopup.is(":visible")) {
                proxy._clearMultiSelectPopup();
            }
            proxy._addRecord(null, model.editSettings.rowPosition, "isEditRow");
        },
        _getRecordIndexByItem: function (item, collection) {
            var record = ej.DataManager(collection).executeLocal(ej.Query().where("item", ej.FilterOperators.equal, item));
            if (record.length > 0)
                return collection.indexOf(record[0]);
            else
                return -1;
        },
        /* update the reord's expand status in expanded state*/
        _expandRecord: function (record)
        {
            if (this._isLoadonDemand && !record.isChildRetrieved)
                return;
            var parentItem = record, args = {};
            while (parentItem != null) {
                if (parentItem.expanded == false) {
                    args.expanded = true;
                    args.data = parentItem;
                    if (!parentItem.parentItem)
                        this._isInExpandCollapseAll = false;
                    else
                        this._isInExpandCollapseAll = true;
                    ej.TreeGrid.sendExpandCollapseRequest(this, args);
                }
                parentItem = parentItem.parentItem;
            }
        },

        /* Public method for scroll to the corresponding offset value */
        scrollOffset: function (left, top) {
            var scrollerObj = this.getScrollElement().data("ejScroller"),
                proxy = this;

            proxy._saveEditedElements();

            if ((typeof top == "number" || typeof parseInt(top) == "number")) {
                top = parseInt(top);
                if (top >= 0 && this.getMaxScrollHeight() >= top)
                    scrollerObj.scrollY(top, true);
            }
            if (typeof left == "number" || typeof parseInt(left) == "number") {
                left = parseInt(left);
                if (left >= 0 && this.getMaxScrollWidth() >= left)
                    scrollerObj.scrollX(left, true);
            } 
        },
        /* Public method for get scrollTop value*/
        getScrollTopOffset: function () {
            return this.getScrollElement().ejScroller("model.scrollTop");
        },
        /* Public method for get scrollLeft value*/
        getScrollLeftOffset: function () {
            return this.getScrollElement().ejScroller("model.scrollLeft");
        },
        /* Public method for scroll to first row of treegrid*/
        scrollToTop:function()
        {
            var model = this.model,
                updatedRecords = this.getUpdatedRecords(), record, rowIndex = -1;
            if (!this.isVScroll()) return;

            this._saveEditedElements();

            updatedRecords = model.allowPaging ? updatedRecords : this.getExpandedRecords(model.updatedRecords);
            if (updatedRecords.length > 0) {
                rowIndex = 0;
                record = updatedRecords[0];
                rowIndex = updatedRecords.indexOf(record);
                this.updateScrollBar(rowIndex);
                if (model.allowSelection && !this._rowSelectingEventTrigger(this.selectedRowIndex(), rowIndex)) {
                    this.selectRows(rowIndex);
                    this._rowSelectedEventTrigger(rowIndex);
                }
            }
        },
        /* Public method for scroll to last row of treegrid*/
        scrollToBottom: function ()
        {
            var model = this.model,
                updatedRecords, record, rowIndex = -1;
            if (!this.isVScroll()) return;

            this._saveEditedElements();

            updatedRecords = model.allowPaging ? this.getUpdatedRecords() : this.getExpandedRecords(model.updatedRecords);

            if (updatedRecords.length > 0) {
                rowIndex = updatedRecords.length - 1;
                record = updatedRecords[rowIndex];
                rowIndex = model.allowPaging ? updatedRecords.indexOf(record) : model.updatedRecords.indexOf(record);
                this.updateScrollBar(rowIndex);
                if (model.allowSelection && !this._rowSelectingEventTrigger(this.selectedRowIndex(), rowIndex)) {
                    this.selectRows(rowIndex);
                    this._rowSelectedEventTrigger(rowIndex);
                }
            }
        },

        //ENABLE AND DISABLE THE CORRESPONDING TOOLS WHILE ADDING AND EDITING THE ROW RECORD.
        _editAddTools: function () {
            var proxy = this, model = proxy.model;
            var toolbar = $("#" + proxy._id + "_toolbarItems");
            var editSettings = proxy.model.editSettings,
            toolbarItems = model.toolbarSettings.toolbarItems;
            var disableToolItems = [];
            if (editSettings.allowAdding && toolbarItems.indexOf("add") !== -1 && !$(toolbar).find(".e-addnew").parent("li").hasClass("e-disable") && editSettings.beginEditAction != "click")
                disableToolItems.push($(toolbar).find(".e-addnew").parent()[0]);
            if (editSettings.allowEditing && toolbarItems.indexOf("edit") !== -1 && !$(toolbar).find(".e-edit").parent("li").hasClass("e-disable"))
                disableToolItems.push($(toolbar).find(".e-edit").parent()[0]);
            if (editSettings.allowDeleting && toolbarItems.indexOf("delete") !== -1 && !$(toolbar).find(".e-delete").parent("li").hasClass("e-disable") && model.editSettings.beginEditAction != "click")
                disableToolItems.push($(toolbar).find(".e-delete").parent()[0]);
            disableToolItems.forEach(function (element) {
                $(toolbar).ejToolbar('disableItem', element);
            });

            var enabledToolItems = [];
            if (editSettings.editMode.toLowerCase() != "batchediting" || (editSettings.editMode.toLowerCase() == "batchediting" && proxy._batchEditStarts)) {
                if (toolbarItems.indexOf("cancel") !== -1)
                    enabledToolItems.push($(toolbar).find(".e-cancel").parent()[0]);
                if (toolbarItems.indexOf("update") !== -1)
                    enabledToolItems.push($(toolbar).find(".e-save").parent()[0]);
            }
            enabledToolItems.forEach(function (element) {
                $(toolbar).ejToolbar('enableItem', element);
            });

        },
        //ENABLE AND DISABLE THE CORRESPONDING TOOLS WHILE CANCEL AND SAVING THE ROW RECORD.
        _cancelSaveTools: function () {
            var proxy = this,
                model = proxy.model,
                editSettings = proxy.model.editSettings,
                toolbar = $("#" + proxy._id + "_toolbarItems"),
                parentRecords = [],
                enabledToolItems,
                disableToolItems,
                toolbarItems = model.toolbarSettings.toolbarItems;
            if (!model.isFromGantt) {
                enabledToolItems = [];
                disableToolItems = [];
                if (editSettings.allowAdding) {
                    if (toolbarItems.indexOf("add") !== -1)
                        enabledToolItems.push($(toolbar).find(".e-addnew").parent()[0]);
                } else {
                    disableToolItems.push($(toolbar).find(".e-addnew").parent()[0]);
                }

                if (editSettings.allowEditing && toolbarItems.indexOf("edit") !== -1) {
                    if (proxy.selectedRowIndex() != -1 && model.allowSelection && (model.selectedItems.length == 1 || proxy._checkboxSelection)  && editSettings.beginEditAction != "click")
                        enabledToolItems.push($(toolbar).find(".e-edit").parent()[0]);
                    else if (!$(toolbar).find(".e-edit").parent("li").hasClass("e-disable"))
                        disableToolItems.push($(toolbar).find(".e-edit").parent()[0]);
                } else {
                    disableToolItems.push($(toolbar).find(".e-edit").parent()[0]);
                }
                if (editSettings.allowDeleting && toolbarItems.indexOf("delete") !== -1) {
                    if ((proxy._checkboxSelection || (proxy.selectedRowIndex() != -1 && model.allowSelection)) && model.selectedItems.length > 0)
                        enabledToolItems.push($(toolbar).find(".e-delete").parent()[0]);
                    else if (!$(toolbar).find(".e-delete").parent("li").hasClass("e-disable"))
                        disableToolItems.push($(toolbar).find(".e-delete").parent()[0]);
                } else {
                    disableToolItems.push($(toolbar).find(".e-delete").parent()[0]);
                }

                parentRecords = proxy._getParentRecords(model.updatedRecords, proxy);

                if (parentRecords.length <= 0) {
                    if (toolbarItems.indexOf("expandAll") !== -1 && !$(toolbar).find(".e-expandall").parent("li").hasClass("e-disable"))
                        disableToolItems.push($(toolbar).find(".e-expandall").parent()[0]);
                    if (toolbarItems.indexOf("collapseAll") !== -1 && !$(toolbar).find(".e-collapseall").parent("li").hasClass("e-disable"))
                        disableToolItems.push($(toolbar).find(".e-collapseall").parent()[0]);
                }
                else {
                    if (toolbarItems.indexOf("expandAll") !== -1)
                        enabledToolItems.push($(toolbar).find(".e-expandall").parent()[0]);
                    if (toolbarItems.indexOf("collapseAll") !== -1)
                        enabledToolItems.push($(toolbar).find(".e-collapseall").parent()[0]);
                }
                if (editSettings.beginEditAction != "click" || (editSettings.beginEditAction == "click" && !model.isEdit)) {
                    if (editSettings.editMode.toLowerCase() != "batchediting" || (editSettings.editMode.toLowerCase() == "batchediting" && !proxy._batchEditStarts)) {
                        if (toolbarItems.indexOf("cancel") !== -1 && !$(toolbar).find(".e-cancel").parent("li").hasClass("e-disable"))
                            disableToolItems.push($(toolbar).find(".e-cancel").parent()[0]);
                        if (toolbarItems.indexOf("update") !== -1 && !$(toolbar).find(".e-save").parent("li").hasClass("e-disable"))
                            disableToolItems.push($(toolbar).find(".e-save").parent()[0]);
                    }
                    else if (editSettings.editMode.toLowerCase() == "batchediting" && proxy._batchEditStarts) {
                        if (toolbarItems.indexOf("cancel") !== -1 && $(toolbar).find(".e-cancel").parent("li").hasClass("e-disable"))
                            enabledToolItems.push($(toolbar).find(".e-cancel").parent()[0]);
                        if (toolbarItems.indexOf("update") !== -1 && $(toolbar).find(".e-save").parent("li").hasClass("e-disable"))
                            enabledToolItems.push($(toolbar).find(".e-save").parent()[0]);
                    }
                }

                disableToolItems.forEach(function (element) {
                    $(toolbar).ejToolbar('disableItem', element);
                });
                enabledToolItems.forEach(function (element) {
                    $(toolbar).ejToolbar('enableItem', element);
                });
            }
            else {
                var toolbar = $("#" + proxy._id.replace("ejTreeGrid", "") + "_toolbarItems");
                var enabledToolItems = [],disableToolItems = [];
                if (model.readOnly == true) {
                    disableToolItems = [];
                    disableToolItems.push($(toolbar).find(".e-addnewitem").parent()[0]);
                    disableToolItems.push($(toolbar).find(".e-edititem").parent()[0]);
                    disableToolItems.push($(toolbar).find(".e-edititem").parent()[0]);
                }
                else {
                    if (editSettings.allowAdding && toolbarItems.indexOf("add") !== -1)
                        enabledToolItems.push($(toolbar).find(".e-addnewitem").parent()[0]);

                    if (editSettings.allowEditing && toolbarItems.indexOf("edit") !== -1 && model.allowSelection && editSettings.beginEditAction != "click") {
                        if (proxy.selectedRowIndex() != -1 && model.selectedItems.length == 1)
                            enabledToolItems.push($(toolbar).find(".e-edititem").parent()[0]);
                        else
                            disableToolItems.push($(toolbar).find(".e-edititem").parent()[0]);
                    }
                    if (editSettings.allowDeleting && toolbarItems.indexOf("delete") !== -1 && model.allowSelection) {
                        if (proxy.selectedRowIndex() != -1)
                            enabledToolItems.push($(toolbar).find(".e-deleteitem").parent()[0]);
                        else
                            disableToolItems.push($(toolbar).find(".e-deleteitem").parent()[0]);
                    }
                    if (editSettings.allowIndent && (toolbarItems.indexOf("indent") !== -1 || toolbarItems.indexOf("outdent") !== -1) && model.allowSelection) {
                        if (proxy.selectedRowIndex() == -1) {
                            disableToolItems.push($(toolbar).find(".e-indent").parent()[0]);
                            disableToolItems.push($(toolbar).find(".e-outdent").parent()[0]);
                        }
                    }
                    $(toolbar).ejToolbar('enableItem', enabledToolItems);

                  
                    if (toolbarItems.indexOf("cancel") !== -1)
                        disableToolItems.push($(toolbar).find(".e-cancel").parent()[0]);
                    if (toolbarItems.indexOf("update") !== -1)
                        disableToolItems.push($(toolbar).find(".e-saveitem").parent()[0]);
                }
                disableToolItems.forEach(function (element) {
                    $(toolbar).ejToolbar('disableItem', element);

                });
            }
        },

        
        _checkIsEmptyRow: function (item) {
            var column = this.model.columns,
                itemIndex;
                    for (itemIndex = 0; itemIndex < column.length ; itemIndex++) {
                        var value = this._getCustomCellValue(item, column[itemIndex].field);
                        if (value === " " || ej.isNullOrUndefined(value) || value === "" || value === false)
                            continue;
                        return false;
                    }
            return true;
        },
        /*Method to trigger begin edit event*/   
        _beginEdit: function () {
            var proxy = this, args = {};
            proxy._trigger("beginEdit", args);
            proxy._isinBeginEdit = true;           
        },

        /*Method to save edited/added row*/
        _endEdit: function () {
            var proxy = this;

            proxy._isinBeginEdit = false;
            var index = this.selectedRowIndex();
            var tr = ej.TreeGrid.getRowByIndex(proxy, index);
            if (this.editFormValidate()) {
                if ($('tr').hasClass("e-addedrow") || $('tr').hasClass("e-rowedit"))
                    proxy.saveRow();
                else
                    proxy.saveCell();
            }
            else
                return true;

        },
        //Refresh the treegrid content after expandAll or collapseAll
        _refreshTreeGridOnExpandCollapseAll:function(args)
        {
            var proxy = this,
                model = this.model;
            if (model.enableVirtualization) {
                if (model.enableAltRow)
                    proxy.updateAltRow();
                proxy.sendDataRenderingRequest(args);
                if (model.allowTextWrap) {
                    if (proxy._$frozenTableContent.length > 0)
                        proxy._updateRowHeight();
                    proxy._setScrollTop(args.requestType);
                    proxy.updateHeight();
                    if (proxy.getScrollElement().hasClass("e-scroller")) {
                        proxy.getScrollElement().ejScroller("refresh");
                    }
                } else {
                    proxy._setScrollTop();
                    proxy.updateHeight();
                }
            }             
            else {
                if (model.allowPaging) {
                    var arg = {},
                        pagerModel;
                    arg.totalRecordsCount = this.getExpandedRecords(model.updatedRecords).length;
                    proxy.getPager().ejPager("option", arg).ejPager("refreshPager");
                    pagerModel = this.getPager().ejPager("model");
                    proxy._currentPage(pagerModel.currentPage);
                    arg.requestType = "paging";
                    proxy.processBindings(arg);
                }
                //If need refresh chart if record is added after searching or sorting
                if (proxy._isRefreshAddedRecord) {
                    proxy.processBindings();
                    this.renderRecords();
                    proxy._isRefreshAddedRecord = false;
                    return;
                }
                if (model.allowTextWrap && proxy._$frozenTableContent.length > 0) {
                    proxy._updateRowHeight();
                    proxy.getScrollElement().ejScroller("refresh");
                    var movableScrollTop = proxy.getScrollElement().ejScroller("model.scrollTop");
                    proxy._getFrozenScrollElement().scrollTop(movableScrollTop);
                } else {
                    proxy.updateHeight();
                }
                if (model.enableAltRow && model.currentViewData.length > 0)
                    ej.TreeGrid.updateAltRow(proxy, proxy.model.currentViewData[0], 0, 0);
            }
        },
        //expand or collapse all inner level child records on expandAll or collapseAll
        _expandCollapseInnerLevelRecord: function (record, expanded) {
            var proxy = this,
                length = record.childRecords.length,
                tempArgs = {};

            for (var count = 0; count < length; count++) {
               if (record.childRecords[count].hasChildRecords) {
                    tempArgs.data = record.childRecords[count];
                    tempArgs.expanded = expanded;
                    tempArgs.recordIndex = proxy.model.updatedRecords.indexOf(tempArgs.data);
                    tempArgs.requestType = ej.TreeGrid.Actions.ExpandCollapse;
                    if (!proxy._triggerExpandingCollapsingEvent(tempArgs)) {
                        proxy._expandCollapseInnerLevelRecord(record.childRecords[count], expanded);
                        if (record.childRecords[count].expanded != expanded) {
                            if (proxy._isLoadonDemand && !record.childRecords[count].isChildRetrieved) {
                                proxy._isInExpandCollapseAll = true;
                                tempArgs.requestType = ej.TreeGrid.Actions.ExpandCollapse;
                                var isNotExpanded = ej.TreeGrid.expandRowsonDemand(proxy, record.childRecords[count], tempArgs);
                                if (isNotExpanded) {
                                    proxy._allParentItems.splice(proxy._allParentItems.indexOf(record.childRecords[count]), 1);
                                    record.childRecords[count].expanded = false;
                                    continue;
                                }
                                else {
                                    return true;
                                }
                            }
                            else 
                                ej.TreeGrid.sendExpandCollapseRequest(proxy, tempArgs);
                        }
                    }
                }
            }
        },
        _expandParentLevelRecord: function (record, expanded) {
            var proxy = this,               
                tempArgs = {};
            var parentExpandState = proxy.getExpandStatus(record);
            if (!record.expanded || !parentExpandState) {
                tempArgs.data = record;
                tempArgs.expanded = expanded;
                tempArgs.recordIndex = proxy.model.updatedRecords.indexOf(record);
                if (!proxy._triggerExpandingCollapsingEvent(tempArgs))
                ej.TreeGrid.sendExpandCollapseRequest(proxy, tempArgs);
                if (tempArgs.data.parentItem) {
                    proxy._expandParentLevelRecord(tempArgs.data.parentItem, expanded);
                }
            }
        },
        // expand the specified level record
        expandAtLevel: function (index) {
            var proxy = this, model = proxy.model, args = {}, treegridRecord, parentRecords;
            if (proxy._isHierarchyFiltering)
                return
            if (model.allowPaging && model.pageSettings.pageSizeMode == ej.TreeGrid.PageSizeMode.Root && model.enableVirtualization) {                
                proxy._expandCollapseSettings.atLevel = "expandAtLevel";
                proxy._expandCollapseSettings.level = index;
                proxy._expandCollapsePages = [];
                proxy._isInExpandCollapseAll = true;
                proxy._expandPageLevelData();
                args.requestType = ej.TreeGrid.Actions.ExpandCollapse;
                if (model.flatRecords.length > 0)
                    proxy._refreshTreeGridOnExpandCollapseAll(args);
                proxy._isInExpandCollapseAll = false;
                proxy.updateHeight();
            }
            else {
                parentRecords = proxy._getParentRecords(proxy.model.updatedRecords, proxy);
                for (var count = 0; count < parentRecords.length; count++) {
                    treegridRecord = parentRecords[count];
                    if (treegridRecord.level == index) {
                        args.data = treegridRecord;
                        args.expanded = true;
                        args.recordIndex = model.updatedRecords.indexOf(treegridRecord);
                        if (proxy._isLoadonDemand && !treegridRecord.isChildRetrieved) {
                            args.recordLevel = index;
                            args.isExpandingParticularLevelParent = true;
                            args.requestType = ej.TreeGrid.Actions.ExpandCollapse;
                            var isNotExpanded = ej.TreeGrid.expandRowsonDemand(proxy, treegridRecord, args);
                            if (isNotExpanded) {
                                proxy._allParentItems.splice(proxy._allParentItems.indexOf(treegridRecord), 1);
                                treegridRecord.expanded = false;
                                continue;
                            }
                            else {
                                return;
                            }
                        }
                        else {
                            if (!proxy._triggerExpandingCollapsingEvent(args))
                                ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                        }
                        // expand its parent if it is collapsed.
                        if (treegridRecord.parentItem)
                            proxy._expandParentLevelRecord(treegridRecord.parentItem, args.expanded);

                        if (treegridRecord.hasChildRecords)
                            proxy._expandCollapseInnerLevelRecord(treegridRecord, false);
                    }
                }
                if (model.allowPaging && !model.enableVirtualization) {
                    if (!ej.isNullOrUndefined(proxy.getPager())) {
                        proxy.gotoPage();
                    }
                }
            }
        },
        // collapse the specified level record
        collapseAtLevel: function (index) {
            var proxy = this, args = {},
                model = proxy.model,
                treegridRecord,
                parentRecords;
            if (proxy._isHierarchyFiltering)
                return
            if (model.allowPaging && model.pageSettings.pageSizeMode == ej.TreeGrid.PageSizeMode.Root && model.enableVirtualization) {
                proxy._expandCollapseSettings.atLevel = "collapseAtLevel";
                proxy._expandCollapseSettings.level = index;
                proxy._expandCollapsePages = [];
                proxy._isInExpandCollapseAll = true;
                proxy._collapsePageLevelData();
                args.requestType = ej.TreeGrid.Actions.ExpandCollapse;
                if (model.flatRecords.length > 0)
                    proxy._refreshTreeGridOnExpandCollapseAll(args);
                proxy._isInExpandCollapseAll = false;
                proxy.updateHeight();
            }
            else {
                parentRecords = proxy._getParentRecords(model.updatedRecords, proxy);
                for (var count = 0; count < parentRecords.length; count++) {
                    treegridRecord = parentRecords[count];
                    if (treegridRecord.level == index && treegridRecord.expanded) {
                        var parentExpandState = proxy.getExpandStatus(treegridRecord);
                        if (parentExpandState) {
                            args.data = treegridRecord;
                            args.expanded = false;
                            args.recordIndex = model.updatedRecords.indexOf(treegridRecord);
                            if (!proxy._triggerExpandingCollapsingEvent(args))
                                ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                        }
                    }
                }
                if (model.allowPaging && !model.enableVirtualization) {
                    if (!ej.isNullOrUndefined(proxy.getPager())) {
                        proxy.gotoPage();
                    }
                }
            }
        },
        //To collapse current page records alone
        _collapsePageLevelData: function () {
            var proxy = this, args = {},
                model = proxy.model,                
                level = proxy._expandCollapseSettings.level,                
                parentRecords = proxy._getParentRecords(proxy._updatedPageData, proxy),
                countLength = parentRecords.length,
                pageIndex = proxy._currentPage(),
                parentExpandState,
                treegridRecord;                                                    
            $.inArray(pageIndex, proxy._expandCollapsePages) == -1 && proxy._expandCollapsePages.push(pageIndex);
            for (var count = 0; count < countLength; count++) {
                treegridRecord = parentRecords[count];
                parentExpandState = proxy.getExpandStatus(treegridRecord);
                if (treegridRecord && treegridRecord.level == level) {                    
                    args.data = treegridRecord;
                    args.recordIndex = model.updatedRecords.indexOf(treegridRecord),
                    args.expanded = false;
                    if (!proxy._triggerExpandingCollapsingEvent(args)) {
                        ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                        if (!parentExpandState)
                            proxy._expandParentLevelRecord(treegridRecord.parentItem, true);
                    }
                }
            }
        },
        //To expand current page records alone
        _expandPageLevelData: function () {
            var proxy = this, args = {},
                model = proxy.model,                
                level = proxy._expandCollapseSettings.level,                
                parentRecords = proxy._getParentRecords(proxy._updatedPageData, proxy),
                countLength = parentRecords.length,
                pageIndex = proxy._currentPage(),
                treegridRecord;                                                    
            $.inArray(pageIndex, proxy._expandCollapsePages) == -1 && proxy._expandCollapsePages.push(pageIndex);            
            for (var count = 0; count < countLength; count++) {
                treegridRecord = parentRecords[count];
                if (treegridRecord.level == level) {
                    args.data = treegridRecord;
                    args.expanded = true;
                    args.recordIndex = model.updatedRecords.indexOf(treegridRecord);
                    if (!proxy._triggerExpandingCollapsingEvent(args)) {
                        ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                        // expand its parent if it is collapsed.
                        if (treegridRecord.parentItem)
                            proxy._expandParentLevelRecord(treegridRecord.parentItem, args.expanded);
                        if (treegridRecord.hasChildRecords)
                            proxy._expandCollapseInnerLevelRecord(treegridRecord, false);
                    }
                }
            }
        },
        // expand/collapse the specified record using its index
        expandCollapseRow: function (index) {
            var proxy = this, args = {}, treegridRecord, records;
            index = parseInt(index);
            records = proxy.model.allowPaging ? proxy.getUpdatedRecords() : proxy.model.updatedRecords;
            if (records.length > index && index >= 0) {
                treegridRecord = records[index];
                if (treegridRecord.hasChildRecords) {
                    args.data = treegridRecord;
                    if (treegridRecord.expanded)
                        args.expanded = false;
                    else
                        args.expanded = true;
                    ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                }
            }
        },

        //Expand the child records from parent.
        expandAll: function () {

            var proxy = this,
                model = proxy.model,
                count = 0,
                treegridRecord,
                args = {};
            if (!proxy.editFormValidate()) return true;
            proxy._expandCollapseSettings.state = "expandAll";
            proxy._expandCollapseSettings.atLevel = "";
            proxy._expandCollapseSettings.level = 0;
            proxy._expandCollapsePages = [];
            if (proxy._isRowEdit)
                proxy.cancelRowEditCell();
            else if(proxy.model.isEdit)
                proxy.cancelEditCell();

            args.requestType = ej.TreeGrid.Actions.ExpandCollapse;            
            proxy._isInExpandCollapseAll = true;
            //loop excecute for iterate the GanttRecords preseent in the Gantt Control
            proxy._expandAllData();                        
            if (model.flatRecords.length > 0)
                proxy._refreshTreeGridOnExpandCollapseAll(args);            
            proxy._isInExpandCollapseAll = false;
            proxy.updateHeight();
        },

        _expandAllData: function () {
            var proxy = this, model = proxy.model,
                count = 0, treegridRecord, args = {};
            args.requestType = ej.TreeGrid.Actions.ExpandCollapse;
            if (model.allowPaging && model.pageSettings.pageSizeMode == ej.TreeGrid.PageSizeMode.Root && model.enableVirtualization) {
                var pageSize = model.pageSettings.pageSize,
                    pageIndex = proxy._currentPage(),
                    countLength = pageSize * pageIndex,
                    initCount = pageSize * (pageIndex - 1);
                proxy._expandCollapsePages.push(pageIndex);
                for (count = initCount; count < countLength; count++) {
                    treegridRecord =proxy._isHierarchyFiltering ? proxy._filterParentRecords[count] : proxy.model.parentRecords[count];
                    if (treegridRecord) {
                        args.data = treegridRecord;
                        args.recordIndex = model.updatedRecords.indexOf(treegridRecord);
                        args.expanded = true;
                        if (treegridRecord.hasChildRecords) {
                            if (!proxy._triggerExpandingCollapsingEvent(args)) {
                                var isServerCalled = proxy._expandCollapseInnerLevelRecord(treegridRecord, args.expanded);
                                if (isServerCalled)
                                    return;
                                if (treegridRecord.expanded != args.expanded)
                                    ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                            }
                        }
                    }
                }
            }
            else {
                var parentRecord = proxy._isHierarchyFiltering ? proxy._filterParentRecords : proxy.model.parentRecords;
                for (count = 0; count < parentRecord.length; count++) {
                    treegridRecord = parentRecord[count];
                    args.data = treegridRecord;
                    args.recordIndex = model.updatedRecords.indexOf(treegridRecord);
                    args.expanded = true;
                    if (treegridRecord.hasChildRecords) {
                        if (!proxy._triggerExpandingCollapsingEvent(args)) {
                            if (proxy._isLoadonDemand && !treegridRecord.isChildRetrieved) {
                                proxy._isInExpandCollapseAll = true;
                                var isNotExpanded = ej.TreeGrid.expandRowsonDemand(proxy, treegridRecord, args);
                                if (isNotExpanded) {
                                    proxy._allParentItems.splice(proxy._allParentItems.indexOf(treegridRecord), 1);
                                    treegridRecord.expanded = false;
                                    continue;
                                }
                                else {
                                    return;
                                }
                            }
                            else {
                                var isServerCalled = proxy._expandCollapseInnerLevelRecord(treegridRecord, args.expanded);
                                if (isServerCalled)
                                    return;
                                if (treegridRecord.expanded != args.expanded)
                                    ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                            }
                        }
                    }
                }
            }
        },
           

        _refreshToolBar: function () {
            var $toolbar = $("#" + this._id + "_toolbarItems");
            $toolbar.find("li").removeClass("e-hover");
        },

        //RENDER TOOL BAR
        _renderToolbar: function () {
            var proxy = this,
                model = proxy.model,
                element = proxy.element;
            if (!model.isFromGantt) {
                if (proxy.model.toolbarSettings.showToolbar) {
                    element.append(proxy._renderToolbarTemplate());
                }
                if (proxy.model.isResponsive) {
                    $("#" + proxy._id + "_toolbarItems").addClass("e-treegridadaptivetoolbar");
                }
            }
        },

        //RENDER TOOLBAR TEMPLATE
        _renderToolbarTemplate: function () {
            var proxy = this,
                model = proxy.model,
                $div = ej.buildTag("div.e-treegridtoolbar#" + proxy._id + "_toolbarItems", "", { 'height': '36px', 'border': '1px solid' }, { "data-unselectable": "on" });
            if(!ej.isNullOrUndefined(model.toolbarSettings.toolbarItems) && model.toolbarSettings.toolbarItems.length){
                var $ul = ej.buildTag("ul", "", {},{});
                proxy._renderLi($ul);
                $div.append($ul);
            }
            if (!ej.isNullOrUndefined(model.toolbarSettings.customToolbarItems) && model.toolbarSettings.customToolbarItems.length) {
                var $customUl = ej.buildTag("ul", "", {}, {});
                proxy._renderCustomLi($customUl);
                $div.append($customUl);
            }
            var helper = {};
            helper.click = proxy._toolBarClick;
            helper.cssClass = proxy.model.cssClass;
            helper.rtl = false;
            helper.itemSeparator = false;
            helper.itemLeave = proxy._toolbarItemLeave;
            helper.width = proxy._gridWidth;
            helper.fields = {
                id: "",
                tooltipText: "",
                imageUrl: "",
                text: "",
                imageAttributes: "",
                spriteCSS: "",
                htmlAttributes: "",
            };
            $div.ejToolbar(helper);
            $div.ejToolbar("disableItem", proxy._disabledToolItems);
            proxy._disabledToolItems = $();
            return $div;
        },        
        //to renderCustom Li
        _renderCustomLi: function ($ul) {
            var proxy = this,
            model = proxy.model,
            $li,$item,
            customToolbarItems = model.toolbarSettings.customToolbarItems;
            for (var i = 0; i < customToolbarItems.length; i++) {
                if (customToolbarItems[i]["text"] || customToolbarItems[i]["templateID"]) {                   
                        if (customToolbarItems[i]["text"]) {
                            var customToolbar = customToolbarItems[i]["tooltipText"] ? customToolbarItems[i]["tooltipText"] : customToolbarItems[i]["text"];
                            $li = ej.buildTag("li", "", {}, { id: proxy._id + "_" + customToolbarItems[i]["text"], title: customToolbar });
                            $item = ej.buildTag("a.e-toolbaricons e-icon e-treegridcustomtoolbaritem", "", {}).addClass(customToolbarItems[i]["text"]);
                            $li.addClass("e-treegridtoolbaritem");
                        }
                        else {                          
                            var customToolbar = customToolbarItems[i]["tooltipText"] ? customToolbarItems[i]["tooltipText"] : customToolbarItems[i]["templateID"].replace("#", "");
                            $li = ej.buildTag("li", "", {}, { id: proxy._id + "_" + customToolbarItems[i]["templateID"].replace("#", ""), title: customToolbar });
                            $item = $(customToolbarItems[i]["templateID"]).hide().html();
                }                
                $li.html($item);              
                $ul.append($li);
                }
            }
        },
        //Render list to display the tools in toolbar.
        _renderLi: function ($ul) {
            var proxy = this,
                toolBarItems = proxy.model.toolbarSettings.toolbarItems,
                length = toolBarItems.length,
                i = 0,
                $li;
            for (i; i < length; i++) {

                $li = ej.buildTag("li.e-treegridtoolbaritem", "", {}, {
                    id: proxy._id + "_" + toolBarItems[i]
                });             
                proxy._renderLiContent($li, toolBarItems[i]);
                $ul.append($li);
            }
        },

        //RENDER TOOLBAR ICONS
        _renderLiContent: function ($li, item) {
            var $a, $input, selectionMode = this.model.selectionSettings.selectionMode;
            var selectedRowIndex = this.selectedRowIndex();
            var editSetting = this.model.editSettings;
            switch (item) {

                case "add":
                    $a = ej.buildTag("a.e-addnew e-toolbaricons e-icon e-treegrid-add", "", {});
                    var addTitle = this._toolboxTooltipTexts["addTool"];
                    $li.attr("title", addTitle);
                    if (!this.model.editSettings.allowAdding)
                        this._disabledToolItems.push($li.get(0));
                    break;

                case "edit":
                    $a = ej.buildTag("a.e-edit e-toolbaricons e-icon e-treegrid-edit", "", {});
                    var editTitle = this._toolboxTooltipTexts["editTool"];
                    $li.attr("title", editTitle);
                    if (!this.model.editSettings.allowEditing || (selectedRowIndex == -1 || (selectedRowIndex != -1 && selectionMode == "cell")) || !this.model.allowSelection || this.model.editSettings.beginEditAction == "click") {
                        this._disabledToolItems.push($li.get(0));
                    }

                    break;

                case "delete":
                    var deleteTitle = this._toolboxTooltipTexts["deleteTool"];
                    $li.attr("title", deleteTitle);
                    $a = ej.buildTag("a.e-delete e-toolbaricons e-icon e-treegrid-delete", "", {});

                    if (!this.model.editSettings.allowDeleting || (selectedRowIndex == -1 || (selectedRowIndex != -1 && selectionMode == "cell")) || !this.model.allowSelection) {
                        this._disabledToolItems.push($li.get(0));
                    }

                    break;

                case "update":
                    var updateTitle = this._toolboxTooltipTexts["updateTool"];
                    $li.attr("title", updateTitle);
                    $a = ej.buildTag("a.e-save e-toolbaricons e-icon e-treegrid-save e-disabletool", "", {});
                    this._disabledToolItems.push($li.get(0));
                    break;

                case "cancel":
                    var cancelTitle = this._toolboxTooltipTexts["cancelTool"];
                    $li.attr("title", cancelTitle);
                    $a = ej.buildTag("a.e-cancel e-toolbaricons e-icon e-treegrid-cancel e-disabletool", "", {});
                    this._disabledToolItems.push($li.get(0));
                    break;

                case "expandAll":
                    var expandAllTitle = this._toolboxTooltipTexts["expandAllTool"];
                    $li.attr("title", expandAllTitle);
                    $input = ej.buildTag("a.e-expandall e-toolbaricons e-icon e-treegrid-expandall", "", {}, {});
                    $li.append($input);
                    break;

                case "collapseAll":
                    var collapseAllTitle = this._toolboxTooltipTexts["collapseAllTool"];
                    $li.attr("title", collapseAllTitle);
                    $input = ej.buildTag("a.e-collapseall e-toolbaricons e-icon e-treegrid-collapseall", "", {}, {});
                    $li.append($input);
                    break;

                case "pdfExport":
                    var pdfExportTitle = this._toolboxTooltipTexts["pdfExportTool"];
                    $li.attr("title", pdfExportTitle);
                    $input = ej.buildTag("a.e-pdfIcon e-toolbaricons e-icon", "", {}, {});
                    $li.append($input);
                    break;
                case "excelExport":
                    var excelExportTitle = this._toolboxTooltipTexts["excelExportTool"];
                    $li.attr("title", excelExportTitle);
                    $input = ej.buildTag("a.e-excelIcon e-toolbaricons e-icon", "", {}, {});
                    $li.append($input);
                    break;
                case "print":
                    var printTitle = this._toolboxTooltipTexts["printTool"];
                    $li.attr("title", printTitle);
                    $input = ej.buildTag("a.e-printIcon e-toolbaricons e-icon", "", {}, {});
                    $li.append($input);
                    break;
                case "search":
                    var searchTitle = this._toolboxTooltipTexts["searchTool"], proxy = this, value = proxy.model.searchSettings.key;
                    $a = ej.buildTag("a.e-searchitem e-toolbaricons e-disabletool e-icon e-searchfind", "", { 'position': 'absolute', 'padding': '4px', 'padding-left': '7px' });
                    var $div = ej.buildTag('div.e-filterdiv e-searchinputdiv', "", { 'display': 'inline-table', 'width': '83%' });
                    $input = ej.buildTag("input.e-ejinputtext e-searchinput", "", { 'width': '100%' }, { type: "text", placeholder: searchTitle, value:value });
                    var $span = ej.buildTag('span.e-searchcancel e-cancel e-icon e-hide e-spanstyle', "", { 'right': '1%', 'padding-top': '0px', 'top': '0px' });
                    $li.attr("title", searchTitle);
                    $li.addClass('e-search');
                    $div.append($input).append($span);
                    $li.append($div);
                    $li.css({ 'width': '172px' });
                    this.model.allowSearching = true;
                    $input.keydown($.proxy(this._keyDown, this)).focus(function () { proxy.element.find("span.e-searchcancel").removeClass("e-hide"); });
                    $a.click($.proxy(this._keyDown, this));                    
                    $div.focusout(function () {
                        if (proxy.element.find("input.e-searchinput").val() == "")
                            $("span.e-searchcancel").addClass("e-hide");
                    });                    
                    $span.click(function () {
                        proxy.element.find("input.e-searchinput").val("");
                        $(this).addClass("e-hide");
                        proxy.search("");
                    }).mouseover(function () { this.style.cursor = 'pointer'; });
                    break;
            }

            $li.append($a);
        },

        //update the toolbar items when dynamically update the editSettings property
        _updateToolbarItems: function () {
            var proxy = this,
                model = proxy.model,
                toolbarItems = model.toolbarSettings.toolbarItems,
                editSettings = model.editSettings,
                toolbar = $("#" + proxy._id + "_toolbarItems"),
                selectedRowIndex = proxy.selectedRowIndex(),
                editMode = editSettings.editMode,
                disableToolItems = [],
                enableToolItems = [];
                if (editMode.toLowerCase() == "cellediting" || editMode.toLowerCase() == "dialogediting") {
                    /* We can able perform rowEditing using toolbar, whether the editMode also in cellEditing.
                       So cancel the editing based on edit type.*/
                    if (proxy._isRowEdit)
                        proxy.cancelRowEditCell();
                    else if (model.isEdit)
                        proxy.cancelEditCell();
                }
                else if (editMode.toLowerCase() == "rowediting")
                    proxy.cancelRowEditCell();
                proxy._cancelSaveTools();
        },


        //#region TREEGRIDHEADER RENDERIGN

        //TREEGRID HEADER RENDER INITIALIZATION
        _renderAfterColumnInitialize:function(){
            var proxy = this;
            proxy.element.append(proxy._renderGridHeader());
        },

        //TO CHECK FILTER FORM ELEMENTS EDIT TYPE
        filterEditType: function (column, element, filterValue) {

            var proxy = this,
                model = proxy.model,
                columnField = column.field.split('.').join("");
               
            if (ej.isNullOrUndefined(column["filterEditType"]))
                column["filterEditType"] = column["editType"];

            switch (column["filterEditType"]) {
                case "stringedit":
                    element.html(ej.buildTag('input.e-ejinputtext e-filtertext e-field e-filterwidth', "", {}, { id: proxy._id + "_" + columnField + "_filterbarcell", name: column.field, value: filterValue }));
                    break;
                case "numericedit":
                    var $numericText = ej.buildTag('input.e-numerictextbox e-field', "", { "width": column.width - 15 }, { type: "text", id: proxy._id + "_" + columnField + "_filterbarcell", name: column.field, value: filterValue });
                    element.append($numericText);
                    break;
                case "datepicker":
                case "datetimepicker":
                    var $datePicker = ej.buildTag('input.e-' + column["filterEditType"] + ' e-field', "", {}, { type: "text", id: proxy._id + "_" + columnField + "_filterbarcell", name: column.field, value: filterValue });
                    element.append($datePicker);
                    break;
                case "booleanedit":
                case "dropdownedit":
                    var $dropDownList = ej.buildTag('input.e-field e-dropdownlist e-field', "", {}, { type: "text", id: proxy._id + "_" + columnField + "_filterbarcell", name: column.field, value: filterValue });
                    element.append($dropDownList);
                    break;
            }
        },


        //RENDER FILTER BAR ELEMENTS ACCORDING TO ITS TYPE
        _filteringElements: function (args) {
            var proxy = this,
                model=proxy.model,
                elementFocused = false,
                $formElement,
                form, length,
                $element,
                width,
                params = {},
                value,
                column,
                customParams,
                toformat,
                formatVal,
            selectedItem = model.selectedItem;

            if (args.requestType == "filtering") {
                form = document.getElementById(proxy._id + "_filterBar" + args.fieldname.split('.').join(""));
            }
            
            column = customParams = ej.TreeGrid.getColumnByField(model.columns, args.fieldname);
            $formElement = $(form).find("input,select");
            length = $formElement.length;
            for (var i=0; i < length; i++) {
                $element = $formElement.eq(i);
                params = {};
                //inputWidth = column.width ? column.width - 2 : proxy.model.commonWidth - 2;
                var inputWidth = $element.closest("div").width()-2;
                if ($element.hasClass("e-numerictextbox")) {
                    width = inputWidth;
                    value = $element.val();
                    params.width = width;                    
                    params.showSpinButton = true;
                    params.cssClass = model.cssClass;
                    params.locale = model.locale;
                    params.height = 28;
                    params.focusIn = $.proxy(proxy._cancelEditState, proxy, $element);
                    //for parent editing 
                    var tempId = $element[0].id;
                    tempId=tempId.replace(proxy._id, '');
                    if (model.filterSettings.filterBarMode == "immediate")
                        params.change = $.proxy(proxy._filterBarHandler, proxy, $element);
                    else
                        params.change = null;
                    var numericObject = $element.data("ejNumericTextbox");
                    if (ej.isNullOrUndefined(numericObject)) {
                        if (value.length)
                            params.value = parseFloat(value);
                        else
                            params.value = null;
                    }
                    customParams = ej.TreeGrid.getColumnByField(proxy.model.columns, $element.prop("name"));
                    if (!ej.isNullOrUndefined(customParams) && !ej.isNullOrUndefined(customParams["editParams"]))
                        $.extend(params, customParams["editParams"]);
                    $element.ejNumericTextbox(params);
                    $element.prop("name", $element.prop("name").replace(proxy._id, ""));
                }
                else if ($element.hasClass("e-datepicker")) {
                    width = inputWidth;
                    params.width = width;                    
                    params.cssClass = model.cssClass;
                    params.dateFormat = model.dateFormat;
                    params.locale = model.locale;
                    params.height = 28;
                    params.focusIn = $.proxy(proxy._cancelEditState, proxy, $element);
                    var tempId = $element[0].id;
                    tempId = tempId.replace(proxy._id, '');
                    //To filter the records once the date seleted.
                    if (model.filterSettings.filterBarMode == "immediate")
                        params.select = $.proxy(proxy._filterBarHandler, proxy, $element);
                    else
                        params.select = null;
                    column = ej.TreeGrid.getColumnByField(proxy.model.columns, $element.prop("name"));
                    if (column["format"] !== undefined && column.format.length > 0) {
                        toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                        formatVal = toformat.exec(column.format);
                        params.dateFormat = formatVal[2];
                    }
                    if (!ej.isNullOrUndefined(column["editParams"]))
                        $.extend(params, column["editParams"]);

                    if (model.dateFormat.toLowerCase().indexOf("hh") != -1)
                        $element.ejDateTimePicker(params);
                    else
                        $element.ejDatePicker(params);
                    proxy._preventDoubleClick(column); //To prevent double click event
                }
                else if ($element.hasClass("e-datetimepicker")) {
                    width = inputWidth;
                    params = {
                        width: width,
                        rtl: model.rtl,
                        locale: model.locale,
                        cssClass: model.cssClass,
                        showButton: false,
                        focusIn : $.proxy(proxy._cancelEditState, proxy, $element),
                    };
                    params.height = 28;
                    if (model.filterSettings.filterBarMode == "immediate")
                        params.close = $.proxy(proxy._filterBarHandler, proxy, $element);
                    else
                        params.close = null;
                    column = ej.TreeGrid.getColumnByField(proxy.model.columns, $element.prop("name"));
                    if (column["format"] !== undefined && column.format.length > 0) {
                        toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                        formatVal = toformat.exec(column.format);
                        params.dateTimeFormat = formatVal[2];
                    }
                    if (!ej.isNullOrUndefined(column["editParams"]))
                        $.extend(params, column["editParams"]);

                    $element.ejDateTimePicker(params);
                    proxy._preventDoubleClick(column); //To prevent double click event

                }
                else if ($element.hasClass("e-dropdownlist")) {
                    column = ej.TreeGrid.getColumnByField(model.columns, args.fieldname);
                    var text = (column.editParams && column.editParams.fields && column.editParams.fields.text) ? column.editParams.fields.text : "text";
                    var value = (column.editParams && column.editParams.fields && column.editParams.fields.value) ? column.editParams.fields.value : "value";
                    var clear, emptyString, dropData = [], blank, selectAll, dropDatatrue, dropDatafalse;
                    //Collecting the drop down data for drop down filter bar
                    if (column.dropdownData && column.dropdownData.length > 0)
                        dropData = $.extend(true, [], column.dropdownData);
                    else {
                        //Default drop down data for boolean editType columns
                        if (column.editType == "booleanedit") {
                            dropData = [];
                            dropDatatrue = {};
                            dropDatatrue[text] = proxy._trueText;
                            dropDatatrue[value] = "true";
                            dropData.push(dropDatatrue);
                            dropDatafalse = {};
                            dropDatafalse[text] = proxy._falseText;
                            dropDatafalse[value] = "false";
                            dropData.push(dropDatafalse);
                        }
                        else
                            dropData = proxy._dropDownArrayCollection(column, args.fieldname);  //Gathering dropdown data from datasource                       
                    }
                    //To append selectAll(clear) label in the drop down list                   
                    //clear = { text: proxy._dropDownListClearText, value: "" };
                    clear = {};
                    clear[text] = proxy._dropDownListClearText;
                    clear[value] = proxy._dropDownListClearText;
                    dropData.splice(0, 0, clear);
                    //To append (Blanks) label in the drop down list
                        blank = column.allowFilteringBlankContent == undefined ? true : column.allowFilteringBlankContent;
                    if (blank) {
                        //emptyString = { text: proxy._dropDownListBlanksText, value: proxy._dropDownListBlanksText };
                        emptyString = {};
                        emptyString[text] = proxy._dropDownListBlanksText;
                        emptyString[value] = proxy._dropDownListBlanksText;
                        dropData.push(emptyString);
                    }
                    var param = {}, inputValue = $element.val(), $dropDownObj, dropObject = $("#" + $element[0].id).data("ejDropDownList");
                    if (dropObject) {
                        $dropDownObj = $(dropObject.popupList);
                    }
                    
                    param.width = inputWidth;
                    param.showCheckbox = false;
                    param.dataSource = dropData;
                    param.height = 28;
                    param.popupShown = $.proxy(proxy._cancelEditState, proxy, $element);
                    param.fields = { text: text, value: value };
                    //To filter the records once the item has been selected.
                    if (model.filterSettings.filterBarMode == "immediate")
                        param.popupHide = $.proxy(proxy._filterBarHandler, proxy, $element);
                    else
                        param.popupHide = null;
                    $element.ejDropDownList(param);
                    //Apply italic font style for "(Clear Filter)" and "(Blanks)" label
                    if ($dropDownObj) {
                        $dropDownObj.find(".e-ul :first-child").find(".e-ddltxt").css("font-style", "italic");
                        if(blank)
                            $dropDownObj.find(".e-ul :last-child").find(".e-ddltxt").css("font-style", "italic");
                    }
                    if (inputValue == proxy._dropDownListClearText)
                        inputValue = "";
                    $element.ejDropDownList("selectItemByValue", inputValue);//To retain the selected value in dropdown    
                    proxy._preventDoubleClick(column); //To prevent double click event                 
                } else {
                    switch ($element.prop('tagName')) {
                        case "INPUT":
                            $element.width(inputWidth - 4);
                            if (column.filterEditType == "stringedit")
                                proxy._on($("#" + proxy._id + "_" + column.field.split('.').join("") + "_filterbarcell"), "focus", proxy._cancelEditState);
                            break;

                        case "SELECT":
                            $element.width(inputWidth).height(15);
                            break;
                    }
                }
                if (!$element.is(":disabled") && !elementFocused && (!$element.is(":hidden") || typeof $element.data("ejDropDownList") == "object")) {
                    if (!proxy._isEnterKeyPressed) {
                        elementFocused = true;
                    }
                }
            }
        },

        // Method for retriving drop down data to filterbar from data source
        _dropDownArrayCollection: function (column, fieldItems) {
            var proxy = this,
                model = proxy.model,
                fieldName = fieldItems,
                dropDownRecords = [],
                uniqueDropDownRecords = [],
                dropdownData = [],
                columnEditType = column.editType;

            dropDownRecords = $.map(model.flatRecords, function (record) {
                if (!ej.isNullOrUndefined(record.item[fieldName]))
                    return record.item[fieldName];
            });
            $.each(dropDownRecords, function (i, el) {
                el=$.trim(el); 
                if ($.inArray(el, uniqueDropDownRecords) === -1) uniqueDropDownRecords.push(el);
            });
            if (columnEditType != "numericedit")
                uniqueDropDownRecords.sort(proxy.stringCompare);
            else {
                uniqueDropDownRecords = uniqueDropDownRecords.sort(function (a, b) {
                    return a - b;
                });
            }
            $.each(uniqueDropDownRecords, function (i, val) {
                dropdownData.push({ text: val, value: val });
            });
            return dropdownData;
        },

        stringCompare: function (s1, s2) {
            var str1 = [], str2 = [];

            s1.replace(/(\d+)|(\D+)/g, function (_, $1, $2) { str1.push([$1 || Infinity, $2 || ""]) });
            s2.replace(/(\d+)|(\D+)/g, function (_, $1, $2) { str2.push([$1 || Infinity, $2 || ""]) });
    
            while (str1.length && str2.length) {
                var st1 = str1.shift();
                var st2 = str2.shift();
                var val = (st1[0] - st2[0]) || st1[1].localeCompare(st2[1]);
                if(val) return val;
            }

            return str1.length - str2.length;
        },
        // Method to prevent double click event during dropDown list and date picker filtering
        _preventDoubleClick: function (col) {
            var proxy = this,
                filterBoxTool = $("#" + proxy._id + "_" + col.field.split('.').join("") + "_filterbarcell_popup");
            if (filterBoxTool.length != 0) {
                $(filterBoxTool).on('click', function (e) {
                    if (ej.isTouchDevice())
                        proxy._off(proxy.element, "doubletap ", ".e-gridcontent", proxy._editdblClickHandler);
                    else
                        proxy._off(proxy.element, "dblclick ", ".e-gridcontent", proxy._editdblClickHandler);
                    setTimeout(function () {
                        if (ej.isTouchDevice())
                            proxy._on(proxy.element, "doubletap ", ".e-gridcontent", proxy._editdblClickHandler);
                        else
                            proxy._on(proxy.element, "dblclick ", ".e-gridcontent", proxy._editdblClickHandler);
                    }, 300);
                });
            }
        },
        // METHOD TO RENDER FILDERING ELEMENTS
        _renderFiltering: function (columns, showDetailColumn) {
            var proxy = this, model = this.model,
            totColumns = model.columns,
            filteredColumns = model.filterSettings.filteredColumns;
            var $tr = ej.buildTag('tr.e-filterbar', "", {}, {});
            if (proxy.model.allowFiltering) {
                $.each(totColumns, function (i, column) {
                    if (ej.isNullOrUndefined(column["allowFiltering"]))
                        column["allowFiltering"] = true;
                });
                var filterEnabled = false;
                //To check whether atleast any one of the column's allowFiltering has been enabled
                $.each(totColumns, function (i, column) {
                    if (column.allowFiltering == true) {
                        filterEnabled = true;
                        return false;
                    }
                });
                if (filterEnabled) {
                    for (var column = 0; column < columns.length; column++) {

                    var $th = ej.buildTag('th.e-filterbarcell .e-editValue', "", {}, {});
                    columns[column]["visible"] === false && $th.addClass("e-hide");
                    var $div = ej.buildTag('div.e-filterdiv', "", {}, { id: proxy._id + "_filterBar" + columns[column].field.split('.').join("") });
                        $tr.append($th.append($div));
                        //Condition to check whether allow filtering enabled for the individual column before rendering filtering elements
                        if (columns[column].allowFiltering == false)
                            continue;
                        else {
                            var filterValue = "";
                            if (filteredColumns.length > 0) {
                                for (var fcolumn = 0; fcolumn < filteredColumns.length; fcolumn++) {
                                    if (columns[column].field == filteredColumns[fcolumn].field) {
                                        filterValue = filteredColumns[fcolumn].value;
                                    }
                                }
                            }
                       
                            this.filterEditType(columns[column], $div, filterValue);
                        var $span = ej.buildTag('span.e-cancel e-icon e-hide e-spanstyle');
                        $div.append($span);
                    }                   
                }          
                }
            }
            /* add details column to last in column header */
            if (model.showDetailsRow && model.detailsTemplate && model.showDetailsRowInfoColumn && showDetailColumn) {
                $tr.append(ej.buildTag('th.e-filterbarcell e-detailheadercell', '<div style="width:' + proxy._detailsColumnWidth + 'px;"></div>'));
            }
            return $tr;
        },


        _getIndentCol: function () {
            return ej.buildTag("col", "", { width: this._detailsColumnWidth + "px" });
        },

        //METHOD FOR RENDERING TREEGRID HEADER
        _renderGridHeader: function () {

            var proxy = this,
                model = proxy.model,
                doc = document, temp, $frozenDiv, $movableDiv,
                $innerDiv = ej.buildTag('div.e-gridheadercontainer', "", { "overflow": "hidden" }, { "data-unselectable": "on" }),
                $div = model.isFromGantt ? ej.buildTag('div.e-gridheader#' + proxy._id + "e-gridheader", "", {
                    "border-left-style": "solid",
                    "border-left-width": "1px"
                }, "") :
                    ej.buildTag('div.e-gridheader#' + proxy._id + "e-gridheader", "",
                {
                    "border-top-style": "solid",
                    "border-left-style": "solid",
                    "border-right-style": "solid",
                    "border-top-width": "1px",
                    "border-left-width": "1px",
                    "border-right-width": "1px",
                    "width": proxy._gridWidth,
                }, "");
            if (model.allowFiltering == true && model.filterSettings.filterType == ej.TreeGrid.FilterType.FilterBar)
                $innerDiv.addClass("e-headercontent-material-filterbar");
            $innerDiv.addClass("e-headercontent");
            proxy.setGridHeaderContent($div);
            proxy._$gridHeaderContainer = $innerDiv;
            proxy._hiddenColumns = [];
            proxy._visibleColumns = [];
            proxy.columnsWidthCollection = [];
            proxy._removePrevHeaderTemplates();
            if (this._frozenColumnsLength > 0) {
                $innerDiv.addClass("e-frozen-header-container");
                $frozenDiv = ej.buildTag("div.e-frozenheaderdiv#e-frozenheaderdiv" + proxy._id, this._renderGridHeaderInternalDesign(model.columns.slice(0, this._frozenColumnsLength), false, true));
                if (model.allowFiltering == true && model.filterSettings.filterType == ej.TreeGrid.FilterType.FilterBar)
                    $frozenDiv.addClass("e-filterbar-header-material");
                if (model.showStackedHeader && model.stackedHeaderRows.length>0)
                    $frozenDiv.addClass("e-stacked-header-material");
                $movableDiv = ej.buildTag("div.e-movableheader#e-movableheader" + proxy._id, ej.buildTag("div.e-movableheaderdiv#e-movableheaderdiv" + proxy._id, this._renderGridHeaderInternalDesign(this.model.columns.slice(this._frozenColumnsLength), true)));
                $innerDiv.append($frozenDiv).append($movableDiv);
            } else {
                $innerDiv.append(this._renderGridHeaderInternalDesign(this.model.columns, true));
                $innerDiv.removeClass("e-frozen-header-container");
            }
            $div.html($innerDiv);
            this.setGridHeaderTable(this.getHeaderContent().find(".e-table"));
            return $div;
        },
        _removePrevHeaderTemplates: function () {
            $("[id^='" + this._id + "'][type='text/x-treegridheadertemplate']").remove();
            this.headerAngularTemplate && (this.headerAngularTemplate= null);
        },
        getPager: function () {
            return this._gridPager;
        },

        setTreeGridPager: function (value) {
            this._gridPager = value;
        },

        _renderGridPager: function () {
            var proxy = this,
                $div = $(document.createElement('div')),
                pagerModel = {}, pageSettings = proxy.model.pageSettings;
            $div.attr({ "id": this._id + "Pager" });
            pageSettings.change = $.proxy(proxy._pagerClickHandler, proxy);
            if (ej.isNullOrUndefined(pageSettings.totalRecordsCount))
                pageSettings.totalRecordsCount = proxy._isLoadonDemand ? proxy._pageRecordCountOnDemand : pageSettings.totalRecordsCount;
            $.extend(pagerModel, pageSettings);
            pagerModel.locale = proxy.model.locale;
            delete pagerModel.template;
            if (proxy._currentPage() < 0)
                proxy._currentPage(1);
            pagerModel.currentPage = this._prevPageNo = proxy._currentPage();
            pagerModel.masterObject = proxy;
            pagerModel.cssClass = proxy.model.cssClass;
            proxy.setTreeGridPager($div);
            $div.ejPager(pagerModel);
            $div.ejPager("refreshPager");
            pagerModel = $div.ejPager("model");
            pageSettings.totalPages = pagerModel.totalPages;
            if (proxy._currentPage() !== pagerModel.currentPage)
                proxy._currentPage(pagerModel.currentPage);
            //Create custom Paging Template
            if (!ej.isNullOrUndefined(pageSettings.template) && pageSettings.template.length > 0) {
                $div.children().remove();                
                var $customDiv = ej.buildTag('div.e-pagercontainer'),
                $template = this._createTemplateElement(pageSettings, true);
                $customDiv.append($template.innerHTML);
                $div.append($customDiv);
            }
            return $div;
        },
		// Tempalte to render header checkbox selection
        _addHeaderCheckboxTemplate: function () {
            var model = this.model, template,
                flatRecordsCount = model.flatRecords.length,
                selectedItemsCount = model.selectedItems.length;

            if (flatRecordsCount > 0 && flatRecordsCount == selectedItemsCount) {
                template = '<div><span class="e-chkbox-wrap e-widget" style="margin-left:5px;padding-right:10px;color:#c8c8c8;">' +
                        '<div class="e-chkbox-small"><span class="e-chk-act">' +
                        '<span class="e-checkbox e-checkmark e-chk-image e-icon e-headerCheckbox"' +
                'id =' + this._id + '_headerCheckbox></span></span></div></span></div>';
            }
            else if (flatRecordsCount > selectedItemsCount && selectedItemsCount > 0) {
                template = '<div><span class="e-chkbox-wrap e-widget" style="margin-left:5px;padding-right:10px;color:#c8c8c8;">' +
                        '<div class="e-chkbox-small"><span class="e-chk-indeter">' +
                        '<span class="e-checkbox e-stop e-chk-image e-icon e-headerCheckbox"' +
                'id =' + this._id + '_headerCheckbox></span></span></div></span></div>';
            }
            else {
                template = '<div><span class="e-chkbox-wrap e-widget" style="margin-left:5px;padding-right:10px;color:#c8c8c8;">' +
                        '<div class="e-chkbox-small"><span class="e-chk-inact">' +
                        '<span class="e-checkbox e-chk-image e-icon e-headerCheckbox"' +
                'id =' + this._id + '_headerCheckbox></span></span></div></span></div>';
            }
            return template;
        },
        _createStackedRow: function (stackedHeaderRow, frozenHeader) {
            var $tr = ej.buildTag('tr.e-columnheader e-stackedHeaderRow'),
                sHeader = [], sCss = [], tAl = [], tp = [], proxy = this,
                model = proxy.model, columnLength = model.columns.length,
                column, sColumn = stackedHeaderRow.stackedHeaderColumns, _column, className,
                colsPanList = [], frzCol = model.scrollSettings.frozenColumns, spanC, colSpan, j,
                frozenColspanList = [], forzenColumn = 0, index = 0, frzHideCol = 0, c, $th, $div;
            for (var c = 0; c < columnLength; c++) {
                column = model.columns[c];
                if (column.visible != false || (column == model.columns[model.treeColumnIndex] && column.visible == false)) {
                    var headerText = '', cssClass = '', txtAlign = '', ttp = "";
                    for (var col = 0; col < sColumn.length; col++) {
                        _column = Array.isArray(sColumn[col].column) ? sColumn[col].column : $.map(sColumn[col].column.split(","), $.trim);
                        className = "e-row" + $.inArray(stackedHeaderRow, model.stackedHeaderRows) + "-column" + col;
                        if ($.inArray(column.field, _column) != -1) {
                            headerText = sColumn[col].headerText;
                            cssClass = sColumn[col]["cssClass"];
                            txtAlign = sColumn[col].textAlign;
                            ttp = sColumn[col]["tooltip"] ? " e-stackedtooltip " + className : '';
                        }
                    }
                    sHeader.push(headerText);
                    sCss.push(cssClass);
                    tAl.push(txtAlign);
                    tp.push(ttp);
                }
            }
            for (var i = 0; i < sHeader.length; i++) {
                colSpan = 1;
                for (j = i + 1; j < sHeader.length; j++) {
                    if (sHeader[i] == sHeader[j]) {
                        colSpan++;
                    }
                    else
                        break;
                }
                colsPanList.push({ spanCount: colSpan, headerText: sHeader[i], cssClass: sCss[i], txtAlign: tAl[i], tooltip: tp[i] });
                i += colSpan - 1;
            }
            if (frzCol > 0) {              
                for (var i = 0; i < columnLength; i++) {
                    col = model.columns[i];
                    if (i < frzCol && col.visible == false)
                        frzHideCol++;
                }
                forzenColumn = frzCol - frzHideCol;
                while (forzenColumn > 0) {
                    spanC = colsPanList[index].spanCount;
                    if (colsPanList[index].spanCount < forzenColumn) {
                        frozenColspanList.push(colsPanList[index])
                        if (!frozenHeader)
                            colsPanList.splice(index, 1);
                        else
                            index++;
                    }
                    else if (colsPanList[index].spanCount > forzenColumn) {
                        colsPanList[index].spanCount = colsPanList[index].spanCount - forzenColumn
                        if (frozenHeader)
                            frozenColspanList.push({ spanCount: forzenColumn, headerText: colsPanList[index].headerText });
                    }
                    else {
                        frozenColspanList.push(colsPanList[index])
                        if (!frozenHeader)
                            colsPanList.splice(index, 1);
                    }
                    forzenColumn -= spanC;
                }
                if (frozenHeader)
                    colsPanList = frozenColspanList
            }
            else {
               
            }
         
            for (var c = 0; c < colsPanList.length; c++) {
                $th = ej.buildTag('th.e-headercell e-stackedHeaderCell', "", {}, { 'colspan': colsPanList[c].spanCount });
                $div = ej.buildTag('div.e-headercelldiv  e-default' + colsPanList[c].tooltip, colsPanList[c].headerText, {"textAlign": colsPanList[c].txtAlign}, {});
                $th.append($div);
                $tr.append($th);
                if (colsPanList[c]["cssClass"] != undefined)
                    $th.addClass(colsPanList[c]["cssClass"]);
                if (model.allowColumnResize || model.allowColumnReordering)
                    $th.addClass("e-resizer");
            }
            if (model.detailsTemplate && model.showDetailsRow && model.showDetailsRowInfoColumn && frozenHeader!= true)
                $tr.append(ej.buildTag('th.e-headercell e-detailheadercell', '<div></div>'));
            return $tr;
        },

        //Get Header element by field name
        getHeaderCell: function (field) {
            var model = this.model,
                columnIndex = model.columns.indexOf(this.getColumnByField(field)),
                headerTd = null;
            if (!ej.isNullOrUndefined(columnIndex) && columnIndex != -1)
                headerTd = this.getHeaderTable().find("thead tr:not('.e-stackedHeaderRow')").
                find(".e-headercell").not(".e-detailheadercell").eq(columnIndex);
            return headerTd;
        },

        //creating a template element for angularjs template
        _createHeaderTemplateElement: function (column) {

            var idText = (column.field ? column.field: "") + $.inArray(column, this.model.columns) + "_HeaderTemplate",
                property = "headerTemplateID",
                template = column[property],
                quickReg = /^#([\w-]*)/, scriptReg = /^<script/i, scripEle;

            var match = quickReg.exec(template),
                options = {
                    name: "SCRIPT",
                    type: "text/x-treegridheadertemplate",
                    text: template,
                    id: (this._id + idText).replace(/(\\|[^0-9A-z-_])/g, "")
                };

            if (match && match[1])
                scripEle = document.getElementById(match[1]);
            else {
                if (scriptReg.test(template))
                    scripEle = $(template).get(0);
                else
                    scripEle = ej.buildTag(options.name, options.text).get(0);
            }
            scripEle.id = scripEle.id || options.id;
            scripEle.type = scripEle.type || options.type;
            $("#" + scripEle.id).remove();
            $("body").append(scripEle);
            return scripEle;
        },

        _getColWidth: function (columnCount, $headerCell) {
            var proxy = this,
                model = proxy.model,
           columns = model.columns;
            if (ej.browserInfo().name == "msie" && model.isFromGantt && !ej.isNullOrUndefined(columns[columnCount].width)) {
                if (parseInt(columns[columnCount].width) < 42) {
                    // padding values(6+35+1)
                    var paddingRight = 35 - (43 - parseInt(columns[columnCount].width));
                    if ($headerCell.hasClass("e-column-menu-padding")) {
                        $headerCell.removeClass('e-column-menu-padding');
                    }
                    $headerCell.css('padding-right', paddingRight + 'px');
                }
            }
        },

        _renderGridHeaderInternalDesign: function (columns, showDetailColumn, frozenHeader)
        {
            var proxy = this,
             model = proxy.model,
             doc = document,
             $table = ej.buildTag('table.e-table e-zerospace'),
             $thead = ej.buildTag('thead'),
             $tbody = ej.buildTag('tbody.e-hide'),
             $columnHeader = ej.buildTag('tr.e-columnheader'),
             $colGroup = $(doc.createElement('colgroup')),
             $rowBody = $(doc.createElement('tr')),
             columnCount = 0,
             length = columns.length,
             $headerCell,
             bodyCell,
             $headerCellDiv, 
             col, $filterHeader,
             $columnFilter, stackedHeaderLength = model.stackedHeaderRows.length;

            //CHECK SORTING ENABLED OR NOT
            if (model.allowSorting || model.showColumnChooser || model.allowColumnReordering) {
                $columnHeader.css({ 'cursor': 'pointer' });
            }

            if (model.headerTextOverflow === "wrap")
                proxy.element.addClass("e-wrap");
            else
                proxy.element.removeClass("e-wrap");

            if (model.showStackedHeader) {
                for (var index = 0; index < stackedHeaderLength; index++) {
                    var $tr = proxy._createStackedRow(model.stackedHeaderRows[index], frozenHeader);
                    $thead.append($tr);
                }
            }

            for (columnCount; columnCount < length; columnCount++) {
                if (columns[columnCount]) {
                    var headerTextAlign = columns[columnCount].headerTextAlign ? columns[columnCount].headerTextAlign
                                                           : (columns[columnCount].textAlign ? columns[columnCount].textAlign : ej.TextAlign.Left);
                    // set padding right 35px for displaying column menu icon
                    if ((model.showColumnChooser || (!model.showColumnChooser && model.allowFiltering && (model.filterSettings.filterType == "menu" || model.filterSettings.filterType == "excel"))) && columns[columnCount].field != "checkboxState") {
                        if (!ej.isNullOrUndefined(columns[columnCount].allowFiltering) && !columns[columnCount].allowFiltering && !proxy.model.showColumnChooser) {
                            $headerCell = ej.buildTag('th.e-headercell', "", {}, {});
                        } else {
                            $headerCell = ej.buildTag('th.e-headercell', "", {}, {});
                            $headerCell.addClass("e-column-menu-padding");
                            this._getColWidth(columnCount, $headerCell);
                        }
                    }
                    else {
                        $headerCell = ej.buildTag('th.e-headercell', "", {}, {});
                    }
                    if (model.allowFiltering && model.filterSettings.filterType == ej.TreeGrid.FilterType.FilterBar) {
                        $headerCell.addClass("e-filterbar-material");
                    }
                    bodyCell = doc.createElement('td');

                    $headerCellDiv = ej.buildTag(
                        'div.e-headercelldiv', "",
                        { "text-align": headerTextAlign },
                        { 'data-ej-mappingname': columns[columnCount]["field"], 'data-unselectable': "on" }
                    );
                    if (columns[columnCount]["clipMode"] && columns[columnCount]["clipMode"] == ej.TreeGrid.ClipMode.Ellipsis) {
                        $headerCellDiv.addClass("e-treegridtrimcell");
                    }
                    // add checkbox that name of column have in proxy._checkboxColumnName
                    if (proxy._checkboxSelection && model.selectionSettings.enableSelectAll) {
                        if (proxy._checkboxColumnName == columns[columnCount]["field"])
                            $headerCellDiv.append(proxy._addHeaderCheckboxTemplate());                        
                    }
                    if (columns[columnCount]["field"] == "checkboxState")
                        $headerCell.css({ cursor: "default" });

                    var headerText = ej.buildTag('span',columns[columnCount]["headerText"] == undefined ?
                        columns[columnCount]["headerText"] = columns[columnCount]["field"] :
                        columns[columnCount]["headerText"]);

                    if (model.headerTextOverflow == "wrap") {
                        $headerCellDiv.addClass("e-textwrapheaderdiv");
                    }
                    $headerCellDiv.append(headerText);
                    $headerCell.append($headerCellDiv);
                    // Add column menu icon in header columns
                    if (proxy.model.showColumnChooser && !columns[columnCount].nonColumn) {
                        var $columnChooser = ej.buildTag('div.e-columnmenu-icon e-icon e-columnicon', "", { "cursor": "pointer" });
                        if (model.headerTextOverflow == "wrap")
                            $columnChooser.addClass("e-textwrapcolumnicon");
                        $columnChooser.data("isClicked", false);
                        $headerCell.append($columnChooser);
                    } else if ((!model.showColumnChooser && model.allowFiltering && (model.filterSettings.filterType == "menu" || model.filterSettings.filterType == "excel") && (ej.isNullOrUndefined(columns[columnCount].allowFiltering) || columns[columnCount].allowFiltering)) && columns[columnCount].field != "checkboxState") {
                        if (proxy._filteredColumnValueID.indexOf(columns[columnCount].field) != -1)
                            $columnFilter = ej.buildTag('div.e-column-filtered-icon e-icon e-filtericon', "", { "cursor": "pointer" });
                        else
                            $columnFilter = ej.buildTag('div.e-column-filter-icon e-icon e-filtericon', "", { "cursor": "pointer" });
                        if (proxy.model.filterSettings.filteredColumns) {
                            for (var x = 0; x < proxy.model.filterSettings.filteredColumns.length; x++) {
                                if (proxy.model.filterSettings.filteredColumns[x].field == columns[columnCount].field && proxy.model.filterSettings.filteredColumns[x].value.toString() != "")
                                    $columnFilter = ej.buildTag('div.e-column-filtered-icon e-icon e-filtericon', "", { "cursor": "pointer" });
                            }
                        }
                        $columnFilter.data("isClicked", false);
                        $headerCell.append($columnFilter);
                    }
                    
                    col = doc.createElement('col');

                    $rowBody.append(bodyCell);
                    $columnHeader.append($headerCell);
                    $colGroup.append(col);


                    //CHECK VISIBLE PROPERTY OF THE COLUMN
                    if (columns[columnCount]["visible"] === false && columns[columnCount] != model.columns[model.treeColumnIndex]) {
                        $headerCell.addClass("e-hide") && $(col).css("display", "none") &&
                        proxy._hiddenColumns.push(columns[columnCount].headerText);

                    } else {
                        proxy._visibleColumns.push(columns[columnCount].headerText);
                        columns[columnCount]["visible"] = true;
                    }

                    if (columns[columnCount]["allowSorting"] === false) {
                        $headerCell.css({ 'cursor': 'normal' });
                    }

                    if (!ej.isNullOrUndefined(columns[columnCount]["headerTemplateID"])) {
                        $headerCellDiv.html(proxy._renderEjTemplate("#" + this._createHeaderTemplateElement(columns[columnCount]).id, columns[columnCount], 0, columns[columnCount], "treegridheadertemplate")).parent().addClass("e-headertemplate");
                    }
                    if (columns[columnCount]["allowCellSelection"] == undefined) {
                        columns[columnCount]["allowCellSelection"] = true;
                    }
                    if (columns[columnCount]["showInColumnChooser"] == undefined) {
                        columns[columnCount]["showInColumnChooser"] = true;
                    }
                    if (columns[columnCount]["width"] == undefined && model.commonWidth !== undefined) {
                        proxy.columnsWidthCollection.push(model.commonWidth);
                        columns[columnCount]["width"] = model.commonWidth;
                    } else {
                        proxy.columnsWidthCollection.push(parseFloat(columns[columnCount]["width"]));
                        columns[columnCount]["width"] = parseFloat(columns[columnCount]["width"]);
                    }

                    proxy._fieldColumnNames[columns[columnCount].headerText] = columns[columnCount].field;
                    proxy._headerColumnNames[columns[columnCount].field] = columns[columnCount].headerText;
                }
            }
            //Updating the column properties to Gantt's model.columns also
            if (model.isFromGantt)
                proxy.updateToGanttColumns();

            /* add detail column to last*/
            if (model.showDetailsRow && model.detailsTemplate && model.showDetailsRowInfoColumn && showDetailColumn) {
                $columnHeader.append(ej.buildTag('th.e-headercell e-detailheadercell', '<div style="width:' + proxy._detailsColumnWidth + 'px;"></div>', {}, {}));
                $colGroup.append(this._getIndentCol());
            }

            // Condition to check whether filtering enabled to render filter elements.
            if (model.allowFiltering && !model.isFromGantt && model.filterSettings.filterType == "filterbar") {
                $filterHeader = this._renderFiltering(columns, showDetailColumn);
            }            
            $thead.append($columnHeader);
            if ($filterHeader)
                $thead.append($filterHeader);
            $table.append($colGroup).append($thead);
            return $table;
        },

        //#endregion

        //#region TREEGRIDCONTENT RENDERING
        //TREEGRID CONTENT RENDER INITIALIZATION
        _initGridRender: function () {

            var proxy = this;
            proxy._addInitTemplate();
            proxy._renderGrid();

            //CHECK COLUMN RESIZE IS ENABLED OR NOT AND INITIALIZE THE RESIZER
            if (proxy.model.allowColumnResize) {
                proxy._resizer = new ej.gridFeatures.gridResize(proxy);
            }

        },
        //Create a summary row.
        _summaryRow: function () {
            var proxy = this, model = proxy.model;
            if (model.showSummaryRow) {
                proxy._createSummaryRow();
                var refreshArgs = {};
                refreshArgs.requestType = ej.TreeGrid.Actions.Refresh;
                proxy.sendDataRenderingRequest(refreshArgs);
                proxy.updateCollapsedRecordCount();
                proxy._updateWrapRowHeights("header");
                proxy.updateHeight();
                if (model.allowTextWrap || model.headerTextOverflow == "wrap") {
                    proxy._updateGridContentHeight();
                }
            }
            if (model.showTotalSummary) {
                var summaryLength = $("#" + proxy._id + "-footersummaryrow").length;
                proxy._createTotalSummaryRow();
                if (summaryLength == 0)
                    proxy._viewPortHeight = proxy._viewPortHeight - proxy._$totalSummaryRowContainer.outerHeight();
                if (model.columnResizeSettings.columnResizeMode == ej.TreeGrid.ColumnResizeMode.FixedColumns && !model.isFromGantt)
                    this._updateTableWidth();
                this._updateHeaderScrollLeft();
            }
        },


        //ADD GRIDCONTENT TO THE TREEGRID
        _renderGrid: function () {
            
            var proxy = this;
            proxy._renderGridContent().insertAfter(proxy.element.children(".e-gridheader"));
            

        },
        _renderFrozenSummary: function ()
        {
            this._$footerContainer.find("#e-frozenfooterdiv" + this._id + " .e-table colgroup").replaceWith(this._getMetaColGroup()[0]);
            this._$footerContainer.find("#e-movablefooterdiv" + this._id + " .e-table colgroup").replaceWith(this._getMetaColGroup()[1]);
            this._$footerContainer.find("#e-frozenfooterdiv" + this._id + " .e-table tbody").html($.render[this._id + "_JSONFrozenTemplate"](this._footerSummaryRecord));
            this._$footerContainer.find("#e-movablefooterdiv" + this._id + " .e-table tbody").html($.render[this._id + "_Template"](this._footerSummaryRecord));
        },

        _renderSummaryByFrozenDesign: function () {
            var $div = $(document.createElement('div')), col = this._getMetaColGroup().find("col"), colgroups = {};
            colgroups["colgroup1"] = $div.append(ej.buildTag("colgroup").append(col.splice(0, this._frozenColumnsLength))).html();
            colgroups["colgroup2"] = $div.html(ej.buildTag("colgroup").append(col)).html();
            if (!$.templates[this._id + "_FrozenSummaryTemplate"])
                this.addFrozenSummaryTemplate();
            return $.render[this._id + "_FrozenSummaryTemplate"](colgroups);
           
        },
        _spliceSummaryRows: function (updatedRecords) {
            var proxy = this,
                model = proxy.model, records=[];
            var nonSummaryRowChildRecords = updatedRecords.filter(function (data) {
                if (!data.isSummaryRow)
                    records.push(data);
            });
            return records;
        },
        addFrozenSummaryTemplate: function () {
            var template = "<div class='e-frozenfooterdiv' id='e-frozenfooterdiv" + this._id +"'>"
            + "<table class='e-table e-zerospace' style='width:100%' id='" + this._id + "frozensummarye-table'>{{:colgroup1}}<tbody>"
            + "</tbody></table></div>"
            + "<div class='e-movablefooter' id='e-movablefooter" + this._id + "'><div class='e-movablefooterdiv' id='e-movablefooterdiv" + this._id + "'><table class='e-table e-zerospace' id='" + this._id + "movablesummarye-table'>{{:colgroup2}}<tbody>"
            + "</tbody></table></div></div>", templates = {};
            templates[this._id + "_FrozenSummaryTemplate"] = template;
            $.templates(templates);
        },

        //collapse the Summary record
        expandCollapseTotalSummary: function (expanded) {
            var proxy = this,
                model = proxy.model;            
            if (model.showTotalSummary && model.collapsibleTotalSummary) {
                if (proxy._footerSummaryRecord[0].summaryExpanded == expanded) return;
                var args = {};
                args.expanded = expanded;
                args.requestType = expanded ? "summaryExpanding" : "summaryCollapsing";
                args.data = proxy._footerSummaryRecord[0];
                args.columnName = model.columns[this._summaryColumnIndex].headerText;
                args.cellValue = !ej.isNullOrUndefined(args.data) ? args.data[model.columns[this._summaryColumnIndex].field] : "";
                args.isFromUserAction = proxy._isInManualExpandCollapse;
                var $firstSummaryRow = $(proxy.element).find(".e-firstfootersummaryrow"),
                 $collapsedRows = $(proxy.element).find(".e-footersummaryrow");
                if (!expanded) {
                    proxy._trigger("collapsing", args);
                    if (args.cancel) return;
                    $collapsedRows.css({ 'display': 'none' });
                    $firstSummaryRow.css({ 'display': 'table-row' });
                    $firstSummaryRow.find(".e-summarytreegridexpand").removeClass('e-summarytreegridexpand').addClass('e-summarytreegridcollapse');
                    proxy._footerSummaryRecord[0].summaryExpanded = false;
                    var tempArgs = {};                 
                    tempArgs.expanded = expanded;
                    tempArgs.data = proxy._footerSummaryRecord[0];
                    tempArgs.columnName = model.columns[this._summaryColumnIndex].headerText;
                    tempArgs.cellValue = !ej.isNullOrUndefined(args.data) ? args.data[model.columns[this._summaryColumnIndex].field] : "";
                    tempArgs.requestType = "summaryCollapsed";
                    tempArgs.isFromUserAction = proxy._isInManualExpandCollapse;
                    proxy._trigger("collapsed", tempArgs);
                }
                else {
                    proxy._trigger("expanding", args)
                    if (args.cancel) return;
                    $collapsedRows.css({ 'display': 'table-row' });
                    $firstSummaryRow.find(".e-summarytreegridcollapse").removeClass('e-summarytreegridcollapse').addClass('e-summarytreegridexpand');
                    proxy._footerSummaryRecord[0].summaryExpanded = true;
                    var tempArgs = {};                    
                    tempArgs.expanded = expanded;
                    tempArgs.data = proxy._footerSummaryRecord[0];
                    tempArgs.columnName = model.columns[this._summaryColumnIndex].headerText;
                    tempArgs.cellValue = !ej.isNullOrUndefined(args.data) ? args.data[model.columns[this._summaryColumnIndex].field] : "";
                    tempArgs.requestType = "summaryExpanded";
                    tempArgs.isFromUserAction = proxy._isInManualExpandCollapse;
                    proxy._trigger("expanded", tempArgs)
                }
                proxy._$totalSummaryRowContainer.ejScroller({ height: expanded ? model.rowHeight : model.totalSummaryHeight });
                proxy._updateGridContentHeight();
                proxy._updateSummaryHeight();
            }
        },

        //Add a total summary row after treegrid content.
        _createTotalSummaryRow: function () {
            var proxy = this, $summaryDiv, $table, model = proxy.model, flatRecords = model.flatRecords,
                summaryRows = model.summaryRows, summaryRowLength = summaryRows.length,
                updatedRecords = model.updatedRecords, parentRecords = model.parentRecords,
                columns = model.columns, $tbody = ej.buildTag('tbody');
            model.totalSummaryHeight = model.totalSummaryHeight < model.rowHeight ? model.rowHeight : model.totalSummaryHeight;
            proxy._footerSummaryRecord = [];
            proxy._footerSummaryRows = [];
            if (model.collapsibleTotalSummary && $("#" + proxy._id + "-footersummaryrow").length != 0 && $("#" + proxy._id + "-footersummaryrow").find(".e-summarytreegridcollapse").length != 0)
                proxy._persistCollapseState = true;
            $("#" + proxy._id + "-footersummaryrow").remove();
            $summaryDiv = ej.buildTag('div.e-footersummaryrowdiv#' + proxy._id + '-footersummaryrow', '',
                {
                    "overflow": "hidden",
                    "cursor": "default"
                });
            var $footerContainer = ej.buildTag('div.e-footercontainer#e-footercontainer' + proxy._id, '',
               {
                   "overflow": "hidden"
               });
            proxy._flatChildRecords = proxy._spliceSummaryRows(model.updatedRecords);

            for (var summaryRowIndex = 1; summaryRowIndex <= summaryRowLength; summaryRowIndex++) {
                var item = {};
                for (var columnLength = 0; columnLength < columns.length; columnLength++) {
                    item[columns[columnLength].field] = "";
                }
                item = proxy._createSummaryItem(item, summaryRows[summaryRowIndex - 1]);
                var record = proxy._createRecord(item, 0);
                if (summaryRowIndex == 1) {
                    record.isFirstFooterSummary = true;
                    if (model.collapsibleTotalSummary) {
                        record.summaryExpanded = true;
                        }
                }
                record.footerSummaryRowRecord = true;
                record.index = summaryRowIndex;
                proxy._footerSummaryRecord.push(record);
                //GridRow = $.render[this._id + "_Template"](record);
                //proxy._footerSummaryRows.push(GridRow);
                //$tbody.append(GridRow);
            }
            proxy._$footerContainer = $footerContainer;
            if (this._frozenColumnsLength > 0) {
                $footerContainer.html(this._renderSummaryByFrozenDesign());
                this._renderFrozenSummary();
            } else {
                var $table = ej.buildTag('table.e-table e-zerospace#' + proxy._id + "summarye-table", "",
                { top: "0px" });
                $table.append(proxy.getContentTable().find('colgroup').clone()).append($tbody);
                $tbody.html($.render[this._id + "_Template"](proxy._footerSummaryRecord));
                $footerContainer.append($table);
            }
            proxy._$totalSummaryRowContainer = $summaryDiv;
            proxy._$footertableContent = $footerContainer.find(".e-table");
            $summaryDiv.append($footerContainer);
            //Always display after TotalSummaryRow
            if (model.allowPaging) {
                proxy.element.append($("#" + this._id + "Pager").before($summaryDiv));
            }
            else
                proxy.element.append($summaryDiv);

            proxy._flatChildRecords = [];
            this._setWidthToFooters();
            if (this._$totalSummaryRowContainer.height() <= model.totalSummaryHeight) {
                if (proxy.isVScroll())
                    proxy._$totalSummaryRowContainer.addClass("e-scrollcss");
                model.totalSummaryHeight = this._$totalSummaryRowContainer.height();
            }
            else {
                proxy._$totalSummaryRowContainer.ejScroller({ height: model.sizeSettings.height == "auto" ? 0 : model.totalSummaryHeight });
            }
            if (model.sizeSettings.height == "auto")
                $("#" + proxy._id + "-footersummaryrow").width(proxy._gridWidth - 2);
            proxy._updateSummaryTitleColumn();           
            if (proxy._persistCollapseState == true) {
                proxy.expandCollapseTotalSummary(false);
                proxy._persistCollapseState = false;
            }
            if (model.columnResizeSettings.columnResizeMode == ej.TreeGrid.ColumnResizeMode.FixedColumns) {
                this._updateTableWidth();
            }
        },
        _getFooterRows: function ()
        {
            var gridFooterRows = $();
            if (this.model.showTotalSummary && this._$footertableContent) {
                gridFooterRows = this._$footertableContent.get(0).rows;
                if (this._frozenColumnsLength > 0)
                    gridFooterRows = [gridFooterRows, this._$footertableContent.get(1).rows];
            }
            return $(gridFooterRows);
        },
        //update footer container width for frozen columns
        _setWidthToFooters: function () {
            var width = this._gridWidth;
            if (this._frozenColumnsLength > 0) {
                var frozenWidth = this._getFrozenColumnWidth();
                this._$totalSummaryRowContainer.find("#e-frozenfooterdiv" + this._id).width(width).next().css("margin-left", frozenWidth + "px");
                this._$totalSummaryRowContainer.find("#e-frozenfooterdiv" + this._id).outerWidth(frozenWidth)
                    .end().find("#e-movablefooterdiv" + this._id).css("width", "100%");
            }
        },
        _excludeSummaryRows: function () {

            var $gridRows = $(), model = this.model;
            if (this.getTreeGridRows() && this.getTreeGridRows().length > 0) {
                    if (this._frozenColumnsLength > 0)
                        $gridRows = [$(this.getTreeGridRows()[0]).not(".e-summaryrow"), $(this.getTreeGridRows()[1]).not(".e-summaryrow")];
                    else
                        $gridRows = $(this.getTreeGridRows()).not(".e-summaryrow");
            }
            return $gridRows;
        },

        //Add a summary row for every parent item in Tree grid.
        _createSummaryRow: function (args) {
            var proxy = this, model = proxy.model, parentRecords,
                recordIndex,
                item = {},
                docsummaryRow,
                totalChildRecordsLength,
                summaryRows = model.summaryRows,
                summaryRowLength = summaryRows.length,
                columns = model.columns;
            if (args && (args.requestType == "dragAndDrop" || args.requestType == "addNewRow" ||
                 args.requestType == "sorting")) {
                parentRecords = proxy._getParentRecords(model.updatedRecords, proxy);
                //Remove the summaryRow records from the childRecords collection of parentRecords
                if (args.requestType == "dragAndDrop") {
                    for (var i = 0; i < parentRecords.length; i++) {
                        var nonSummaryRowChildRecords = [];
                        nonSummaryRowChildRecords = parentRecords[i].childRecords.filter(function (data) {
                            if (!data.isSummaryRow)
                                return true;

                        });
                        parentRecords[i].childRecords = nonSummaryRowChildRecords.slice();
                    }
                }
            }
            else
                parentRecords = proxy._isHierarchyFiltering ? proxy._findFilteredParentRecords(proxy._flatFilteredRecords) : proxy._parentRecords;
            var length = parentRecords.length;
            if (args && ej.isNullOrUndefined(args.filterCollection))
                args.filterCollection = [];
            if (model.enableCollapseAll && model.enableVirtualization && !args)
                model.updatedRecords = model.flatRecords.slice();
            model.updatedRecords = proxy._spliceSummaryRows(model.updatedRecords); 
            model.flatRecords = proxy._spliceSummaryRows(model.flatRecords);
            model.summaryRowRecords = [];
            //$(proxy.element).find(".e-summaryrow").remove();                       
            //this._$gridRows = proxy._excludeSummaryRows();
            proxy._flatChildRecords = [];
            for (var parentIndex = 0; parentIndex < length; parentIndex++) {
                var parentRecord = parentRecords[parentIndex];
                totalChildRecordsLength = proxy._getChildRecordsLength(parentRecord, model.updatedRecords);              
                if (totalChildRecordsLength == 0)
                    continue;
                for (var summaryRowIndex = 1; summaryRowIndex <= summaryRowLength; summaryRowIndex++) {
                    for (var columnLength = 0; columnLength < columns.length; columnLength++) {
                        item[columns[columnLength].field] = "";
                    }
                    item = proxy._createSummaryItem(item, summaryRows[summaryRowIndex - 1], parentRecord);
                    var currentIndex = model.updatedRecords.indexOf(parentRecord) + totalChildRecordsLength + summaryRowIndex,
                        summaryRecord = proxy._createRecord(item, currentIndex);
                    if (proxy._isHierarchyFiltering && model.enableVirtualization)
                        summaryRecord.isDisplay = true;
                    proxy._isSummaryRow = true;
                    summaryRecord.level = parentRecord.level + 1;
                    summaryRecord.parentItem = parentRecord;
                    summaryRecord.isSummaryRow = true;
                    summaryRecord.index = model.flatRecords.length + 1;
                    if (model.enableVirtualization) {
                        if (proxy._isHierarchyFiltering)
                            model.updatedRecords = proxy._updateFilterParent;
                        model.updatedRecords.splice(currentIndex, 0, summaryRecord);
                            if (!args || (args && args.filterCollection))
                                model.summaryRowRecords.push(model.updatedRecords[currentIndex]);
                    }
                    else {
                        model.updatedRecords.splice(currentIndex, 0, summaryRecord);
                        model.summaryRowRecords.push(model.updatedRecords[currentIndex]);
                    }
                    currentIndex = model.flatRecords.indexOf(parentRecord) + totalChildRecordsLength + summaryRowIndex;
                    model.flatRecords.splice(currentIndex, 0, summaryRecord);                    
                    parentRecord.childRecords.push(summaryRecord);
                    item = {};
                    if (summaryRowIndex == summaryRowLength) {
                        summaryRecord.isLastSummary = true;
                    }
                }
                proxy._flatChildRecords = [];
            }
            proxy._isSummaryRow = false;
            proxy._summaryRowsCount = parentRecords.length;
            if (model.enableVirtualization) {
                model.updatedRecords = proxy.getExpandedRecords(model.updatedRecords);
                if (model.enableAltRow)
                    proxy.updateAltRow();
            }
            this._updateCurrentViewData();
        },
        //Get all inner parent records for Virtualization is true
        _getInnerParentRecords: function (records, proxy, parentRecords) {
            var recordLength = records.childRecords.length;

            for (var count = 0; count < records.childRecords.length; count++) {
                
                if (records.childRecords[count].hasChildRecords) {
                    if (parentRecords.indexOf(records.childRecords[count]) == -1)
                        parentRecords.push(records.childRecords[count]);
                    proxy._getInnerParentRecords(records.childRecords[count], proxy, parentRecords);
                }
            }           
        },

        //Get all parent records from updated records.
        _getParentRecords: function (updatedRecords, proxy, rootParent) {
            var recordLength = updatedRecords.length, record, parentRecords = [];
            for (var length = 0; length < recordLength; length++) {
                record = updatedRecords[length];
                if (rootParent) {
                    if (ej.isNullOrUndefined(record.parentItem))
                        parentRecords.push(record);
                }
                else if (record.childRecords && record.childRecords.length > 0) {
                    if ((proxy.model.enableVirtualization) || (proxy.model.allowPaging && proxy.model.showSummaryRow)) {
                        if (parentRecords.indexOf(record) == -1)
                            parentRecords.push(record);
                        proxy._getInnerParentRecords(record, proxy, parentRecords);
                    }
                    else
                        parentRecords.push(record);
                }
                else if (proxy._isLoadonDemand && record.hasChildRecords && parentRecords.indexOf(record) == -1)
                    parentRecords.push(record);
            }
            return parentRecords;
        },
        //To get all child and grand child of one parent record when the datasource is in hierarchy form.
        _getChildRecordsLength: function (parentRecord, updatedRecords) {
            var proxy = this,
                recordLength = updatedRecords.length, record;
            for (var length = 0; length < recordLength; length++) {
                record = updatedRecords[length];
                if (record.summaryRow)
                    continue;
                if (parentRecord == record.parentItem) {
                    proxy._flatChildRecords.push(record);
                    if (record.hasChildRecords)
                        proxy._getChildRecordsLength(record, updatedRecords);
                }
            }
            return proxy._flatChildRecords.length;
        },

        //Assign the values for item properties to create a summary record.
        _createSummaryItem: function (item, targetSummaryRow, parentRecord) {
            var proxy = this,
                summaryColumns = targetSummaryRow.summaryColumns,
                summaryColumnsLength = summaryColumns.length;
            for (var columnLength = 0; columnLength < summaryColumnsLength; columnLength++) {
                var targetSummaryColumn = summaryColumns[columnLength],
                    prefix = targetSummaryColumn.prefix,
                    suffix = targetSummaryColumn.suffix,
                    displayColumn = targetSummaryColumn.displayColumn;

                if (ej.isNullOrUndefined(displayColumn))
                    displayColumn = targetSummaryColumn.dataMember;
                if (ej.isNullOrUndefined(prefix))
                    prefix = "";
                if (ej.isNullOrUndefined(suffix))
                    suffix = "";
                item.summaryColumn = targetSummaryColumn;
                item.summaryRow = targetSummaryRow;

                for (var key in item) {
                    if (key == displayColumn) {
                        if (item[key])
                            item[key] = item[key] + " " + prefix + proxy._getSummaryValues(targetSummaryColumn, proxy._flatChildRecords) + suffix;
                        else
                            item[key] = prefix + proxy._getSummaryValues(targetSummaryColumn, proxy._flatChildRecords) + suffix;
                    }
                }
            }
            return item;
        },

        //Calculate the summary values.
        _getSummaryValues: function (summaryColumn, summaryData) {
            var dataMember = summaryColumn.dataMember, format = summaryColumn.format,
                jsonData = summaryData;
            var dbMgr, $value= "";
            if (jsonData instanceof ej.DataManager) {
                dbMgr = jsonData;
                jsonData = jsonData.dataSource.json;
            } else
                dbMgr = ej.DataManager(jsonData);
            switch (summaryColumn.summaryType) {
                case ej.TreeGrid.SummaryType.Sum:
                    $value = ej.sum(jsonData, dataMember);
                    break;
                case ej.TreeGrid.SummaryType.Average:
                    $value = ej.avg(jsonData, dataMember);
                    $value = (isNaN($value) || ej.isNullOrUndefined($value)) ? "" : $value;
                    break;
                case ej.TreeGrid.SummaryType.Maximum:
                    var obj = ej.max(jsonData, dataMember);
                    $value = parseInt(this._getCustomCellValue(obj, summaryColumn.dataMember));
                    $value = (isNaN($value) || ej.isNullOrUndefined($value)) ? "" : $value;
                    break;
                case ej.TreeGrid.SummaryType.Minimum:
					var filteringData = jsonData.filter(function (data) {
                        if (data[dataMember] !== "")
                            return true;
                    });
                    var obj = ej.min(filteringData, dataMember);
                    $value = parseInt(this._getCustomCellValue(obj, summaryColumn.dataMember));
                    $value = (isNaN($value) || ej.isNullOrUndefined($value)) ? "" : $value;
                    break;
                case ej.TreeGrid.SummaryType.MaximumDate:
                    $value = this._getMaxDate(jsonData, dataMember);
                    $value = ej.isNullOrUndefined($value) ? "" : $value;
                    break;
                case ej.TreeGrid.SummaryType.MinimumDate:
                    $value = this._getMinDate(jsonData, dataMember);
                    $value = ej.isNullOrUndefined($value) ? "" : $value;
                    break;
                case ej.TreeGrid.SummaryType.Count:
                    $value = jsonData.length;
                    break;
                case ej.TreeGrid.SummaryType.TrueCount:
                    var predicate = ej.Predicate(summaryColumn.dataMember, "equal", true);
                    $value = dbMgr.executeLocal(ej.Query().where(predicate)).length;
                    break;
                case ej.TreeGrid.SummaryType.FalseCount:
                    var predicate = ej.Predicate(summaryColumn.dataMember, "equal", false);
                    $value = dbMgr.executeLocal(ej.Query().where(predicate)).length;
                    break;
                case ej.TreeGrid.SummaryType.Custom:
                    var fn = summaryColumn.customSummaryValue;
                    if (fn) {
                        if (typeof fn === "string")
                            fn = ej.util.getObject(fn, window);
                        if ($.isFunction(fn))
                            $value = fn.call(this, summaryColumn, jsonData);
                        else
                            $value = summaryColumn.customSummaryValue;
                    }
                    break;
            }
            if (!ej.isNullOrUndefined(format))
                $value = this.formatting(format, $value, this.model.locale);
            return $value;
        },
        // To Get Maximum Date of Particular Datamember in JSON data.
        _getMaxDate: function (jsonData, dataMember) {
            var max = 0;
            var maxDate = null;
            for (var i = 0; i < jsonData.length; i++) {
                var item = jsonData[i],
                    date = new Date(item[dataMember]),
                    time = date.getTime();
                if (time > max) {
                    max = time;
                    maxDate = item[dataMember];
                }
            }

            return maxDate;
        },
        // To Get Minimum Date of Particular Datamember in JSON data.
        _getMinDate: function (jsonData, dataMember) {
            if (jsonData.length == 0) return null;
            var firstMinDate = new Date(jsonData[0][dataMember]),
                min = firstMinDate.getTime();
            var minDate = jsonData[0][dataMember];
            for (var i = 0; i < jsonData.length; i++) {
                var item = jsonData[i],
                    date = new Date(item[dataMember]),
                    time = date.getTime();
                if (time < min) {
                    min = time;
                    minDate = item[dataMember];
                }
            }

            return minDate;
        },
        /*Create new summary records and re render all records*/
        _createAndRenderSummaryRecords: function (args)
        {
            var proxy = this;
            proxy._createSummaryRow(args);
            var refreshArgs = {};
            refreshArgs.requestType = ej.TreeGrid.Actions.Refresh;
            proxy.sendDataRenderingRequest(refreshArgs);
            proxy.updateCollapsedRecordCount();
            proxy.updateHeight();
        },
        _mergeRecords: function () {
            var proxy=this, batchChanges = proxy.batchChanges,editedChanges=batchChanges.changed, addedChanges=batchChanges.added, mergeCollection=[];
            for (var i = 0; i < editedChanges.length; i++)
            {
                if (!mergeCollection[editedChanges[i]]) {
                    mergeCollection.push(editedChanges[i]);
                }
            }
            for (var i = 0; i < addedChanges.length; i++) {
                if (!mergeCollection[addedChanges[i]]) {
                    mergeCollection.push(addedChanges[i]);
                }
            }
            return mergeCollection;
        },
       
        //Update the summary after add, edit or delete the record.
        _updateSummaryRow: function (args) {
            var proxy = this, model = proxy.model, summaryRow,
                editedRecord, editedRecordIndex, updatedSummaryRecords = [],
                _pRecords = [], cellvalue,
            updatedRecords = proxy.getUpdatedRecords();

            if (args && args.requestType == "dragAndDrop") {
                args.rowIndex = updatedRecords.indexOf(proxy._droppedRecord);
                if(args.rowIndex == -1) return;
            }
            if (args && args.requestType == "delete") {
                proxy._updateAfterDeleteRecord(args);
                return;
            }

            if (args && args.editType == "celledit") {
                if (args.columnObject.editType == "numericedit") {
                    cellvalue = parseInt(args.value);
					args.value = isNaN(cellvalue) ? "" : cellvalue;
                    args.data[args.columnName] = args.value;
                }
                args.currentValue = args.value;
                var rowIndex = proxy.getIndexByRow(args.rowElement);
                var data = model.enableVirtualization ? model.currentViewData[rowIndex] : updatedRecords[rowIndex];
                args.rowIndex = updatedRecords.indexOf(data);
            }
            if ((args.currentValue != args.previousValue) || args.requestType == "dragAndDrop"
                || args.requestType == "addNewRow" || proxy._batchEditCancel) {
                editedRecord = args.requestType == "addNewRow" ? model.updatedRecords[args.rowIndex] : updatedRecords[args.rowIndex];
                if (proxy._batchEditCancel)
                    editedRecord = args.record;
                if (editedRecord.parentItem)
                    _pRecords = proxy._getpRecords(editedRecord, proxy);
                if (ej.isNullOrUndefined(_pRecords))
                    return;
                for (var parentLength = 0; parentLength < _pRecords.length; parentLength++) {
                    var summaryRowRecords = model.summaryRowRecords, recordindex, columnIndex,
                        prevUpdatedCols = [], emptyDisplayCol;
                    proxy._getChildRecordsLength(_pRecords[parentLength], updatedRecords);
                    $.each(summaryRowRecords, function (index, record) {
                        summaryRow = record.summaryRow;
                        if (record.parentItem === _pRecords[parentLength]) {
                            prevUpdatedCols = [];
                            var summaryColumnLength = summaryRow.summaryColumns.length;
                            for (var length = 0; length < summaryColumnLength; length++) {
                                var summaryColumn = summaryRow.summaryColumns[length],
                                    prefix = summaryColumn.prefix,
                                    suffix = summaryColumn.suffix;
                                if (ej.isNullOrUndefined(prefix))
                                    prefix = "";
                                if (ej.isNullOrUndefined(suffix))
                                    suffix = "";
                                if (args.editType == "rowedit") {
                                    args.columnName = summaryColumn.dataMember;
                                    var columnList = model.columns,
                                        dataMemberColumnIndex = proxy.getColumnIndexByField(args.columnName);
                                    //To convert empty string to integer while adding the new row.    
                                    if (model.columns[dataMemberColumnIndex].editType == "numericedit")
                                        editedRecord[args.columnName] = parseInt(editedRecord[args.columnName]);
                                }
                                var displayColumn = summaryColumn.displayColumn;
                                if (!displayColumn)
                                    displayColumn = summaryColumn.dataMember;
                                recordindex = model.currentViewData.indexOf(record);
                                columnIndex = proxy.getColumnIndexByField(displayColumn);
                                args.data = record;
                                if (columnIndex != -1) {
                                if (proxy._frozenColumnsLength > 0) {
                                    if (proxy._frozenColumnsLength > columnIndex)
                                        args.rowElement = $(proxy.getRows()[0][recordindex]);
                                    else {
                                        args.rowElement = $(proxy.getRows()[1][recordindex]);
                                        columnIndex -= proxy._frozenColumnsLength;
                                    }
                                } else {
                                    args.rowElement = $(proxy.getRows()[recordindex]);
                                }
                                args.cellElement = args.rowElement.find(".e-rowcell").eq(columnIndex);

                                var value = proxy._getSummaryValues(summaryColumn, proxy._flatChildRecords);
                                var summaryCellValue = prefix + value + suffix;
                                emptyDisplayCol = prevUpdatedCols.indexOf(displayColumn) != -1 ? false : true;
                                if(!emptyDisplayCol) {
                                    $(args.cellElement).append(' ' + summaryCellValue);
                                    record[displayColumn] = record[displayColumn] + " " + summaryCellValue;
                                }
                                else {
                                    if ($(args.cellElement).find(".e-summarytitle").length != 0) {
                                        var $titleClone = $(args.cellElement).find(".e-summarytitle").clone();
                                        $(args.cellElement).empty().html(summaryCellValue).prepend($titleClone);
                                    }
                                    else
                                        $(args.cellElement).empty().html(summaryCellValue);
                                    record[displayColumn] = summaryCellValue;
                                    prevUpdatedCols.push(displayColumn);
                                }                                                
                                updatedSummaryRecords.push(record);
                                proxy._updateWrapRowHeights("total,header", "virtualRefresh", recordindex, "savecell");
                                }
                            }
                        }
                    });
                    proxy._flatChildRecords = [];
                    proxy._summaryRowCount = _pRecords.length;
                }
            }
        },
        //Update the Total summary after add, edit or delete the record.
        _updateTotalSummaryRow: function (args) {
            if (args.requestType == "dragAndDrop" || args.isDragAndDropDelete)
                return;
            var proxy = this, model = proxy.model, summaryRows = model.summaryRows, summaryColumns, summaryRow,
                summaryColumnsLength, record, summaryRowLength = summaryRows.length, displayColumn, recordindex, columnIndex;
            for (var length = 0; length < summaryRowLength; length++) {
                summaryRow = summaryRows[length];
                summaryColumns = summaryRow.summaryColumns;
                summaryColumnsLength = summaryColumns.length;
                record = proxy._footerSummaryRecord[length];
                var prevUpdatedCols = [], emptyDisplayCol;
                for (var columnLength = 0; columnLength < summaryColumnsLength; columnLength++) {
                    var summaryColumn = summaryColumns[columnLength],
                        prefix = summaryColumn.prefix,
                        suffix = summaryColumn.suffix;
                    if (ej.isNullOrUndefined(prefix))
                        prefix = "";
                    if (ej.isNullOrUndefined(suffix))
                        suffix = "";
                    if (args.editType == "rowedit" || args.editType == "celledit")
                        args.columnName = summaryColumn.dataMember;
                    if (!displayColumn)
                        displayColumn = summaryColumn.dataMember;
                    if (summaryColumn.dataMember == args.columnName || args.requestType == "delete"
                        || args.requestType == "filtering" || args.requestType == "addNewRow" || args.requestType == "searching") {
                        displayColumn = summaryColumn.displayColumn;
                        recordindex = proxy._footerSummaryRecord.indexOf(record);
                        columnIndex = proxy.getColumnIndexByField(displayColumn);
                        args.data = record;
                        if (columnIndex != -1) {
                        if (this._frozenColumnsLength > 0) {
                            if (this._frozenColumnsLength > columnIndex)
                                args.rowElement = this._getFooterRows()[0][recordindex];
                            else {
                                args.rowElement = this._getFooterRows()[1][recordindex];
                                columnIndex -= this._frozenColumnsLength;
                            }
                        } else {
                            args.rowElement = this._getFooterRows()[recordindex];
                        }
                        args.cellElement = args.rowElement.childNodes[columnIndex];
                        var footerUpdatedRecords = proxy._spliceSummaryRows(model.updatedRecords),
                        value = proxy._getSummaryValues(summaryColumn, footerUpdatedRecords);
                        var summaryCellValue = prefix + value + suffix;                        
                        emptyDisplayCol = prevUpdatedCols.indexOf(displayColumn) !=-1 ? false : true;
                        if (!emptyDisplayCol) {
                            if ($(args.cellElement).find(".e-summarytitle").length > 0 || $(args.cellElement).find(".e-icon").length > 0) {
                                $(args.cellElement).find(".e-summarycell").append(' ' + summaryCellValue);
                            }
                            else {
                                $(args.cellElement).append(' ' + summaryCellValue);
                            }
                            record[displayColumn] = record[displayColumn] + " " + summaryCellValue;
                        }
                        else {
                            if ($(args.cellElement).find(".e-summarytitle").length != 0 ||
                                    $(args.cellElement).find(".e-icon").length > 0) {
                                var $titleClone = $(args.cellElement).find(".e-summarytitle, .e-icon").clone();
                                $(args.cellElement).empty().html(summaryCellValue).prepend($titleClone);
                            }
                            else
                                $(args.cellElement).empty().html(summaryCellValue);
                            prevUpdatedCols.push(displayColumn);
                            record[displayColumn] = summaryCellValue;
                        }
                    }
                        }
                }
            }
            if (model.allowTextWrap) {
                proxy._updateTotalSummaryHeight();
            }
        },
        //Update summary row after deleted the record.
        _updateAfterDeleteRecord: function (args) {
            var proxy = this, model = proxy.model, summaryRow,
                editedRecord, editedRecordIndex, updatedSummaryRecords = [],
                _pRecords, emptyDisplayCol, prevUpdatedCols,
                deletedRecord = args.data;
            if (deletedRecord.parentItem)
                _pRecords = proxy._getpRecords(deletedRecord, proxy);
            if (ej.isNullOrUndefined(_pRecords))
                return;
            for (var parentLength = 0; parentLength < _pRecords.length; parentLength++) {
                var summaryRowRecords = model.summaryRowRecords,
                    childRecords = _pRecords[parentLength].childRecords;
                if (childRecords.length == 0)
                    continue;
                proxy._getChildRecordsLength(_pRecords[parentLength], model.updatedRecords);
                $.each(summaryRowRecords, function (index, record) {
                    summaryRow = record.summaryRow;
                    if (record.parentItem === _pRecords[parentLength]) {
                        prevUpdatedCols = [];
                        var summaryColumnLength = summaryRow.summaryColumns.length;
                        for (var length = 0; length < summaryColumnLength; length++) {
                            var summaryColumn = summaryRow.summaryColumns[length],
                                displayColumn = summaryColumn.displayColumn,
                            recordindex = model.currentViewData.indexOf(record),
                            columnIndex = proxy.getColumnIndexByField(displayColumn);
                            var prefix = summaryColumn.prefix,
                             suffix = summaryColumn.suffix;
                            if (ej.isNullOrUndefined(prefix))
                                prefix = "";
                            if (ej.isNullOrUndefined(suffix))
                                suffix = "";
                            args.data = record;
                            if (proxy._frozenColumnsLength > 0) {
                                if (proxy._frozenColumnsLength > columnIndex)
                                    args.tr = $(proxy.getRows()[0][recordindex]);
                                else {
                                    args.tr = $(proxy.getRows()[1][recordindex]);
                                    columnIndex -= proxy._frozenColumnsLength;
                                }
                            } else {
                                args.tr = $(proxy.getRows()[recordindex]);
                            }
                            args.tr = $(proxy.getRows()[recordindex]);
                            args.cellElement = args.tr.find(".e-rowcell").eq(columnIndex);
                            var value = proxy._getSummaryValues(summaryColumn, proxy._flatChildRecords);
                            var summaryCellValue = prefix + value + suffix;
                            emptyDisplayCol = prevUpdatedCols.indexOf(displayColumn) != -1 ? false : true;
                            if (!emptyDisplayCol) {
                                $(args.cellElement).append(' ' + summaryCellValue);
                                record[displayColumn] = record[displayColumn] + " " + summaryCellValue;
                            }
                            else {
                                if ($(args.cellElement).find(".e-summarytitle").length != 0) {
                                    var $titleClone = $(args.cellElement).find(".e-summarytitle").clone();
                                    $(args.cellElement).empty().html(summaryCellValue).prepend($titleClone);
                                }
                                else
                                    args.cellElement.empty().html(summaryCellValue);
                                record[displayColumn] = summaryCellValue;
                                prevUpdatedCols.push(displayColumn);
                            }
                        }
                        updatedSummaryRecords.push(record);
                    }
                });
                proxy._flatChildRecords = [];
            }
        },
        //To get parent and grand Parent of one Child record.
        _getpRecords: function (record, proxy) {
            var recordParents = [];
            do {
                record = record.parentItem;
                recordParents.push(record);
            } while (record.parentItem);
            return recordParents;
        },

        //RENDER THE GRIDCONTENT
        _renderGridContent:function(){
            
            var proxy = this,
                doc = document,
                model = proxy.model,
                $tbody = $(doc.createElement('tbody')),
                $div = ej.buildTag("div.e-gridcontent#" + proxy._id + "e-gridcontent", "",
                {                    
                    "height": proxy._viewPortHeight
                }),
                $innderDiv = ej.buildTag('div.e-gridcontainer#' + proxy._id + "e-gridcontainer", "", {}, {}),
                //Insert e-contet div for ejScroller
                $scrolllerContentDiv = ej.buildTag('div', {}, { "width": "auto", "height": "auto" });
                $scrolllerContentDiv.append($innderDiv);
            //CHECK VIRTUALIZATION ENABLED OR NOT
            if (model.enableVirtualization || model.allowPaging) {
                $innderDiv.css({ 'height': proxy._totalHeight });
            }

            if (this._frozenColumnsLength > 0) {
                $innderDiv.html(proxy._renderByFrozenDesign());
                proxy.setGridContentTable($innderDiv.find(".e-table"));

            }
            else {
                var $table = ej.buildTag('table.e-table e-zerospace#' + proxy._id + "e-table", "",
                    { top: "0px", "position": "relative" });
                $table.append(proxy.getHeaderTable().find('colgroup').clone()).append($tbody);
                $innderDiv.html($table);
                proxy.setGridContentTable($table);
            }
            $div.html($scrolllerContentDiv);
            proxy._$gridContent = $div;
            //CHECK DATASOURCE IS DEFINED OR NOT
            if (this.dataSource() === null || this.model.currentViewData.length == 0) {
                if (this._frozenColumnsLength > 0) {
                    var hiddenCol = proxy._getFrozenHiddenCol(),
                        $emptyTd = ej.buildTag('td', model.emptyRecordText, {}, { colSpan: (this._frozenColumns.length - hiddenCol.frozen) });
                    $innderDiv.find("#e-frozencontentdiv" + proxy._id + " .e-table tbody").append($(doc.createElement("tr")).addClass("e-emptyText").height(30).append($emptyTd));
                    $emptyTd = ej.buildTag('td', model.emptyRecordText, { visibility: "hidden" }, { colSpan: (this._unFrozenColumns.length - hiddenCol.moveable) });
                    $innderDiv.find("#e-movablecontentdiv" + proxy._id + " .e-table tbody").append($(doc.createElement("tr")).addClass("e-emptyText").height(30).append($emptyTd));
                } else {
                    var $emptyTd = ej.buildTag('td', model.emptyRecordText, {}, { colSpan: (proxy.model.columns.length - proxy._hiddenColumns.length) });
                    $tbody.append($(doc.createElement("tr")).addClass("e-emptyText").height(30).append($emptyTd));
                    $innderDiv.css('height', model.rowHeight);
                }
            } else
            {
                proxy.renderRecords();
            }

            if (!model.isFromGantt) {
                $div.css({
                    "border-bottom-style": "solid",
                    "border-bottom-width": "1px",
                    "border-left-style": "solid",
                    "border-left-width": "1px",
                    "border-right-style": "solid",
                    "border-right-width": "1px",
                    "width": "auto",
                    "height": "auto",
                    "cursor": "default"
                });
            } else {
                $div.css({
                    "border-left-style": "solid",
                    "border-left-width": "1px"
                });
            }
            return $div;

        },

        _getFrozenHiddenCol: function () {
            var proxy = this, columns = proxy.model.columns, hiddenCol = {}; hiddenCol.frozen = 0; hiddenCol.moveable = 0;
            if (proxy._hiddenColumns.length) {
                for (var colIndex = 0; colIndex < columns.length; colIndex++) {
                    if (!columns[colIndex].visible && columns[colIndex].isFrozen)
                        hiddenCol.frozen = hiddenCol.frozen + 1;
                    else if (!columns[colIndex].visible && !columns[colIndex].isFrozen)
                        hiddenCol.moveable = hiddenCol.moveable + 1;
                }
            }
            return hiddenCol;
        },

        //AFTER INITIALIZATION END RENDERING
        _initialEndRendering: function () {

            var proxy = this, model = proxy.model, currentSelectingRecord,
                expandedRecords = proxy.getExpandedRecords(model.updatedRecords),
                index = proxy.selectedRowIndex(), cellIndexes = proxy.selectedCellIndexes();

            if (model.allowSelection) {
                if (model.selectionSettings.selectionMode == "row" && index != -1 && !model.isFromGantt) {
                if (model.showSummaryRow) {
                    var recordsWithOutSummary = proxy._spliceSummaryRows(model.updatedRecords),
                        currentSelectedRecord = recordsWithOutSummary[index];
                    index = model.updatedRecords.indexOf(currentSelectedRecord);                    
                }
                if (!proxy._rowSelectingEventTrigger(this._previousIndex, index)) {
                    proxy.selectRows(index);
                    proxy._cancelSaveTools();
                    proxy._rowSelectedEventTrigger(index);

                }
            }
                if (model.selectionSettings.selectionMode == "cell" && cellIndexes.length > 0) {
                    proxy.selectedRowIndex(-1);
                    proxy.selectCells(cellIndexes);
                    proxy._cancelSaveTools();
                }
                }

            /* treegrid rendering completed here at load time*/
            proxy._isRendered = true;
            this._trigger("dataBound", {});
            proxy._trigger("refresh");
            proxy._eventBindings();
            proxy._hideCollapsedDetailsRows();
            proxy.getScrollElement().ejScroller("refresh");
            proxy._updateScrollCss();
        },

        //#endregion
        
        //#region TEMPLATE

        //ADD CELLEDITING TEMPLATE
        _addCellEditTemplate: function () {

            var proxy = this,
                model = proxy.model,
                columns = model.columns,
                columnCount = 0,
                $outerDiv = ej.buildTag('div', "", { display: 'none' }, { id: proxy._id + "_CellEditTemplate" }),
                $innerDiv, columnField;

            for (columnCount = 0; columnCount < columns.length; columnCount++) {
                if (columns[columnCount]) {
                    columnField = proxy._getFieldValue(columns[columnCount].field, columnCount);
                    if (proxy._isCommandColumn(columns[columnCount])) {
                        $innerDiv = ej.buildTag('td.e-rowcell e-unboundcell', "", {}, { id: columnField + "_CellEdit" });
                        var column = columns[columnCount];
                        $("#" + this._id + columnCount + "_UnboundTemplate").remove();
                        var divElement = this._createCommandElement(column, columnCount);
                        $innerDiv.addClass("e-unboundcell").html("{{:~_" + this._id + "UnboundTemplate('" + divElement.id + "')}}");
                        }
                    else {            
                        $innerDiv = ej.buildTag('div', "", {}, { id: columnField + "_CellEdit" });
                        ej.TreeGrid._initCellEditType(proxy, $innerDiv, proxy._id, columnCount);
                    }
                    $outerDiv.append($innerDiv);
                }
            }

            if ($outerDiv.children().length) {
                proxy._cellEditTemplate = $outerDiv;
            }

        },

        _getState: function () {
            if (this.data.parentItem)
                return false;
            else
                return true;
        },

        _getCellIndex: function (array, findItem) {
            var proxy = this, cellIndexArray = [];
            for (var i = 0; i < array.length; i++) {
                cellIndexArray[i] = array[i][findItem];
            }
            return cellIndexArray;
        },
        _getSelectedCellClass: function (data, columnCount) {
            var proxy = this, model = proxy.model,
                columnIndex = parseInt(columnCount),
                selectedCellDetails = proxy._selectedCellDetails;
            if (model.selectionSettings.selectionMode == "cell" && selectedCellDetails.length > 0) {
                    proxy._getSelectedCellsinARow(data.index, selectedCellDetails);
                if (proxy._selectedCellsinARow.length > 0) {
                    if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9)
                        var currentSelectingCellIndex = proxy._getCellIndex(proxy._selectedCellsinARow,"cellIndex").indexOf(columnIndex);
                    else
                        var currentSelectingCellIndex = proxy._selectedCellsinARow.map(function (e) { return e.cellIndex }).indexOf(columnIndex);                    
                    if (currentSelectingCellIndex != -1) {
                        if (proxy._selectedCellsinARow[currentSelectingCellIndex].cellIndex == columnIndex)
                            return "e-selectingcell";
                    }
                }
            }
            return "";
        },

        //Return true if batch edited data
        _getBatchEditState: function (data, columnName) {
            var proxy = this, model = proxy.model;
            if (proxy._checkboxSelection && columnName == "checkboxState") {
                return false;
            }
            else if (data.isBatchAdd || (data.batchEditedFields && data.batchEditedFields[columnName] != null)) {
                return true;
            }
            else false;
        },
        _getSelectedCellsinARow: function (recordIndex, selectedCellDetails) {
            var proxy = this;
            proxy._selectedCellsinARow = [];
            selectedCellDetails.forEach(function (selectedcell) {
                if (selectedcell.data.index == recordIndex)
                    proxy._selectedCellsinARow.push(selectedcell);
            });
            proxy._currentRecordIndex = recordIndex;
        },
        _getrowName: function () {
            var rowClass = "gridrowIndex",
                proxy = this;
            rowClass += proxy.data.index.toString() + "level" + proxy.data.level.toString();
            return rowClass;
        },
        /* get details row col span with showDetailROwInfoColumn API value */
        _getDetailsColSpan:function(isFrozenTable)
        {
            var model = this.model, visibleColumns = [];
            if (this._frozenColumnsLength > 0) {
                if (!isFrozenTable) {
                    visibleColumns = this._unFrozenColumns.filter(function (value) {
                        return value.visible !== false;
                    });
                    return visibleColumns.length;
                } else {
                    visibleColumns = this._frozenColumns.filter(function (value) {
                        return value.visible !== false;
                    });
                    return visibleColumns.length;
                }
            }
            return model.showDetailsRowInfoColumn ? this._visibleColumns.length + 1 : this._visibleColumns.length;
        },
        /* expand status for details rows */
        _getDetailsExpandStatus: function (data) {
            var proxy = this;
            if (proxy.getExpandStatus(data) && data.isDetailsExpanded) {
                return true;
            } else
            {
                return false;
            }
        },
        _createDetailsRowTemplate: function (isFrozenTable) {
            var proxy = this,
                model = this.model,
                helpers = {};

            helpers["_" + proxy._id + "getDetailsColSpan"] = $.proxy(proxy._getDetailsColSpan, proxy);
            helpers["_" + proxy._id + "getDetailsExpandStatus"] = $.proxy(proxy._getDetailsExpandStatus, proxy);
            helpers["_" + proxy._id + "getExpandStatus"] = $.proxy(proxy.getExpandStatus, proxy);
            
            $.views.helpers(helpers);

            var tr = '{{if !isSummaryRow && !footerSummaryRowRecord}}' + "<tr class='e-detailsrow e-treegridrows detailsrow{{:~_" + proxy._id + "rowClassName()}} {{if isDetailsExpanded}}" +
                      "e-detailsrowexpanded{{else}}e-detailsrowcollapsed{{/if}}{{if !~_" + proxy._id + "getExpandStatus(#data) && isDetailsExpanded}} e-collapsedrowexpandeddetailsrow{{/if}}' " +
                      "style='{{if ~_" + proxy._id + "getDetailsExpandStatus(#data)}}display:table-row;{{else}}visibility:none;{{/if}}height:" + model.detailsRowHeight + "px;'>" +
                      "<td class='e-detailsrowcell' colspan='{{:~_" + proxy._id + "getDetailsColSpan(" + isFrozenTable + ")}}'>" +
                      "<div class='e-detailscellwrapper' style='height:" + (model.detailsRowHeight - 1) + "px;'>";

            var templateString = "";
            if (model.detailsTemplate && model.detailsTemplate.length > 0) {

                if (document.getElementById(model.detailsTemplate))
                {
                    templateString = "#" + model.detailsTemplate;
                } else
                {
                    templateString = model.detailsTemplate;
                }
            }
            if (!isFrozenTable) {
                $("#treeGridDetailsRowTemplateElement" + proxy._id).remove();
                var scriptElement = this._createDetailRowTemplateElement(templateString);
                tr += "{{:~_" + proxy._id + "treeGridTemplating('" + scriptElement.id + "')}}";
            }
            tr += "</div></td></tr>";
            tr += "{{/if}}";
            if (!isFrozenTable) {
                var templates = {};
                templates[proxy._id + "_detailRowTemplate"] = tr;
                $.templates(templates);
            }
            return tr;

        },

        _SelectState:function(args){
            var proxy = this,
                model = this.model;
            if (model.allowSelection)
                return true;
            else
                return false;
        },
        _unboundClickHandler: function (e) {
            var proxy = this,
              model = this.model, form, isAddRow,
            $target = $(e.target).closest("button");
            if (!($target.hasClass("e-deletebutton") || $target.hasClass("e-editbutton") || $target.hasClass("e-savebutton") || $target.hasClass("e-cancelbutton"))) {
                return
            }
            if ($target.hasClass("e-button") && ($target.hasClass("e-disable") || $target.prop("disabled"))) return;
            if ($(e.target).hasClass("e-unboundcelldiv"))
                return;

            if (proxy.model.editSettings.editMode == "dialogEditing") {
                form = $("#" + proxy._id + "EditFormDialog");
            } else {
                form = $("#" + proxy._id + "EditForm");
            }
            var index = ($target.hasClass("e-savebutton") || $target.hasClass("e-cancelbutton")) ? proxy.getIndexByRow(form.closest("tr")) : proxy.getIndexByRow($target.closest("tr"));
            proxy.selectRows(proxy.getUpdatedRecords().indexOf(model.currentViewData[index]));
            if ($target.hasClass("e-editbutton") && model.editSettings.allowEditing) {
                if (proxy._isRowEdit) {
                    proxy.cancelEdit();
                }
                if (model.editSettings.editMode != "dialogEditing") {
                    var columnIndex = proxy.getCellIndex(e);
                    proxy._editRow(proxy.getUpdatedRecords().indexOf(model.currentViewData[index]), null, columnIndex);
                }
                else {
                    proxy.showEditDialog(proxy.getUpdatedRecords().indexOf(model.currentViewData[index]));
                }
            } else if ($target.hasClass("e-deletebutton")) {
                proxy.deleteRow(null, true);
            }
            else if ($target.hasClass("e-savebutton")) {
                    proxy.saveRow(); 
            }
            else if ($target.hasClass("e-cancelbutton")) {
                proxy.cancelEdit();
            }
        },
        _createCommandElement: function (column, count) {
            var divElement = document.createElement("div");
            divElement.id = this._id + count + "_UnboundTemplate";
            var $div = ej.buildTag("div.e-unboundcelldiv"), commands = column.commands;
            for (var unbounType = 0; unbounType < commands.length; unbounType++) {
                if (!ej.isNullOrUndefined(commands[unbounType].type)) {
                    var $button = ej.buildTag("button.e-" + commands[unbounType].type.replace(/\s+/g, "") + "button", "", {}, { type: "button" });
                    $button.val(commands[unbounType].type);
                    $div.append($button);
                }
            }
            $("body").append($(divElement).html($div).hide());
            return divElement;
        },
        _refreshUnboundTemplate: function ($target) {
            var proxy = this,
                model = proxy.model;
            if (proxy._commandColumnLength > 0) {
                for (var column = 0; column < model.columns.length; column++) {
                    if (proxy._isCommandColumn(model.columns[column])) {
                        var $unboundDivs = $target.find(".e-unboundcell").find(".e-unboundcelldiv");
                        var commands = $.extend(true, [], model.columns[column].commands);
                        for (var j = 0; j < commands.length; j++) {
                            if (ej.isNullOrUndefined(commands[j].buttonOptions))
                                commands[j].buttonOptions = {};
                            commands[j].buttonOptions.width = ej.isNullOrUndefined(commands[j].buttonOptions.width) ? "52" : commands[j].buttonOptions.width;
                            commands[j].buttonOptions.height = ej.isNullOrUndefined(commands[j].buttonOptions.height) ? "22" : commands[j].buttonOptions.height;
                            commands[j].buttonOptions.showRoundedCorner = ej.isNullOrUndefined(commands[j].buttonOptions.showRoundedCorner) ? true : commands[j].buttonOptions.showRoundedCorner;
                            commands[j].buttonOptions.size = ej.isNullOrUndefined(commands[j].buttonOptions.size) ? "small" : commands[j].buttonOptions.size;
                            if (!ej.isNullOrUndefined(commands[j].type)) {
                                var $buttons = $unboundDivs.find(".e-" + commands[j].type.replace(/\s+/g, "") + "button");

                                if ($target.find(".e-unboundeditedcell").length > 0) {
                                    if (commands[j].type == "save" || commands[j].type == "cancel")
                                        $buttons.show();
                                    else {
                                        $buttons.hasClass("e-deletebutton") && $buttons.hide();
                                        $buttons.hasClass("e-editbutton") && $buttons.hide();
                                    }
                                } else {
                                    if (commands[j].type == "save" || commands[j].type == "cancel")
                                        $buttons.hide();
                                    else {
                                        $buttons.hasClass("e-deletebutton") && $buttons.show();
                                        $buttons.hasClass("e-editbutton") && $buttons.show();
                                    }
                                }
                                $buttons.ejButton(commands[j].buttonOptions);
                            }
                        }
                    } else
                        continue;
                }
            }
        },
        _unboundTemplateRendering: function (unboundTemplateId) {
            return $("#" + unboundTemplateId).html();
        },
        _collapsibleSummary: function (columnCount, data) {
            var proxy = this,
                model = proxy.model,
                columns = model.columns;
            if (model.showTotalSummary && model.collapsibleTotalSummary && proxy._summaryColumnIndex == parseInt(columnCount) && data.isFirstFooterSummary) {
                return true;
            }
        },
        _summaryIndendCell: function (columnCount) {
            var proxy = this,
               model = proxy.model,
               columns = model.columns;
            if (model.showTotalSummary && model.collapsibleTotalSummary && proxy._summaryColumnIndex == parseInt(columnCount)) {
                if (this._summaryColumnIndex != 0) {
                    return true;
                }
                else if (this._summaryColumnIndex == 0) {
                    return false;
                }
            }
        },
        _getsummaryExpandStatus: function (data) {
            var proxy = this;
            if (!ej.isNullOrUndefined(data.summaryExpanded) && !data.summaryExpanded) proxy._summaryExpanded = false;
            if (this.model.collapsibleTotalSummary && !proxy._summaryExpanded) {
                if (data.isFirstFooterSummary)
                    return 'table-row';
                else
                    return 'none';
            }
            else
                return 'table-row';
        },
         
        //ADD TEMPLATE FOR RENDERING GRIDCONTENT
        _addInitTemplate:function(){

            var proxy = this,
                model = proxy.model,
                columns = model.columns,
                columnCount = 0,
                length = columns.length,
                columnName,
                column,
                tdCell,
                summaryTitle, isTextWrap = false,
                helpers = {};
            proxy._commandColumnLength = 0;

            //CHECK THE COLUMNS ARRAY CONTAIN THE COLUMN OBJECT
            if (columns.length === 0) {
                return false;
            }
            if (this._frozenColumnsLength > 0) {
                this.addFrozenTemplate();
                if (model.showTotalSummary)
                    this.addFrozenSummaryTemplate();
            }
            helpers["_" + proxy._id + "rowClassName"] = ej.TreeGrid._getrowClassName;
            helpers["_" + proxy._id + "SummaryRowtdClassName"] = ej.TreeGrid._getSummaryRowtdClassName;
            helpers["_" + proxy._id + "summaryIndendCell"] = $.proxy(proxy._summaryIndendCell, proxy);
            helpers["_" + proxy._id + "collapsibleSummary"] = $.proxy(proxy._collapsibleSummary, proxy);
            helpers["_" + proxy._id + "isSelectedCell"] = $.proxy(proxy._getSelectedCellClass, proxy);
            helpers["_" + proxy._id + "batchEditState"] = $.proxy(proxy._getBatchEditState, proxy);
            helpers["_" + proxy._id + "summaryTitle"] = proxy._getSummaryTitle;
            // helpers for drag row indicator icon class
            helpers["_" + proxy._id + "rowName"] = proxy._getrowName;
            helpers["_" + proxy._id + "getState"] = proxy._getState;
            helpers["_" + proxy._id + "SelectState"] = $.proxy(proxy._SelectState, proxy);
            helpers["_" + proxy._id + "summaryExpandStatus"] = $.proxy(proxy._getsummaryExpandStatus, proxy);
            helpers["_" + proxy._id + "expandStatus"] = $.proxy(proxy._getExpandStatusRecord, proxy);         
            helpers["_" + proxy._id + "cellValue"] = $.proxy(proxy._getCellValue, proxy);
            helpers["_" + proxy._id + "TemplateCellValue"] = $.proxy(proxy._getTemplateCellValue, proxy);
            helpers["_" + proxy._id + "isTreeColumnIndex"] = $.proxy(proxy._isTreeColumnIndex, proxy);
            helpers["_" + proxy._id + "getIndentWidth"] = $.proxy(proxy._getIndentWidth, proxy);
            helpers["_" + proxy._id + "checkColumn"] = $.proxy(proxy._getCellColumn, proxy);
            helpers["_" + proxy._id + "formatting"] = $.proxy(proxy.formatting, proxy);
            helpers["_" + proxy._id + "treeGridTemplating"] = ej.proxy(proxy._gridTemplate, null, proxy);
            helpers["_" + proxy._id + "getCheckboxState"] = $.proxy(proxy._getCheckboxState, proxy);
            helpers["_" + proxy._id + "UnboundTemplate"] = $.proxy(proxy._unboundTemplateRendering, proxy);
            helpers["_" + proxy._id + "isTrimCell"] = $.proxy(proxy._checkIsTrimCell, proxy);
            helpers["_" + proxy._id + "getRowHeight"] = $.proxy(proxy._getTemplateRowHeight, proxy);

            $.views.helpers(helpers);

            if (model.allowTextWrap)
                isTextWrap = proxy.model.allowTextWrap;

            if (model.parseRowTemplate && (model.rowTemplateID.length > 0 || model.altRowTemplateID.length > 0)) {
                
                var altRowTemplateElement = ej.buildTag("tbody", "", {}, {});
                var rowTemplateElement = ej.buildTag("tbody", "", {}, {});
                var rowTemplateHTML = "";
                var altRowTemplateHTML = "";

                var altRowTemplateScript = model.altRowTemplateID.length > 0 ? $("#" + model.altRowTemplateID): $("#" + model.rowTemplateID);
                var rowTemplateScript = model.rowTemplateID.length > 0 ? $("#" + model.rowTemplateID): $("#" + model.altRowTemplateID);
                var altRowTemplate = altRowTemplateScript[0].innerHTML;
                var rowTemplate = rowTemplateScript[0].innerHTML;

                $(altRowTemplateElement[0]).html(altRowTemplate);
                $(rowTemplateElement[0]).html(rowTemplate);

                if (rowTemplateElement[0].childNodes.length > 0) {
                    for (var i = 0; i < rowTemplateElement[0].childNodes.length; i++) {
                        if (rowTemplateElement[0].childNodes[i].nodeName == 'TR') {

                            rowTemplateElement[0].className = rowTemplateElement[0].childNodes[i].className;
                            rowTemplateElement[0].style.cssText = rowTemplateElement[0].childNodes[i].style.cssText;

                            if (rowTemplateElement[0].childNodes[i].childNodes.length > 0) {
                                var tdCount = 0;
                                for (var j = 0; j < rowTemplateElement[0].childNodes[i].childNodes.length; j++) {

                                    var childNode = rowTemplateElement[0].childNodes[i].childNodes[j];

                                    if (childNode.nodeName == 'TD') {
                                        var innerHtml = childNode.innerHTML,
                                            templateId = proxy._id + "RowTemplateElement" + tdCount;

                                        $("#" + templateId).remove();
                                        var scriptElement = this._createRowTemplateElement(innerHtml, templateId, rowTemplateScript[0].type);
                                        childNode.innerHTML = "{{:~_" + proxy._id + "treeGridTemplating('" + scriptElement.id + "')}}";
                                        childNode.className += " e-rowcell e-templatecell";


                                        if (columns[tdCount]) {
                                            column = columns[tdCount];
                                            columnName = column.field;
                                            var visible = column.visible == undefined ? true : column.visible;
                                            //To create a seperate div in summary cell to display a summary title.
                                            var summaryTitlediv = "";
                                            if (column.headerText == proxy._visibleColumns[0]) {
                                                summaryTitlediv = '{{if isSummaryRow || footerSummaryRowRecord}}' + "<div " +
                                                    "class='e-summarytitle{{if isLastSummary}} e-lastsummaryrow{{/if}}{{if ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}} {{if " + isTextWrap + "}} e-textwrapcell{{/if}}'" + "style='float:left;display:block;'>" + "{{:~_" + proxy._id + "summaryTitle()}}"
                                                     + "</div>" + '{{/if}}';
                                            }

                                            if (tdCount == model.treeColumnIndex) {
                                                var indentDiv = "<div class='e-inner-treecolumn-container' style='min-height:20px;' data-unselectable='on'>" +
                                                "{{if hasChildRecords && hasFilteredChildRecords}}" +
                                                "<div class='e-dragintend'" +
                                                "{{if filterLevel > -1}}" +
                                                "style='height:1px; float:left; width:{{:((filterLevel)*" + proxy.treeIndentLevelWidth + ")}}" + "px; display:inline-block;'>" +
                                                "{{else}}" +
                                                "style='height:1px; float:left; width:{{:((level)*" + proxy.treeIndentLevelWidth + ")}}" + "px; display:inline-block;'>" +
                                                "{{/if}}"+
                                                 //indicator icons included for drag and drop
                                                "{{if !~_" + proxy._id + "getState() || !hasChildRecords }}" +
                                                "<div class={{:~_" + proxy._id + "rowName()}} >" +
                                                "<span class='e-aboveIcon e-icon'  style='position:relative;float:right;display:none;'></span>" +
                                                "<span class='e-belowIcon e-icon' style='position:relative;float:right;display:none;'></span>" +
                                                "<span class='e-childIcon e-icon' style='position:relative;float:right;display:none;'></span>" +
                                                "<span class='e-cancelIcon e-icon' style='position:relative;float:right;display:none;'></span>" +
                                                "</div>" +
                                                "{{/if}}" +
                                                "</div>" +
                                                "{{else !hasChildRecords || (!hasFilteredChildRecords && hasChildRecords)}}" +
                                                "<div " +
                                                "class='e-dragintend'" +
                                                "{{if filterLevel > -1}}" +
                                                "style='height:1px; float:left; width:{{:(filterLevel*" + proxy.treeIndentLevelWidth + ")+24}}" + "px; display:inline-block;'>" +
                                                "{{else}}" +
                                                "style='height:1px; float:left; width:{{:(level*" + proxy.treeIndentLevelWidth + ")+24}}" + "px; display:inline-block;'>" +
                                                "{{/if}}" +
                                                //indicator icons included for drag and drop
                                                "{{if !~_" + proxy._id + "getState() || !hasChildRecords || !hasFilteredChildRecords }}" +
                                                "<div class={{:~_" + proxy._id + "rowName()}} >" +
                                                "<span class='e-aboveIcon iconMargin e-icon'  style='position:relative;float:right;display:none;'></span>" +
                                                "<span class='e-belowIcon iconMargin e-icon' style='float:right;display:none;'></span>" +
                                                "<span class='e-childIcon iconMargin e-icon' style='float:right;display:none;'></span>" +
                                                "<span class='e-cancelIcon iconMargin e-icon' style='float:right;display:none;'></span>" +
                                                "</div>" +
                                                "{{/if}}" +
                                                "</div>" +
                                                "{{/if}}" +
                                                "{{if ~_" + proxy._id + "getState() && hasChildRecords && hasFilteredChildRecords}}" +
                                                "<div class='e-intendparent'>" +
                                                "<div class={{:~_" + proxy._id + "rowName()}} >" +
                                                "<span class='e-aboveIcon e-icon'  style='position:relative;float:left;display:none;'></span>" +
                                                "<span class='e-belowIcon e-icon' style='float:left;display:none;'></span>" +
                                                "<span class='e-childIcon e-icon' style='float:left;display:none;'></span>" +
                                                "<span class='e-cancelIcon e-icon' style='float:left;display:none;'></span>" +
                                                "</div>" +
                                                "</div>" +
                                                "{{/if}}" +
                                                "<div class='{{if expanded && hasFilteredChildRecords}}e-treegridexpand e-icon{{else hasChildRecords && hasFilteredChildRecords}}e-treegridcollapse e-icon{{/if}}' " +
                                                "style='float:left;display:inline-block;font-size:10px;'>" +
                                                "</div>" +
                                                "<div class='e-cell{{if " + (column.showCheckbox && (this.model.selectionSettings.selectionType == ej.TreeGrid.SelectionType.Checkbox)) + "}} e-treecheckboxcolumn{{/if}}{{if ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}}{{if " + isTextWrap + "}} e-textwrapcell{{/if}}' style='overflow: hidden;'>";

                                                childNode.style.cssText = "padding-left:0px;";

                                                rowTemplateHTML += "<td class='" + childNode.className + "{{if isSummaryRow || footerSummaryRowRecord}} e-summaryrowcell{{/if}}{{if isSelected && ~_" + proxy._id + "SelectState()}} e-selectionbackground{{/if}} {{:~_" + proxy._id + "isSelectedCell(#data,'" + columnCount + "')}} {{if " + !visible + "}} e-hide{{/if}}{{if isLastSummary}} e-lastsummaryrow{{/if}}{{if ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}}{{if " + isTextWrap + "}} e-textwrapcell{{/if}}{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + tdCount + ")}} e-summaryintend{{/if}}' style='{{if !isSummaryRow && !footerSummaryRowRecord}}"
                                                    + childNode.style.cssText + "'>" + indentDiv + "{{else}}'>{{/if}}" +
                                                     "{{if footerSummaryRowRecord && ~_" + proxy._id + "collapsibleSummary('" + tdCount + "',#data)}}" +
                                                    "<div class= '{{if summaryExpanded}} e-summarytreegridexpand e-icon" +
                                                    "{{else}} e-summarytreegridcollapse e-icon {{/if}}'" +
                                                    "style='float:left;display:inline-block; font-size:10px;'></div>" +
                                                    "{{/if}}" +
                                                    '{{if !isSummaryRow && !footerSummaryRowRecord}}' +
                                                     childNode.innerHTML +
                                                    '{{else}}' + summaryTitlediv + '{{/if}}' +
                                                    "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + tdCount + ")}}" +
                                                    "<div class='e-summarycell'" +
                                                    "style='overflow: hidden;padding-left:25px;'>" +
                                                    "{{/if}}";
                                                     rowTemplateHTML += '{{if isSummaryRow || footerSummaryRowRecord}}' + "{{:~_" + proxy._id + "TemplateCellValue(#data,'" + columnName + "')}}" + '{{/if}}';
                                                     rowTemplateHTML += "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + tdCount + ")}}" +
                                                     "</div>" +
                                                     "{{/if}}" +
                                                     "</div></div></td>";
                                            }
                                            else {
                                                rowTemplateHTML += "<td class='" + childNode.className + "{{if isSummaryRow || footerSummaryRowRecord}} e-summaryrowcell{{/if}}{{if isSelected && ~_" + proxy._id + "SelectState()}} e-selectionbackground{{/if}} {{:~_" + proxy._id + "isSelectedCell(#data,'" + columnCount + "')}} {{if " + !visible + "}} e-hide{{/if}}{{if isLastSummary}} e-lastsummaryrow{{/if}}{{if ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}}{{if " + isTextWrap + "}} e-textwrapcell{{/if}}{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + tdCount + ")}} e-summaryintend{{/if}}' style='{{if !isSummaryRow && !footerSummaryRowRecord}}"
                                                    + childNode.style.cssText + "{{/if}}'>" +
                                                    "{{if footerSummaryRowRecord && ~_" + proxy._id + "collapsibleSummary('" + tdCount + "',#data)}}" +
                                                    "<div  " +
                                                    "class= '{{if summaryExpanded}} e-summarytreegridexpand e-icon" +
                                                    "{{else}} e-summarytreegridcollapse e-icon {{/if}}'" +
                                                    "style='float:left;display:inline-block; font-size:10px;'></div>" +
                                                    "{{/if}}" +
                                                    '{{if !isSummaryRow && !footerSummaryRowRecord}}' +
                                                     childNode.innerHTML +
                                                    '{{else}}' + summaryTitlediv + '{{/if}}'+
                                                    "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + tdCount + ")}}" +
                                                    "<div class='e-summarycell'" +
                                                    "style='overflow: hidden;padding-left:25px;'>" +
                                                    "{{/if}}";
                                                rowTemplateHTML += '{{if isSummaryRow || footerSummaryRowRecord}}' + "{{:~_" + proxy._id + "TemplateCellValue(#data,'" + columnName + "')}}" + '{{/if}}';
                                                rowTemplateHTML += "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + tdCount + ")}}" +
                                                "</div>" +
                                                "{{/if}}" +
                                                "</td>";
                                            }
                                            if (this._frozenColumnsLength > 0 && this._frozenColumnsLength == tdCount + 1) {
                                                var frozenRowTemplate = "";
                                                frozenRowTemplate += rowTemplateHTML;
                                                frozenRowTemplate += "</tr>";
                                                rowTemplateHTML = "";
                                            }
                                            tdCount++;

                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if (altRowTemplateElement[0].childNodes.length > 0) {
                    for (var i = 0; i < altRowTemplateElement[0].childNodes.length; i++) {
                        if (altRowTemplateElement[0].childNodes[i].nodeName == 'TR') {
                            altRowTemplateElement[0].className = altRowTemplateElement[0].childNodes[i].className;
                            altRowTemplateElement[0].style.cssText = altRowTemplateElement[0].childNodes[i].style.cssText;
                            var tdCount = 0;

                            for (var j = 0; j < altRowTemplateElement[0].childNodes[i].childNodes.length; j++) {

                                var childNode = altRowTemplateElement[0].childNodes[i].childNodes[j];

                                if (childNode.nodeName == 'TD') {

                                    var innerHtml = childNode.innerHTML,
                                        templateId = proxy._id + "AltRowTemplateElement" + tdCount;
                                    $("#" + templateId).remove();
                                    var scriptElement = this._createRowTemplateElement(innerHtml, templateId, altRowTemplateScript[0].type);
                                    childNode.innerHTML = "{{:~_" + proxy._id + "treeGridTemplating('" + scriptElement.id + "')}}";

                                    childNode.className += " e-rowcell e-templatecell";
                                    if (columns[tdCount]) {
                                        column = columns[tdCount];
                                        columnName = column.field;
                                        var visible = column.visible == undefined ? true : column.visible;
                                        //To create a seperate div in summary cell to display a summary title.
                                        var summaryTitlediv = "";
                                        if (column.headerText == proxy._visibleColumns[0]) {
                                            summaryTitlediv = '{{if isSummaryRow || footerSummaryRowRecord}}' + "<div " +
                                                "class='e-summarytitle{{if isLastSummary}} e-lastsummaryrow{{/if}}{{if ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}} {{if " + isTextWrap + "}} e-textwrapcell{{/if}}'" + "style='float:left;display:block;'>" + "{{:~_" + proxy._id + "summaryTitle()}}"
                                                 + "</div>" + '{{/if}}';
                                        }
                                        if (tdCount == model.treeColumnIndex) {
                                            var indentDiv = "<div class='e-inner-treecolumn-container' style='min-height:20px;'>" +
                                            "{{if hasChildRecords && hasFilteredChildRecords}}" +
                                            "{{if filterLevel > -1}}" +
                                            "<div class='e-dragintend' style='height:1px; float:left;width:{{:((filterLevel)*" + proxy.treeIndentLevelWidth + ")}}" + "px; display:inline-block;'>" +
                                            "{{else}}" +
                                            "<div class='e-dragintend' style='height:1px; float:left;width:{{:((level)*" + proxy.treeIndentLevelWidth + ")}}" + "px; display:inline-block;'>" +
                                            "{{/if}}" +
                                            //indicator icons included for drag and drop
                                            "{{if !~_" + proxy._id + "getState() || !hasChildRecords }}" +
                                            "<div class={{:~_" + proxy._id + "rowName()}} >" +
                                            "<span class='e-aboveIcon e-icon'  style='position:relative;float:right;display:none;'></span>" +
                                            "<span class='e-belowIcon e-icon' style='position:relative;float:right;display:none;'></span>" +
                                            "<span class='e-childIcon e-icon' style='position:relative;float:right;display:none;'></span>" +
                                            "<span class='e-cancelIcon e-icon' style='position:relative;float:right;display:none;'></span>" +
                                            "</div>" +
                                            "{{/if}}" +
                                            "</div>" +
                                            "{{else !hasChildRecords || (!hasFilteredChildRecords && hasChildRecords)}}" +
                                                "<div " +
                                                "class='e-dragintend'" +
                                                "{{if filterLevel > -1}}" +
                                                "style='height:1px; float:left; width:{{:(filterLevel*" + proxy.treeIndentLevelWidth + ")+24}}" + "px; display:inline-block;'>" +
                                                "{{else}}" +
                                                "style='height:1px; float:left; width:{{:(level*" + proxy.treeIndentLevelWidth + ")+24}}" + "px; display:inline-block;'>" +
                                                "{{/if}}" +
                                                //indicator icons included for drag and drop
                                                "{{if !~_" + proxy._id + "getState() || !hasChildRecords || !hasFilteredChildRecords}}" +
                                                "<div class={{:~_" + proxy._id + "rowName()}} >" +
                                                "<span class='e-aboveIcon iconMargin e-icon'  style='position:relative;float:right;display:none;'></span>" +
                                                "<span class='e-belowIcon iconMargin e-icon' style='float:right;display:none;'></span>" +
                                                "<span class='e-childIcon iconMargin e-icon' style='float:right;display:none;'></span>" +
                                                "<span class='e-cancelIcon iconMargin e-icon' style='float:right;display:none;'></span>" +
                                                "</div>" +
                                                "{{/if}}" +
                                                "</div>" +
                                                "{{/if}}" +
                                            "{{if ~_" + proxy._id + "getState() && hasChildRecords && hasFilteredChildRecords}}" +
                                            "<div class='e-intendparent'>" +
                                            "<div class={{:~_" + proxy._id + "rowName()}} >" +
                                            "<span class='e-aboveIcon e-icon'  style='position:relative;float:left;display:none;'></span>" +
                                            "<span class='e-belowIcon e-icon' style='float:left;display:none;'></span>" +
                                            "<span class='e-childIcon e-icon' style='float:left;display:none;'></span>" +
                                            "<span class='e-cancelIcon e-icon' style='float:left;display:none;'></span>" +
                                            "</div>" +
                                            "</div>" +
                                            "{{/if}}" +
                                            "<div class='{{if expanded&& hasFilteredChildRecords}}e-treegridexpand e-icon{{else hasChildRecords && hasFilteredChildRecords}}e-treegridcollapse e-icon{{/if}}' " +
                                            "style='float:left;display:inline-block;font-size:10px;'></div>" +
                                            "<div class='e-cell{{if " + column.showCheckbox + "}} e-treecheckboxcolumn{{/if}}{{if  ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}} {{if " + isTextWrap + "}} e-textwrapcell{{/if}}' style='overflow:hidden'>";

                                            childNode.style.cssText = "padding-left:0px;";

                                            altRowTemplateHTML += "<td class='" + childNode.className + "{{if isSummaryRow || footerSummaryRowRecord}} e-summaryrowcell{{/if}}{{if isSelected && ~_" + proxy._id + "SelectState()}} e-selectionbackground{{/if}} {{:~_" + proxy._id + "isSelectedCell(#data,'" + columnCount + "')}} {{if " + !visible + "}} e-hide{{/if}}{{if isLastSummary}} e-lastsummaryrow{{/if}}{{if ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}}{{if " + isTextWrap + "}} e-textwrapcell{{/if}}{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + tdCount + ")}} e-summaryintend{{/if}}' style='{{if !isSummaryRow && !footerSummaryRowRecord}}"
                                                 + childNode.style.cssText + "'>" + indentDiv + "{{else}}'>{{/if}}" +
                                                    "{{if footerSummaryRowRecord && ~_" + proxy._id + "collapsibleSummary('" + tdCount + "',#data)}}" +
                                                    "<div  " +
                                                    "class= '{{if summaryExpanded}} e-summarytreegridexpand e-icon" +
                                                    "{{else}} e-summarytreegridcollapse e-icon {{/if}}'" +
                                                    "style='float:left;display:inline-block; font-size:10px;'></div>" +
                                                    "{{/if}}" +
                                                    '{{if !isSummaryRow && !footerSummaryRowRecord}}' +
                                                     childNode.innerHTML +
                                                    '{{else}}' + summaryTitlediv + '{{/if}}'+
                                                     "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + tdCount + ")}}" +
                                                    "<div class='e-summarycell'" +
                                                    "style='overflow: hidden;padding-left:25px;'>" +
                                                    "{{/if}}";
                                            altRowTemplateHTML += '{{if isSummaryRow || footerSummaryRowRecord}}' + "{{:~_" + proxy._id + "TemplateCellValue(#data,'" + columnName + "')}}" + '{{/if}}';
                                            altRowTemplateHTML += "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + tdCount + ")}}" +
                                            "</div>" +
                                            "{{/if}}" +
                                            "</div></div></td>";

                                        }
                                        else {
                                            altRowTemplateHTML += "<td class='" + childNode.className + "{{if isSummaryRow || footerSummaryRowRecord}} e-summaryrowcell{{/if}}{{if isSelected && ~_" + proxy._id + "SelectState()}} e-selectionbackground{{/if}} {{:~_" + proxy._id + "isSelectedCell(#data,'" + columnCount + "')}} {{if " + !visible + "}} e-hide{{/if}}{{if isLastSummary}} e-lastsummaryrow{{/if}}{{if ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}}{{if " + isTextWrap + "}} e-textwrapcell{{/if}}{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}} e-summaryintend{{/if}}' style='{{if !isSummaryRow && !footerSummaryRowRecord}}"
                                                    + childNode.style.cssText + "{{/if}}'>" +
                                                    "{{if footerSummaryRowRecord && ~_" + proxy._id + "collapsibleSummary('" + tdCount + "',#data)}}" +
                                                    "<div  " +
                                                    "class= '{{if summaryExpanded}} e-summarytreegridexpand e-icon" +
                                                    "{{else}} e-summarytreegridcollapse e-icon {{/if}}'" +
                                                    "style='float:left;display:inline-block; font-size:10px;'></div>" +
                                                    "{{/if}}" +
                                                    '{{if !isSummaryRow && !footerSummaryRowRecord}}' +
                                                     childNode.innerHTML +
                                                    '{{else}}' + summaryTitlediv + '{{/if}}'+
                                                     "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + tdCount + ")}}" +
                                                    "<div class='e-summarycell'" +
                                                    "style='overflow: hidden;padding-left:25px;'>" +
                                                    "{{/if}}";
                                            altRowTemplateHTML += '{{if isSummaryRow || footerSummaryRowRecord}}' + "{{:~_" + proxy._id + "TemplateCellValue(#data,'" + columnName + "')}}" + '{{/if}}';
                                            altRowTemplateHTML += "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + tdCount + ")}}" +
                                                     "</div>" +
                                                     "{{/if}}" + "</td>";
                                        }
                                        if (this._frozenColumnsLength > 0 && this._frozenColumnsLength == tdCount + 1) {
                                            var frozenAltRowTemplate = "";
                                            frozenAltRowTemplate += altRowTemplateHTML;
                                            frozenAltRowTemplate += "</tr>";
                                            altRowTemplateHTML = "";
                                        }
                                        tdCount++;
                                    }
                                }
                            }
                        }
                    }
                }
               
                /* add details column to end of headers */
                if (model.showDetailsRow && model.detailsTemplate && model.showDetailsRowInfoColumn) {
                    altRowTemplateHTML += "<td class='{{if isSelected && ~_" + proxy._id + "SelectState()}}e-selectionbackground{{/if}} {{if isDetailsExpanded}}e-detailsrowexpand{{else}}e-detailsrowcollapse{{/if}}  " +
                                          "e-detailsrowcell{{if isLastSummary}} e-lastsummaryrow{{/if}}'>{{if !isSummaryRow && !footerSummaryRowRecord}}<div class='e-detailsiconcell e-icon {{if isDetailsExpanded}}e-detailsinfoiconhide{{else}}e-detailsinfoiconshow{{/if}}'></div>{{/if}}";
                    rowTemplateHTML += "<td class='{{if isSelected && ~_" + proxy._id + "SelectState()}}e-selectionbackground{{/if}} {{if isDetailsExpanded}}e-detailsrowexpand{{else}}e-detailsrowcollapse{{/if}}  " +
                                        "e-detailsrowcell{{if isLastSummary}} e-lastsummaryrow{{/if}}'>{{if !isSummaryRow && !footerSummaryRowRecord}}<div class='e-detailsiconcell e-icon {{if isDetailsExpanded}}e-detailsinfoiconhide{{else}}e-detailsinfoiconshow{{/if}}'></div>{{/if}}";
                }

                var trRow = "{{if isAltRow}}" + "<tr class='{{:~_" + proxy._id + "rowClassName()}} " +
                    "{{if expanded && hasFilteredChildRecords}}e-treegridrowexpand {{else hasChildRecords && hasFilteredChildRecords}} e-treegridrowcollapse {{/if}} e-templaterow "
                    + altRowTemplateElement[0].className + "' style='{{if !isSummaryRow && !footerSummaryRowRecord}}" + altRowTemplateElement[0].style.cssText + "{{else}}height:" + model.rowHeight + "px;{{/if}}display:{{if footerSummaryRowRecord}}{{:~_" + proxy._id + "summaryExpandStatus(#data)}}{{else}}{{:~_" + proxy._id + "expandStatus(#data)}}{{/if}}'" + "'>" + altRowTemplateHTML + "</tr>"

                    + "{{else}}" + "<tr class='{{:~_" + proxy._id + "rowClassName()}} " +
                    "{{if expanded && hasFilteredChildRecords}}e-treegridrowexpand {{else hasChildRecords && hasFilteredChildRecords}} e-treegridrowcollapse {{/if}} e-templaterow "
                    + rowTemplateElement[0].className + "' style='{{if !isSummaryRow && !footerSummaryRowRecord}}" + rowTemplateElement[0].style.cssText + "{{else}}height:" + model.rowHeight + "px;{{/if}}display:{{if footerSummaryRowRecord}}{{:~_" + proxy._id + "summaryExpandStatus(#data)}}{{else}}{{:~_" + proxy._id + "expandStatus(#data)}}{{/if}}'" + "'>" + rowTemplateHTML + "</tr>" +
                    "{{/if}}";


                var frozenTrRow = "{{if isAltRow}}" + "<tr class='{{:~_" + proxy._id + "rowClassName()}} " +
                    "{{if expanded && hasFilteredChildRecords}}e-treegridrowexpand {{else hasChildRecords && hasFilteredChildRecords}} e-treegridrowcollapse {{/if}} e-templaterow "
                    + altRowTemplateElement[0].className + "' style='{{if !isSummaryRow && !footerSummaryRowRecord}}" + altRowTemplateElement[0].style.cssText + "{{else}}height:" + model.rowHeight + "px;{{/if}} display:{{if footerSummaryRowRecord}}{{:~_" + proxy._id + "summaryExpandStatus(#data)}}{{else}}{{:~_" + proxy._id + "expandStatus(#data)}}{{/if}}'" + "'>" + frozenRowTemplate + "</tr>"

                    + "{{else}}" + "<tr class='{{:~_" + proxy._id + "rowClassName()}} " +
                    "{{if expanded && hasFilteredChildRecords}}e-treegridrowexpand {{else hasChildRecords && hasFilteredChildRecords}} e-treegridrowcollapse {{/if}} e-templaterow "
                    + rowTemplateElement[0].className + "' style='{{if !isSummaryRow && !footerSummaryRowRecord}}" + rowTemplateElement[0].style.cssText + "{{else}}height:" + model.rowHeight + "px;{{/if}} display:{{if footerSummaryRowRecord}}{{:~_" + proxy._id + "summaryExpandStatus(#data)}}{{else}}{{:~_" + proxy._id + "expandStatus(#data)}}{{/if}}'" + "'>" + frozenAltRowTemplate + "</tr>" +
                    "{{/if}}";
            } else if (!model.parseRowTemplate && (model.rowTemplateID.length > 0 || model.altRowTemplateID.length > 0)) {
                /*Render rowTemplates without parsing*/
                if (model.rowTemplateID && model.altRowTemplateID) {
                    trRow = "{{if isAltRow}}" + $.trim($("#" + model.rowTemplateID).html()) + "{{else}}" + $.trim($("#" + model.altRowTemplateID).html()) + "{{/if}}";
                }
                else if (model.rowTemplateID.length > 0) {
                    trRow = $.trim($("#" + model.rowTemplateID).html());
                } else if (model.altRowTemplateID.length > 0) {
                    trRow = $.trim($("#" + model.altRowTemplateID).html());
                }   
            }

            else {

                var trRow = "<tr class='e-treegridrows {{:~_" + proxy._id + "rowClassName()}} ";

                if (model.enableAltRow) {
                    trRow += "{{if isAltRow}}e-alt-row{{/if}} ";
                }

              
                var tdCellCollections = "";
                for (columnCount = 0; columnCount < length; columnCount++) {
                    if (columns[columnCount]) {
                        columnName = columns[columnCount].field;
                        column = columns[columnCount];
                        var visible = columns[columnCount].visible == undefined ? true : columns[columnCount].visible;
                        var textAlign = columns[columnCount].textAlign;
                        //To create a seperate div in summary cell to display a summary title.
                        summaryTitlediv = "";
                        if (column.headerText == proxy._visibleColumns[0]) {
                            summaryTitlediv = '{{if isSummaryRow || footerSummaryRowRecord}}' + "<div " +
                                "class='e-summarytitle{{if isLastSummary}} e-lastsummaryrow{{/if}}{{if ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}} {{if " + isTextWrap + "}} e-textwrapcell{{/if}}'" + "style='float:left;display:block;'>" + "{{:~_" + proxy._id + "summaryTitle()}}"
                                 + "</div>" + '{{/if}}';
                        }

                        //CHECK THE template COLUMN OR NOT
                        if (column["isTemplateColumn"] && (column["angularTemplate"] || column["templateID"] || column["template"])) {

                            trRow += "e-templaterow ";
                            var headerText = column['headerText'];
                            if (!ej.isNullOrUndefined(headerText) && !ej.isNullOrUndefined(headerText.match(/(\\|[^0-9A-z-_])/g)))
                                headerText = headerText.replace(/(\\|[^0-9A-z-_])/g, "");
                            $("#" + proxy._id + headerText + $.inArray(column, this.model.columns) + "_Template").remove(); //Remove if any template already rendered
                            var scriptElement = this._createTemplateElement(column);
                            tdCell = "<td " +
                                 "class='{{if !isSummaryRow && !footerSummaryRowRecord}} e-intend{{/if}} e-rowcell e-templatecell{{if isSelected && ~_" + proxy._id + "SelectState()}} e-selectionbackground{{/if}} {{:~_" + proxy._id + "isSelectedCell(#data,'" + columnCount + "')}} {{if " + !visible + "}} e-hide{{/if}}{{:~_" + proxy._id + "SummaryRowtdClassName()}}{{if isLastSummary}} e-lastsummaryrow{{/if}}{{if ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}}{{if " + isTextWrap + "}} e-textwrapcell{{/if}}{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}} e-summaryintend{{/if}}{{if ~_" + proxy._id + "batchEditState(#data,'" + columnName + "')}}e-updatedtd e-tgupdatenotify{{/if}}'" +
                                 "style='text-Align:" + textAlign + ";'" +
                                 "role='row'>" +
                                 "{{if footerSummaryRowRecord && ~_" + proxy._id + "collapsibleSummary('" + columnCount + "',#data)}}" +
                                 "<div  " +
                                "class= '{{if summaryExpanded}} e-summarytreegridexpand e-icon" +
                                "{{else}} e-summarytreegridcollapse e-icon {{/if}}'" +
                                "style='float:left;display:inline-block; font-size:10px;'></div>" +
                                "{{/if}}" +
                                 '{{if !isSummaryRow && !footerSummaryRowRecord}}' +
                                 "{{:~_" + proxy._id + "treeGridTemplating('" + scriptElement.id + "','" + columnCount + "')}}" +
                                 '{{else}}' + summaryTitlediv + '{{/if}}'+
                                  "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}}" +
                                 "<div class='e-summarycell'" +
                                 "style='overflow: hidden;padding-left:25px;'>" +
                                 "{{/if}}";
                            tdCell += '{{if isSummaryRow || footerSummaryRowRecord}}' + "{{:~_" + proxy._id + "TemplateCellValue(#data,'" + columnName + "')}}" + '{{/if}}';
                            tdCell += "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}}" +
                                "</div>" +
                                "{{/if}}</td>";
                            //EXPAND COLLAPSE COLUMN BASED ON THE TREECOLUMNINDEX
                        } else if (columnCount === model.treeColumnIndex) {

                            tdCell = "<td " +
                                 "class='{{if isSelected && ~_" + proxy._id + "SelectState()}}e-rowcell e-selectionbackground e-intend {{else}}e-rowcell {{:~_" + proxy._id + "isSelectedCell(#data,'" + columnCount + "')}} {{if !isSummaryRow && !footerSummaryRowRecord}} e-intend{{/if}} {{/if}} {{:~_" + proxy._id + "SummaryRowtdClassName()}}{{if isLastSummary}} e-lastsummaryrow{{/if}}{{if ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}}{{if " + isTextWrap + "}} e-textwrapcell{{/if}}{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}} e-summaryintend{{/if}}{{if ~_" + proxy._id + "batchEditState(#data,'" + columnName + "')}}e-updatedtd e-tgupdatenotify{{/if}} {{if hasChildRecords && hasFilteredChildRecords}} e-parentcell{{/if}}'" +
                                 "style='padding-left:{{if ~_" + proxy._id + "isTreeColumnIndex('" + columnName + "') && isSummaryRow }}{{:((level)*" + proxy.treeIndentLevelWidth + ")}}" + "px{{/if}};background-color:{{if cellBackgroundColor && ~_" + proxy._id + "checkColumn('" + columnName + "',#data)=='" + columnName + "'}}" +
                                 "{{:cellBackgroundColor}}{{else}}none{{/if}};'" +
                                 "role='row'>" +
                                 "{{if footerSummaryRowRecord && ~_" + proxy._id + "collapsibleSummary('" + columnCount + "',#data)}}" +
                                 "<div  " +
                                  "class= '{{if summaryExpanded}} e-summarytreegridexpand e-icon" +
                                  "{{else}} e-summarytreegridcollapse e-icon {{/if}}'" +
                                  "style='float:left;display:inline-block; font-size:10px;'></div>" +
                                  "{{/if}}" +
                                 '{{if !isSummaryRow && !footerSummaryRowRecord}}' +
                                 "<div class='e-inner-treecolumn-container' style='min-height:20px;'>" +
                                 "{{if hasChildRecords && hasFilteredChildRecords}}" +
                                 "<div " +
                                 "class='e-dragintend'" +
                                 "{{if filterLevel > -1}}" +
                                 "style='height:1px; float:left; width:{{:((filterLevel)*" + proxy.treeIndentLevelWidth + ")}}" + "px; display:inline-block;'>" +
                                 "{{else}}" +
                                 "style='height:1px; float:left; width:{{:((level)*" + proxy.treeIndentLevelWidth + ")}}" + "px; display:inline-block;'>" +
                                 "{{/if}}" +
                                 //indicators include for drag and drop
                                 "{{if !~_" + proxy._id + "getState() || !hasChildRecords}}" +
                                  "<div class={{:~_" + proxy._id + "rowName()}} >" +
                                 "<span class='e-aboveIcon {{if level == 1 && hasChildRecords}} e-firstLevIconMargin {{/if}}  e-icon'  style='position:relative;float:right;display:none;'></span>" +
                                 "<span class='e-belowIcon {{if level == 1 && hasChildRecords}} e-firstLevIconMargin {{/if}}  e-icon' style='position:relative;float:right;display:none;'></span>" +
                                 "<span class='e-childIcon {{if level == 1 && hasChildRecords}} e-firstLevIconMargin {{/if}}  e-icon' style='position:relative;float:right;display:none;'></span>" +
                                 "<span class='e-cancelIcon {{if level == 1 && hasChildRecords}} e-firstLevIconMargin {{/if}} e-icon' style='position:relative;float:right;display:none;'></span>" +
                                 "</div>" +
                                 "{{/if}}"+
                                 "</div>" +
                                 "{{else !hasChildRecords || (!hasFilteredChildRecords && hasChildRecords)}}" +
                                 "<div " +
                                 "class='e-dragintend'" +
                                 "{{if filterLevel > -1}}" +
                                 "style='height:1px; float:left; width:{{:(filterLevel*" + proxy.treeIndentLevelWidth + ")+24}}" + "px; display:inline-block;'>" +
                                 "{{else}}" +
                                 "style='height:1px; float:left; width:{{:(level*" + proxy.treeIndentLevelWidth + ")+24}}" + "px; display:inline-block;'>" +
                                 "{{/if}}" +
                                   //indicator icons included for drag and drop
                                 "{{if !~_" + proxy._id + "getState() || !hasChildRecords || !hasFilteredChildRecords}}" +
                                 "<div class={{:~_" + proxy._id + "rowName()}} >"+
                                 "<span class='e-aboveIcon e-iconMargin e-icon'  style='position:relative;float:right;display:none;'></span>" +
                                 "<span class='e-belowIcon e-iconMargin e-icon' style='float:right;display:none;'></span>" +
                                 "<span class='e-childIcon e-iconMargin e-icon' style='float:right;display:none;'></span>" +
                                 "<span class='e-cancelIcon e-iconMargin e-icon' style='float:right;display:none;'></span>" +
                                 "</div>" +
                                  "{{/if}}" +
                                 "</div>" +
                                 "{{/if}}" +
                                 //indicator icons included for drag and drop
                                 "{{if ~_" + proxy._id + "getState() && hasChildRecords && hasFilteredChildRecords}}" +
                                 "<div " +
                                 "class='e-intendparent'>" +
                                 "<div class={{:~_" + proxy._id + "rowName()}} >" +
                                 "<span class='e-aboveIcon e-icon'  style='position:relative;float:left;display:none;'></span>" +
                                 "<span class='e-belowIcon e-icon' style='float:left;display:none;'></span>" +
                                 "<span class='e-childIcon e-icon' style='float:left;display:none;'></span>" +
                                 "<span class='e-cancelIcon e-icon' style='float:left;display:none;'></span>" +
                                 "</div>" +
                                 "</div>" +
                                 "{{/if}}" +
                                 "<div " +
                                 "class='{{if expanded && hasFilteredChildRecords}}e-treegridexpand e-icon{{else hasChildRecords && hasFilteredChildRecords}}" +
                                 "e-treegridcollapse e-icon{{/if}}'" +
                                 "style='float:left;display:inline-block; font-size:10px;'>" +
                                 "</div>" +
                                 "<div class='e-cell{{if " + (column.showCheckbox && (this.model.selectionSettings.selectionType == ej.TreeGrid.SelectionType.Checkbox)) + "}} e-treecheckboxcolumn{{/if}}{{if ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}} {{if " + isTextWrap + "}} e-textwrapcell{{/if}}'" +
                                 "style='overflow: hidden;padding-left:{{if ~_" + proxy._id + "isTreeColumnIndex('" + columnName + "') && isSummaryRow}}{{:(level*" + proxy.treeIndentLevelWidth + ")+24}}" + "px{{/if}};'>" +
                                '{{/if}}' +
                                "{{:~_" + proxy._id + "getCheckboxState(#data, '" + columnName + "', '" + proxy._checkboxColumnName + "')}}";
                                
                            if (!ej.isNullOrUndefined(column["format"]))
                                tdCell += "{{if !isSummaryRow && !footerSummaryRowRecord}}{{:~_" + proxy._id + "formatting('" + column["format"] + "',~_" + proxy._id + "TemplateCellValue(#data,'" + columnName + "'),'" + this.model.locale + "')}}{{else}}{{:~_" + proxy._id + "TemplateCellValue(#data,'" + columnName + "')}}{{/if}}";
                            else if (model.isFromGantt && column.mappingName === model.resourceInfoMapping) {
                                helpers = {};
                                helpers["_" + proxy._id + "resourceName"] = proxy._getResourceName;
                                $.views.helpers(helpers);
                                tdCell += "{{:~_" + proxy._id + "resourceName('" + proxy._id + "Object','"
                                 + model.resourceNameMapping + "','"
                                 + model.resourceUnitMapping + "','" + columnName + "')}}" +
                                "</div>" +
                                "</div>" +
                                "</td>";
                            } else if (model.isFromGantt && column.mappingName === model.predecessorMapping) {

                                helpers = {};
                                helpers["_" + proxy._id + "predecessor"] = $.proxy(proxy._getPredecessorsValue, proxy);
                                $.views.helpers(helpers);

                                tdCell += "{{:~_" + proxy._id + "predecessor(#data)}}" +
                                "</div>" +
                                "</div>" +
                                "</td>";
                            }
                            else {                               
                                tdCell += summaryTitlediv +
                                "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}}" + 
                                 "<div class='e-summarycell'" +
                                 "style='overflow: hidden;padding-left:25px;'>" +
                                "{{/if}}" +
                                "{{:~_" + proxy._id + "TemplateCellValue(#data,'" + columnName + "')}}" +
                                "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}}" +
                                "</div>" +
                                "{{/if}}" +
                                '{{if !isSummaryRow && !footerSummaryRowRecord}}' +
                                "</div>" +
                                "</div>" +
                                "</td>" +
                                '{{/if}}';
                                summaryTitlediv = "";
                            }
                            //CHECK RESOURCE COLUMN FROM GANTT OR NOT
                        } else if (model.isFromGantt && column.mappingName === model.resourceInfoMapping) {
                            helpers = {};
                            helpers["_" + proxy._id + "resourceName"] = proxy._getResourceName;
                            $.views.helpers(helpers);

                            tdCell = "<td  " +
                                 "class='{{if isSelected && ~_" + proxy._id + "SelectState()}}e-rowcell e-selectionbackground{{else}}e-rowcell {{/if}} {{:~_" + proxy._id + "isSelectedCell(#data,'" + columnCount + "')}} {{if " + !visible + "}}e-hide{{/if}}'" +
                                 "style='background-color:{{if cellBackgroundColor && ~_" + proxy._id + "checkColumn('" + columnName + "',#data)=='" + columnName + "'}}" +
                                 "{{:cellBackgroundColor}}{{else}}none{{/if}};'" +
                                 "role='row'>" +
                                 "{{:~_" + proxy._id + "resourceName('" + proxy._id + "Object','"
                                 + model.resourceNameMapping + "','"
                                 + model.resourceUnitMapping + "','" + columnName + "')}}" +
                                 "</td>";
                            //CHECK PREDECESSOR COLUMN FROM GANTT OR NOT
                        } else if (model.isFromGantt && column.mappingName === model.predecessorMapping) {

                            helpers = {};
                            helpers["_" + proxy._id + "predecessor"] = $.proxy(proxy._getPredecessorsValue, proxy);
                            $.views.helpers(helpers);

                            tdCell = "<td " +
                                "class='{{if isSelected && ~_" + proxy._id + "SelectState()}}e-rowcell e-selectionbackground{{else}}e-rowcell {{/if}} {{:~_" + proxy._id + "isSelectedCell(#data,'" + columnCount + "')}} {{if " + !visible + "}}e-hide{{/if}}' " +
                                "style='background-color:{{if cellBackgroundColor && ~_" + proxy._id + "checkColumn('" + columnName + "',#data)=='" + columnName + "'}}" +
                                "{{:cellBackgroundColor}}{{else}}none{{/if}};'" +
                                "role='row'>" +
                                "{{:~_" + proxy._id + "predecessor(#data)}}" +
                                "</td>";

                        } else if (model.isFromGantt && column.mappingName === model.durationMapping) {

                            helpers = {};
                            helpers["_" + proxy._id + "getDurationString"] = $.proxy(proxy._getDurationString, proxy);
                            $.views.helpers(helpers);

                            tdCell = "<td " +
                                "class='{{if isSelected && ~_" + proxy._id + "SelectState()}}e-rowcell e-selectionbackground{{else}}e-rowcell {{/if}} {{:~_" + proxy._id + "isSelectedCell(#data,'" + columnCount + "')}} {{if " + !visible + "}}e-hide{{/if}}' " +
                                "style='background-color:{{if cellBackgroundColor && ~_" + proxy._id + "checkColumn('" + columnName + "',#data)=='" + columnName + "'}}" +
                                "{{:cellBackgroundColor}}{{else}}none{{/if}};'" +
                                "role='row'>" +
                                "{{:~_" + proxy._id + "getDurationString(#data)}}" +
                                "</td>";

                        }
                        else if (column["editType"] == "booleanedit" && proxy._checkboxSelection && columnName == "checkboxState") {
                            tdCell = "<td " +
                                "class='{{if isSelected && ~_" + proxy._id + "SelectState()}}e-rowcell e-selectionbackground{{else}}e-rowcell{{/if}} {{:~_" + proxy._id + "isSelectedCell(#data,'" + columnCount + "')}} {{if " + !visible + "}}e-hide{{/if}}{{:~_" + proxy._id + "SummaryRowtdClassName()}}{{if isLastSummary}} e-lastsummaryrow{{/if}}{{if ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}}{{if " + isTextWrap + "}} e-textwrapcell{{/if}}{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}} e-summaryintend {{/if}}{{if ~_" + proxy._id + "batchEditState(#data,'" + columnName + "')}}e-updatedtd e-tgupdatenotify{{/if}}'" +
                                "style='background-color:{{if cellBackgroundColor && ~_" + proxy._id + "checkColumn('" + columnName + "',#data)=='" + columnName + "'}}" +
                                "{{:cellBackgroundColor}}{{else}}none{{/if}};text-Align: center;'" +
                                "role='row'" +
                                "> {{if footerSummaryRowRecord && ~_" + proxy._id + "collapsibleSummary('" + columnCount + "',#data)}}" +
                                 "<div  " +
                                  "class= '{{if summaryExpanded}} e-summarytreegridexpand e-icon" +
                                  "{{else}} e-summarytreegridcollapse e-icon {{/if}}'" +
                                  "style='float:left;display:inline-block; font-size:10px;'></div>" +
                                  "{{/if}}" + summaryTitlediv +
                                  "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}}" +
                                 "<div class='e-summarycell'" +
                                 "style='overflow: hidden;padding-left:25px;'>" +
                                 "{{/if}}" +
                                  "{{:~_" + proxy._id + "TemplateCellValue(#data,'" + columnName + "', '" + proxy._checkboxColumnName + "')}}" +
                                "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}}" +
                                "</div>" +
                                "{{/if}}";
                        }
                        else if (proxy._isCommandColumn(column)) {                            
                            $("#" + this._id + columnCount + "_UnboundTemplate").remove();
                            var divElement = proxy._createCommandElement(column, columnCount);                            
                            tdCell = "<td " +
                           "class='{{if isSelected && ~_" + proxy._id + "SelectState()}}e-rowcell e-unboundcell e-selectionbackground {{else}}e-rowcell e-unboundcell {{/if}} {{:~_" + proxy._id + "isSelectedCell(#data,'" + columnCount + "')}} {{if " + !visible + "}}e-hide{{/if}}{{:~_" + proxy._id + "SummaryRowtdClassName()}}{{if isLastSummary}} e-lastsummaryrow{{/if}}{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}} e-summaryintend{{/if}}'" +
                           "style='background-color:{{if cellBackgroundColor && ~_" + proxy._id + "checkColumn('" + columnName + "',#data)=='" + columnName + "'}}" +
                           "{{:cellBackgroundColor}}{{else}}none{{/if}};text-Align:" + textAlign + "'" +
                           "role='row'> {{if !isSummaryRow && !footerSummaryRowRecord}}{{:~_" + proxy._id + "UnboundTemplate('" + divElement.id + "')}}{{else}}{{if footerSummaryRowRecord && ~_" + proxy._id + "collapsibleSummary('" + columnCount + "',#data)}}" +
                                 "<div  " +
                                  "class= '{{if summaryExpanded}} e-summarytreegridexpand e-icon" +
                                  "{{else}} e-summarytreegridcollapse e-icon {{/if}}'" +
                                  "style='float:left;display:inline-block; font-size:10px;'></div>" +
                                  "{{/if}}" + summaryTitlediv +
                                  "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}}" +
                                 "<div class='e-summarycell'" +
                                 "style='overflow: hidden;padding-left:25px;'>" +
                                "{{/if}}" +
                                  "{{:~_" + proxy._id + "TemplateCellValue(#data,'" + columnName + "', '" + proxy._checkboxColumnName + "')}}{{/if}}" +
                                  "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}}" +
                                "</div>" +
                                "{{/if}}";
                            proxy._commandColumnLength = proxy._commandColumnLength + 1;
                            tdCell += "</td>";
                        }
                        else {
                            tdCell = "<td " +
                                "class='{{if isSelected && ~_" + proxy._id + "SelectState()}}e-rowcell e-selectionbackground{{else}}e-rowcell {{/if}} {{:~_" + proxy._id + "isSelectedCell(#data,'" + columnCount + "')}} {{if " + !visible + "}}e-hide{{/if}} {{:~_" + proxy._id + "SummaryRowtdClassName()}}{{if isLastSummary}} e-lastsummaryrow{{/if}}{{if ~_" + proxy._id + "isTrimCell('" + column['clipMode'] + "')}} e-treegridtrimcell{{/if}}{{if " + isTextWrap + "}} e-textwrapcell{{/if}}{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}} e-summaryintend{{/if}}{{if ~_" + proxy._id + "batchEditState(#data,'" + columnName + "')}}e-updatedtd e-tgupdatenotify{{/if}}'" +
                                "style='background-color:{{if cellBackgroundColor && ~_" + proxy._id + "checkColumn('" + columnName + "',#data)=='" + columnName + "'}}" +
                                "{{:cellBackgroundColor}}{{else}}none{{/if}};text-Align:" + textAlign + "'" +
                                "role='row'" +
                                ">" +
                                "{{:~_" + proxy._id + "getCheckboxState(#data, '" + columnName + "', '" + proxy._checkboxColumnName + "')}}{{if footerSummaryRowRecord && ~_" + proxy._id + "collapsibleSummary('" + columnCount + "',#data)}}" +
                                 "<div  " +
                                  "class= '{{if summaryExpanded}} e-summarytreegridexpand e-icon" +
                                  "{{else}} e-summarytreegridcollapse e-icon {{/if}}'" +
                                  "style='float:left;display:inline-block; font-size:10px;'></div>" +
                                  "{{/if}}" + summaryTitlediv +
                                  "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}}" +
                                 "<div class='e-summarycell'" +
                                 "style='overflow: hidden;padding-left:25px;'>" +
                                "{{/if}}";

                            if (!ej.isNullOrUndefined(column["format"]))
                                tdCell += "{{if !isSummaryRow && !footerSummaryRowRecord}}{{:~_" + proxy._id + "formatting('" + column["format"] + "',~_" + proxy._id + "TemplateCellValue(#data,'" + columnName + "'),'" + this.model.locale + "')}}{{else}}{{:~_" + proxy._id + "TemplateCellValue(#data,'" + columnName + "')}}{{/if}}";
                            else {
                                tdCell += "{{:~_" + proxy._id + "TemplateCellValue(#data,'" + columnName + "')}}";

                            }    
                           
                            tdCell+= "{{if footerSummaryRowRecord && ~_" + proxy._id + "summaryIndendCell(" + columnCount + ")}}" +
                                "</div>" +
                                "{{/if}}</td>";
                            summaryTitlediv = "";
                        }

                        tdCellCollections += tdCell;
                    }
                    if (this._frozenColumnsLength > 0 && this._frozenColumnsLength == columnCount + 1) {
                        var frozenTrRow = "";
                        frozenTrRow += tdCellCollections;
                        frozenTrRow += "</tr>";
                        tdCellCollections = "";
                    }
                }

                /* add details column to end of header cell*/
                if (model.showDetailsRow && model.detailsTemplate && model.showDetailsRowInfoColumn) {
                    tdCellCollections += "<td class='{{if isSelected && ~_" + proxy._id + "SelectState()}}e-selectionbackground{{/if}} {{if isDetailsExpanded}}e-detailsrowexpand{{else}}e-detailsrowcollapse{{/if}}  " +
                                         "e-detailsrowcell{{if isLastSummary}} e-lastsummaryrow{{/if}}'>{{if !isSummaryRow && !footerSummaryRowRecord}}<div class='e-detailsiconcell e-icon {{if isDetailsExpanded}}e-detailsinfoiconhide{{else}}e-detailsinfoiconshow{{/if}}'></div>{{/if}}";
                }

                trRow += "{{if expanded && hasFilteredChildRecords}}e-treegridrowexpand {{else hasChildRecords && hasFilteredChildRecords}} " +
                      "e-treegridrowcollapse {{/if}}" +
                      "{{if isBatchDelete}}e-batchdisable {{/if}}'" +
                      "style='background-color:{{if rowBackgroundColor }}{{:rowBackgroundColor}}{{else}}none{{/if}}; height:{{:~_" + proxy._id + "getRowHeight(#data)}}px;" +
                      "display:{{if footerSummaryRowRecord}}{{:~_" + proxy._id + "summaryExpandStatus(#data)}}{{else}}{{:~_" + proxy._id + "expandStatus(#data)}}{{/if}}'" +
                      "role='treegrid'>";
                frozenTrRow = trRow + frozenTrRow;
                trRow += tdCellCollections;

                if (model.isFromGantt) {
                    trRow += "<td class='e-extendcolumn'></td></tr>";
                } else {
                    trRow += "</tr>";
                }
            }

            if (model.showDetailsRow && model.detailsTemplate)
            {
                trRow += "{{if isDetailsExpanded}}" + proxy._createDetailsRowTemplate() + "{{/if}}";
                frozenTrRow += "{{if isDetailsExpanded}}" + proxy._createDetailsRowTemplate(true) + "{{/if}}";
            }
            proxy._summaryExpanded = true;
            var templates = {};
            templates[proxy._id + "_Template"] = trRow;
            templates[proxy._id + "_JSONFrozenTemplate"] = frozenTrRow;

            $.templates(templates);

            

        },
        
        //#endregion template

        //#region template METHODS

        _gridTemplate: function (self, templateId, columnIndex) {
            var column;
            if (!ej.isNullOrUndefined(columnIndex))
                column = self.model.columns[columnIndex];
            return self._renderEjTemplate("#" + templateId, this.data, this.data.index, column);
        },

        //method for calculating the indent width for expander column
        _getIndentWidth:function(data){
            var level = data.level;
            return (level * this.treeIndentLevelWidth) + "px";
		},


        //creating template element for angulartemplate in details row template
        _createDetailRowTemplateElement: function (detailTemplate) {
            var quickReg = /^#([\w-]*)/,
                scripEle,
                match = quickReg.exec(detailTemplate), scriptReg = /^<script/i;

            var options = {
                name: "SCRIPT",
                type: "text/x-template",
                text: detailTemplate,
                id: "treeGridDetailsRowTemplateElement" + this._id
            };

            if (match && match[1])
                scripEle = document.getElementById(match[1]);
            else {
                if (scriptReg.test(detailTemplate))
                    scripEle = $(detailTemplate).get(0);
                else
                    scripEle = ej.buildTag(options.name, options.text).get(0);
            }

            scripEle.id = scripEle.id || options.id;
            scripEle.type = scripEle.type || options.type;
            $("body").append(scripEle);
            return scripEle;
        },


        //creating template element for angulartemplate in row template
        _createRowTemplateElement: function (innerHtml, id, type) {
            var scriptElement = document.createElement("script");
            scriptElement.id = id;
            scriptElement.type = type || "text/x-template";
            scriptElement.text = innerHtml;

            $("body").append(scriptElement);
            return scriptElement;
        },

        //creating a template element for angularjs template
        _createTemplateElement: function (column, text) {

            var idText = text ? "Pager" : column.headerText + $.inArray(column, this.model.columns) + "_Template",
                property = "template" in column ? "template" : "templateID" in column ? "templateID" : "angularTemplate",
                template = column[property],
                quickReg = /^#([\w-]*)/, scriptReg = /^<script/i, scripEle;

            if (property == "templateID") {
                if (template.indexOf("#") == -1)
                    template = "#" + template;
            }

            var match = quickReg.exec(template),
                options = {
                    name: "SCRIPT",
                    type: "text/x-template",
                    text: template,
                    id: (this._id + idText).replace(/(\\|[^0-9A-z-_])/g, "")
                };

            if (match && match[1])
                scripEle = document.getElementById(match[1]);
            else {
                if (scriptReg.test(template)) // branch here to handle tmpl string with SCRIPT. 
                    scripEle = $(template).get(0);
                else
                    scripEle = ej.buildTag(options.name, options.text).get(0);
            }
            scripEle.id = scripEle.id || options.id;
            scripEle.type = scripEle.type || options.type;
            $("#" + scripEle.id).remove();
            $("body").append(scripEle);
            return scripEle;
        },

        //Get checkbox state while rendering the treegrid
        _getCheckboxState: function (data, columnName, checkboxColumnName) {
            if (columnName != checkboxColumnName)
                return;
            if (data['isSummaryRow'] == true || data.summaryColumn || data.summaryRow)
                return;
            var checkboxState;
            if (data.checkboxState == "indeterminate") {
                checkboxState = '<span class="e-chkbox-wrap e-widget" style="padding-right:10px;color:#c8c8c8;">' +
                '<div class="e-chkbox-small">' +
                '<span class="e-chk-indeter"><span class="e-checkbox e-chk-image e-icon e-stop" id =' + this._id + '_checkbox' + data.ejRowId + '></span></span></div></span>';
            }
            else if (data.checkboxState == "unchecked") {
                checkboxState = '<span class="e-chkbox-wrap e-widget" style="padding-right:10px;color:#c8c8c8;">' +
                    '<div class="e-chkbox-small">' +
                    '<span class="e-chk-inact"><span class="e-checkbox e-chk-image e-icon" id =' + this._id + '_checkbox' + data.ejRowId + '></span></span></div></span>';
            }
            else {
                checkboxState = '<span class="e-chkbox-wrap e-widget" style="padding-right:10px;color:#c8c8c8;">' +
                    '<div class="e-chkbox-small">' +
                    '<span class="e-chk-act"><span class=" e-checkbox e-chk-image e-icon e-checkmark" id =' + this._id + '_checkbox' + data.ejRowId + '></span></span></div></span>';
            }
            return checkboxState;
        },

        // Healper method to check the clip mode of the cell is in 'ellipsis'.
        _checkIsTrimCell: function (clipMode) {
            var proxy = this;
            if (clipMode && clipMode == "ellipsis")
                return true;
            else
                return false;
        },
        /*Method to get row for resource view Gantt*/
        _getTemplateRowHeight: function (data) {
            if (this.model.isFromGantt && this.model.viewType == "resourceView")
                return data.eOverlapIndex * this.model.rowHeight;
            else
                return this.model.rowHeight;
        },

        _getCustomCellValue: function (data, columnName) {
            if (!ej.isNullOrUndefined(data)) {
                var splits = (columnName || "").split("."), cellValue;
                if (splits.length <= 1)
                    cellValue = data[columnName];
                else {
                    cellValue = data[splits[0]];
                    if (ej.isNullOrUndefined(cellValue)) {
                        //if (typeof cellValue === "undefined")
                        //    this._restoreCustomData(data, "", columnName);
                        return null;
                    }
                    for (var splitKeyIndex = 1; splitKeyIndex < splits.length; splitKeyIndex++) {
                        cellValue = cellValue[splits[splitKeyIndex]];
                        if (ej.isNullOrUndefined(cellValue)) {
                            //if (typeof cellValue === "undefined")
                            //    this._restoreCustomData(data, "", columnName);
                            return null;
                        }
                    }
                }
                return cellValue;
            }
        },

        _restoreCustomData: function (data, value, fieldName) {
            var proxy = this, splitIndex = 0,dataIndex = 0;
            if (ej.isNullOrUndefined(fieldName)) {
                var fieldName = proxy._cellEditingDetails.fieldName;
            }
            var splits = (fieldName || "").split("."), cellValue = {};
            if (splits.length <= 1) {
                if (!ej.isNullOrUndefined(data)) {
                    data[fieldName] = value;
                } else {
                    data = {};
                    data[fieldName] = value;
                }
            }
            else {
                if (!ej.isNullOrUndefined(data)) {
                    cellValue = data[splits[0]];
                    if (ej.isNullOrUndefined(cellValue)) {
                        cellValue = {};
                        data[splits[0]] = cellValue;
                    }
                    dataIndex = 1;
                } else {
                    data = {};
                    cellValue = data;
                    dataIndex = 0;
                }
                for (splitIndex = dataIndex; splitIndex < (splits.length - 1) ; splitIndex++) {
                    if (ej.isNullOrUndefined(cellValue[splits[splitIndex]])) {
                        cellValue[splits[splitIndex]] = {};
                    }
                    cellValue = cellValue[splits[splitIndex]];
                }
                cellValue[splits[splitIndex]] = value;
            }
                return data;
        },

        //Get the cell value while rendering the tree grid.
        _getTemplateCellValue:function(data,columnName, checkboxColumn)
        {
            var proxy = this,
                column = proxy.getColumnByField(columnName),
                editType = column.editType, i, dropdownValue,
                cellValue = proxy._getCustomCellValue(data, columnName);
               var value, text;
            if (!ej.isNullOrUndefined(cellValue)) {
                cellValue = cellValue;
            } else {
                cellValue = data.item && data.item[columnName];
            }
            if (editType == ej.TreeGrid.EditingType.Boolean && columnName == checkboxColumn) {
                cellValue = proxy._getCheckboxState(data, columnName, checkboxColumn);
            } else if (!data['isSummaryRow'] && !data["footerSummaryRowRecord"] && editType == ej.TreeGrid.EditingType.Boolean && columnName != checkboxColumn && (ej.isNullOrUndefined(column.displayAsCheckbox) || column.displayAsCheckbox)) {
                if (cellValue == "true" || cellValue == true)
                    cellValue = "<input class='e-treegrid-chekboxcell' type='checkbox' disabled='disabled' checked/>";
                else
                    cellValue = "<input class='e-treegrid-chekboxcell' type='checkbox' disabled='disabled'/>";
            }
            if (proxy.model.isFromGantt) {
                if (columnName == "work")
                    cellValue += " " + proxy.model.workUnit;
                if (columnName == "taskMode")
                    cellValue = !data.isAutoSchedule;
                if (columnName == "unit")
                    cellValue += "" + "%";
                if (columnName == "duration")
                    cellValue = proxy._getDurationString(data);
                if (columnName == "startDate" || columnName == "endDate" || columnName == "duration") {
                    if (ej.isNullOrUndefined(cellValue) || cellValue == "") {
                        cellValue = column.showNullText ? proxy.model.nullText : "" ;
                    }
                }                    
            }
            if (editType == ej.TreeGrid.EditingType.Dropdown && !data['isSummaryRow'] && !data["footerSummaryRowRecord"])
            {
                var editParams = column.editParams;
                cellValue = (cellValue != null || cellValue != undefined) ? cellValue : "";
                if(editParams && editParams.fields)
                {
                    text = editParams.fields.text ? editParams.fields.text : "text";
                    value = editParams.fields.value ? editParams.fields.value : "value";
                }
                else
                {
                    value = "value";
                    text = "text";
                }
                if (editParams && (editParams.showCheckbox || editParams.multiSelectMode)) {
                    var cellValueCollection, length, dropdownValue,
                       dropdownDataCollection = column.dropdownData,
                   delimiterChar = (editParams && !ej.isNullOrUndefined(editParams.delimiterChar)) ? editParams.delimiterChar : ",";
                    if (typeof (cellValue) == 'string' && cellValue.indexOf(delimiterChar) > -1) {
                        cellValueCollection = cellValue.split(delimiterChar);
                        length = cellValueCollection.length;
                    }
                    else
                        cellValueCollection = cellValue;
                    cellValue = "";
                    if (column.dropdownData) {
                        if (length) {
                            for (var i = 0; i < length; i++) {                                
                                dropdownValue = $.map(dropdownDataCollection, function (dropdownData) {
                                    if (!ej.isNullOrUndefined(dropdownData[value])) {
                                        if (dropdownData[value].toString() == cellValueCollection[i].toString())
                                            return dropdownData[text];
                                    }
                                    else {
                                        if (dropdownData[text] == cellValueCollection[i])
                                            return dropdownData[text];
                                    }
                                });
                                dropdownValue[0] = dropdownValue[0] ? dropdownValue[0] : "";
                                cellValue += i == 0 ? dropdownValue[0] : delimiterChar + dropdownValue[0];
                            }
                        }
                        else {
                            $.map(dropdownDataCollection, function (dropdownData) {
                                if ((!ej.isNullOrUndefined(dropdownData[value]) && cellValueCollection.toString() === dropdownData[value].toString()) || cellValueCollection === dropdownData[text]) {
                                    cellValue = dropdownData[text];
                                }
                            });
                        }
                    }
                }
                else {
                    if (column.dropdownData) {
                        var dropdownDataCollection = column.dropdownData;
                        dropdownValue = $.map(dropdownDataCollection, function (dropdownData) {
                            if (!ej.isNullOrUndefined(dropdownData[value])) {
                                if (dropdownData[value].toString() == cellValue.toString())
                                    return dropdownData[text];
                            }
                            else {
                                if (dropdownData[text].toString() == cellValue)
                                    return dropdownData[text];
                            }
                        });
                        dropdownValue[0] = ej.isNullOrUndefined(dropdownValue[0]) ? "" : dropdownValue[0];
                        cellValue = dropdownValue[0];
                    }
                }
            }           
            return cellValue;
        },

        _getCellValue: function (data, columnName) {

            var cellValue = this._getCustomCellValue(data, columnName);

            if (cellValue || cellValue===0) {
                return cellValue;
            } else {
                return data.item && data.item[columnName];
            }


        },
        _isCommandColumn: function (column) {
            var proxy = this, model = proxy.model,
            commands = column.commands;
            if ((!ej.isNullOrUndefined(commands) && commands.length == 0 )|| ej.isNullOrUndefined(commands))
                return false;
            else
                return true;
        },
        _isTreeColumnIndex: function (columnName) {
            var proxy = this, model = proxy.model,
            currentColumn = model.columns[model.treeColumnIndex];
            if (currentColumn && currentColumn.field == columnName)
                return true;
            else
                return false;
        },
        _getSummaryTitle: function () {
            var proxy = this;
            var summaryTitleValue = proxy.data.summaryRow.title;
            if (summaryTitleValue)
                return summaryTitleValue;
            else
                return proxy.data.item && proxy.data.item.summaryRow.title;
        },

        _getCellColumn: function (columnName,data) {
            var proxy = this;

            if (data.treeMappingName.indexOf(columnName) !== -1) {
                return columnName;
            }
            else {
                return "none";
            }


        },

        //GET RESOURCE NAME FOR RESOURCE COLUMN IN THE GANTT CONTROL
        _getResourceName: function (gridObject, mappingName, unitMappingName, columnName) {

            var proxy = this,
                data = proxy.data[columnName],
                count = 0,
                resourceString, resourceUnit,
                length = data && data.length,
                resourceName = [];

            if (data && data.length > 0) {
                for (count; count < length; count++) {
                    resourceString = data[count][mappingName];
                    resourceUnit = data[count][unitMappingName];
                    if (resourceUnit != 100)
                        resourceString += "[" + resourceUnit + "%]";                    
                    resourceName.push(resourceString);
                }
            }
            return resourceName;
        },

        _removeSeparator: function (number) {

            var value = number.toString(),
            format = ej.preferredCulture(this.model.locale).numberFormat;
            value = value.replace(".", format["."]);
            return value;
        },

        _getDurationString: function (data) {
            var val = "";

            if (!ej.isNullOrUndefined(data.duration) && data.duration !== "") {
                if (typeof data.duration == "string") {
                    var duration = parseFloat(data.duration);
                    val += !isNaN(duration) ? this._removeSeparator(parseFloat(duration.toFixed(2))) + " " : "";
                }
                else
                    val = this._removeSeparator(parseFloat(data.duration.toFixed(2))) + " ";
                if (data.durationUnit != null) {
                    var multiple = data.duration != 1;
                    if (data.durationUnit == "day")
                        val += multiple ? this.model.durationUnitTexts.days : this.model.durationUnitTexts.day;
                    else if (data.durationUnit == "hour")
                        val += multiple ? this.model.durationUnitTexts.hours : this.model.durationUnitTexts.hour;
                    else
                        val += multiple ? this.model.durationUnitTexts.minutes : this.model.durationUnitTexts.minute;
                }
            }
            else {
                var column = this.getColumnByField("duration");
                val = column = column.showNullText ? this.model.nullText : val;
            }
            return val;
        },
        //GET PREDECESSOR VALUE FOR PREDECESSOR COLUMN IN THE GANTT CONTROL
        _getPredecessorsValue: function (data) {
            var predecessors = data.predecessor,
                returnVal = "",
                resultString = "";
            if (predecessors) {
                var length = predecessors.length;
                for (var i = 0; i < length; i++) {
                    var cPredecessor = predecessors[i],
                        temp = "";
                    if (cPredecessor.from != data.taskId) {
                        temp = cPredecessor.from + cPredecessor.predecessorsType;
                        if (cPredecessor.offset != 0) {
                            temp += cPredecessor.offset > 0 ? ("+" + cPredecessor.offset + " ") : (cPredecessor.offset + " ");
                            var multiple = Math.abs(cPredecessor.offset) != 1;
                            if (cPredecessor.offsetDurationUnit == "day")
                                temp += multiple ? this.model.durationUnitTexts.days : this.model.durationUnitTexts.day;
                            else if (cPredecessor.offsetDurationUnit == "hour")
                                temp += multiple ? this.model.durationUnitTexts.hours : this.model.durationUnitTexts.hour;
                            else
                                temp += multiple ? this.model.durationUnitTexts.minutes : this.model.durationUnitTexts.minute;
                        }
                        if (resultString.length > 0)
                            resultString = resultString + "," + temp;
                        else
                            resultString = temp;
                    }
                }
            }
            return resultString;
        },

        //GET THE EXPAND COLLAPSE STATUS OF TABLE ROW
        _getExpandStatusRecord: function (data) {

            var proxy = this;
            if (proxy.getExpandStatus(data) || (proxy._isHierarchyFiltering && data.isDisplay)) {
                return 'table-row';

            }

            return 'none';
        },

        //#endregion TEMPLATE METHODS

        //#region CONVERT HIERARCHICAL RECORDS TO FLAT RECORDS
        //CREATE FLATRECORDS FROM HIERARCHICAL DATASOURCE
        _createRecords: function (dataSource) {

            var proxy = this,
                model = proxy.model,
                ids=proxy.model.ids,
                flatRecords = model.flatRecords,
                length = dataSource.length,
                count = 0,
                expanded = true,
                parentRecord,
                parentRecords = model.parentRecords;

            if (!model.isFromGantt && model.enableCollapseAll) 
                expanded = false;            

            for (count; count < length; count++) {

                parentRecord = proxy._createRecord(dataSource[count], 0, null, expanded);
                parentRecord["hierarchyRowIndex"] = count;
                proxy._storedIndex++;

                //CHECK ALTROW ENABLED OR NOT
                
                parentRecord.isAltRow = proxy._storedIndex % 2 == 0 ? false : true;
                

                //CHECK SORTING ENABLED OR NOT
                
                parentRecords.push(parentRecord);
                

                parentRecord.index = proxy._storedIndex;
                ids[proxy._storedIndex] = parentRecord.index;
                flatRecords.push(parentRecord);
                if (parentRecord.hasChildRecords)
                    proxy._parentRecords.push(parentRecord);
                parentRecord.childRecords && proxy._addNestedRecords(parentRecord.childRecords);

                if (this.dataSource() instanceof ej.DataManager && proxy._isLoadonDemand) {
                    if (parentRecord.item[model.hasChildMapping] || proxy._assignedParendIDs.indexOf(parentRecord.item[model.idMapping]) != -1) {
                        parentRecord.hasChildRecords = true;
                        parentRecord.childRecords = [];
                        parentRecord.isChildRetrieved = false;
                    }
                }
            }
            if (model.allowPaging && !proxy._isRemoteData) {
                proxy._updateTotalRecordsCount();
            }
            /* assign records length as max index */
            proxy._maxRowIndex = this.model.flatRecords.length;
        },

        _updateTotalRecordsCount : function(){
            var proxy = this,
                model = proxy.model,
                flatRecords = model.flatRecords;
            if (!ej.isNullOrUndefined(model.pageSettings.totalRecordsCount) && model.pageSettings.totalRecordsCount <= flatRecords.length) {
                var totalRecordsCount = model.pageSettings.totalRecordsCount;
                model.flatRecords = flatRecords.slice(0, totalRecordsCount);
                if (model.flatRecords[totalRecordsCount - 1].hasChildRecords) {
                    model.flatRecords[totalRecordsCount - 1].hasChildRecords = false;
                    model.flatRecords[totalRecordsCount - 1].expanded = false;
                    model.flatRecords[totalRecordsCount - 1].childRecords = null;
                    model.flatRecords[totalRecordsCount - 1].hasFilteredChildRecords = false;
                }
            }
            else if (ej.isNullOrUndefined(model.pageSettings.totalRecordsCount))
                model.pageSettings.totalRecordsCount = flatRecords.length;
        },

        //CREATE RECORD OBJECT
        _createRecord: function (data, level, parentItem, expanded) {

            var proxy = this,
                record,
                childDataSource = data[proxy.model.childMapping], model = this.model;

            //To create and maintain record collections for multi select dropdownedit of columns
            var record = $.extend({}, data);
            var tempData;
            if (model.parentIdMapping && proxy._createdAt === "load") {
                var id = data[model.idMapping],
                   index = proxy._taskIds.indexOf(id);
                record.item = (index > -1) ? proxy._retrivedData[index] : [];              
            }
            else {

                if (this.dataSource() instanceof ej.DataManager && this.dataSource().dataSource.json && this.dataSource().dataSource.offline && proxy._createdAt === "load") {

                    if (model.parentIdMapping) {
                        var id = data[model.idMapping],
                           index = proxy._taskIds.indexOf(id);
                        record.item = (index > -1) ? proxy._retrivedData[index] : [];
                    }
                    else {
                        record.item = data;
                    }
                }
                else {
                    record.item = data;
                }
            }
            record.parentItem = parentItem;
			record.childRecords = (childDataSource && childDataSource.length > 0) && proxy._createChildRecords(childDataSource, level + 1, record);
			record.hasChildRecords = (childDataSource && childDataSource.length > 0) ? true : false;
			if (model.expandStateMapping && record.hasChildRecords) {
			    if (!ej.isNullOrUndefined(data[model.expandStateMapping])) {
			        record[model.expandStateMapping] = record.item[model.expandStateMapping] = data[model.expandStateMapping];
			    } else if (ej.isNullOrUndefined(data[model.expandStateMapping]) && !model.enableCollapseAll) {
			        record[model.expandStateMapping] = record.item[model.expandStateMapping] = data[model.expandStateMapping] = true;
			    } else if (ej.isNullOrUndefined(data[model.expandStateMapping]) && model.enableCollapseAll) {
			        record[model.expandStateMapping] = record.item[model.expandStateMapping] = data[model.expandStateMapping] = false;
			    }
			    var expandStateMapping = data[model.expandStateMapping];
			}
			else
			    var expandStateMapping = true;
			record.expanded = (expanded !== undefined && childDataSource !== undefined && record.hasChildRecords == true
                && expandStateMapping) ? expanded : expandStateMapping && childDataSource ? childDataSource.length > 0 : false;
            record.dragState = true;
            record.isSelected = false;
            record.hasFilteredChildRecords = true;//Used to Indicates Parent records can expandable or not on Filtering operation
            record.level = level;
            record.canDrag = true;
            record.canDrop = true;
            record.cellBackgroundColor = null;
            record.rowBackgroundColor = null;
            record.textWrapRowHeight = model.rowHeight;
            record.treeMappingName = [];
            if (model.showDetailsRow && model.detailsTemplate) {
                record.isDetailsExpanded = model.showDetailsRowInfoColumn ? false : true;
            } else {
                record.isDetailsExpanded = false;
            }
            if (!model.isFromGantt)
                record.ejRowId = ++proxy._idGenerator;
            record.checkboxState = "unchecked";
            delete record[model.childMapping];
            return record;
        },


        //CREATE CHILD GANTT RECORDS
        _createChildRecords: function (childDataSource, level, parentItem) {

            var proxy = this,
                model=proxy.model,
                records = [],
                count = 0,
                length = childDataSource.length,
                record = null,
                expanded,
                childRecord;

            if (!model.isFromGantt && model.enableCollapseAll)
                expanded = false;

            for (count = 0; count < length; count++) {

                record = childDataSource[count];

                if (record) {
                    childRecord = proxy._createRecord(record, level, parentItem, expanded);
                    childRecord["hierarchyRowIndex"] = count;
                    records.push(childRecord);
                }
            }

            return records;

        },


        //ADD NESTED RECORDS TO FLATRECORDS
        _addNestedRecords: function (childDataSource) {

            var proxy = this,
                model = proxy.model,
                ids=proxy.model.ids,
                flatRecords = model.flatRecords,
                updatedRecords = model.updatedRecords,
                count = 0,
                length = childDataSource.length,
                records = [],
                record;
                

            for (count = 0; count < length; count++) {

                record = childDataSource[count];
                proxy._storedIndex++;

                //CHECK ALTROW ENABLED OR NOT
                
                record.isAltRow = proxy._storedIndex % 2 == 0 ? false : true;
                

                record.index = proxy._storedIndex;
                ids[proxy._storedIndex] = record.index;
                flatRecords.push(record);
                updatedRecords.push(record);
                if (record.hasChildRecords)
                    proxy._parentRecords.push(record);
                records = record.childRecords;

                if (records) {

                    var j = 0,
                        recordlength = records.length,
                        childRecord = null;

                    for (j = 0; j < recordlength; j++) {

                        childRecord = records[j];
                        proxy._storedIndex++;     
                        childRecord.index = proxy._storedIndex;
                        ids[proxy._storedIndex] = childRecord.index;
                        //CHECK ALTROW ENABLED OR NOT
                        
                        childRecord.isAltRow = proxy._storedIndex % 2 == 0 ? false : true;
                        
                        flatRecords.push(childRecord);
                        updatedRecords.push(record);
                        if (childRecord.hasChildRecords)
                            proxy._parentRecords.push(childRecord);
                        childRecord.childRecords && proxy._addNestedRecords(childRecord.childRecords);
                    }
                }
            }
        },

        //EVENT FOR COLUMN RESIZE
        _enableColumnResizeEvents: function () {

            var proxy = this;

            if (proxy.model.allowColumnResize) {
                proxy._on(proxy.element, "mousemove", proxy._mouseMove);
            } else {
                proxy._off(proxy.element, "mousemove", proxy._mouseMove);
            }
        },

        //#endregion CONVERT HIERARCHICAL RECORDS TO FLAT RECORDS

        //#region METHOD FOR EVENTS

        //INITIALIZE THE EVENTS
        _wireEvents: function () {

            var proxy = this,
                model = proxy.model,
                matched = jQuery.uaMatch(navigator.userAgent);

            //proxy._$gridContent.bind("scroll", $.proxy(proxy._onScroll, proxy));
            if (ej.isTouchDevice()) {
                proxy._on(proxy.element, "tap", proxy._onRecordClick);// ".e-gridcontent",
                proxy._on(proxy.element, "doubletap", ".e-gridcontent > div", proxy._onRecordDoubleClick);
                proxy._on(proxy.element, "tap", proxy._onClick);
            }
            else {
                proxy._on(proxy.element, "click", proxy._onRecordClick);// ".e-gridcontent",
                proxy._on(proxy.element, "dblclick", ".e-gridcontent > div", proxy._onRecordDoubleClick);
                proxy._on(proxy.element, "click", proxy._onClick);
            }            
            proxy._on(proxy.element, "keydown", proxy._keyDown);
            proxy._on(proxy.element, "click", "#" + proxy._id + "e-gridheader", proxy._onHeaderClick);
            proxy._on(proxy.element, "mousedown touchstart", "#" + proxy._id + "e-gridheader", proxy._headerMouseDown);
            proxy._on($(document), "mousedown touchstart", proxy._mouseDownHandler);
            proxy._on(proxy.element, "mousedown touchstart", ".e-gridcontent", proxy._contentMouseDown);            
            
            if (ej.isTouchDevice() && this.model.allowPaging)
                this._on(this.element, "swipeleft swiperight", ".e-gridcontent div > .e-table", $.proxy(this._swipeAction, this));

            if (proxy.model.allowColumnResize)
                proxy._on(proxy.element, "mousemove", proxy._mouseMove);
            //Method binding for filtering data.
            if (model.filterSettings.filterBarMode == "immediate") {
                proxy._on(proxy.element, "keyup", ".e-filterbarcell input", proxy._filterBarHandler);
                proxy._off(proxy.element, "click", ".e-filterbarcell .e-checkbox")._on(proxy.element, "click", ".e-filterbarcell .e-checkbox", proxy._filterBarHandler);
            }
            proxy._on(proxy.element, "focus click", ".e-filterbarcell input", proxy._filterBarClose);
            proxy._on(proxy.element, "click", ".e-filterbarcell .e-cancel", proxy._filterBarClose);
            if (proxy.model.showGridCellTooltip || proxy.model.showGridExpandCellTooltip) {
                proxy._on(proxy.element, "mousemove", ".e-rowcell", proxy._mouseHover);
            }
            if (proxy.model.showGridCellTooltip) {
                proxy._on(proxy.element, "mousemove", ".e-headercelldiv", proxy._headermouseHover);
            }
            proxy._on(proxy.element, "mouseleave", ".e-rowcell", proxy._cellMouseLeave);
            proxy._on(proxy.element, "mouseleave", proxy._cellMouseLeave);            
            proxy._on(proxy.element, "mouseleave", ".e-headercelldiv", proxy._headerMouseLeave);
            proxy._on(proxy.element, "mouseleave", proxy._headerMouseLeave);
            

            //MOUSE WHEEL EVENT FOR GANTT CONTROL
            if (model.isFromGantt || this._frozenColumnsLength) {
                proxy._on(proxy.element, "mousewheel DOMMouseScroll", proxy._mouseWheel);
            }

            if (model.enableResize && model.isResponsive && !model.isFromGantt) {
                proxy._on($(window), "resize", proxy._windowResize);
            }
            proxy._enableEditingEvents();
            this._on(this.element, "click", ".e-unboundcelldiv button", this._unboundClickHandler);
            //Mouse right click event for tree grid


            if (model.contextMenuSettings.showContextMenu) {
                proxy._on(proxy.element, "keyup contextmenu taphold", this._preventContextMenu);
            }
        },
        /* prevent context menu action by menu option key*/
        _preventContextMenu: function (e) {
            
            if (e.keyCode == 93 || e.type == "contextmenu" || e.type == "taphold") {
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        },
        _mouseDownHandler:function(e)
        {
            var proxy = this,
                target = $(e.target);
            //Check the whether the mouse down on column menu and column menu items
            if (target.closest("div.e-tgheaderContextmenu").length == 0 &&target.closest("div.e-columnmenuitem").length == 0 && target.closest("div.e-columnMenuListDiv").length == 0 && ((!target.hasClass("e-columnmenu-icon") && !target.hasClass("e-column-filter-icon") && !target.hasClass("e-column-filtered-icon")) || $(e.target).closest("#" + proxy._id).length == 0) && target.closest("div.e-" + proxy._id + "filterStringSelector").length == 0 && target.closest("div#" + proxy._id + "filterStringDropDown_popup_list_wrapper").length == 0
                && target.closest("div#" + proxy._id + "filterStringInputBox_suggestion").length == 0 && target.closest("div.e-" + proxy._id + "filterNumericSelector").length == 0 && target.closest("div#" + proxy._id + "filterNumericDropDown_popup_list_wrapper").length == 0 &&
                target.closest("div.e-" + proxy._id + "filterDatepickerSelector").length == 0 && target.closest("div#" + proxy._id + "filterDatepickerDropDown_popup_list_wrapper").length == 0 &&
                target.closest("div#e-" + proxy._id + "filterDatepickerInputBox").length == 0 && target.closest("div.e-" + proxy._id + "filterDatetimepickerSelector").length == 0 && target.closest("div#" + proxy._id + "filterDatetimepickerDropDown_popup_list_wrapper").length == 0 &&
                target.closest("div#" + proxy._id + "filterDatetimepickerInputBox_popup").length == 0 && target.closest("div.e-" + proxy._id + "filterDropdownSelector").length == 0 && target.closest("div#" + proxy._id + "filterDropdownDropDown_popup_list_wrapper").length == 0 && target.closest("div.e-" + proxy._id + "filterBooleanSelector").length == 0 &&
                target.closest("div.e-excelfilter").length == 0 && !proxy._isExcelFilterClick(target))
                proxy._clearColumnMenu();
            //Check the whether the mouse down on context menu items and header context menu items
            if (!(target.hasClass("e-tgheaderContextmenu"))) {
                if (target.closest("div.e-menuitem").length == 0 && target.closest("div.e-columnmenuselection").length == 0 && target.closest("div.e-columnMenuListDiv").length == 0)
                    proxy._clearContextMenu();
            }
            //Check the detail template items on mouse down event
            if (target.closest("div.e-detailscellwrapperfly").length == 0)
                proxy._removeDetailsRow(e);            
        },

        _isExcelFilterClick: function (target)
        {
            var proxy = this,
                id = proxy._id;
            if (target.closest("#" + id + "number_CustomDrop1_popup").length == 0 && target.closest("#" + id + "number_CustomDrop2_popup").length == 0 &&
               target.closest("#" + id + "datetime_CustomDrop1_popup").length == 0 && target.closest("#" + id + "datetime_CustomDrop2_popup").length == 0 &&
               target.closest("#" + id + "date_CustomDrop1_popup").length == 0 && target.closest("#" + id + "date_CustomDrop2_popup").length == 0 &&
               target.closest("#" + id + "string_CustomDrop1_popup").length == 0 && target.closest("#" + id + "string_CustomDrop2_popup").length == 0 &&
               target.closest("#" + id + "datetime_CustomValue2_popup").length == 0 && target.closest("#" + id + "datetime_CustomValue1_popup").length == 0 &&
               target.closest("#e-" + id + "date_CustomValue2").length == 0 && target.closest("#e-" + id + "date_CustomValue1").length == 0 &&
                target.closest("#" + id + "string_CustomValue1_suggestion").length == 0 && target.closest("#" + id + "string_CustomValue1_suggestion").length == 0)
                return false;
            else
                return true;
        },
        // Auto scroll the content if mouse move out of grid area while dragging a row.
        _mouseout: function (e) {
            var proxy = this,
                model = proxy.model,
                topvalue, bottomScrollPos, topScrollPos,
                position = proxy._gridPosition,
                top = position.top, contentHeight = proxy._gridHeight,
                height = proxy._$gridHeaderContent.outerHeight() + top;

            if (model.toolbarSettings.showToolbar) {
                var id = model.isFromGantt ? proxy._id.replace("ejTreeGrid", "") : proxy._id;
                height += $("#" + id + "_toolbarItems").length > 0 ? $("#" + id + "_toolbarItems").outerHeight() : 0;
            }            
            if (model.allowPaging) {
                contentHeight = contentHeight - proxy.element.find(".e-pager").first().outerHeight();
            }
            if (model.showTotalSummary) {
                contentHeight = contentHeight - proxy._$totalSummaryRowContainer.outerHeight();
            }
            if (proxy._dragMouseDown) {
                var posx = position.left, posy = e.pageY;

                if (proxy.model.isFromGantt) {
                    var id = proxy._id.replace("ejTreeGrid", "");
                    var ganttbody = $("#"+id).find(".e-ganttviewerbodyContianer"),
                        isVscroll = ganttbody.ejScroller("isVScroll"),
                        max = isVscroll ? ganttbody.find(".e-content").get(0).scrollHeight - 1 : 0;
                    bottomScrollPos = ganttbody.ejScroller("isHScroll") ? (contentHeight + top - (model.rowHeight / 2) - 18) :
                                        (contentHeight + top - (model.rowHeight / 2));
                    }
                else{
                    var max = proxy.isVScroll() ? proxy.getMaxScrollHeight() + 1 : 0;
                    bottomScrollPos = proxy.getScrollElement().ejScroller("isHScroll") ? (contentHeight + top - (model.rowHeight / 2) - 18) :
                                           (contentHeight + top - (model.rowHeight / 2));
                }
                    topScrollPos = height + (model.rowHeight/2);
                   
                    //condition to whether the mouse pointer below the content.
                if (posy > bottomScrollPos) {
                        //Condition to check whether the scroller reaches the end.

                        if (max > (proxy._scrollTop)) {
                            if (!proxy._timerDragDown) {

                                //Timer started for scrolling the content till the end.
                                proxy._timerDragDown = window.setInterval(function () {
                                    if (max > proxy._scrollTop) {
                                        topvalue = proxy._scrollTop + 20;
                                        topvalue = topvalue > max ? max : topvalue;
                                        if (proxy.model.isFromGantt)
                                            ganttbody.ejScroller("scrollY", topvalue, true);
                                        else
                                            proxy.getScrollElement().ejScroller("scrollY", topvalue, true);                       
                                    }                                    
                                }, 100);
                            }
                        }
                        else {
                            proxy._timerDragDown && (proxy._timerDragDown = window.clearInterval(proxy._timerDragDown));
                        }
                    }
                    else {
                    proxy._timerDragDown && (proxy._timerDragDown = window.clearInterval(proxy._timerDragDown));
                    }
                    //condition to check if the mouse points above to content area.
                if (posy < topScrollPos && proxy._scrollTop != 0) {
                        if (proxy._scrollTop > 0) {
                            if (!proxy._timerDragUp) {
                                proxy._timerDragUp = window.setInterval(function () {
                                    if (proxy._scrollTop > 0) {
                                        topvalue = proxy._scrollTop - 20;                                        
                                        if (topvalue < 0)
                                            topvalue = 0;
                                        if (proxy.model.isFromGantt)
                                            ganttbody.ejScroller("scrollY", topvalue, true);
                                        else
                                            proxy.getScrollElement().ejScroller("scrollY", topvalue, true);
                                    }
                                }, 100);
                            }
                        }
                        else {
                            proxy._timerDragUp && (proxy._timerDragUp = window.clearInterval(proxy._timerDragUp));
                        }
                    }
                    else {
                    proxy._timerDragUp && (proxy._timerDragUp = window.clearInterval(proxy._timerDragUp));
                    }                
            }
        },       
        // This method is to get the row range to enable the drag row indicators consequently.
        getRange: function (record, index,$tr) {
            
            var proxy = this,

                model = proxy.model, rowHeight, position,
                roundOff = 0, height,rowTop = 0;
            rowHeight = $tr.length == 0 ? model.rowHeight : $tr[0].offsetHeight,
            position = proxy.getOffsetRect($("#" + proxy._id)[0]),
                height = proxy._$gridHeaderContent.outerHeight() + position.top;
                rowHeight += proxy._detailsRowHeight;
            if (!model.enableVirtualization)
                proxy._scrollTop = proxy.getScrollElement().ejScroller("scrollTop");
            if (model.toolbarSettings.showToolbar)
                height += $("#" + proxy._id + "_toolbarItems").length > 0 ? $("#" + proxy._id + "_toolbarItems").outerHeight() : 0;
            if (model.allowTextWrap) {
                if ($tr.length == 0) {
                    $tr = proxy._lastRow;
                }
                rowTop = $tr.offset().top;
            }
            else if (proxy._scrollTop != 0) {
                roundOff = rowHeight - proxy._scrollTop % rowHeight;
                rowTop = (index * rowHeight) + height + roundOff;
            } else {
                rowTop = (index * rowHeight) + height + roundOff;
            }
            // 7 is to equalize the height.
            var rowBottom = $tr.length == 0 ? rowTop + model.rowHeight : rowTop + $tr[0].offsetHeight,
                difference = rowBottom - rowTop,
                divide = difference / 3,
                topRowSegment = rowTop + divide,
                middleRowSegment = topRowSegment + divide,
                bottomRowSegment = middleRowSegment + divide,
                position = {
                    topRowSegment: topRowSegment,
                    middleRowSegment: middleRowSegment,
                    bottomRowSegment: bottomRowSegment
                };
            return position;
        },
        //Child validation to display the child indicator.
        _childValidation: function (record) {            
            var childIndex,
                proxy = this,
                draggedRecord = proxy._draggedRecord,
                parentItem = draggedRecord.parentItem,
                childRecords;
            if (parentItem) {
                childRecords = parentItem.childRecords;
                childIndex = childRecords.indexOf(this._draggedRecord);
                if (record == parentItem && childIndex != -1)
                    this._childItem = true;
            }
        },
        _isColumnHidable: function (column) {
            var model = this.model, visibleFrozenColumn = [], visibleUnfrozenColumn = [], returnValue = true;

            visibleFrozenColumn = this._frozenColumns.filter(function (value) {
                return value.visible == true;
            });
            visibleUnfrozenColumn = this._unFrozenColumns.filter(function (value) {
                return value.visible == true;
            });
            if (visibleFrozenColumn.length == 1 && visibleFrozenColumn[0].field == column.field) {
                returnValue = false;
            }
            if (visibleUnfrozenColumn.length == 1 && visibleUnfrozenColumn[0].field == column.field) {
                returnValue = false;
            }
            return returnValue;
        },
        _updateColumnMenuVisibility: function () {
            var model = this.model, visibleFrozenColumn = [], visibleUnfrozenColumn = [];
            if (model.showColumnChooser || model.contextMenuSettings.showContextMenu) {
                visibleFrozenColumn = this._frozenColumns.filter(function (value) {
                    return value.visible == true;
                });
                visibleUnfrozenColumn = this._unFrozenColumns.filter(function (value) {
                    return value.visible == true;
                });
                if (visibleFrozenColumn.length == 1) {
                    var checkBoxData = $("#" + this._id + "_columnMenu_" + visibleFrozenColumn[0].field.split('.').join("")).data("ejCheckBox");
                    if (checkBoxData)
                        checkBoxData.option("enabled", false);
                }
                if (visibleUnfrozenColumn.length == 1) {
                    var checkBoxData = $("#" + this._id + "_columnMenu_" + visibleUnfrozenColumn[0].field.split('.').join("")).data("ejCheckBox");
                    if (checkBoxData)
                        checkBoxData.option("enabled", false);
                }
            }
        },
        //to check valid drop
        _validDrop: function (draggedRecords, currentRecord) {
            var proxy = this;
            draggedRecords.filter(function (item) {
                if (item.hasChildRecords && currentRecord.dragState == true) {
                    var valid = $.inArray(currentRecord, item.childRecords);
                    if (valid == -1) {
                        proxy._validDrop(item.childRecords, currentRecord);
                    }
                    else {
                        currentRecord.dragState = false;
                        return;
                    }
                }
            });
        },

        //This method is to render the tooltip while dragging.
        _renderToolTip: function (e, element, args, $target) {
     
            var proxy = this,
                model = this.model,
                positions = [],
                doc = document,
                item,
                columns = proxy.model.columns,
                tooltipItemLength = model.dragTooltip.tooltipItems.length,
                 recordIndex,
                $tr = $target.closest('tr');

            // disable all the icons initially.
            $(".e-dragintend").find(".e-icon").css({ "display": "none" });
            $(".e-intendparent").find(".e-icon").css({ "display": "none" });
            $(".e-error").css({ "display": "none" });
            $(".e-treegridexpand").css({ "display": "inline-block" });
            $(".e-treegridcollapse").css({ "display": "inline-block" });

            if (proxy._isHierarchyFiltering)
                $("#" + proxy._id + "e-gridcontent").css({ 'cursor': 'no-drop' });
            //condition for allow down record on empty records
            if (!proxy._isHierarchyFiltering) {
                if ($tr.length == 0 && ($target.hasClass("e-movablecontainer") || $target.hasClass("e-gridcontent") || $target.hasClass("e-content"))) {
                    recordIndex = proxy._recordIndex;
                
                if (!proxy._currentRecord.parentItem) {
                    if (proxy._currentRecord.hasChildRecords)
                        if (proxy._currentRecord.expanded)
                            proxy._lastRow.find(".e-treegridexpand").css({ "display": "none" });
                        else
                            proxy._lastRow.find(".e-treegridcollapse").css({ "display": "none" });
                }
            }
        }
            else {
                recordIndex = proxy.getIndexByRow($tr);
                proxy._currentRecord = model.currentViewData[recordIndex]
            }

            var positions = {}, records, dragRecIndex, index,
            updatedRecords = proxy.getUpdatedRecords();
            proxy._insertAbove = false;
            proxy._insertAsChild = false;
            proxy._insertBelow = false;
            proxy._childItem = false;
            
          item = proxy._draggedRecord;

            if (recordIndex != proxy._draggedIndex)
                proxy._displayContextMenu = false;
                        
      // to get the record index to find its mouse position.            
            var records = proxy.getExpandedRecords(updatedRecords);
                proxy.getVisibleRange();
                var currentViewData = records.slice(proxy._visibleRange.top, proxy._visibleRange.bottom);
                if (proxy._scrollTop != 0) {
                    dragRecIndex = updatedRecords.indexOf(proxy._draggedRecord) - 1;
                    index = currentViewData.indexOf(proxy._currentRecord) - 1;
                }
                else {
                    dragRecIndex = updatedRecords.indexOf(proxy._draggedRecord);
                    var index = currentViewData.indexOf(proxy._currentRecord);
                }
            var currentIndex = updatedRecords.indexOf(proxy._currentRecord),
            isNextRecord = proxy._currentRecord && proxy._checkPrevNextRecord(proxy._draggedRecord, currentIndex, proxy._currentRecord.level, "next"),
            isPrevRecord = proxy._currentRecord && proxy._checkPrevNextRecord(proxy._draggedRecord, currentIndex, proxy._currentRecord.level, "prev"),
            posx = proxy._gridPosition.left, posy = e.pageY;

            if (proxy._currentRecord)
                positions = proxy.getRange(proxy._currentRecord, index, $tr);
                                           
            var isTopRowSegment = posy <= positions.topRowSegment,
                isMiddleRowSegment = (posy > positions.topRowSegment && posy <= positions.middleRowSegment),
                isBottomRowSegment = (posy > positions.middleRowSegment && posy <= positions.bottomRowSegment);
            /* check current record or else render previous records tootip*/
            if (proxy._currentRecord) {
                proxy.data = proxy._currentRecord;
                var classname = this._getrowName();
                proxy._childValidation(proxy._currentRecord);
                // This condition is to disapper the expand collapse icon if it is top most level.
                if (!proxy._isHierarchyFiltering) {
                    if (!proxy._currentRecord.parentItem) {
                        if (proxy._currentRecord.hasChildRecords)
                            if (proxy._currentRecord.expanded)
                                $tr.find(".e-treegridexpand").css({ "display": "none" });
                            else
                                $tr.find(".e-treegridcollapse").css({ "display": "none" });
                    }
                    else {
                        if (proxy._currentRecord.hasChildRecords)
                            if (proxy._currentRecord.expanded)
                                $tr.find(".e-treegridexpand").css({ "display": "inline-block" });
                            else
                                $tr.find(".e-treegridcollapse").css({ "display": "inline-block" });
                    }
                    proxy._validDrop(proxy._draggedRecords, proxy._currentRecord);
                    //To get the dropPosition
                    if (proxy._currentRecord.dragState == true && args.canDrop != false) {
                        if (isTopRowSegment && !isPrevRecord) {
                            args.dropPosition = "insertAbove";
                        }
                        else if (isMiddleRowSegment && proxy._childItem == false) {
                            args.dropPosition = "insertAsChild";
                        }
                        else if (isMiddleRowSegment && proxy._childItem == true) {
                            args.dropPosition = "invalidPosition";
                        }
                        else if (isBottomRowSegment && !isNextRecord || $tr.length == 0) {
                            args.dropPosition = "insertBelow";
                        }
                        else {
                            args.dropPosition = "invalidPosition";
                        }
                    }
                    else {
                        args.dropPosition = "invalidPosition";
                    }
                    proxy._trigger("rowDrag", args);
                    //To render the indicators according to its position.
                    if (proxy._currentRecord.dragState == true && args.canDrop != false) {
                        if (isTopRowSegment && !isPrevRecord) {
                            $(proxy.element).find("." + classname).find(".e-aboveIcon").css({ "display": "block" });
                            proxy._insertAbove = true;
                        }
                        else if (isMiddleRowSegment && proxy._childItem == false) {
                            $(proxy.element).find("." + classname).find(".e-childIcon").css({ "display": "block" });
                            proxy._insertAsChild = true;
                        }
                        else if (isMiddleRowSegment && proxy._childItem == true) {
                            $(proxy.element).find("." + classname).find(".e-cancelIcon").css({ "display": "block" });
                            proxy.cancelDrop = true;
                        }
                        else if (isBottomRowSegment && !isNextRecord || $tr.length == 0) {
                            $(proxy.element).find("." + classname).find(".e-belowIcon").css({ "display": "block" });
                            proxy._insertBelow = true;
                        }
                    }
                    else {
                        $(proxy.element).find("." + classname).find(".e-cancelIcon").css({ "display": "block" });
                        proxy.cancelDrop = true;
                    }
                }
            }

            $(proxy._dragmouseOverTooltip).css({
                "top": (posy + 20) + "px", "left": (posx + 15) + "px",
                'position': 'absolute',
                'z-index': proxy.getMaxZIndex() + 1,
                'padding': '0',
                'border-right': '0',
                'border-bottom': '0',
                'border-radius': '3px',
                'height': "auto",
            });                            
        },

        //Used for check whether the dragged record is previous or next to current record based on position argument
        //If it is previous or next to current record, this method return true otherwise return false.
        _checkPrevNextRecord:function(record,index,level, position)
        {
            var proxy = this,
                model = proxy.model,
                updatedRecords = proxy.getUpdatedRecords(),
                currentIndex = index;
            position == "next" ? index++ : index--;
            while(updatedRecords[index])
            {
                if (updatedRecords[index].level == level)
                {
                    if (updatedRecords[index] == record && record.parentItem == updatedRecords[currentIndex].parentItem)
                        return true;
                    return false;
                }
                position == "next" ? index++ : index--;
            }
            return false;
        },
        //Tooltip template for row drag and drop
        _createDragTooltipTemplate: function () {
            var proxy = this,
                td,               
                template = proxy.model.dragTooltip.tooltipTemplate,
                parentTr;
            if (template) {
                var templateString = template.charAt(0);
             
                if (templateString == "#")
                     parentTr = $(proxy.model.dragTooltip.tooltipTemplate)[0].innerHTML;
                else
                     parentTr = proxy.model.dragTooltip.tooltipTemplate;
            }            
            var templates = {};
            templates[proxy._id + "dragtooltipTemplate"] = parentTr;
            $.templates(templates);
        },       

        //render the cancel icon if drag over its child.
		_updateDragStateFalse: function (record, count) {
		    var currentRecord, proxy = this, length;
		    record.dragState = false;		   
		    if (record.hasChildRecords) {
		        length = record.childRecords.length;
		        for (var i = 0; i < length; i++) {
		            currentRecord = record.childRecords[i];
		            currentRecord.dragState = false;
		            if (currentRecord.hasChildRecords) {
		                count = proxy._updateDragStateFalse(currentRecord, count);
		            }
		        }
		    }
		    return;
		},

        //Turn all the records dragState to true once dragging finished.
		_updateDragStateTrue: function (record, count) {
		    var currentRecord, proxy = this, length;
		    if (!ej.isNullOrUndefined(record)) {
		        record.dragState = true;
		        if (record.hasChildRecords) {
		            length = record.childRecords.length;
		            for (var i = 0; i < length; i++) {
		                currentRecord = record.childRecords[i];
		                currentRecord.dragState = true;
		                if (currentRecord.hasChildRecords) {
		                    count = proxy._updateDragStateTrue(currentRecord, count);
		                }
		            }
		        }
		    }
		    return;
		},

		// Get XY coordinates for touch and non-touch device
		_getCoordinate: function (evt) {
		    var coor = evt;
		    if (evt.type == "touchmove" || evt.type == "touchstart" || evt.type == "touchend" || evt.type== "taphold" || evt.type == "tap")
		        coor = evt.originalEvent.changedTouches[0];
		    return coor;
		},

        // Get current target element by mouse position
        // window.pageXOffset && window.pageYOffset is used to find the accurate element position in IPad/IPhone
		_getElementByPosition: function (x, y) {
		    return $(document.elementFromPoint((x - window.pageXOffset), (y - window.pageYOffset)));
		},      

        //Mouse down action for to display a Drag tooltip   
		dragRecord: function (e) {
            /*verify ctlkey and shift key and mouse button*/
		    if (e.ctrlKey || e.shiftKey || e.which == 2 || e.which == 3)
		        return true;
		    
		    var proxy = this,
               model=proxy.model,
               recordIndex,
               args = {},               
               coord = proxy._getCoordinate(e),
               $target = $(e.target),
               $tr = $target.closest('tr'),
               record,
               tooltipbody,
		       updatedRecords = proxy.getUpdatedRecords(), setCanDrag = true;

		    window.clearTimeout(this._dragTooltipTimer);
		    this._dragTooltipTimer = null;

		    if (!proxy._mouseDown) {		       
		        return true;
		    }
                        
		    if (!$tr.hasClass("e-editedrow") && proxy.editFormValidate()) {
                if (model.selectionSettings.selectionMode == "cell")
                    proxy.clearSelection();
		       
		        proxy._clearColumnMenu();		        
		        proxy._removeDetailsRow();
		        proxy._saveCellHandler(e);
		        

		        proxy._posx = coord.pageX;
		        proxy._posy = coord.pageY;

		        if ($target.hasClass("e-summaryrowcell") || $target.hasClass("e-footersummaryrowcell")
                || $target.hasClass("e-summarytitle") || $target.closest("tr").hasClass("e-detailsrowexpanded"))
		            return;
		        if (!model.enableVirtualization)
		            proxy._currentIndex = proxy.getIndexByRow($tr);
		        else {
		            proxy._currentIndex = proxy.getIndexByRow($tr);
		            record = model.currentViewData[proxy._currentIndex];
		            proxy._currentIndex = updatedRecords.indexOf(record);
		        }
		        proxy._draggedIndex = recordIndex = proxy.getIndexByRow($tr);
		        proxy._draggedRecord = proxy.model.currentViewData[recordIndex];
		        if (ej.isNullOrUndefined(proxy._draggedRecord)) return;
		        args.draggedRowIndex = recordIndex;
		        args.draggedRow = proxy._draggedRecord;
                //to get dragged row collection for selected items
		        if (!model.isFromGantt && ((model.selectionSettings.selectionType == "checkbox" && model.selectedItems.length > 1 && model.currentViewData[proxy.getIndexByRow($tr)].checkboxState == "checked") || (model.selectionSettings.selectionType == "multiple"))) {
		            proxy._draggedRecords = $.extend([], model.selectedItems).reverse();
		        }
		        else
		            proxy._draggedRecords.push(proxy._draggedRecord);
		        args.draggedRecords = proxy._draggedRecords;

		        proxy._trigger("rowDragStart", args);
		        if (args.draggedRow && args.draggedRow.isSummaryRow) {
		            args.cancel = true;
		            args.draggedRow.canDrag = false
		        }
		        if (args.draggedRow.canDrag == false) setCanDrag = false;
		        $.extend([], proxy._draggedRecords).filter(function (item) {
		            if (item.canDrag == false) {		               
		                proxy._draggedRecords.splice(proxy._draggedRecords.indexOf(item), 1);
		                item.canDrag = true;		                
		            }
		        });
		        proxy._gridPosition = proxy.getOffsetRect($("#" + proxy._id)[0]);

		        if (proxy._frozenColumnsLength > 0 && recordIndex != -1) {
		            var tempTr, index = $tr.index();
		            if ($tr.closest(".e-movablecontentdiv").length > 0)
		                tempTr = $(proxy._gridRows[0])[recordIndex];
		            else
		                tempTr = $(proxy._gridRows[1])[recordIndex];
		            $tr = $tr.add(tempTr);
		        }

		        var posx = proxy._gridPosition.left, posy = coord.pageY,
		         width = model.isFromGantt ? model.ganttElement.width() : proxy._gridWidth,
		         element = $tr.clone();
		        width = width - 50;//to render tooltip inside the control container element
		        //Remove the hided columns.
		        element.find(".e-hide").remove();
                var tooltipItemLength = model.dragTooltip.tooltipItems.length,
		        tooltiptable = ej.buildTag("table.e-zerospace", "", { 'padding': '1', "width": width - 1, "border-collapse": "collapse" });
		        //to render the tooltip according the option given in the model.
		        if (proxy.model.dragTooltip.showTooltip) {
		            if (proxy._dragTooltip == false) {
		                if (!proxy.model.dragTooltip.tooltipTemplate && proxy.model.dragTooltip.tooltipItems.length == 0) {

		                    tooltipbody = ej.buildTag("tbody", "", {}, {});
		                    element.find(".e-treegridexpand").css({ "display": "none" });
		                    element.find("td.e-unboundcell").css({ "display": "none" });
		                    element.find("td.e-detailsrowcell").css({ "display": "none" });
		                    element.find(".e-treegridcollapse").css({ "display": "none" });
		                    $(element.find(".e-dragintend")).css({ "width": 0 });
		                    element.find(".e-intend").removeClass("e-intend");
		                    element.find(".e-rowcell ").removeClass("e-rowcell ").addClass("e-dragrowcell");
		                    element.addClass("e-dragtooltipbackground");
		                    if (model.isFromGantt)
		                        element.find("td:last").remove();
		                    if (element.length == 2 && this._frozenColumnsLength > 0) {
		                        $(element[0]).append($(element[1].childNodes));
		                        element.splice(1, 1);
		                    }
		                    tooltipbody.append(element);
		                    tooltiptable.append(tooltipbody);
		                    proxy._dragmouseOverTooltip = ej.buildTag("div.e-tooltipgantt e-js#tooltiptreegrid" + proxy._id + "", tooltiptable,
                                {
                                    "top": (posy + 20) + "px", "left": (posx + 15) + "px",
                                    'position': 'absolute',
                                    'overflow': 'hidden',
                                    'z-index': proxy.getMaxZIndex() + 1,
                                    'padding': '0',
                                    'border-radius': '3px',
                                    'border-right': '0',
                                    'border-bottom': '0',
                                    'width': width,
                                }, {});
		                    model.cssClass && $(proxy._dragmouseOverTooltip).addClass(model.cssClass);
		                    $(proxy._dragmouseOverTooltip).addClass("e-dragtooltipbackground").addClass("e-dragrowcell");		                    
		                    proxy._dragTooltip = true;
		                }
		                else if (tooltipItemLength != 0) {
		                    var columns = model.columns;
		                    tooltipbody = ej.buildTag("tbody", "", {}, {});
		                    var tooltiptr = ej.buildTag("tr.e-dragtooltipbackground", "", {}, {}),
		                        columnTooltipValue;
		                    for (var j = 0; j < tooltipItemLength; j++) {
		                        for (var i = 0; i < columns.length; i++) {
		                            //Skip the columns which is not visible in TreeGrid.
		                            if (columns[i].visible == false)
		                                continue;
		                            if (model.isFromGantt)
		                                columnTooltipValue = columns[i].mappingName
		                            else
		                                columnTooltipValue = columns[i].field;
		                            if (model.dragTooltip.tooltipItems[j] == columnTooltipValue) {
		                                var value = proxy._getCustomCellValue(proxy._draggedRecord, columns[i].field),
		                                    $td;
		                                if (columns[i].format)
		                                    value = proxy.formatting(columns[i].format, value, model.locale)
		                                if (!ej.isNullOrUndefined(value)) {
		                                    $td = ej.buildTag("td.e-dragrowcell", value.toString(), { "padding": "5px", "width": proxy.columnsWidthCollection[i], "height": model.rowHeight }, {});
		                                    tooltiptr.append($td);
		                                }
		                                tooltiptr.append($td);
		                                break;
		                            }
		                        }
		                    }
		                    tooltipbody.append(tooltiptr);
		                    tooltiptable.append(tooltipbody);
		                    proxy._dragmouseOverTooltip = ej.buildTag("div.e-tooltipgantt e-js#tooltiptreegrid" + proxy._id + "", tooltiptable,
                                {
                                    "top": (posy + 20) + "px", "left": (posx + 15) + "px",
                                    'position': 'absolute',
                                    'z-index': proxy.getMaxZIndex() + 1,
                                    'padding': '0',
                                    'border-right': '0',
                                    'border-bottom': '0',
                                    'border-radius': '3px',
                                    'height': "auto",
                                    'width': width,
                                    'overflow': 'hidden'
                                }, {});
		                    model.cssClass && $(proxy._dragmouseOverTooltip).addClass(model.cssClass);
		                    $(proxy._dragmouseOverTooltip).addClass("e-dragtooltipbackground").addClass("e-dragrowcell");		                    
		                    proxy._dragTooltip = true;
		                }
		                else if (proxy.model.dragTooltip.tooltipTemplate) {
		                    proxy._dragmouseOverTooltip = ej.buildTag("div.e-tooltipgantt e-js#tooltiptreegrid" + proxy._id + "", "",
                                {
                                    "top": (posy + 20) + "px", "left": (posx + 15) + "px",
                                    'position': 'absolute',
                                    'z-index': proxy.getMaxZIndex() + 1,
                                    'padding': '0',
                                    'border-right': '0',
                                    'border-bottom': '0',
                                    'border-radius': '3px',
                                    'height': "auto"
                                }, {});
		                    model.cssClass && $(proxy._dragmouseOverTooltip).addClass(model.cssClass);
		                    proxy.tooltipState = "TemplateID";
		                    tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "dragtooltipTemplate"](proxy._draggedRecord), {}, {});
		                    proxy._dragmouseOverTooltip[0].innerHTML = "<table>" + tooltipbody[0].innerHTML + "</table>";
		                    proxy._dragTooltip = true;
		                }                                       
		            }
		        }
		        
		        if (proxy._draggedRecord) {		            
		            proxy._draggedElement = $tr;
		            proxy._updateDragStateFalse(proxy._draggedRecord);		                                
		            proxy._dragMouseDown = true;		            
                        //if(ej.isTouchDevice() || (ej.browserInfo().name == "chrome" && e.type == "touchstart"))
                        //    $(document.body).bind("touchmove", $.proxy(proxy.dragToolTip, proxy));
		            //else
		            if (e.type == "touchstart") {
		                if (!proxy._isHierarchyFiltering)
		                    $(document.body).append(proxy._dragmouseOverTooltip);
		                proxy._off(proxy.element, "touchmove", "#" + proxy._id + "e-gridcontent", proxy._touchScroll);
		                proxy._on(proxy.element, "touchmove", ".e-treegridrows, .e-templatecell", proxy.dragToolTip);
		            }		                
		            else{
		                proxy._off(proxy.element, "mousemove", "#" + proxy._id + "e-gridcontent", proxy._touchScroll);
		                proxy._on(proxy.element, "mousemove", ".e-gridcontent, .e-templatecell", proxy.dragToolTip);
                    }
		        }

		        if (args.cancel || !setCanDrag) {
		            proxy._dragMouseDown = false;
		            proxy._updateDragStateTrue(proxy._draggedRecord);
		            proxy._dragTooltip = false;
		            proxy._dragmouseOverTooltip && proxy._dragmouseOverTooltip.remove();
		            proxy._dragmouseOverTooltip = null;
		            if (e.type == "touchstart")
		                
		                proxy._off(proxy.element, "touchmove", ".e-treegridrows, .e-templatecell", proxy.dragToolTip);
		            else
		                proxy._off(proxy.element, "mousemove", ".e-gridcontent, .e-templatecell", proxy.dragToolTip);
		        }
		    }
		},

        //Mouse move action for to move the drag tooltip
		dragToolTip: function (e) {
		    var proxy = this,
                model = proxy.model,
                currentViewData = model.currentViewData,
                args = {},
                draggedrows = [],
                length,
                recordIndex, item,
                $trClone, $target, $tr,
                $tr_summary,
                coord = proxy._getCoordinate(e);
            e.preventDefault();
            
            var diffX = Math.abs(coord.pageX - proxy._posx),
                diffY = Math.abs(coord.pageY - proxy._posy);

            if (ej.isNullOrUndefined(proxy._posx) || ej.isNullOrUndefined(proxy._posy) || (diffX < 10 && diffY < 10))
                return;                        
            
            if (proxy._dragMouseDown == true && proxy.model.allowDragAndDrop == true) {
                if (proxy._batchEditStarts) {
                    proxy._batchSaveLostWarning("Drag");
                    return true;
                }
                if (e.type == "touchmove")
                    $target = proxy._getElementByPosition(coord.pageX, coord.pageY);
                else {
                    $target = $(e.target);
                    $(document.body).append(proxy._dragmouseOverTooltip);
                }
                $tr = $target.closest('tr');
                //to select row while mousedown for drag drop without row selection
                if (model.allowSelection == true && !ej.isNullOrUndefined(proxy._draggedRecord) && proxy._draggedRecord.isSelected == false) {
                    proxy.clearSelection(-1);
                    proxy._selectDraggedRow($tr);
                    proxy._cancelSaveTools();
                }

            //condition for when down record on empty records
                if ($tr.length == 0 && ($target.hasClass("e-movablecontainer") || $target.hasClass("e-gridcontent") || $target.hasClass("e-content"))) {
                    if (model.enableVirtualization) {
                        proxy._currentRecord = currentViewData[currentViewData.length - 1];
                    proxy._insertBelow = true;
                    proxy._lastRow = ej.TreeGrid.getRowByIndex(proxy, currentViewData.length - 1);
                    proxy._recordIndex = currentViewData.length - 1;
                }
                    else {
                        var collapsedRecords = proxy.getExpandedRecords(currentViewData);
                        proxy._currentRecord = collapsedRecords[collapsedRecords.length - 1];
                    if (model.allowPaging) {
                        proxy._lastRow = ej.TreeGrid.getRowByIndex(proxy, currentViewData.length - 1);
                    }
                    else {
                        var lastRecordIndex = model.updatedRecords.indexOf(proxy._currentRecord);
                        proxy._lastRow = ej.TreeGrid.getRowByIndex(proxy, lastRecordIndex);
                    }
                    proxy._recordIndex = proxy._indexOfLastRow = proxy.getIndexByRow(proxy._lastRow);
                }
                recordIndex = proxy._recordIndex;
            }
            else {
                var recordIndex = proxy.getIndexByRow($tr);
                proxy._currentRecord = model.currentViewData[recordIndex]
                }
                var updatedRecords = proxy.getUpdatedRecords();

              if (recordIndex != -1) {
                  item = proxy.model.currentViewData[recordIndex];
                  $tr = ej.TreeGrid.getRowByIndex(proxy, proxy._currentIndex);
                  $trClone = $tr.clone();
                    //Remove the hided columns.
                    $trClone.find(".e-hide").remove();
                    proxy._dragTargetItem = item;
                    args.targetRowIndex = recordIndex;
                    args.targetRow = item;
                    args.canDrop = true;
                    args.draggedRow = proxy._draggedRecord;
                    args.draggedRowIndex = updatedRecords.indexOf(proxy._draggedRecord);
                    args.draggedRecords = proxy._draggedRecords;
                    proxy._renderToolTip(coord, $trClone, args, $target);                 
                    if (args.targetRow && args.targetRow.isSummaryRow) {
                        proxy._draggedRecord.canDrop = false;
                        $(".e-dragintend").find(".e-icon").css({ "display": "none" });
                        $(".e-intendparent").find(".e-icon").css({ "display": "none" });
                    }
                    else if (args.canDrop == false) {
                        proxy._draggedRecord.canDrop = false;
                    }
                    else {
                        proxy._draggedRecord.canDrop = true;
                    }
                } else if (proxy._draggedRecord && proxy._dragMouseDown) {
                    item = null;
                    $tr = ej.TreeGrid.getRowByIndex(proxy, proxy._currentIndex);
                    $trClone = $tr.clone();
                    $tr_summary = $target.closest('tr'),
                    args.targetRowIndex = null;
                    args.targetRow = null;
                    proxy._dragTargetItem = null;
                    args.canDrop = true;
                    args.draggedRow = proxy._draggedRecord;
                    args.draggedRowIndex = proxy._draggedRecord.index;
                    args.dropPosition = "invalidPosition";
                    proxy._trigger("rowDrag", args);
                    if (!$tr_summary.hasClass("e-footersummaryrow"))
                        proxy._renderToolTip(coord, $trClone, args, $target);
                }
                proxy._mouseout(coord);
            }
        },

        _mouseupHandler: function(e){
            var proxy = this,
                model = proxy.model;
            
            if (e.type == "touchend")
                proxy._off(proxy.element, "touchmove", "#" + proxy._id + "e-gridcontent", proxy._touchScroll);
            else
                proxy._off(proxy.element, "mousemove", "#" + proxy._id + "e-gridcontent", proxy._touchScroll);

            proxy._off($(document), "mouseup touchend", proxy._mouseupHandler);
            proxy._mouseDown = false;
            proxy._isTouchEvent = false;
            window.clearTimeout(proxy._dragTooltipTimer);
            if (model.allowDragAndDrop && proxy._dragMouseDown)
                proxy.dragMouseUp(e);

            if (model.contextMenuSettings.showContextMenu && proxy._contextMenuHandler && proxy._displayContextMenu) {
                proxy._rightClick(e);
            }
            else
                proxy._contextMenuHandler = false;
            proxy._displayContextMenu = true;
            proxy._dy = proxy._dx = 0;
        },
        _performDragAndDrop: function (draggedRecord, droppedRecord,recordIndex,args,arg ) {
            var proxy = this,
                model = proxy.model,
                editMode = model.editSettings.editMode.toLowerCase(),
                childRecords, droppedRecordIndex,
                count = 0,
                length = model.selectedItems.length,
                dragLength = proxy._draggedRecords.length,
                draggedRecords = [],
                recordCollection = {};
            for (var j = 0; j < dragLength; j++) {
                draggedRecord = proxy._draggedRecord = proxy._draggedRecords[j];
                var flatRecords = model.flatRecords;
                args.previousParentItem = draggedRecord.parentItem ? $.extend({}, draggedRecord.parentItem) : draggedRecord.parentItem;
                if (!ej.isNullOrUndefined(draggedRecord.parentItem)) {
                    args.previousParentItem.childRecords = $.extend([], draggedRecord.parentItem.childRecords);
                    args.parentChildState = draggedRecord.parentItem.hasChildRecords;
                    args.parentExpandedState = draggedRecord.parentItem.expanded;
                }
                if (args.requestType != "rowIndexUpdate") {
                    arg.targetRow = $.extend({}, proxy._droppedRecord);
                    arg.targetRow.item = $.extend({}, proxy._droppedRecord.item);
                    arg.targetRowIndex = model.updatedRecords.indexOf(droppedRecord);
                    arg.draggedRow = $.extend({}, proxy._draggedRecord);
                    arg.draggedRow.item = $.extend({}, proxy._draggedRecord.item);
                    arg.draggedRowIndex = model.updatedRecords.indexOf(draggedRecord);
                }
                args.previousItem = ej.isNullOrUndefined(arg) ? $.extend({}, proxy._draggedRecord) : arg.draggedRow;
                args.previousItemIndex = flatRecords.indexOf(proxy._draggedRecord);
                args.previousTarget = proxy._droppedRecord;
                args.previousTargetItemIndex = flatRecords.indexOf(proxy._droppedRecord);
                args.clonedTarget = $.extend({}, proxy._droppedRecord);
                args.hasChildRecords = droppedRecord.hasChildRecords;
                args.expanded = droppedRecord.expanded;
                args.childIndex = args.previousParentItem ? args.previousParentItem.childRecords.indexOf(draggedRecord) : 0;
                args.previousLevel = draggedRecord.level;
                var draggedrows = [];

                if (droppedRecord.dragState == true) {
                    proxy._updateDragStateTrue(draggedRecord);

                    if (proxy._insertAbove == true || proxy._insertBelow == true || proxy._insertAsChild == true) {
                        if (!proxy.model.isEdit && !proxy._isRowEdit)
                            proxy._cancelSaveTools();
                        for (var i = 0; i < length; i++)
                            proxy.clearSelection(model.selectedItems[i]);

                        proxy._deleteDragRow();
                        var recordIndex1 = flatRecords.indexOf(droppedRecord);
                        // Update checkbox state of parent record of dragged record
                        if (proxy._checkboxSelection && model.selectionSettings.enableHierarchySelection) {
                            draggedRecord.parentItem && proxy._updateParentSelection(draggedRecord.parentItem);
                        }

                        //Condition to splice above to the dropped record.
                        if (proxy._insertAbove == true) {
                            args.index = recordIndex1;
                            draggedRecord.parentItem = flatRecords[recordIndex1].parentItem;
                            draggedRecord.level = flatRecords[recordIndex1].level;
                            flatRecords.splice(recordIndex1, 0, draggedRecord);
                            model.updatedRecords.splice(recordIndex1, 0, draggedRecord);
                            if (model.isFromGantt)
                                model.ids.splice(recordIndex1, 0, (draggedRecord.taskId).toString());
                            if (draggedRecord.hasChildRecords) {
                                var level = 1;
                                proxy._updateChildRecord(draggedRecord, recordIndex1);
                                proxy._updateChildRecordLevel(draggedRecord, level);
                            }
                            if (droppedRecord.parentItem) {
                                childRecords = droppedRecord.parentItem.childRecords;
                                droppedRecordIndex = childRecords.indexOf(droppedRecord);
                                childRecords.splice(droppedRecordIndex, 0, draggedRecord);
                                //Update hierarchyRowIndex for level 1 and above records
                                proxy._updateHierarchyRowIndexData(args, childRecords, droppedRecordIndex);
                            }
                        }

                            //condition to splice below to the dropped record.
                        else if (proxy._insertBelow == true) {
                            args.index = recordIndex1 + 1;
                            if (!droppedRecord.hasChildRecords) {
                                flatRecords.splice(recordIndex1 + 1, 0, draggedRecord);
                                model.updatedRecords.splice(recordIndex1 + 1, 0, draggedRecord);
                                if (model.isFromGantt)
                                    model.ids.splice(recordIndex1 + 1, 0, (draggedRecord.taskId).toString());
                            }
                            else {
                                count = proxy.getChildCount(droppedRecord, 0);
                                flatRecords.splice(recordIndex1 + count + 1, 0, draggedRecord);
                                model.updatedRecords.splice(recordIndex1 + count + 1, 0, draggedRecord);
                                if (model.isFromGantt)
                                    model.ids.splice(recordIndex1 + count + 1, 0, (draggedRecord.taskId).toString());
                            }
                            draggedRecord.parentItem = flatRecords[recordIndex1].parentItem;
                            draggedRecord.level = flatRecords[recordIndex1].level;
                            if (draggedRecord.hasChildRecords) {
                                var level = 1;
                                proxy._updateChildRecordLevel(draggedRecord, level);
                                proxy._updateChildRecord(draggedRecord, recordIndex1 + count + 1);
                            }
                            if (droppedRecord.parentItem) {
                                childRecords = droppedRecord.parentItem.childRecords;
                                droppedRecordIndex = childRecords.indexOf(droppedRecord) + 1;
                                childRecords.splice(droppedRecordIndex, 0, draggedRecord);
                                //Update hierarchyRowIndex for level 1 and above records
                                proxy._updateHierarchyRowIndexData(args, childRecords, droppedRecordIndex);
                            }                            
                        }

                            // Condition to insert as child to the dropped Record.
                        else if (proxy._insertAsChild == true) {
                            args.index = recordIndex1 + 1;
                            if (!draggedRecord.hasChildRecords) {
                                flatRecords.splice(recordIndex1 + 1, 0, draggedRecord);
                                model.updatedRecords.splice(recordIndex1 + 1, 0, draggedRecord);
                                if (model.isFromGantt)
                                    model.ids.splice(recordIndex1 + 1, 0, (draggedRecord.taskId).toString());
                                proxy._recordLevel(recordIndex, args);
                            }
                            else {
                                flatRecords.splice(recordIndex1 + 1, 0, draggedRecord);
                                model.updatedRecords.splice(recordIndex1 + 1, 0, draggedRecord);
                                if (model.isFromGantt)
                                    model.ids.splice(recordIndex1 + 1, 0, (draggedRecord.taskId).toString());
                                proxy._recordLevel(recordIndex, args);
                                if (droppedRecord.hasChildRecords)
                                    droppedRecord.expanded = proxy._isLoadonDemand ? droppedRecord.isChildRetrieved : droppedRecord.expanded;
                                proxy._updateChildRecord(draggedRecord, recordIndex1 + 1, droppedRecord.expanded);
                            }
                        }
                    }
                    //update checkbox state of parent record and header of dropped record
                    if (proxy._checkboxSelection && model.selectionSettings.enableHierarchySelection) {
                        draggedRecord.parentItem && proxy._updateParentSelection(draggedRecord.parentItem);
                        proxy.selectAllRows();
                    }
                    if (draggedRecord.parentItem == null) {
                        var parentRecords = model.parentRecords,
                            newPIndex = parentRecords.indexOf(proxy._droppedRecord);                        
                        if (proxy._insertBelow == true)
                            parentRecords.splice(newPIndex + 1, 0, draggedRecord);
                        else if (proxy._insertAbove == true)
                            parentRecords.splice(newPIndex, 0, draggedRecord);
                        //Update hierarchyRowIndex for level 0 records
                        var pIndex = proxy._insertBelow == true ? newPIndex + 1 : newPIndex;
                        proxy._updateHierarchyRowIndexData(args, parentRecords, pIndex);
                    }
                }
                draggedRecords.push(draggedRecord);
            }
            recordCollection.draggedRecords = draggedRecords;
            recordCollection.draggedRecord = draggedRecord;
            recordCollection.droppedRecord = droppedRecord;
            return recordCollection;
        },
        _updatedMovedRow: function (draggedRecord, droppedRecord, dropPosition, args, rindex1, draggedRecords) {
            var proxy = this,
                model = proxy.model;            
            args.draggedRow = draggedRecord;
            args.targetRow = droppedRecord;
            args.droppedPosition = dropPosition;
            if (!model.isFromGantt && draggedRecords) {
                for (var i = 0; i < draggedRecords.length; i++) {
                    proxy._draggedRecord = draggedRecords[i];
                    proxy._updateDataSource();
                }
            }
            else
                proxy._updateDataSource();
            /*update summary rows collection*/
            if (model.showSummaryRow && proxy._insertAsChild == true)
                proxy._createSummaryRow(args);
            if (model.enableWBS) {
                var ddSiblings;
                if (draggedRecord.parentItem)
                    ddSiblings = draggedRecord.parentItem.childRecords;
                else {
                    var flatData = model.flatRecords,
                        Level0 = flatData.filter(function (item) {
                            return item && item.level == 0;
                        });
                    ddSiblings = Level0;
                }
                var ddIndex = ddSiblings.indexOf(draggedRecord),
                    selectedRecords = ddSiblings.slice(ddIndex, ddSiblings.length),
                    parentVal = draggedRecord.parentItem ? draggedRecord.parentItem.WBS : null,
                    lastVal = ddIndex + 1;
                proxy.reCalculateWBS(selectedRecords, lastVal, parentVal);
            }
            if (model.isFromGantt) {
                var rindex2 = model.flatRecords.indexOf(draggedRecord),
                    rindex = rindex2 < rindex1 ? rindex2 : rindex1;
                proxy.updateSerialNumber(rindex);
                if (model.enableSerialNumber) {
                    if (dropPosition == "insertAsChild")
                        rindex -= 1;
                    proxy.updateSerialNumberPredecessors(rindex);
                }
            }
            proxy.processBindings(args);
            if (model.enableAltRow && model.currentViewData.length > 0)
                ej.TreeGrid.updateAltRow(proxy, proxy.model.currentViewData[0], 0, 0);
        },
        _navigatePager:function(rowIndex){
            var proxy = this, model = proxy.model,
            pageSize = model.pageSettings.pageSize,pageIndex;
            if (model.pageSettings.pageSizeMode == ej.TreeGrid.PageSizeMode.Root) {
                var rootParent = proxy._getRootParent(model.updatedRecords[rowIndex]);
                rowIndex = model.parentRecords.indexOf(rootParent);
            }
            //rowIndex + 1 to equate the record count in a page
            pageIndex = Math.ceil((rowIndex + 1) / pageSize);            
            proxy.gotoPage(pageIndex);
        },
        _getRootParent: function (draggedRecord) {
            var proxy = this;
            if (ej.isNullOrUndefined(draggedRecord.parentItem)) {
                return draggedRecord;
            }
            else {
                return  proxy._getRootParent(draggedRecord.parentItem);
            }            
        },
        moveRow: function (fromIndex, toIndex, position) {
            var proxy = this, model = proxy.model,
                 args = {}, newArgs = {};
            proxy._cancelEditState();
            if (model.editSettings.editMode.toLowerCase() == "batchediting" && proxy._batchEditStarts)
                return false;
            if (ej.isNullOrUndefined(toIndex)) {
                if (position == "above" || position == "child")
                    toIndex = fromIndex - 1;
                else if (position == "below")
                    toIndex = fromIndex + 1;
            }
            var draggedRecord = model.updatedRecords[fromIndex],
            droppedRecord = model.updatedRecords[toIndex];
            //Skip the summary row while moving records as child
            if (droppedRecord && droppedRecord.isSummaryRow) {
                droppedRecord = proxy._getNextRecord(toIndex, model.updatedRecords, position);
            }
            if (ej.isNullOrUndefined(draggedRecord) || ej.isNullOrUndefined(droppedRecord) || draggedRecord.isSummaryRow == true || droppedRecord.isSummaryRow == true || !proxy.getExpandStatus(draggedRecord) || !proxy.getExpandStatus(droppedRecord)) return false;
            proxy._draggedRecord = draggedRecord;
            proxy._droppedRecord = droppedRecord;
            proxy._draggedRecords.push(draggedRecord);
            args.currentRecord = draggedRecord;
            args.targetRecord = droppedRecord;
            args.currentRowIndex = fromIndex;
            args.targetRowIndex = toIndex;
            args.dropPosition = position;
            args.requestType = "rowIndexUpdate";
            proxy._moveRow = true;
            if (!proxy._trigger("actionBegin", args)) {
                proxy._validDrop(proxy._draggedRecords, droppedRecord);
                if (droppedRecord.dragState == true) {
                    if (position == "above")
                        proxy._insertAbove = true;
                    else if (position == "below")
                        proxy._insertBelow = true;
                    else if (position == "child" && $.inArray(draggedRecord, droppedRecord.childRecords) == -1)
                        proxy._insertAsChild = true;
                    else {
                        proxy._resetPrivateProperties();
                        return false;
                    }
                    proxy._performDragAndDrop(draggedRecord, droppedRecord, fromIndex, args);
                    proxy._updatedMovedRow(draggedRecord, droppedRecord, position, args);
                    if (model.allowPaging) {
                        proxy._navigatePager(model.updatedRecords.indexOf(draggedRecord));
                    }
                    proxy.updateScrollBar(proxy.getUpdatedRecords().indexOf(draggedRecord));
                    //to select row while mousedown for drag drop without row selection
                    if (model.allowSelection == true) {
                        proxy.clearSelection(-1);
                        proxy._selectDraggedRow();
                        proxy._cancelSaveTools();
                    }
                    newArgs.currentRecord = draggedRecord;
                    newArgs.targetRecord = droppedRecord;
                    newArgs.currentRowIndex = model.updatedRecords.indexOf(draggedRecord);
                    newArgs.targetRowIndex = model.updatedRecords.indexOf(droppedRecord);
                    newArgs.dropPosition = args.dropPosition;
                    newArgs.requestType = args.requestType;
                    proxy._trigger("actionComplete", newArgs);

                    var cArgs = {};
                    cArgs.draggedRowIndex = newArgs.currentRowIndex;
                    cArgs.targetRowIndex = newArgs.targetRowIndex;
                    cArgs.requestType = "dragAndDrop";
                    proxy._updateAction(cArgs);
                    proxy._resetPrivateProperties();
                    return true;
                }
                else {
                    droppedRecord.dragState = true;
                    proxy._resetPrivateProperties();
                    return false;
                }
            }

        },
        //Mouse up event for drag and drop
        dragMouseUp: function (e) {
            var args = {},
                arg = {},
                newArgs={},
                proxy = this,
                model = proxy.model, $target, $tr, draggedRecords,
                draggedRecord = proxy._draggedRecord,
                currentRecord = proxy._currentRecord, droppedRecord,
                canDrop,
                dropPosition, coord = proxy._getCoordinate(e),
                rindex1 = model.flatRecords.indexOf(draggedRecord);
            draggedRecord.isDragged = true;
            proxy._timerDragDown && (proxy._timerDragDown = window.clearInterval(proxy._timerDragDown));
            proxy._timerDragUp && (proxy._timerDragUp = window.clearInterval(proxy._timerDragUp));
            
            // unbind the drag events once row dropped
            if (model.allowDragAndDrop) {
                if (e.type == "touchstart")
                    proxy._off(proxy.element, "touchmove", ".e-treegridrows, .e-templatecell", proxy.dragToolTip);
                else
                    proxy._off(proxy.element, "mousemove", ".e-gridcontent, .e-templatecell", proxy.dragToolTip);

                if (ej.isNullOrUndefined(draggedRecord) || proxy._draggedRecords.length > 1)
                    canDrop = true;
                else
                    canDrop = draggedRecord.canDrop;
            }

            window.clearTimeout(proxy._dragTooltipTimer);
            proxy._dragMouseDown = false;
            $(proxy._dragmouseOverTooltip).remove();
            proxy._dragTooltip = false;

            if (e.type == "touchend")
                $target = proxy._getElementByPosition(coord.pageX, coord.pageY);
            else
                $target = $(e.target);
          

            $tr = $target.closest('tr');
            if (proxy._isHierarchyFiltering)
                $("#" + proxy._id + "e-gridcontent").css({ 'cursor': 'default' });
            $(".e-dragintend").find(".e-icon").css({ "display": "none" });
            $(".e-intendparent").find(".e-icon").css({ "display": "none" });
            var targetItem = model.currentViewData[proxy.getIndexByRow($tr)];
            if (this.cancelDrop == true && !ej.isNullOrUndefined(targetItem) && targetItem.parentItem == null) {
                var targetTr = ej.TreeGrid.getRowByIndex(this, model.updatedRecords.indexOf(targetItem));
                if (targetItem.expanded)
                    targetTr.find(".e-treegridexpand").css({ "display": "inline-block" });
                else
                    targetTr.find(".e-treegridcollapse").css({ "display": "inline-block" });
            }
            proxy._dragMouseLeave = true;
            if ($target.closest("#" + proxy._id).length == 1 && $target.closest(".e-gridcontent").length == 1 && !ej.isNullOrUndefined(draggedRecord) && proxy._dropCancel == false) {
                
                if (model.allowDragAndDrop && canDrop) {
                    proxy._dragMouseLeave = false;
                    var compareIndex;
                    //condition for allow down record on empty records
                    if ($tr.length == 0) {
                        recordIndex = proxy._indexOfLastRow;
                        compareIndex = recordIndex;
                        if (model.enableVirtualization) {
                            proxy._droppedRecord = model.currentViewData[model.currentViewData.length - 1];
                        }
                        else {
                            if (model.currentViewData[model.currentViewData.length - 1].expanded) {
                                proxy._insertBelow = true;
                                proxy._droppedRecord = model.currentViewData[model.currentViewData.length - 1];
                            }
                            else {
                                var collapsedRecords = proxy.getExpandedRecords(model.currentViewData);
                                proxy._droppedRecord = collapsedRecords[collapsedRecords.length - 1];
                            }
                        }
                    }
                    else {
                        var recordIndex = proxy.getIndexByRow($tr);
                        proxy._droppedRecord = model.currentViewData[recordIndex];
                        compareIndex = model.updatedRecords.indexOf(proxy._droppedRecord);
                    }

                  
                    if (compareIndex != proxy._currentIndex && recordIndex != -1 && proxy._draggedRecords.length != 0) {
                        if (proxy._droppedRecord.dragState == true) {
                            //to splice the record while we drop on selected item itself
                            if ($.inArray(proxy._droppedRecord, proxy._draggedRecords) != -1) {
                                var index = proxy._draggedRecords.indexOf(proxy._droppedRecord);
                                proxy._draggedRecords.splice(index, 1);
                            }                           
                            //to maintain hierarchy while dropping multiple records using checkbox
                            if (model.selectionSettings.selectionType == "checkbox" && model.selectionSettings.enableHierarchySelection == true) {
                                var checkedRecords = $.extend([], proxy._draggedRecords);
                                checkedRecords.filter(function (item) {
                                    if (item.parentItem && item.parentItem.checkboxState == "checked") {
                                        proxy._draggedRecords.splice(proxy._draggedRecords.indexOf(item), 1);
                                    }                                   
                                });
                            }
                        }
                        if (proxy._insertAbove == true && proxy._draggedRecords.length > 1)
                            proxy._draggedRecords.reverse();

                        if (proxy._insertAbove) dropPosition = "insertAbove";
                        else if (proxy._insertBelow) dropPosition = "insertBelow";
                        else if (proxy._insertAsChild) dropPosition = "insertAsChild";

                        newArgs.draggedRecords = proxy._draggedRecords;
                        newArgs.draggedRow = draggedRecord;
                        newArgs.draggedRow.item = draggedRecord.item;
                        newArgs.targetRow = proxy._droppedRecord;
                        newArgs.draggedRowIndex = model.updatedRecords.indexOf(draggedRecord);
                        newArgs.targetRowIndex = model.updatedRecords.indexOf(proxy._droppedRecord);
                        newArgs.dropPosition = dropPosition;
                        droppedRecord = proxy._droppedRecord;
                        if (!proxy._trigger("rowDropActionBegin", newArgs)) {
                            //to splice the canDrop false item from dragged records collection
                            var clonedDraggedRecord = $.extend([], proxy._draggedRecords);
                            clonedDraggedRecord.filter(function (item) {
                                if (item.canDrop == false) {
                                    proxy._draggedRecords.splice(proxy._draggedRecords.indexOf(item), 1);
                                    item.canDrop = true;
                                }
                                if (proxy._draggedRecords.length == 0) droppedRecord.dragState = false;
                            });
                            var recordCollection = this._performDragAndDrop(draggedRecord, droppedRecord, recordIndex, args, arg);
                            draggedRecord = recordCollection.draggedRecord;
                            draggedRecords = recordCollection.draggedRecords;
                            droppedRecord = recordCollection.droppedRecord;                           
                            args.requestType = "dragAndDrop";
                            if (droppedRecord.dragState == true && !proxy._isHierarchyFiltering) {
                                proxy._updatedMovedRow(draggedRecord, droppedRecord, dropPosition, args, rindex1,draggedRecords);
                                if (!model.isFromGantt)
                                    arg.draggedRecords = draggedRecords;
                                arg.draggedRow = args.draggedRow;                                                            
                                arg.draggedRow.item = args.draggedRow.item;
                                arg.draggedRowIndex = model.updatedRecords.indexOf(draggedRecord);
                                arg.targetRowIndex = model.updatedRecords.indexOf(droppedRecord);
                                arg.requestType = dropPosition;
                                args.isFromRevertDragging = false;
                                proxy._trigger("rowDragStop", arg);
                                if (arg.cancel) {
                                    args.isFromRevertDragging = true;
                                    proxy._revertDragging(args);
                                }
                                else {
                                    var cArgs = {};                                    
                                    cArgs.draggedRecords = draggedRecords;
                                    cArgs.draggedRowIndex = arg.draggedRowIndex;
                                    cArgs.targetRowIndex = arg.targetRowIndex;
                                    cArgs.requestType = "dragAndDrop";
                                    proxy._updateAction(cArgs);
                                }

                            
                                if (model.allowSelection) {
                                    if (model.selectionSettings.selectionMode == "row") {
                                        //to maintain selection for two rows with drop on selected record or canDrop is false
                                        if (!model.isFromGantt && ((model.selectionSettings.selectionType == "checkbox" && $.inArray(draggedRecord, model.selectedItems) != -1) || (model.selectionSettings.selectionType == "multiple")) && model.selectedItems.length > 1) {
                                           var multiDragRecord = model.selectedItems.filter(function (item) {
                                                if (item.isDragged == true) {
                                                    item.isDragged = false;
                                                    return item
                                                }
                                            });
                                           var rowIndex = proxy.getUpdatedRecords().indexOf(multiDragRecord[0]);
                                            proxy.clearSelection(rowIndex);
                                            proxy._multiSelectCtrlRequest = true;
                                            if (rowIndex != -1 && model.allowSelection && !(proxy._rowSelectingEventTrigger(this.selectedRowIndex(), rowIndex))) {
                                                proxy.selectRows(rowIndex);
                                                proxy._rowSelectedEventTrigger(rowIndex);
                                            }
                                        }                                        
                                        else
                                            proxy._selectDraggedRow($tr);                                        
                                    }
                                    if (model.selectionSettings.selectionMode == "cell")
                                        proxy.updateScrollBar(model.updatedRecords.indexOf(proxy._draggedRecord));
                                }
                            }
                            else
                                //If drag state false then drop will cancel so have change the drag state.
                                proxy._updateDragStateTrue(draggedRecord);
                        }                                                  
                    }
                    else {
                        // If drop record not found means condition failed and drag state should change
                        proxy._updateDragStateTrue(draggedRecord);
                        if (!proxy.model.isEdit && !proxy._isRowEdit)
                            proxy._cancelSaveTools();
                    }
                }
                else {
                    // if canDrop true then drop will cancelled and state should change
                    proxy._updateDragStateTrue(draggedRecord);
                    proxy._resetPrivateProperties();
                    return 0;
                }
            }
            else
                // if esc key pressed or user drops a record other the tree grid content then 
                //drop cancelled and have to change the drag state.
                proxy._updateDragStateTrue(draggedRecord);
            // to enable expand and collapse icon of top most record if user mouse up outside of the grid area. 
            if (!ej.isNullOrUndefined(proxy._currentRecord)) {
                if (proxy._currentRecord.parentItem == null) {
                    $tr = model.allowPaging ? ej.TreeGrid.getRowByIndex(proxy, proxy.getUpdatedRecords().indexOf(proxy._currentRecord)) : ej.TreeGrid.getRowByIndex(proxy, model.updatedRecords.indexOf(proxy._currentRecord));
                    if (proxy._currentRecord.expanded)
                        $tr.find(".e-treegridexpand").css({ "display": "inline-block" });
                    else
                        $tr.find(".e-treegridcollapse").css({ "display": "inline-block" });
                }
            }
            //Update the summary row after perform the drag and drop action.
            if (model.showSummaryRow && args.requestType == "dragAndDrop" && proxy._insertAsChild != true && !proxy._isHierarchyFiltering)
                proxy._updateSummaryRow(args);

            proxy._dropCancel = false;
            if (!ej.isNullOrUndefined(droppedRecord)) droppedRecord.dragState = true;            
            proxy._resetPrivateProperties();
            if (!ej.isNullOrUndefined(draggedRecord) && !proxy.model.isEdit && !proxy._isRowEdit)
                proxy._cancelSaveTools();                        
            if (!ej.isNullOrUndefined(draggedRecord) && draggedRecord.isDragged == true) draggedRecord.isDragged = false;
        },

        // Mouse down action to start a Drag Column
        dragColumn: function (e) {
            
            var $target = $(e.target),
               proxy = this,
            coord = proxy._getCoordinate(e);

            proxy._posx = coord.pageX
            proxy._posy = coord.pageY;

            /*verify ctlkey and shift key and mouse button*/
            if (e.ctrlKey || e.shiftKey || e.which == 2 || e.which == 3)
                return true;

            var model = proxy.model,
               columns = model.columns,
               columnIndex,
               args = {};

            if ($target.css("cursor") == "col-resize") return; // Return if mousedown action on column resizer

            if ($target.closest(".e-headercelldiv") && !$target.hasClass("e-columnmenu-icon")) {
                var columnFieldName = $target.closest(".e-headercell").find(".e-headercelldiv").attr("data-ej-mappingname");
                if (ej.isNullOrUndefined(columnFieldName) && ej.isNullOrUndefined(this.getColumnByField(columnFieldName))) return;

                proxy._saveEditedElements();

                if ($target.hasClass("e-checkbox"))
                    return false;

                proxy._draggedColumn = this.getColumnByField(columnFieldName);
                columnIndex = columns.indexOf(proxy._draggedColumn);
                args.draggedColumnIndex = columnIndex;
                args.draggedColumn = proxy._draggedColumn;
                args.requestType = "columnDragStart";
                if (!ej.isNullOrUndefined(proxy._draggedColumn.headerTemplateID)) {
                    proxy._draggedColumnTemplate = $target.closest(".e-headertemplate");
                }
                else {
                    proxy._draggedColumnTemplate = null;
                }
                if (!ej.isNullOrUndefined(proxy._draggedColumn.nonColumn)) return;
                proxy._trigger("columnDragStart", args);
                if (args.cancel) return;
                if (model.selectionSettings.selectionMode == "cell")
                    proxy.clearSelection();
                proxy._headerDragStatus = "mousedown";                
                proxy._dragMouseDown = true;
                proxy._mouseDragged = false;
                var gridPos = proxy.getOffsetRect(proxy.element[0]);
                proxy._gridLeft = gridPos.left;
                proxy._gridTop = gridPos.top;
                proxy._touchstart = true;
                // Mousemove event bind for Drag a column                
                if (e.type != "touchstart") {
                    proxy._on(proxy.element, "mousemove", proxy.dragColumnToolTip);
                }
            }
        },

        //Mousemove action to dragging tooltip
        dragColumnToolTip: function (e) {
            var proxy = this,
                model = proxy.model,
                args = {},
                $target,
                columns = model.columns,
                columnIndex, item, column = {},
                coord = proxy._getCoordinate(e),
                posx = coord.pageX, posy = coord.pageY;
                        
            if (proxy._touchstart) {
                proxy._touchstart = false;
                return;
            }
            if (e.type == "touchmove") {
                e.preventDefault();
                $target = proxy._getElementByPosition(coord.pageX, coord.pageY);
            }
            else
                $target = $(e.target);

            if (proxy._headerDragStatus.length > 0 && model.allowColumnReordering == true) {

                if (model.selectionSettings.selectionMode == "cell" && proxy._headerDragStatus != "mousemove")
                    proxy.clearSelection();
                var $hcell = $target.closest(".e-headercell"),
                    columnFieldName = $hcell.find(".e-headercelldiv").attr("data-ej-mappingname"),
                    elementRight = proxy._gridLeft + proxy._gridWidth - 10,
                    elementHeight = proxy._gridHeight + proxy._gridTop, xpos = posx, ypos = posy;

                if (!ej.isNullOrUndefined(proxy._dragmouseOverTooltip)) {
                    var tooltipMidPos = proxy._dragmouseOverTooltip["width"] / 2,
                        tooltipHeight = proxy._dragmouseOverTooltip["height"] + 5;
                    if ((xpos - tooltipMidPos) < proxy._gridLeft)
                        xpos = proxy._gridLeft;
                    else if ((xpos + tooltipMidPos) > elementRight)
                        xpos = elementRight - (tooltipMidPos*2) - 4;
                    else
                        xpos = xpos - tooltipMidPos;
                    if (ypos + tooltipHeight > elementHeight)
                        ypos = elementHeight - tooltipHeight;
                }

                if (!ej.isNullOrUndefined(columnFieldName) && !ej.isNullOrUndefined(this.getColumnByField(columnFieldName))) {

                    var targetColumn = this.getColumnByField(columnFieldName);
                    proxy._currentIndex = columns.indexOf(targetColumn);
                    args.targetColumnIndex = proxy._currentIndex;
                    args.draggedColumnIndex = columns.indexOf(proxy._draggedColumn);
                    args.draggedColumn = proxy._draggedColumn;
                    args.targetColumn = targetColumn;
                    args.requestType = "columnDrag";
                    args.canDrop = true;

                    proxy._trigger("columnDrag", args);
                    if (args.cancel) return;

                    args.direction = (args.draggedColumnIndex >= args.targetColumnIndex) ? "left" : "right";
                    column.pos = proxy.getOffsetRect($hcell[0]);
                    column.height = $($hcell).height();
                    column.width = $($hcell).outerWidth();
                    column.pos.top = proxy.getOffsetRect($hcell.closest(".e-gridheader")[0]).top;
                    column.display = "block";
                    if(args.direction == "left" &&proxy._gridLeft > column.pos.left)
                        column.pos.left = proxy._gridLeft;
                    else if (args.direction == "right" && elementRight < (column.pos.left + column.width))
                        column.pos.left = elementRight - 10;
                    else
                        column.pos.left = ((args.draggedColumnIndex > args.targetColumnIndex)) ? (column.pos.left - 2) : (column.pos.left + column.width - 2);
                    args.column = column;
                    
                    proxy._autoHscroll(posx, posy, args);
                    if (args.draggedColumnIndex != args.targetColumnIndex) {
                        proxy._displayContextMenu = false;
                    }
                    if ((args.draggedColumnIndex == args.targetColumnIndex) || !ej.isNullOrUndefined(args.targetColumn.nonColumn) ||
                        ((column.pos.left - 8) > (proxy._gridWidth + proxy._gridLeft))) {
                        column.display = "none";
                    }
                    if (proxy._headerDragStatus != "mousemove" && !proxy._dragTooltip) {

                        var height = proxy._gridHeight - 1;
                        if (proxy.model.toolbarSettings.showToolbar) {
                            height -= !ej.isNullOrUndefined($("#" + proxy._id + "_toolbarItems").outerHeight()) ? $("#" + proxy._id + "_toolbarItems").outerHeight() : 0;
                        }
                        height -= proxy.getScrollElement().ejScroller("isHScroll") ? 18 : 0;

                        var tooltipcolumn = ej.buildTag('div', proxy._draggedColumn.headerText, { "margin-top": "5px" });
                        if (!ej.isNullOrUndefined(proxy._draggedColumnTemplate) && !ej.isNullOrUndefined(proxy._draggedColumn) && !ej.isNullOrUndefined(proxy._draggedColumn.headerTemplateID))
                            tooltipcolumn[0].innerHTML = proxy._draggedColumnTemplate[0].innerHTML;
                        proxy._dragmouseOverTooltip = ej.buildTag("div.e-tooltipgantt e-js#columnreordertooltip" + proxy._id + "", tooltipcolumn,
                            {
                                "top": (posy+10) + "px", "left": (posx - 57) + "px",//contextmenu action not triggered beacause touch event bind on tooltip, so adjust the tooltip top position
                                'position':'absolute',
                                'z-index': proxy.getMaxZIndex() + 1
                            }, {});
                        model.cssClass && proxy._dragmouseOverTooltip.addClass(model.cssClass);
                        proxy._reordervline = ej.buildTag("div.e-vline e-js#reorderline" + proxy._id + "", {
                            "height": height,
                            "width": 0,
                            "border-width": 0,
                            "position": "absolute",
                            "top": column.pos.top + "px",
                            "left": column.pos.left + "px",
                            "border-left-width": "3px",
                            "border-style": "solid",
                            "display": column.display,
                        });
                        model.cssClass && proxy._reordervline.addClass(model.cssClass);
                        $(document.body).append(proxy._dragmouseOverTooltip);
                        $(document.body).append(proxy._reordervline);
                        $(proxy._dragmouseOverTooltip).addClass("e-headertooltip");
                        $(proxy._reordervline).addClass("e-headervline");
                        proxy._dragmouseOverTooltip["width"] = $(proxy._dragmouseOverTooltip).outerWidth();
                        proxy._dragmouseOverTooltip["height"] = $(proxy._dragmouseOverTooltip).outerHeight()
                        proxy._reordervline["height"] = model.sizeSettings.height == "auto" ? $("#" + proxy._id + "e-gridcontent").height() + $("#" + proxy._id + "e-gridheader").height() : height;
                        proxy._dragTooltip = true;
                    }
                    else {
                        $(proxy._reordervline).css({
                            "height": proxy._reordervline["height"],
                            "width": 0,
                            "border-width": 0,
                            "position": "absolute",
                            "top": column.pos.top + "px",
                            "left": column.pos.left + "px",
                            "border-left-width": "3px",
                            "border-style": "solid",
                            "display": column.display,
                        });

                        $(proxy._dragmouseOverTooltip).css({
                            'top': ypos + "px",
                            'left': xpos + "px",
                        });
                    }
                    proxy._headerDragStatus = "mousemove";
                }
                else {
                    if (!ej.isNullOrUndefined(proxy._dragmouseOverTooltip)) {
                        $(proxy._dragmouseOverTooltip).css({
                            'top': ypos + "px",
                            'left': xpos + "px",
                        });
                    }
                }
            }
        },      

        //Public method to reorder the Column position.
        reorderColumn: function (fieldName, targetColumnIndex) {
            var proxy = this, model = proxy.model,
                columns = model.columns, draggedColumn, 
                draggedColumnIndex, targetColumn, width, treeColumn,summaryTreeColumn,
                frozenWidth;

            if (model.showTotalSummary && model.collapsibleTotalSummary) summaryTreeColumn = columns[proxy._summaryColumnIndex];
            treeColumn = columns[model.treeColumnIndex];
            draggedColumn = proxy.getColumnByField(fieldName);
            draggedColumnIndex = columns.indexOf(draggedColumn);
            width = proxy.columnsWidthCollection[draggedColumnIndex];
            
            targetColumn = columns[targetColumnIndex];
            if (ej.isNullOrUndefined(draggedColumn) || ej.isNullOrUndefined(targetColumn) || targetColumn && targetColumn.nonColumn) return;
           
            if (proxy._frozenColumnsLength > 0) {

                frozenWidth = this._getFrozenColumnWidth();
                // Drag from non-freeze column and drop on frozen column
                if (proxy._frozenColumnsLength <= draggedColumnIndex && proxy._frozenColumnsLength > targetColumnIndex && proxy._frozenColumns.indexOf(draggedColumn) == -1) {                    
                    frozenWidth = frozenWidth + (this.columnsWidthCollection[draggedColumnIndex] + 18);
                    if (frozenWidth > this._gridWidth)
                        return false;
                    draggedColumn['isFrozen'] = true;
                    proxy._frozenColumns.splice(targetColumnIndex, 0, draggedColumn);
                }
                    // Drag from frozen column and drop on non-freeze column
                else if (proxy._frozenColumnsLength > draggedColumnIndex && proxy._frozenColumnsLength <= targetColumnIndex && proxy._frozenColumns.indexOf(draggedColumn) != -1) {                   
                    draggedColumn['isFrozen'] = false;
                    proxy._frozenColumns.splice(draggedColumnIndex, 1);
                    if (proxy._checkboxSelection && proxy._frozenColumns.length == 1 && proxy._frozenColumns[0]['nonColumn']) {
                        proxy._frozenColumns[0]['isFrozen'] = false;
                        proxy._frozenColumns.splice(0, 1);
                    }

                }
            }

            columns.splice(draggedColumnIndex, 1);
            proxy.columnsWidthCollection.splice(draggedColumnIndex, 1);
            columns.splice(targetColumnIndex, 0, draggedColumn);
            proxy.columnsWidthCollection.splice(targetColumnIndex, 0, width);
            
            model.treeColumnIndex = columns.indexOf(treeColumn);
            if (model.showTotalSummary && model.collapsibleTotalSummary) proxy._summaryColumnIndex = columns.indexOf(summaryTreeColumn);
            proxy._refreshFrozenColumns();
            proxy._updateWrapRowHeights(null,"virtualRefresh");
        },

        _refreshStackedHeader: function () {
            var proxy = this, model = proxy.model;
            if (model.showStackedHeader) {
                var stackedRows = model.stackedHeaderRows;
                for (var i = 0; i < stackedRows.length; i++) {
                    if (proxy._frozenColumnsLength != 0) {
                        var frznHeader = $(proxy.getHeaderContent().find(".e-frozenheaderdiv")),
                            movHeader = $(proxy.getHeaderContent().find(".e-movableheader")),
                            newFrzn = proxy._createStackedRow(stackedRows[i], true),
                            newMov = proxy._createStackedRow(stackedRows[i], false);
                        $(frznHeader.find("tr.e-stackedHeaderRow")[i]).replaceWith(newFrzn);
                        $(movHeader.find("tr.e-stackedHeaderRow")[i]).replaceWith(newMov);
                    }
                    else {
                        var stackedTR = proxy._createStackedRow(stackedRows[i], false);
                        if (proxy.getHeaderTable().find("tr.e-stackedHeaderRow")[i])
                            $(proxy.getHeaderTable().find("tr.e-stackedHeaderRow")[i]).replaceWith(stackedTR);
                        else
                            stackedTR.insertBefore(proxy.getHeaderTable().find("tr.e-columnheader:last"));
                    }
                }
                var args = {};
                args.requestType = "refresh";
                proxy._updateScrollCss();
            }
        },
        //Horizontal auto scroll while drag towards the end
        _autoHscroll: function (posx, posy, args) {
            var proxy = this,
                model = proxy.model,
                maxWidth,
                isHscroll,
                columns = model.columns,
                frozenWidth = 0,
                columnsWidth = proxy.columnsWidthCollection,
            gridContent = proxy.getScrollElement();

            isHscroll = gridContent.ejScroller("isHScroll");

            maxWidth = isHscroll ? gridContent.find(".e-content").get(0).scrollWidth : 0;
            proxy._viewPortWidth = gridContent.find(".e-content").width();

            if (proxy._frozenColumnsLength > 0) {
                frozenWidth = this._getFrozenColumnWidth();
            }
            var rightScrollPos = Math.round(((proxy._gridLeft + proxy._gridWidth) * 10)/ 100) + 18,
                leftScrollPos = Math.round((proxy._gridLeft * 10) / 100) + 18,
                topvalue = 0;

            if (((proxy._gridLeft + proxy._gridWidth) - rightScrollPos) < posx) {
                if (!proxy._timerDragDown) {

                    //Timer started for scrolling the content till the end.
                    proxy._timerDragDown = window.setInterval(function () {
                        if (maxWidth > (proxy._scrollLeft + proxy._viewPortWidth)) {
                            topvalue = proxy._scrollLeft;
                            topvalue = topvalue + 50;
                            proxy.getScrollElement().ejScroller("scrollX", topvalue, true);
                        }
                    }, 300);
                }
            }
            else {
                proxy._timerDragDown && (proxy._timerDragDown = window.clearInterval(proxy._timerDragDown));
            }            

            if ((posx < (proxy._gridLeft + frozenWidth + leftScrollPos)) && ( posx > (proxy._gridLeft + frozenWidth)) && proxy._scrollLeft != 0) {
                if (proxy._scrollLeft > 0) {
                    if (!proxy._timerDragUp) {
                        proxy._timerDragUp = window.setInterval(function () {
                            if (proxy._scrollLeft > 0) {
                                topvalue = proxy._scrollLeft;
                                topvalue = topvalue - 50;
                                if (topvalue < 0)
                                    topvalue = 0;
                                proxy.getScrollElement().ejScroller("scrollX", topvalue, true);
                            }
                        }, 300);
                    }
                }
                else {
                    proxy._timerDragUp && (proxy._timerDragUp = window.clearInterval(proxy._timerDragUp));
                }
            }
            else {
                proxy._timerDragUp && (proxy._timerDragUp = window.clearInterval(proxy._timerDragUp));
            }
        },

        _resetPrivateProperties: function () {
            this._timerDragDown && (this._timerDragDown = window.clearInterval(this._timerDragDown));
            this._timerDragUp && (this._timerDragUp = window.clearInterval(this._timerDragUp));
            var proxy = this, model = proxy.model;
            proxy.cancelDrop = false;
            proxy._draggedRecord = null;            
            proxy._draggedRecords = [];
            proxy._dragMouseDown = false;
            proxy._timerDragDown = null;
            proxy._timerDragUp = null;
            proxy._childItem = false;
            proxy._dragMouseLeave = false;
            proxy._moveRow = false;
            proxy._currentRecord = null;
            proxy._currentIndex = null;
            proxy._droppedRecord = null;
            proxy._insertAsChild = false;
            proxy._insertAbove = false;
            proxy._insertBelow = false;
            if (model.allowDragAndDrop && model.enableVirtualization && (ej.browserInfo().name == "chrome" || ej.isTouchDevice())) {
                proxy._dummyElement && $(proxy._draggedElement).remove();
                proxy._dummyElement = false;
                proxy._draggedElement = null;
            }          
            proxy._dragTooltipTimer = null;
            proxy._dragColumnTooltipTimer = null;
            proxy._dragmouseOverTooltip = null;
        },
        // To select the dragged Record after drag stopped.
        _selectDraggedRow: function ($tr) {
            var proxy = this, model = proxy.model,
                updatedRecords = proxy.getUpdatedRecords(),
                rowIndex = updatedRecords.indexOf(proxy._draggedRecord);
            if (rowIndex != -1) {
                proxy._focusTreeGridElement();
                if (model.allowSelection && model.selectionSettings.selectionMode == "row" && !(proxy._rowSelectingEventTrigger(this.selectedRowIndex(), rowIndex))) {
                    proxy.selectRows(rowIndex);
                    proxy._rowSelectedEventTrigger(rowIndex);
                }
            }
        },
        //Add child records to the data source
        _addChildItem: function (record) {
            var currentRecord, proxy = this, length=0;
            length = record.childRecords.length;
            for (var i = 0; i < length; i++) {
                currentRecord = record.childRecords[i];
                if (proxy.dataSource() instanceof ej.DataManager) {
                    if (proxy.dataSource().dataSource.offline && proxy.dataSource().dataSource.json) {
                        proxy.dataSource().dataSource.json.push(currentRecord.item);
                        if (currentRecord.hasChildRecords) {
                            proxy._addChildItem(currentRecord);
                        }
                    }
                } else {
                    proxy.dataSource().push(currentRecord.item);                     
                    if (currentRecord.hasChildRecords) {
                        proxy._addChildItem(currentRecord);
                    }
                }
            }
        },
        //Update the changes in DataSource.
        _updateDataSource: function () {
            var proxy = this,
                model = proxy.model,
                draggedRecord = proxy._draggedRecord,
                droppedRecord = proxy._droppedRecord,
                tempDataSource, idx, childIndex;
            if (proxy.dataSource() instanceof ej.DataManager) {
                if (proxy.dataSource().dataSource.offline && proxy.dataSource().dataSource.json) {
                    tempDataSource = proxy.dataSource().dataSource.json;
                }
            }
            else 
                tempDataSource = proxy.dataSource();
            
            if (tempDataSource && !droppedRecord.parentItem) {
                idx = tempDataSource.indexOf(droppedRecord.item);
                if (proxy._insertAbove) {
                    if (!model.parentIdMapping)
                        tempDataSource.splice(idx, 0, draggedRecord.item);
                }
                else if (proxy._insertBelow) {
                    if (!model.parentIdMapping)
                        tempDataSource.splice(idx + 1, 0, draggedRecord.item);
                }
            }
            else if (!model.parentIdMapping && droppedRecord.parentItem) {
                if (proxy._insertAbove || proxy._insertBelow) {
                    droppedRecord.parentItem.item[proxy.model.childMapping] = [];
                    var record = droppedRecord.parentItem.childRecords;
                    for (var i = 0; i < record.length; i++) {
                        droppedRecord.parentItem.item[proxy.model.childMapping].splice(i, 0, record[i].item)
                    }
                }               
            }

            if (model.parentIdMapping) {
                if (draggedRecord.parentItem) {
                    if (proxy._insertAbove || proxy._insertBelow) {
                        if (model.isFromGantt == true) {
                            draggedRecord.item[model.parentIdMapping] = droppedRecord.item[proxy.model.parentIdMapping];
                        }
                        else {
                            draggedRecord[model.parentIdMapping] = droppedRecord[proxy.model.parentIdMapping];
                            draggedRecord.item[model.parentIdMapping] = droppedRecord[proxy.model.parentIdMapping];
                        }
                    }
                    else {
                        if (model.isFromGantt == true) {
                            draggedRecord.item[model.parentIdMapping] = droppedRecord.item[proxy.model.idMapping];
                        }
                        else {
                            draggedRecord[model.parentIdMapping] = droppedRecord[proxy.model.idMapping];
                            draggedRecord.item[model.parentIdMapping] = droppedRecord[proxy.model.idMapping];
                        }
                    }
                }
                else {
                    draggedRecord.item[model.parentIdMapping] = null;
                    draggedRecord[model.parentIdMapping] = null;
                }

                if (proxy.dataSource() instanceof ej.DataManager) {
                    if (proxy.dataSource().dataSource.offline && proxy.dataSource().dataSource.json) {
                        proxy.dataSource().dataSource.json.push(draggedRecord.item);
                    }
                } else {

                    if (proxy._insertAbove || proxy._insertBelow || proxy._insertAsChild)
                        proxy.dataSource().push(draggedRecord.item);
                    if (draggedRecord.hasChildRecords) {
                        proxy._addChildItem(draggedRecord);
                    }
                }

            }
        },

        //This method is to delete the dragged record 
        _deleteDragRow: function ($tr) {
            var proxy = this,
                model = proxy.model,
                 deletedRowIndex,
                 deletedRow,
                 dataRows,
                 isUpdateWBS,
                 targetRowIndex,
                 args = {},
                 updatedRecords = proxy.getUpdatedRecords(),
                 flatRecords = model.flatRecords;
            if (updatedRecords.indexOf(proxy._draggedRecord) != -1) {
                deletedRowIndex = updatedRecords.indexOf(proxy._draggedRecord);
                deletedRow = updatedRecords[deletedRowIndex];
            }
            else
            {
                deletedRowIndex = flatRecords.indexOf(proxy._draggedRecord);
                deletedRow = flatRecords[deletedRowIndex];
            }
            args.tr = $tr;
            args.data = deletedRow;
            args.requestType = ej.TreeGrid.Actions.Delete;
            args.isDragAndDropDelete = true;                        
            proxy._removeRecords(args);                       
            proxy._previousIndex = -1;
        },
        // To revert the changes if drop get cancelled.
        _revertDragging: function (args) {
            var proxy = this,
                model=proxy.model,
                flatRecords = model.flatRecords;
            proxy._draggedRecord = args.draggedRow;
            proxy._deleteDragRow();
            if (!proxy._draggedRecord.hasChildRecords) {
                flatRecords.splice(args.previousItemIndex, 0, proxy._draggedRecord);
                if (model.isFromGantt)
                    model.ids.splice(args.previousItemIndex, 0, (proxy._draggedRecord.taskId).toString());
                flatRecords[args.previousItemIndex].parentItem = args.previousItem.parentItem;
                if (!ej.isNullOrUndefined(args.previousParentItem)) {
                    flatRecords[args.previousItemIndex].parentItem.childRecords.splice(args.childIndex, 0, proxy._draggedRecord);
                    flatRecords[args.previousItemIndex].parentItem.hasChildRecords = true;
                    flatRecords[args.previousItemIndex].parentItem.hasFilteredChildRecords = true;
                    flatRecords[args.previousItemIndex].parentItem.expanded = true;
                }
                flatRecords[args.previousItemIndex].level = args.previousLevel;
            }
            else {
                flatRecords.splice(args.previousItemIndex, 0, proxy._draggedRecord);
                if (model.isFromGantt)
                    model.ids.splice(args.previousItemIndex, 0, (proxy._draggedRecord.taskId).toString());
                if (!ej.isNullOrUndefined(flatRecords[args.previousItemIndex].parentItem)) {
                    flatRecords[args.previousItemIndex].parentItem = args.previousParentItem;
                    if (!ej.isNullOrUndefined(args.previousParentItem))
                        flatRecords[args.previousItemIndex].parentItem.childRecords.splice(args.childIndex, 0, proxy._draggedRecord);
                }
                var recordIndex = model.flatRecords.indexOf(proxy._draggedRecord);
                proxy._updateChildRecord(proxy._draggedRecord,recordIndex, args.previousItem.index);
                proxy._draggedRecord.level = args.previousLevel;
                proxy._updateChildRecordLevel(proxy._draggedRecord, args.previousLevel);
            }
            if (model.parentIdMapping) {
                flatRecords[args.previousItemIndex][model.parentIdMapping] = args.previousItem[model.parentIdMapping];
                flatRecords[args.previousItemIndex].item[model.parentIdMapping] = args.previousItem[model.parentIdMapping];
            }
            if (!ej.isNullOrUndefined(args.previousItem.parentItem)) {
                args.previousItem.parentItem.hasChildRecords = args.parentChildState;
                args.previousItem.parentItem.expanded = args.parentExpandedState;
                if (model.childMapping && args.previousItem.parentItem.item[proxy.model.childMapping])
                    args.previousItem.parentItem.item[proxy.model.childMapping].splice(args.childIndex, 0, args.previousItem.item);
            }
            if (model.isFromGantt) {
                flatRecords[args.previousTargetItemIndex] = args.previousTarget;
                if (args.previousTarget.isAutoSchedule == true) {
                    args.previousTarget.startDate = args.previousTarget.item[args.model.startDateMapping] = new Date(args.clonedTarget.startDate);
                    args.previousTarget.endDate = new Date(args.clonedTarget.endDate);
                    args.previousTarget.duration = args.clonedTarget.duration;
                    args.previousTarget.status = args.clonedTarget.status;
                    if (args.model.endDateMapping) {
                        args.previousTarget.item[args.model.endDateMapping] = new Date(args.clonedTarget.endDate);
                    }
                    if (args.model.progressMapping) {
                        args.previousTarget.item[args.model.progressMapping] = args.clonedTarget.status;
                    }
                    if (args.model.durationMapping) {
                        args.previousTarget.item[args.model.durationMapping] = args.clonedTarget.duration;
                    }
                    args.previousTarget.expanded = args.clonedTarget.expanded;
                    var ganttObject = $("#" + proxy._id.replace("ejTreeGrid", "")).data("ejGantt");
                    ganttObject._updateTargetGanttRecord(args.previousTarget);
                }
                else {
                    args.previousTarget.manualStartDate = new Date(args.clonedTarget.manualStartDate);
                    args.previousTarget.manualEndDate = new Date(args.clonedTarget.manualEndDate);
                    args.previousTarget.manualDuration = args.clonedTarget.manualDuration;
                    args.previousTarget.status = args.clonedTarget.status;
                    if (args.model.progressMapping) {
                        args.previousTarget.item[args.model.progressMapping] = args.clonedTarget.status;
                    }
                    args.previousTarget.expanded = args.clonedTarget.expanded;
                    var ganttObject = $("#" + proxy._id.replace("ejTreeGrid", "")).data("ejGantt");
                    ganttObject._updateGanttRecord(args.previousTarget);
                }
            }
            if (model.enableWBS) {
                var ddSiblings,
                    draggedRecord = proxy._draggedRecord;
                if (draggedRecord.parentItem)
                    ddSiblings = draggedRecord.parentItem.childRecords;
                else {
                    var flatData = model.flatRecords,
                        Level0 = flatData.filter(function (item) {
                            return item && item.level == 0;
                        });
                    ddSiblings = Level0;
                }
                var ddIndex = ddSiblings.indexOf(draggedRecord),
                    selectedRecords = ddSiblings.slice(ddIndex, ddSiblings.length),
                    parentVal = draggedRecord.parentItem ? draggedRecord.parentItem.WBS : null,
                    lastVal = ddIndex + 1;
                proxy.reCalculateWBS(selectedRecords, lastVal, parentVal);
            }
            proxy.processBindings(args);
            if (model.currentViewData.length > 0)
                ej.TreeGrid.updateAltRow(proxy, model.currentViewData[0], 0, 0);
        },

        //To splice the child records if user drag and dropped the parent item.
        _updateChildRecord: function (record, count,expandState){
            var currentRecord,
                proxy = this,
                model = proxy.model,
                length;
            if (!record.hasChildRecords)
                return 0;
            length = record.childRecords.length;
            for (var i = 0; i < length; i++) {
                currentRecord = record.childRecords[i];
                count++;
                model.flatRecords.splice(count, 0, currentRecord);
                model.updatedRecords.splice(count, 0, currentRecord);
                if (model.isFromGantt)
                    model.ids.splice(count, 0, (currentRecord.taskId).toString());
                if (currentRecord.hasChildRecords) {
                    count = proxy._updateChildRecord(currentRecord, count);
                }
            }
            return count;
        },
        //This method is to leveling the records when it is inserted as child.
        _recordLevel: function (recordIndex, args) {
            var j = 0, proxy = this,
                model = proxy.model,
                draggedRecord=proxy._draggedRecord,
                droppedRecord = proxy._droppedRecord,
                childItem = proxy.model.childMapping;
            if (!droppedRecord.hasChildRecords) {
                droppedRecord.hasChildRecords = true;
                droppedRecord.hasFilteredChildRecords = true;
                if (proxy._isLoadonDemand)
                    droppedRecord.isChildRetrieved = true;
                if (ej.util.isNullOrUndefined(droppedRecord.childRecords) || $.isEmptyObject(droppedRecord.childRecords)) {
                    droppedRecord.childRecords = [];
                    if (!model.parentIdMapping)
                        droppedRecord.item[childItem] = [];
                }
            }
            if (proxy._insertAsChild) {
                draggedRecord.parentItem = droppedRecord;
                droppedRecord.childRecords.splice(0, 0, draggedRecord);
                //Update hierarchyRowIndex for level 1 and above records
                var childRecords = droppedRecord.childRecords;
                proxy._updateHierarchyRowIndexData(args, childRecords, 0);
                if (!ej.isNullOrUndefined(draggedRecord) && !ej.isNullOrUndefined(droppedRecord.item[childItem]) && !model.parentIdMapping) {
                    droppedRecord.item[childItem].splice(0, 0, draggedRecord.item);
                }
                if (!draggedRecord.hasChildRecords)
                    draggedRecord.level = droppedRecord.level + 1;
                else {
                    var level = 1;
                    draggedRecord.level = droppedRecord.level + 1;
                    proxy._updateChildRecordLevel(draggedRecord, level);
                }
                if (!droppedRecord.expanded && droppedRecord.hasChildRecords && model.isFromGantt && !model.enableVirtualization) {
                    proxy.updateExpandStatus(droppedRecord, true);
                }
                droppedRecord.expanded = true;               
                if (proxy._isLoadonDemand && !droppedRecord.isChildRetrieved)
                    droppedRecord.expanded = false;                
                proxy._parentRecords.push(droppedRecord);
            }
        },
        // This method is to level the parent record at the end of it hierarchy.
        _updateChildRecordLevel: function (record,level) {
            var proxy = this,
                length=0,
                currentRecord;
            level++;
            if (!record.hasChildRecords)
                return 0;
            length = record.childRecords.length;
            for (var i = 0; i < length ; i++) {
                currentRecord = record.childRecords[i];
                currentRecord.level = record.parentItem ? record.parentItem.level + level : record.level + 1;
                if (currentRecord.hasChildRecords) {
                    level--;
                    level = proxy._updateChildRecordLevel(currentRecord, level);
                }
            }
            return level;
        },
                   
        //To renter cancel icon in filtering elements.
        _filterBarClose: function (e) {
            var $target = $(e.target);
            if (e.type == "click" && $target.hasClass("e-cancel")) {
                var $targetText = $target.prev();
                    $targetText.focus().val("");
                $targetText.prop('checked', false);
                $targetText.trigger("keyup");
                e.stopPropagation();
            }
            if (e.type == "focusin") { 
                $target = $(e.target).next();
                this.getHeaderTable().find(".e-cancel").addClass("e-hide");
                $target.removeClass("e-hide");
            }
        },

        _checkIdenticalValue: function (val, currentFilterColumn) {
            var proxy = this,
                model = proxy.model,
                flag,
                filteredColumns = model.filterSettings.filteredColumns,
                columnLength = filteredColumns.length;
            for (var col = 0; col < columnLength; col++) {
                if (filteredColumns[col].value === val && filteredColumns[col].field == currentFilterColumn.field) {
                    flag = true;
                    break;
                }               
            }
            return flag;            
        },
        //To wireup method while user enter text to the filter textbox.
        _filterBarHandler: function (e) {
            var proxy = this,
                $target,
                model = proxy.model,filteringColumn;
            //cancel the edited cell and row
            if (proxy.model.isEdit)
                proxy.cancelEditCell();
            else if (proxy._isRowEdit)
                proxy.cancelRowEditCell();
            /* flag new added record is sorted or filttered in treegrid */
            proxy._isRefreshAddedRecord = false;

            /* clear selction*/
            proxy.clearAllSelection();

            if (e.target == undefined)
                $target =$(e);
            else
                $target = $(e.target);
            
            if (this.model.allowFiltering ) {
                var cols=proxy.model.columns;
                var matchcase;
                matchcase = proxy._cellEditingDetails;
                var key = proxy._queryManagar.queries[0], $element;
                //Get input element onEnter event
                if ($target.hasClass("e-ddl"))
                    $element = $target.find("input.e-field");
                else
                    $element = $target;
                proxy._fieldName = $element[0].id.replace(proxy._id + "_", "").replace("_filterbarcell", "");
                this._currentFilterColumn = ej.TreeGrid.getColumnByField(model.columns, proxy._fieldName);
                proxy._fieldName = this._currentFilterColumn.field;
                var currentFilterCol = this._currentFilterColumn, currentDateformat;
                if ($target.hasClass("e-checkbox"))
                    proxy._filterString = $target[0].checked;
                else if ($target.hasClass("e-ddl")) {
                    // To get the value from dropdown filter (onEnter) mode
                    $target = $target.find("input.e-dropdownlist");
                    var dropDownElement = $("#" + $target[0].id).data("ejDropDownList");
                    if (dropDownElement.selectedIndexValue == -1 || (proxy._checkIdenticalValue(dropDownElement._selectedValue, this._currentFilterColumn)))
                        return true;
                    proxy._filterString = dropDownElement._selectedValue;
                }
                else if ($target.hasClass("e-dropdownlist")) {
                    // To get the value from dropdown filter (immediate) mode
                    var dropdownobject = $("#" + $target[0].id).data("ejDropDownList");
                    if (dropdownobject.selectedIndexValue == -1 || (proxy._checkIdenticalValue(dropdownobject._selectedValue, this._currentFilterColumn)))
                        return true;
                    if (dropdownobject._selectedValue==proxy._dropDownListClearText)
                        proxy._filterString = "";
                    else
                        proxy._filterString = dropdownobject._selectedValue;
                }
                else if ($target.hasClass("e-numerictextbox")) {
                    var numericObject = $("#" + $target[0].id).data("ejNumericTextbox"),
                        modelValue = numericObject.model.value == null ? "" : (numericObject.model.value).toString();

                    if (ej.isNullOrUndefined(e.type)) {
                        var filteredColumns = model.filterSettings.filteredColumns,
                            length = filteredColumns.length,
                            flag = false;
                        if (modelValue == "" && length == 0)
                            flag = true;
                        for (var col = 0; col < length; col++) {
                            var value = ej.isNullOrUndefined(filteredColumns[col].value) ? "" : filteredColumns[col].value.toString();
                            if (value == modelValue && filteredColumns[col].field == this._currentFilterColumn.field) {
                                flag = true;
                                break;
                            }
                        }
                        if (flag) return true;
                    }
                    proxy._filterString = $target.closest("input").val();
                }
                else
                    proxy._filterString = $target.closest("input").val();
                if ((this._currentFilterColumn.filterEditType == "datepicker" || this._currentFilterColumn.filterEditType == "datetimepicker") && proxy._filterString != "") {
                    if (proxy._filterString) {
                        if (currentFilterCol.format)
                            currentDateformat = proxy._getDateFormat(this._currentFilterColumn.format);
                        else
                            currentDateformat = proxy.model.dateFormat;
                        if (ej.isNullOrUndefined(ej.parseDate(proxy._filterString, currentDateformat, model.locale)))
                            proxy._filterString = "";
                        else
                            proxy._filterString = ej.parseDate(proxy._filterString, currentDateformat, model.locale);
                    }
                }
                if (proxy._filterString == "") {
                    filteringColumn = model.filterSettings.filteredColumns.filter(function (column) {
                        if (column.field === proxy._fieldName)
                            return true;
                    });
                    if (!filteringColumn.length) {
                        proxy._resizeFilteringElements();
                        return true;
                    }
                }
               
                proxy._validateFilterValue(proxy._filterString);
                if (proxy._batchEditStarts)
                    proxy._batchTempDetails.filterTarget = $target;
                proxy.filterColumn(proxy._fieldName, this._operator, proxy._filterString, this._predicate);                
                proxy._storePreviousFilteredValue(proxy._fieldName, proxy._filterString, this._operator);
                if (proxy.model.currentViewData.length > 0 && proxy.model.enableAltRow)
                    ej.TreeGrid.updateAltRow(proxy, proxy.model.currentViewData[0], 0, 0);                
                proxy._cancelSaveTools();
            }
        },
        //Method to validate search string type and assign operators accordingly.
        _validateFilterValue: function (_value) {
            var proxy = this;
            this._predicate = "and";
            switch (this._currentFilterColumn.filterEditType) {
                case "numericedit":
                    this._operator = ej.FilterOperators.equal;
                    break;
                case "datepicker":
                    this._operator = ej.FilterOperators.equal;
                    
                    var _format;
                    if (this._currentFilterColumn.format == "" || this._currentFilterColumn.format == undefined)
                        _format = ej.preferredCulture().calendar.patterns.d; //System Date format
                    else
                        _format = this._currentFilterColumn.format.split(':')[1].replace('}', "");
                    if (this._currentFilterbarValue != "")
                        this._currentFilterbarValue = ej.format(_value, _format, this.model.locale);
                    break;
                case "datetimepicker":
                    this._operator = ej.FilterOperators.equal;
                  
                    var _format;
                    if (this._currentFilterColumn.format == "" || this._currentFilterColumn.format == undefined)
                        _format = ej.preferredCulture().calendar.patterns.f; //System DateTime format
                    else
                        _format = this._currentFilterColumn.format.split(':')[1].replace('}', "");
                    if (this._currentFilterbarValue != "")
                        this._currentFilterbarValue = ej.format(_value, _format, this.model.locale);
                    break;
                case "stringedit":
                    this._operator = ej.FilterOperators.startsWith;
                    break;
                case "dropdownedit":
                    var filterColumn = this._currentFilterColumn;
                    if (filterColumn.editType == "dropdownedit" && filterColumn.editParams && filterColumn.editParams.showCheckbox)
                        this._operator = ej.FilterOperators.contains;
                    else
                        this._operator = ej.FilterOperators.equal;
                    break;
                case "booleanedit":
                    if (proxy._filterString == true || proxy._filterString == "1")
                        proxy._filterString = true;
                    else if (proxy._filterString == "false" || proxy._filterString == "0")
                        proxy._filterString = false;
                    this._operator = ej.FilterOperators.equal;
                    break;
                default:
                    this._operator = ej.FilterOperators.equal;
            }
        },

        _getStackedColumnByTarget: function (target) {
            var cls = (target.get(0) || {}).className, match = /e-row([0-9])-column([0-9])/.exec(cls),
                rIndx = match[1], cIndx = match[2], key = [rIndx, "stackedHeaderColumns", cIndx].join(".");

            return ej.getObject(key, this.model.stackedHeaderRows);
        },

        // Method to render header tooltip and header template tooltip.
        _headermouseHover: function (e) {
            e.preventDefault();
            var proxy = this,
                model = proxy.model;
            if (model.showGridCellTooltip) {
                if (!proxy._dragTooltip) {
                    var $target = $(e.target),
                        posx = 0,
                        posy = 0,
                        column = $target.closest('div.e-headercelldiv'),
                        tooltiptable, tooltipbody, textContent, tooltipWidth,
                        tooltipHeight, containerWidth, containerHeight,
                        currentColumn, columnFieldName, stackedHeaderColumn;
                    proxy._headerMouseLeave();
                    if (!e) e = window.event;
                    if (e.originalEvent.pageX || e.originalEvent.pageY) {
                        posx = e.originalEvent.pageX;
                        posy = e.originalEvent.pageY;
                    }
                    else if (e.originalEvent.clientX || e.originalEvent.clientY) {
                        posx = e.originalEvent.clientX + document.body.scrollLeft
                            + document.documentElement.scrollLeft;
                        posy = e.originalEvent.clientY + document.body.scrollTop
                            + document.documentElement.scrollTop;
                    }
                    textContent = column.clone();
                    if (textContent.find(".e-ascending").length > 0) {
                        textContent.find(".e-ascending").remove();
                    } else if (textContent.find(".e-descending").length > 0) {
                        textContent.find(".e-descending").remove();
                    }
                    textContent.find(".e-chkbox-wrap").remove();
                    if ($target.closest(".e-headercell").hasClass("e-headertemplate")) {
                        textContent = textContent.clone();
                    } else {
                        textContent = textContent.find("span").clone();
                    }
                    if ($target.hasClass("e-stackedtooltip")) {
                        stackedHeaderColumn = proxy._getStackedColumnByTarget($target);
                        if (!ej.isNullOrUndefined(stackedHeaderColumn["tooltip"]) && stackedHeaderColumn["tooltip"].slice(0, 1) !== "#")
                            textContent = stackedHeaderColumn["tooltip"]; // $target.clone();
                        else {
                            var t = $(stackedHeaderColumn["tooltip"]).clone();
                            textContent = t.html();
                        }
                    }
                    tooltiptable = ej.buildTag("table.e-tooltiptable e-zerospace", "", { 'padding': '0' });
                    tooltipbody = ej.buildTag("tbody", textContent, {}, {});
                    tooltiptable.append(tooltipbody);
                    var isNonEmptyText = $(textContent).text().replace(/[ \t\r]+/g, "").length > 0 ? true : false;
                    if (tooltipbody) {
                        columnFieldName = $target.closest(".e-headercell").find(".e-headercelldiv").attr("data-ej-mappingname");
                        currentColumn = this.getColumnByField(columnFieldName);
                        if ((currentColumn && (ej.isNullOrUndefined(currentColumn['headerTooltip'])
                            || currentColumn['headerTooltip'] == "") && model.showGridCellTooltip && isNonEmptyText)
                            || $target.hasClass("e-stackedtooltip")) {
                                proxy._headerMouseOverTooltip = ej.buildTag("div.e-tooltipgantt e-js#headertooltip" + proxy._id + "", tooltiptable,
                                    {
                                        "top": (posy + 10) + "px", "left": (posx + 15) + "px",
                                        'position': 'absolute',
                                        'z-index': proxy.getMaxZIndex() + 1,
                                        'padding': '0',
                                        'border-radius': '3px'
                                    }, {});
                                model.cssClass && (proxy._headerMouseOverTooltip.addClass(model.cssClass));
                                //Providing a time delay to render the tooltip to improve UI
                                proxy._headerTooltipTimer = setTimeout(function () {
                                    $(document.body).append(proxy._headerMouseOverTooltip);
                                    var element = $("#" + proxy._id.replace("ejTreeGrid", "")),
                                        position = proxy.getOffsetRect(element[0]);
                                    containerWidth = $(element).width() + position.left;
                                    containerHeight = $(element).height() + position.top;
                                    tooltipWidth = $(proxy._headerMouseOverTooltip).width();
                                    tooltipHeight = $(proxy._headerMouseOverTooltip).height();
                                    // Calculation for reposition the tooltip when tooltip is exist the container height or width
                                    if ((posx + tooltipWidth + 15) >= containerWidth) {
                                        posx = posx - tooltipWidth - 15;
                                    }
                                    if ((posy + tooltipHeight + 10) >= containerHeight) {
                                        posy = posy - tooltipHeight - 10;
                                    }
                                    $(proxy._headerMouseOverTooltip).css({ "top": posy, "left": posx });
                                }, 700);
                            
                        } else if (currentColumn && !ej.isNullOrUndefined(currentColumn['headerTooltip']) && currentColumn['headerTooltip'] != "") {
                            var dataObj = {};
                            dataObj["column"] = currentColumn;
                            proxy._createColumnTooltipTemplate(currentColumn['headerTooltip']);
                            proxy._headerMouseOverTooltip = ej.buildTag("div.e-tooltipgantt e-js#headertooltip" + proxy._id + "", "",
                                {
                                    "top": (posy + 10) + "px", "left": (posx + 15) + "px",
                                    'position': 'absolute',
                                    'z-index': proxy.getMaxZIndex() + 1,
                                    'padding': '0',
                                    'border-radius': '3px'
                                }, {});
                            model.cssClass && (proxy._headerMouseOverTooltip.addClass(model.cssClass));
                            var tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "columnTooltipTemplate"](dataObj), {}, {});
                            proxy._headerMouseOverTooltip[0].innerHTML = "<table>" + tooltipbody[0].innerHTML + "</table>";
                            var isNonEmptyText = $(tooltipbody).text().replace(/[ \t\r]+/g, "").length > 0 ? true : false;
                            if (isNonEmptyText){
                            proxy._headerTooltipTimer = setTimeout(function () {
                                $(document.body).append(proxy._headerMouseOverTooltip);
                                if (!model.isFromGantt) {
                                    var position = proxy.getOffsetRect(proxy.element[0]);
                                    containerWidth = $(proxy.element).width() + position.left;
                                    containerHeight = $(proxy.element).height() + position.top;
                                }
                                else {
                                    var element = $("#" + proxy._id.replace("ejTreeGrid", "")),
                                        position = proxy.getOffsetRect(element[0]);
                                    containerWidth = $(element).width() + position.left;
                                    containerHeight = $(element).height() + position.top;
                                }
                                tooltipWidth = $(proxy._headerMouseOverTooltip).width();
                                tooltipHeight = $(proxy._headerMouseOverTooltip).height();
                                // Calculation for reposition the tooltip when tooltip is exist the container height or width
                                if ((posx + tooltipWidth + 15) >= containerWidth) {
                                    posx = posx - tooltipWidth - 15;
                                }
                                if ((posy + tooltipHeight + 10) >= containerHeight) {
                                    posy = posy - tooltipHeight - 10;
                                }
                                $(proxy._headerMouseOverTooltip).css({ "top": posy, "left": posx });
                            }, 700);
                            }
                        }
                    }
                }
            }
        },
        
        _mouseHover: function (e) {            
            var proxy = this,
                model = proxy.model;
            if (model.showGridCellTooltip) {
                if (this._dragMouseDown != true) {
                    var $target = $(e.target),
                        posx = 0,
                        posy = 0,
                        $ganttGridRows = proxy.getRows(),
                        row = $target.closest('tr'),
                        column = $target.closest('td.e-rowcell'),
                        recordIndex = this.getIndexByRow(row),
                        item = model.currentViewData[recordIndex],
                        tooltiptable, tooltipbody, textContent, tooltipWidth,
                        tooltipHeight, containerWidth, containerHeight,
                        columns = model.columns,
                        currentColumn;

                    if (row.hasClass("e-footersummaryrow")) {
                        recordIndex = proxy._getFooterRows().index(row);
                        item = proxy._footerSummaryRecord[recordIndex];
                    }
                    
                    if (recordIndex >= 0 || row.hasClass("e-footersummaryrow")) {
                        var columnIndex = proxy.getCellIndex(e);
                        proxy._cellMouseLeave();

                        currentColumn = columns[columnIndex];
                        if (!e) e = window.event;
                        if (e.originalEvent.pageX || e.originalEvent.pageY) {
                            posx = e.originalEvent.pageX;
                            posy = e.originalEvent.pageY;
                        }
                        else if (e.originalEvent.clientX || e.originalEvent.clientY) {
                            posx = e.originalEvent.clientX + document.body.scrollLeft
                                + document.documentElement.scrollLeft;
                            posy = e.originalEvent.clientY + document.body.scrollTop
                                + document.documentElement.scrollTop;
                        }
                        if (item || row.hasClass("e-footersummaryrow")) {
                            if (columnIndex != model.treeColumnIndex) {
                                var clonedCellElement = column.clone();
                                clonedCellElement.find(".e-chkbox-wrap").remove();
                                textContent = clonedCellElement.children().length ? clonedCellElement.children().clone() : clonedCellElement.clone(); // Copying the DOM element of particular cell.
                            }
                            else {
                                if (column.find(".e-cell").length > 0) {
                                    textContent = column.find(".e-cell").clone();
                                    textContent.find(".e-chkbox-wrap").remove();
                                }
                                else if (column.hasClass("e-summaryrowcell")) {
                                    if (column.find(".e-summarytitle").length > 0) {
                                        textContent = column.find(".e-summarytitle").clone();
                                    } else {
                                        textContent = column.clone();
                                        $(textContent).css({ "cssText": "padding-left: 0px;" });
                                    }
                                }
                            }
                            textContent && textContent.addClass("e-treegrid-textWrap");
                            tooltiptable = ej.buildTag("table.e-tooltiptable e-zerospace", "", { 'padding': '0' });

                            if (!model.showGridExpandCellTooltip || (model.showGridExpandCellTooltip && columnIndex == proxy.model.treeColumnIndex)) {
                                tooltipbody = ej.buildTag("tbody", textContent, {}, {});
                            }
                            tooltiptable.append(tooltipbody);

                            var isNonEmptyText = $(textContent).text().replace(/[ \t\r]+/g, "").length > 0 ? true : false;

                            if (tooltipbody && $(column).find("#" + proxy._id + "EditForm").length == 0 && !proxy._isCommandColumn(currentColumn)) {
                                if ((!model.cellTooltipTemplate && (ej.isNullOrUndefined(currentColumn['tooltip']) || currentColumn['tooltip'] == "")) || (model.cellTooltipTemplate && !ej.isNullOrUndefined(currentColumn['tooltip']) && currentColumn['tooltip'] == "")) {
                                    if (!(model.showGridExpandCellTooltip) && isNonEmptyText
                                        || (model.showGridExpandCellTooltip && isNonEmptyText)) {
                                        var z_index = $("#" + this._id + "detailscellwrapper").length > 0 ? 110 : 5;
                                        proxy._mouseOverTooltip = ej.buildTag("div.e-tooltipgantt e-js#tooltipgantt" + proxy._id + "", tooltiptable,
                                            {
                                                "top": (posy + 10) + "px", 
                                                'left': 'auto',
                                                'position': 'absolute',
                                                'z-index': proxy.getMaxZIndex() + 1,
                                                'padding': '0',
                                                'border-radius': '3px'
                                            }, {});
                                        model.cssClass && (proxy._mouseOverTooltip.addClass(model.cssClass));
                                        //Providing a time delay to render the tooltip to improve UI
                                        proxy._tooltipTimer = setTimeout(function () {
                                            $(document.body).append(proxy._mouseOverTooltip);
                                            if (!model.isFromGantt) {
                                                var position = proxy.getOffsetRect(proxy.element[0]);
                                                containerWidth = $(proxy.element).width() + position.left;
                                                containerHeight = $(proxy.element).height() + position.top;
                                            }
                                            else {
                                                var element = $("#" + proxy._id.replace("ejTreeGrid", "")),
                                                    position = proxy.getOffsetRect(element[0]);
                                                containerWidth = $(element).width() + position.left;
                                                containerHeight = $(element).height() + position.top;
                                            }
                                            tooltipWidth = $(proxy._mouseOverTooltip).width();
                                            tooltipHeight = $(proxy._mouseOverTooltip).height();
                                            // Calculation for reposition the tooltip when tooltip is exist the container height or width
                                            var windowWidth = $(window).width(),
                                                leftSide = position.left + posx,
                                                rightSide = windowWidth - (position.left + posx);
                                            if ((posx + tooltipWidth + 15) >= containerWidth && (leftSide > rightSide)) {
                                                    posx = containerWidth - tooltipWidth - 15;
                                                    if (posx < 0)
                                                        posx = position.left;
                                                }
                                            if ((posy + tooltipHeight + 10) >= containerHeight) {
                                                posy = posy - tooltipHeight - 10;
                                            }
                                            $(proxy._mouseOverTooltip).css({ "top": posy, "left": posx });
                                        }, 700);
                                    }
                                }
                                else if (model.cellTooltipTemplate || (!ej.isNullOrUndefined(currentColumn['tooltip']) && currentColumn['tooltip'] != "")) {
                            var z_index = $("#" + this._id + "detailscellwrapper").length > 0 ? 110 : 5,
                                dataObj = {};
                            dataObj["record"] = item;
                            dataObj["column"] = columns[columnIndex];
                            if (!ej.isNullOrUndefined(currentColumn['tooltip']))
                                proxy._createColumnTooltipTemplate(currentColumn['tooltip']);
                                proxy._mouseOverTooltip = ej.buildTag("div.e-tooltipgantt e-js#tooltipgantt" + proxy._id + "", "",
                                    {
                                        "top": (posy + 10) + "px", "left": (posx + 15) + "px",
                                        'position': 'absolute',
                                        'z-index': proxy.getMaxZIndex() + 1,
                                        'padding': '0',
                                        'border-radius': '3px'
                                    }, {});
                                model.cssClass && (proxy._mouseOverTooltip.addClass(model.cssClass));
                                proxy.tooltipState = "Template";
                                var tooltipbody;
                                if (!ej.isNullOrUndefined(currentColumn['tooltip']))
                                    tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "columnTooltipTemplate"](dataObj), {}, {});
                                    else
                                    tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "tooltipTemplate"](dataObj), {}, {});
                                proxy._mouseOverTooltip[0].innerHTML = "<table>" + tooltipbody[0].innerHTML + "</table>";
                                var isNonEmptyText = $(tooltipbody).text().replace(/[ \t\r\n]+/g, "").length > 0 ? true : false;
                                if (isNonEmptyText){
                                proxy._tooltipTimer = setTimeout(function () {
                                    $(document.body).append(proxy._mouseOverTooltip);
                                    if (!model.isFromGantt) {
                                        var position = proxy.getOffsetRect(proxy.element[0]);
                                        containerWidth = $(proxy.element).width() + position.left;
                                        containerHeight = $(proxy.element).height() + position.top;
                                    }
                                    else {
                                        var element = $("#" + proxy._id.replace("ejTreeGrid", "")),
                                            position = proxy.getOffsetRect(element[0]);
                                        containerWidth = $(element).width() + position.left;
                                        containerHeight = $(element).height() + position.top;
                                    }
                                    tooltipWidth = $(proxy._mouseOverTooltip).width();
                                    tooltipHeight = $(proxy._mouseOverTooltip).height();
                                    // Calculation for reposition the tooltip when tooltip is exist the container height or width
                                    if ((posx + tooltipWidth + 15) >= containerWidth) {
                                        posx = posx - tooltipWidth - 15;
                                    }

                                    if ((posy + tooltipHeight + 10) >= containerHeight) {
                                        posy = posy - tooltipHeight - 10;
                                    }
                                    $(proxy._mouseOverTooltip).css({ "top": posy, "left": posx });
                                }, 700);
                                    }
                            }

                    }
                }
            }
        }

     }
 },
        _cellMouseLeave: function () {

            var proxy = this;
            if (proxy._mouseOverTooltip != null) {
                $("#tooltipgantt").remove();
                window.clearTimeout(proxy._tooltipTimer);
                $(proxy._mouseOverTooltip).remove();
            }
        },

        // Method to clear the header tooltip.
        _headerMouseLeave: function () {
            var proxy = this;
            if (proxy._headerMouseOverTooltip != null) {
                $("#headertooltip").remove();
                window.clearTimeout(proxy._headerTooltipTimer);
                $(proxy._headerMouseOverTooltip).remove();
            }
        },

        disableTooltip: function () {
            this._cellMouseLeave();
            this._headerMouseLeave();
        },
       
        _createTooltipTemplate: function () {

            var proxy = this,
                td,
                columnHeaderTexts = proxy.model.columnHeaderTexts,
                helpers = {},
                template = proxy.model.cellTooltipTemplate,
                parentTr = null;
            helpers["_" + proxy._id + "getTaskName"] = proxy._tooltipTaskName;
            $.views.helpers(helpers);
            var templateString = "";
            if (template) {

                if (document.getElementById(template)) {
                    templateString = $("#" + template)[0].innerHTML;
                } else {
                    templateString = template;
                }
                 parentTr = templateString;
                
            }
            else {
                var parentTr = "<tr class='e-tooltip_rowcell'>";

                td = "{{if ~_" + proxy._id + "getTaskName()}}" +
                    "<td class='e-tooltiptaskname' style='height:auto;width:auto;font-weight:normal;'>{{:ttiptaskname}}</td>{{/if}}";

                parentTr += td;
                parentTr += "</tr>";
            }
            var templates = {};
            templates[proxy._id + "tooltipTemplate"] = parentTr;
            $.templates(templates);
        },

        _tooltipTaskName: function () {
            return this.data.ttiptaskname;
        },

        // Method to create cell tooltip template.
        _createColumnTooltipTemplate: function (columnTemplate) {
            var proxy = this, parentTr = null, templateString = "";
            if (columnTemplate) {
                if (document.getElementById(columnTemplate)) {
                    templateString = $("#" + columnTemplate)[0].innerHTML;
                } else if (columnTemplate.slice(0, 1) === "#" && document.getElementById(columnTemplate.slice(1, columnTemplate.length))) {
                    templateString = $(columnTemplate)[0].innerHTML;
                } else {
                    templateString = columnTemplate;
                }
                parentTr = templateString;
            }
            var templates = {};
            templates[proxy._id + "columnTooltipTemplate"] = parentTr;
            $.templates(templates);
        },

        getMaxZIndex: function () {
            var divs = document.getElementsByTagName('div'),
                highest = 0,
                divLength = divs.length;
            if (this._maxZIndex == 0) {
                for (var i = 0; i < divLength; i++) {
                    var zindex = divs[i].style.zIndex,
                    checkIndex = parseInt(zindex);
                    if (checkIndex > highest && zindex != "auto" && !isNaN(checkIndex)) {
                        highest = checkIndex;
                    }
                }
                this._maxZIndex = highest;
            }
            return this._maxZIndex;
        },

        //SCROLL EVENT FOR VIRTUALIZATION
        _onScroll: function (args) {

            var proxy = this,
                model = this.model,
                hScrollDist, vScrollDist;
            proxy._popupHide();
            proxy._clearContextMenu();
         $("#" + this._id + "detailscellwrapper").length > 0 && this._removeDetailsRow();

            if (proxy.model.showGridCellTooltip) {
                proxy._cellMouseLeave();
                proxy._headerMouseLeave();
            }

            if (!model.isFromGantt && proxy._dragTooltip && (!proxy._timerDragDown && !proxy._timerDragUp)) {
                args.cancel = true;
                return;
            }

            if (!proxy.isVScroll() && !proxy.model.isFromGantt && args.source === "wheel") {
                args.cancel = true;
                return;
            }                        

            if (args.scrollLeft != undefined) {
                proxy._scrollLeft = args.scrollLeft;
                hScrollDist = Math.abs(proxy._scrollLeft - proxy._prevScrollLeft);
            }

            if (args.scrollTop != undefined) {
                proxy._scrollTop = args.scrollTop; //Maintain the scroll top for dynamic update of virtualization and non-virtualization mode.
                vScrollDist = Math.abs(proxy._scrollTop - proxy._preVScrollTop);
            }            

            if (hScrollDist) {
                proxy._updateHeaderScrollLeft(proxy._scrollLeft);
                proxy._prevScrollLeft = proxy._scrollLeft;
            }
            
            if (args.scrollTop != undefined) {

                /*Cancel if treegrid is in edit*/
                if (proxy.model.isEdit) {
                    proxy.cancelEditCell();
                    proxy._focusTreeGridElement();
                }
                else if (proxy._isRowEdit) {
                    proxy.cancelRowEditCell();
                    proxy._focusTreeGridElement();
                }

                proxy._vScrollDist = Math.abs(proxy._scrollTop - proxy._prevScrollTop);
                proxy._preVScrollTop = proxy._scrollTop;
                //CHECK VIRTUALIZATION IS ENABLED OR NOT
                if (proxy.model.enableVirtualization) {

                    proxy._vScrollDir = proxy._prevScrollTop <= proxy._scrollTop ? 1 : -1;
                    //console.log("VScrollDist:" + proxy._vScrollDist);
                    if (model.allowPaging && !proxy.model.sizeSettings.height) {
                        return;
                    }else if (proxy._vScrollDist && (proxy._scrollTop != proxy._prevScrollTop)) {
                        proxy._updateCurrentViewData(ej.TreeGrid.Actions.Scroll);
                        proxy._prevScrollTop = proxy._scrollTop;
                    }
                }
                proxy._scrollTop = args.scrollTop;
                if(this._frozenColumnsLength)
                    proxy.getContent().find("#e-frozencontainer" + proxy._id).scrollTop(proxy._scrollTop);
                proxy._vScrollDist = 0;//resetting this property to prevent unwanted rendering 
            }
        },

        editFormValidate: function () {
            var model = this.model,
                editSettings = model.editSettings;
            if ($.isFunction($.validator)) {
                if (this._frozenColumnsLength > 0) {
                    var forms = this.element.find(".e-treegridform");
                    if (forms.length == 0) {
                        return true;
                    }
                    this.setValidation();
                    if (forms.length > 1) {
                        var form1, form2;
                        form1 = forms.eq(0).validate().form();
                        form2 = forms.eq(1).validate().form();
                        if (!(form1 && form2))
                            return false;
                        else
                            return true;
                    }
                    else if (forms.length > 0)
                        return forms.validate().form();
                }
                else if ($("#" + this._id + "EditFormDialog").length > 0) {
                    if (editSettings.editMode == "dialogEditing" || (editSettings.editMode.toLowerCase() == "batchediting" && editSettings.batchEditSettings.editMode.toLowerCase() == "dialog"))  {
                        var isOpen = $("#" + this._id + "_dialogEdit").ejDialog("isOpen");
                        if (!isOpen)
                            return true;
                    }
                    this.setValidation();
                    return $("#" + this._id + "EditFormDialog").validate().form();
                }
                else if ($("#" + this._id + "EditForm").length > 0) {
                    this.setValidation();
                    return $("#" + this._id + "EditForm").validate().form();
                }
                else
                    return true;
            }
            return true;
        },

        //To check previous and current value for row edit
        _checkModfiedCellValue: function (orginalValue, modifiedValue, column) {
            var proxy = this, model = proxy.model, flag = false;
            if ((column["editType"] == "datepicker" || column["editType"] == "datetimepicker")) {
                if (orginalValue instanceof Date && modifiedValue instanceof Date) {
                    if (column["editType"] == "datepicker") {
                        var oldDate = new Date(orginalValue), newDate = new Date(modifiedValue);
                        if (oldDate.setHours(0, 0, 0, 0) != newDate.setHours(0, 0, 0, 0))
                            flag = true;
                    }
                    else {
                        if (orginalValue.getTime() != modifiedValue.getTime()) {
                            flag = true;
                        }
                    }
                }
                else if ((orginalValue !== modifiedValue))
                    flag = true;

            }
            else if (column["editType"] == "dropdownedit") {
                if (orginalValue !== modifiedValue)
                    flag = true;
            }
            else {
                orginalValue = ej.isNullOrUndefined(orginalValue) ? "" : orginalValue;
                modifiedValue = ej.isNullOrUndefined(modifiedValue) ? "" : modifiedValue;
                if (model.isFromGantt && column["field"] == "duration") {
                    var values = modifiedValue.match(/(\d*\.*\d+|[A-z]+)/g);
                    if (values && values.length <= 2)
                        modifiedValue = parseFloat(values[0]);
                }
                if (orginalValue instanceof Array && modifiedValue instanceof Array) {
                    $.each(orginalValue, function (key, value) {
                        var index = $.inArray(value, modifiedValue);
                        if (index == -1) {
                            flag = true;
                        }
                    });
                }
                else if (orginalValue.toString() !== modifiedValue.toString())
                    flag = true;
            }
            return flag;
        },
        
        //Save the edited row
        saveRow: function () {
            var proxy = this,
           model = proxy.model, form, index, isDialogEdit, editType,
           editMode = model.editSettings.editMode.toLowerCase();

            if (proxy.model.editSettings.allowEditing && (editMode == "dialogediting" || (editMode == "batchediting" && model.editSettings.batchEditSettings.editMode == "dialog"))) {
                form = $("#" + proxy._id + "EditFormDialog");
                index = proxy._currentEditRecordDialogIndex;
                isDialogEdit = true;
            } else {
                form = $("#" + proxy._id + "EditForm");
                index = this.getIndexByRow(form.closest("tr"));
            }

            if (form) {
                if (!proxy.editFormValidate()) return true;
            }

            var frozenForm = $("#" + proxy._id + "EditFrozenForm"),
                formElement = frozenForm.add(form).find("td"),
                isAddRow = form.closest("tr").hasClass("e-addedrow"),
                columns = model.columns,
                columnLength = columns.length,
                currentItem = model.currentViewData[index],
                value, args = {}, currentValue = ej.copyObject({}, currentItem.item),
                isLocalDataUpdate = true, isValueModified = false;

            proxy._focusTreeGridElement();

            if (form.length <= 0 && index == -1)
                return;

            for (var i = 0; i < columnLength; i++) {
                var column = columns[i], fieldName = column["field"];
                if (fieldName == "" || (proxy._checkboxSelection && column["nonColumn"])) continue;

                if (column.visible || ((model.editSettings.editMode == "dialogEditing" || (proxy.model.editSettings.editMode.toLowerCase() == "batchediting" && model.editSettings.batchEditSettings.editMode.toLowerCase() == "dialog")) && (!ej.isNullOrUndefined(model.editSettings.dialogEditorTemplateID) && model.editSettings.dialogEditorTemplateID != ""))) {
                    editType = ej.isNullOrUndefined(column["editType"]) ? "stringedit" : column["editType"];

                    value = proxy.getCurrentEditCellDataForRowEdit(fieldName, editType, i);
                    value = (ej.isNullOrUndefined(value) || (column.editType == ej.TreeGrid.EditingType.Numeric && isNaN(value))) ? null : value;
                    //To avoid duplicate ID for TreeGrid on self reference while row editing
                    if (model.idMapping && model.parentIdMapping && fieldName == model.idMapping) {
                        if (proxy._validateIdValue(value))
                            value = currentItem[fieldName]; //Replacing the old value
                    }
                    if (!proxy._checkModfiedCellValue(ej.getObject(fieldName, currentValue), value, column)) continue;

                    if (fieldName.indexOf(".") != -1)
                        ej.createObject(fieldName, value, currentValue);
                    else
                        currentValue[fieldName] = value;
                    isValueModified = true;
                    if (editMode == "batchediting" && !isAddRow) {
                        //Take backup of original field values
                        proxy._createBatchEditedFields(currentItem, fieldName, value, column);
                        proxy._batchEditStarts = true;
                        proxy._updateBatchChanges(currentItem);
                    }
                }
            }
            if (isAddRow) {
                proxy._isEmptyRow = proxy._checkIsEmptyRow(currentValue);
                args.rowIndex = proxy.selectedRowIndex();
                args.previousValue = currentItem.item;
                args.requestType = "addNewRow";
                args.addedRow = proxy._isEmptyRow ? null : currentValue;
                args.rowElement = form.closest("tr");                
                if (!proxy._isEmptyRow) {
                    if (editMode == "batchediting") {
                        proxy.batchChanges.added.push(currentItem);
                        proxy._batchEditStarts = true;
                    }
                    else {
                        if (proxy._trigger("actionComplete", args)) return true;
                    }
                    ej.copyObject(currentItem, currentValue);
                    ej.copyObject(currentItem.item, currentValue);
                    isLocalDataUpdate = proxy._updateAction(args);
                    if (model.idMapping && model.parentIdMapping)
                        proxy._updateLastInsertedId(currentItem[model.idMapping]);
                }
            }
            else {
                args.requestType = "update";
                args.rowIndex = proxy.getUpdatedRecords().indexOf(currentItem);
                args.currentValue = currentValue;
                args.previousValue = currentItem.item;

                if (isDialogEdit) {
                    args.element = $("#" + proxy._id + "_dialogEdit");
                    if (!proxy._isRemoteData) {
                        isValueModified = true;
                    }
                    if (isValueModified && proxy._trigger("actionBegin", args)) return true;

                    isLocalDataUpdate = proxy._updateAction(args);
                    if (model.idMapping && model.parentIdMapping)
                        proxy._updateLastInsertedId(args.currentValue[model.idMapping]);

                    for (var colIndex = 0 ; colIndex < columns.length ; colIndex++) {
                        if (columns[colIndex]["editType"] == ej.TreeGrid.EditingType.Dropdown || columns[colIndex]["editType"] == ej.TreeGrid.EditingType.DatePicker || columns[colIndex]["editType"] == ej.TreeGrid.EditingType.DateTimePicker) {
                            var $element = $("#" + proxy._id + proxy._getFieldValue(columns[colIndex]["field"]));
                            $element.data("ejWidgets") && $element[$element.data("ejWidgets")[0]]("destroy");
                        }
                    }
                }
                else {
                    args.rowElement = form.add(frozenForm).closest("tr");
                    if (isValueModified || !proxy._isRemoteData) {
                        if ((isValueModified && editMode == "batchediting") || (editMode != "batchediting" && !proxy._trigger("endEdit", args))) {
                            isLocalDataUpdate = proxy._updateAction(args);
                            if (model.idMapping && model.parentIdMapping)
                                proxy._updateLastInsertedId(args.currentValue[model.idMapping]);
                        }
                    }
                }
            }              

            if (isLocalDataUpdate)
                proxy._refreshAfterSaveRow(args, true);
        },

        _refreshAfterSaveRow: function (args, isValueModified) {
            var proxy = this, model = proxy.model,
                columns = model.columns,
                currentItem = proxy.getUpdatedRecords()[args.rowIndex],
                index = model.currentViewData.indexOf(currentItem);

            /* delete the row if new added row is not have any values */
            if (proxy._isEmptyRow && args.requestType == "addNewRow") {
                var deleteValueUpdated = false;
                if (!model.editSettings.allowDeleting) {
                    deleteValueUpdated = true;
                    model.editSettings.allowDeleting = true;
                }
                proxy.deleteRow(null, true, null);
                proxy._isEmptyRow = false;
                proxy._isEmptyRowDeleted = true;
                if (deleteValueUpdated) {
                    model.editSettings.allowDeleting = false;
                }
            } else {
                // Save the edited row           
                ej.TreeGrid.refreshRow(proxy, index);
                if (args.requestType == "addNewRow" && currentItem.parentItem && currentItem.parentItem.childRecords.length == 1) {
                    ej.TreeGrid.refreshRow(proxy, model.currentViewData.indexOf(currentItem.parentItem));
                }
                if (model.showSummaryRow) {
                    args.editType = "rowedit";
                    if (args.requestType == "addNewRow" && model.editSettings.rowPosition == "child") {
                        proxy._createAndRenderSummaryRecords(args);
                    }
                    proxy._updateSummaryRow(args);
                }
                if (model.showTotalSummary) {
                    args.editType = "rowedit";
                    proxy._updateTotalSummaryRow(args);
                }
                if (isValueModified && model.editSettings.editMode == "dialogEditing") {
                    //Client side event is triggerd for upadte the server side database
                    var eventArgs = {};
                    eventArgs.data = currentItem
                    eventArgs.item = currentItem.item;
                    eventArgs.requestType = "recordUpdate";
                    proxy._trigger("actionComplete", eventArgs);
                    if (model.idMapping && model.parentIdMapping) {
                        proxy._updateLastInsertedId(eventArgs.item[model.idMapping]);
                    }
                }
            }
            proxy._isRowEdit = false;
            if (model.currentViewData.length > 0 && model.enableAltRow && !model.enableVirtualization)
                ej.TreeGrid.updateAltRow(proxy, model.currentViewData[0], 0, 0);
            proxy._cancelSaveTools();
            var colObject = columns.filter(function (column) {
                if (column.filterEditType == "dropdownedit" && column.editType != "dropdownedit")
                    return true;
            });
            if (model.allowFiltering && colObject.length)
                proxy._resizeFilteringElements();
            if (proxy._commandColumnLength > 0) {
                var tr = ej.TreeGrid.getRowByIndex(proxy, proxy.getUpdatedRecords().indexOf(currentItem));
                proxy._refreshUnboundTemplate(tr);
                if (args.requestType == "addNewRow" && model.editSettings.rowPosition == ej.TreeGrid.RowPosition.Child) {
                    var parentTr = ej.TreeGrid.getRowByIndex(proxy, proxy.getUpdatedRecords().indexOf(currentItem.parentItem));
                    proxy._refreshUnboundTemplate(parentTr);
                }
            }
            if (model.allowTextWrap && proxy._$frozenTableContent.length > 0) {
                proxy._updateRowHeight(index);
                proxy._updateGridContentHeight();
                proxy.getScrollElement().ejScroller("refresh");
                var movableScrollTop = proxy.getScrollElement().ejScroller("model.scrollTop");
                proxy._getFrozenScrollElement().scrollTop(movableScrollTop);
                if (proxy.model.enableVirtualization) {
                    proxy.updateHeight();
                }
            } else if (model.allowTextWrap) {
                if (model.allowPaging && !model.sizeSettings.height) {
                    proxy.updateHeight();
                } else {
                    proxy.getScrollElement().ejScroller("refresh");
                }
            }
            if (model.allowTextWrap && proxy._$frozenTableContent.length == 0) {
                var height = proxy._getViewPortHeight();
                proxy._$gridContainer.css({
                    "height": height + "px",
                });
                $("#" + proxy._id + "e-gridcontent").css("height", height)
                proxy.getScrollElement().ejScroller("refresh");
            }
        },

        _updateAction: function (args) {
            var proxy = this, model = proxy.model,
                pkey = model.idMapping,
                index = (args.requestType == "dragAndDrop") ? args.draggedRowIndex : args.rowIndex,
                record = proxy.getUpdatedRecords()[index], isBatchAction = false,
                item, promise, bulkChanges = { added: [], changed: [], deleted: [] };

            if (proxy._isRemoteData) {
                var selectionType = model.selectionSettings.selectionType,
                    batchUrl = proxy._dataManager.dataSource.batchUrl;
                if(!ej.isNullOrUndefined(batchUrl) || selectionType == "multiple" || selectionType == "checkbox")
                    isBatchAction = true;
            }                

            if (args.requestType == "addNewRow") {
                if (proxy._isRemoteData){
                    if(isBatchAction)
                        bulkChanges.added.push(args.addedRow);
                    else
                        promise = proxy._dataManager.insert(args.addedRow, proxy.model.query);
                }
            }
            else if (args.requestType == "update") {
                if (proxy._isRemoteData){
                    if(isBatchAction)
                        bulkChanges.changed.push(args.currentValue);
                    else
                        promise = this._dataManager.update(pkey, args.currentValue, proxy.model.query);
                }                    
                else {
                    ej.copyObject(record, args.currentValue);
                    ej.copyObject(record.item, args.currentValue);
                }
            }
            else if (args.requestType == "dragAndDrop") {
                if (proxy._isRemoteData){
                    if (isBatchAction) {
                        var records = args.draggedRecords;
                        for (var i = 0; i < records.length; i++) {                            
                            bulkChanges.changed.push(records[i].item);
                        }
                    }
                    else
                        promise = this._dataManager.update(pkey, record.item, proxy.model.query);
                }                    
            }
            else if (args.requestType == "saveCellValue") {
                var item = args.data.item;
                if (proxy._isRemoteData && $.isPlainObject(item)) {
                    if(isBatchAction)
                        bulkChanges.changed.push(item);
                    else
                        promise = proxy._dataManager.update(pkey, item, proxy.model.query);
                }
            }
            else if (args.requestType == ej.TreeGrid.Actions.Delete) {
                if (proxy._isRemoteData) {
                    if (isBatchAction)
                        bulkChanges.deleted = (proxy._getParentChildItem(args.deletedItems));
                    else {
                        var item = args.data.item;
                        promise = proxy._dataManager.remove(pkey, item[pkey], this.model.query);
                    }
                }
            }
            if (isBatchAction) {
                promise = proxy._dataManager.saveChanges(bulkChanges, pkey, this.model.query._fromTable, this.model.query);
            }

            if (promise && $.isFunction(promise.promise) && !proxy._dataManager.dataSource.offline) {
                proxy._waitingPopupObj.show();
                promise.done(function (e) {
                    if (args.requestType == ej.TreeGrid.Actions.Delete) {
                        proxy._updateDeleteAction(args);
                        proxy._cancelSaveTools();
                    }
                    else if (args.requestType == "addNewRow" || args.requestType == "update") {
                        // Replace record if data getting from server-side
                        var item = (args.requestType == "addNewRow") ? args.addedRow : args.currentValue;
                        if (!ej.isNullOrUndefined(e) && !ej.isNullOrUndefined(e.record) && $.isPlainObject(e.record))
                            ej.copyObject(item, e.record);
                        ej.copyObject(record, item);
                        ej.copyObject(record.item, item);
                        proxy._refreshAfterSaveRow(args, true);
                    }
                    else if (args.requestType == "saveCellValue")
                        proxy._refreshAfterSaveCell(args, true);
                    proxy._waitingPopupObj.hide();
                });
                promise.fail(function (e) {
                    args.error = (e && e.error) ? e.error : e;
                    if (args.requestType == "update")
                        proxy._refreshAfterSaveRow(args, true);
                    else if (args.requestType == "addNewRow") {
                        var recordIndex = proxy.getUpdatedRecords().indexOf(record);
                        proxy._isEmptyRow = true;
                        proxy.deleteRow(null, true, recordIndex);
                        proxy._isEmptyRow = false;
                    }
                    else if (args.requestType == "saveCellValue") {
                        args.data[args.columnName] = args.previousValue;
                        args.data.item[args.columnObject.field] = args.previousValue;
                        proxy.selectRows(proxy.selectedRowIndex());
                        ej.TreeGrid.refreshRow(proxy, model.currentViewData.indexOf(args.data));
                    }                    
                    proxy._waitingPopupObj.hide();
                    proxy._trigger("actionFailure", args);
                });
            }
            return !proxy._isRemoteData;
        },
        _getParentChildItem: function (records, items) {
            var proxy = this, length = records.length,
                items = ej.isNullOrUndefined(items) ? [] : items;
            for (var i = 0; i < length; i++) {
                var data = records[i];
                if (items.indexOf(data.item) == -1)
                    items.push(data.item);
                if (data.hasChildRecords)
                    proxy._getParentChildItem(data.childRecords, items);
            }
            return items;
        },
        _excludeDetailRows : function()
        {
            var $gridRows = $(), model = this.model;
            if (this.getTreeGridRows() && this.getTreeGridRows().length > 0) {
                if (model.showDetailsRow && model.detailsTemplate) {
                    if (this._frozenColumnsLength > 0)
                        $gridRows = [$(this.getTreeGridRows()[0]).not(".e-detailsrow"), $(this.getTreeGridRows()[1]).not(".e-detailsrow")];
                    else
                        $gridRows = $(this.getTreeGridRows()).not(".e-detailsrow");
                }
                else {
                    if (this._frozenColumnsLength > 0)
                        $gridRows = [$(this.getTreeGridRows()[0]), $(this.getTreeGridRows()[1])];
                    else
                        $gridRows = $(this.getTreeGridRows());
                }
            }
            return $gridRows;
        },

        getIndexByRow: function ($tr) {
            var $gridRows = this._excludeDetailRows(), rowIndex = -1;
            if (this._frozenColumnsLength > 0) {
                rowIndex = $($gridRows[0]).index($tr);
                if (rowIndex == -1)
                    rowIndex = $($gridRows[1]).index($tr);
                return rowIndex;
            }
            return $gridRows.index($tr);
        },
        /*get all treegrid rows with details rows*/
        getTreeGridRows: function () {
            return this._gridRows;
        },

        _keyDown: function (e) {
            var proxy = this;
            if (e.shiftKey && proxy._shiftKeyFirstElementDetails.firstElementRowIndex == -1) {
                proxy._shiftKeyFirstElementDetails.firstElementRowIndex = proxy._focusingRowIndex;
                proxy._shiftKeyFirstElementDetails.firstElementCellIndex = proxy._cellIndex;
            }
            else if (e.which == 13 && this._excelFilter != null && !ej.isNullOrUndefined(this._excelFilter._openedFltr) && this._excelFilter._openedFltr.length && this._excelFilter._openedFltr.is(":visible")) {
                var dlgID = this._id + this._excelFilter._$colType;
                if (this._excelFilter._openedFltr.hasClass("e-dlgcustom"))
                    dlgID += "Custom";
                this._excelFilter._openedFltr.find("#" + dlgID + "_OkBtn").trigger("click");
            }

            else if (e.which === 13 && $(e.target).hasClass("e-searchinput") && $(e.target).closest("#" + proxy._id + "_toolbarItems")) { //13 is key code for Enter Key 
                this._toolbarOperation(this._id + "_search", e.currentTarget);
                e.preventDefault();
                return false;//prevent post back
            }
            else if (e.type == "click" && $(e.target).hasClass("e-searchitem")) {
                this._toolbarOperation(this._id + "_search", $(e.currentTarget).prev()[0].firstChild);
                e.preventDefault();
                return false;
            }
        },

        /*focus treegrid element*/
        _focusTreeGridElement: function () {
            if (ej.browserInfo().name == "msie") {
                try { this.element[0].setActive(); } catch (e) { }
            }
            else {
                var scrollTop = $(window).scrollTop();
                this.element[0].focus();
                $(window).scrollTop(scrollTop);
            }
        },
        _onRecordClick:function(e){
            this._recordClickAction(e,"recordClick");
        },
        _onRecordDoubleClick:function(e){
            this._recordClickAction(e,"recordDoubleClick");
        },
        _recordClickAction: function (e,eventName) {
            var proxy = this,$target = $(e.target), model= proxy.model, column,
            $td = $target.closest("td"), args = {},$tr=$target.closest("tr");
            if (($target.hasClass("e-rowcell") || $target.parent().hasClass("e-rowcell") || ($target.closest("td").hasClass("e-rowcell"))
                || ($target.closest("td").hasClass("e-rowcell")) && $target.hasClass("e-cell")) && $tr.find(".e-editedcell").length == 0 && !$tr.hasClass("e-summaryrow") && !$td.hasClass("e-unboundcell")) {
                args.cell = $td;
                args.cellIndex = proxy.getCellIndex(e);
                args.row = $tr;
                args.rowIndex = proxy.getIndexByRow(args.row);
                args.data = proxy.model.currentViewData[args.rowIndex];
                column = model.columns[args.cellIndex];
                args.columnName = column.headerText;
                args.cellValue = !ej.isNullOrUndefined(args.data) ? args.data[column.field] : "";
                args.targetElement = $target;
                proxy._trigger(eventName, args);
            }
        },
        //add remove animation class for expand/collpase and header icons
        _addRemoveAnimateClass:function(element)
        {
            var proxy = this;
           this._$gridContentTable && this._$gridContentTable.find(".e-treegrid-animate").removeClass("e-treegrid-animate");
            proxy._$gridHeaderContainer && proxy._$gridHeaderContainer.find(".e-treegrid-animate").removeClass("e-treegrid-animate");
            $(element).addClass("e-treegrid-animate");
        },
        //CLICK HANDLER FOR PERFORM ROWSELECTION AND EXPANDCOLLAPSE THE RECORD
        _onClick: function (e) {

            var proxy = this,
                model = proxy.model,
                $target = $(e.target), currentRowIndex, args = {}, rowIndex = -1, expandRecord, id = $target.closest(".e-treegrid").attr("id"),
                updatedRecords = proxy.getUpdatedRecords();
            /* check inner treegrid click events and  */
            if ($target.closest(".e-treegrid").attr("id") !== this._id) return false;
            proxy._clearContextMenu();
            this._removeDetailsRow(e);            
            if (model.allowDragAndDrop)
                window.clearTimeout(proxy._dragTooltipTimer);
            if (model.allowColumnReordering) {
                window.clearTimeout(this._dragColumnTooltipTimer);
                this._dragColumnTooltipTimer = null;
            }
            proxy._cellIndex = proxy.getCellIndex(e);
            if (!$target.hasClass("e-filtertext") && !$target.hasClass("e-cancel"))
                proxy.getHeaderTable().find(".e-cancel").addClass("e-hide");
            if (model.selectionSettings.selectionMode == "cell" && model.editSettings.editMode != "dialogEditing") {
                model.editSettings.editMode = "cellEditing";
            }
            rowIndex = proxy.getRowIndex(e);
            if ((model.editSettings.beginEditAction == "click" || $target.hasClass('e-treegridexpand')
                || $target.hasClass("e-treegridcollapse")) && $target.closest('.e-scrollbar').length == 0 && $target.closest('.e-toolbaricons').length == 0 && $target.closest('.e-treegridtoolbaritem').length == 0) {
                if (model.editSettings.editMode.toLowerCase() == "cellediting" || (model.editSettings.editMode.toLowerCase() == "batchediting") && model.editSettings.batchEditSettings.editMode.toLowerCase() == "cell")
                    proxy._cellEditingDetails.rowIndex = rowIndex;
                expandRecord = model.currentViewData && model.currentViewData[rowIndex];
            }
            if (proxy.model.allowSelection && proxy.model.selectionSettings.selectionType == "multiple" && !proxy.model.isFromGantt && !($target.hasClass("e-downtail"))) {
                if ($target.hasClass("e-rowselect")) {
                    if (!$target.hasClass("e-spanclicked")) {
                        $target.addClass("e-spanclicked");
                    } else {
                        proxy._clearMultiSelectPopup();
                    }
                } else {
                    if (!$("#" + id + "_selectionpopup").find(".e-rowselect").hasClass("e-spanclicked")) {
                        this._multiSelectPopup.hide();
                    }
                }
            }
            proxy._saveCellHandler(e);
            if ($target.hasClass('e-summarytreegridexpand') || $target.hasClass('e-summarytreegridcollapse')) {
                args.expanded = $target.hasClass('e-summarytreegridexpand') ? false : true;
                proxy._isInManualExpandCollapse = true;
                proxy.expandCollapseTotalSummary(args.expanded);
                proxy._isInManualExpandCollapse = false;
                proxy._addRemoveAnimateClass($target);               
                return;
            }
            if ($target.hasClass("e-summaryrowcell") || $target.hasClass("e-footersummaryrowcell")
                || $target.hasClass("e-summarytitle"))
                return;
            if (($target.hasClass('e-treegridexpand') || $target.hasClass("e-treegridcollapse")) && rowIndex != -1  && proxy.editFormValidate()) {
                var $tr = $target.closest('tr'),
                    recordIndex = updatedRecords.indexOf(expandRecord),
                    args = {},
                    isExpandCollapseEnabeled;
                $target.removeClass("e-treegrid-animate");
                args.data = record;
                args.data = expandRecord;
                args.recordIndex = recordIndex;
                args.expanded = $tr.hasClass("e-treegridrowexpand") ? false : true;
                //Set the focus to the element when row or column not in edit mode.
                if ($("#" + proxy._id + "EditForm").length == 0 && ($target.hasClass("e-rowcell") ||  !$target.closest(".e-rowcell").hasClass("e-templatecell"))) {
                   proxy._focusTreeGridElement();
                } else {
                    proxy._cancelEditState();
                }
                if (args.expanded) {

                    isExpandCollapseEnabeled = proxy._trigger("expanding", args);

                } else {

                    isExpandCollapseEnabeled = proxy._trigger("collapsing", args);
                    
                }

                if (!isExpandCollapseEnabeled&&!model.isFromGantt) {

                    /* refresh Added row on expand collapse */
                    if (proxy._isRefreshAddedRecord) {
                        args.data.expanded = args.expanded;
                        proxy.updateExpandStatus(args.data, args.expanded);
                        proxy.refreshContent();
                        proxy.renderRecords();
                        if (model.allowTextWrap && proxy._frozenColumnsLength > 0) {
                            proxy._updateRowHeight();
                            if (model.sizeSettings.height == "auto")
                                proxy._updateContentHeight();
                            proxy.getScrollElement().ejScroller("refresh");
                            proxy._updateScrollCss();
                        }
                        proxy._isRefreshAddedRecord = false;
                    } else {
                        ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                    }
                }
                //To set animate class for clicked item
                if (model.allowPaging || model.enableVirtualization) {
                    var newUpdatedRecords = proxy.getUpdatedRecords(),
                        currentRowElement = ej.TreeGrid.getRowByIndex(this,newUpdatedRecords.indexOf(expandRecord));
                    currentRowElement && proxy._addRemoveAnimateClass($(currentRowElement).find(".e-treegridcollapse,.e-treegridexpand"));
                }else
                {
                    proxy._addRemoveAnimateClass($target);
                }
                
            } else if ($target.hasClass("e-rowcell") || $target.parent().hasClass("e-rowcell") || ($target.closest("td").hasClass("e-rowcell")) || $target.parent().hasClass("e-detailsrowcell") || $target.hasClass("e-detailsrowcell")
                || ($target.closest("td").hasClass("e-rowcell")) && $target.hasClass("e-cell")) {
                this._shiftSelectedRecord = null;
                if ($("#" + id + "_selectionpopup").is(":visible")) {
                    if ($("#" + id + "_selectionpopup").find(".e-rowselect").hasClass("e-spanclicked")) {
                        e.ctrlKey = true;
                        if (model.selectionSettings.selectionMode == ej.TreeGrid.SelectionMode.Row)
                        proxy._multiSelectCtrlRequest = true;
                    }
                    else {
                        e.ctrlKey = false; proxy._multiSelectCtrlRequest = false;
                    }
                }
                if (model.isFromGantt && proxy._ganttTouchTrigger) {
                    var args = {
                        target: $target,
                        ctrlKey:e.ctrlKey
                     }
                    proxy._trigger("getCtrlRequestValue", args);
                    e.ctrlKey = args.ctrlKey;
                }
                //Set the focus to the element when row or column not in edit mode.
                if ($("#" + proxy._id + "EditForm").length == 0 && ($target.hasClass("e-rowcell") || !$target.closest(".e-rowcell").hasClass("e-templatecell"))) {
                    proxy._focusTreeGridElement();
                }
                //Check selction is enabled or not
                
                    currentRowIndex = proxy.getIndexByRow($target.closest('tr'));
                    if (model.selectionSettings.selectionMode == ej.TreeGrid.SelectionMode.Row) {

                        if (proxy._checkboxSelection && ($("#" + proxy._id + "EditForm").length == 0 || model.editSettings.beginEditAction == "click") && proxy.editFormValidate()) {
                            var record = proxy.model.currentViewData[currentRowIndex],
                                recordIndex = updatedRecords.indexOf(record), isCheckbox = false;
                            if ($target.hasClass("e-checkbox"))
                                isCheckbox = true;
                            if (recordIndex != -1 && !proxy._rowSelectingEventTrigger(this.selectedRowIndex(), recordIndex, isCheckbox, e.type)) {
                                proxy.selectRows(recordIndex, null, isCheckbox);
                                proxy._cancelSaveTools();
                                proxy._rowSelectedEventTrigger(recordIndex, null, isCheckbox, e.type);
                            }
                        }
                if (model.selectionSettings.selectionType == ej.TreeGrid.SelectionType.Multiple) {

                    proxy._multiSelectCtrlRequest = e.ctrlKey? true: false;

                    if (e.shiftKey && model.allowSelection == true) {
                        currentRowIndex = proxy.getIndexByRow($target.closest('tr'));
                                record = model.currentViewData[currentRowIndex];
                                currentRowIndex = updatedRecords.indexOf(record);
                        proxy._multiSelectShiftRequest = true;
                        if (!proxy._rowSelectingEventTrigger(this.selectedRowIndex(), currentRowIndex , false , e.type)) {
                                    if (proxy.getRows() && proxy._prevSelectedItem != null) {
                                        if (proxy.getExpandStatus(proxy._prevSelectedItem))
                                            proxy.selectRows(updatedRecords.indexOf(proxy._prevSelectedItem), currentRowIndex);
                                        else
                                            proxy.selectRows(currentRowIndex);
                            }
                                    else if (proxy.getRows() && proxy._prevSelectedItem == null) {
                                        proxy.selectRows(0, currentRowIndex);
                            }
                            proxy._cancelSaveTools();
                            if (model.isFromGantt && e.shiftKey) {
                                proxy._rowSelectedEventTrigger(currentRowIndex, !ej.isNullOrUndefined(proxy._prevSelectedItem) ? model.updatedRecords.indexOf(proxy._prevSelectedItem) : 0);
                            }
                            else {
                                proxy._rowSelectedEventTrigger(currentRowIndex, null, false, e.type);
                            }
                        }
                    }
                }
                if (!proxy._checkboxSelection &&!proxy._multiSelectShiftRequest && $("#" + proxy._id + "EditForm").length == 0 ) {

                    //recordIndex = proxy.getIndexByRow($target.closest('tr'));

                    if (rowIndex != -1) {

                        record = model.currentViewData[rowIndex];
                        currentRowIndex = updatedRecords.indexOf(record);
                       
                        if (model.allowSelection && !proxy._rowSelectingEventTrigger(this.selectedRowIndex(), currentRowIndex, false, e.type)) {
                            proxy.selectRows(currentRowIndex);
                            proxy._cancelSaveTools();
                            proxy._rowSelectedEventTrigger(currentRowIndex, null, false, e.type);
                        }                      
                    }
                }
                proxy._multiSelectShiftRequest = false;
                    }
                    if (model.selectionSettings.selectionMode == ej.TreeGrid.SelectionMode.Cell && $("#" + proxy._id + "EditForm").length == 0 && proxy._cellIndex != -1 &&
                        currentRowIndex != -1 && model.allowSelection) {
                        var frozenColumnRowIndex = proxy._cellIndex >= proxy._frozenColumnsLength ? 1 : 0,
                            targetRow;
                        if (proxy._frozenColumnsLength > 0) {
                            targetRow = proxy.getRows()[frozenColumnRowIndex][currentRowIndex];
                        }
                        else
                            targetRow = proxy.getRows()[currentRowIndex];
                        var columns = model.columns,
                            record = model.currentViewData && model.currentViewData[currentRowIndex],
                            targetIndex = updatedRecords.indexOf(record),
                            targetCellIndex = proxy._cellIndex >= proxy._frozenColumnsLength ? proxy._cellIndex - proxy._frozenColumnsLength : proxy._cellIndex,
                            target = targetRow.childNodes[targetCellIndex],
                            previousRowIndex = proxy._previousSelectedCellDetails.rowIndex,
                            previousCellIndex = proxy._previousSelectedCellDetails.cellIndex,
                            targetCell = $(target).closest("td"),
                            currentCellIndex;
                        proxy._focusingRowIndex = targetIndex;

                        if (currentRowIndex != -1) {

                            if (record.isSummaryRow)
                                return;
                            var args = {
                                rowIndex: targetIndex,
                                cellIndex: proxy._cellIndex,
                                rowElement: targetRow,
                                cellElement: targetCell[0]
                            };
                            
                            var selectedCellInfo = {
                                rowIndex: targetIndex,
                                cellIndex: proxy._cellIndex,
                                cellElement: targetCell[0],                                
                                data: record
                            };

                            if (!proxy._cellSelectingEventTrigger(args) && columns[proxy._cellIndex].allowCellSelection) {
                                if (model.selectionSettings.selectionType == "multiple" && (e.ctrlKey || e.shiftKey)) {
                                    //Select Multiple cells dynamically using Ctrl Key + mouse click.
                                    if (e.ctrlKey) {
                                        if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9)
                                            currentCellIndex = proxy._getCellIndex(proxy._selectedCellDetails, "cellElement").indexOf(targetCell[0]);
                                        else
                                            currentCellIndex = proxy._selectedCellDetails.map(function (e) { return e.cellElement; }).indexOf(targetCell[0]);


                                        if (currentCellIndex == -1) {
                                            $(targetCell[0]).addClass("e-selectingcell");
                                                proxy._selectedCellDetails.push(selectedCellInfo);                                            
                                            model.selectedCellIndexes.push({ rowIndex: selectedCellInfo.rowIndex, cellIndex: selectedCellInfo.cellIndex });
                                                proxy._cellSelectedEventTrigger(args, proxy._previousSelectedCellDetails);
                                        }
                                        else {
                                            $(targetCell[0]).removeClass("e-selectingcell");
                                            proxy._selectedCellDetails.splice(currentCellIndex, 1);
                                            model.selectedCellIndexes.splice(currentCellIndex, 1);
                                        }                                       
                                    }
                                        //Select multiple cells using Shift Key + mouse Click.
                                    else if (e.shiftKey) {
                                        var args = {
                                            rowIndex: targetIndex,
                                            cellIndex: proxy._cellIndex,
                                        };
                                        proxy._shiftKeySelectCells(args);
                                        proxy._rowIndexOfLastSelectedCell = targetIndex;
                                        proxy._focusingRowIndex = proxy._shiftKeyFirstElementDetails.firstElementRowIndex;                                     
                                    }
                                }
                                    //Select single cell using mouse click.
                                else  {
                                    proxy._selectedCellDetails = [];
                                    model.selectedCellIndexes = [];
                                    $("#" + proxy._id).find(".e-selectingcell").removeClass("e-selectingcell");
                                    $(targetCell[0]).addClass("e-selectingcell");
                                    proxy._selectedCellDetails.push(selectedCellInfo);
                                    model.selectedCellIndexes.push({ rowIndex: selectedCellInfo.rowIndex, cellIndex: selectedCellInfo.cellIndex });                                   
                                    proxy._cellSelectedEventTrigger(args, proxy._previousSelectedCellDetails);
                                    //Clear the Details of shiftKeyFirstElement.
                                    proxy._shiftKeyFirstElementDetails = {
                                        firstElementRowIndex: -1,
                                        firstElementCellIndex: -1
                                    }
                                    proxy._updateSecondRowIndexBy = 1;
                                }
                                if (!e.shiftKey) {
                                    proxy._previousSelectedCellDetails = {
                                        rowElement: targetRow,
                                        cellElement: targetCell[0],
                                        cellIndex: args.cellIndex,
                                        rowIndex: targetIndex,
                                    };
                                    proxy._rowIndexOfLastSelectedCell = proxy._focusingRowIndex;
                                    proxy._isShiftKeyNavigation = false;
                                }
                            }
                            if (!e.shiftKey)
                                proxy._rowIndexOfLastSelectedCell = proxy._focusingRowIndex;
                            proxy._cancelSaveTools();
                            //Get back default values to perform keypressed event.                            
                            proxy._lastSelectedCellIndex = proxy._cellIndex;
                        }
                    }
                
                    if (proxy._isTouchTrigger && proxy.model.allowSelection && this.model.selectionSettings.selectionType == "multiple" && !proxy.model.isFromGantt) {
                        if (proxy._isTouchTrigger && this._multiSelectPopup != null && !this._multiSelectPopup.is(":visible") && this._multiSelectPopup.find(".e-rowselect").hasClass("e-spanclicked"))
                            this._multiSelectPopup.show();
                        if (proxy._isTouchTrigger && this._multiSelectPopup != null && !this._multiSelectPopup.find(".e-rowselect").hasClass("e-spanclicked")) {
                            if (!$target.hasClass("e-detailsrowcell") && !$target.parent("td").hasClass("e-detailsrowcell") && !$target.closest("tr").hasClass('e-detailsrow')) {
                                this._multiSelectPopup.removeAttr("style");
                                var offset = $target.closest(".e-rowcell").offset();
                                this._multiSelectPopup.offset({ top: 0, left: 0 }).offset({ left: (offset.left + (($target.closest(".e-rowcell").outerWidth() / 2) - (this._multiSelectPopup.width() / 2))), top: (offset.top - this._multiSelectPopup.outerHeight() - 10) }).show();
                            }
                        }
                        proxy._isTouchTrigger = false;
                    }
            }

            /* detail row show and hide */
            if (($target.hasClass("e-detailsrowcell") || $target.parent("td").hasClass("e-detailsrowcell")) && !$target.closest("tr").hasClass('e-detailsrow')) {
                if (!e.ctrlKey && !e.shiftKey) {
                    var editState=$("#" + this._id + "EditForm").length>0 ? this.editFormValidate()?true:false:true;                  
                    if (editState) {
                        if (proxy._isRowEdit) {
                            this.saveRow();
                        } else {
                            proxy._detailsExpandCollapse($target);
                        }
                    }
                }
            }

            if (proxy._isRowEdit)
                $target.focus();
            if (!$target.closest("#" + proxy._id + "_ColumnMenu").hasClass("e-columnmenu") && $target.closest("div.e-excelfilter").length == 0 && !$target.hasClass("e-overlay"))
            {
                proxy._clearColumnMenu();
            }
            if (model.editSettings.beginEditAction == "click" && $target.closest("#" + proxy._id + "EditForm").length == 0 &&
                !proxy._isShiftKeyNavigation && !proxy._isEmptyRowDeleted)
                proxy._editdblClickHandler(e);
            proxy._isEmptyRowDeleted = false;
        },
        //Check TreeGrid is in filtered state or not
        _isInFilteredState: function () {
            return ((this.model.allowFiltering && this.model.filterSettings.filteredColumns.length > 0) || this._searchString.length > 0);
        },
		// Method to check/uncheck all the records
        selectAllRows: function (checkAll) {
            var proxy = this, model = proxy.model, index = -1,
                data = proxy._isInFilteredState() ? proxy._flatFilteredRecords : model.flatRecords,
                updatedRecords = proxy.getUpdatedRecords(),
                length = 0;
            if (!model.selectionSettings.enableSelectAll && !proxy._isFromSetmodel)
                return;

            if (model.showSummaryRow)
                data = proxy._spliceSummaryRows(data);
            if (!ej.isNullOrUndefined(checkAll)) {                
                if (!checkAll)
                    data = proxy._isInFilteredState() ? proxy._flatFilteredRecords : $.extend([], model.selectedItems);

                for (var i = 0; i < data.length; i++) {
                    if (checkAll) {
                        if (data[i].checkboxState == "checked") continue;
                        data[i].checkboxState = "checked";
                        model.selectedItems.push(data[i]);
                        $('#' + this._id + "_checkbox" + data[i].ejRowId).removeClass("e-stop").addClass("e-checkmark");
                        $('#' + this._id + "_checkbox" + data[i].ejRowId).parent("span").removeAttr("class").addClass("e-chk-act");
                    }
                    else {                                             
                        index = model.selectedItems.indexOf(data[i]);
                        if (index > -1) {
                            data[i].checkboxState = "unchecked";
                            model.selectedItems.splice(index, 1);
                            $('#' + this._id + "_checkbox" + data[i].ejRowId).removeClass("e-checkmark");
                            $('#' + this._id + "_checkbox" + data[i].ejRowId).parent("span").removeAttr("class").addClass("e-chk-inact");
                            if (model.selectionSettings.enableHierarchySelection || proxy._isFromSetmodel)
                                proxy._updateParentSelection(data[i]);
                        }
                    }
                }                
                proxy._cancelSaveTools();
            }
            if (proxy._isInFilteredState() && proxy._flatFilteredRecords.length > 0 && model.selectedItems.length > 0) {
                var selectedFilteredRecords = proxy._flatFilteredRecords.filter(function (data) {
                    return data.checkboxState == "checked";
                });
                length = selectedFilteredRecords.length;
            }
            else
                length = model.selectedItems.length;
            if (length > 0 && data.length > 0) {
                if (length != data.length) {
                    $('#' + this._id + "_headerCheckbox").removeClass("e-checkmark").addClass("e-stop");
                    $('#' + this._id + "_headerCheckbox").parent("span").removeAttr("class").addClass("e-chk-indeter");
                }
                else {
                    $('#' + this._id + "_headerCheckbox").removeClass("e-stop").addClass("e-checkmark");
                    $('#' + this._id + "_headerCheckbox").parent("span").removeAttr("class").addClass("e-chk-act");
                }
            }
            else {
                $('#' + this._id + "_headerCheckbox").removeClass("e-stop e-checkmark");
                $('#' + this._id + "_headerCheckbox").parent("span").removeAttr("class").addClass("e-chk-inact");
            }
        },

        //Add/Remove records in selectedItems collection
        _updateSelectedItems: function (currentRecord, checkboxState) {
            var proxy = this, model = proxy.model, length = 0,
                selectedRowIndex = -1, recordIndex = -1,
                updatedRecords = proxy.getUpdatedRecords();
            recordIndex = updatedRecords.indexOf(currentRecord);
            currentRecord.checkboxState = checkboxState;
            selectedRowIndex = $.inArray(currentRecord, model.selectedItems);
            if (currentRecord.checkboxState == "unchecked") {
                selectedRowIndex != -1 && model.selectedItems.splice(selectedRowIndex, 1);
                if (recordIndex > -1) {
                    $('#' + this._id + "_checkbox" + currentRecord.ejRowId).removeClass("e-checkmark e-stop");
                    $('#' + this._id + "_checkbox" + currentRecord.ejRowId).parent("span").removeAttr("class").addClass("e-chk-inact");
                }
            }
            else if (currentRecord.checkboxState == "checked") {
                selectedRowIndex == -1 && model.selectedItems.push(currentRecord);
                if (recordIndex > -1) {
                    $('#' + this._id + "_checkbox" + currentRecord.ejRowId).removeClass("e-stop").addClass("e-checkmark");
                    $('#' + this._id + "_checkbox" + currentRecord.ejRowId).parent("span").removeAttr("class").addClass("e-chk-act");
                }
            }            
        },
        // Check/Uncheck parents & Children records Hierarchy selection
        _traverseSelection: function (record, checkboxState, ischildItem) {
            var proxy = this, length = 0, childRecords, updateParent = false, model = this.model;

                proxy._updateSelectedItems(record, checkboxState);                            

            if (!ischildItem && record.parentItem && model.selectionSettings.enableHierarchySelection) 
                proxy._updateParentSelection(record.parentItem);

            if (record.hasChildRecords && model.selectionSettings.enableHierarchySelection) {
                childRecords = record.childRecords;
                if (proxy._flatFilteredRecords.length > 0) {
                    var filteredChildRecords = childRecords.filter(function (record) {
                        return proxy._flatFilteredRecords.indexOf(record) > -1;
                    });
                    childRecords = filteredChildRecords;
                }
                length = childRecords.length;
                for (var count = 0; count < length; count++) {
                    if (childRecords[count].hasChildRecords)
                        proxy._traverseSelection(childRecords[count], checkboxState, true);
                    else if (!childRecords[count]['isSummaryRow']) {                        
                        proxy._updateSelectedItems(childRecords[count], checkboxState);
                    }
                }
            }
        },

        // Update parent checkbox state by its children checkbox state
        _updateParentSelection: function (parentRecord) {

            var proxy = this, length = 0, isChanged = false,
                model = this.model,
            childRecords = [];
            if (parentRecord && parentRecord.childRecords)
                childRecords = proxy._spliceSummaryRows(parentRecord.childRecords);
            if (proxy._flatFilteredRecords.length > 0 && model.selectionSettings.enableHierarchySelection) {
                var filteredChildRecords = childRecords.filter(function (record) {
                    return proxy._flatFilteredRecords.indexOf(record) > -1;
                });
                childRecords = filteredChildRecords;
            }
            length = childRecords && childRecords.length;
            var callMe = false;

            var indeter = childRecords.filter(function (record) {
                return record.checkboxState == "indeterminate";
            });
            var checkChildRecords = childRecords.filter(function (record) {
                return record.checkboxState == "checked";
            });

            if (indeter.length > 0 || (checkChildRecords.length > 0 && checkChildRecords.length != length)) {
                if (parentRecord.checkboxState == "checked") {
                    this._updateSelectedItems(parentRecord, "unchecked");
                    callMe = true;
                }
                else if (parentRecord.checkboxState == "unchecked") callMe = true;

                if (callMe) {
                    $('#' + this._id + "_checkbox" + parentRecord.ejRowId).addClass("e-stop");
                    $('#' + this._id + "_checkbox" + parentRecord.ejRowId).parent("span").removeAttr("class").addClass("e-chk-indeter");
                    parentRecord.checkboxState = "indeterminate";
                    if (parentRecord.parentItem) this._updateParentSelection(parentRecord.parentItem);
                }
            }
            else if (checkChildRecords.length == 0 && indeter.length == 0) {

                $('#' + this._id + "_checkbox" + parentRecord.ejRowId).removeClass("e-stop e-checkmark").parent("span").removeClass("e-chk-indeter");
                if (parentRecord.checkboxState == "checked")
                    this._updateSelectedItems(parentRecord, "unchecked");                
                else
                    parentRecord.checkboxState = "unchecked";
                parentRecord.parentItem && this._updateParentSelection(parentRecord.parentItem);
            }
            else {
                parentRecord.checkboxState = "checked";
                this._updateSelectedItems(parentRecord, "checked");
                if (parentRecord.parentItem) this._updateParentSelection(parentRecord.parentItem);
            }
        },

         /* remove child detail row wraper when detail row contains another treegrid*/
        _removeInnerDetailRows: function ($target, eventCheck)
        {
            /* check if target is in any of detail rows */
            var detailRows = $(".e-detailscellwrapperfly"),
                detailRowsLength = detailRows.length, count = 0, containsFlag = false;

            for (count; count < detailRowsLength; count++) {
                if ($.contains(detailRows[count], $target[0]) || $target == detailRows[count]) {
                    containsFlag = true;
                    break;
                }
            }

            var countFlag = false;
            if (ej.isNullOrUndefined(detailRows[count])) {
                count = detailRows.index($("#" + this._id + "detailscellwrapper"));
                countFlag = true;
            }
            var countFlagString = countFlag ? "" : ",";
            var parentTreeGridId = $(detailRows[count]).attr("parentTreeGridIds");
            var parentDetailWrapperElement = $("[parentTreeGridIds$='" + countFlagString + parentTreeGridId + "']"),
                length = parentDetailWrapperElement.length, i = 0;
            this._triggerDetailRowHideEvent(parentDetailWrapperElement, eventCheck);
        },

        /* trigger detail row collaspse event */
        _triggerDetailRowHideEvent: function (elements, eventCheck)
        {
            var proxy = this,
                model = this.model;
            var length = elements.length, i = 0;

            if (length > 0 && $("#" + this._id + "detailscellwrapper").length > 0)
            {
                var detailElement = $("#" + this._id + "detailscellwrapper"),
                    selectedItem = model.selectedItem;
                var detailsCollapseEventArgs = {};
                detailsCollapseEventArgs.rowData = selectedItem;

                if (!this._trigger("detailsHidden", detailsCollapseEventArgs) || eventCheck) {
                    for (i; i < length; i++) {
                        var treeGridContainerId = $(elements[i]).attr('id').replace("detailscellwrapper", "");
                       
                            $("#" + treeGridContainerId).find(".e-detailsrowexpand").removeClass("e-detailsrowexpand").addClass("e-detailsrowcollapse");
                            $("#" + treeGridContainerId).find(".e-detailsinfoiconhide").removeClass("e-detailsinfoiconhide").addClass("e-detailsinfoiconshow");
                        
                            $(elements[i]).remove();
                    }
                }
            }
        },
        /* remove all child detail row */
        _removeDetailsRow: function (e, eventCheck)
        {
            var model= this.model;
            
                if (e) {
                    var target = $(e.target);
                    var detailCellElement = target;
                    if (target.parent("td").hasClass("e-detailsrowcell"))
                        detailCellElement = target.parent("td");

                    if (target.closest(".e-popup").length == 0 && target[0] != $('html').get(0)) {

                        /* check if target is in any of detail rows */
                        var detailRows = $(".e-detailscellwrapperfly"),
                            detailRowsLength = detailRows.length, count = 0, containsFlag = false;

                        for (count; count < detailRowsLength; count++) {
                            if ($.contains(detailRows[count], target[0]) || target[0] == detailRows[count]) {
                                containsFlag = true;
                                break;
                            }
                        }

                        if (!target.hasClass("e-detailscellwrapperfly") && !detailCellElement.hasClass("e-detailsrowexpand") && !detailCellElement.hasClass("e-detailsrowcollapse")
                            && !containsFlag) {
                            this._removeInnerDetailRows($("#" + this._id + "detailscellwrapper"), eventCheck);
                        }

                        if (target.hasClass("e-detailscellwrapperfly") || detailCellElement.hasClass("e-detailsrowcollapse") || (!detailCellElement.hasClass("e-detailsrowexpand") && containsFlag)) {
                            var countFlag = false;
                            if (ej.isNullOrUndefined(detailRows[count])) {
                                count = detailRows.index($("#" + this._id + "detailscellwrapper"));
                                countFlag = true;
                            }
                            var countFlagString = countFlag ? "" : ",";
                            var parentTreeGridId = $(detailRows[count]).attr("parentTreeGridIds");
                            var parentDetailWrapperElement = $("[parentTreeGridIds$='" + countFlagString + parentTreeGridId + "']");
                            this._triggerDetailRowHideEvent(parentDetailWrapperElement, eventCheck);
                        }
                    }
                } else {
                    $("#" + this._id + "detailscellwrapper").length > 0 && this._removeInnerDetailRows($("#" + this._id + "detailscellwrapper")[0], eventCheck);
                    this._triggerDetailRowHideEvent($("#" + this._id + "detailscellwrapper"), eventCheck);
                }
            
        },

        /* show hide detail rows public method*/
        
        showHideDetailsRow:function(rowIndex)
        {
            var proxy = this, model = this.model;
            /* save if tree grid is in edit state */
            proxy._saveEditedElements();

            if (model.showDetailsRow && model.detailsTemplate && model.showDetailsRowInfoColumn && !ej.isNullOrUndefined(rowIndex)
                 && rowIndex <= model.updatedRecords.length && proxy.getExpandStatus(model.updatedRecords[rowIndex])) {
                if (rowIndex != this.selectedRowIndex()) {
                    if (rowIndex != -1 && $.inArray(rowIndex, proxy._selectedRowsIndexes == -1) && model.allowSelection && model.updatedRecords.length > rowIndex) {
                        if (!proxy._rowSelectingEventTrigger(this.selectedRowIndex(), rowIndex)) {
                            proxy.selectRows(rowIndex);
                            proxy._rowSelectedEventTrigger(rowIndex);
                        }
                    }
                }

                this.updateScrollBar(rowIndex);
                var targetRowElement = $(ej.TreeGrid.getRowByIndex(proxy, rowIndex)), targetCellElement;
                if (targetRowElement.length > 0 && model.updatedRecords[rowIndex] && proxy.getExpandStatus(model.updatedRecords[rowIndex]))
                {
                    targetCellElement = $(targetRowElement).find(".e-detailsrowcell");
                    if ($(targetCellElement).length > 0 && $(targetCellElement).hasClass("e-detailsrowcell"))
                    {
                        if (this.element.find(".e-detailsrowexpand")[0] != targetCellElement[0])
                            this._removeDetailsRow();

                        this._detailsExpandCollapse($(targetCellElement));
                    }
                }
            }
        },
        /* expand collapse the detail row */
        _detailsExpandCollapse:function($target)
        {
            var proxy = this,
                model = this.model;
            
            if ($target.parent("td").hasClass("e-detailsrowcell"))
                $target = $target.parent("td");
            var rowElement = $target.closest('tr'),
                detailsIconElement = rowElement.find(".e-detailsrowcell");

            if (detailsIconElement.hasClass("e-detailsrowcollapse")) {

                var rowIndexValue = this.getIndexByRow(rowElement),
                   rowData = this.model.currentViewData[rowIndexValue];
                if (ej.isNullOrUndefined(rowData) || rowData.isSummaryRow)
                    return;
                var rowBottom = this.getOffsetRect(rowElement[0]),
                   detailtr = $($.render[proxy._id + "_detailRowTemplate"](rowData)),
                   detailsCellElement = $(detailtr).find(".e-detailscellwrapper").attr({ "id": this._id + "detailscellwrapper" }),
                   width = proxy._gridWidth - (proxy.element.find(".e-scrollcss").length > 0 ? 18 : 0) - 2;//2 - treegrid border

                /* add treegrid attribute for detail row wraaper element */
                var rowWrapperElement = this.element.parents().filter(".e-detailscellwrapperfly"),
                    wrapperElementID = this._id, tempTreeGridId = "";
                while (rowWrapperElement.length > 0) {
                    tempTreeGridId = rowWrapperElement.attr("id").replace("detailscellwrapper", "");
                    wrapperElementID += "," + tempTreeGridId;
                    rowWrapperElement = $("#" + tempTreeGridId).parents().filter(".e-detailscellwrapperfly");
                }

                detailsCellElement.attr("parentTreeGridIds", wrapperElementID);
                
                //Edge detection for detail rows
                var treeGridContentOffset = this.getOffsetRect(proxy._$gridContent[0]), topPosition, bottomPosition;
                treeGridContentOffset.bottom = treeGridContentOffset.top + proxy._$gridContent[0].offsetHeight;
                topPosition = rowBottom.top + rowElement[0].offsetHeight;
                bottomPosition = topPosition + model.detailsRowHeight;
                if (topPosition > treeGridContentOffset.bottom || bottomPosition > treeGridContentOffset.bottom)
                {
                    var tempTopPosition = rowBottom.top - model.detailsRowHeight;
                    if (tempTopPosition > treeGridContentOffset.top)
                        topPosition = tempTopPosition;
                }

                detailsCellElement.removeClass("e-detailscellwrapper").addClass("e-detailscellwrapperfly");
                model.cssClass && detailsCellElement.addClass(model.cssClass);
                var scrollerLeft = proxy.getScrollElement().ejScroller("isHScroll") ? proxy.getScrollElement().ejScroller("option", "scrollLeft") : 0;
                var maxScrollWidth = proxy.getMaxScrollWidth();
                if (maxScrollWidth > 0 && scrollerLeft > maxScrollWidth)
                    scrollerLeft = maxScrollWidth;
                var frozenTableWidth = 0;
                if (this._frozenColumnsLength > 0) {
                    frozenTableWidth = $(this.element).find("#e-frozencontentdiv" + this._id).width();
                }
                detailsCellElement.css({
                    "top": topPosition, "left": rowBottom.left + scrollerLeft - frozenTableWidth,
                    "z-index": proxy.getMaxZIndex() + 1, position: "absolute", width: width
                }).appendTo(this.element);
                this._trigger("refresh");
                var eventArgs = {};
                eventArgs.detailsElement = detailsCellElement;
                eventArgs.data = rowData;
                eventArgs.rowIndex = this.selectedRowIndex();
                this._trigger("detailsDataBound", eventArgs);

                /* details show/expand event trigger*/
                var expandEventArgs = {};
                expandEventArgs.detailsElement = detailsCellElement;
                expandEventArgs.data = rowData;
                expandEventArgs.rowIndex = this.selectedRowIndex();
                expandEventArgs.appendTarget = null;
                if (this._trigger("detailsShown", expandEventArgs)) {
                    this._removeInnerDetailRows($target);
                }else
                {
                    detailsIconElement.find(".e-detailsinfoiconshow").removeClass("e-detailsinfoiconshow").addClass("e-detailsinfoiconhide");
                    detailsIconElement.removeClass("e-detailsrowcollapse").addClass("e-detailsrowexpand");
                    if (expandEventArgs.appendTarget)
                    {
                        $(detailsCellElement).css({ "top": "auto", left: "auto", position: "auto" });
                        $(detailsCellElement).detach().appendTo($("#" + expandEventArgs.appendTarget));
                    }

                }
            }else
            {
                this._removeInnerDetailRows($target);
            }
        },

        //CLICK HANDLER FOR PERFORM THE SORTING ACTION
        _onHeaderClick: function (e) {

            var proxy = this,
                model = proxy.model;
            proxy._cellMouseLeave();
            proxy._headerMouseLeave();
            proxy._clearContextMenu();
            this._removeDetailsRow();
            if ($(e.target).is(".e-ascending, .e-descending")) e.target = e.target.parentNode;

            var $target = $(e.target),
                columnFieldName,
                columnSortDirection,
                column, canSort = true;

            proxy.getHeaderTable().find(".e-columnheader").find(".e-headercellactive").removeClass("e-headercellactive");

            if (proxy._mouseDragged && model.allowColumnReordering) canSort = false;

            if (proxy._checkboxSelection && model.allowSelection && model.selectionSettings.enableSelectAll && $target.hasClass("e-headerCheckbox")) {
                proxy.selectAllRows(!$target.hasClass("e-checkmark") && !$target.hasClass("e-stop"));
                canSort = false;
            }

            if ($target.closest(".e-headercelldiv") && !$target.hasClass("e-columnmenu-icon") && !$target.hasClass("e-column-filter-icon") && !$target.hasClass("e-column-filtered-icon")) {
                columnFieldName = $target.closest(".e-headercell").find(".e-headercelldiv").attr("data-ej-mappingname");
                if (!canSort || (ej.isNullOrUndefined(columnFieldName) && ej.isNullOrUndefined(this.getColumnByField(columnFieldName)) || this.getColumnByField(columnFieldName).allowSorting == false)) {

                    proxy._saveEditedElements();
                }
                else if (canSort && model.allowSorting) {
                    column = this.getColumnByField(columnFieldName);
                    if ($target.closest(".e-headercell").find('span').hasClass("e-ascending")) {
                        columnSortDirection = ej.sortOrder.Descending;
                    } else {
                        columnSortDirection = ej.sortOrder.Ascending;
                    }

                    if (model.allowMultiSorting && e.ctrlKey) {
                        proxy._multiSortRequest = true;
                    }
                    proxy._isRefreshAddedRecord = false;
                    if(model.isFromGantt)
                        proxy.sortColumn(column.mappingName ? column.mappingName : column.field, columnSortDirection);
                    else
                        proxy.sortColumn(column.field, columnSortDirection);
                    if (proxy.model.isFromGantt && this.selectedRowIndex() >= 0) {
                        var args = {};
                        args.data = proxy.model.selectedItem;
                        args.target = "ejTreeGrid";
                        args.recordIndex = this.selectedRowIndex();
                        proxy._trigger("rowSelected", args);
                    }
                }
            }            
                                            

            // Show the column menu / filter menu while clicking the column menu icon / filter menu icon

            if ($target.hasClass("e-column-filter-icon") || $target.hasClass("e-column-filtered-icon"))
            {
                if (proxy._batchEditStarts) {
                    proxy._batchSaveLostWarning("Filtering");
                    proxy._batchTempDetails.filterTarget = e;                    
                    return false;
                }
                columnFieldName = $target.closest(".e-headercell").find(".e-headercelldiv").attr("data-ej-mappingname");
                column = proxy.getColumnByField(columnFieldName);
                proxy._checkFilterType(column);
                if (!$target.data("isClicked")) {
                    if ((model.filterSettings.filterType == "menu" && column.filterType != "excel") || (model.filterSettings.filterType == "excel" && column.filterType == "menu")) {
                        proxy._updateFilterMenuList(e);
                        $(".e-filtericon").data("isClicked", false);
                        $target.data("isClicked", true);
                    }
                    else {
                        var offset = $target.offset(),
                            offsetParent = $target.offsetParent(),
                            parentOffset = offsetParent.offset();
                        parentOffset = {
                            top: parentOffset.top + jQuery.css(offsetParent[0], "borderTopWidth", true),
                            left: parentOffset.left + jQuery.css(offsetParent[0], "borderLeftWidth", true)
                        };
                        var xPos = offset.left - parentOffset.left - jQuery.css($target[0], "marginLeft", true) + 18,
                        yPos = offset.top - parentOffset.top - jQuery.css($target[0], "marginTop", true) + 2;
                        if ($target.closest(".e-headercell").css("position") == "relative")
                            xPos = $target.offset().left + 15, yPos = $target.offset().top + 20;
                        var targetWidth = $target[0].offsetWidth;
                        var containerOffset = proxy.getOffsetRect(proxy.element[0]),
                        rightPosWidth = containerOffset.left + proxy.element.width(),
                        colType = column.filterEditType ? column.filterEditType : column.editType;
                        colType = colType.toLowerCase();

                        switch (colType) {
                            case "numericedit":
                                colType = "number";
                                break
                            case "stringedit":
                            case "maskedit":
                            case "dropdownedit":
                                colType = "string";
                                break;
                            case "booleanedit":
                                colType = "boolean";
                                break;
                            case "datepicker":
                            case "datetimepicker":
                                colType = colType.replace("picker", "");
                                break

                        }
                        if (model.filterSettings.filterType == "excel") {
                            proxy._saveEditedElements();
                        }
                        //alert($(window).width());
                        if ($(window).width() <= proxy._responsiveMinWidth && model.isResponsive && model.enableResize) {
                            proxy._renderResponsiveExcelFilter(column, colType);
                            $(".e-filtericon").data("isClicked", false);
                            proxy._mediaStatus = true;
                        }
                        else {
                            if ($.inArray(colType, proxy._excelColTypes) == -1) {    
                                proxy._clearFilterMenu();
                                $("#" + proxy._id + colType + "_excelDlg").remove();
                                $("#" + proxy._id + colType + "_CustomFDlg_wrapper").remove();
                                $("#" + proxy._id + colType + "_CustomFDlg").remove();
                                proxy._excelFilter._openedFltr = null;
                                proxy._excelColTypes.push(colType);
                                proxy._excelFilter.renderDialog(colType);
                            }
                            var localXFLabel = { True: proxy.localizedLabels.trueText, False: proxy.localizedLabels.falseText },
                                records = [];
                            $.grep(proxy.model.flatRecords, function (record) {
                                if (!record.isSummaryRow)
                                    records.push(record.item);
                            });
                            var dlgWidth = $("#" + proxy._id + colType + "_excelDlg").width();
                            if (rightPosWidth < xPos + dlgWidth)
                                xPos = xPos - dlgWidth - targetWidth;

                            proxy._excelFilter.openXFDialog({ field: column.field, enableResponsiveRow: true, displayName: column.headerText, dataSource: records, query: null, position: { X: xPos, Y: yPos }, dimension: { height: $(window).height(), width: $(window).width() }, cssClass: "resFilter", type: colType, format: column.format, localizedStrings: localXFLabel });
                            $(".e-filtericon").data("isClicked", false);
                            $target.data("isClicked", true);
                            proxy._customFilter = null;
                        }
                        proxy._filterIconTarget = e;
                    }
                }
                else {
                    proxy._clearColumnMenu();
                    $target.data("isClicked", false);
                }
                this._addRemoveAnimateClass($target);
            }
            else if ($target.hasClass("e-columnmenu-icon")) {
                if (!$target.data("isClicked")) {
                    proxy._renderColumnMenu(e);
                    $(".e-columnicon").data("isClicked", false);
                    $target.data("isClicked", true);
                }
                else{
                    proxy._clearColumnMenu();
                    $target.data("isClicked", false);
                }
                this._addRemoveAnimateClass($target);
            }
            else
                proxy._clearColumnMenu();
            if ($target.hasClass("e-checkbox"))
                return true;
            else if ($target.hasClass("e-columnmenu-icon") || $target.hasClass("e-column-filter-icon") || $target.hasClass("e-column-filtered-icon"))
                return false;
        },

        //Render the excel filter with responsive mode
        _renderResponsiveExcelFilter:function(column,colType)
        {
            var proxy = this,
               colIndex = $.inArray(colType, proxy._excelColTypes),
               windowWidth = $(window).width(),
               windowHeight = $(window).height();
            if (colIndex != -1) {
                $("#" + proxy._id + colType + "_excelDlg").remove();
                proxy._excelColTypes.splice(colIndex, 1);
                proxy._excelFilter._openedFltr = null;
            }
            proxy._excelFilter.renderDialog(colType);
            //Modify the excel filter UI for responsive mode
            var $headerDiv = ej.buildTag('div.e-treegird-filterDialogHeaderDiv', "", {'width':'100%'}),
                $titleSapn = ej.buildTag('div.e-treegrid-label', '<span>' + proxy._columnMenuTexts["menuFilter"] + '</span>', { 'padding-top': '10px', 'font-weight': 'bold', 'font-family': 'Segoe UI, Helvetica Neue, Ubuntu, Arial' });
            if ($(".e-filterMenuBtn").length > 0)
                $(".e-filterMenuBtn").remove();
            var $dlgBtn = ej.buildTag('div.e-filterMenuBtn'),
                $inputOk = ej.buildTag('input.e-responsiveFilterBtnLeft e-flat e-btnsub', "", {'margin-left':'15px'}),
                $inputCancel = ej.buildTag('input.e-responsiveFilterBtnRight e-flat e-btncan', "", {'margin-right':'12px'}),
                $id;
            $headerDiv.append($titleSapn);
            proxy._excelDlg = $id = "#" + proxy._id + colType + "_excelDlg";
                $inputOk.ejButton({
                    text: proxy.localizedLabels.okButtonText, type: 'button', click: function (sender) {
                        proxy._excelFilter._fltrBtnHandler();
                        $($id).css('display', 'none');
                    }
                });
                $inputCancel.ejButton({
                    text: proxy.localizedLabels.cancelButtonText, type: 'button',
                    click: function () {
                        $($id).css('display', 'none');
                        proxy.element.css('display', 'block')
                    }
                });
                $($id).children().not('.e-searchcontainer').remove();
                var excelObj = proxy._excelFilter,
                    $backIcon = ej.buildTag('div.e-treegrid-resFilterleftIcon', '', {'padding-top':'10px'}, { closeDialogue: $id.slice(1), openDialogue: 'responsiveFilter' }),
                    $spanIcon = ej.buildTag('span.e-icon e-treegrid-resIcon e-treegrid-responsiveBack', '', {}, { closeDialogue: $id.slice(1), openDialogue: 'responsiveFilter' });
                $backIcon.click(function (e) {
                    $.proxy(proxy._closeDivIcon(e), this);
                })
                $headerDiv.append($backIcon.append($spanIcon));
                var $closeIcon = ej.buildTag('div.e-treegrid-resFilterRigthIcon', '', {'padding-top':'10px'}, { closeDialogue: $id.slice(1), gridEle: true }),
                    $closeSpan = ej.buildTag('span.e-icon e-treegrid-resIcon e-responsiveCustomFilter', '', {}, { closeDialogue: $id.slice(1), gridEle: true });
                if (colType != 'boolean')
                    $headerDiv.append($closeIcon.append($closeSpan));
                var $searchContainer = $($id).css({'height': windowHeight - 20,'padding': '0px','width': "99.7%"}),
                    $searchBox = $searchContainer.find('.e-searchcontainer .e-searchbox').css('margin-top', '10px');
                $searchBox.children().css('margin-top', '10px');
                var $checkBoxDiv = $searchContainer.find('.e-checkboxlist'),
                    scrollHeight = windowHeight * (65 / 100);
                proxy._checkBoxDiv = $checkBoxDiv;
                $($searchContainer.find('.e-searchcontainer')).addClass('e-treegrid-resultSearch');
                var $btn = $searchContainer.find('.e-treegrid-resultSearch .e-btncontainer').remove();
                $inputOk.addClass('e-treegrid-responsiveFilterBtnLeft').css({ 'width': '43.6%' });
                $inputCancel.addClass('e-treegrid-responsiveFilterBtnRight').css('width', '43.6%');
                $searchContainer.find('.e-excelLabel').remove();
                var $labelDiv = ej.buildTag('div.e-excelLabel', column.headerText, { 'margin-top': '10px' }),
                    $searchBox = $searchContainer.find('.e-searchcontainer');
                $labelDiv.insertBefore($searchBox.find('.e-searchbox'));
                $searchContainer.prepend($headerDiv);
                $searchContainer.find(".e-searchbox span").css("top", "23px");
                $($id).append($dlgBtn.append($inputOk).append($inputCancel))
                $checkBoxDiv.ejScroller({ height: scrollHeight, width: "98%" }).ejScroller('refresh');
            var localXFLabel = { True: proxy.localizedLabels.trueText, False: proxy.localizedLabels.falseText },
                  records = [];
            $.grep(proxy.model.flatRecords, function (record) {
                if (!record.isSummaryRow)
                    records.push(record.item);
            });
            proxy._excelFilter.openXFDialog({ field: column.field, enableResponsiveRow: true, displayName: column.headerText, dataSource: records, query: null, position: { X: 0, Y: 0 }, dimension: { height: windowHeight, width: windowWidth }, cssClass: "resFilter", type: colType, format: column.format, localizedStrings: localXFLabel });
            $($id).insertAfter(proxy.element);
            $closeIcon.click(function (e) {
                //Responsive UI rendering for custom excel filter
                $.proxy(proxy._closeDivIcon(e), this);
                var height = windowHeight - 30, width = windowWidth;
                excelObj._openCustomFilter('customfilter');
                var $dlgClone = $("#" + proxy._id + colType + "_CustomFDlg").addClass('e-responsviesExcelFilter');
                proxy._customFilter = $dlgClone;
                if (ej.isNullOrUndefined($dlgClone.find('.e-treegird-filterDialogHeaderDiv')[0])) {
                    var $headerDivCustom = ej.buildTag('div.e-treegird-filterDialogHeaderDiv'),
                        $titleSapn = ej.buildTag('div.e-treegrid-label', '<span>' + excelObj.localizedLabels.title + '</span>', { 'font-weight': 'bold', 'font-family': 'Segoe UI, Helvetica Neue, Ubuntu, Arial' });
                    $headerDivCustom.append($titleSapn);
                    var $backIcon = ej.buildTag('div.e-treegrid-resFilterleftIcon', '', {}, { closeDialogue: proxy._id + colType + "_CustomFDlg", openDialogue: $id.slice(1) }),
                        $spanIcon = ej.buildTag('span.e-icon e-treegrid-resIcon e-treegrid-responsiveBack', '', {}, { closeDialogue: proxy._id + colType + "_CustomFDlg", openDialogue: $id.slice(1) });
                    $backIcon.click(function (e) {
                        $dlgClone.css('display', 'none');
                        $("#" + proxy._id + colType + "_CustomFDlg_wrapper").css("display", "none");
                        var localXFLabel = { True: proxy.localizedLabels.trueText, False: proxy.localizedLabels.falseText },
                               records = [];
                        $.grep(proxy.model.flatRecords, function (record) {
                            if (!record.isSummaryRow)
                                records.push(record.item);
                        });
                        proxy._excelFilter.openXFDialog({ field: column.field, enableResponsiveRow: false, displayName: column.headerText, dataSource: records , query: null, position: { X: 0, Y: 0 }, dimension: { height: windowHeight, width: windowWidth }, type: colType, format: column.format, localizedStrings: localXFLabel });
                    });
                    $headerDivCustom.append($backIcon.append($spanIcon));
                    var $closeIconCust = ej.buildTag('div.e-treegrid-resFilterRigthIcon', '', {}, { closeDialogue: proxy._id + colType + "_CustomFDlg", gridEle: true }),
                        $closeSpan = ej.buildTag('span.e-icon e-treegrid-resIcon e-treegrid-responsiveClose', '', {}, { closeDialogue: proxy._id + colType + "_CustomFDlg", gridEle: true });
                    $headerDivCustom.append($closeIconCust.append($closeSpan));
                    $closeIconCust.click(function (e) {
                        $dlgClone.css("display", "none");
                        $("#" + proxy._id + colType + "_CustomFDlg_wrapper").css("display", "none");
                        proxy.element.css('display', 'block');
                    });
                    $dlgClone.prepend($headerDivCustom);
                    $dlgClone.insertAfter(proxy.element);
                    $dlgClone.find('.e-dlgfields').css('width', '98%');
                    var $firstDiv = $dlgClone.find('.e-dlgfields:first').css('width', '92%').css({ 'margin-left': '6px', 'font-family': 'Segoe UI, Helvetica Neue, Ubuntu, Arial' });
                    $firstDiv.css('margin-top', '4%');
                    var colName = $dlgClone.find('.e-dlgfields').find('.e-fieldset legend').text(),
                        $labelDiv = ej.buildTag('div.e-responsiveLabelDiv', colName, { 'margin-left': '6px', 'font-family': 'Segoe UI, Helvetica Neue, Ubuntu, Arial' });
                    $labelDiv.insertAfter($firstDiv);
                    var $fieldSet = $dlgClone.find('.e-dlgfields').find('.e-fieldset').find('table').css('width', '100%');
                    $dlgClone.find('.e-dlgfields').find('.e-fieldset').replaceWith($fieldSet);
                    var $fieldDiv = $fieldSet.parent('div').addClass('e-responsiveExcelFilterFieldDiv'),
                        $ddl = $fieldSet.find('.e-dropdownlist')
                    $fieldSet.find('.e-dropdownlist').each(function (index, object) {
                        var ds = $(object).ejDropDownList('model.dataSource');
                        $(object).ejDropDownList('destroy').ejDropDownList({ width: "80%", dataSource: ds });
                    });
                    $fieldSet.find('.e-autocomplete').each(function (index, object) {
                        var model = $(object).ejAutocomplete('model');
                        $(object).ejAutocomplete('destroy').ejAutocomplete({ width: "90%", dataSource: model.dataSource, fields: model.fields, enableDistinct: true });
                    });
                    $fieldSet.find('.e-datepicker').each(function (index, object) {
                        var date = $(object).ejDatePicker('instance');
                        date.option("width", "90%");
                    });
                    $fieldSet.find('.e-datetimepicker').each(function (index, object) {
                        var date = $(object).ejDateTimePicker('instance');
                        date.option("width", "90%");
                    });
                    $fieldSet.find('.e-numerictextbox').each(function (index, object) {
                        var numberic = $(object).ejNumericTextbox('instance');
                        numberic.option("width", "90%");
                    });
                }
                var $okClone = $inputOk.clone(), $cancelClone = $inputCancel.clone();
                $okClone.ejButton({
                    text: proxy.localizedLabels.okButtonText, type: 'button', click: function (sender) {
                        proxy._excelFilter._openedFltr = $dlgClone;
                        proxy._excelFilter._fltrBtnHandler();
                        $dlgClone.css("display", "none");
                        $("#" + proxy._id + colType + "_CustomFDlg_wrapper").css("display", "none");

                    }
                });
                $cancelClone.ejButton({
                    text: proxy.localizedLabels.cancelButtonText, type: 'button', click: function () {
                        $dlgClone.css("display", "none");
                        $("#" + proxy._id + colType + "_CustomFDlg_wrapper").css("display", "none");
                    }
                });
                //$dlgBtn.children().hide();
                $dlgClone.append($dlgBtn.clone().append($okClone).append($cancelClone));
                $okClone.css('width', '43.6%');
                $cancelClone.css('width', '43.6%');
                var $btnContainer = $dlgClone.find('.e-dlgfields .e-btncontainer').remove();
                $btnContainer.find('input:first').addClass('e-responsiveFilterBtnLeft').css('width', '45.6%');
                $btnContainer.find('input:last').addClass('e-responsiveFilterBtnRight');
                $dlgClone.ejDialog({
                    enableModal: false, height: height, width: "100%", position: { X: 0, Y: 0 }, enableResize: false, showHeader: false}).ejDialog('open');
                var zIndex = proxy.getMaxZIndex() + 1,
                    overlayIndex = $("#" + proxy._id + colType + "_CustomFDlg_wrapper").css("z-index");
                zIndex = zIndex > overlayIndex ? zIndex : overlayIndex;
                $dlgClone.css({ "position": "absolute", "top": "0px", "left": "0px", "z-index": zIndex, "width": "95.5%" });
                proxy._mediaStatus = true;
            });
        },
        _closeDivIcon:function(sender)
        {
            var $div = $(sender.target);
            if (!ej.isNullOrUndefined($div.attr('closeDialogue'))) {
                var $dialog = $("#" + $div.attr('closeDialogue'));
                if (!ej.isNullOrUndefined($dialog.data('ejDialog')))
                    $dialog.ejDialog('close');
                else
                    $dialog.css('display', 'none');
            }
            if (!ej.isNullOrUndefined($div.attr('gridEle'))) {
                this.element.css('display', 'block');
            }
            if (!ej.isNullOrUndefined($div.attr('openDialogue'))) {
                if (this.model.enableResponsiveRow || $div.attr('closeDialogue').indexOf('Custom') != -1) {
                    var $dialog = $("#" + $div.attr('openDialogue'));
                    if (!ej.isNullOrUndefined($dialog.data('ejDialog')))
                        $dialog.ejDialog('open');
                    else
                        $dialog.css('display', 'block');
                }
                else
                    this.element.css('display', 'block');
            }
        },

        //Get predicate value based on fileredColumn value for excel filtering
        _getExcelPredicate: function (args) {
            var proxy = this,
                model = proxy.model,
                filteredColumns = $.extend(true, [], model.filterSettings.filteredColumns),
                length = filteredColumns.length,
                predicate;
            proxy._excelFilter.getPredicate(filteredColumns, null, true);
            var predicates = proxy._excelFilter._predicates[0];
            for (var i = 0; i < length; i++) {
                var obj = filteredColumns[i];
                if (obj.value == proxy._dropDownListBlanksText) {
                    var dropDownPredicate = ej.Predicate(obj.field, "equal", null, true);
                    dropDownPredicate = dropDownPredicate["or"](obj.field, "equal", "", true);
                    predicates[obj.field] = dropDownPredicate;
                    predicate = predicate != undefined ? predicate["and"](dropDownPredicate) : dropDownPredicate;
                }
                else {
                    if (!ej.isNullOrUndefined(predicate)) {
                        if (!obj.isComplex)
                            predicate = predicate[obj.predicate](obj.field, obj.operator, obj.value, !obj.matchcase);
                        else
                            predicate = predicate["and"](obj);
                    }
                    else
                        predicate = ej.Predicate(obj.field, obj.operator, obj.value, !obj.matchcase);
                }
                if (ej.isNullOrUndefined(args))
                    proxy._storePreviousFilteredValue(obj.field, obj.value, obj.operator);

            }
            return predicate;
        },
        //Render the filter menu based on filter type
        _checkFilterType:function(column)
        {
            var proxy = this,
                model = proxy.model,
                filterSettings = model.filterSettings,
                colType = column.filterEditType ? column.filterEditType : column.editType;
            colType = colType.toLowerCase();
            if (filterSettings.filterType == "excel" && column.filterType == "menu" && $.inArray(colType, proxy._menuColTypes) == -1) {
                var colFilterType, dropdownColumn;
                switch (colType) {
                    case "stringedit":
                        colFilterType = "String";
                        break;
                    case "numericedit":
                        colFilterType = "Numeric";

                        break;
                    case "datepicker":
                        colFilterType = "Datepicker";
                        break;
                    case "datetimepicker":
                        colFilterType = "Datetimepicker";
                        break;
                    case "dropdownedit":
                        colFilterType = "Dropdown";
                        dropdownColumn = column;
                        break;
                    case "booleanedit":
                        colFilterType = "Boolean";
                        break;
                    default:
                        colFilterType = "String";
                        colType = "stringedit";
                        break;
                }
                proxy._renderEdittypeFilterMenu(colFilterType, dropdownColumn);
                proxy._menuColTypes.push(colType);
            }
            else if ((filterSettings.filterType == "menu" && column.filterType == "excel")) {
                if (ej.isNullOrUndefined(proxy._excelFilter))
                    proxy._renderExcelFilter();
            }
        },
        // Method to trigger the column resizing events.
        _triggerColumnResize: function (event, _x, e) {
            var proxy = this, model=proxy.model;
            var _rowobj = proxy.getHeaderTable().find(".e-columnheader");
            var _childTH = _rowobj.find(".e-headercell");
            var cellIndex = proxy._cellIndex, newWidth;
            var target = $(proxy._target), columnIndex = [], col = [],
                currentCellIndex = 0,
                $target = $(e.target);   
            if (event == "columnResizeStart") {
                this._isFrozenStackedResize = false;
                proxy._orgX = _x;
                cellIndex = proxy._currentCell = proxy._cellIndex = proxy.getCellIndex(e);
                if (cellIndex != -1 && this._frozenColumnsLength > 0 && model.showStackedHeader && model.stackedHeaderRows.length > 0) {
                    if (($target.closest(".e-movablecontentdiv").length > 0 || $target.closest(".e-movableheaderdiv").length > 0 || $target.closest(".e-movablefooterdiv").length > 0)) {
                        currentCellIndex += this._frozenColumnsLength;
                    }
                    else if ($target.closest(".e-frozenheaderdiv").length > 0) {
                        if (!$target.hasClass("e-stackedHeaderCell"))
                            currentCellIndex += $(this.getHeaderTable()[0]).find(".e-stackedHeaderCell").length;
                        else
                            this._isFrozenStackedResize = true;
                    }
                }
            }
            if (proxy._currentCell != -1) {
                
                var _outerCell = _childTH[proxy._currentCell + currentCellIndex];
                var _oldWidth = _outerCell.offsetWidth;
                // condition for column resize start event
                if (event == "columnResizeStart") {
                    proxy._isStackedResize = $(_outerCell).hasClass("e-stackedHeaderCell");
                    var args = {};
                    args = { columnIndex: cellIndex, column: proxy.model.columns[cellIndex], target: $(_outerCell), oldWidth: _oldWidth };
                    return proxy._trigger("columnResizeStart", args);
                }
                    //condition for column resize end event
                else if (event == "columnResizeEnd") {
                    var _childth = _rowobj.find(".e-headercell").not(".e-detailheadercell").filter(":visible");
                    //to calculate old, new and extra width values for event argument
                    var _extra = _x - proxy._orgX;
                    proxy._newWidth = _oldWidth + _extra;
                    proxy.__oldWidth = _oldWidth;
                    var args = {};
                    args = { columnIndex: cellIndex, column: model.columns[cellIndex], target: $(_outerCell), oldWidth: _oldWidth, newWidth: proxy._newWidth, extra: _extra };
                    return proxy._trigger("columnResizeEnd", args);
                }
                    //condition for column resized event
                else {
                    if (this.model.columnResizeSettings.columnResizeMode == ej.TreeGrid.ColumnResizeMode.FixedColumns && !this.model.isFromGantt) {
                        this._updateTableWidth();
                    } else if (!this.model.isFromGantt && this.model.columnResizeSettings.columnResizeMode == ej.TreeGrid.ColumnResizeMode.NextColumn && this.model.showTotalSummary) {
                        this._colgroupRefresh();
                    }
                    var args = {};
                    //to calculate old, new and extra width values for event argument
                    var _extra = _x - proxy._orgX;
                    newWidth = _oldWidth + _extra;
                    args = { columnIndex: cellIndex, column: model.columns[cellIndex], oldWidth: proxy.__oldWidth, newWidth: proxy._newWidth };
                    return proxy._trigger("columnResized", args);
                }
            }
        },

        //HEADER MOUSE DOWN EVENT FOR COLUMN RESIZING
        _headerMouseDown: function (e) {

            var proxy = this,
                coord = proxy._getCoordinate(e),                
            $target, $div, model = proxy.model;            
            proxy._cellMouseLeave();            
            proxy._headerMouseLeave();
            if (!proxy.model.isFromGantt && model.contextMenuSettings.showContextMenu) {
                proxy._contextMenuEventBinding(e);
            }
            if (e.type == "touchstart") {
                $target = proxy._getElementByPosition(coord.pageX, coord.pageY);
                proxy._on(proxy.element, "touchmove", proxy._mouseMove);
                proxy._resizer && proxy._resizer._touchStart(e);
            } else
                $target = $(e.target);

            proxy._on($(document), "mouseup touchend", proxy._headerMouseUp);            

            if (model.allowColumnReordering) {
                if ($target.closest(".e-columnheader").length > 0)
                    proxy.dragColumn(e);
                if (e.type == "touchstart") {
                    proxy._dragColumnTooltipTimer = window.setTimeout(function () {
                        proxy._touchstart = false;
                        if (!proxy._dragTooltip && e.type == "touchstart") {
                            proxy.dragColumnToolTip(e);
                            if (proxy._dragTooltip) {
                                proxy._on(proxy.element, "touchmove", proxy.dragColumnToolTip);
                            }
                        }
                    }, 550);
                }
            }
            if (proxy.model.allowColumnResize) {
                if(model.isFromGantt)
                    proxy._on(proxy.element.closest(".e-gantt"), "mouseup touchend", proxy._mouseUp);                
                else
                    proxy._on(proxy.element, "mouseup touchend", proxy._mouseUp);

                $div = $target.closest('tr');
            
                this._target = $target;
                var _x = coord.pageX, _y = coord.pageY;            
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = coord.pageX;
                    _y = coord.pageY - document.body.scrollTop;
                }
                if ($div.length > 0 && $($div[0]).hasClass("e-resizedragicon") && !$target.hasClass("e-columnicon")) {
                    if ($target.is(".e-headercelldiv"))
                        $target = $($target[0].parentNode);
                    e.target = $target;

                    if (proxy._frozenColumnsLength > 0) {
                        var columnFieldName = $target.closest(".e-headercell").find(".e-headercelldiv").attr("data-ej-mappingname"),
                         column = proxy.getColumnByField(columnFieldName);
                    }
                    // Event triggered when we start to resize the column
                    if (this._triggerColumnResize("columnResizeStart", _x, e))
                        return;
                }
                if (e.type != "touchstart")
                    proxy._resizer._mouseDown(e);
            }

            //if (($(e.target).hasClass("headercelldiv") && $(e.target).hasClass("headercell"))) {

            //    var $headercell = $(e.target).hasClass("headercelldiv") ? $(e.target).parent() : $(e.target);
            //    model.headerEffects && $headercell.addClass("headercellactive");

            //}
        },

        _headerMouseUp: function(e){
            var proxy = this, model = proxy.model,
                args = {}, coord = proxy._getCoordinate(e),
                $target;

            if (e.type == "touchend") {
                $target = proxy._getElementByPosition(coord.pageX, coord.pageY);
                proxy._off(proxy.element, "touchmove", proxy._mouseMove);
            }
            else
                $target = $(e.target);            
            proxy._off($(document), "mouseup touchend", proxy._headerMouseUp);
           
            if (model.contextMenuSettings.showContextMenu && proxy._contextMenuHandler && proxy._displayContextMenu) {
                proxy._headerRightClick(e);
            }
            else
                proxy._contextMenuHandler = false;
            proxy._displayContextMenu = true;
            if (proxy.model.allowColumnResize) {
                if (model.isFromGantt)
                    proxy._off(proxy.element.closest(".e-gantt"), "mouseup touchend", proxy._mouseUp);
                else
                    proxy._off(proxy.element, "mouseup touchend", proxy._mouseUp);
                this.element.find(".e-reSizeColbg").remove();
                this.element.find(".e-columnheader").removeClass("e-resizedragicon");
                proxy._resizer._expand = false;
            }

            if (model.allowColumnReordering) {
                window.clearTimeout(this._dragColumnTooltipTimer);
                this._dragColumnTooltipTimer = null;
                proxy._off(proxy.element, "mousemove touchmove", proxy.dragColumnToolTip);
                $(proxy._reordervline).remove();
                $(proxy._dragmouseOverTooltip).remove();
                if (proxy._posx != coord.pageX || proxy._posy != coord.pageY) proxy._mouseDragged = true;
                if (model.allowColumnReordering && $target.closest('.e-headercell').length > 0 && proxy._headerDragStatus == "mousemove") {
                    var columns = model.columns;
                    args.targetColumn = columns[proxy._currentIndex];
                    args.targetColumnIndex = proxy._currentIndex;
                    args.draggedColumn = proxy._draggedColumn;
                    args.draggedColumnIndex = columns.indexOf(proxy._draggedColumn);

                    if (ej.isNullOrUndefined(args.targetColumn.nonColumn) && !ej.isNullOrUndefined(args.targetColumnIndex) && args.targetColumnIndex != args.draggedColumnIndex) {
                        proxy._trigger("columnDrop", args);
                        if (!args.cancel) {
                            proxy.reorderColumn(args.draggedColumn.field, args.targetColumnIndex);
                        }
                    }
                }
            }
            proxy._resetHeaderPrivateProperties();
        },

        _resetHeaderPrivateProperties: function () {
            this._timerDragDown && (this._timerDragDown = window.clearInterval(this._timerDragDown));
            this._timerDragUp && (this._timerDragUp = window.clearInterval(this._timerDragUp));
            var proxy = this, model = proxy.model;                      
            proxy._draggedColumn = null;
            proxy._dragMouseDown = false;
            proxy._dragTooltip = false;
            proxy._headerDragStatus = "";
            proxy._timerDragDown = null;
            proxy._timerDragUp = null;
            proxy._currentIndex = null;                        
            proxy._dragmouseOverTooltip = null;
        },

        //TREE GRID CONTENT MOUSE DOWN EVENT

        _contentMouseDown: function (e) {
            var $target = $(e.target), 
                proxy = this, model = proxy.model, coord = proxy._getCoordinate(e), id = $target.closest(".e-treegrid").attr("id");
            proxy._contentPageY = coord.pageY, proxy._contentPageX = coord.pageX;
            
            proxy._on($(document), "mouseup touchend", proxy._mouseupHandler);

            //to update ctrlKey on drag and drop during multiselect icon clicked
            if (model.isFromGantt) {
                if (e.type == "touchstart")
                    proxy._ganttTouchTrigger = true;
                var args = {
                    ctrlKey: e.ctrlKey
                }
                proxy._trigger("touchHandler", args);
                e.ctrlKey = args.ctrlKey;
            }
            if (e.type == "touchstart") {
                proxy._isTouchEvent = true;            
                proxy._isTouchTrigger = true;
            }

            if ($("#" + id + "_selectionpopup").is(":visible")) {
                if ($("#" + id + "_selectionpopup").find(".e-rowselect").hasClass("e-spanclicked")) {
                    e.ctrlKey = true;
                    if (proxy.model.selectionSettings.selectionMode == ej.TreeGrid.SelectionMode.Row)
                    proxy._multiSelectCtrlRequest = true;
                }
                else {
                    e.ctrlKey = false; proxy._multiSelectCtrlRequest = false;
                }
            }
            if (!proxy.model.isFromGantt && model.contextMenuSettings.showContextMenu) {
                proxy._contextMenuEventBinding(e);
            }
            
            if (!($target.hasClass("e-vhandle") || $target.hasClass("e-vscrollbar") || $target.hasClass("e-vup") || $target.hasClass("e-vdown")
                  || $target.hasClass("e-vhandlespace") || $target.hasClass("e-hhandle") || $target.hasClass("e-hscrollbar") || $target.hasClass("e-hdown")
                  || $target.hasClass("e-hhandlespace") || $target.closest(".e-editedcell").length > 0 || $target.closest(".e-unboundeditedcell").length > 0||$target.parent().hasClass("e-unboundcelldiv")))
            {                
                proxy._mouseDown = true;
                if (model.allowDragAndDrop) {
                    //Events binded for Row drag and drop
                    if ($target.closest(".e-treegridrows").length > 0 || $target.closest(".e-templatecell").length > 0) {
                        if (e.type == "touchstart") {
                            proxy._dragTooltipTimer = window.setTimeout(function () {
                                proxy.dragRecord(e);
                                if (proxy._multiSelectPopup && proxy._multiSelectPopup.is(":visible") && proxy._dragTooltip)
                                    proxy._clearMultiSelectPopup();

                            }, 550);
                        }
                        else
                            proxy.dragRecord(e);
                    }
                }
                if (!model.isFromGantt) {
                    if (e.type == "touchstart")
                        proxy._on(proxy.element, "touchmove", "#" + proxy._id + "e-gridcontent", proxy._touchScroll);                   
                }
                if (e.ctrlKey || e.shiftKey || e.which == 2 || e.which == 3)
                    return true;
            }
        },

        _touchScroll: function (e) {
            var proxy = this, model = proxy.model, args = {},
                coord = proxy._getCoordinate(e), $target, pixelX,pixelY,               
                prevX = proxy._contentPageX, prevY = proxy._contentPageY,
                posX = coord.pageX, posY = coord.pageY,
                dx, dy;
            proxy._isTouchTrigger = false;
            
            dx = posX - prevX;
            dy = posY - prevY;                        
            if (e.type == "touchmove") {                
                e.preventDefault();                
            }
            if ((proxy._mouseDown &&  !proxy._dragMouseDown)) {

                window.clearTimeout(this._dragTooltipTimer);
                this._dragTooltipTimer = null;
                window.clearTimeout(this._dragColumnTooltipTimer);
                this._dragColumnTooltipTimer = null;

                if (e.type == "touchmove")
                    $target = proxy._getElementByPosition(coord.pageX, coord.pageY);
                else
                    $target = $(e.target);

                if (!model.isFromGantt && $target.closest('div').find('.e-content')) {

                    if (prevY < posY)
                        pixelY = -Math.abs(dy);
                    else
                        pixelY = Math.abs(dy);

                    if (prevX < posX)
                        pixelX = -Math.abs(dx);
                    else
                        pixelX = Math.abs(dx);

                    proxy._contentPageX = posX;
                    proxy._contentPageY = posY;

                    proxy._updateScrollPosition($target, pixelX, pixelY);
                }
            }
        },

        _updateScrollPosition: function (target, px, py) {

            var proxy = this,
                scrollTop = proxy.getScrollElement().ejScroller("option", "scrollTop"),
                scrollLeft = proxy.getScrollElement().ejScroller("option", "scrollLeft"),
                deltaX = scrollLeft + px, deltaY = scrollTop + py,
                sHeight = proxy.isVScroll() ? proxy.getMaxScrollHeight() : null,
                sWidth = proxy.getScrollElement().ejScroller("isHScroll") ? proxy.getScrollElement().find(".e-content").get(0).scrollWidth : null;
            
            if (sHeight) {
                deltaY = sHeight < deltaY ? sHeight : deltaY < 0 ? 0 : deltaY;
                if ((deltaY > 0 && scrollTop > 0) || (deltaY < sHeight && scrollTop < sHeight)) {
                    proxy._$gridContent.scrollTop(0);
                    proxy.getScrollElement().ejScroller("scrollY", deltaY, true);
                }
            }

            if (sWidth) {
                deltaX = sWidth < deltaX ? sWidth : deltaX < 0 ? 0 : deltaX;
                if ((deltaX > 0 && scrollLeft > 0) || (deltaX < sWidth && scrollLeft < sWidth)) {
                    proxy._$gridContent.scrollLeft(0);
                    proxy.getScrollElement().ejScroller("scrollX", deltaX, true);
                }
            }                        
        },

        _mouseMove: function (e) {

            var proxy = this, model = this.model;
            window.clearTimeout(this._dragColumnTooltipTimer);
            this._dragColumnTooltipTimer = null;
            if (e.type == "touchmove") {                
                if (proxy._resizer && proxy._resizer._allowStart)
                    proxy._headerDragStatus = "";
            }
            if (proxy.model.allowColumnResize && proxy._headerDragStatus.length == 0) {
                proxy._resizer._mouseMove(e);
                if (proxy._resizer._expand)
                    proxy._cancelEditState();
                if ($(e.target).parent().css("cursor") !== "col-resize") {
                    if ((model.allowSorting || model.showColumnChooser || (!model.showColumnChooser && model.allowFiltering && model.filterSettings.filterType == "menu")) && !$(e.target).closest("th").hasClass("e-detailheadercell") && !$(e.target).closest("th").hasClass("e-stackedHeaderCell")) {
                        proxy.getHeaderTable().find(".e-columnheader").css({ 'cursor': 'pointer' });
                    } else {
                        proxy.getHeaderTable().find(".e-columnheader").css({ 'cursor': 'default' });
                    }
                }
            }
        },
        //to get the frozen width by using col group element
        _frozenWidth: function () {
            var proxy = this, frozenColumns, width;
            var frozenColumns = proxy.getContentTable().find('colgroup').find("col").slice(0, proxy.model.scrollSettings.frozenColumns),
                       width = 0;
            for (var i = 0; i < frozenColumns.length; i++)
                width += frozenColumns[i].style.display == 'none' ? 0 : parseInt(frozenColumns[i].style.width.replace("px", ""));
            return width;
        },


        _mouseUp: function (e) {

            var proxy = this,
                model = proxy.model;

            if (proxy._headerDragStatus == "mousemove") return;

            if (model.allowColumnResize) {
                
                if ($(e.target).hasClass('e-headercelldiv') || $(e.target).hasClass('e-reSizeColbg')) {
                    proxy._focusTreeGridElement();
                    proxy._clearColumnMenu();
                }
                if ($(e.target).hasClass("e-reSizeColbg") || $(e.target).closest(".e-gridheader").length > 0) {
                // if treegrid column resizer initiated
                if (proxy._resizer._expand) {
                    var _x = e.clientX, _y = e.clientY;
                    if (navigator.userAgent.indexOf("WebKit") != -1) {
                        _x = e.pageX;
                        _y = e.pageY;
                    }
                    if (e.type == "touchend") {
                        _x = e.originalEvent.changedTouches[0].clientX;
                        _y = e.originalEvent.changedTouches[0].clientY;
                    }
                    // Event triggered when we mouse the column resize
                    if (!ej.isNullOrUndefined(proxy._currentCell) && this._triggerColumnResize("columnResizeEnd", _x, e))
                    {
                        this.element.find(".e-reSizeColbg").remove();
                        proxy._resizer._expand = false;
                        if (model.isFromGantt)
                            proxy._off(proxy.element.closest(".e-gantt"), "mouseup touchend", proxy._mouseUp);
                        else
                            proxy._off(proxy.element, "mouseup touchend", proxy._mouseUp);
                        return;
                    }
                    //to cancel the column resize of frozen column if it exceeds the grid width
                    if (!ej.isNullOrUndefined(proxy._currentCell) && model.columns[proxy._currentCell].isFrozen == true && _x + 100 > this._gridWidth) {
                        return;
                    }
                    proxy._resizer._mouseUp(e);
                    var colWidth = parseInt(model.columns[proxy._currentCell].width);
                    // to update column width on resize in IE
                    if (model.isFromGantt && ej.browserInfo().name == "msie" && model.showColumnChooser && !ej.isNullOrUndefined(colWidth)) {
                        var $headerCell = $(proxy.getHeaderTable().find('thead').find('th')[proxy._currentCell]);
                        if (colWidth < 42) {
                            this._getColWidth(proxy._currentCell, $headerCell);
                        }
                        else if (!$headerCell.hasClass("e-column-menu-padding")) {
                            $headerCell.addClass('e-column-menu-padding');
                        }
                    }
                    //update columnWidthCollection after column resize
                    if (!ej.isNullOrUndefined(proxy._currentCell) && proxy._currentCell >= 0 && proxy._currentCell < model.columns.length) {
                        model.columns[proxy._currentCell] && (model.columns[proxy._currentCell].width = proxy._resizer._newWidth);
                    }
                    // Event triggered after column resized
                    !ej.isNullOrUndefined(proxy._currentCell) && this._triggerColumnResize("columnResized", _x, e);                    
                    if (model.allowTextWrap&&model.allowColumnResize)
                        proxy._updateRowHeight();
                    if (model.sizeSettings.height == "auto" && model.allowColumnResize) {
                        proxy.getScrollElement().ejScroller("refresh");
                        proxy._updateContentHeight();
                    }
                    proxy.getScrollElement().ejScroller("refresh");
                    proxy._updateHeaderScrollLeft();
                    proxy._updateScrollCss();
                    if (model.isFromGantt) {
                        proxy._trigger("refreshScrollCss");
                    }
                    }
                }else
                {
                    this.element.find(".e-reSizeColbg").remove();
                    proxy._resizer._expand = false;
                    if (model.isFromGantt)
                        proxy._off(proxy.element.closest(".e-gantt"), "mouseup touchend", proxy._mouseUp);
                    else
                        proxy._off(proxy.element, "mouseup touchend", proxy._mouseUp);
                }
            }
        },

        // resize the filtering elements after column resized.

        _resizeFilteringElements:function()
        {
            var proxy = this;
            if (proxy.model.allowFiltering) {
                var args = {}, colLength = proxy.model.columns.length;
                args.requestType = ej.TreeGrid.Actions.Filter;
                for (var item = 0; item < colLength ; item++) {
                    proxy.model.columns[item].width = proxy.columnsWidthCollection[item];
                    args.fieldname = proxy.model.columns[item].field;
                    this._filteringElements(args);
                }
            }
        },

        //ENABLE THE EDITING EVENTS
        _enableEditingEvents: function () {

            var proxy = this,
                model = proxy.model;

            if (model.editSettings.allowEditing) {
                if (ej.isTouchDevice()) {
                    proxy._off(proxy.element, "doubletap ", ".e-gridcontent", proxy._editdblClickHandler);
                    proxy._on(proxy.element, "doubletap ", ".e-gridcontent", proxy._editdblClickHandler);
                }
                else {
                    proxy._off(proxy.element, "dblclick ", ".e-gridcontent", proxy._editdblClickHandler);
                    proxy._on(proxy.element, "dblclick ", ".e-gridcontent", proxy._editdblClickHandler);
                }
            }
            else {
                if (ej.isTouchDevice())
                    proxy._off(proxy.element, "doubletap ", ".e-gridcontent", proxy._editdblClickHandler);
                else
                    proxy._off(proxy.element, "dblclick ", ".e-gridcontent", proxy._editdblClickHandler);
            }

        },


        //ENABLE THE MOUSEDOWNEVENT HANDLER FOR SAVE CELL
        _saveCellHandler: function (e) {

            var $target = $(e.target),
                proxy = this, model = proxy.model, targetIndex;
            if (model.isFromGantt && $target.closest("tr").length) {
                var $targetElement = $target.closest("tr"),
                    $gridRows = proxy.getRows(),
                    rowIndex = this.getIndexByRow($targetElement),
                    record = model.currentViewData && model.currentViewData[rowIndex];
                targetIndex = model.updatedRecords.indexOf(record);             
            }
            //SKIP THE SCROLL BAR CLICK IN TREE GRID.
            if ($target.hasClass("e-vhandle") || $target.hasClass("e-vscrollbar") || $target.hasClass("e-vup") || $target.hasClass("e-vdown") || $target.hasClass("e-vhandlespace") || $target.hasClass("e-vscroll"))
                return;
            if ($target.hasClass("e-hhandle") || $target.hasClass("e-hscrollbar") || $target.hasClass("e-hup") || $target.hasClass("e-hdown") || $target.hasClass("e-hhandlespace") || $target.hasClass("e-hscroll"))
                return;
          //  e.stopPropagation();
            if ($target.closest(".e-gridcontent").length > 0 || $target.hasClass(".e-gridcontent") || $target.hasClass('e-summarytreegridexpand') || $target.hasClass('e-summarytreegridcollapse')) {
                if (proxy._isRowEdit) {
                    if ($target.closest("form#" + proxy._id + "EditForm").length == 0 && $target.closest("form#" + proxy._id + "EditFrozenForm").length == 0 &&  $("#" + proxy._id + "EditForm").length > 0)
                        proxy.saveRow();
                 } else if ($target.closest(".e-popup").length == 0 && $target.closest(".e-rowcell").find("#" + proxy._id + "EditForm").length == 0
                     && $target.closest("form#" + proxy._id + "EditFrozenForm").length == 0 && $("#" + proxy._id + "EditForm").length > 0) {
                    proxy.saveCell();
                }
            }

            //Row selection for Gantt alone here
            //Why because, To select the clicked row after saving the edited cell (Due to predecessor and Row refresh)
            if (model.selectedMode == "row" && model.isFromGantt && model.updatedRecords.length && !ej.isNullOrUndefined(targetIndex) && !$target.hasClass('e-treegridexpand') && !$target.hasClass("e-treegridcollapse")) {
               if (this.selectedRowIndex() != targetIndex && !proxy._rowSelectingEventTrigger(this.selectedRowIndex(), targetIndex)) {
                    if (model.allowSelection)
                   proxy.selectRows(targetIndex);
                   proxy._rowSelectedEventTrigger(targetIndex);
               }
           }
        },

        //Mouse right click (Context Menu,header Context Menu) handler
        _contextMenuAction: function (e) {
          
            var proxy = this,
                $target, model = proxy.model,
                coord = proxy._getCoordinate(e);

            if(e.type == "taphold")
                $target = proxy._getElementByPosition(coord.pageX, coord.pageY);
            else
                $target = $(e.target);
            if (model.contextMenuSettings.showContextMenu) {
                if (proxy._multiSelectCtrlRequest)
                    proxy._multiSelectCtrlRequest = false;
                if (e.which == 3 && !proxy._isTouchEvent){

                    if ($target.closest(".e-gridcontent").length > 0) {
                        proxy._rightClick(e);
                    }
                    else {
                        if($target.closest(".e-gridheader").length>0)
                            proxy._headerRightClick(e);

                    }
                }
                else{
                    proxy._contextMenuHandler = true;
                    return true;
                }
            }
            else {
                e.stopPropagation();
            }            
        },

        _rightClick: function (e) {
            
            var proxy = this,
                model = proxy.model,
               $target = $(e.target),
               div = $target[0].parentNode,
               $ganttGridRows,
               row,
               recordIndexr,
               item, selectIndex,
               args = {},
               checkEditMenu = false,
               updatedRecords = proxy.getUpdatedRecords();
            /* check inner treegrid click events and  */
            if ($target.closest(".e-treegrid").attr("id") !== this._id) return false;

            if (model.selectionSettings.selectionMode == "cell" && model.editSettings.editMode != "dialogEditing") {
                model.editSettings.editMode = "cellEditing";
            }

            if (proxy.model.contextMenuSettings.showContextMenu) {
                proxy._clearContextMenu();
                this._removeDetailsRow();
                proxy.disableTooltip();
                if ($target.hasClass("e-summaryrowcell") || $target.hasClass("e-summarytitle"))
                    return;
                if ($target.hasClass("e-cell") || $target.hasClass("e-treegridexpand"))
                    div = $target.closest('tr');
                row = $target.closest('tr');
                recordIndexr = proxy.getIndexByRow(row);
                proxy.model.currentViewData = proxy.getCurrentViewData();
                item = proxy.model.currentViewData[recordIndexr];
                recordIndexr = updatedRecords.indexOf(item);
                args.data = item;
                args.recordIndex = recordIndexr;
                if (model.isEdit)
                    checkEditMenu = ($target.closest(".e-rowcell").find("form#" + proxy._id + "EditForm").length > 0) || ($target.closest(".e-rowcell").find("form#" + proxy._id + "EditFrozenForm").length > 0);
                else if (this._isRowEdit) {
                    checkEditMenu = ($target.closest(".e-rowedit").find("form#" + proxy._id + "EditForm").length > 0) || ($target.closest(".e-rowedit").find("form#" + proxy._id + "EditFrozenForm").length > 0) ||
                                    ($target.closest(".e-addedrow").find("form#" + proxy._id + "EditForm").length > 0) || ($target.closest(".e-addedrow").find("form#" + proxy._id + "EditFrozenForm").length > 0);
                }
                /* save edited value before rendering contextmenu on non edited cell*/
                if (!checkEditMenu && (model.isEdit || this._isRowEdit)) {
                    if(!this.editFormValidate())
                        return true;
                    proxy._saveEditedElements();
                }
                //Context menu for edited row or empty records
                if ((proxy.dataSource() == null || proxy.dataSource().length == 0 || checkEditMenu || model.flatRecords.length == 0)) {
                    proxy._contextMenuItems = [];
                    proxy._contextMenuItems = proxy._getContextMenuItems();
                    proxy._subContextMenuItems = [];
                    proxy._updateContextmenuOption(recordIndexr, item);
                    proxy._clearContextMenu();
                    if (proxy._contextMenuItems.length > 0)
                        proxy._renderContextMenu(e, recordIndexr, item, checkEditMenu);

                } else if (item) {
                    e.preventDefault();
                    proxy._contextMenuItems = [];
                    proxy._contextMenuItems = proxy._getContextMenuItems();
                    proxy._subContextMenuItems = [];
                    proxy._subContextMenuItems = proxy._getsubContextMenuItems();
                    proxy._updateContextmenuOption(recordIndexr, item);
                    proxy._clearContextMenu();

                   
                    if (model.selectionSettings.selectionMode == "row") {
                        if (model.allowSelection && !(proxy._rowSelectingEventTrigger(this.selectedRowIndex(), recordIndexr, false, e.type))) {
                            proxy.selectRows(recordIndexr);
                            proxy._rowSelectedEventTrigger(recordIndexr, null, false, e.type);
                        }
                    }
                    if (model.selectionSettings.selectionMode == "cell") {
                        var selectCellIndex = proxy.getCellIndex(e);
                        proxy.selectCells([{ rowIndex: recordIndexr, cellIndex: selectCellIndex }]);
                        proxy._rowIndexOfLastSelectedCell = recordIndexr;
                    }

                    if (proxy._contextMenuItems.length > 0)
                        proxy._renderContextMenu(e, recordIndexr, item, checkEditMenu);
                    if (proxy.editFormValidate()) proxy._cancelSaveTools();
                }
            }
            proxy._clearColumnMenu();
            proxy._contextMenuHandler = false;
            if (!proxy.model.isFromGantt && model.contextMenuSettings.showContextMenu) {
                if (ej.isTouchDevice())
                    proxy._off(proxy.element, "taphold", proxy._contextMenuAction);
                else
                    proxy._off(proxy.element, "contextmenu", proxy._contextMenuAction);
                
            }
            return;
        },

        //contextMenu Event Binding
        _contextMenuEventBinding: function (e) {
            var proxy = this;
            if (ej.isTouchDevice()) {
                proxy._off(proxy.element, "taphold", proxy._contextMenuAction);
                proxy._on(proxy.element, "taphold", proxy._contextMenuAction);
            }
            else {
                proxy._off(proxy.element, "contextmenu", proxy._contextMenuAction);
                proxy._on(proxy.element, "contextmenu", proxy._contextMenuAction);

            }


        },

        _headerRightClick: function (e) {
            
            var proxy = this,
                 model = proxy.model,
                  $target = $(e.target);
            
            e.preventDefault();
            if (model.contextMenuSettings.showContextMenu) {
                proxy._clearColumnMenu();
                proxy._removeDetailsRow();
                proxy.disableTooltip();
                proxy._headerContextMenuItems = [];

                proxy._headerContextMenuItems = proxy._getHeaderContextMenuItems(e);
                var columnFieldName = $target.closest(".e-headercell").find(".e-headercelldiv").attr("data-ej-mappingname"),
            column = proxy.getColumnByField(columnFieldName);

                if (proxy._headerContextMenuItems.length > 0&& !column.nonColumn)
                    proxy._renderHeaderContextMenu(e);
                if (proxy.editFormValidate()) 
                    proxy._cancelSaveTools();
                proxy._contextMenuHandler = false;
                if (!model.isFromGantt && model.contextMenuSettings.showContextMenu) {
                    if (ej.isTouchDevice())
                        proxy._off(proxy.element, "taphold", proxy._contextMenuAction);
                    else
                        proxy._off(proxy.element, "contextmenu", proxy._contextMenuAction);

                }
                
            }
        },
        //DOUBLE CLICK EVENT HANDLER FOR DIALOG EDITING

        _editdblClickHandler: function (e) {

            var proxy = this,
                model = proxy.model,
                $form = $("#" + proxy._id + "EditForm"),
                args = {},
                $target = $(e.target),
                row = $target.closest('tr'),
                record,
                cellEditingDetails = proxy._cellEditingDetails;
            if ((model.isFromGantt && model.readOnly == true) || $target.hasClass("e-unboundcelldiv") || $target.hasClass("e-unboundcell") || $target.closest('td').hasClass("e-unboundcell") || e.ctrlKey) {
                return true;
            }
            
            var updatedRecords = proxy.getUpdatedRecords();
            if ($target.hasClass("e-vhandle") || $target.hasClass("e-vscrollbar") || $target.hasClass("e-vup") || $target.hasClass("e-vdown") || $target.hasClass("e-vhandlespace") ||
                $target.hasClass("e-treegridexpand") || $target.hasClass("e-treegridcollapse"))
                return;
            if ($target.hasClass("e-hhandle") || $target.hasClass("e-hscrollbar") || $target.hasClass("e-hup") || $target.hasClass("e-hdown") || $target.hasClass("e-hhandlespace"))
                return;
            if ($target.hasClass("e-summaryrowcell") || $target.hasClass("e-footersummaryrowcell")
                || $target.hasClass("e-summarytitle") || $target.hasClass("e-lastsummaryrow"))
                return;
            /* check inner treegrid click events and  */
            if ($target.closest(".e-treegrid").length && $target.closest(".e-treegrid").attr("id") !== this._id) return false;            

            if ($target.hasClass("e-rowcell") || $target.parent().hasClass("e-rowcell") || ($target.closest("td").hasClass("e-rowcell"))
                || ($target.closest("td").hasClass("e-rowcell")) && $target.hasClass("e-cell")) {

                if (model.editSettings.editMode === "normal" && model.editSettings.allowEditing) {
                    if (model.viewType == "resourceView")
                        return true;
                    else {
                        args.requestType = ej.TreeGrid.Actions.BeginEdit;
                        proxy._trigger("actionBegin", args);
                    }
                }

                if (proxy._cellEditingDetails.cancelSave) {

                    proxy._cellEditingDetails.cancelSave = false;
                    return;

                }

                if ($form.length === 0 && proxy.getRows() !== null) {

                    if (model.editSettings.editMode.toLowerCase() == "cellediting" || (model.editSettings.editMode.toLowerCase() == "batchediting" && model.editSettings.batchEditSettings.editMode.toLowerCase() == "cell")) {
                        proxy._focusTreeGridElement();
                        proxy._cellEditingDetails.columnIndex = proxy.getCellIndex(e);
                        if (model.editSettings.beginEditAction != "click")
                        proxy._cellEditingDetails.rowIndex = proxy.getRowIndex(e);
                        record = model.currentViewData[proxy._cellEditingDetails.rowIndex];
                        if (record.summaryRow)
                            return;
                        model.selectedItem = record;                        
                        if (model.columns[cellEditingDetails.columnIndex].allowEditing == false || (model.viewType == "resourceView" && record.eResourceTaskType == "unassignedTask"))
                            return;
                        var fieldName = proxy._cellEditingDetails.columnIndex >= 0 && model.columns[proxy._cellEditingDetails.columnIndex].field;
                        if (fieldName) {
                            proxy.updateScrollBar();
                            model.editSettings.allowEditing && proxy.cellEdit(proxy._cellEditingDetails.rowIndex, fieldName);
                        }
                    }
                    else if (model.editSettings.editMode.toLowerCase() == "rowediting" || model.editSettings.editMode.toLowerCase() == "dialogediting" || (model.editSettings.editMode.toLowerCase() == "batchediting" && (model.editSettings.batchEditSettings.editMode.toLowerCase() == "row" || model.editSettings.batchEditSettings.editMode.toLowerCase() == "dialog"))) {
                        model.currentViewData = proxy.getCurrentViewData();
                        if (proxy.getCellIndex(e) != -1 && proxy.getRowIndex(e) != -1) {
                            proxy._cellEditingDetails.columnIndex = proxy.getCellIndex(e);
                            var rowIndex = proxy.getRowIndex(e);
                            if (model.enableVirtualization) {
                                var selectedItem = model.selectionSettings.selectionMode == "row" ? model.selectedItem : model.updatedRecords[proxy._rowIndexOfLastSelectedCell];
                                rowIndex = updatedRecords.indexOf(selectedItem);
                            }
                            if ((proxy.model.editSettings.editMode.toLowerCase() == "dialogediting" || (proxy.model.editSettings.editMode.toLowerCase() == "batchediting" && model.editSettings.batchEditSettings.editMode.toLowerCase() == "dialog"))) {
                                proxy._showTreeGridAddEditDialog(rowIndex);
                            } else {
                                proxy.updateScrollBar();
                                proxy._editRow(rowIndex, undefined, proxy._cellEditingDetails.columnIndex);
                            }
                        }
                    }
                    $form = $("#" + proxy._id + "EditForm");
                    if ($form.length > 0)
                        proxy._editAddTools();

                    if ($.isFunction($.validator)) {
                        proxy._initValidator();
                    }
                }

                if (!proxy.model.allowSelection)
                    row.find(".e-active").removeClass("e-active").removeClass("e-selectionbackground");
                proxy._clearContextMenu();
                this._removeDetailsRow();
            }            
        },

        //To hide the datepicker and dropdown list.
        _popupHide: function (element) {
            var proxy = this,
             column = proxy.model.columns,
             object = null,
             dateobj = null,
             columnField = null,
             tdElement = element && $(element).closest("td");
            if (proxy.model.allowFiltering && proxy.model.filterSettings.filterType == "filterbar") {
                tdElement = element && $(element).closest("td, th");
            }
            var columnChooser = $("#" + proxy._id + "_ColumnMenu").length;
            if (columnChooser > 0) {
                if (!ej.isTouchDevice())
                proxy._clearColumnMenu();
            }
            for (var i = 0; i < column.length; i++) {
                object = null;

                if (column[i]) {
                    columnField = column[i].field.split('.').join("");
                    if (column[i].editType == "datepicker" || column[i].editType == "datetimepicker")
                        object = $("#" + proxy._id + columnField).data("ejDatePicker");
                    else if (column[i].editType == "dropdownedit") {
                        var dropdownobject = $("#" + proxy._id + columnField).data("ejDropDownList");
                        if (dropdownobject && $(tdElement).find("#" + dropdownobject._id).length == 0)
                            dropdownobject.model && dropdownobject.hidePopup();
                    }                    
                    if (object && $(tdElement).find("#" + object._id).length == 0)
                        object.hide();

                    if (column[i].filterEditType == "datepicker" || column[i].filterEditType == "datetimepicker") {
                        dateobj = $("#" + proxy._id + "_" + columnField + "_filterbarcell").data("ejDatePicker");
                        if (dateobj && $(tdElement).find("#" + dateobj._id).length == 0)
                            dateobj.hide();
                    }
                    if (column[i].filterEditType == "dropdownedit") {
                        var dropdownobject = $("#" + proxy._id + "_" + columnField + "_filterbarcell").data("ejDropDownList");
                        if (dropdownobject && $(tdElement).find("#" + dropdownobject._id).length == 0)
                            dropdownobject.hidePopup();
                    }
                }
            }
        },
        //PERFORM SCROLLING IN TREEGRID
        _mouseWheel: function (e) {

            var proxy = this,
                model = proxy.model,
                delta = null,
                ori = e;            
            proxy._popupHide();
            
            e = e.originalEvent;

            if ($(e.target).hasClass('e-footersummaryrowcell'))
                return;
            if (proxy.getScrollElement().height() > proxy._$gridContainer.height()) {
                proxy.getScrollElement().ejScroller("scrollY", 0, true);
                return;
            }

            if (e.wheelDelta) {
                delta = -e.wheelDelta / 120;
                if (window.opera) {
                    if (parseFloat(window.opera.version, 10) < 10)
                        delta = -delta;
                }
            } else if (e.detail) {
                delta = e.detail / 3;
            }
	
            if (!delta) return false;

            var scrollTop = proxy.getScrollElement().ejScroller("option", "scrollTop"),

                change = scrollTop + (delta * 57);  

            var h = this.model.isFromGantt ? parseInt(this.getRecordsHeight()) - (proxy._viewPortHeight - 18) :model.sizeSettings.height=="auto"?0: this.getMaxScrollHeight();
            if (change > h) {
                change = h;
            }
            if (change < 0) {
                change = 0;
            }
            if (scrollTop != change) {
                try {
                    e.preventDefault ? e.preventDefault() : ori.preventDefault();
                }
                catch (err) {
                }
            }
            proxy.updateScrollTop(change);
            return true;

        },
        _getCollapsedParentItem:function(record)
        {
            var parentRecord = record.parentItem;
            if (parentRecord) {
                if (this.getExpandStatus(parentRecord) === true) {
                    return parentRecord;
                } else {
                    return this._getCollapsedParentItem(parentRecord)
                }
            }
            else {
                return null;
            }
        },
        /*Method to get top position of record for update the scrollbar to required position*/
        _getRecordTopPosition: function (records, index) {
            var position = {}, height = 0, model = this.model;
            if (model.viewType == "resourceView") {

                for (var i = 0; i <= index; i++) {
                    if (i == index)
                        position.bottom = height + this._getTemplateRowHeight(records[i]);
                    else
                        height += this._getTemplateRowHeight(records[i]);
                }
                position.top = height;
            } else {
                position.top = index * (model.rowHeight + this._detailsRowHeight);
                position.bottom += (model.rowHeight + this._detailsRowHeight);
            }
            return position;
        },
        // Update the scroll bar while edit, expand and collapse the record for focusing the row.
        updateScrollBar: function (rowIndex) {
            var proxy = this,
                model = proxy.model, horizontalScrollBarHeight = 0,
                currentUpdatedRecords, recordIndex, rowTop,
                rowHeight, totalHeight,
                isInViewPortAbove, isInViewPortBelow,
                updatedRecords = proxy.getUpdatedRecords(), selectedItem;
            if (model.allowSelection) {
                selectedItem = model.selectionSettings.selectionMode == "row" ? this.selectedItem() : updatedRecords[proxy._rowIndexOfLastSelectedCell];
            }
            else {
                selectedItem = this.selectedItem();
            }
            currentUpdatedRecords = model.allowPaging ? updatedRecords : (proxy._isHierarchyFiltering && model.enableVirtualization) ? proxy._updateFilterParent : proxy.getExpandedRecords(updatedRecords);
            if (rowIndex || rowIndex == 0) {
                    recordIndex = currentUpdatedRecords.indexOf(updatedRecords[rowIndex]);
                } else {
                    recordIndex = currentUpdatedRecords.indexOf(selectedItem);
                }            

            if (model.allowTextWrap) {
                var updatedrecord = proxy.getUpdatedRecords(),
                    recordIndex = updatedrecord.indexOf(selectedItem);
                if (model.enableVirtualization) {
                    rowTop = proxy._getAvgTextWrapRowHeight("updateHeight", recordIndex).height;
                    rowHeight = updatedrecord[recordIndex].textWrapRowHeight + proxy._detailsRowHeight;
                } else {
                    var $tr = ej.TreeGrid.getRowByIndex(proxy, recordIndex);
                    if ($tr.length > 0) {
                        rowHeight = $tr.height() + proxy._detailsRowHeight;
                        rowTop = $tr[0].offsetTop;
                    } else {
                        rowHeight = model.rowHeight + proxy._detailsRowHeight;
                        rowTop = recordIndex * rowHeight;
                    }
                }
            } else {
                var rowPos = this._getRecordTopPosition(currentUpdatedRecords, recordIndex);
                rowHeight = model.rowHeight + this._detailsRowHeight;
                rowTop = rowPos.top;
            }

            var rowBottom = rowTop + rowHeight,
                scrollTop,
                containerWidth,
                scrollerExist = proxy.getScrollElement().children(".e-content").length;
   
            if (scrollerExist)
                scrollTop = proxy.getScrollElement().children(".e-content").scrollTop();
            else
                scrollTop = proxy.getScrollElement().scrollTop();

            if (model.allowTextWrap) {
                if (proxy.model.enableVirtualization) {
                    totalHeight = proxy._getAvgTextWrapRowHeight("updateHeight").height;
                } else {
                    totalHeight = proxy._$gridContentTable.height();
                }
            } else {
                totalHeight = this.getRecordsHeight();
            }
    
            if(proxy.getScrollElement().ejScroller("isHScroll")  || proxy.element.find(".e-borderbox").length > 0)
            {
                horizontalScrollBarHeight = 18; /* default horizontal scrollbar height*/
            }

            isInViewPortAbove = (rowTop < scrollTop);
            isInViewPortBelow = model.sizeSettings.height == "auto" ? false : (scrollTop + proxy._viewPortHeight - horizontalScrollBarHeight) < rowBottom;


            if (isInViewPortAbove || isInViewPortBelow) {

                if ((rowTop + proxy._viewPortHeight) > totalHeight) {
                    rowTop = totalHeight - proxy._viewPortHeight;

                    if (isInViewPortBelow)
                        rowTop += horizontalScrollBarHeight;
                }

                    var args = {
                        requestType: ej.TreeGrid.Actions.Scroll,
                         delta: rowTop
                    };
                    if (scrollerExist)
                        proxy.updateScrollTop(rowTop);
                    else {
                        proxy.getScrollElement().scrollTop(args.delta);
                        proxy._completeAction(args);
                    }
                    if (model.enableVirtualization) {
                       proxy._focusTreeGridElement();
                    }
            }
        },
        /*Select row on shift pluse down arrow key*/
        _selectedItemDown: function (action) {
            var proxy = this,
            model = this.model,
            fromIndex, toIndex, index,
            updatedRecords = proxy.getUpdatedRecords(),
            expandedRecords = proxy.getExpandedRecords(updatedRecords);

            if (proxy._prevSelectedItem && this._getExpandStatusRecord(proxy._prevSelectedItem))
                fromIndex = model.updatedRecords.indexOf(proxy._prevSelectedItem);
            else
                fromIndex = 0;
            if (proxy._shiftSelectedRecord && this._getExpandStatusRecord(proxy._shiftSelectedRecord)) {
                index = expandedRecords.indexOf(proxy._shiftSelectedRecord);
                toIndex = model.updatedRecords.indexOf(expandedRecords[index + 1]);
            }
            else {
                var index = expandedRecords.indexOf(model.updatedRecords[fromIndex]);
                toIndex = model.updatedRecords.indexOf(expandedRecords[index + 1]);
            }
            if (toIndex >= updatedRecords.length || toIndex == -1 )
                toIndex = updatedRecords.length - 1;
            proxy.updateScrollBar(toIndex);
            proxy._multiSelectShiftRequest = true;
            proxy.selectRows(fromIndex, toIndex);
            proxy._rowSelectedEventTrigger(fromIndex, toIndex, false, action);
            proxy._multiSelectShiftRequest = false;
            proxy._shiftSelectedRecord = model.updatedRecords[toIndex];
        },
        /*Select row on shift pluse up arrow key*/
        _selectedItemUp: function (action) {
            var proxy = this,
            model = this.model, shiftUpIndex, nextRowIndex,
            fromIndex, toIndex, index,
            updatedRecords = proxy.getUpdatedRecords(),
            expandedRecords = proxy.getExpandedRecords(updatedRecords);

            if (proxy._prevSelectedItem && this._getExpandStatusRecord(proxy._prevSelectedItem))
                fromIndex = model.updatedRecords.indexOf(proxy._prevSelectedItem);
            else
                fromIndex = 0;
            if (proxy._shiftSelectedRecord && this._getExpandStatusRecord(proxy._shiftSelectedRecord)) {
                index = expandedRecords.indexOf(proxy._shiftSelectedRecord);
                toIndex = model.updatedRecords.indexOf(expandedRecords[index - 1]);
            }
            else {
                var index = expandedRecords.indexOf(model.updatedRecords[fromIndex]);
                toIndex = model.updatedRecords.indexOf(expandedRecords[index - 1]);
            }
            if (toIndex < 0)
                toIndex = 0;
            proxy.updateScrollBar(toIndex);
            proxy._multiSelectShiftRequest = true;
            proxy.selectRows(fromIndex, toIndex);
            proxy._rowSelectedEventTrigger(fromIndex, toIndex, false, action);
            proxy._multiSelectShiftRequest = false;
            proxy._shiftSelectedRecord = model.updatedRecords[toIndex];
        },

        //KEY PRESSED EVENT FOR KEY BOARD INTERACTION IN TREEGRID CONTROL

        _keyPressed: function (action, target, e) {

            var proxy = this,
            model = this.model,
            lastRowIndex,
            selectingRowIndex,
            visibleColumns = [],
            visibleFrozenColumns = [],
            updatedRecords = proxy.getUpdatedRecords(), index, editType, str,
            expandedRecords = model.allowPaging ? updatedRecords : proxy.getExpandedRecords(model.updatedRecords), filterMenuDiv,
            currentSelectingRecord;
            this._removeDetailsRow();
            //CHECK THE ALLOWKEYBOARDNAVIGATION
            if (!model.allowKeyboardNavigation){
                return false;
            }

            if (this.model.editSettings.editMode == "dialogEditing" && $(target).closest("#" + this._id + "_dialogEdit").length)
                return true;
            var returnValue = false,
                $target = $(target),
            $form = $("#" + proxy._id + "EditForm");
            if (action !="downArrow" && action != "upArrow" && action != "saveRequest" && action != "moveCellLeft" && action != "moveCellRight"
                   && action != "cancelRequest" && $target.prop("tagName") == "INPUT") // Skip the keypress event for filter bar input box except enter
                return true;
            var headerContextMenu, headerColumnChooserMenu, isVisibleHeaderColumnChooserMenu, contextMenu, subContextMenu, columnMenu, columnChooserMenu, isVisible, isVisibleColumnChooserMenu, isVisibleFilterMenu;
            if (model.isFromGantt) {
                contextMenu = $("#" + proxy._id.replace("ejTreeGrid", "") + "_ContextMenu");
                subContextMenu = $("#" + proxy._id.replace("ejTreeGrid", "") + "_SubContextMenu");
            }
            else {
                contextMenu = $("#" + proxy._id + "_ContextMenu");
                subContextMenu = $("#" + proxy._id + "_SubContextMenu");
            }
            columnMenu = $("#" + proxy._id + "_ColumnMenu");
            columnChooserMenu = $("#" + proxy._id + "ccDiv_wrapper");
            headerContextMenu = $("#" + proxy._id + "_headerContextMenu");
            headerColumnChooserMenu = $("#" + proxy._id + "ccDiv_wrapper");
            if (proxy._columnMenuTarget) {
                var columnFieldName = $.trim(proxy._columnMenuTarget.prev("div.e-headercelldiv").attr("data-ej-mappingname")),
                column = proxy.getColumnByField(columnFieldName), filtertype;
                if (column) {
                    if (column.filterEditType) {
                        index = column.filterEditType.indexOf("edit");
                        filtertype = column.filterEditType;
                    }
                    else {
                        index = column.editType.indexOf("edit");
                        filtertype = column.editType;
                    }
                    if (index != -1) {
                        editType = filtertype.slice(0, index);
                        str = editType.charAt(0).toUpperCase() + editType.slice(1);
                        filterMenuDiv = $("#" + proxy._id + "filter" + str + "MenuDiv_wrapper");
                    } else {
                        str = filtertype.charAt(0).toUpperCase() + filtertype.slice(1);
                        filterMenuDiv = $("#" + proxy._id + "filter" + str + "MenuDiv_wrapper");
                    }
                }
                isVisibleFilterMenu = !ej.isNullOrUndefined(filterMenuDiv) && filterMenuDiv.is(":visible");
            }
            isVisible = subContextMenu.css("visibility") == "visible" ? true : false;
            isVisibleColumnChooserMenu = columnChooserMenu.is(":visible");
            isVisibleHeaderColumnChooserMenu = headerColumnChooserMenu.is(":visible");
            if (proxy._isRowEdit && (action == "moveCellRight" || action == "moveCellLeft")) {
                visibleFrozenColumns = model.columns.filter(function (column) {
                    return column.isFrozen == true && column.visible == true;
                });
                visibleColumns = model.columns.filter(function (column) {
                    return column.visible == true;
                });
            }
            switch (action) {

                //save the current edited cellValue on Enter key press
                case "saveRequest":
                    if (contextMenu.length == 0 && columnMenu.length == 0 && headerContextMenu.length==0) {
                        if (proxy._isRowEdit || proxy.model.isEdit) {
                            $target.blur();
                            proxy._endEdit();
                           proxy._focusTreeGridElement();
                        }
                        if (model.filterSettings.filterBarMode == "onEnter" && model.filterSettings.filterType == "filterbar" && model.allowFiltering && $target.closest("th").hasClass("e-filterbarcell"))
                            proxy._filterBarHandler(target);
                    }
                    else
                    {
                        if (contextMenu.length)
                        {
                            proxy._moveToNextMenuItem("save");
                        }
                        else if (headerContextMenu.length) {
                           if ($("#" + proxy._activeMenuItemId).attr("id") == "contextMenu_Columns") {
                                var option = null;
                                columnChooserMenuItem = headerColumnChooserMenu.find("div.e-columnmenuselection");
                                if (isVisibleColumnChooserMenu) {
                                    option = columnChooserMenuItem.data("column");
                                }
                                else
                                {
                                    var columnMenuItem = headerContextMenu.find("div.e-columnmenuselection");
                                    if (columnMenuItem.length > 0) {
                                        option = columnMenuItem[0].id;
                                    }
                                }
                                if (!ej.isNullOrUndefined(option)) {
                               column = proxy._contextMenuColumnDetails;
                                    switch (option) {
                                        case "contextMenu_Columns":
                                            proxy._showKeyboardColumnChooser(false, headerContextMenu, headerColumnChooserMenu, $("#contextMenu_Columns"));
                                            break;
                                        default:
                                            if (!columnChooserMenuItem.find("span").hasClass("e-disable")) {
                                                var isColumnVisible = columnChooserMenuItem.find("span").attr("aria-checked");
                                                isColumnVisible == "true" ? proxy.hideColumn(option) : proxy.showColumn(option);
                                            }
                                            break;
                                    }
                                }
                            }
                            else {
                                proxy._moveToNextMenuItem("save");
                            }
                        }

                        else if (columnMenu.length) {
                            var option = null,
                                columnChooserMenuItem = columnChooserMenu.find("div.e-columnmenuselection");                            
                            if (isVisibleColumnChooserMenu) {                                
                                option = columnChooserMenuItem.data("column");
                            }
                            else
                            {
                                var columnMenuItem = columnMenu.find("div.e-columnmenuselection");
                                if (columnMenuItem.length > 0) {
                                    option = columnMenuItem[0].id;
                                }
                            }
                            if (!ej.isNullOrUndefined(option))
                            {
                                $target = proxy._columnMenuTarget;
                                var columnFieldName = $.trim($target.prev("div.e-headercelldiv").attr("data-ej-mappingname")),
                                column = proxy.getColumnByField(columnFieldName);
                                switch(option)
                                {
                                    case proxy._id + "_SortAscendingChooser":
                                        
                                        if (proxy.model.allowMultiSorting) proxy._multiSortRequest = true;
                                        if (model.isFromGantt)
                                            proxy.sortColumn(column.mappingName ? column.mappingName : column.field, ej.sortOrder.Ascending);
                                        else
                                            proxy.sortColumn(column.field, ej.sortOrder.Ascending);
                                        proxy._multiSortRequest = false;
                                        break;
                                    case proxy._id + "_SortDescendingChooser":
                                       
                                        if (proxy.model.allowMultiSorting) proxy._multiSortRequest = true;
                                        if (model.isFromGantt)
                                            proxy.sortColumn(column.mappingName ? column.mappingName : column.field, ej.sortOrder.Descending);
                                        else
                                            proxy.sortColumn(column.field, ej.sortOrder.Descending);
                                        proxy._multiSortRequest = false;
                                        break;
                                    case proxy._id + "_FreezeColumnsChooser":
                                        if (column && !$(proxy._id + "_FreezeColumnChooser").hasClass("e-disable")) {
                                            if (proxy._checkboxSelection) {
                                                if (model.columns[0].nonColumn && !model.columns[0].isFrozen)
                                                    model.columns[0]['isFrozen'] = true;
                                            }
                                            proxy.freezeColumn(column.field, true);
                                        }
                                        break;
                                    case proxy._id + "_UnfreezeColumnsChooser":
                                        if (column && !$(proxy._id + "_UnfreezeColumnChooser").hasClass("e-disable")) {                                           
                                            if (proxy._checkboxSelection && proxy._frozenColumnsLength == 2) {
                                                if (model.columns[0].nonColumn && model.columns[0].isFrozen)
                                                    model.columns[0]['isFrozen'] = false;
                                            }
                                            proxy.freezeColumn(column.field, false);
                                        }
                                        break;
                                    case proxy._id + "_FreezePrecedingColumnsChooser":
                                        if (column && !$(proxy._id + "_FreezePrecedingColumnsChooser").hasClass("e-disable"))
                                            proxy.freezePrecedingColumns(column.field);
                                        break;
                                    case proxy._id + "_ColumnLeftChooser":
                                        if (column && !$(proxy._id + "_ColumnLeftChooser").hasClass("e-disable"))
                                            proxy.insertColumnChooser(column, "left");
                                        break;
                                    case proxy._id + "_ColumnRightChooser":
                                        if (column && !$(proxy._id + "_ColumnRightChooser").hasClass("e-disable"))
                                            proxy.insertColumnChooser(column, "right");
                                        break;
                                    case proxy._id + "_DeleteColumnChooser":
                                        if (column && !$(proxy._id + "_DeleteColumnChooser").hasClass("e-disable")) {
                                            proxy._targetColumnIndex = model.columns.indexOf(column);
                                            proxy._updateConfirmDialog.ejDialog("open");
                                            proxy._clearColumnMenu();
                                        }
                                        break;
                                    case proxy._id + "_RenameColumnChooser":
                                        if (column && !$(proxy._id + "_RenameColumnChooser").hasClass("e-disable")) {
                                            proxy._targetColumnIndex = model.columns.indexOf(column);
                                            proxy._renderColumnRenameDialog(column);
                                            proxy._columnRenameDialog.ejDialog("open");
                                            proxy._clearColumnMenu();
                                        }
                                        break;
                                    case proxy._id + "_FilterChooser":
                                        if (column && $("#" + proxy._id + "_ColumnMenu").find(".e-expander").hasClass("e-treegridadaptivesubicon")) {
                                            var idValue = filterMenuDiv[0].id.substring(proxy._id.length, filterMenuDiv[0].id.indexOf("MenuDiv"));
                                            proxy._showFilterMenu(null, idValue, null, null, null, null, null, null, column, null);
                                        }
                                        break;
                                    case proxy._id + "_ColumnsChooser":
                                        if ((column && $("#" + proxy._id + "_ColumnMenu").find(".e-expander").hasClass("e-treegridadaptivesubicon")) && !proxy.model.isFromGantt) {
                                            proxy._adaptiveColumnChooser();
                                        }
                                        break;
                                    default:
                                        if (!columnChooserMenuItem.find("span").hasClass("e-disable")) {
                                            var isColumnVisible = columnChooserMenuItem.find("span").attr("aria-checked");
                                            isColumnVisible == "true" ? proxy.hideColumn(option) : proxy.showColumn(option);
                                        }
                                        break;
                                }
                            }
                        }

                    }
                    break;

                    //cancel the cell editing in the current cell Esc key press
                case "cancelRequest":
                    if (contextMenu.length == 0 && columnMenu.length == 0 && headerContextMenu.length==0) {
                        if ($form.length > 0) {
                            var editMode = model.editSettings.editMode;
                            if (editMode.toLowerCase() == "cellediting" || (editMode.toLowerCase() == "batchediting" && model.editSettings.batchEditSettings.editMode == "cell")) {
                                if (proxy._isRowEdit)
                                    proxy.cancelRowEditCell();
                                else
                                    proxy.cancelEditCell();
                            }
                            else if (editMode.toLowerCase() == "rowediting" || (editMode.toLowerCase() == "batchediting" && model.editSettings.batchEditSettings.editMode == "row")) {
                                proxy.cancelRowEditCell();
                            }
                            proxy._cancelSaveTools();
                        }
                       proxy._focusTreeGridElement();
                        if (proxy._dragMouseDown == true) {
                            $(proxy._dragmouseOverTooltip).remove();
                            $(".e-dragintend").find(".e-icon").css({ "display": "none" });
                            $(".e-intendparent").find(".e-icon").css({ "display": "none" });
                            proxy._dropCancel = true;
                            proxy._dragMouseDown = false;
                            proxy._dragTooltip = false;
                            proxy._headerDragStatus = "";
                            /*hide drag icons for target row element*/
                            if (proxy._dragTargetItem && proxy._dragTargetItem.hasChildRecords && proxy._dragTargetItem.level ==0) {
                                var targetTr = ej.TreeGrid.getRowByIndex(this, updatedRecords.indexOf(proxy._dragTargetItem));
                                if (proxy._dragTargetItem)
                                    targetTr.find(".e-treegridexpand").css({ "display": "inline-block" });
                                else
                                    targetTr.find(".e-treegridcollapse").css({ "display": "inline-block" });
                            }
                            /*unbind mouse move event of row drag*/
                            proxy._off(proxy.element, "touchmove", ".e-treegridrows, .e-templatecell", proxy.dragToolTip);
                            proxy._off(proxy.element, "mousemove", ".e-gridcontent, .e-templatecell", proxy.dragToolTip);
                        }
                    }
                    else {
                        proxy._clearContextMenu();
                        proxy._clearColumnMenu();
                    }
                    break;
                case "editRecord":
                    if (model.isFromGantt && model.readOnly == true) return;
                    if (contextMenu.length == 0 && columnMenu.length == 0) {
                        if (model.selectionSettings.selectionMode == "cell" && model.editSettings.editMode != "dialogEditing") {
                            model.editSettings.editMode = "cellEditing";
                        }
                        var editSettings = model.editSettings,
                            editMode = editSettings.editMode;
                        if ((editSettings.allowEditing && model.selectedItems.length == 1) || (editSettings.allowEditing && model.selectionSettings.selectionMode == "cell") ||
                            (editSettings.allowEditing && model.selectedItem && proxy._checkboxSelection)) {
                            if (editMode.toLowerCase() == "cellediting" || model.selectionSettings.selectionMode == "cell") {
                                var column = proxy.model.columns[proxy._cellIndex];
                                if (ej.isNullOrUndefined(column) || !column.visible || column.allowEditing == false)
                                    return;
                                if (model.selectionSettings.selectionMode === "cell")
                                    proxy._cellEditingDetails.rowIndex = this._rowIndexOfLastSelectedCell;
                                else
                                    proxy._cellEditingDetails.rowIndex = this.selectedRowIndex();
                                proxy._cellEditingDetails.columnIndex = proxy._cellIndex;//proxy.getCellIndex(e, target);
                                model.selectedItem = updatedRecords[this.selectedRowIndex()];
                                if (proxy._cellEditingDetails.columnIndex > -1) {
                                    proxy.updateScrollBar();
                                    var fieldName = column.field;
                                    if (proxy.model.editSettings.editMode == "dialogEditing")
                                        fieldName && proxy._showTreeGridAddEditDialog();
                                    else
                                        fieldName && proxy.cellEdit(proxy._cellEditingDetails.rowIndex, fieldName);
                                    proxy._editAddTools();
                                }
                            }
                            else if (editMode.toLowerCase() == "rowediting" && !proxy._isRowEdit && model.selectionSettings.selectionMode != "cell") {
                                var index = proxy.selectedRowIndex();
                                if (index >= 0) {                                   
                                    proxy.updateScrollBar();
                                    proxy._editRow(index);
                                }
                            } else if (editMode.toLowerCase() == "dialogediting" && model.selectionSettings.selectionMode != "cell") {
                                var index = proxy.selectedRowIndex();
                                if (index >= 0) {
                                    proxy._showTreeGridAddEditDialog(index);
                                }
                            }
                        }
                    }
                    break;
                    //Select first row of current Page if Paging is enabled
                case "topRowSelection":
                    if (model.allowPaging && contextMenu.length == 0 && columnMenu.length == 0) {
                        if (proxy._isRowEdit || proxy.model.isEdit)
                            return true;
                        if (updatedRecords.length > 0) {
                            var topRowIndex = 0;
                            if (updatedRecords[0].isSummaryRow) {
                                var record = proxy._getNextRecord(topRowIndex +1, updatedRecords, action);
                                topRowIndex = updatedRecords.indexOf(record);
                            }
                            if (!proxy._rowSelectingEventTrigger(this.selectedRowIndex(), topRowIndex, false, action)) {
                                proxy.selectRows(topRowIndex);
                                proxy._focusTreeGridElement();
                                proxy.updateScrollBar();
                                proxy._rowSelectedEventTrigger(topRowIndex, null, false, action);
                            }
                        }
                    }
                    break;
                    //Move to next page
                case "nextPage":
                    if (proxy._currentPage() < model.pageSettings.totalPages && proxy.model.pageSettings.pageSizeMode == ej.TreeGrid.PageSizeMode.Root
                        && proxy._batchEditStarts && !(proxy._confirmDialog).is(":visible")) {
                        proxy._batchSaveLostWarning("Paging");
                        proxy._batchTempDetails.currentPage = proxy._currentPage() + 1;
                        return true;
                    }
                    if (model.allowPaging) {
                        var currentPage = proxy._currentPage();
                       proxy._focusTreeGridElement();
                        if (currentPage < model.pageSettings.totalPages)
                            proxy.gotoPage(currentPage + 1);
                    }
                    break;
                    //Move to previous page
                case "prevPage":
                    if (proxy._currentPage() !=1 && proxy.model.pageSettings.pageSizeMode == ej.TreeGrid.PageSizeMode.Root
                        && proxy._batchEditStarts && !(proxy._confirmDialog).is(":visible")) {
                        proxy._batchSaveLostWarning("Paging");
                        proxy._batchTempDetails.currentPage = proxy._currentPage() - 1;
                        return true;
                    }
                    if (model.allowPaging) {
                        var currentPage = proxy._currentPage();
                       proxy._focusTreeGridElement();
                        if (currentPage != 1)
                            proxy.gotoPage(currentPage - 1);
                    }
                    break;
                    //Select last row of current Page if Paging is enabled
                case "bottomRowSelection":
                    if (contextMenu.length == 0 && columnMenu.length == 0) {
                        if (proxy._isRowEdit || proxy.model.isEdit)
                            return true;
                        if (updatedRecords.length > 0) {

                            var bottomRowIndex = updatedRecords.length - 1;
                            if (updatedRecords[bottomRowIndex].isSummaryRow) {
                                var record = proxy._getNextRecord(bottomRowIndex - 1, updatedRecords, action);
                                bottomRowIndex = updatedRecords.indexOf(record);
                            }
                            if (!proxy._rowSelectingEventTrigger(this.selectedRowIndex(), bottomRowIndex, false, action)) {
                                proxy.selectRows(bottomRowIndex);
                                proxy._focusTreeGridElement();
                                proxy.updateScrollBar();
                                proxy._rowSelectedEventTrigger(bottomRowIndex, null, false, action);
                            }
                        }

                    }
                    break;

                    //select the first row while press the Home key 
                case "firstRowSelection":
                    if (contextMenu.length == 0 && columnMenu.length == 0) {
                        if (proxy._isRowEdit || proxy.model.isEdit)
                            return true;

                        if (updatedRecords.length > 0) {
                            if (model.selectionSettings.selectionMode == "row") {
                                if (model.allowPaging)
                                    proxy.gotoPage(1);
                                if (model.allowSelection && !(proxy._rowSelectingEventTrigger(this.selectedRowIndex(), 0, false, action))) {
                                    proxy.selectRows(0);
                                    proxy.updateScrollBar();
                                    proxy._focusTreeGridElement();
                                    proxy._rowSelectedEventTrigger(0, null, false, action);
                                }
                            }
                                //Select first cell of a row.
                            else if (model.selectionSettings.selectionMode == "cell") {
                                var rowIndex = proxy._focusingRowIndex,
                                    cellInfo = {
                                        rowIndex: rowIndex,
                                        cellIndex: 0
                                    };
                                proxy._isShiftKeyNavigation = false;
                                proxy._cellIndex = 0;
                                proxy.selectCells([cellInfo]);

                            }
                            proxy._cancelSaveTools();
                        }  
                    }
                    break;

                case "lastRowSelection":
                    if (contextMenu.length == 0 && columnMenu.length == 0) {
                        if (proxy._isRowEdit || proxy.model.isEdit)
                            return true;
                        if (updatedRecords.length > 0) {
                            lastRowIndex = expandedRecords.length - 1;
                            currentSelectingRecord = expandedRecords[lastRowIndex];                            
                            if (currentSelectingRecord.isSummaryRow)
                                currentSelectingRecord = proxy._getNextRecord(lastRowIndex - 1, expandedRecords, action);
                            if (model.allowPaging && currentSelectingRecord) {
                                proxy.gotoPage(model.pageSettings.totalPages);
                                updatedRecords = proxy._updatedPageData;
                            }
                            selectingRowIndex = updatedRecords.indexOf(currentSelectingRecord);
                            if (model.selectionSettings.selectionMode == "row") {
                                if (model.allowSelection && !(proxy._rowSelectingEventTrigger(this.selectedRowIndex(), selectingRowIndex, false, action))) {
                                    proxy.selectRows(selectingRowIndex);
                                    proxy._focusTreeGridElement();
                                    proxy.updateScrollBar();
                                    proxy._rowSelectedEventTrigger(selectingRowIndex, null, false, action);
                                }
                            }
                                //Select last cell of a row.
                            else if (model.selectionSettings.selectionMode == "cell") {
                                var rowIndex = proxy._focusingRowIndex, columns = model.columns;
                                proxy._isShiftKeyNavigation = false;
                                proxy._cellIndex = proxy._getLastVisibleColumnIndex();// columns.length - 1;

                                var cellInfo = {
                                    rowIndex: rowIndex,
                                    cellIndex: proxy._cellIndex
                                };

                                proxy.selectCells([cellInfo]);
                            }
                            proxy._cancelSaveTools();
                        }
                    }
                    break;
                    //set the edit mode to previous cell by press shift +tab key
                case "moveCellLeft":
                    if (contextMenu.length == 0 && columnMenu.length == 0) {
                        //Row edit Element focusing for Shift + tab key press
                        if (proxy._isRowEdit) {
                            var cellIndex = $target.closest("td").prev("td").length > 0 ? $target.closest("td").prev("td")[0].cellIndex : -1;
                            if (this._frozenColumnsLength > 0 && $("#" + proxy._id + "EditForm").has($target).length > 0) {
                                cellIndex = cellIndex + visibleFrozenColumns.length;
                            }
                            var previousElement = cellIndex != -1 && proxy._getPreviousElement($target, cellIndex, visibleColumns);
                            if (previousElement.length)
                                proxy._focusElementsForRowEdit(previousElement);
                        } else if (model.editSettings.allowEditing && model.editSettings.editMode.toLowerCase() == "cellediting" && $form.length > 0 && proxy.editFormValidate()) {
                            $target.blur();
                            returnValue = proxy._moveCurrentCell("left");
                        }
                        if (model.allowSelection && model.selectionSettings.selectionMode == "cell" && !proxy._isRowEdit && (proxy._focusingRowIndex != 0 || proxy._cellIndex != 0)) {
                            if (proxy.model.isEdit) {
                                var record = model.currentViewData[proxy._cellEditingDetails.rowIndex];
                                proxy._focusingRowIndex = updatedRecords.indexOf(record);
                                proxy._cellIndex = proxy._cellEditingDetails.columnIndex;
                                var cellInfo = {
                                    rowIndex: proxy._focusingRowIndex,
                                    cellIndex: proxy._cellIndex
                                };
                                proxy.selectCells([cellInfo]);
                            }
                            else proxy._selectNextCell("left", action);
                    }
                    }
                    break;

                    //set the edit mode to next cell by tab key
                case "moveCellRight":
                        if (contextMenu.length == 0 && columnMenu.length == 0) {
                        if (proxy._isRowEdit) {
                                var cellIndex = $target.closest("td").next("td").length > 0 ? $target.closest("td").next("td")[0].cellIndex : -1;
                                cellIndex = cellIndex == -1 && $("#" + proxy._id + "EditFrozenForm").has($target).length > 0 ? $("#" + proxy._id + "EditForm").find('td').eq(0).index() : cellIndex;
                            if (this._frozenColumnsLength > 0 && cellIndex != -1 && $("#" + proxy._id + "EditForm").has($target).length > 0) {
                                cellIndex = cellIndex + visibleFrozenColumns.length;
                            }
                            var nextElement = cellIndex != -1 && proxy._getNextElement($target, cellIndex, visibleColumns, visibleFrozenColumns);
                            if (nextElement.length)
                                proxy._focusElementsForRowEdit(nextElement);
                        } else if (model.editSettings.allowEditing && (model.editSettings.editMode == "cellEditing" || model.editSettings.editMode == "batchEditing" || model.selectionSettings.selectionMode == "cell")
                            && $target && $form.length > 0 && this.editFormValidate()) {
                            $target.blur();
                            returnValue = proxy._moveCurrentCell("right");
                        }
                        if (model.allowSelection && model.selectionSettings.selectionMode == "cell" && !proxy._isRowEdit && (proxy._focusingRowIndex != proxy.getRows().length - 1 || proxy._cellIndex != columnLength - 1)) {
                            if (proxy.model.isEdit) {
                                var record = model.currentViewData[proxy._cellEditingDetails.rowIndex];
                                proxy._focusingRowIndex = updatedRecords.indexOf(record);
                                proxy._cellIndex = proxy._cellEditingDetails.columnIndex;
                                var cellInfo = {
                                    rowIndex: proxy._focusingRowIndex,
                                    cellIndex: proxy._cellIndex
                                };
                                proxy.selectCells([cellInfo]);
                            }
                            else proxy._selectNextCell("right", action);
                    }
                    }
                    break;

                    //select the next row by press down arrow key
                case "downArrow":
                    if (model.allowSelection) {
                        if (contextMenu.length == 0 && columnMenu.length == 0 &&headerContextMenu.length==0) {
                            if (proxy._isRowEdit || proxy.model.isEdit)
                                return true;

                            if (updatedRecords.length > 0 && model.selectedItem && proxy.selectedRowIndex() > -1 && model.selectionSettings.selectionMode == "row") {
                                //get the last row index of the ganttchart control
                                lastRowIndex = updatedRecords.length - 1;
                                if (proxy.selectedRowIndex() != lastRowIndex) {
                                    var selectedItem = updatedRecords[proxy.selectedRowIndex()];
                                    selectingRowIndex = expandedRecords.indexOf(selectedItem);
                                    currentSelectingRecord = expandedRecords[selectingRowIndex + 1];
                                        //To skip the key Navigation from summary row.
                                    if (currentSelectingRecord && currentSelectingRecord.isSummaryRow)
                                        currentSelectingRecord = proxy._getNextRecord(selectingRowIndex + 1, expandedRecords);
                                                                  
                                        selectingRowIndex = updatedRecords.indexOf(currentSelectingRecord);
                                        if (currentSelectingRecord && selectingRowIndex <= lastRowIndex) {
                                            if (model.allowSelection && !(proxy._rowSelectingEventTrigger(this.selectedRowIndex(), selectingRowIndex, false, action))) {
                                                proxy.selectRows(selectingRowIndex);
                                                proxy.updateScrollBar();
                                                proxy._focusTreeGridElement();
                                                proxy._rowSelectedEventTrigger(proxy.selectedRowIndex(), null, false, action);
                                            }
                                        }
                                }
                            proxy._cancelSaveTools();
                        }
                            else if (model.selectionSettings.selectionMode == "cell" && proxy.selectedCellIndexes().length > 0) {
                                var rowIndex = proxy._focusingRowIndex + 1, cellIndex = proxy._cellIndex,
                                    recordLength = updatedRecords.length;
                                proxy._isShiftKeyNavigation = false;
                                if (rowIndex < recordLength) {
                                    var selectedItem = updatedRecords[proxy._rowIndexOfLastSelectedCell];
                                    selectingRowIndex = expandedRecords.indexOf(selectedItem);
                                    currentSelectingRecord = expandedRecords[selectingRowIndex + 1];
                                    //To skip the key Navigation from summary row.
                                    if (currentSelectingRecord && currentSelectingRecord.isSummaryRow)
                                        currentSelectingRecord = proxy._getNextRecord(selectingRowIndex + 1, expandedRecords);
                                    rowIndex = updatedRecords.indexOf(currentSelectingRecord);
                                    
                                    if (currentSelectingRecord) {
                                    cellInfo = {
                                        rowIndex: rowIndex,
                                        cellIndex: cellIndex
                                    };
                                        proxy._focusingRowIndex = rowIndex;
                                        proxy.selectCells([cellInfo]);
                                        proxy.updateScrollBar();
                                }
                            }
                        }
                        }
                        else {
                            if (contextMenu.length) {
                                proxy._moveToNextMenuItem("next");
                            }
                            else if (headerContextMenu.length) {
                               if (isVisibleHeaderColumnChooserMenu) {
                                   var headerColumnChooserMenuItem = headerColumnChooserMenu.find("div.e-columnmenuselection"),
                                      nextItem = headerColumnChooserMenuItem.next("div.e-columnMenuListDiv");
                                   if (nextItem.length > 0) {
                                       headerColumnChooserMenuItem.removeClass("e-columnmenuselection");
                                       nextItem.addClass("e-columnmenuselection");
                                   }
                               }
                               else {
                                   proxy._moveToNextMenuItem("next");
                                  
                                }
                            }
                            else if (columnMenu.length) {
                                if (isVisibleColumnChooserMenu) {
                                    var columnChooserMenuItem = columnChooserMenu.find("div.e-columnmenuselection"),
                                       nextItem = columnChooserMenuItem.next("div.e-columnMenuListDiv");
                                    if (nextItem.length > 0) {
                                        columnChooserMenuItem.removeClass("e-columnmenuselection");
                                        nextItem.addClass("e-columnmenuselection");
                                    }
                                }
                                else {
                                    var columnMenuItem = columnMenu.find("div.e-columnmenuselection"),
                                        nextItem = proxy._findNextColumnMenuItem(columnMenuItem, "next",true);
                                    if (nextItem.length > 0) {
                                        columnMenuItem.removeClass("e-columnmenuselection");
                                        nextItem.addClass("e-columnmenuselection");
                                        proxy._focusTreeGridElement();
                                        proxy._isCloseFilterMenu = true;
                                        proxy._clearFilterMenu();
                                    }
                                }
                            }
                        }
					}
                    break;
                // expand the child task by press right arrow
                case "rightArrow":
					if (model.allowSelection) {
                    if (contextMenu.length == 0 && columnMenu.length == 0 &&headerContextMenu.length==0) {
                        if (proxy._isRowEdit || proxy.model.isEdit) return true;
                        var rowIndex = proxy.selectedRowIndex(),
                        record = updatedRecords[rowIndex],
                        args = {},
                        isExpandCollapseEnabeled;
                        args.data = record;
                        args.recordIndex = rowIndex;
                        args.expanded = true;
                        if (record) {
                            if (record.hasChildRecords && !record.expanded) {
                                if (proxy.selectedRowIndex() >= 0) {
                                    isExpandCollapseEnabeled = proxy._trigger("expanding", args);
                                    if (!isExpandCollapseEnabeled && !model.isFromGantt) {
                                        ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                                    }
                                    if (model.enableVirtualization)
                                       proxy._focusTreeGridElement();
                                    proxy.updateScrollBar();
                                }
                            }
                        }
                        proxy._cancelSaveTools();
                        if (model.allowSelection && model.selectionSettings.selectionMode == "cell" && (proxy._focusingRowIndex != proxy.getRows().length -1 || proxy._cellIndex != columnLength - 1)) {
                            proxy._selectNextCell("right", action);
                    }
                    }
                    else
                    {
                        if (contextMenu.length && !isVisible) {
                            proxy._moveToNextMenuItem("expand");
                        }
                        else if (headerContextMenu.length && !isVisibleHeaderColumnChooserMenu) {
                            proxy._moveToNextMenuItem("expand");
                            proxy._showKeyboardColumnChooser(false, headerContextMenu, headerColumnChooserMenu, $("#contextMenu_Columns"));
                        }
                        else if (columnMenu.length && !isVisibleColumnChooserMenu) {
                            proxy._showKeyboardColumnChooser(true, columnMenu, columnChooserMenu, $("#" + proxy._id + "_ColumnsChooser"));
                            var columnMenuItem = columnMenu.find("div.e-columnmenuselection"),
                             columnChooserMenuList = columnChooserMenu.find("div.e-columnMenuListDiv"),
                              columnListPosX = proxy._columnListPosX,
                                columnFilterPosX = proxy._columnFilterPosX,
                                columnChooserListIndex = proxy._columnChooserListIndex,
                                windowWidth = $(document).width();
                                if (columnMenuItem.length > 0 && columnMenuItem[0].id == proxy._id + "_FilterChooser" && !$("#" + proxy._id + "_ColumnMenu").find(".e-expander").hasClass("e-treegridadaptivesubicon")) {
                                if (model.filterSettings.filterType == "menu" && column.filterType != "excel") {
                                    var sliceFilterMenuDivID = filterMenuDiv[0].id.indexOf("_"),
                                        filterMenuDivID = "#" + filterMenuDiv[0].id.slice(0, sliceFilterMenuDivID),
                                        filterMenuInstance = $(filterMenuDivID).ejDialog("instance"), filterMenuPosition, filterMenuIndex;
                                        var proxy = this;
                                    var evntArgs = {};
                                    evntArgs.width = "auto",
                                    evntArgs.height = "auto",
                                    evntArgs.minWidth = "0px",
                                    evntArgs.minHeight = "0px",
                                    evntArgs.showHeader = false,
                                    evntArgs.position = { X: 1, Y: 1 },
                                    evntArgs.enableModal = false,
                                    evntArgs.isResponsive = false,
                                    evntArgs.enableResize = false,
                                    $(filterMenuDivID + "_wrapper").removeClass("e-dialog").removeClass("e-shadow").find("div.e-dialog-scroller").css("height", "100%").removeClass("e-widget-content");
                                $(filterMenuDivID).ejDialog(evntArgs);

                                    if (windowWidth < columnFilterPosX + $("#" + filterMenuDiv[0].id).width()) {
                                        columnFilterPosX = columnFilterPosX - columnMenu.width() - $("#" + filterMenuDiv[0].id).width();
                                    }
                                    filterMenuIndex = columnMenu.find("div.e-columnmenuselection").closest("li").index();
                                    filterMenuPosition = {
                                        X: columnFilterPosX,
                                        Y: proxy._columnMenuPopupY + $("#" + proxy._id + "_FilterChooser").position().top
                                    };
                                    filterMenuInstance.option({ "position": filterMenuPosition });
                                    filterMenuInstance.open();
                                    proxy._updatePreviousFilteredValue(column);
                                    filterMenuDiv.css("z-index", proxy.getMaxZIndex() + 1);
                                    proxy._focusTreeGridElement();
                                    proxy._renderedSubMenuType = filterMenuDivID + "Desktop";
                                }
                                else
                                {
                                    var element = !model.isFromGantt ? $(this.element) : $(this.element).closest(".e-gantt"),
                                        containerOffset = this.getOffsetRect(element[0]);
                                    containerOffset.right = containerOffset.left + $(element).width();
                                    proxy._openExcelFilter(column, columnFilterPosX, proxy._columnMenuPopupY, containerOffset, columnMenu.width());
                                }
                            }
                        }
                    }
					}
                    break;
				
                //collapse the child task by press left arrow 
                case "leftArrow":
					if (model.allowSelection) {
                    if (contextMenu.length == 0 && columnMenu.length == 0 && headerContextMenu.length==0) {
                        if (proxy._isRowEdit || proxy.model.isEdit) return true;
                        var rowIndex = proxy.selectedRowIndex(),
                        record = updatedRecords[rowIndex],
                        args = {},
                        isExpandCollapseEnabeled;
                        args.data = record;
                        args.recordIndex = rowIndex;
                        args.expanded = false;
                        if (record) {
                            if (record.hasChildRecords && record.expanded) {
                                if (proxy.selectedRowIndex() >= 0) {
                                    isExpandCollapseEnabeled = proxy._trigger("collapsing", args);
                                    if (!isExpandCollapseEnabeled && !model.isFromGantt) {
                                        ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                                    }
                                    if (model.enableVirtualization)
                                       proxy._focusTreeGridElement();
                                    proxy.updateScrollBar();
                                }
                            }
                        }
                        proxy._cancelSaveTools();
                        if (model.allowSelection && model.selectionSettings.selectionMode == "cell" && (proxy._focusingRowIndex != 0 || proxy._cellIndex != 0)) {
                            proxy._selectNextCell("left", action);
                    }
                    }
                    else if (contextMenu.length)
                        proxy._moveToNextMenuItem("collapse");
                    else if (headerContextMenu.length) {
                        proxy._moveToNextMenuItem("collapse");
                        $("#" + proxy._id + "ccDiv").ejDialog("close");
                    }
                    else if (columnMenu.length && (isVisibleColumnChooserMenu || isVisibleFilterMenu)) {
                        $("#" + proxy._id + "ccDiv").ejDialog("close");
                        proxy._isCloseFilterMenu = true;
                        proxy._clearFilterMenu();
                    }
					}
                    break;
				
                    //select the previous row by press down arrow key
                case "upArrow":
					if (model.allowSelection) {
					    if (contextMenu.length == 0 && columnMenu.length == 0 &&headerContextMenu.length==0) {
					       if (proxy._isRowEdit || proxy.model.isEdit)
                                return true;

                            if (model.selectionSettings.selectionMode == "row" && this.selectedRowIndex() > 0 && updatedRecords.length > 0 && model.selectedItem) {
                            var selectedItem = updatedRecords[proxy.selectedRowIndex()];
                            selectingRowIndex = expandedRecords.indexOf(selectedItem);
                            currentSelectingRecord = expandedRecords[selectingRowIndex - 1];
                                if (currentSelectingRecord.isSummaryRow)
                                    currentSelectingRecord = proxy._getNextRecord(selectingRowIndex - 1, expandedRecords, action);
                                selectingRowIndex = updatedRecords.indexOf(currentSelectingRecord);

                                if (selectingRowIndex != -1 && !proxy._rowSelectingEventTrigger(this.selectedRowIndex(), selectingRowIndex, false, action)) {
                                    proxy.selectRows(selectingRowIndex);
                                    proxy.updateScrollBar();
                                    proxy._focusTreeGridElement();
                                    proxy._rowSelectedEventTrigger(proxy.selectedRowIndex(), null, false, action);
                                }
                            proxy._cancelSaveTools();
                        }
                            else if (model.selectionSettings.selectionMode == "cell") {
                                var rowIndex = proxy._focusingRowIndex - 1, cellIndex = proxy._cellIndex,
                                   recordLength = model.flatRecords.length;
                                proxy._isShiftKeyNavigation = false;
                                if (rowIndex != -1) {
                                    var selectedItem = updatedRecords[proxy._rowIndexOfLastSelectedCell];
                                    selectingRowIndex = expandedRecords.indexOf(selectedItem);
                                    currentSelectingRecord = expandedRecords[selectingRowIndex - 1];
                                    //To skip the key Navigation from summary row.
                                    if (currentSelectingRecord && currentSelectingRecord.isSummaryRow)
                                        currentSelectingRecord = proxy._getNextRecord(selectingRowIndex - 1, expandedRecords, action);
                                    rowIndex = updatedRecords.indexOf(currentSelectingRecord);
                    
                                    if (currentSelectingRecord) {
                                   cellInfo = {
                                       rowIndex: rowIndex,
                                       cellIndex: cellIndex
                                   };
                                        proxy._focusingRowIndex = rowIndex;
                                    proxy.selectCells([cellInfo]);
                                        proxy.updateScrollBar();
                                    }

                    }
                            }
                        }
                        else {
                        if (contextMenu.length) {
                            proxy._moveToNextMenuItem("prev");
                        }
                        else if (headerContextMenu.length) {
                            if (isVisibleHeaderColumnChooserMenu) {
                                var headerColumnChooserMenuItem = headerColumnChooserMenu.find("div.e-columnmenuselection"),
                                   prevItem = headerColumnChooserMenuItem.prev("div.e-columnMenuListDiv");
                                if (prevItem.length > 0) {
                                    headerColumnChooserMenuItem.removeClass("e-columnmenuselection");
                                    prevItem.addClass("e-columnmenuselection");
                                }
                            }
                            else {
                                proxy._moveToNextMenuItem("prev");
                            }
                        }
                        else if (columnMenu.length) {
                            if (isVisibleColumnChooserMenu) {
                                var columnChooserMenuItem = columnChooserMenu.find("div.e-columnmenuselection"),
                                  prevItem = columnChooserMenuItem.prev("div.e-columnMenuListDiv");
                                if (prevItem.length > 0) {
                                    columnChooserMenuItem.removeClass("e-columnmenuselection");
                                    prevItem.addClass("e-columnmenuselection");
                                }
                            }
                            else {
                                var columnMenuItem = columnMenu.find("div.e-columnmenuselection"),
                                    prevItem = proxy._findNextColumnMenuItem(columnMenuItem, "prev",true);
                                if (prevItem.length > 0) {
                                    columnMenuItem.removeClass("e-columnmenuselection");
                                    prevItem.addClass("e-columnmenuselection");
                                    proxy._isCloseFilterMenu = true;
                                    proxy._clearFilterMenu();
                                }
                            }
                        }
                    }
					}
                    break;
                case "deleteRecord":
                    if (model.isFromGantt && model.readOnly == true) return;
                    if (model.editSettings.allowDeleting && contextMenu.length == 0 && columnMenu.length == 0) {
                        if (proxy._isRowEdit || proxy.model.isEdit) return true;
                        if (proxy.selectedRowIndex() >= 0) {
                            proxy.deleteRow();
                            proxy._cancelSaveTools();
                           proxy._focusTreeGridElement();
                        }
                    }
                    break;
                case "totalRowCollapse":
                    if (contextMenu.length == 0 && columnMenu.length == 0) {
                        if (proxy.model.isFromGantt) {
                            args = {};
                            args.requestType = "collapseAll";
                            proxy._trigger("expandAllCollapseAllRequest", args);
                        }
                        else
                            proxy.collapseAll();
                        break;
                    }
                case "totalRowExpand":
                    if (contextMenu.length == 0 && columnMenu.length == 0) {
                        if (proxy.model.isFromGantt) {
                            args = {};
                            args.requestType = "expandAll";
                            proxy._trigger("expandAllCollapseAllRequest", args);
                        }
                        else
                            proxy.expandAll();
                    }
                    break;
                case "spaceBar":
                var option = null;
                if (columnMenu.length && isVisibleColumnChooserMenu) {
                    var columnChooserMenuItem = columnChooserMenu.find("div.e-columnmenuselection");
                    option = columnChooserMenuItem.data("column");
                    if (!ej.isNullOrUndefined(option) && !columnChooserMenuItem.find("span").hasClass("e-disable")) {
                        var isColumnVisible = columnChooserMenuItem.find("span").attr("aria-checked");
                        isColumnVisible == "true" ? proxy.hideColumn(option) : proxy.showColumn(option);
                    }
                }
                if (proxy._checkboxSelection && $target.hasClass('e-treegrid') && $("#" + proxy._id + "EditForm").length == 0) {
                    if (!proxy._rowSelectingEventTrigger(this.selectedRowIndex(), this.selectedRowIndex(), true, action)) {
                        proxy.selectRows(this.selectedRowIndex(), null, true);
                        proxy._cancelSaveTools();
                        proxy._rowSelectedEventTrigger(this.selectedRowIndex(), null, true, action);
                    }
                }
                break;
                case "shiftDownArrow":
                    if (model.allowSelection && model.selectionSettings.selectionType == "multiple") {
                        if (model.selectionSettings.selectionMode == "cell") {
                            var recordLength = updatedRecords.length,
                                selectedCellElementLength = proxy._selectedCellDetails.length,
                                nextRowIndex;

                            var selectedItem = updatedRecords[proxy._rowIndexOfLastSelectedCell];
                            selectingRowIndex = expandedRecords.indexOf(selectedItem);
                            currentSelectingRecord = expandedRecords[selectingRowIndex + 1];
                            //To skip the key Navigation from summary row.
                            if (currentSelectingRecord && currentSelectingRecord.isSummaryRow)
                                currentSelectingRecord = proxy._getNextRecord(selectingRowIndex + 1, expandedRecords);
                            if (!currentSelectingRecord)
                                return;
                            nextRowIndex = updatedRecords.indexOf(currentSelectingRecord);
                            if (proxy._focusingRowIndex > proxy._rowIndexOfLastSelectedCell) {
                                proxy._rowIndexOfLastSelectedCell = nextRowIndex;
                                proxy._selectedCellDetails.sort(function (a, b) {
                                    return parseFloat(a.rowIndex) - parseFloat(b.rowIndex);
                                });
                                proxy._getSelectedCellsinARow(proxy._selectedCellDetails[0].data.index, proxy._selectedCellDetails);
                                for (var i = 0; i < proxy._selectedCellsinARow.length; i++) {
                                    var selectedCellIndex = proxy._selectedCellDetails.indexOf(proxy._selectedCellsinARow[i]);
                                    $(proxy._selectedCellsinARow[i].cellElement).removeClass("e-selectingcell");
                                    proxy._selectedCellDetails.splice(selectedCellIndex, 1);
                                }
                                proxy.updateScrollBar();
                            }
                            else if (nextRowIndex < recordLength) {
                                var args = {
                                    rowIndex: nextRowIndex,
                                    cellIndex: proxy._lastSelectedCellIndex,
                                }
                                proxy.updateScrollBar();
                                proxy._shiftKeySelectCells(args);
                                proxy._rowIndexOfLastSelectedCell = nextRowIndex;
                            }
                        }
                        else {
                            proxy._selectedItemDown(action);
                        }
                    }
                    break;
                case "shiftUpArrow":
                    if (model.allowSelection && model.selectionSettings.selectionType == "multiple") {
                        if (model.selectionSettings.selectionMode == "cell") {
                            var selectedCellElementLength = proxy._selectedCellDetails.length;
                            var selectedItem = updatedRecords[proxy._rowIndexOfLastSelectedCell];
                            selectingRowIndex = expandedRecords.indexOf(selectedItem);
                            currentSelectingRecord = expandedRecords[selectingRowIndex - 1];
                            //To skip the key Navigation from summary row.
                            if (currentSelectingRecord && currentSelectingRecord.isSummaryRow)
                                currentSelectingRecord = proxy._getNextRecord(selectingRowIndex - 1, expandedRecords, "upArrow");
                            if (!currentSelectingRecord)
                                return;
                            nextRowIndex = updatedRecords.indexOf(currentSelectingRecord);
                            if (selectedCellElementLength > 0 && proxy._focusingRowIndex < proxy._rowIndexOfLastSelectedCell) {
                                proxy._rowIndexOfLastSelectedCell = nextRowIndex;
                                proxy._getSelectedCellsinARow(proxy._selectedCellDetails[selectedCellElementLength - 1].data.index, proxy._selectedCellDetails);
                                for (var i = 0; i < proxy._selectedCellsinARow.length; i++) {
                                    var selectedCellIndex = proxy._selectedCellDetails.indexOf(proxy._selectedCellsinARow[i]);
                                    $(proxy._selectedCellsinARow[i].cellElement).removeClass("e-selectingcell");
                                    proxy._selectedCellDetails.splice(selectedCellIndex, 1);
                                }
                                proxy.updateScrollBar();
                            }
                            else if (nextRowIndex >= 0) {
                                var args = {
                                    rowIndex: nextRowIndex,
                                    cellIndex: proxy._lastSelectedCellIndex,
                                }
                                proxy._rowIndexOfLastSelectedCell = nextRowIndex;
                                proxy.updateScrollBar();
                                proxy._shiftKeySelectCells(args);
                            }
                        }
                        else
                            proxy._selectedItemUp(action);
                    }
                    break;

                case "shiftRightArrow":
                    if (model.allowSelection && model.selectionSettings.selectionMode == "cell" && model.selectionSettings.selectionType == "multiple") {
                        var columnLength = model.columns.length, cellIndex = proxy._lastSelectedCellIndex + 1;
                        if (cellIndex < columnLength - 1 && (!model.columns[cellIndex].visible || !model.columns[cellIndex].allowCellSelection))
                            cellIndex = proxy.getUpNextVisibleColumnIndex(cellIndex);
                        if (cellIndex < columnLength) {

                            var args = {
                                rowIndex: proxy._rowIndexOfLastSelectedCell,
                                cellIndex: cellIndex,
                            }
                            proxy._shiftKeyFirstElementDetails.firstElementRowIndex = proxy._focusingRowIndex;
                            proxy._shiftKeySelectCells(args);
                            proxy._lastSelectedCellIndex = cellIndex;                            
                        }
                    }
                    //proxy.updateScrollBar(proxy._rowIndexOfLastSelectedCell);                    
                    break;
                case "shiftLeftArrow":
                    if (model.allowSelection && model.selectionSettings.selectionMode == "cell" && model.selectionSettings.selectionType == "multiple") {
                        var cellIndex = proxy._lastSelectedCellIndex - 1;
                        if (cellIndex != -1 && (!model.columns[cellIndex].visible || !model.columns[cellIndex].allowCellSelection))
                            cellIndex = proxy.getPreviousVisibleColumnIndex(cellIndex);
                        var args = {
                            rowIndex: proxy._rowIndexOfLastSelectedCell,
                            cellIndex: cellIndex,
                        }
                        if (cellIndex != -1) {
                            proxy._shiftKeyFirstElementDetails.firstElementRowIndex = proxy._focusingRowIndex;
                            proxy._shiftKeySelectCells(args);
                            proxy._lastSelectedCellIndex = cellIndex;
                        }
                    }
                    //proxy.updateScrollBar(targetIndex);                    
                    break;

                case "shiftHomeButton":
                    if (model.selectionSettings.selectionMode == "cell" && model.selectionSettings.selectionType == "multiple") {
                        var rowIndex = proxy._rowIndexOfLastSelectedCell,
                           args = {
                               rowIndex: rowIndex,
                               cellIndex: 0
                           };
                        proxy._cellIndex = 0;
                        proxy._lastSelectedCellIndex = 0;
                        proxy._shiftKeySelectCells(args);

                    }
                    break;
                case "shiftEndButton":
                    if (model.selectionSettings.selectionMode == "cell" && model.selectionSettings.selectionType == "multiple") {
                        var rowIndex = proxy._rowIndexOfLastSelectedCell, columns = model.columns;
                        proxy._cellIndex = columns.length - 1;
                        args = {
                            rowIndex: rowIndex,
                            cellIndex: proxy._cellIndex
                        };
                        proxy._lastSelectedCellIndex = proxy._cellIndex;
                        proxy._shiftKeySelectCells(args);

                    }
                    break;
                default:
                    returnValue = true;
            }

            return returnValue;
        },

        //keyboardcolumnchooser


        _showKeyboardColumnChooser: function (isFromColumnMenu,columnMenu, columnChooserMenu,columnId) {
            var proxy = this,
               model = proxy.model;
            var evntArgs = {};
            evntArgs.width = "auto";
            evntArgs.height = "auto";
            evntArgs.minWidth = "0px";
            evntArgs.minHeight = "0px";
            evntArgs.showHeader = false;
            evntArgs.position = { X: 1, Y: 1 };
            evntArgs.enableModal = false;
            evntArgs.isResponsive = false;
            evntArgs.enableResize = false;
            evntArgs.cssClass = model.cssClass;
            $("#" + proxy._id + "ccDiv_wrapper").addClass("e-treegridadaptivedialog");
            $("#" + proxy._id + "ccDiv_wrapper").removeClass("e-dialog").removeClass("e-shadow").find("div.e-dialog-scroller").css("height", "100%").removeClass("e-widget-content");
            $("#" + proxy._id + "ccDiv").ejDialog(evntArgs);
            $("#" + proxy._id + "ccDiv").css({ 'height': 'auto' });
            var columnMenuItem = columnMenu.find("div.e-columnmenuselection"),
                 columnChooserMenuList = columnChooserMenu.find("div.e-columnMenuListDiv"),
                   columnListPosX = proxy._columnListPosX,
                     columnMenuPopupY = proxy._columnMenuPopupY,
                      windowWidth = $(document).width(),
                      columnMenuWidth = isFromColumnMenu ? columnMenu.width() : proxy._headerContextMenuWidth;
            proxy._updateColumnMenuVisibility();
            if (columnMenuItem.length > 0 && columnMenuItem[0].id == columnId[0].id && !columnMenu.find(".e-expander").hasClass("e-treegridadaptivesubicon")) {
                var columnchooser = $("#" + proxy._id + "ccDiv").ejDialog("instance"),
                    columnListWidth = $("#" + proxy._id + "ccDiv_wrapper").width();
                columnchooser.open();
                if (windowWidth < columnListPosX + columnMenu.width()) {
                    columnListPosX = columnListPosX - columnMenuWidth - columnListWidth;
                }
                var position = {
                    X: columnListPosX,
                    Y: columnMenuPopupY + columnId.position().top
                };
                columnchooser.option({ "position": position });
                columnChooserMenu.css("z-index", proxy.getMaxZIndex() + 1);
                columnChooserMenuList.removeClass("e-columnmenuselection");
                columnChooserMenuList.eq(0).addClass("e-columnmenuselection");
                proxy._focusTreeGridElement();
                proxy._renderedSubMenuType = "ColumnDesktop";
            }
            else {
                return false;
            }
        },


        _getNextElement: function ($target, cellIndex, visibleColumns, visibleFrozenColumns) {
            var proxy = this,
                model = proxy.model,
                columns = model.columns,
                visibleColumns = visibleColumns,
                visibleFrozenColumns = visibleFrozenColumns;
            $target = $target.closest("td").next("td");
            if (this._frozenColumnsLength > 0 && $target.length == 0) {
                $target = $("#" + proxy._id + "EditForm").find('td').eq(0);
                cellIndex = visibleFrozenColumns.length;
            }
            if ($target.length != 0) {
                if (!ej.isNullOrUndefined(visibleColumns[cellIndex]) && (ej.isNullOrUndefined(visibleColumns[cellIndex].allowEditing) || visibleColumns[cellIndex].allowEditing))
                    return $target;
                else {
                    if (cellIndex + 1 < visibleColumns.length)
                        return proxy._getNextElement($target, cellIndex + 1, visibleColumns, visibleFrozenColumns);
                    else
                        return false;
                }
            } else {
                return false;
            }
        },

        _getPreviousElement: function ($target, cellIndex, visibleColumns) {
            var proxy = this,
                model = proxy.model,
                columns = model.columns,
                visibleColumns = visibleColumns;
            $target = $target.closest("td").prev("td");
            if (this._frozenColumnsLength > 0 && $target.length == 0)
                $target = $("#" + proxy._id + "EditFrozenForm").find('td').last();            

            if ($target.length != 0 && cellIndex > -1) {
                if (!ej.isNullOrUndefined(visibleColumns[cellIndex]) && (ej.isNullOrUndefined(visibleColumns[cellIndex].allowEditing) || visibleColumns[cellIndex].allowEditing))
                    return $target;
                else
                    return proxy._getPreviousElement($target, cellIndex - 1, visibleColumns);
            } else {
                return false;
            }
        },
        _clearAllFilter: function (fieldName) {
            var proxy = this, column = proxy.model.filterSettings.filteredColumns[0];
            proxy.model.allowFiltering = true;
            proxy.model.filterSettings.filteredColumns = [];
            proxy.filterColumn(column.field, column.operator, "", "and");
            proxy._filteredColumnValue = [];
            proxy._filteredColumnValueID = [];
        },

        //Method to bind all the filter condition and splice the over writed condition.
        filterColumn: function (fieldName, filterOperator, filterValue, predicate, matchcase, actualFilterValue) {
           
            var proxy = this,
                model = proxy.model,
                filteredColumns = model.filterSettings.filteredColumns;
            if (!this.model.allowFiltering)
                return;
            if (proxy._batchEditStarts && !(proxy._confirmDialog).is(":visible")) {
                proxy._batchSaveLostWarning("Filtering");
                var details = proxy._batchTempDetails;
                details["fieldName"] = fieldName, details["filterOperator"] = filterOperator, details["filterValue"] = filterValue,
                details["predicate"] = predicate, details["matchcase"] = matchcase, details["actualFilterValue"] = actualFilterValue;                
                return false;
            }
            var args = {};
            args.requestType = ej.TreeGrid.Actions.Filter;
            args.currentFilterObject = [];           
            if (!Array.isArray(filterOperator))
                filterOperator = $.makeArray(filterOperator);
            if (!Array.isArray(filterValue))
                filterValue = $.makeArray(filterValue);
            var firstLoop = false;
            var filterCol = this._filterCollection;
            if (ej.util.isNullOrUndefined(this._currentFilterColumn))
                this._currentFilterColumn = this.getColumnByField(fieldName);
            for (var index = 0; index < filterOperator.length; index++) {
                    var filterObject = {
                        field: fieldName,
                        operator: filterOperator[index],
                        value: filterValue[index],
                        matchcase: matchcase,
                        predicate: predicate,
                        actualFilterValue: actualFilterValue
                    };
                this._$colType = "string";
                if (filteredColumns.length == 0 && filterObject.value !== "") {
                    if (this._$colType == "date" && (filterOperator == "equal" || filterOperator == "notequal") && typeof (filterObject.value) !== "string")
                        this._setDateFilters(filterObject);
                    else
                        filteredColumns.push(filterObject);
                } else {
                    var proxy = this;
                    if (!firstLoop) {
                        var dataManger = ej.DataManager(filteredColumns);
                        var query = new ej.Query().where("field", ej.FilterOperators.equal, filterObject.field);
                        var object = dataManger.executeLocal(query);
                        for (var i = 0; i < object.length; i++) {
                            var objectIndex = $.inArray(object[i], filteredColumns)
                            if (objectIndex != -1)
                                filteredColumns.splice(objectIndex, 1);
                        }
                    }
                    if (filterObject.value !== "") {
                        if (this._$colType == "date" && (filterOperator == "equal" || filterOperator == "notequal") && typeof (filterObject.value) !== "string")
                            this._setDateFilters(filterObject);
                        else
                            filteredColumns.push(filterObject);
                    }
                }
                firstLoop = true;
                args.currentFilterObject.push(filterObject);
            }
            args.filterCollection = filteredColumns;
            args.currentFilteringColumn = fieldName;
            args.fieldName = fieldName;
            var returnValue = this.processBindings(args);
            if (returnValue) {
                filteredColumns.reverse().splice(0, filterOperator.length);
                filteredColumns.reverse();
            }
            proxy._setFilterFieldValues(filterObject);
        },

        filterContent: function (filterObject) {
            var proxy = this,
                model = proxy.model,
                filteredColumns = model.filterSettings.filteredColumns,
                index;

            if (!(filterObject instanceof ej.Predicate))
                return false;
            var index = filteredColumns.indexOf(filterObject);
            if (index != -1) {
                filteredColumns.splice(index, 1);
            }
            else {
                var predicateArray = [], filterFields = [];
                predicateArray.push(filterObject.toJSON());
                proxy._addPredicateObject(predicateArray, filterFields);
                ej.merge(filteredColumns, filterFields);
            }
            var args = { requestType: "filtering" };
            proxy.processBindings(args);
            proxy._setFilterFieldValues(filterFields);
        },

        _addPredicateObject: function (filterObject, filteredColumns, condition) {
            var length = filterObject.length;

            for (var i = 0; i < length; i++) {
                var predicate = filterObject[i];
                if (predicate.isComplex) {
                    if (!ej.isNullOrUndefined(predicate.predicates))
                        this._addPredicateObject(predicate.predicates, filteredColumns, predicate.condition);
                }
                else {
                    var arg = {};
                    arg.field = predicate.field;
                    arg.operator = predicate.operator;
                    arg.value = predicate.value;
                    arg.matchcase = !predicate.ignoreCase;
                    arg.predicate = condition;

                    filteredColumns.push(arg);
                }
            }
        },

        _setFilterFieldValues: function (filteredField) {
            var proxy = this,
                model = proxy.model,
                filterType = model.filterSettings.filterType,
                column, filterColumns = [], length = 0;

            if (ej.isNullOrUndefined(filteredField.length))
                filterColumns.push(filteredField);
            else
                filterColumns = filteredField;

            length = filterColumns.length;
            for (var i = 0; i < length; i++) {
                var filterObject = filterColumns[i];
                column = proxy.getColumnByField(filterObject.field);
                if (!column)
                    continue;
                if (filterType == "menu" || filterType == "excel") {
                    if (!proxy.model.showColumnChooser) {
                        var $filterIcon = proxy.getHeaderTable().find("div[data-ej-mappingname='" + filterObject.field + "']").next(".e-filtericon");
                        if (filterObject.value.toString() != "" || filterObject.value.toString() == "false")
                            $filterIcon.removeClass("e-column-filter-icon").addClass("e-column-filtered-icon");
                        else
                            $filterIcon.removeClass("e-column-filtered-icon").addClass("e-column-filter-icon");
                    }
                    if (filterType == "menu") {
                        proxy._storePreviousFilteredValue(filterObject.field, filterObject.value, filterObject.operator);
                        proxy._filterString = filterObject.value;
                    }
                    else
                        proxy._filteredColumnValueID.push(filterObject.field);
                }
                else if (filterType == "filterbar") {
                    var filterBarCell = proxy.getHeaderTable().find("#" + proxy._id + "_" + filterObject.field.split('.').join("") + "_filterbarcell");
                    if (column.filterEditType == "numericedit")
                        $(filterBarCell).ejNumericTextbox({ value: filterObject.value });
                    else if (column.filterEditType == "datepicker")
                        $(filterBarCell).ejDatePicker({ value: filterObject.value });
                    else if (column.filterEditType == "datetimepicker")
                        $(filterBarCell).ejDateTimePicker({ value: filterObject.value });
                    else if (column.filterEditType == "dropdownedit")
                        $(filterBarCell).ejDropDownList({ value: filterObject.value });
                    else {
                        if (filterBarCell.val() == "" || (filterBarCell.val() != filterObject.value)) {
                            filterBarCell.val(filterObject.value);
                        }
                    }
                }
            }
        },

        _cellSelectingEventTrigger: function (selectedCellInfo) {
            var proxy = this,
               model = proxy.model,
               args = {}, targetIndex = selectedCellInfo.rowIndex,
               currentCellIndex = selectedCellInfo.cellIndex,
               updatedRecords = proxy.getUpdatedRecords();
            args.data = updatedRecords[targetIndex];
            args.targetRow = selectedCellInfo.rowElement;
            args.targetCell = selectedCellInfo.cellElement;
            args.rowIndex = targetIndex;
            args.cellIndex = currentCellIndex;
            return proxy._trigger('cellSelecting', args);
        },
        _cellSelectedEventTrigger: function (selectedCellInfo, previousSelectedCellDetails) {
            var proxy = this,
                model = proxy.model,
                args = {}, targetIndex = selectedCellInfo.rowIndex,
                currentCellIndex = selectedCellInfo.cellIndex,
                previousRowIndex = previousSelectedCellDetails.rowIndex,
                previousCellIndex = previousSelectedCellDetails.cellIndex,
                updatedRecords = proxy.getUpdatedRecords();

            //previousSelectedCellDetails
            args.PreviousTargetRow = previousSelectedCellDetails.rowElement;
            args.previousTargetCell = previousSelectedCellDetails.cellElement;
            args.previousData = updatedRecords[previousRowIndex];
            args.previousRowIndex = previousRowIndex;
            args.previousCellIndex = previousCellIndex;
            //currentSelectedCellDetails
            args.data = updatedRecords[targetIndex];           
            args.targetRow = selectedCellInfo.rowElement;
            args.targetCell = selectedCellInfo.cellElement;
            args.rowIndex = targetIndex;
            args.cellIndex = currentCellIndex;
            return proxy._trigger('cellSelected', args);
        },

        //ROWSELECTING EVENT METHOD
        _rowSelectingEventTrigger: function (previousIndex, currentIndex, isCheckboxUpdate, actionType) {

            var proxy = this,
                model = proxy.model,
                args = {},
                selectedItem,
                $gridRows,
                updatedRecords = proxy.getUpdatedRecords();
            if (!isCheckboxUpdate)
                isCheckboxUpdate = false;
                args.targetRow = ej.TreeGrid.getRowByIndex(proxy, currentIndex);
                args.previousTreeGridRow = ej.TreeGrid.getRowByIndex(proxy, previousIndex);
                args.data = updatedRecords[currentIndex];
                args.previousData = updatedRecords[previousIndex];
                args.recordIndex = currentIndex;
                args.previousIndex = previousIndex;
                args.actionType = !ej.isNullOrUndefined(actionType) ? actionType : null;
                if (proxy.model.isFromGantt) {
                    args.target = "ejTreeGrid";
                } else {
                    args.isCheckboxUpdate = isCheckboxUpdate;
                }
                var isCancel = proxy._trigger('rowSelecting', args);
				if (isCancel)
                    model.selectedItem = args.data;
                return isCancel;
        },


        //ROWSELECTED EVENT METHOD
        _rowSelectedEventTrigger: function (index, toIndex, isCheckboxUpdate, actionType) {

            var proxy = this, model = proxy.model,
                args = {}, updatedRecords = proxy.getUpdatedRecords();
            var record = $.extend({}, updatedRecords[index]);
            /*Remove childRecords and parentItem from record object, 
              To avoid the cyclic dependency when performing postback action in ASP.NET */
            delete record.childRecords;
            delete record.parentItem;

            args = {
                targetRow: ej.TreeGrid.getRowByIndex(proxy, index),
                recordIndex: index
            };
            args.actionType = !ej.isNullOrUndefined(actionType) ? actionType : null;
            if (!isCheckboxUpdate)
                isCheckboxUpdate = false;
            if (!ej.isNullOrUndefined(toIndex)) args.toIndex = toIndex;
            if (proxy.model.isFromGantt) {
                args.target = "ejTreeGrid";
                args.data = model.updatedRecords[index];
                args.selectedItems = model.selectedItems;
            }
            else {
                args.data = record;
                args.isCheckboxUpdate = isCheckboxUpdate;
            }

                proxy._trigger("rowSelected", args);
        },


        //QUERYCELLINFO,ROWDATABOUND EVENT BINDING FOR TREEGRID
        _eventBindings: function (data) {

            var proxy = this,
                model = proxy.model,
                count = 0,
                row, updatedRecords = proxy.getUpdatedRecords(),
                gridRows = proxy.getRows(),
                length;
            
            if (ej.isNullOrUndefined(data)) {
                length = this._frozenColumnsLength > 0 ? $(gridRows[0]).length : $(gridRows).length;
                data = model.currentViewData;
            }
            else
                length = data.length;
            if (proxy._commandColumnLength > 0) {
                this._refreshUnboundTemplate(this.getContentTable());
            }
            if (model.queryCellInfo != null || model.rowDataBound != null || model.detailsDataBound) {

                for (count; count < length; count++) {
                    var rowIndex = updatedRecords.indexOf(data[count]);
                    row = ej.TreeGrid.getRowByIndex(this, rowIndex);
                    proxy._rowEventTrigger(row,data[count]);
                }
            }
        },

        //ROWDATABOUND EVENT TRIGGER
        _rowEventTrigger: function (row, data) {

            var proxy = this,
                model = this.model;

            if (model.rowDataBound) {
                proxy._trigger("rowDataBound", {
                    rowElement: row,
                    data: data
                });
            }
           
            var tdCells = row.cells,
                $tdRowcells = $(row).find(".e-rowcell"),
                cellIndex = 0,
                length = $tdRowcells.length,
                column=null,
                columns = proxy.model.columns;
            if (model.queryCellInfo) {
                for (cellIndex; cellIndex < length; cellIndex++) {

                    if ($($tdRowcells[cellIndex]).hasClass("e-rowcell")) {
                        column = columns[cellIndex];
                    }

                    if (column) {
                        proxy._cellEventTrigger($tdRowcells[cellIndex], data, column);
                    }
                }
            }

            if (model.detailsDataBound && $(row).next("tr").hasClass("e-detailsrow")) {
                var detailsRowElement = $(row).next("tr");
                if (this._frozenColumnsLength > 0)
                    detailsRowElement = $(detailsRowElement[1]);
                this._trigger("detailsDataBound", { detailsElement: detailsRowElement, data: data });
            }
        },


        //QUERYCELLINFO EVENT TRIGGER
        _cellEventTrigger: function (cell, data, column) {

            var args = {
                cellElement: cell,
                data: data,
                column: column,

            };
            args.cellValue = args.column && this._getCustomCellValue(data, args.column.field);
            this._trigger("queryCellInfo", args);
        },


        //ACTION COMPLETE EVENT TRIGGER
        _completeAction: function (args) {

            var proxy = this,
                model = proxy.model,
                sortcolumns = model.sortSettings.sortedColumns,
                ganttObject = $("#" + proxy._id.replace("ejTreeGrid", "")).data("ejGantt");

            model.isEdit = false;

            if (model.allowPaging && args.requestType != ej.TreeGrid.Actions.Scroll)
                this._refreshGridPager();
            if ((ej.TreeGrid.Actions.Sorting == args.requestType && model.allowSorting)
                || (ej.TreeGrid.Actions.Refresh == args.requestType)) {

                if (model.allowSorting) {

                    if (!proxy._multiSortRequest) {
                        proxy.getHeaderTable().find(".e-columnheader").
                            find(".e-headercelldiv").find(".e-ascending,.e-descending").remove();

                        proxy.getHeaderTable().find("[aria-sort]").removeAttr("aria-sort");
                    }

                    for (var i = 0; i < sortcolumns.length; i++) {
                        proxy._addSortElementToColumn(sortcolumns[i].field, sortcolumns[i].direction);
                    }

                }

                proxy._multiSortRequest = false;
            } else if (ej.TreeGrid.Actions.BeginEdit == args.requestType || ej.TreeGrid.Actions.Add == args.requestType) {

                var $form = $("#" + proxy._id + "EditForm");

                proxy.model.isEdit = true;
                proxy.setWidthToColumns();

                if (ej.TreeGrid.Actions.Add == args.requestType) {

                    $form.find(".e-field:disabled").not(".e-identity").removeAttr("disabled").removeClass("e-disable");

                }

                if ($.isFunction($.validator))
                    this._initValidator();
            }
            else if (model.isFromGantt && args.requestType === ej.TreeGrid.Actions.Scroll)
            {
                proxy._updateCurrentViewData();
            }
            if (model.isFromGantt)
                ganttObject.model.sortSettings = model.sortSettings;
            if ((!proxy._moveRow && model.editSettings.editMode.toLowerCase() != "batchediting") || args.requestType === ej.TreeGrid.Actions.Refresh) proxy._trigger("actionComplete", args);
        },


        //#endregion

        //#region METHOD FOR DATA PROCESSING

        //RENDERING THE DATA
        sendDataRenderingRequest: function (args) {

            var proxy = this, model = this.model,
                temp, data;
            if (proxy.model.currentViewData.length) {

                switch (args.requestType) {

                    case ej.TreeGrid.Actions.Delete:
                    case ej.TreeGrid.Actions.Refresh:
                    case ej.TreeGrid.Actions.Save:
                    case ej.TreeGrid.Actions.Filter:
                    case ej.TreeGrid.Actions.Sorting:
                    case ej.TreeGrid.Actions.Searching:
                    case ej.TreeGrid.Actions.ExpandCollapse:
                    case ej.TreeGrid.Actions.RefreshDataSource:
                    case ej.TreeGrid.Actions.DragAndDrop:
                    case ej.TreeGrid.Actions.Paging:
                    case ej.TreeGrid.Actions.Scroll:
                    case ej.TreeGrid.Actions.RowIndexUpdate:

                        temp = document.createElement('div');
                       

                        if (args.requestType != ej.TreeGrid.Actions.Scroll) {
                            if (this._frozenColumnsLength > 0) {
                                proxy._renderFrozenRecords();

                            }
                            else {
                                proxy.getContentTable().find("colgroup").first().replaceWith(proxy._getMetaColGroup());
                                var $tbody = proxy.getContentTable().children('tbody');
                                $tbody.empty();

                                temp.innerHTML = ['<table>', $.render[proxy._id + "_Template"](proxy.model.currentViewData), '</table>'].join("");

                                proxy.getContentTable().get(0).replaceChild(temp.firstChild.firstChild,
                                    proxy.getContentTable().get(0).lastChild);
                                proxy.setGridRows($(proxy.getContentTable().get(0).rows));
                            }
                        }
                        else {
                            var $tbody = proxy.getContentTable().children('tbody'),
                                                           currentViewData = proxy.model.currentViewData,
                                                           visibleRange = proxy._visibleRange,
                                                           length = this._frozenColumnsLength > 0 ? $($tbody[0]).children("tr:not(.e-detailsrow)").length : $tbody.children("tr:not(.e-detailsrow)").length, isTopToBottom = false;
                            if (currentViewData.length != 0 && $tbody.find(".e-emptyText").length != 0) {
                                $tbody.find(".e-emptyText").remove();
                            }
                            if (proxy._scrollTop > proxy._prevScrollTop) {
                                var removeLength = visibleRange.top - proxy._prevRTop,
                                     addLength = visibleRange.bottom - proxy._prevRBottom,
                                     data;
                                if (addLength >= 0) {
                                    data = addLength ? currentViewData.slice(-addLength) : [];
                                } else {
                                    if (this._frozenColumnsLength > 0) {
                                        $($tbody.get(0)).children(":visible:gt(" + (length + (addLength - 1)) + ")").remove();
                                        $($tbody.get(1)).children(":visible:gt(" + (length + (addLength - 1)) + ")").remove();
                                    } else {
                                        if (model.showDetailsRow && !model.showDetailsRowInfoColumn) {
                                            var childLength = 2 * (length + (addLength - 1));
                                            $tbody.children(":visible:gt(" + childLength + ")").remove();
                                        }
                                        else
                                            $tbody.children(":visible:gt(" + (length + (addLength - 1)) + ")").remove();    
                                    }
                                    data = [];
                                }
                                isTopToBottom = true;
                            }
                            else {
                                var removeLength = length - (proxy._prevRBottom - visibleRange.bottom + 1),
                                      addLength = proxy._prevRTop - visibleRange.top, data;
                                if (addLength >= 0) {
                                    data = currentViewData.slice(0, addLength);
                                } else {
                                    data = [];
                                }
                                removeLength = removeLength >= 0 ? removeLength : (-length - 1);
                                
                                isTopToBottom = false;
                            }                            
                            if (this._frozenColumnsLength > 0) {
                                proxy._renderFrozenRecords(data, addLength, removeLength, isTopToBottom);
                            }
                            else {
                                proxy.getContentTable().find("colgroup").first().replaceWith(proxy._getMetaColGroup());
                                if (isTopToBottom) {
                                    if (model.showDetailsRow && !model.showDetailsRowInfoColumn) {
                                        var childLength = 2 * removeLength;
                                        $tbody.children(":visible:lt(" + childLength + ")").remove();
                                    }
                                    else
                                        $tbody.children(":visible:lt(" + removeLength + ")").remove();
                                    var dataHtml = $.render[proxy._id + "_Template"](data);
                                    $tbody.append(dataHtml);
                                }
                                else {
                                    if (model.showDetailsRow && !model.showDetailsRowInfoColumn) {
                                        var childLength = 2 * removeLength + 1;
                                        $tbody.children(":visible:gt(" + childLength + ")").remove();
                                    }
                                    else
                                        $tbody.children(":visible:gt(" + removeLength + ")").remove();
                                    var dataHtml = $.render[proxy._id + "_Template"](data);
                                    $tbody.prepend(dataHtml);
                                }
                                proxy._gridRows = proxy.getContentTable().find("tr");
                                proxy.setGridRows(proxy._gridRows);
                            }
                        }
                        this._gridRows = this.getContentTable().get(0).rows;
                        if (this._frozenColumnsLength > 0)
                            this._gridRows = [this._gridRows, this.getContentTable().get(1).rows];

                        /* check treee grid rows are append in DOM and Trigger refresh and querycellInfo events */
                        if (proxy._$gridContent && proxy._isRendered){
                            proxy._trigger("refresh");
                            proxy._eventBindings(data);
                            this._hideCollapsedDetailsRows();
                        }
                        break;
                }

            } else {
                if (proxy._frozenColumnsLength > 0) {
                    var $emptyTd = ej.buildTag('td', model.emptyRecordText, {}, { colSpan: this._frozenColumns.length }), doc = document;
                    proxy.getContent().find("#e-frozencontentdiv" + proxy._id + " .e-table tbody").empty().append($(doc.createElement("tr")).addClass("e-emptyText").height(30).append($emptyTd));
                    $emptyTd = ej.buildTag('td', model.emptyRecordText, { visibility: "hidden" }, { colSpan: this._unFrozenColumns.length });
                    proxy.getContent().find("#e-movablecontentdiv" + proxy._id + " .e-table tbody").empty().append($(doc.createElement("tr")).addClass("e-emptyText").height(30).append($emptyTd));
                    if (model.updatedRecords.length == 0)
                        proxy._$gridContainer.find("#e-movablecontentdiv" + proxy._id + ",#e-frozencontentdiv" + proxy._id).css("height", "30px");
                } else {
                    proxy.getContentTable().find('tbody').empty().append(proxy._getEmptyTbody());
                    if (model.updatedRecords.length == 0)
                        proxy._$gridContainer && proxy._$gridContainer.css({ height: "30px" }); // for render no record text
                }
                proxy._gridRows = null;
                proxy.setGridRows(null);

            }

            if (proxy.model.showGridCellTooltip || proxy.model.showGridExpandCellTooltip) {
                proxy._cellMouseLeave();
                proxy._headerMouseLeave();
            }

            if (args.requestType == ej.TreeGrid.Actions.Scroll)
                args.requestType == ej.TreeGrid.Actions.Refresh;

            proxy._completeAction(args);

        },
        _renderFrozenRecords: function (data, addLength, removeLength, isTopToBottom)
        {
            /* Update colgroup of frozen and movable tables while rendering records*/
            this.getContent().find("#e-frozencontentdiv" + this._id + " .e-table colgroup").replaceWith(this._getMetaColGroup()[0]);
            this.getContent().find("#e-movablecontentdiv" + this._id + " .e-table colgroup").replaceWith(this._getMetaColGroup()[1]);
            var $tbody = this.getContentTable().children('tbody'), temp;
            

            if (ej.isNullOrUndefined(data)) {
                $tbody.empty();
                /*Render frozen Table*/
                temp = document.createElement('div');
                temp.innerHTML = ['<table>', $.render[this._id + "_JSONFrozenTemplate"](this.model.currentViewData),
                    '</table>'].join("");
                this.getContentTable().get(0).replaceChild(temp.firstChild.firstChild,
                    this.getContentTable().get(0).lastChild);
                /*Render movable Table*/
                temp = document.createElement('div');
                temp.innerHTML = ['<table>', $.render[this._id + "_Template"](this.model.currentViewData),
                    '</table>'].join("");
                this.getContentTable().get(1).replaceChild(temp.firstChild.firstChild,
                    this.getContentTable().get(1).lastChild);
            }
            else {
                if (isTopToBottom) {
                    if (this.model.showDetailsRow && !this.model.showDetailsRowInfoColumn) {
                        var childLength = 2 * removeLength;
                        $($tbody.get(0)).children(":visible:lt(" + childLength + ")").remove();
                        $($tbody.get(1)).children(":visible:lt(" + childLength + ")").remove();
                    }
                    else {
                        $($tbody.get(0)).children(":visible:lt(" + removeLength + ")").remove();
                        $($tbody.get(1)).children(":visible:lt(" + removeLength + ")").remove();
                    }
                    var frozenHtml = $.render[this._id + "_JSONFrozenTemplate"](data);
                    var moveHtml = $.render[this._id + "_Template"](data);
                    $($tbody.get(0)).append(frozenHtml);
                    $($tbody.get(1)).append(moveHtml);
                }
                else {
                    if (this.model.showDetailsRow && !this.model.showDetailsRowInfoColumn) {
                        var childLength = 2 * removeLength + 1;
                        $($tbody.get(0)).children(":visible:gt(" + childLength + ")").remove();
                        $($tbody.get(1)).children(":visible:gt(" + childLength + ")").remove();
                    }
                    else {
                        $($tbody.get(0)).children(":visible:gt(" + removeLength + ")").remove();
                        $($tbody.get(1)).children(":visible:gt(" + removeLength + ")").remove();
                    }
                    var frozenHtml = $.render[this._id + "_JSONFrozenTemplate"](data);
                    var moveHtml = $.render[this._id + "_Template"](data);
                    $($tbody.get(0)).prepend(frozenHtml);
                    $($tbody.get(1)).prepend(moveHtml);
                }
            }

            this.setGridContentTable(this.getContent().find(".e-table"));
        },

        _renderByFrozenDesign: function () {
            var $div = $(document.createElement('div')), col = this._getMetaColGroup().find("col"), colgroups = {};
            colgroups["colgroup1"] = $div.append(ej.buildTag("colgroup").append(col.splice(0, this._frozenColumnsLength))).html();
            colgroups["colgroup2"] = $div.html(ej.buildTag("colgroup").append(col)).html();
            return $.render[this._id + "_FrozenTemplate"](colgroups);
           
        },
        addFrozenTemplate: function () {
            var template = "<div class='e-frozencontainer' id='e-frozencontainer" + this._id + "' style='overflow:hidden;float:left;'><div class='e-frozencontentdiv' id='e-frozencontentdiv" + this._id + "' style='width:100%;'>"
            + "<table class='e-table e-zerospace' style='width:100%' id='" + this._id + "frozene-table'>{{:colgroup1}}<tbody>"
            + "</tbody></table></div></div>"
            + "<div class='e-movablecontainer' id='e-movablecontainer" + this._id + "'><div class='e-movablecontent' id='e-movablecontent" + this._id + "'><div class='e-movablecontentdiv' id='e-movablecontentdiv" + this._id + "'><table class='e-table e-zerospace' id='" + this._id + "movablee-table'>{{:colgroup2}}<tbody>"
            + "</tbody></table></div></div></div>", templates = {};
            templates[this._id + "_FrozenTemplate"] = template;
            $.templates(templates);
        },
       

        //Public method to change the allowSorting value dynamically.
        sortSetting: function (value) {
            var proxy = this, model = this.model,
                ascendingIcon = $("#" + proxy._id).find(".e-ascending.e-icon"),
                descendingIcon = $("#" + proxy._id).find(".e-descending.e-icon");
            model.allowSorting = value;
            if (!model.allowSorting)
                proxy.clearSorting();
                if (ascendingIcon.length > 0) {
                    for (var length = 0 ; length < ascendingIcon.length; length++) {
                        $(ascendingIcon[length]).css("visibility", "hidden");
                    }
                }                                      
            if (descendingIcon.length > 0)
                for (var length = 0 ; length < descendingIcon.length; length++) {
                    $(descendingIcon[length]).css("visibility", "hidden");
                }
        },
        //Public method to change the treeColumnIndex value dynamically.
        columnIndex:function(value){
            var proxy = this, model = proxy.model,
                value = parseInt(value),
                columns = model.columns;
            if (!isNaN(value) && value >= 0 && value < columns.length && columns[value].visible && !proxy._isCommandColumn(columns[value])) {
                if (!columns[value].nonColumn)
                    model.treeColumnIndex = value;
                else if (columns[value + 1] && columns[value + 1].visible && !proxy._isCommandColumn(columns[value + 1]))
                    model.treeColumnIndex = value + 1;
                else
                    return;
                proxy._addInitTemplate();
                this.renderRecords();
                if (model.showColumnChooser)
                    proxy._renderColumnChooserList(true);
                proxy._updateWrapRowHeights("header", "refreshAll");
            }            
        },


        //SORTING THE DATA BASED ON THE PARTICULAR FIELDS
        
        sortColumn: function (columnName, columnSortDirection) {

            var proxy = this,
                model = proxy.model,
                sortColumns = model.sortSettings.sortedColumns,
                args = {},
                column,
                count = 0,
                length = sortColumns.length;
            /* Cancel edited cell before sort the column*/
            proxy._cancelEditState();
            proxy.clearSelection();
            if (model.isFromGantt)
                column = ej.TreeGrid.getColumnByMappingName(model.columns, columnName);
            if (ej.isNullOrUndefined(column))
                column = this.getColumnByField(columnName);
            if (!model.allowSorting || ej.isNullOrUndefined(column) || column.allowSorting == false) {
                return;
            }

            if (!proxy._multiSortRequest) {
                model.sortSettings.sortedColumns = [];
            }

            args.requestType = ej.TreeGrid.Actions.Sorting;
            args.columnName = columnName;

            // proxy._cSortedColumn = proxy.getFieldNameByHeaderText(columnName);

            proxy._cSortedColumn = columnName;

            proxy._cSortedDirection = args.columnSortDirection = columnSortDirection === undefined ?
                ej.sortOrder.Ascending : columnSortDirection;

            for (count; count < length; count++) {
                
                if (sortColumns[count].field == proxy._cSortedColumn) {
                    sortColumns.splice(count, 1);
                    break;
                }

            }

            model.sortSettings.sortedColumns.push({
                field: proxy._cSortedColumn,
                direction: proxy._cSortedDirection
            });

            var returnValue = proxy.processBindings(args);

            if (returnValue) {

                proxy._cSortedDirection = proxy._cSortedColumn = null;

            }
            if (proxy.selectedRowIndex() >= 0 && proxy._isRendered) {
                proxy.selectedRowIndex(proxy._sortedRecords.indexOf(this.selectedItem()));
            }
            proxy._clearColumnMenu();
            proxy._clearContextMenu();
        },


        //Clear the sorting
        clearSorting: function()
        {
            var proxy = this,
                model = proxy.model;
            model.sortSettings.sortedColumns = [];
            var args = {};
            args.requestType = ej.TreeGrid.Actions.Sorting;
            proxy.processBindings(args);
        },


        //DELETE THE PARTICULAR RECORD AND MULTIPLE RECORD
        deleteRow: function ($tr, isFromContextmenu, index) {

            var proxy = this, model = proxy.model,
                editMode = model.editSettings.editMode.toLowerCase(),
                updatedRecords = proxy.getUpdatedRecords(),
                deletedRows = [];

            if (!model.editSettings.allowDeleting)
                return false;
            if (model.editSettings.showDeleteConfirmDialog && !(proxy._confirmDialog).is(":visible") && editMode != "batchediting") {
                if (!proxy._isEmptyRow) {
                    proxy._isFromContextmenu = isFromContextmenu;
                    proxy._deleteRowIndex = index;
                    proxy._confirmDialog.ejDialog("open");
                    return;
                }
            }
            var args = {};
            args.requestType = ej.TreeGrid.Actions.Delete;
            args.isFromContextmenu = isFromContextmenu;

            if (isFromContextmenu) {
                if (model.isFromGantt)
                    args.data = updatedRecords[index];
                else if (!model.allowSelection && (!ej.isNullOrUndefined(index) && index > -1))
                    args.data = updatedRecords[index];
                else
                    args.data = model.selectionSettings.selectionMode == "row" ? model.selectedItem :
                                    proxy._rowIndexOfLastSelectedCell > -1 ? updatedRecords[proxy._rowIndexOfLastSelectedCell] :
                                        updatedRecords[proxy._emptyRowIndex];

                deletedRows.push(args.data);
                // Delete empty row when save new record
                if (proxy._isEmptyRow) {
                    args.deletedItems = deletedRows;
                    proxy._updateDeleteAction(args);
                    return true;
                }
            }
            else {
                var deletedRows = $.extend([], model.selectedItems);
                args.data = model.selectedItem;
            }
            if (!deletedRows.length) deletedRows.push(args.data);
            args.deletedItems = deletedRows;
            if (editMode == "batchediting") {
                if (proxy._batchSaveCancel == "save") {
                    args.data = {};
                    args.deletedItems = proxy.batchChanges.deleted;
                }
                else if (proxy._batchSaveCancel == "cancel") {
                    args.data = {};
                    args.deletedItems = proxy.batchChanges.added;
                }
                else {
                    for (var d = 0; d < deletedRows.length; d++) {
                        proxy._batchDeleteAction(deletedRows[d]);
                        proxy._updateBatchDeletedRecords(deletedRows[d]);
                    }
                    proxy.clearSelection();
                    proxy._batchEditStarts = true;
                    proxy._cancelSaveTools();
                    return true;
                }                
            }
            if (proxy._trigger("actionBegin", args)) return true;
            else {
                if (proxy._updateAction(args)) {
                    proxy._updateDeleteAction(args);
                }
            }
        },
        _batchDeleteAction: function (data) {
            var proxy = this,
                model = proxy.model,
                updatedRecords = model.allowPaging ? proxy._updatedPageData : model.updatedRecords,
                index = updatedRecords.indexOf(data);
            data.isBatchDelete = true,
            proxy.refreshRow(index);
            if (data.hasChildRecords) {
                var childs = data.childRecords;
                for (var c = 0; c < childs.length; c++)
                    this._batchDeleteAction(childs[c]);
            }
        },
        //To update deleted collection of batch edit
        _updateBatchDeletedRecords: function (deletedRecord) {
            var proxy = this,
                batchChangedGrp = proxy.batchChanges.changed,
                batchAddedGrp = proxy.batchChanges.added;
            if (batchAddedGrp.length > 0 && batchAddedGrp.indexOf(deletedRecord) != -1) {
                batchAddedGrp.splice(batchAddedGrp.indexOf(deletedRecord), 1);
            }
            else if (batchChangedGrp.length > 0 && batchChangedGrp.indexOf(deletedRecord) != -1) {
                batchChangedGrp.splice(batchChangedGrp.indexOf(deletedRecord), 1);
            }
            if (proxy.batchChanges.deleted.indexOf(deletedRecord) == -1)
                proxy.batchChanges.deleted.push(deletedRecord);
        },

        _updateDeleteAction: function (args) {
            var proxy = this, model = proxy.model,
                cArgs = {}, editMode = model.editSettings.editMode.toLowerCase();

            var length = args.deletedItems.length;
            for (var del = 0; del < length; del++) {
                args.data = args.deletedItems[del];
                proxy._selectedCellDetails = [];
                proxy._removeRecords(args);
            }
            if (editMode == "batchediting" && (proxy._batchSaveCancel == "save" || proxy._batchSaveCancel == "cancel")) return true;

            proxy._ensureDataSource(args);
            proxy.updateHeight();
            if (model.currentViewData.length > 0 && model.enableAltRow)
                ej.TreeGrid.updateAltRow(proxy, model.currentViewData[0], 0, 0);

            if (proxy._checkboxSelection) {
                model.selectedCellIndexes = [];
                proxy._prevSelectedItem = null;
                if (!args.isFromContextmenu)
                    model.selectedItems = [];
                model.selectedItem = null;
                proxy.selectedRowIndex(-1);
                proxy.selectAllRows();
            }
            else {
                model.selectedItems = [];
                model.selectedCellIndexes = [];
                model.selectedItem = null;
                proxy.selectedRowIndex(-1);
                proxy._prevSelectedItem = null;
                if (proxy._multiSelectPopup && proxy._multiSelectPopup.is(":visible") && !proxy.model.isFromGantt)
                    proxy._clearMultiSelectPopup();
            }
            if (proxy._isLoadonDemand && model.allowPaging)
                proxy._refreshDataSource();
        },

		//Delete selected records
        _removeRecords: function(args){
            var proxy = this,
                model = proxy.model,
                editMode = model.editSettings.editMode.toLowerCase(),
                isUnassignedTaskUpdate = false,
                dataSource =this.dataSource();
            if (args && (model.editSettings.allowDeleting || args.isDragAndDropDelete) && args.requestType === ej.TreeGrid.Actions.Delete) {
                var deletedRow = args.data,
                    recordIndex, rowindex;

                if (model.isFromGantt && proxy.model.enableWBS) {
                    var dataRows, targetRowIndex, isUpdateWBS = false;
                    if (deletedRow && deletedRow.parentItem) {
                        dataRows = deletedRow.parentItem.childRecords,
                        targetRowIndex = dataRows.indexOf(deletedRow);
                    } else if (model.flatRecords.length) {
                        var flatData = model.flatRecords,
                            Level0 = flatData.filter(function (item) {
                                return item && item.level == 0;
                            });
                        dataRows = Level0;
                        targetRowIndex = dataRows.indexOf(deletedRow);
                    }
                    if (targetRowIndex != dataRows.length - 1)
                        isUpdateWBS = true;
                }

                recordIndex = model.flatRecords.indexOf(deletedRow);
                if (model.viewType == "resourceView") {
                    var eventArgs = { data: args.data };
                    proxy._trigger("updateResource", eventArgs);// update resource values on resour or group delete action in resource view Gantt
                    proxy.dataSource(eventArgs.returnObj.dataSource);
                    proxy._jsonData = eventArgs.returnObj.jsondata;
                    if (eventArgs.returnObj.tasks.length > 0)
                        isUnassignedTaskUpdate = true;
                }
                if (deletedRow.parentItem) {

                    var childRecords = deletedRow.parentItem.childRecords,
                    childIndex;

                    if (childRecords && childRecords.length > 0) {
                        childIndex = childRecords.indexOf(deletedRow);

                        deletedRow.parentItem.childRecords.splice(childIndex, 1);
                        //Update hierarchyRowIndex for level 1 and above records
                        args.updatedHierarchyRowIndexData = [];
                        for (var e = childIndex; e < childRecords.length; e++) {
                            childRecords[e].hierarchyRowIndex = e;
                            if (model.hierarchyRowIndexMapping)
                                childRecords[e].item[model.hierarchyRowIndexMapping] = e;
                            if (!deletedRow.isBatchAdd) {
                                if (editMode != "batchediting")
                                    args.updatedHierarchyRowIndexData.push(childRecords[e]);
                                else
                                    proxy.batchChanges.updatedHierarchyRowIndexData.indexOf(childRecords[e]) == -1 && proxy.batchChanges.updatedHierarchyRowIndexData.push(childRecords[e]);
                            }
                        }
                        //Delete the summary row of one parent after deleted the all child records of the parent
                        if (model.showSummaryRow) {
                            var summaryRowLength = model.summaryRows.length;
                            if (summaryRowLength == childRecords.length) {
                                deletedRow.parentItem.childRecords.splice(0, summaryRowLength);
                                model.flatRecords.splice(recordIndex, summaryRowLength);
                            }
                        }
                        if (!model.parentIdMapping && model.viewType != "resourceView")
                            deletedRow.parentItem.item[model.childMapping].splice(childIndex, 1);
                    }
                }

                if (proxy._checkboxSelection && !args.isDragAndDropDelete) {
                    if (args.isFromContextmenu)
                        proxy._removeChildRecords(model.selectedItems, args.data);
                    else {
                        while (model.selectedItems.length > 0) {
                            proxy._removeChildRecords(model.selectedItems, model.selectedItems[0]);
                        }
                    }
                }

                //Delete from parent collection if item is parent
                var parentIndex = model.parentRecords.indexOf(deletedRow);
                if (parentIndex!== -1)
                {
                    model.parentRecords.splice(parentIndex, 1);
                    //Update hierarchyRowIndex for level 0 records
                    var parentRecords = model.parentRecords;
                    args.updatedHierarchyRowIndexData = [];
                    for (var e = parentIndex; e < parentRecords.length; e++) {
                        parentRecords[e].hierarchyRowIndex = e;
                        if (model.hierarchyRowIndexMapping)
                            parentRecords[e].item[model.hierarchyRowIndexMapping] = e;
                        if (!deletedRow.isBatchAdd) {
                            if (editMode != "batchediting")
                                args.updatedHierarchyRowIndexData.push(parentRecords[e]);
                            else
                                proxy.batchChanges.updatedHierarchyRowIndexData.indexOf(parentRecords[e]) == -1 && proxy.batchChanges.updatedHierarchyRowIndexData.push(parentRecords[e]);
                        }
                    }
                }
                
                if (recordIndex !== -1) {
                    var deletedRecordCount = proxy.getChildCount(deletedRow, 0);
                    model.flatRecords.splice(recordIndex, deletedRecordCount + 1);
                    model.ids && model.ids.splice(recordIndex, deletedRecordCount + 1);
                    if (isUnassignedTaskUpdate) {
                        model.flatRecords.push.apply(model.flatRecords, eventArgs.returnObj.tasks);
                        model.ids && model.ids.push.apply(model.ids, eventArgs.returnObj.ids);
                        model.parentRecords.push.apply(model.parentRecords, eventArgs.returnObj.tasks);
                    }
                    if (model.viewType == "resourceView" && deletedRow.eResourceTaskType == "resourceTask" && deletedRow.parentItem && deletedRow.parentItem.childRecords.length == 0) {
                        var pIndex = model.flatRecords.indexOf(deletedRow.parentItem);
                        model.flatRecords.splice(pIndex, 1);
                        model.ids && model.ids.splice(pIndex, 1);
                        pIndex = model.parentRecords.indexOf(deletedRow.parentItem);
                        if (pIndex != -1)
                            model.parentRecords.splice(pIndex, 1);
                    }
                }
                model.updatedRecords = model.enableVirtualization ? proxy.getExpandedRecords(model.flatRecords) : model.flatRecords.slice();
                proxy.updateCollapsedRecordCount();                                
                
                if (!model.parentIdMapping && model.viewType != "resourceView")
                {
                    if (dataSource instanceof ej.DataManager) {
                        if (dataSource.dataSource.offline && dataSource.dataSource.json) {
                            rowindex = dataSource.dataSource.json.indexOf(deletedRow.item);
                            if (rowindex !== -1)
                                dataSource.dataSource.json.splice(rowindex, 1);
                        }
                        else if (proxy._isDataManagerUpdate) {
                            rowindex = proxy._jsonData.indexOf(deletedRow.item);
                            proxy._jsonData.splice(rowindex, 1);
                        }
                    } else {
                        rowindex = dataSource.indexOf(deletedRow.item);
                        if (rowindex !== -1)
                            dataSource.splice(rowindex, 1);
                    }
                }
                else if (model.viewType != "resourceView")
                {
                    //remove child item
                    if (deletedRow.hasChildRecords && deletedRow.childRecords.length > 0)
                    {
                        proxy._removeChildItem(deletedRow);
                    }
                    //remove deleting item

                    if (dataSource instanceof ej.DataManager) {
                        if (dataSource.dataSource.offline && dataSource.dataSource.json) {
                            var idx = dataSource.dataSource.json.indexOf(deletedRow.item);
                            if (idx !== -1)
                                dataSource.dataSource.json.splice(idx, 1);
                        }
                        else if (proxy._isDataManagerUpdate) {
                            var idx = proxy._jsonData.indexOf(deletedRow.item);
                            if (idx !== -1)
                                proxy._jsonData.splice(idx, 1);
                        }
                    }
                    else
                    {
                        var idx = dataSource.indexOf(deletedRow.item);
                        if (idx !== -1)
                            dataSource.splice(idx, 1);
                    }
                }
                
                if (deletedRow.parentItem)
                    if (deletedRow.parentItem.childRecords && deletedRow.parentItem.childRecords.length == 0) {
                        deletedRow.parentItem.expanded = false;
                        deletedRow.parentItem.hasChildRecords = false;
                        deletedRow.parentItem.hasFilteredChildRecords = true;
                        if (model.isFromGantt) {
                            var ganttObject = $("#" + proxy._id.replace("ejTreeGrid", "")).data("ejGantt");
                            deletedRow.parentItem._updateWorkWithDuration(ganttObject);
                        }
                    }
                //Update the summary and total summary row after deleted a record.
                if (model.showSummaryRow)
                    proxy._updateSummaryRow(args);
                if (model.showTotalSummary)
                    proxy._updateTotalSummaryRow(args);

                if (isUpdateWBS) {
                    var targetRow;
                    if (deletedRow.parentItem)
                        targetRow = dataRows[targetRowIndex];//Here we are having the updated 'dataRows'
                    else {
                        //for level 0 records
                        dataRows.splice(targetRowIndex, 1);
                        targetRow = dataRows[targetRowIndex];
                    }
                    proxy.updateWBSdetails(targetRow);
                }
                if (model.isFromGantt) {
                    proxy.updateSerialNumber(recordIndex);
                    model.enableSerialNumber && proxy.updateSerialNumberPredecessors(recordIndex);
                }
            }
        },
        /* To update serial number predecessor for target records */
        updateSerialNumberPredecessors: function (index) {
            if (index == -1) return;
            var proxy = this, model = proxy.model,
                flatDatas = model.flatRecords, dataLength = flatDatas.length,
                targetRecords, idCollection = [];            
            for (var i = index; i < dataLength; i++) {
                if (flatDatas[i].predecessor) {
                    var linkSet = flatDatas[i].predecessor, taskId = flatDatas[i].taskId;
                    for (var s = 0; s < linkSet.length; s++) {
                        if (linkSet[s].to) {
                            var toId = +linkSet[s].to != taskId ? +linkSet[s].to : null;
                            (toId && idCollection.indexOf(toId) == -1) && idCollection.push(toId);
                        }
                    }
                }
            }
            if (idCollection.length) {
                targetRecords = flatDatas.filter(function (record) {
                    if (idCollection.indexOf(record.taskId) > -1)
                        return record;
                });
                var tlength = targetRecords.length;
                for (var t = 0; t < tlength; t++) {
                    var targetRecord = targetRecords[t];
                    proxy.predecessorToSerialPredecessor(targetRecord);
                }
            }            
        },
        /*Changing Predecessor to Serial number predecessor*/
        predecessorToSerialPredecessor: function (tRecord) {
            var proxy = this, model = proxy.model,
                flatDatas = model.flatRecords,
                ganttObject = $("#" + proxy._id.replace("ejTreeGrid", "")).data("ejGantt"),
                prdcList = tRecord["predecessorsName"] ? tRecord["predecessorsName"].split(',') : [],
                snoPred = null, pr, values;
            for (var p = 0; p < prdcList.length; p++) {
                pr = prdcList[p];
                values = pr.split('+');
                if (pr.indexOf('-') >= 0)
                    values = pr.split('-');
                var ref = values[0].match(/(\d+|[A-z]+)/g);
                if (ref && ref.length) {
                    var refId = +ref[0], refType = ref[1], refRecord;
                    refRecord = flatDatas.filter(function (record) {
                        return record && record.taskId == refId;
                    });
                    var newOne = refRecord[0] && refRecord[0]["serialNumber"] + refType + (values[1] ? "+" + values[1] : "");
                    if (newOne)
                        snoPred = snoPred ? (snoPred + "," + newOne) : newOne;
                }
            }
            tRecord["serialNumberPredecessor"] = snoPred;
            tRecord["item"]["serialNumberPredecessor"] = snoPred;
            ganttObject.refreshGanttRecord(tRecord);
        },        
        /*Update the WBS value of all the records that are below the newly added row*/
        updateWBSdetails: function (delTargetRow) {
            var proxy = this,
                model = proxy.model,
                dataW = delTargetRow,
                newWBS = dataW["WBS"];

            //Updating the WBS value of other records that are below the newly added row
            var childItems, markedIndex, markedRecords, dataS, dataLength;
            if (dataW.parentItem) {
                childItems = dataW.parentItem.childRecords;
                markedIndex = childItems.indexOf(dataW);
                dataS = childItems;
                dataLength = dataS.length;
            } else if (model.flatRecords.length) {
                var flatData = model.flatRecords,
                    Level0 = flatData.filter(function (item) {
                        return item && item.level == 0;
                    });
                dataS = Level0;
                markedIndex = dataS.indexOf(dataW);
                dataLength = dataS.length;
            }
            markedRecords = dataS.slice(markedIndex, dataLength);
            if (markedRecords.length) {
                var lastVal = newWBS.lastIndexOf('.') != -1 ? parseInt(newWBS.substr(newWBS.lastIndexOf('.') + 1)) : parseInt(newWBS),
                    parentVal = dataW.parentItem ? dataW.parentItem.WBS : null;
                lastVal--;
                proxy.reCalculateWBS(markedRecords, lastVal, parentVal);
            }
        },

        /* To recalculate the WBS value */
        reCalculateWBS: function (selectedRecords, lastDigit, parentWBS) {
            var proxy = this, model = proxy.model,
                cViewData = model.currentViewData, final,
                ganttObject = $("#" + proxy._id.replace("ejTreeGrid", "")).data("ejGantt"),
                previousVaue = "";

            if (parentWBS) {
                for (var i = 0; i < selectedRecords.length; i++) {
                    final = lastDigit + i;
                    previousVaue = selectedRecords[i]["WBS"];
                    selectedRecords[i]["WBS"] = parentWBS + "." + final;
                    selectedRecords[i]["item"]["WBS"] = parentWBS + "." + final;
                    if (model.enableWBSPredecessor)
                        proxy._getPredecessorIds(selectedRecords[i]);
                    if (previousVaue != selectedRecords[i]["WBS"])
                        ganttObject.refreshGanttRecord(selectedRecords[i]);
                    if (selectedRecords[i].hasChildRecords)
                        proxy._updateChildWBS(selectedRecords[i])
                }
            }
            else {
                for (var i = 0; i < selectedRecords.length; i++) {
                    final = (lastDigit + i).toString();
                    previousVaue = selectedRecords[i]["WBS"];
                    selectedRecords[i]["WBS"] = final;
                    selectedRecords[i]["item"]["WBS"] = final;
                    if (model.enableWBSPredecessor)
                        proxy._getPredecessorIds(selectedRecords[i]);
                    if (previousVaue != selectedRecords[i]["WBS"])
                        ganttObject.refreshGanttRecord(selectedRecords[i]);
                    if (selectedRecords[i].hasChildRecords)
                        proxy._updateChildWBS(selectedRecords[i])
                }
            }
        },

        _updateChildWBS: function (parentRecord) {
            var proxy = this, model = proxy.model,
                cViewData = model.currentViewData,
                childRecs = parentRecord.childRecords,
                pWBS = parentRecord["WBS"],
                ganttObject = $("#" + proxy._id.replace("ejTreeGrid", "")).data("ejGantt"),
                previousValue = "";
            for (var c = 0; c < childRecs.length; c++) {
                previousValue = childRecs[c]["WBS"];
                childRecs[c]["WBS"] = pWBS + "." + (c + 1);
                childRecs[c]["item"]["WBS"] = pWBS + "." + (c + 1);
                if (model.enableWBSPredecessor)
                    proxy._getPredecessorIds(childRecs[c]);
                if (previousValue != childRecs[c]["WBS"])
                    ganttObject.refreshGanttRecord(childRecs[c]);
                if (childRecs[c].hasChildRecords) {
                    proxy._updateChildWBS(childRecs[c]);
                }
            }
        },

        /*Get all the predecessor rows that are matching the taskId*/
        _getPredecessorIds: function (pData) {
            var proxy = this,
                model = proxy.model,
                dataTID = pData.taskId,
                flatDatas = model.flatRecords,
                updatedRecs = model.updatedRecords,
                targetRecords = flatDatas.filter(function (item) {
                    if (item["predecessorsName"]) {
                        var prdcList = item["predecessorsName"].split(',');
                        for (var p = 0; p < prdcList.length; p++) {
                            var ref = prdcList[p].match(/(\d+|[A-z]+)/g),
                                refId = +ref[0];
                            if (refId == dataTID)
                                return item;
                        }
                    }
                });
            for (var t = 0; t < targetRecords.length; t++) {
                proxy.updateWBSPredecessor(targetRecords[t]);
                proxy.refreshRow(updatedRecs.indexOf(targetRecords[t]));
            }
        },

        //To update Serial number
        updateSerialNumber: function (index) {
            if (index == -1) return;
            var proxy = this, model = proxy.model,
                flatRecords = model.flatRecords,
                isSerialUpdate = true,
                ganttObject = $("#" + proxy._id.replace("ejTreeGrid", "")).data("ejGantt");
            for (var i = index; i < flatRecords.length; i++) {
                var record = flatRecords[i];
                record.serialNumber = i + 1;
                record.item["serialNumber"] = i + 1;
                ganttObject.refreshGanttRecord(record,null,isSerialUpdate);
            }
        },

        //SEARCH THE TASK FROM TREE GRID CONTROL

        

        search: function (searchString) {

            var proxy = this,
                args = {},
                searchSettings = proxy.model.searchSettings;
            if (!proxy.model.allowSearching) return;
            args.requestType = ej.TreeGrid.Actions.Searching;
            args.keyValue = searchString;

            proxy._searchString = searchString;
            if (searchString != "") {
                searchSettings.key = searchString.toLowerCase() == this.localizedLabels.trueText.toLowerCase() ? "true" : searchString.toLowerCase() == this.localizedLabels.falseText.toLowerCase() ? "false" : searchString;
                searchSettings.fields = this.model.searchSettings.fields.length != 0 ? this.model.searchSettings.fields : this.getColumnFieldNames();
            }
            else
            {
                searchSettings.key = "";
                searchSettings.fields = [];
            }
            proxy.processBindings(args);
        },

        //SEND SAVE REQUEST
        endEdit: function () {

            var proxy = this, model = proxy.model;

            if (proxy.model.editSettings.editMode.toLowerCase() == "cellediting" && !proxy._isRowEdit) {
                if (!this.editFormValidate())
                    return true;
                return proxy.saveCell();
            } else if (proxy.model.editSettings.editMode.toLowerCase() == "dialogediting" || (model.editSettings.editMode.toLowerCase() == "batchediting" && model.editSettings.batchEditSettings.editMode == "dialog")) {
                return proxy.saveRow();
            }

            return true;

        },
        updateReadOnly:function(bool){
            var proxy=this;
            proxy.model.readOnly = bool;           
           
        },
        updateShowGridExpandCellTooltip: function (bool) {
            var proxy = this;
            proxy.model.showGridExpandCellTooltip = bool;
            proxy.refreshContent();
        },
        updateShowGridCellTooltip: function (bool) {
            var proxy = this;
            proxy.model.showGridCellTooltip = bool;
            proxy.refreshContent();
        },

        //#endregion

        //#region PUBLIC METHODS

        //CALCULATE THE VISIBLE RANGE OF RECORDS TO DISPLAYED IN CURRENT VIEWPORT
        getVisibleRange: function (type) {

            var proxy = this,
                model = this.model,
                calcHeight = (model.rowHeight + proxy._detailsRowHeight),
                topIndex, bottomIndex, top, coeff, testWrapRow,
                updatedRecords = (proxy._isHierarchyFiltering && proxy.model.enableVirtualization) ? proxy._updateFilterParent : proxy.getUpdatedRecords();
            if (model.sizeSettings.height == "auto") {
                proxy._viewPortHeight = proxy._getViewPortHeight();
                if (proxy._viewPortHeight != 0) {
                    proxy._visibleRange = {
                        top: 0,
                        bottom: proxy.getExpandedRecords(proxy.getUpdatedRecords()).length
                    };
                    return
                }
            }
            if (model.allowTextWrap) {
                testWrapRow = proxy._getVisibleTextWrapRows(proxy._scrollTop);
                top = testWrapRow.top;
                if (type == "scroll" && proxy._scrollTop > proxy._prevScrollTop) {
                    testWrapRow.bottom = testWrapRow.bottom + 4;
                }
                bottomIndex = testWrapRow.bottom;
                proxy._offset = testWrapRow.offSet;
            } else if (model.viewType == "resourceView") {
                var range = this._getVisibleRangeForResourceGantt(proxy._scrollTop);
                top = range.top;
                bottomIndex = range.bottom;
                proxy._offset = range.topOffset;
            }
            else {
                top = proxy._scrollTop / calcHeight;
                bottomIndex = proxy._getRowPosition(proxy._scrollTop + proxy._viewPortHeight);
                coeff = top - Math.floor(top);
                proxy._offset = coeff * calcHeight;
            }
            topIndex = Math.floor(top);
                topIndex = Math.max(0, topIndex);
                bottomIndex = Math.min(updatedRecords.length, bottomIndex);

                proxy._visibleRange = {
                    top: topIndex,
                    bottom: bottomIndex
                };

            return proxy._visibleRange;

        },
        /*calculate visible range for resource view gantt*/
        _getVisibleRangeForResourceGantt: function (scrollTop) {
            var returnObj = {},
                model = this.model, height = 0,
                bottomPos = scrollTop + this._viewPortHeight,
                rowHeight = 0, argsTop = scrollTop,
                topIndex, topOffset, bottomIndex,
                records = model.updatedRecords;
            for (var i = 0; i < records.length; i++) {
                rowHeight = this._getTemplateRowHeight(records[i]);
                if (argsTop == 0 && ej.isNullOrUndefined(topIndex)) {
                    topIndex = 0;
                    topOffset = 0;
                    scrollTop * -1;
                }
                else if (scrollTop < 0 && ej.isNullOrUndefined(topIndex)) {
                    topIndex = i - 1;
                    topOffset = this._getTemplateRowHeight(records[topIndex]) - (scrollTop * -1)
                }
                if (bottomPos <= 0 && ej.isNullOrUndefined(bottomIndex)) {
                    bottomIndex = i;
                }
                scrollTop -= rowHeight;
                bottomPos -= rowHeight;
                if (!ej.isNullOrUndefined(topIndex) && !ej.isNullOrUndefined(bottomIndex))
                    break;
            }
            returnObj.top = topIndex;
            returnObj.topOffset = topOffset;
            returnObj.bottom = ej.isNullOrUndefined(bottomIndex) ? records.length : bottomIndex;;
            return returnObj;
        },
        //get the index of visible top row and bottom row.
        _getVisibleTextWrapRows: function (scrollTop) {
            var proxy = this, model = this.model, length = 0, offSet = 0, top = 0, topFlag = true, updateHeight = 0, bottomFlag = true,
                textWrapRow = {}, bottom = 0, updatedRecord, start = 0, height = 0;
            if (model.allowPaging) {
                updatedRecord = proxy._updatedPageData;
                length = proxy._updatedPageData.length;
            } else {
                updatedRecord = model.updatedRecords;
                length = updatedRecord.length;
            }
            for (var x = start; x < length; x++) {
                updateHeight = updateHeight + updatedRecord[x].textWrapRowHeight;
                if (model.detailsTemplate && !model.showDetailsRowInfoColumn) {
                    if (!updatedRecord[x].isSummaryRow)
                        updateHeight = updateHeight + proxy._detailsRowHeight;
                }
                if ((updateHeight) >= scrollTop && topFlag) {
                    top = x;
                    offSet = parseInt(scrollTop) - parseInt(updateHeight - updatedRecord[x].textWrapRowHeight);
                    topFlag = !topFlag;
                }
                if (!topFlag) {
                    height = height + updatedRecord[x].textWrapRowHeight;
                }
                if (((updateHeight) >= (scrollTop + proxy._viewPortHeight) && bottomFlag) || (bottomFlag && x == (updatedRecord.length - 1))) {
                    bottom = x + 1;
                    bottomFlag = !bottomFlag;
                    break;
                }                                                                            
            }
            if (height < proxy._viewPortHeight) {
                if (parseInt(((proxy._viewPortHeight - height) / model.rowHeight)) > 0) {
                    top = top - parseInt(((proxy._viewPortHeight - height) / model.rowHeight));
                } else {
                    top = top - 1;
                }
            }
            textWrapRow = {
                top: top,
                offSet: offSet,
                bottom: bottom,
            };
            return textWrapRow;
        },

        //get the average height and the total height of text wrap rows.
        _getAvgTextWrapRowHeight: function (type, rowIndex) {
            var textWrapRow = {};
            if (this.getRows().length > 0) {
            var proxy = this, model = this.model, length = 0, recordIndex = 0, index = 0, isEnd = false,
            height = 0, currentViewData = model.currentViewData,updatedRecord, $gridRows;
            if (!model.allowPaging) {
                updatedRecord = model.updatedRecords;
            } else if (model.allowPaging) {
                updatedRecord = proxy._updatedPageData;
            }
            if ($("#" + proxy._id).find(".e-frozencontainer").length > 0) {
                if (model.showDetailsRow && model.detailsTemplate && !model.showDetailsRowInfoColumn)
                    $gridRows = proxy.getTreeGridRows()[0];
                else
                    $gridRows = proxy.getRows()[0];
            } else {
                if (model.showDetailsRow && model.detailsTemplate && !model.showDetailsRowInfoColumn)
                    $gridRows = proxy.getTreeGridRows();
                else
                    $gridRows = proxy.getRows();
            }
            if (type == "updateHeight" && ej.isNullOrUndefined(rowIndex)) {
                length = updatedRecord.length;
            } else if (type == "updateHeight" && !ej.isNullOrUndefined(rowIndex)) {
                length = rowIndex;
            } else {
                length = $gridRows.length;
            }
            if ($gridRows.length > 0) {
                for (var x = 0; x < length; x++) {
                    if (type == "getAvgHeight") {
                        index = proxy.getIndexByRow($gridRows[x]);
                        if (currentViewData[index]) {
                            if (currentViewData[index].textWrapRowHeight != $($gridRows[x]).height() && $($gridRows[x]).height() >= model.rowHeight)
                                currentViewData[index].textWrapRowHeight = $($gridRows[x]).height();
                            recordIndex = updatedRecord.indexOf(currentViewData[index]);
                            if (recordIndex > (updatedRecord.length - 5) && !proxy._textWrapNoCalculate) {
                                isEnd = true;
                            }
                        }
                        height = height + $($gridRows[x]).height();
                    } else if (type == "updateHeight") {
                        height = height + updatedRecord[x].textWrapRowHeight;
                    }
                }
            }
            if (type == "getAvgHeight") {
                height = height / length;
                textWrapRow = {
                    avgHeight: height,
                    isEnd: isEnd,
                };
            } else {
                textWrapRow = {
                    height: height,
                };
            }
            } else {
                textWrapRow = {
                    avgHeight: this.model.rowHeight,
                    isEnd: true,
                    height: this.model.rowHeight,
                };
            }
            return textWrapRow;
        },

        /* set width to frozen and movable header columns to prevent
        improper view port height calculation while load time*/
        _setWidthToHeaders: function ()
        {
            var width = this._gridWidth;
            if (this._frozenColumnsLength > 0) {
                var totalWidth = 0, frozenWidth, headerColumns = this.getHeaderContent().find('.e-headercell');
                for (var i = 0; i < this.columnsWidthCollection.length; i++) {
                    totalWidth += this.columnsWidthCollection[i];
                    if (this._frozenColumnsLength - 1 == i)
                        frozenWidth = Math.ceil(totalWidth);
                    if (this.model.headerTextOverflow) {
                        $(headerColumns[i]).css({ "width": this.columnsWidthCollection[i] + "px" });
                    }
                }
                this.getHeaderContent().find("#e-frozenheaderdiv" + this._id).width(width).next().css("margin-left", frozenWidth + "px");
                this.getHeaderContent().find("#e-frozenheaderdiv" + this._id).outerWidth(frozenWidth)
                    .end().find("#e-movableheaderdiv" + this._id).css("width", "100%");
            }
        },
        //SET THE COLUMNWIDTH TO EACH COLUMN IN TREEGRID
        setWidthToColumns: function () {

            var proxy = this,
                model = proxy.model,
                $cols1 = proxy.getContentTable().children("colgroup").find("col"),
                $cols2 = proxy.getHeaderTable().children("colgroup").find("col"),
                width = proxy._gridWidth,
                colCount = model.columns.length;

            for (var i = 0; i < $cols2.length; i++) {

                if (!ej.isNullOrUndefined(proxy.columnsWidthCollection[i])) {

                    $cols1.eq(i).width(proxy.columnsWidthCollection[i]);
                    $cols2.eq(i).width(proxy.columnsWidthCollection[i]);
                    }
            }
            /* width fro details col group cell */
            if (!model.isFromGantt) {
                if ($cols1.length > colCount) {
                    $cols1.eq(colCount).width(proxy._detailsColumnWidth);
                }

                if ($cols2.length > colCount) {
                    $cols2.eq(colCount).width(proxy._detailsColumnWidth);
                }
            }

            /* Update column width in total summary table*/
            if (model.showTotalSummary && this._$totalSummaryRowContainer) {
                var gridheaderCol = $(this.getHeaderTable()).find('colgroup');
                var footerColClone = $(gridheaderCol).clone();
                if (this._frozenColumnsLength > 0) {
                    if (this._$footertableContent) {
                        $(this._$footertableContent).find('colgroup').remove();
                        $(footerColClone[0]).prependTo(this._$footertableContent[0]);
                        $(footerColClone[1]).prependTo(this._$footertableContent[1]);
                    }
                }
                else {
                    if (this._$footertableContent) {
                        $(this._$footertableContent).find('colgroup').remove();
                        $(footerColClone).prependTo(this._$footertableContent);
                    }
                }
            }

            if (this._frozenColumnsLength > 0) {
                var frozenWidth = this._getFrozenColumnWidth();
                if (frozenWidth < this._gridWidth) {
                    this.getContent().find("#e-movablecontainer" + this._id).css("margin-left", frozenWidth + "px");
                    this.getContent().find("#e-frozencontainer" + this._id).outerWidth(frozenWidth);
                    if (this.getScrollElement().data("ejScroller")) {
                        this.getScrollElement().ejScroller("option", "width", this._gridWidth - frozenWidth - this._totalBorderWidth - 1);
                        this.getScrollElement().ejScroller("option", "scrollTop", proxy._scrollTop);
                        this.getScrollElement().ejScroller("option", "scrollLeft", proxy._scrollLeft);
                    }
                    this.getHeaderContent().find("#e-frozenheaderdiv" + this._id).next().css("margin-left", frozenWidth + "px");
                    this.getHeaderContent().find("#e-frozenheaderdiv" + this._id).outerWidth(frozenWidth)
                        .end().find("#e-movableheaderdiv" + this._id).css("width", "100%");
                    if (this._$totalSummaryRowContainer) {
                        this._$totalSummaryRowContainer.find("#e-frozenfooterdiv" + this._id).width(width).next().css("margin-left", frozenWidth + "px");
                        this._$totalSummaryRowContainer.find("#e-frozenfooterdiv" + this._id).outerWidth(frozenWidth)
                            .end().find("#e-movablefooterdiv" + this._id).css("width", "100%");
                        if (!this.mobileDevice() && this.getBrowserDetails().browser == "safari")
                            this._$totalSummaryRowContainer.find("#e-movablefooter" + this._id).css("margin-left", "auto");
                    }
                    if (!this.mobileDevice() && this.getBrowserDetails().browser == "safari")
                        this.getHeaderContent().find("#e-movableheader" + this._id).add(this.getContent().find("#e-movablecontainer" + this._id)).css("margin-left", "auto");
                }
            }
            if (model.columnResizeSettings.columnResizeMode == ej.TreeGrid.ColumnResizeMode.FixedColumns && !model.isFromGantt)
                this._updateTableWidth();
        },
        //Set width for table according to column resize mode
        _updateTableWidth: function (isUpdateCssOnly) {
            var totWidth = 0, $headerTable, $contentTable, $totalSummaryTable,
                model = this.model, frozenColumnWidth = this._getFrozenColumnWidth(),
                columnLength = model.columns.length;
            for (var i = 0; i < columnLength; i++) {
                if (model.columns[i].isFrozen || model.columns[i].visible != false)
                    totWidth += model.columns[i].width;
            }
            if (this._frozenColumnsLength > 0) {
                totWidth -= frozenColumnWidth;
                $headerTable = $(this.getHeaderTable()[1]);
                $contentTable = $(this.getContentTable()[1]);
                $totalSummaryTable = model.showTotalSummary ? $(this._$footertableContent[1]) : null;
            } else {
                $headerTable = this.getHeaderTable();
                $contentTable = this.getContentTable();
                $totalSummaryTable = model.showTotalSummary ? $(this._$footertableContent[0]) : null;
            }
            if (model.showDetailsRow && model.showDetailsRowInfoColumn && model.detailsTemplate)
                totWidth += this._detailsColumnWidth; // 35 denoted detail row icon column
            //when window resize no need to update the table width values
            if (!isUpdateCssOnly) {
                $headerTable.width(totWidth);
                $contentTable.width(totWidth);
                $totalSummaryTable && $totalSummaryTable.width(totWidth);
            }
            if (totWidth < (this._gridWidth - frozenColumnWidth) && model.columns[columnLength - 1].visible) {
                $headerTable.addClass('e-tableLastCell');
                if (model.currentViewData.length > 0) {
                    $contentTable.addClass('e-tableLastCell');
                }
                else
                    $contentTable.removeClass('e-tableLastCell');
                $contentTable.addClass('e-fixed-border');
             //   $totalSummaryTable && $totalSummaryTable.addClass('e-tableLastCell');
            } else {
                $headerTable.removeClass('e-tableLastCell');
                $contentTable.removeClass('e-tableLastCell');
                $contentTable.removeClass('e-fixed-border');
              //  $totalSummaryTable && $totalSummaryTable.removeClass('e-tableLastCell');
            }
        },
        _convertHtml: function (text) {
            return text
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        },

        //ENTER EDIT MODE INTO THE TREEGRID CELL
        cellEdit: function (index, fieldName) {

            var proxy = this,
                $form,
                model = proxy.model,
                row, rowIndex = index,
                updatedRecords = proxy.getUpdatedRecords(), selectedItem;
            if (model.allowSelection == true) {
                selectedItem = model.selectionSettings.selectionMode == "row" ? this.selectedItem() : updatedRecords[proxy._rowIndexOfLastSelectedCell];
            }
            else {
                selectedItem = this.selectedItem();
            }
            if (proxy.model.showGridCellTooltip) {
                proxy._cellMouseLeave();
            }

            proxy.model.isEdit && proxy.saveCell();

            $form = $("#" + proxy._id + "EditForm");

            if ($form.length > 0) return true;

            if (!selectedItem) return false;

            if (model.isFromGantt && selectedItem.hasChildRecords) {
                if (fieldName === "status" ||
                (fieldName === "startDate" && selectedItem.isAutoSchedule) ||
                (fieldName === "endDate" && selectedItem.isAutoSchedule) ||
                (fieldName === "duration" && selectedItem.isAutoSchedule) ||
                 fieldName === "work" || fieldName === "effortDriven" || fieldName === "taskType" ||
                 fieldName === "predecessor" ||
                 fieldName === "taskId")
                    return false;
            }
            if (model.isFromGantt) {
                if (selectedItem.isAutoSchedule && selectedItem.taskType == "fixedWork" && fieldName == "effortDriven")
                    return false;
                if (!selectedItem.isAutoSchedule && (fieldName == "taskType" || fieldName == "effortDriven"))
                    return false;
            }
            if (model.enableVirtualization || model.selectionSettings.selectionMode === "cell" ) {
                rowIndex = updatedRecords.indexOf(selectedItem);
                index = model.currentViewData.indexOf(selectedItem);
            }

            row = ej.TreeGrid.getRowByIndex(this, rowIndex);
            if (row && $(row).find(".e-rowcell").length > 0) {
                var $targetTr = $(row),
                columnIndex = proxy.getColumnIndexByField(fieldName),
                $targetTd = $targetTr.find(".e-rowcell").eq(columnIndex),
                column = proxy.model.columns[columnIndex],
                data = selectedItem,
                cellValue = proxy._getCustomCellValue(data, column.field),
                beginEditArgs = {},
                args = {
                    validationRules: ej.isNullOrUndefined(column.validationRules) ? {} : $.extend(true, {},
                        column.validationRules),
                    columnName: column.field,
                    value: !ej.isNullOrUndefined(cellValue) ? cellValue : ej.isNullOrUndefined(data.item[fieldName]) ? null : data.item[fieldName],
                    data: data,
                    columnObject: column,
                    cell: $targetTd
                },
                isEditable = true;
                if (column.field == "notesText") {
                    args.value = !ej.isNullOrUndefined(data[fieldName]) ? data[fieldName] : data.item && data.item[fieldName];
                    args.value = args.value ? proxy._convertHtml(args.value) : args.value;
                }
                else {
                    args.value = !ej.isNullOrUndefined(cellValue) ? cellValue : ej.isNullOrUndefined(data.item[fieldName]) ? null : data.item[fieldName];
                }
            if (model.isFromGantt && args.columnName === "predecessor") {

                var predecessor = args.data.item[proxy.model.predecessorMapping];
                args.value = predecessor ? predecessor : "";

            }
            if (model.isFromGantt && args.columnName === "taskMode") {
                var taskModeValue = !args.data.isAutoSchedule;
                args.value = taskModeValue;
            }

            beginEditArgs.data = data;
            beginEditArgs.columnIndex = columnIndex;
            beginEditArgs.rowElement = $targetTr;
            beginEditArgs.cellElement = $targetTd;

          

            proxy._cellEventTrigger($targetTd, data, args.columnObject);

                if (proxy._trigger("beginEdit", beginEditArgs)) return false;               

                if ($targetTr.hasClass("e-insertedrow") && (!args.columnObject.isTemplateColumn)) isEditable = true;

                if (isEditable) {

                    $.extend(proxy._cellEditingDetails, {
                        rowIndex: index,
                        cellValue: args.value,
                        columnIndex: columnIndex,
                        fieldName: fieldName,
                        cellEditType: args.columnObject.editType,
                        data: data
                    });
                }
                args.columnIndex = columnIndex;
                proxy._renderCellEditObject(args, $targetTd);
                $targetTr.addClass("e-editedrow");
                args.cell && args.cell.addClass("e-editedcell");
                proxy._updateHorizontalScrollBar(fieldName);
                proxy._updateWrapRowHeights("total,header", null, proxy._cellEditingDetails.rowIndex, "cellEdit");
                return true;
            }
        },

        _updateHorizontalScrollBar: function (fieldName)
        {
            var proxy = this,
                gridContent = proxy.getScrollElement(),
                isHorizontalScroll = gridContent.ejScroller("isHScroll");
            //Check if the horizontal scrollbar is exists or not
            if (isHorizontalScroll) {
                var model = proxy.model,
                columns = model.columns,
                columnLength = columns.length,
                columnIndex = proxy.getColumnIndexByField(fieldName),                
                width = 0, startWidth = 0,
                endWidth = 0, left = 0,
                viewPortWidth = gridContent.find(".e-content").width(),
                scrollLeft = gridContent.ejScroller("option", "scrollLeft"),
                form = $("#" + proxy._id + "EditForm"), row,
                cells=[];                
                if (model.selectionSettings.selectionMode == "cell" && form.length == 0)
                    cells = $("#" + proxy._id).find(".e-selectingcell");//$(proxy._selectedCellDetails[proxy._selectedCellDetails.length - 1].cellElement).clone();
                else {
                    row = $(form).closest("tr.e-treegridrows");
                    cells = $(row).find("td.e-rowcell");
                }
                if (proxy._frozenColumnsLength > 0 && columnIndex < proxy._frozenColumnsLength)
                    return false;

                //Calculate the start and end width for edited cell
                for (var index = proxy._frozenColumnsLength; index <= columnIndex; index++) {
                    if (model.selectionSettings.selectionMode == "cell" && form.length == 0)
                        var cell = cells[cells.length - 1];
                    else
                        var cell = $(cells[index - proxy._frozenColumnsLength]);
                    if (index == columnIndex) {
                        startWidth = width;
                        endWidth = width + $(cell).width() + parseFloat($(cell).css("padding-left")) + parseFloat($(cell).css("padding-right")) + 1; // 1 for border
                    }
                    if (columns[index].visible) {
                        width = width + $(cell).width() + parseFloat($(cell).css("padding-left")) + parseFloat($(cell).css("padding-right")) + 1; // 1 for border
                    }
                }
                // Check if the edited cell in viewport.
                if (startWidth < scrollLeft || endWidth > scrollLeft + viewPortWidth) {
                    if (startWidth < scrollLeft) {
                        left = scrollLeft - (scrollLeft - startWidth) - 3;
                    } else {
                        left = scrollLeft + (endWidth - (scrollLeft + viewPortWidth) + 3);// 3 for slightly adjust the left scrollbar
                    }
                    gridContent.ejScroller("option", { "scrollLeft": left });
                
                }
            }
        },
        updateAllowColumnResize: function (bool) {
            var proxy = this,
                model = proxy.model;
            model.allowColumnResize = bool;
            if (model.allowColumnResize)
                proxy._resizer = new ej.gridFeatures.gridResize(proxy);
            proxy._enableColumnResizeEvents();
        },

        //Get predecessor string from serial number predecssor string
        _predecessorFromSerialPredecessor: function (serialPredecessor) {
            var proxy = this, model = proxy.model, values, serialNo,
                flatRecords = model.flatRecords, idValue, defaultPredecessor = [], defaultPredecessorString = "";
            if (!ej.isNullOrUndefined(serialPredecessor) && serialPredecessor.length > 0) {
                serialPredecessor.split(',').forEach(function (el) {
                    values = el.split('+');                  
                    if (el.indexOf('-') >= 0)
                        values = el.split('-');                        
                    serialNo = values[0].match(/(\d+|[A-z]+)/g);
                    if (serialNo && serialNo[0]) {
                        $.map(flatRecords, function (item) {
                            if (item.serialNumber == serialNo[0]) {
                                idValue = item.taskId;
                                return false;
                            }
                        });
                        idValue && defaultPredecessor.push(idValue + (serialNo[1] ? serialNo[1] : "") + (values[1] ? "+" + values[1] : ""));
                    }
                });
                defaultPredecessorString = defaultPredecessor.length && defaultPredecessor.join(",");
            }
            return defaultPredecessorString;
        },
        
        //validate predecessor string

        _validatePredecessorString: function (string) {
            var proxy = this, model = proxy.model, result, values, offsetvalue, match,
                flatDataLength = model.flatRecords.length, isExist = false;
            if (string.length > 0) {
                string.split(',').forEach(function (el) {
                    values = el.split('+');
                    offsetvalue = '+';
                    if (el.indexOf('-') >= 0) {
                        values = el.split('-');
                        offsetvalue = '-';
                    }
                    match = values[0].match(/(\d+|[A-z]+)/g);
                    if (!match)
                        return false;
                    if (model.enableSerialNumber) {
                        if (+match[0] <= flatDataLength)
                            isExist = true;
                    }
                    else {
                        if(model.ids.indexOf(match[0]) != -1)
                            isExist = true;
                    }
                    if (match && isExist) {
                        if (match[1]) {
                            if (match[1].toUpperCase() == 'FS' || match[1].toUpperCase() == 'FF' || match[1].toUpperCase() == 'SF' || match[1].toUpperCase() == 'SS') {
                            }
                            else {
                                result = false;
                            }
                        }
                    } else {
                        result = false;
                    }
                });
            } else {
                return true;
            }
            if (result === undefined || result)
                return true;
            else
                return false;
        },

        //SAVE THE EDITED CELL
        
        saveCell: function () {

            var proxy = this,
                model = proxy.model,
                $form = $("#" + proxy._id + "EditForm");

            if ($form.length > 0) {

                if (!proxy.editFormValidate()) return true;
                if (proxy._isRowEdit)
                    return;
                if (proxy._cellEditingDetails.columnIndex >= 0) {
                    proxy._focusTreeGridElement();

                    var recordIndex = proxy.getUpdatedRecords().indexOf(proxy._cellEditingDetails.data),
                        $targetTr = ej.TreeGrid.getRowByIndex(this, recordIndex),
                        $targetTd = $form.closest("td"),
                        formattedValue, args = {},
                        column = model.columns[proxy._cellEditingDetails.columnIndex],
                        $element = $("#" + proxy._id + proxy._cellEditingDetails.fieldName.split('.').join("")),
                        cellElement, isLocalData = true;

                    args = {
                        columnName: column.field,
                        value: proxy.getCurrentEditCellData(),
                        data: proxy._cellEditingDetails.data,
                        previousValue: proxy._cellEditingDetails.cellValue,
                        rowIndex: proxy._cellEditingDetails.rowIndex,
                        columnObject: column,
                        cellElement: $targetTd,
                        rowElement: $targetTr,
                    };

                    if (proxy._cellEditingDetails.cellEditType == "datetimepicker" ||
                        proxy._cellEditingDetails.cellEditType == "dropdownedit" ||
                        proxy._cellEditingDetails.cellEditType == "datepicker") {

                        $element.data("ejWidgets") && $element[$element.data("ejWidgets")[0]]("destroy");

                    }

                    if (!ej.isNullOrUndefined(column.format)) {

                        formattedValue = proxy.formatting(column.format, args.value, model.locale);
                        args.cellElement.empty().html(formattedValue);

                    } else {

                        if (args.columnObject.type == "boolean") {

                            var cellData = {};
                            cellData[args.columnObject.field] = args.value;
                            args.cellElement.empty().html(
                                $($.templates.Grid_JSONTemplate.render(cellData))[0].cells[proxy._cellEditingDetails.columnIndex].innerHTML
                            );

                        } else if (args.columnObject.field == "notesText") {
                            args.cellElement.empty().html(proxy._convertHtml(args.value));
                        }
                        else args.cellElement.empty().html(args.value);
                    }
                    var editType = proxy._cellEditingDetails.cellEditType,
                        fieldName = proxy._cellEditingDetails["fieldName"],
                        isValueModified = proxy._checkModfiedCellValue(args.previousValue, args.value, args.columnObject);


                    //To avoid duplicate ID for TreeGrid on self reference while editing ID value
                    if (!model.isFromGantt && model.idMapping && model.parentIdMapping && fieldName == model.idMapping) {
                        if (proxy._validateIdValue(args.value)) {
                            args.value = args.previousValue
                            isValueModified = false;
                        }
                    }
                    if (model.isFromGantt)
                        proxy._setGanttCellValue(args, fieldName, isValueModified);

                    else if (isValueModified || !proxy._isRemoteData) {
                        if (isValueModified && proxy.model.editSettings.editMode.toLowerCase() == "batchediting") {
                            //Take backup of original field values
                            !args.data.isBatchAdd && proxy._createBatchEditedFields(args.data, fieldName, args.value, args.columnObject);
                            proxy._batchEditStarts = true;
                        }
                        if (fieldName.indexOf(".") != -1)
                            ej.createObject(fieldName, args.value, args.data[fieldName]);
                        else
                            args.data[fieldName] = args.value;

                        args.data.item[fieldName] = args.data[fieldName]
                        args.requestType = "saveCellValue";
                        isLocalData = proxy._updateAction(args);

                    }
                    if (isLocalData)
                        proxy._refreshAfterSaveCell(args, true);
                }
            }
        },

        _createBatchEditedFields: function (data, fieldItem, newValue, columnObject) {
            var proxy = this, model = proxy.model, isDifferent;
            if (!data.batchEditedFields) {
                data.batchEditedFields = {};
                data.batchEditedFields[fieldItem] = data[fieldItem] ? data[fieldItem] : "";
            }
            else if (data.batchEditedFields && ej.isNullOrUndefined(data.batchEditedFields[fieldItem]))
                data.batchEditedFields[fieldItem] = data[fieldItem];
            else if (data.batchEditedFields && !ej.isNullOrUndefined(data.batchEditedFields[fieldItem])) {
                //To check whether edited value is same as Original value
                isDifferent = proxy._checkModfiedCellValue(data.batchEditedFields[fieldItem], newValue, columnObject);
                if (!isDifferent)
                    delete data.batchEditedFields[fieldItem];
            }
            proxy._updateBatchChanges(data);
        },

        //Update batch changes collection
        _updateBatchChanges: function (targetData) {
            var proxy = this,
                model = proxy.model,                
                batchChangedGrp = proxy.batchChanges.changed,
                batchAddedGrp = proxy.batchChanges.added;
            //Insert into batchChanges collection
            if (!$.isEmptyObject(targetData.batchEditedFields)) {
                if (batchAddedGrp.indexOf(targetData) == -1 && batchChangedGrp.indexOf(targetData) == -1) {
                    batchChangedGrp.push(targetData);
                }
            }
            else {
                if (batchChangedGrp.indexOf(targetData) != -1)
                    batchChangedGrp.splice(batchChangedGrp.indexOf(targetData), 1);
            }
        },

        _refreshAfterSaveCell: function (args, isValueModified) {
            var proxy = this, model = proxy.model,
                cellElement;

            if (this._frozenColumnsLength > 0) {
                if (!model.allowSelection)
                    args.data.isSelected = false;
                if (proxy._cellEditingDetails.columnIndex < this._frozenColumnsLength)
                    cellElement = $($.render[proxy._id + "_JSONFrozenTemplate"](args.data))[0].cells[proxy._cellEditingDetails.columnIndex];
                else
                    cellElement = $($.render[proxy._id + "_Template"](args.data))[0].cells[(proxy._cellEditingDetails.columnIndex - this._frozenColumnsLength)];
            } else {
                if (!model.allowSelection)
                    args.data.isSelected = false;
                cellElement = $($.render[proxy._id + "_Template"](args.data))[0].cells[proxy._cellEditingDetails.columnIndex];
            }
            args.cellElement.removeClass("e-editedcell").replaceWith(cellElement);
            args.cellElement = $(cellElement);

            /* refresh details Row */
            if (model.showDetailsRow && !model.showDetailsRowInfoColumn && model.detailsTemplate) {
                this._refreshDetailsRow(model.currentViewData.indexOf(args.data));
            }

            proxy._trigger("refresh");
            if (!args.data.treeMappingName)
                args.data.treeMappingName = [];
            args.data.treeMappingName.length == 0 && args.data.treeMappingName.push(args.columnName);
            if ((isValueModified || args.isModified) && model.editSettings.editMode.toLowerCase() != "batchediting" && proxy._trigger("endEdit", args)) {
                args.data[args.columnName] = args.previousValue;
                args.data.item[args.columnObject.field] = args.previousValue;
                proxy.selectRows(this.selectedRowIndex());
                ej.TreeGrid.refreshRow(proxy, model.currentViewData.indexOf(args.data));
            }
            else {
                if (model.idMapping && model.parentIdMapping) {
                    proxy._updateLastInsertedId(args.data[model.idMapping]);
                }
            }
            model.isEdit = false;
            proxy._cellEventTrigger(args.cellElement[0], args.data, args.columnObject);
            $(args.rowElement).removeClass("e-editedrow");

            if (model.showSummaryRow) {
                args.editType = "celledit";
                proxy._updateSummaryRow(args);
            }
            if (model.showTotalSummary) {
                args.editType = "celledit";
                proxy._updateTotalSummaryRow(args);
            }
            if (model.allowTextWrap) {
                if (proxy._$frozenTableContent.length > 0) {
                    proxy._updateRowHeight(proxy._cellEditingDetails.rowIndex, "savecell");
                    proxy._updateGridContentHeight();
                    proxy.getScrollElement().ejScroller("refresh");
                    var movableScrollTop = proxy.getScrollElement().ejScroller("model.scrollTop");
                    proxy._getFrozenScrollElement().scrollTop(movableScrollTop);
                    if (model.enableVirtualization) {
                        proxy.updateHeight();
                    }
                } else {
                    proxy.getScrollElement().ejScroller("refresh");
                }
                if (model.allowPaging && !model.sizeSettings.height) {
                    proxy.updateHeight();
                }
            }
            if (model.allowTextWrap && proxy._$frozenTableContent.length == 0) {
                var height = proxy._getViewPortHeight();
                proxy._$gridContainer.css({
                    "height": height + "px",
                });
                $("#" + proxy._id + "e-gridcontent").css("height", height)
                if (model.sizeSettings.height == "auto")
                    proxy.getScrollElement().ejScroller("refresh");
            }
            proxy._cancelSaveTools();
            var colObject = args.columnObject;
            if (model.allowFiltering && colObject && model.filterSettings.filterType == "filterbar" && colObject.filterEditType == "dropdownedit" && colObject.editType != "dropdownedit")
                proxy._resizeFilteringElements();
        },

        _setGanttCellValue: function (args, fieldName, isValueModified) {
            var proxy = this, model = proxy.model;

            if (fieldName === "taskMode") {
                isValueModified = (args.value !== args.previousValue) ? true : false;
            }

            if (fieldName === "predecessor") {

                var eventArg = {}, stringResult, logicResult;
                args.value = $.trim(args.value);
                stringResult = proxy._validatePredecessorString(args.value);
                if (stringResult) {
                    eventArg.predecessorString = args.value.split(',');
                    eventArg.currentRecord = args.data;
                    eventArg.requestType = "validatePredecessor";
                    proxy._trigger("actionComplete", eventArg);
                    logicResult = eventArg.result;
                    if (!logicResult) {
                        args.value = args.previousValue;
                    }
                }
                else {
                    args.value = args.previousValue;
                }
                var ganttPredecessor = [],
                prevPredecessors = [],
                modifiedPredecessors = [],
                count = 0,
                length, predecessor;
                args.previousValue = args.data.predecessor;
                prevPredecessors = args.previousValue;
                if (args.value.length > 0) {
                    var ganttProxy = $("#" + this._id.replace("ejTreeGrid", "")).data("ejGantt");
                    modifiedPredecessors = args.data._calculatePredecessor(args.value, model.durationUnitEditText, model.durationUnit, ganttProxy);
                }
                length = modifiedPredecessors.length;
                var index = 0,
                    prevPrdecessorlength = args.previousValue && args.previousValue.length;
                for (index = 0; index < prevPrdecessorlength; index++) {
                    predecessor = prevPredecessors[index];
                    if (predecessor.from === args.data.taskId.toString()) {
                        ganttPredecessor.push(predecessor);
                    }
                }
                for (count = 0; count < length; count++) {
                    ganttPredecessor.push(modifiedPredecessors[count]);
                }
                args.data[proxy._cellEditingDetails["fieldName"]] = ganttPredecessor;
                if (ganttProxy && !ganttProxy._isValidPredecessorString) {
                    args.value = proxy._getPredecessorsValue(args.data);
                    ganttProxy._isValidPredecessorString = true;
                }
                args.data.item[model.predecessorMapping] = args.value;
                args.data.predecessorsName = args.value;
                if (model.enableWBS && model.enableWBSPredecessor)
                    proxy.updateWBSPredecessor(args.data);

            }
            else if (fieldName === "serialNumberPredecessor") {

                var eventArg = {}, stringResult, logicResult, defaultPredecessor;
                args.value = $.trim(args.value);
                args.value = proxy._checkSerialPredecessor(args.value);
                stringResult = proxy._validatePredecessorString(args.value);
                if (stringResult) {
                    eventArg.predecessorString = args.value.split(',');
                    eventArg.currentRecord = args.data;
                    eventArg.requestType = "validateSerialPredecessor";
                    proxy._trigger("actionComplete", eventArg);
                    logicResult = eventArg.result;
                    if (!logicResult) {
                        args.value = args.previousValue;
                    }
                }
                else {
                    args.value = args.previousValue;
                }
                defaultPredecessor = proxy._predecessorFromSerialPredecessor(args.value);
                var ganttPredecessor = [],
                prevDefaultPredecessors = [],
                modifiedPredecessors = [],
                count = 0,
                length, predecessor;
                prevDefaultPredecessors = args.data.predecessor;
                args.prevDefaultPredecessors = prevDefaultPredecessors;
                args.previousValue = args.data.serialNumberPredecessor;
                if (defaultPredecessor.length > 0) {
                    var ganttProxy = $("#" + this._id.replace("ejTreeGrid", "")).data("ejGantt");
                    modifiedPredecessors = args.data._calculatePredecessor(defaultPredecessor, model.durationUnitEditText, model.durationUnit, ganttProxy);
                }
                length = modifiedPredecessors.length;
                var index = 0,
                    prevPrdecessorlength = prevDefaultPredecessors && prevDefaultPredecessors.length;
                for (index = 0; index < prevPrdecessorlength; index++) {
                    predecessor = prevDefaultPredecessors[index];
                    if (predecessor.from === args.data.taskId.toString()) {
                        ganttPredecessor.push(predecessor);
                    }
                }
                for (count = 0; count < length; count++) {
                    ganttPredecessor.push(modifiedPredecessors[count]);
                }
                args.data.predecessor = ganttPredecessor;
                args.data.item[model.predecessorMapping] = defaultPredecessor;
                args.data.predecessorsName = defaultPredecessor;
                args.data.item["serialNumberPredecessor"] = args.value;
                args.data.serialNumberPredecessor = args.value;
                if (model.enableWBS && model.enableWBSPredecessor)
                    proxy.updateWBSPredecessor(args.data);
            }
            else if (fieldName === "duration") {
                //validate text from duration field
                var val = args.value,
                duration = args.data.duration,
                durationUnit = args.data.durationUnit;

                if (val == "") {
                    duration = val;
                    if (model.allowUnscheduledTask)
                        duration = null;
                    else
                        isValueModified = false;                    
                }
                else {
                    var culture = ej.globalize.findCulture(model.locale);
                    var nf = culture.numberFormat;
                    if (nf[','] != ',')
                        var values = val.match(/(\d*\.*\,*\d+|[A-z]+)/g);
                    else
                        var values = val.match(/(\d*\.*\d+|[A-z]+)/g);
                    if (values && values.length <= 2) {
                        duration = ej.parseFloat(values[0], null, model.locale);
                        durationUnit = values[1] ? values[1].toLowerCase() : "";
                        if (model.durationUnitEditText.minute.indexOf(durationUnit) != -1)
                            durationUnit = ej.Gantt.DurationUnit.Minute;
                        else if (model.durationUnitEditText.hour.indexOf(durationUnit) != -1)
                            durationUnit = ej.Gantt.DurationUnit.Hour;
                        else if (model.durationUnitEditText.day.indexOf(durationUnit) != -1)
                            durationUnit = ej.Gantt.DurationUnit.Day;
                        else
                            durationUnit = model.durationUnit;
                    }
                }
                if (!isNaN(duration) && (isValueModified || args.data.durationUnit.toLowerCase() != durationUnit)) {
                    args.data.item[model.durationMapping] = args.data.duration = duration;
                    args.data.durationUnit = durationUnit;
                    isValueModified = true;
                } else {
                    args.data.item[model.durationMapping] = args.previousValue;
                    isValueModified = false;
                }

            } else if (isValueModified) {

                switch (fieldName) {

                    case "taskId":
                        args.data.item[model.idMapping] = args.value;
                        break;
                    case "taskName":
                        args.data.item[model.taskNameMapping] = args.value;
                        break;
                    case "startDate":
                    case "endDate":
                        if (!model.allowUnscheduledTask && (!args.value || args.value == "")) {
                            isValueModified = false;
                            args.value = args.previousValue;
                        }
                        else if (fieldName == "startDate")
                            args.data.item[model.startDateMapping] = args.value;
                        else if (fieldName == "endDate")
                            args.data.item[model.endDateMapping] = args.value;
                        break;
                    case "resourceInfo":
                        args.data.item[model.resourceInfoMapping] = proxy._getResourceId(args.value);
                        break;
                    case "status":
                        args.data.item[model.progressMapping] = args.value;
                        break;
                    case "notesText":
                        args.data.item[model.notesMapping] = args.value;
                        args.data["notes"] = args.value;
                        args.data["notesText"] = args.value;
                        break;
                    case "taskMode":
                        args.data.item[model.taskSchedulingModeMapping] = args.value;
                        args.data["isAutoSchedule"] = args.value == true ? false : true;
                        break;
                    case "work":
                        if (model.workMapping)
                            args.data.item[model.workMapping] = args.value;
                        else
                            args.data.item[proxy._cellEditingDetails.fieldName] = args.value;
                        break;
                    case "baselineStartDate":
                        args.data.item[model.baselineStartDateMapping] = args.value;
                        break;
                    case "baselineEndDate":
                        args.data.item[model.baselineEndDateMapping] = args.value;
                        break;
                    case "eResourceName":
                        if (args.data.eResourceTaskType == "groupTask")
                            args.data.item[model.groupNameMapping] = args.value;
                        else if (args.data.eResourceTaskType == "resourceTask")
                            args.data.item[model.resourceNameMapping] = args.value;
                        args.data.eResourceName = args.value;
                        break;
                    default:
                        args.data.item[proxy._cellEditingDetails.fieldName] = args.value;
                        break;
                }
                args.data[fieldName] = args.value;
            }

            if ((args.columnName === "startDate" ||
                args.columnName === "endDate" ||
                args.columnName === "duration" ||
                args.columnName === "taskMode" ||
                args.columnName === "predecessor" ||
                args.columnName === "serialNumberPredecessor" ||
                args.columnName == "status") ||
                args.columnName == "baselineStartDate" ||
                args.columnName == "baselineEndDate") {

                args.isModified = isValueModified;
            }
        },

        /*Check and update string case*/
        _checkSerialPredecessor: function (string) {
            var newString = "", sNo, pArray = [], values;
            if (string.length > 0) {
                string.split(',').forEach(function (pl) {
                    values = pl.split('+');
                    if (pl.indexOf('-') >= 0)
                        values = pl.split('-');
                    sNo = values[0].match(/(\d+|[A-z]+)/g);
                    pArray.push(sNo[0] + (sNo[1] ? sNo[1].toUpperCase() : "FS") + (values[1] ? "+" + values[1] : ""));
                });
                newString = pArray.join(",")
            }
            return newString;
        },
        
        /*Update WBS predecessors value*/
        updateWBSPredecessor: function (preData) {
            var proxy = this,
                model = proxy.model,
                prdc = preData["predecessorsName"],
                wbspred = null;
            if (prdc && prdc.length > 0) {
                var prdcList = prdc.split(',');
                for (var p = 0; p < prdcList.length; p++) {
                    var ref = prdcList[p].match(/(\d+|[A-z]+)/g),
                        refId = +ref[0],
                        refType = ref[1],
                        refRecord;
                    refRecord = model.flatRecords.filter(function (record) {
                        return record && record.taskId == refId;
                    });
                    var newOne;
                    if (refType)
                        newOne = refRecord[0] && refRecord[0]["WBS"] + refType;
                    else
                        newOne = refRecord[0] && refRecord[0]["WBS"];
                    if (newOne)
                        wbspred = wbspred ? (wbspred + "," + newOne) : newOne;
                }
                preData["WBSPredecessor"] = wbspred;
                preData["item"]["WBSPredecessor"] = wbspred;
            }
            else {
                preData["WBSPredecessor"] = "";
                preData["item"]["WBSPredecessor"] = "";
            }
        },

        //GET THE CURRENT CELL DATA
        getCurrentEditCellData: function () {

            var proxy = this,
                model = proxy.model,
                columns = model.columns,
                column, cellDate;

            if ($("#" + proxy._id + "EditForm").length) {

                var $element = $("#" + proxy._id + proxy._cellEditingDetails.fieldName.split('.').join("")),
                    cellValue;
                column = columns[proxy._cellEditingDetails.columnIndex];
                switch (proxy._cellEditingDetails.cellEditType) {

                    case ej.TreeGrid.EditingType.String:
                        cellValue = $element.val();
                        break;

                    case ej.TreeGrid.EditingType.Numeric:
                        cellValue = parseFloat($element.val());
                        if ((model.isFromGantt && (column.field == "work" || column.field == "status" || column.field == "duration") || column.field == "unit")) {
                            cellValue = isNaN(cellValue) ? proxy._cellEditingDetails.cellValue : cellValue;
                        } else {
                            cellValue = $element.ejNumericTextbox("model.value");
                        }
                        break;

                    case ej.TreeGrid.EditingType.Maskedit:
                        cellValue = $element.ejMaskEdit("model.value");
                        break;
                    case ej.TreeGrid.EditingType.Dropdown:
                        if (model.isFromGantt && proxy._cellEditingDetails.fieldName === "resourceInfo") {
                            cellValue = proxy._getSelectedItem($element.ejDropDownList("model.selectedItems"));
                        }
                        else if (model.isFromGantt && proxy._cellEditingDetails.fieldName === "taskMode") {
                            cellValue = $element.ejDropDownList("model.value") == "true" ? true : false;
                        }
                        else
                            cellValue = ($element.ejDropDownList("model.showCheckbox") == false && $element.ejDropDownList("model.multiSelectMode") == ej.MultiSelectMode.None) ? $element.ejDropDownList("model.itemValue") : $element.ejDropDownList("getSelectedValue");
                        break;

                    case ej.TreeGrid.EditingType.Boolean:
                        cellValue = $element.is(':checked');
                        break;

                    case ej.TreeGrid.EditingType.DatePicker:
                        if (column && !column.format) {
                            cellValue = ej.format($element.ejDatePicker("model.value"), this.model.dateFormat, this.model.locale)
                        }
                        else {
                            cellValue = $element.ejDatePicker("model.value");
                        }
                        if (cellValue == "" && model.isFromGantt)
                            cellValue = proxy._cellEditingDetails.cellValue;
                        break;

                    case ej.TreeGrid.EditingType.DateTimePicker:

                        var dateTimePickerValue = $element.ejDateTimePicker("model.value"),
                            dateTimePickerFormat = $element.ejDateTimePicker("model.dateTimeFormat"),
                            dateTimePickerLocale = $element.ejDateTimePicker("model.locale");

                        if (column && !column.format) {
                            cellValue = ej.format($element.ejDateTimePicker("model.value"), this.model.dateFormat, this.model.locale)
                        }
                        else {
                            cellValue = $element.ejDateTimePicker("model.value");
                        }
                        cellDate = ej.format($element.val(), dateTimePickerFormat, dateTimePickerLocale);
                        var tempValue = ej.format(dateTimePickerValue, dateTimePickerFormat, dateTimePickerLocale);
                        if (cellDate !== tempValue && model.isFromGantt && !model.allowUnscheduledTask)
                            cellValue = proxy._cellEditingDetails.cellValue;
                        break;
                    case "edittemplate":
                        var temp1 = column.editTemplate.read;
                        if (typeof temp1 == "string")
                            temp1 = ej.util.getObject(temp1, window);
                        cellValue = temp1($element);
                        break;

                }
                if (typeof cellValue == "string" && cellValue.length &&
                    model.columns[proxy._cellEditingDetails.columnIndex].type == "number") {

                    cellValue = parseFloat(cellValue);

                }

                return cellValue;
            }

            return null;
        },
        //Get the value from edited row

        getCurrentEditCellDataForRowEdit: function (field,type,cellIndex) {

            var proxy = this,
                model = proxy.model,
                columns = model.columns,
                column, field = field.split('.').join(""), length, $element, isDialogEdit;
            if (proxy.model.editSettings.allowEditing && (proxy.model.editSettings.editMode == "dialogEditing" || (model.editSettings.editMode.toLowerCase() == "batchediting" && model.editSettings.batchEditSettings.editMode == "dialog"))) {
                length = $("#" + proxy._id + "EditFormDialog").length;
                $element = $("#" + proxy._id + field);
                isDialogEdit = true;
            } else {
                length = $("#" + proxy._id + "EditForm").length;
                $element = $("#" + proxy._id + field);
            }

            if (length) {

                var cellValue, dateValue;
                column = columns[cellIndex];

                switch (type) {

                    case ej.TreeGrid.EditingType.String:
                        cellValue = $element.val();
                        break;

                    case ej.TreeGrid.EditingType.Numeric:
                        cellValue = parseFloat($element.val());
                        if ($element.data("ejNumericTextbox"))
                            cellValue = $element.ejNumericTextbox("model.value");
                        else
                            cellValue = cellValue;
                        break;

                    case ej.TreeGrid.EditingType.Dropdown:
                        if ($element.data("ejDropDownList"))
                            cellValue = ($element.ejDropDownList("model.showCheckbox") == false && $element.ejDropDownList("model.multiSelectMode") == ej.MultiSelectMode.None) ? $element.ejDropDownList("model.itemValue") : $element.ejDropDownList("getSelectedValue");
                        else
                            cellValue = $element.val();
                        if (!isDialogEdit)
                        $element.data("ejWidgets") && $element[$element.data("ejWidgets")[0]]("destroy");
                        break;

                    case ej.TreeGrid.EditingType.Boolean:
                        cellValue = $element.is(':checked');
                        break;

                    case ej.TreeGrid.EditingType.DatePicker:

                        if ($element.hasClass("e-datepicker")) {
                            if (model.dateFormat.toLowerCase().indexOf("hh") == -1)
                                dateValue = $element.ejDatePicker("model.value");
                            else {
                                dateValue = $element.ejDateTimePicker("model.value");
                            }
                        } else {
                           dateValue = $element.val();
                        }

                        if (column && !column.format) {
                            cellValue = proxy.getFormatedDate(dateValue);
                        }
                        else {
                            cellValue = dateValue;
                        }
                       
                        if (!isDialogEdit)
                        $element.data("ejWidgets") && $element[$element.data("ejWidgets")[0]]("destroy");
                        break;

                    case ej.TreeGrid.EditingType.DateTimePicker:

                        if ($element.hasClass("e-datetimepicker")) {
                            if (column && !column.format) {
                                cellValue = ej.format($element.ejDateTimePicker("model.value"), this.model.dateFormat, this.model.locale)
                            }
                            else {
                                cellValue = $element.ejDateTimePicker("model.value");
                            }
                        } else {
                            cellValue = $element.val();
                        }
                        if (!isDialogEdit)
                        $element.data("ejWidgets") && $element[$element.data("ejWidgets")[0]]("destroy");
                        break;

                    case ej.TreeGrid.EditingType.Maskedit:
                        cellValue = $element.ejMaskEdit("model.value");
                        break;
                    case "edittemplate":
                        var temp1 = column.editTemplate.read;
                        if (typeof temp1 == "string")
                            temp1 = ej.util.getObject(temp1, window);
                        cellValue = temp1($element);
                        break;

                }
                if (typeof cellValue == "string" && cellValue.length &&
                    model.columns[cellIndex].type == "number") {
                    cellValue = parseFloat(cellValue);
                }

                return cellValue;
            }

            return null;
        },

        _getResourceId:function(dataSource){

            var resourceIds = [],
                count = 0, length = dataSource.length;

            for (count = 0; count < length; count++) {
                resourceIds.push(dataSource[count][this.model.resourceIdMapping]);
            }
            return resourceIds;
        },

        _getSelectedItem: function (indexArray) {

            var proxy = this, model = proxy.model,
                count = 0, index, 
                length = indexArray.length,
                resourceUnitMapping = model.resourceUnitMapping,
                resourceIdMapping = model.resourceIdMapping,
                dropDownData = model.columns[proxy._cellEditingDetails.columnIndex].dropdownData,
                selectedItemResourceInfo = model.selectedItem.resourceInfo,
                selectedItems = [];

            if (dropDownData) {

                for (count = 0; count < length; count++) {                    
                    if (selectedItemResourceInfo) {
                        for (var newIndex = 0; newIndex < selectedItemResourceInfo.length; newIndex++) {
                            if (selectedItemResourceInfo[newIndex][resourceIdMapping] === indexArray[count] + 1) {
                                index = newIndex;
                                break;
                            }
                            else
                                index = -1;
                        }
                    }
                    if (!ej.isNullOrUndefined(index) && index != -1)
                        selectedItems.push(selectedItemResourceInfo[index]);
                    else {
                        $.each(dropDownData, function (index, resourceInfo) {
                            if (indexArray[count] === index) {
                                var ganttRecordResource = $.extend({}, resourceInfo);
                                ganttRecordResource[resourceUnitMapping] = 100;
                                selectedItems.push(ganttRecordResource);
                            }
                        });
                    }
                }
            }

            return selectedItems;
        },       
        //GET THE FORMATED DATE 
        getFormatedDate: function (date) {
            return ej.format(date, this.model.dateFormat, this.model.locale);
        },
        //Get formated string from date object
        getDateFromFormat: function (date) {

            if (typeof date === "object") {
                return new Date(date);
            }
            if (date) {
                return ej.parseDate(date, this.model.dateFormat, this.model.locale) == null ?
                    new Date(date) : ej.parseDate(date, this.model.dateFormat, this.model.locale);
            }
        },

        //GET THE FORMATTED TEXT
        formatting: function (formatstring, str, locale) {
            formatstring = formatstring.replace(/%280/g, "\"").replace(/&lt;/g, "<").replace(/&gt;/g, ">");
            locale = ej.preferredCulture[locale] ? locale : "en-US";
            var s = formatstring;
            var frontHtmlidx, FrontHtml, RearHtml, lastidxval;
            frontHtmlidx = formatstring.split("{0:");
            lastidxval = formatstring.split("}");
            FrontHtml = frontHtmlidx[0];
            RearHtml = lastidxval[1];
            if (typeof (str) == "string" && $.isNumeric(str))
                str = Number(str);
            if (formatstring.indexOf("{0:") != -1) {
                var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                var formatVal = toformat.exec(formatstring);
                if (formatVal != null && str != null) {
                    if (FrontHtml != null && RearHtml != null)
                        str = FrontHtml + ej.format(str, formatVal[2], locale) + RearHtml;
                    else
                        str = ej.format(str, formatVal[2], locale);
                } else if (str != null)
                    str = str;
                else
                    str = "";
                return str;
            } else if (this.data != null && this.data.Value == null) {
                $.each(this.data, function (dataIndex, dataValue) {
                    s = s.replace(new RegExp('\\{' + dataIndex + '\\}', 'gm'), dataValue);
                });
                return s;
            } else {
                return this.data.Value;
            }
        },


        //GET THE COLUMNINDEX BY USIGN THE FIELD NAME
        getColumnIndexByField: function (fieldName) {

            var proxy = this,
                columns = proxy.model.columns,
                length = columns.length,
                column = 0;

            for (column; column < length; column++) {
                if (columns[column]["field"] == fieldName)
                    break;
            }

            return column == columns.length ? -1 : column; // if field name not available in columns collection, it return -1 value.
        },

        getUpNextVisibleColumnIndex: function (index, action) {
            var proxy = this, columns = proxy.model.columns;
            if (!index)
                index = 0;
            for (index; index <= columns.length; index++) {
                if (index == columns.length && (action == "rightArrow" || action == "moveCellRight")) {
                    index = 0;
                    proxy._focusingRowIndex += 1;
                }
                if (columns[index].visible && columns[index].allowCellSelection)
                    return columns.indexOf(columns[index]);
            }
        },
        getPreviousVisibleColumnIndex: function (index, action) {
            var proxy = this, columns = proxy.model.columns;
            if (!index)
                index = columns.length - 1;
            for (index; index < columns.length; index--) {
                if (index < 0 && (action == "leftArrow" || action == "moveCellLeft")) {
                    index = columns.length - 1;
                    proxy._focusingRowIndex -= 1;
                }
                if (columns[index].visible && columns[index].allowCellSelection)
                    return columns.indexOf(columns[index]);
            }
        },
        //GET THE BROWSER DETAILS
        getBrowserDetails: function () {
            var b = navigator.userAgent.match(/(firefox|chrome|opera|msie|safari)\s?\/?(\d+(.\d+)*)/i);
            if (!!navigator.userAgent.match(/Trident\/7\./))
                return { browser: "msie", version: jQuery.uaMatch(navigator.userAgent).version };
            return { browser: b[1].toLowerCase(), version: b[2] };
        },

        //Check whether the Browser is Mobile Device's or not.
        mobileDevice: function () {
            if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i)
                || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i)
                || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i)
                || navigator.userAgent.match(/Windows Phone/i)) {
                return true;
            }
            else {
                return false;
            }
        },


        //GET THE FIELDNAME OF COLUMN BY USING THE HEADERTEXT
        getFieldNameByHeaderText: function (headerText) {

            var proxy = this;

            if (ej.isNullOrUndefined(proxy._fieldColumnNames[headerText])) return null;

            return proxy._fieldColumnNames[headerText];
        },


        //CLEAR THE SELECTION

        

        clearSelection: function (index) {

            var proxy = this,
                model = proxy.model,
                updatedRecords = proxy.getUpdatedRecords();

            if (this.selectedRowIndex() != -1 || (this.selectedRowIndex() == -1 && proxy._previousIndex != -1) || index == -1) {
                                                 //To clear the row selection of previously selected row via set model (selectedRowIndex)
                var $gridRows,
                    index;
                if (this._frozenColumnsLength) {
                    $gridRows = $(proxy.getRows()[0]).add(proxy.getRows()[1]);
                } else {
                    $gridRows = proxy.getRows();
                }     
                if (!ej.isNullOrUndefined(index) && index != -1) {
                    ej.TreeGrid.getRowByIndex(proxy, index).find(".e-selectionbackground").removeClass("e-selectionbackground").removeClass("e-active");
                    var record = updatedRecords[index];
                    record && (record.isSelected = false);
                    }
                else {

                    if ($gridRows) {
                        $gridRows.find(".e-rowcell,.e-detailsrowcell").removeClass("e-selectionbackground").removeClass("e-active");
                    }
                    var dataManager = new ej.DataManager(model.flatRecords);

                    var query = new ej.Query();
                    query.search(true, ['isSelected'], ej.FilterOperators.Equals, true);

                    var records = dataManager.executeLocal(query);
                    var length = records && records.length;

                    if (length > 0) {

                        var count = 0;

                        for (count = 0; count < length; count++) {
                            records[count].isSelected = false;                            
                        }

                    }
                }

                if (proxy._checkboxSelection) {
                    proxy.selectedRowIndex(-1);
                    model.selectedItem = null;              
                    proxy._cancelSaveTools();
                }
                  //to remove particular index for the selectedItems collection while clearing particular index
                else if (model.selectedItems.length > 0 && index != -1 && !ej.isNullOrUndefined(index)) {
                    var selectedIndex = $.inArray(updatedRecords[index], model.selectedItems);
                    if (selectedIndex != -1) {
                        model.selectedItems.splice(selectedIndex, 1);
                        updatedRecords[index].isSelected = false;
                        model.selectedItem = model.selectedItems.length > 0 ? model.selectedItems[model.selectedItems.length - 1] : null;
                        proxy.selectedRowIndex(updatedRecords.indexOf(model.selectedItem));
                    }
                }
                //Clearing the selected item and index while clearing the row selection itself
                else if (!model.selectedItems.length || (model.selectedItems.length && !proxy._multiSelectCtrlRequest) || index == -1 || ej.isNullOrUndefined(index)) {
                    proxy.selectedRowIndex(-1);
                    model.selectedItem = null;//For single selection only
                    model.selectedItems = [];
                    proxy._cancelSaveTools();
                }               

                if (proxy.model.allowSelection && proxy.model.selectionSettings.selectionType == "multiple" && this._multiSelectPopup && this._multiSelectPopup.is(":visible") && !$gridRows.find(".e-rowcell,.e-detailsrowcell").hasClass("e-selectionbackground") && !$("#" + proxy._id + "_selectionpopup").find(".e-rowselect").hasClass("e-spanclicked")) {
                    proxy._clearMultiSelectPopup();
                }
            }
            if (model.selectionSettings.selectionMode == "cell") {
                proxy._selectedCellDetails = [];
                model.selectedCellIndexes = [];
                $("#" + proxy._id).find(".e-selectingcell").removeClass("e-selectingcell");

                proxy._rowIndexOfLastSelectedCell = -1;
                proxy._lastSelectedCellIndex = -1;
                proxy._focusingRowIndex = -1;
            }
            if (proxy.model.allowSelection && proxy.model.selectionSettings.selectionType == "multiple" && ej.isNullOrUndefined(index) && this._multiSelectPopup && this._multiSelectPopup.is(":visible")) {
                proxy._clearMultiSelectPopup();
            }
        },

        //To hide the selection popup
        _clearMultiSelectPopup: function () {
            var proxy = this;
            $("#" + proxy._id + "_selectionpopup").find(".e-rowselect").removeClass("e-spanclicked");
            proxy._multiSelectPopup.hide();
            proxy._multiSelectCtrlRequest = false;
            proxy._isTouchTrigger = false;
        },

        //COUNT THE CHILDRECORDS COUNT
        getChildRecordsCount: function (record) {

            var proxy = this,
                childRecords = record.childRecords,
                count = 0,
                length = childRecords ? childRecords.length : 0;

            for (count; count < length; count++) {

                if (proxy._filteredRecords.length > 0) {

                    var recordIndex = proxy._filteredRecords.indexOf(childRecords[count]);

                    if (recordIndex != -1) {

                        ++proxy._removedCount;

                        if (childRecords[count].hasChildRecords && childRecords[count].expanded) {
                            proxy.getChildRecordsCount(childRecords[count]);
                        }

                    }
                } else {

                    ++proxy._removedCount;

                    if (childRecords[count].hasChildRecords && childRecords[count].expanded) {
                        proxy.getChildRecordsCount(childRecords[count]);
                    }

                }
            }

            return proxy._removedCount;
        },


        //GET THE EXPAND STATUS OF RECORD
        getExpandStatus: function (record) {

            var parentRecord = record.parentItem;

            if (parentRecord != null) {

                if (parentRecord.expanded === false) {
                    return false;
                } else if (parentRecord.parentItem) {

                    if (parentRecord.parentItem.expanded === false) {
                        return false;
                    } else {
                        return this.getExpandStatus(parentRecord.parentItem);
                    }

                } else return true;
            } else return true;
        },


        //RETURN THE COLUMN FIELD NAMES
        getColumnFieldNames: function () {

            var columnNames = [],
                model = this.model,
                columns = model.columns,
                count = 0,
                fields = model.searchSettings.fields,
                length = columns.length;

            if (fields.length > 0)
                return fields;

            for (count; count < length; count++) {

                if (columns[count]["field"] && (columns[count]["field"] != "resourceInfo") && (columns[count]["field"] != "predecessor")) { 
                    columnNames.push(columns[count]["field"]);
                }
                else if (columns[count]["field"] == "resourceInfo") {
                    
                    columnNames.push("resourceNames");
                }
                else if (columns[count]["field"] == "predecessor")
                {
                    
                    columnNames.push("predecessorsName");
                }

            }

            return columnNames;
        },

        _getColumnMappingNames: function () {

            var columnNames = [],
                columns = this.model.columns,
                count = 0,
                length = columns.length;

            for (count; count < length; count++) {

                if (columns[count]["field"] && (columns[count]["field"] != "resourceInfo") && (columns[count]["field"] != "predecessor")

                    && (columns[count]["field"] != "work") && (columns[count]["field"] != "taskType") && (columns[count]["field"] != "effortDriven")) {
                    columnNames.push(columns[count]["mappingName"]);
                }
                else if (columns[count]["field"] == "resourceInfo") {

                    columnNames.push("resourceNames");
                }
                else if (columns[count]["field"] == "work") {

                    columnNames.push(columns[count]["field"]);
                }
                else if (columns[count]["field"] == "taskType") {

                    columnNames.push(columns[count]["field"]);
                }
                else if (columns[count]["field"] == "effortDriven") {

                    columnNames.push(columns[count]["field"]);
                }
                else if (columns[count]["field"] == "predecessor") {

                    columnNames.push("predecessorsName");
                }

            }

            return columnNames;
        },

        //RENDERED  RECORDS
        renderRecords: function (args) {

            var proxy = this,
                model = proxy.model;

            if (!args) {

                args = {};
                if (!model.isFromGantt && model.enableCollapseAll) {
                    args.requestType = ej.TreeGrid.Actions.ExpandCollapse;                   
                    proxy._isInExpandCollapseAll = true;                                    
                }
                else
                    args.requestType = ej.TreeGrid.Actions.Refresh;

            }

            this.sendDataRenderingRequest(args);
            proxy._isInExpandCollapseAll = false;
        },       

        _shiftKeySelectCells: function (args, targetIndex) {
            var proxy = this, model = proxy.model,
                updatedRecords = proxy.getUpdatedRecords(),
                //Get First Row Details for shift key functions.
                firstRowElementIndex = proxy._shiftKeyFirstElementDetails.firstElementRowIndex,
                firstRowCellIndex = ej.isNullOrUndefined(proxy._shiftKeyFirstElementDetails.firstElementCellIndex) ? -1 : 
                                    proxy._shiftKeyFirstElementDetails.firstElementCellIndex,
                secondRowElementIndex = args.rowIndex,
                secondRowCellIndex = args.cellIndex,
                shiftKeyRowIndexes = [firstRowElementIndex, secondRowElementIndex],
                shiftKeyCellIndexes = [firstRowCellIndex, secondRowCellIndex];

            //Sort the two Selected row and cell Indexes.
            shiftKeyRowIndexes.sort(function (a, b) {
                return (a - b);
            });
            shiftKeyCellIndexes.sort(function (a, b) {
                return (a - b);
            });
            proxy._isShiftKeyNavigation = true;
            proxy._selectedCellDetails = [];
            model.selectedCellIndexes = [];
            $("#" + proxy._id).find(".e-selectingcell").removeClass("e-selectingcell");

            for (var rowIndex = shiftKeyRowIndexes[0]; rowIndex <= shiftKeyRowIndexes[1]; rowIndex++) {
                var record = updatedRecords && updatedRecords[rowIndex],
                    currentRowIndex = model.currentViewData.indexOf(record);
                if (ej.isNullOrUndefined(record) || record.isSummaryRow)
                    continue;
                for (var cellIndex = shiftKeyCellIndexes[0]; cellIndex <= shiftKeyCellIndexes[1]; cellIndex++) {
                    proxy.selectCells([{ rowIndex: rowIndex, cellIndex: cellIndex }]);
                }
            }
        },

        selectCells: function (indexes, preservePreviousSelectedCells) {
            var proxy = this,
                model = proxy.model,
                updatedRecords = proxy.getUpdatedRecords(),
                $gridRows = proxy.getRows(), $targetRow, targetCell, record, length = indexes.length, columns=model.columns;

            if (model.selectionSettings.selectionType == "single")
                length = 1;
            if ((!preservePreviousSelectedCells || ej.isNullOrUndefined(preservePreviousSelectedCells)) &&
                proxy._isShiftKeyNavigation == false) {
            proxy._selectedCellDetails = [];
                model.selectedCellIndexes = [];
            $("#" + proxy._id).find(".e-selectingcell").removeClass("e-selectingcell");
            }
            if (model.selectionSettings.selectionMode == "cell" && model.allowSelection && $gridRows.length > 0) {
                for (var index = 0; index < length; index++) {
                    if (indexes[index].rowIndex == -1)
                        continue;
                    var record = updatedRecords && updatedRecords[indexes[index].rowIndex],
                        currentRowIndex = model.currentViewData.indexOf(record);
                    if (ej.isNullOrUndefined(record) || record.isSummaryRow)
                        continue;
                    var frozenColumnRowIndex = indexes[index].cellIndex >= proxy._frozenColumnsLength ? 1 : 0,
                       targetCellIndex = indexes[index].cellIndex >= proxy._frozenColumnsLength ? indexes[index].cellIndex - proxy._frozenColumnsLength : indexes[index].cellIndex;
                    if (proxy._frozenColumnsLength > 0) {
                        $targetRow = $gridRows[frozenColumnRowIndex][currentRowIndex];
                    }
                    else
                        $targetRow = $gridRows[currentRowIndex];

                    if (!ej.isNullOrUndefined(record) && ej.isNullOrUndefined($targetRow))
                        $targetRow = $($.render[proxy._id + "_Template"](record))[0];

                    targetCell = $targetRow.childNodes[targetCellIndex];
                    if (indexes[index].cellIndex != -1 && columns[indexes[index].cellIndex].allowCellSelection && columns[indexes[index].cellIndex].visible &&
                           !proxy._cellSelectingEventTrigger({ rowIndex: indexes[index].rowIndex, cellIndex: indexes[index].cellIndex, rowElement: $targetRow, cellElement: targetCell })) {
                        $(targetCell).addClass("e-selectingcell");

                        var selectedCellInfo = {
                            rowIndex: indexes[index].rowIndex,
                            cellIndex: indexes[index].cellIndex,
                            cellElement: targetCell,
                            data: record
                        };
                        var currentCellIndex;
                        if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9)
                            currentCellIndex = proxy._getCellIndex(proxy._selectedCellDetails, "cellElement").indexOf(targetCell);
                        else
                            currentCellIndex = proxy._selectedCellDetails.map(function (e) { return e.cellElement; }).indexOf(targetCell);

                        
                        if (currentCellIndex == -1) {
                            proxy._selectedCellDetails.push(selectedCellInfo);
                            model.selectedCellIndexes.push({ rowIndex: selectedCellInfo.rowIndex, cellIndex: selectedCellInfo.cellIndex });
                        }
                        proxy._cellSelectedEventTrigger({ rowIndex: indexes[index].rowIndex, cellIndex: indexes[index].cellIndex, rowElement: $targetRow, cellElement: targetCell }, proxy._previousSelectedCellDetails);
                        proxy._previousSelectedCellDetails = {
                            rowElement: $targetRow,
                            cellElement: targetCell,
                            cellIndex: indexes[index].cellIndex,
                            rowIndex: indexes[index].rowIndex,
                        }
                        proxy._updateHorizontalScrollBar(columns[indexes[index].cellIndex].field);
                    }
                }
            }
            if (proxy._isShiftKeyNavigation == false) {
            //For selecting multiple cells with Shift key.
            proxy._shiftKeyFirstElementDetails.firstElementRowIndex = proxy._focusingRowIndex;
            proxy._shiftKeyFirstElementDetails.firstElementCellIndex = proxy._cellIndex;
            //Get back Default values for key board navigation.           
            proxy._rowIndexOfLastSelectedCell = selectedCellInfo ? selectedCellInfo.rowIndex : proxy._rowIndexOfLastSelectedCell;
            proxy._lastSelectedCellIndex = proxy._cellIndex;
            }
        },

        //SELECT THE ROW IN TREEGRID
        selectRows: function (rowIndex, toIndex, isCheckbox) {

            var proxy = this,
                model = proxy.model;

            var $gridRows = proxy.getRows(),
            selectedItem;
            if (model.selectionSettings.selectionMode == "cell" && rowIndex != -1)
                return;
            if (ej.TreeGrid.getRowByIndex(proxy, rowIndex).hasClass("e-summaryrow"))
                return;
            if ((model.editSettings.allowEditing || model.editSettings.allowAdding) && !proxy._isRowEdit && model.editSettings.beginEditAction != "click") {
                if ($("#" + proxy._id + "EditForm").length > 0 && proxy.endEdit()) {
                    $gridRows = proxy.getRows();
                    return;
                }
            }
            if (this._frozenColumnsLength > 0)
                $gridRows = $(proxy.getRows()[0]);

             var updatedRecords = proxy.getUpdatedRecords();

            if (ej.isNullOrUndefined(toIndex) || ej.isNullOrUndefined(rowIndex)) {

                rowIndex = ej.isNullOrUndefined(rowIndex) ? toIndex : rowIndex;        

                switch (model.selectionSettings.selectionType) {

                    case ej.TreeGrid.SelectionType.Checkbox:
                        var currentRecord = updatedRecords[rowIndex];

                        proxy.clearSelection(-1)
                        if (isCheckbox) {
                            var checkboxState = (currentRecord.checkboxState == "unchecked") ? "checked" : "unchecked";
                            proxy._traverseSelection(currentRecord, checkboxState, false);
                            proxy.selectAllRows();
                        }

                        if (updatedRecords[rowIndex] && !updatedRecords[rowIndex].isSelected) {
                            if (model.allowSelection)
                                ej.TreeGrid.getRowByIndex(proxy, rowIndex).find('.e-rowcell,.e-detailsrowcell').addClass(" e-selectionbackground e-active");
                            updatedRecords[rowIndex].isSelected = true;
                            model.selectedItem = updatedRecords[rowIndex];
                        }
                        if (proxy._prevSelectedItem && proxy._prevSelectedItem != model.selectedItem) {
                            proxy._prevSelectedItem.isSelected = false;
                        }
                        proxy._prevSelectedItem = updatedRecords[rowIndex];
                        proxy.selectedRowIndex(rowIndex);
                        model.selectedItems = proxy.getSelectedRecords();
                        return false;

                        case ej.TreeGrid.SelectionType.Multiple:                        
                        if (proxy._multiSelectCtrlRequest && rowIndex != -1) {
                            var currentRecord = updatedRecords[rowIndex],
                            selectedRowIndex = $.inArray(currentRecord, model.selectedItems);
                            proxy._prevSelectedItem = updatedRecords[rowIndex];
                                if (selectedRowIndex != -1) {
                                    proxy.clearSelection(rowIndex);
                            }
                            if (selectedRowIndex == -1) {
                                model.selectedItems.push(currentRecord);
                                    if (model.allowSelection)
                                        ej.TreeGrid.getRowByIndex(proxy, rowIndex).attr("aria-selected", "true").find('.e-rowcell,.e-detailsrowcell').addClass(" e-selectionbackground e-active").attr("tabindex", "0");
                                currentRecord.isSelected = true;
                                model.selectedItem = updatedRecords[rowIndex];
                                }
                                break;
                            }
                            

                        case ej.TreeGrid.SelectionType.Single:
                            proxy.clearSelection(-1);
                            model.selectedItem = null;
                            if (rowIndex <= updatedRecords.length - 1) {
                            (rowIndex != -1) && model.selectedItems.push(updatedRecords[rowIndex]);
                            proxy._prevSelectedItem = updatedRecords[rowIndex];
                            proxy._shiftSelectedRecord = null;
                                if (model.allowSelection)
                                    ej.TreeGrid.getRowByIndex(proxy, rowIndex).find('.e-rowcell,.e-detailsrowcell').addClass(" e-selectionbackground e-active");
                                if (updatedRecords[rowIndex]) {
                                    updatedRecords[rowIndex].isSelected = true;  //Selection issue Changes
                                    model.selectedItem = updatedRecords[rowIndex];
                                }
                                
                            if (proxy._prevSelectedItem && proxy._prevSelectedItem != model.selectedItem) {
                                proxy._prevSelectedItem.isSelected = false;
                                }

                            }
                            break;
                    }
                if (model.selectedItems.length && model.selectedItems.indexOf(updatedRecords[rowIndex]) != -1) {
                    proxy._prevSelectedItem = updatedRecords[rowIndex];
                    proxy._shiftSelectedRecord = null;
                    if (this.selectedRowIndex() != rowIndex) {
                        this.selectedRowIndex(rowIndex);
                    }
              
                }
                else if (model.selectedItems.length == 0 && this.selectedRowIndex() != -1) {
                    this.selectedRowIndex(-1);
            } else {
                    this.selectedRowIndex(model.updatedRecords.indexOf(model.selectedItems[model.selectedItems.length - 1]));
                }

            } else {

                if (model.selectionSettings.selectionType == ej.TreeGrid.SelectionType.Multiple) {
                proxy.clearSelection(-1);
                   var records = rowIndex - toIndex < 0 ? updatedRecords.slice(rowIndex, toIndex + 1) : updatedRecords.slice(toIndex, rowIndex + 1),
                    row, updatedRowIndex, tempRows;
                    for (var count=0; count < records.length; count++) {
                        if (proxy.getExpandStatus(records[count])) {
                            records[count].isSelected = true;
                            updatedRowIndex = updatedRecords.indexOf(records[count]);
                            row = ej.TreeGrid.getRowByIndex(proxy, updatedRowIndex);
                    if (this._frozenColumnsLength) {
                                tempRows = $(row[0]).add(row[1]);
                                row = row[0];
                    } else {
                                tempRows = row;
                    }
                            tempRows && $(tempRows).find('.e-rowcell,.e-detailsrowcell').addClass(" e-selectionbackground e-active");
                    model.selectedItem = model.updatedRecords[updatedRowIndex];
                    this.selectedRowIndex(updatedRowIndex);
                    }
                }

                }
            }

            model.selectedItems = proxy.getSelectedRecords();
            //to multiselect chart side while rowselecting on grid side
            if(!model.isFromGantt)proxy._multiSelectCtrlRequest = false;
            if (model.isFromGantt) {
                proxy._cancelSaveTools();
            }
            return false;
        },

        /* Get all selected records from treegrid*/
        getSelectedRecords: function () {
            var proxy = this,
                model = this.model,
                filteredRecords,
                selectionType = model.selectionSettings.selectionType,
                selectedRecords = [];

            if ((model.allowFiltering && model.filterSettings.filteredColumns.length > 0) || proxy._searchString.length > 0) {
                if (model.isFromGantt || selectionType == ej.TreeGrid.SelectionType.Single)
                    filteredRecords = model.updatedRecords;
                else if (selectionType == ej.TreeGrid.SelectionType.Multiple || selectionType == ej.TreeGrid.SelectionType.Checkbox)
                    filteredRecords = proxy._flatFilteredRecords;
            }
            else
                filteredRecords = model.flatRecords;

            if (selectionType == "checkbox") {
                selectedRecords = filteredRecords.filter(function (record) {
                    return record.checkboxState == "checked";
                });
            }
            else {
                selectedRecords = filteredRecords.filter(function (record) {
                    return record.isSelected;
                });
            }
            return selectedRecords.slice();
        },
        /* Clear all selected rows and cells*/
        clearAllSelection: function () {
            var proxy = this,
                model = this.model;
            if (proxy.model.allowSelection && proxy.model.selectionSettings.selectionType == "multiple" && this._multiSelectPopup && this._multiSelectPopup.is(":visible")) {
                proxy._clearMultiSelectPopup();
            }
            proxy.selectRows(-1);
            model.selectedItem = null;

            //To clear cell Selections
            proxy._selectedCellDetails = [];
            model.selectedCellIndexes = [];            
            proxy._rowIndexOfLastSelectedCell = -1;
            proxy._lastSelectedCellIndex = -1;
            proxy._focusingRowIndex = -1;
            $("#" + proxy._id).find(".e-selectingcell").removeClass("e-selectingcell");

            proxy._cancelSaveTools();
        },
        //GET THE CURRENTCELLINDEX
        getCellIndex: function (e, target) {

            var $target = $(e.target),
                cellIndex = -1,
                model =this.model;

            if (target) $target = $(target);
            if ($target.hasClass("e-detailsrowcell") || $target.closest("td").hasClass("e-detailsrowcell"))
                return -1;
            if ($target.prop("tagName") == "TD") {
                cellIndex =  $target.index();
            } else if ($target.prop('tagName') == "DIV" && $target.hasClass('e-cell')) {

                var $td = $target.closest('td');
                cellIndex = $td.index();

            } else if ($target.prop('tagName') == "DIV" && $($target.closest('td')[0]).hasClass("e-templatecell")) {

                var $td = $target.closest('td');
                cellIndex = $td.index();
            }
            else if ($($target.closest('td')[0]).hasClass("e-templatecell") && $($target.closest("tr")[0]).hasClass("e-templaterow")) {

                var $td = $target.closest('td');
                cellIndex = $td.index();
            }
            else if ($target.parent().prop("tagName") == "TD") {
                var $td = $target.closest('td');
                cellIndex = $target.parent().index();
            }
            else if ($target.prop("tagName") == "TH" || ($target.prop("tagName") == "DIV" && $($target.closest("th")[0]).css("cursor") == "col-resize")) {
                var $th,
                    $targetElement = $target.prop("tagName") == "TH" ? $($target) : $target.closest("th");
                var location = $target[0].getBoundingClientRect();
                var scrollLeft = navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollLeft : document.documentElement.scrollLeft;
                if (this._orgX < location.left + 5 + scrollLeft)
                    cellIndex = $targetElement.prevAll(":visible:first")[0] ? $targetElement.prevAll(":visible:first")[0].cellIndex : $targetElement.index();
                else
                    cellIndex = $targetElement.index();
            }
            else if ($target.closest("td.e-rowcell").length > 0) {
                var $td = $target.closest('td.e-rowcell');
                cellIndex = $td.index();
            }

            /*get cellIndex with frozen columns*/
            if (cellIndex != -1 && this._frozenColumnsLength > 0 && ($target.closest(".e-movablecontentdiv").length > 0 || $target.closest(".e-movableheaderdiv").length > 0 || $target.closest(".e-movablefooterdiv").length > 0))
                cellIndex += this._frozenColumnsLength;
            return cellIndex;
        },


        //GET THE CURRENT ROW INDEX
        getRowIndex: function (e) {

            var proxy = this,
                $target = $(e.target),
                $gridRows = proxy.getRows(),
                index = -1,
                model = this.model;

            if ($target.closest('.e-gridcontainer').length > 0) {
                if (this._frozenColumnsLength > 0) {
                    if ($target.closest(".e-frozencontentdiv").length > 0 || $target.closest(".e-frozencontainer").length > 0)
                        $gridRows = $($gridRows[0]);
                    else if ($target.closest(".e-movablecontentdiv").length > 0 || $target.closest(".e-movablecontainer").length > 0)
                        $gridRows = $($gridRows[1]);
                        else
                            return index;
                    }
                    index = $gridRows.index($target);
                    if (index == -1) {
                        var row = $target.closest('tr');
                        index = $gridRows.index(row);

                    }       

                return index;
            }
        },

        //Cancel the edited cell and row
        _cancelEditState: function (e) {
            var proxy = this;
            if (!ej.isNullOrUndefined(e)) {
                /*Change scrollLeft of content while header is auto scrolled on filtering element focus*/
                var scrollLeft = proxy.getScrollElement().ejScroller("option", "scrollLeft"),
                    headerScrollLeft = 0;
                if (this._frozenColumnsLength > 0)
                    headerScrollLeft = proxy._$gridHeaderContainer.find("#e-movableheader" + this._id).scrollLeft();
                else
                    headerScrollLeft = proxy._$gridHeaderContainer.scrollLeft();
                if (scrollLeft != headerScrollLeft) {
                    proxy.getScrollElement().ejScroller("option", "scrollLeft", headerScrollLeft);
                    if (proxy.model.showTotalSummary && proxy._$footerContainer) {
                        if (this._frozenColumnsLength > 0)
                            proxy._$footerContainer.find("#e-movablefooter" + this._id).scrollLeft(headerScrollLeft);
                        else
                            proxy._$footerContainer.scrollLeft(headerScrollLeft);
                    }
                }
            }
            if (proxy.model.isEdit)
                proxy.cancelEditCell();
            else if (proxy._isRowEdit)
                proxy.cancelRowEditCell();
        },

        //cancel the editMode of the cell
        cancelEditCell: function (e) {

            var proxy = this,
                model = proxy.model,
                tr,
                data = proxy.model.selectedItem,
                cell, cellIndex = proxy._cellEditingDetails.columnIndex,
                args = {}, column = model.columns[cellIndex];
            if (model.isFromGantt && !model.isEdit)
                return true;
            args = {
                columnName: column.field,
                value: proxy.getCurrentEditCellData(),
                data: proxy._cellEditingDetails.data,
                previousValue: proxy._cellEditingDetails.cellValue,
                columnObject: column,                
            };
            if (this._frozenColumnsLength > 0) {
                if (this._frozenColumnsLength <= proxy._cellEditingDetails.columnIndex) {
                    cellIndex = proxy._cellEditingDetails.columnIndex - this._frozenColumnsLength;
                    tr = $(proxy.getRows()[1])[proxy._cellEditingDetails.rowIndex];
                    if ($(tr).hasClass("e-editedrow"))
                        $(tr).removeClass("e-editedrow");
                    cell = tr.cells[cellIndex];
                    $(cell).removeClass("e-editedcell").empty().html(
                       $($.render[proxy._id + "_Template"](args.data))[0].cells[cellIndex].innerHTML
                    );
                } else {
                    tr = $(proxy.getRows()[0])[proxy._cellEditingDetails.rowIndex];
                    if ($(tr).hasClass("e-editedrow"))
                        $(tr).removeClass("e-editedrow");
                    cell = tr.cells[cellIndex];
                    $(cell).removeClass("e-editedcell").empty().html(
                      $($.render[proxy._id + "_JSONFrozenTemplate"](args.data))[0].cells[cellIndex].innerHTML
                    );
                }
            } else {
                tr = $(proxy.getRows())[proxy._cellEditingDetails.rowIndex];
                if ($(tr).hasClass("e-editedrow"))
                    $(tr).removeClass("e-editedrow");
                cell = tr.cells[cellIndex];
                $(cell).removeClass("e-editedcell").empty().html(
                    $($.render[proxy._id + "_Template"](args.data))[0].cells[cellIndex].innerHTML
                );
            }
            proxy._cellEventTrigger($(cell)[0], args.data, args.columnObject);
            proxy.model.isEdit = false;
            proxy._cancelSaveTools();
            proxy._trigger("refresh");
        },

        // To destroy the edit forms and popup menu
        _destroyWidgetElements:function()
        {
            var proxy = this, model = this.model, column = model.columns, columnLength = column.length,
                columnField;
            for (var i = 0; i < columnLength; i++) {
                columnField = proxy._getFieldValue(column[i].field,i);
                var $element = $("#" + proxy._id + columnField);
                $element.data("ejWidgets") && $element[$element.data("ejWidgets")[0]]("destroy");
            }
        },

        //Cancel row edit.
        cancelRowEditCell: function () {

            var proxy = this, model = this.model,
            //  To delete the empty added row when allowDeleting is false.
            temp = model.editSettings.allowDeleting,
            form = $(document.getElementById(proxy._id + "EditForm")), $tr,
            frozenForm = $("#" + proxy._id + "EditFrozenForm"), $frozenTr;
            if (form.length > 0)
                this._destroyWidgetElements();
            $tr = $(form.closest("tr"));
            $frozenTr = frozenForm.closest("tr");

            var rowIndex = proxy.getIndexByRow($tr),
            data = model.currentViewData[rowIndex];
            if (rowIndex == -1 && form.length == 0)
                return;
            
            if ($tr.hasClass('e-addedrow')) {
                if (!proxy.model.editSettings.allowDeleting)
                    proxy.model.editSettings.allowDeleting = true;
            }
            
            //Cancel the edited row.
            if ($tr.hasClass('e-editedrow')) {
                $tr.removeClass("e-editedrow").empty().html(
                    $($.render[proxy._id + "_Template"](data))[0].innerHTML);
                if ($frozenTr.length > 0) {
                    $frozenTr.removeClass("e-editedrow").empty().html(
                        $($.render[proxy._id + "_JSONFrozenTemplate"](data))[0].innerHTML);
                }
                proxy._rowEventTrigger($tr, data);
            }
            else if ($tr.hasClass('e-rowedit')) {
                $tr.removeClass("e-rowedit").empty().html(
                    $($.render[proxy._id + "_Template"](data))[0].innerHTML);
                if ($frozenTr.length > 0) {
                    $frozenTr.removeClass("e-rowedit").empty().html(
                        $($.render[proxy._id + "_JSONFrozenTemplate"](data))[0].innerHTML);
                }
                proxy._rowEventTrigger($tr, data);
            }               
            //Cancel the newly added row.
            else if ($tr.hasClass('e-addedrow')) {
                proxy._isRefreshAddedRecord = false;
                proxy._isEmptyRow = true;
                proxy.deleteRow(null, true, null);
                proxy._isEmptyRow = false;
            }
            model.isEdit = proxy._isRowEdit = false;
            model.editSettings.allowDeleting = temp;
            proxy._updateWrapRowHeights("total,header", null, rowIndex);
            proxy._cancelSaveTools();
            proxy._trigger("refresh");
            if (proxy._commandColumnLength > 0) {
                var tr = ej.TreeGrid.getRowByIndex(proxy, proxy.getUpdatedRecords().indexOf(model.currentViewData[rowIndex]))
                proxy._refreshUnboundTemplate(tr);
            }
        },

        //RERENDERED THE EDITED RECORD
        refreshRow: function (index) {
            var proxy = this,
                model = proxy.model,
                updatedRecords = model.allowPaging ? proxy._updatedPageData : model.updatedRecords,
                data = updatedRecords[index], eventArgs = {},
                editIndex = proxy.getIndexByRow($("#" + proxy._id + "EditForm").closest("tr"));
            if (model.enableVirtualization || model.allowPaging)
            {
                index = model.currentViewData.indexOf(data);
            }
            if (data && index > -1) {
                ej.TreeGrid.refreshRow(this, index);

                //var currentRefreshingRow = $(proxy.getRows()[index]);

                //if (model.showDetailsRow && model.detailsTemplate && data.isDetailsExpanded) {
                //    var detailsRow = currentRefreshingRow.next("tr");
                //    if (detailsRow.hasClass("e-detailsrow"))
                //        detailsRow.remove();
                //}
                //currentRefreshingRow.replaceWith($($.render[proxy._id + "_Template"](data)));
                //proxy.setGridRows($(proxy.getContentTable().get(0).rows));

                //eventArgs.rowElement = $(proxy.getRows()[index])[0];
                //eventArgs.data = data;
                //proxy._trigger("refresh");
                //proxy._refreshedCellEventTrigger(eventArgs);

                // Check whether the edited index and refreshed index are same
                // If it is same either rowEdit or cellEdit is enable in particular row.
                // So update the _isRowEdit and isEdit value is false, and also update the toolbar item.s
                if (editIndex == index) {
                    proxy._isRowEdit = proxy.model.isEdit = false;
                    proxy._cancelSaveTools();
                }
            }
        },
        /* refresh the details row while cell editing */
        _refreshDetailsRow: function (index) {
            var proxy = this,
                model = this.model,
                data = proxy.model.currentViewData[index], eventArgs = {},
                gridRows = {};

            if (data) {
                if (this._frozenColumnsLength > 0)
                    gridRows = $(proxy.getRows()[1]);
                else
                    gridRows = $(proxy.getRows());

                var currentRefreshingRow = $(gridRows[index]).next("tr");
                if (currentRefreshingRow.hasClass("e-detailsrow")) {
                    currentRefreshingRow.remove();
                    var detailsRow = $($.render[proxy._id + "_detailRowTemplate"](data));
                    $(gridRows[index]).after(detailsRow);
                    proxy.setGridRows($(proxy.getContentTable().get(0).rows));
                    this._gridRows = this.getContentTable().get(0).rows;
                    if (this._frozenColumnsLength > 0)
                        this._gridRows = [this._gridRows, this.getContentTable().get(1).rows];
                    proxy._trigger("refresh");
                    if (model.detailsDataBound) {
                        this._trigger("detailsDataBound", { detailsElement: detailsRow, data: data });
                    }
                }
            }
        },
        //Trigger rowDataBound and queryCellInfo event when row is refreshed
        _refreshedCellEventTrigger:function(eventArgs)
        {
            var proxy = this, model = this.model;
            if (model.queryCellInfo != null || model.rowDataBound != null || model.detailsDataBound != null) {
                if (model.rowDataBound != null){
                    proxy._trigger("rowDataBound", {
                        rowElement: eventArgs.rowElement,
                        data: eventArgs.data
                    });
                }

                var tdCells = eventArgs.rowElement.cells,
                $tdRowcells = $(eventArgs.rowElement).find(".e-rowcell"),
                cellIndex = 0,
                length = tdCells.length,
                column = null,
                columns = proxy.model.columns;

                if (model.queryCellInfo != null) {

                    for (cellIndex; cellIndex < length; cellIndex++) {
                        if ($(tdCells[cellIndex]).hasClass("e-rowcell")) {
                            column = columns[$tdRowcells.index(tdCells[cellIndex])];
                        }
                        if (column) {
                            proxy._cellEventTrigger(tdCells[cellIndex], eventArgs.data, column);
                        }
                    }
                }
                if (model.detailsDataBound && $(eventArgs.rowElement).next("tr").hasClass("e-detailsrow")) {
                    var detailsRowElement = $(eventArgs.rowElement).next("tr");
                    if (this._frozenColumnsLength > 0)
                        detailsRowElement = $(detailsRowElement[1]);
                    this._trigger("detailsDataBound", { detailsElement: $(eventArgs.rowElement).next("tr"), data: eventArgs.data });
                }
            }
        },

        _refreshGridPager: function () {
            if (this.getPager() != null) {
                var proxy = this,
                    model = proxy.model,
                     pagerModel = this.getPager().ejPager("model"), args = {};
                args.currentPage = this._currentPage();
                var updatedRecord = proxy._isHierarchyFiltering ? proxy.getExpandedRecords(proxy._filterParentRecords).length : model.updatedRecords.length
                if (model.currentViewData.length == 0 && updatedRecord > 0) {
                    if (pagerModel.totalPages != 1) {
                        proxy.gotoPage(args.currentPage - 1);
                        return;
                    }                   
                }
                args.totalRecordsCount = proxy._isLoadonDemand ? proxy._pageRecordCountOnDemand :
                    proxy._isRemoteData ? model.pageSettings.totalRecordsCount : proxy._gridRecordsCount;
                this.getPager().ejPager("option", args).ejPager("refreshPager");                
                model.pageSettings.totalPages = pagerModel.totalPages || null;
                if (!proxy._isRemoteData)
                    model.pageSettings.totalRecordsCount = pagerModel.totalRecordsCount || null;
                proxy._updatePagerTextAlignment();
            }
        },
        /* get visible child record count in udpated records */
        _getVisibleChildRecordCount: function (data, count, collection) {
            var proxy = this, model = this.model, childRecords, length;

            if (data.hasChildRecords) {
                childRecords = data.childRecords;
                length = childRecords.length;
                for (var i = 0; i < length; i++) {
                    if (collection.indexOf(childRecords[i]) !== -1)
                        count++;
                    if (childRecords[i].hasChildRecords) {
                        count = proxy._getVisibleChildRecordCount(childRecords[i], count, collection);
                    }
                }
            }
            else {
                if (collection.indexOf(data) !== -1) {
                    count++;
                }
            }
            return count;
        },
        //Insert templated row in DOM for newly added record
        _renderAddedRow: function (index, data) {
            var proxy = this, model = this.model;
            proxy._updateCurrentViewData();
            if (model.enableVirtualization || model.allowPaging) {
                proxy.updateAltRow();
                var tempArgs = {};
                tempArgs.requestType = ej.TreeGrid.Actions.Refresh;
                proxy.sendDataRenderingRequest(tempArgs);
            }
            else {
                proxy.renderNewAddedRow(index, data);
            }
            proxy.updateHeight();
            proxy._updateFixedTableBorder();
        },

        //insert new item in DOM 
        renderNewAddedRow:function(index, data)
        {
            var proxy = this, model = this.model, length,
                gridRows = proxy.getRows(),
                addedGridRow = $.render[this._id + "_Template"](data),
                isFrozenColumn = this._frozenColumnsLength > 0,
                addedFrozenRow,
                frozenTableRows;
            if (isFrozenColumn) {
                gridRows = $(proxy.getRows()[1]);
                frozenTableRows = $(proxy.getRows()[0]);
                addedFrozenRow = $.render[this._id + "_JSONFrozenTemplate"](data);
            }


            if (!ej.isNullOrUndefined(gridRows) && gridRows.length > 0) {
                if (gridRows.length == index) {
                    var insertPositionRow = gridRows.eq(index - 1),
                        insertPositionFrRow;
                    if (isFrozenColumn)
                        insertPositionFrRow = frozenTableRows.eq(index - 1);
                    /*check whether the next row is detail row or not */
                    if($(insertPositionRow).next("tr").hasClass("e-detailsrow"))
                    {
                        $(insertPositionRow).next("tr").after(addedGridRow);
                        isFrozenColumn && $(insertPositionFrRow).next("tr").after(addedFrozenRow);
                    }else
                    {
                        $(insertPositionRow).after(addedGridRow);
                        isFrozenColumn && $(insertPositionFrRow).after(addedFrozenRow);
                    }
                } else {
                    gridRows.eq(index).before(addedGridRow);
                    isFrozenColumn && frozenTableRows.eq(index).before(addedFrozenRow);
                }
            } else {
                if (this._frozenColumnsLength > 0)
                    proxy._renderFrozenRecords();
                else {
                    proxy.getContentTable().find('tbody').empty().append(proxy._getEmptyTbody());
                    var temp = document.createElement('div');
                    proxy.getContentTable().find("colgroup").first().replaceWith(proxy._getMetaColGroup());
                    var $tbody = proxy.getContentTable().children('tbody');
                    $tbody.empty();
                    temp.innerHTML = ['<table>', $.render[proxy._id + "_Template"](proxy.model.currentViewData),
                        '</table>'].join("");
                    proxy.getContentTable().get(0).replaceChild(temp.firstChild.firstChild,
                        proxy.getContentTable().get(0).lastChild);
                }
            }
            this._gridRows = this.getContentTable().get(0).rows;
            if (this._frozenColumnsLength > 0)
                this._gridRows = [this._gridRows, this.getContentTable().get(1).rows];

            proxy.setGridRows($(proxy.getContentTable().get(0).rows));
          
        },


        
        onScrollHelper: function (scrolltop, isFromChart) {
            var proxy = this;
            proxy._isFromChart = isFromChart;
            proxy.getScrollElement().ejScroller("scrollY", scrolltop, true);
            var isHorizontalScroll = proxy.getScrollElement().ejScroller("isHScroll");
            if (!isHorizontalScroll && this.model.isFromGantt)
                proxy.getScrollElement().scrollTop(scrolltop);
        },

        isVScroll: function () {
            if (this.getScrollElement().hasClass("e-scroller")) {
                return this.getScrollElement().ejScroller("isVScroll");
            }
            else
            {
                return false;
            }
        },

        //REFRESH THE SCROLLER FOR TREEGRIDCONTENT
        refreshScroller:function(panSize){
            
            var proxy = this;
            proxy._$gridContent.removeClass("e-borderbox");
            
            var scrollTop = proxy.getScrollElement().ejScroller("option", "scrollTop");
            var scrollLeft = proxy.getScrollElement().ejScroller("option", "scrollLeft");

            proxy.getScrollElement().ejScroller("option", { "persist": true });
            proxy.getScrollElement().ejScroller("option", { "width": panSize });
            
            var maxScrollWidth = proxy.getMaxScrollWidth();
            if (scrollLeft > maxScrollWidth)
                scrollLeft = maxScrollWidth > 0 ? maxScrollWidth : 0;

            proxy._$gridContent.css("height", proxy._viewPortHeight);
            proxy.getScrollElement().ejScroller("refresh");
            var isHorizontalScroll = proxy.getScrollElement().ejScroller("isHScroll");
            proxy.getScrollElement().ejScroller("option", { "scrollTop": scrollTop });
            isHorizontalScroll && proxy.getScrollElement().ejScroller("option", { "scrollLeft": scrollLeft });
            proxy._$gridHeaderContainer.scrollLeft(scrollLeft);

            if (!isHorizontalScroll)
                this.getScrollElement().scrollTop(scrollTop);
            else {
                this.getScrollElement().scrollTop(0);
            }
        },
        getMaxScrollHeight: function () {
            var proxy = this;
            return proxy.getScrollElement().children(".e-content").children().height() - this.getScrollElement().children(".e-content").height();
        },
        getMaxScrollWidth:function()
        {
            var proxy=this;
            return proxy.getScrollElement().children(".e-content").find(".e-table").width() - this.getScrollElement().children(".e-content").width();
        },
        refreshHeight:function(){

            var proxy = this;
            proxy.getScrollElement().ejScroller("refresh");            

        },

		// Get the column using header text
        // argument headerText is column header text value

        getColumnByHeaderText: function (headerText) {
            var proxy = this;
            var length = proxy.model.columns.length;
            var columns = proxy.model.columns;
            for (var column = 0; column < length; column++) {
                if (columns[column]["headerText"] == headerText)
                    break;
            }
            return column == columns.length ? null : columns[column];
        },

        //Hide the column by using header text
        //argument headerText is column header text value
        
        hideColumn: function (headerText) {
            var proxy = this,
                model = proxy.model,
                column = this.getColumnByHeaderText(headerText),
                index = $.inArray(column, model.columns),
                hiddenColumnIndex = $.inArray(headerText, proxy._hiddenColumns);

            /* check this is single column in frozen or movable column*/
            if (column && !proxy._isColumnHidable(column))
                return;
            if (index != -1 && index != model.treeColumnIndex && hiddenColumnIndex == -1) {
                /* Cancel edited cell before sort the column*/
                proxy._cancelEditState();
                proxy._hiddenColumns.push(headerText);
                proxy.model.columns[index].visible = false;
               
				//Table column width not properly set in firefox, so just remove and add the e-table class from both header and content table
                // Commented the changes due to frozen column alignment issue while hiding
                //proxy.getHeaderTable().removeClass("e-table");
                //proxy.getContentTable().removeClass("e-table");
                var headerColgroup = proxy.getHeaderTable().find('colgroup').find("col");
                $(headerColgroup).eq(index).hide();
                var headerRows = proxy.getHeaderTable().find("tr").not(".e-stackedHeaderRow").find(".e-headercell");
                $(headerRows).eq(index).addClass("e-hide");
                if (model.allowFiltering && model.filterSettings.filterType == "filterbar") {
                    var headerrows = proxy.getHeaderTable().find('thead').find("th.e-filterbarcell");
                    $(headerrows).eq(index).addClass("e-hide");
                }
                if (proxy.model.columns[index].isFrozen == true) {
                    proxy.setWidthToColumns();
                }
                var gridrows = proxy.getContentTable().find("colgroup").find("col"),
                    isFrozenTable = true, cellIndex = index, footerRows;
                $(gridrows).eq(index).hide();
                gridrows = proxy.getRows();
                footerRows = this._getFooterRows();
                //hidding the specified column
                if (this._frozenColumnsLength > 0) {
                    if (index < this._frozenColumnsLength) {
                        gridrows = $(proxy.getRows()[0]);
                        footerRows = $(footerRows[0]);
                        if (proxy._gridRows && $(proxy.getTreeGridRows()[0]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").length > 0) {
                            var tempColSpan = parseInt($(proxy.getTreeGridRows()[0]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan"));
                            $(proxy.getTreeGridRows()[0]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan", tempColSpan - 1);
                        } else if (proxy.model.currentViewData.length == 0 && (ej.isNullOrUndefined(proxy._gridRows) || proxy._gridRows.length == 0)) {
                            var tempColSpan = parseInt($(proxy.getContentTable()[0]).find('tbody').find('td').attr("colspan"));
                            $(proxy.getContentTable()[0]).find('tbody').find('td').attr("colspan", tempColSpan - 1);
                        }
                    }
                    else {
                        gridrows = $(proxy.getRows()[1]);
                        footerRows = $(footerRows[1]);
                        isFrozenTable = false;
                        cellIndex = index - this._frozenColumnsLength;
                        if (proxy._gridRows && $(proxy.getTreeGridRows()[1]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").length > 0) {
                            var tempColSpan = parseInt($(proxy.getTreeGridRows()[1]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan"));
                            $(proxy.getTreeGridRows()[1]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan", tempColSpan - 1);
                        } else if (proxy.model.currentViewData.length == 0 && (ej.isNullOrUndefined(proxy._gridRows) || proxy._gridRows.length == 0)) {
                            var tempColSpan = parseInt($(proxy.getContentTable()[1]).find('tbody').find('td').attr("colspan"));
                            $(proxy.getContentTable()[1]).find('tbody').find('td').attr("colspan", tempColSpan - 1);
                        }
                    }
                } else if (proxy.model.currentViewData.length == 0 && (ej.isNullOrUndefined(proxy._gridRows) || proxy._gridRows.length == 0)) {
                    proxy.getContentTable().find('tbody').find('td').attr("colspan", (proxy.model.columns.length - proxy._hiddenColumns.length));
                } else {
                    if (proxy._gridRows && $(proxy.getTreeGridRows()).find(".e-detailscellwrapper").parent(".e-detailsrowcell").length > 0) {
                        var tempColSpan = parseInt($(proxy.getTreeGridRows()).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan"));
                        $(proxy.getTreeGridRows()).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan", tempColSpan - 1);
                    }
                }
                
                gridrows.each(function () {
                    var td = $(this).children("td").eq(cellIndex);
                    $(td).addClass("e-hide");
                    if (model.showSummaryRow && $(td).hasClass('e-summaryrowcell') && isFrozenTable)
                        proxy._updateSummaryRowTitleCell(headerColgroup, td[0].parentElement);
                });
                //Hide the specific column from total summary row.
                if (model.showTotalSummary) {
                    var footerColGroup = proxy._$footertableContent.find("colgroup").find("col");
                    $(footerColGroup).eq(index).hide();
                    footerRows.each(function () {
                        var footerSummarytd = $(this).children("td").eq(cellIndex);
                        $(footerSummarytd).addClass("e-hide");
                        if ($(footerSummarytd).hasClass('e-footersummaryrowcell'))
                            proxy._updateSummaryRowTitleCell(footerColGroup, footerSummarytd[0].parentElement);
                    });
                }
               // Commented the changes due to frozen column alignment issue while hiding
               // proxy.getHeaderTable().addClass("e-table");
               //proxy.getContentTable().addClass("e-table");
                var gridContent = proxy.getScrollElement();
                if (model.isFromGantt) {
                    proxy._trigger("refreshScrollCss");
                }
                if (model.columnResizeSettings.columnResizeMode == ej.TreeGrid.ColumnResizeMode.FixedColumns && !model.isFromGantt)
                    this._updateTableWidth();
                gridContent.ejScroller("refresh");
                proxy._updateScrollCss();                
                proxy._updateHeaderScrollLeft();
                /* update scrollTop in gantt when treegrid horizontal scroller not exist*/
                if (model.isFromGantt && !gridContent.ejScroller("isHScroll")) {
                    gridContent.scrollTop(gridContent.data("ejScroller").scrollTop());
                }
                index = $.inArray(headerText, proxy._visibleColumns);
                if (index != -1)
                    proxy._visibleColumns.splice(index, 1);
                if (model.showColumnChooser || model.contextMenuSettings.showContextMenu) {
                    proxy._renderColumnChooserList(true, headerText);
                    proxy._updateColumnMenuVisibility();
                }
                proxy._addInitTemplate();
                if (model.showTotalSummary && model.collapsibleTotalSummary) {
                    proxy._updateSummaryTitleColumn();
                }
                if (model.editSettings.allowEditing && model.editSettings.editMode == "dialogEditing" && (ej.isNullOrUndefined(model.editSettings.dialogEditorTemplateID) || model.editSettings.dialogEditorTemplateID == "")) {
                    proxy._treeGridAddEditDialog();
                } else if (model.editSettings.allowEditing && model.editSettings.editMode == "dialogEditing" && (!ej.isNullOrUndefined(model.editSettings.dialogEditorTemplateID) && model.editSettings.dialogEditorTemplateID != "")) {
                    proxy._treeGridAddEditDialogTemplate();
                }
            }
            if (this.model.showStackedHeader)
                this._refreshStackedHeader();
            //Updating the column properties to Gantt's model.columns
            if (model.isFromGantt)
                proxy.updateToGanttColumns();
        },

        //Clear the filter based on fieldName.
        //clearFilter method without argumentment means, it clear the all filter in tree grid.
        clearFilter: function (fieldName) {
            var proxy = this,
                model = proxy.model;
            if (ej.isNullOrUndefined(fieldName)) {
                var filteredColumns = model.filterSettings.filteredColumns,
                    length = filteredColumns && filteredColumns.length;
                //Loop for clearing all the filter in tree grid
                while (filteredColumns && filteredColumns.length > 0) {
                    proxy.clearFilter(filteredColumns[0].field);
                }
                proxy._filteredColumnValue = [];
                proxy._filteredColumnValueID = [];
            } else {
                var column = proxy.getColumnByField(fieldName),
                    filteredColumn = $.grep(model.filterSettings.filteredColumns, function (filterColumn, index) {
                        return filterColumn.field === fieldName;
                    });
                if (column && filteredColumn.length > 0) {
                    /*Skip the filterColumn method for numeric textbox in immediate filterbar mode.
                      Because while set the empty value to numeric text box, it automatically triiger filterBarHanlder method*/
                    if (!(model.filterBarMode == "immediate" && column.filterEditType == "numericedit")) {
                        proxy._filterString = "";
                        proxy._fieldName = "";
                        proxy.filterColumn(fieldName, "equal", "", "and");
                        proxy._storePreviousFilteredValue(proxy._fieldName, proxy._filterString, this._operator);
                    }
                    proxy._clearFilterElementValue(column);
                    if ((model.filterSettings.filterType == "menu" && column.filterType != "excel") || (model.filterSettings.filterType == "excel" && column.filterType == "menu")) {
                        var filteredColumnIdIndex = proxy._filteredColumnValueID.indexOf(column.field);
                        proxy._filteredColumnValue.splice(filteredColumnIdIndex, 1);
                        proxy._filteredColumnValueID.splice(filteredColumnIdIndex, 1);
                    }
                    else if(model.filterSettings.filterType == "excel" && column.filterType !="menu" || (model.filterSettings.filterType == "menu" && column.filterType == "excel"))
                    {
                        var filteredColumnIdIndex = proxy._filteredColumnValueID.indexOf(column.field);
                        proxy._filteredColumnValueID.splice(filteredColumnIdIndex, 1);
                    }
                    proxy._isExcelFilter && proxy._excelFilter._predicates[0]&& delete proxy._excelFilter._predicates[0][column.field];
                    !model.showColumnChooser && proxy.getHeaderTable().find("div[data-ej-mappingname='"+column.field+"']").next(".e-filtericon").removeClass("e-column-filtered-icon").addClass("e-column-filter-icon");
                }
            }
        },

        //Get the column details based on the given field in tree grid
        getColumnByField: function (fieldName) {
            var proxy = this,
              model = proxy.model,
              columns = model.columns;
            for (var index = 0; index < columns.length; index++) {
                if (columns[index]["field"] == fieldName)
                    break;
            }
            return index == columns.length ? null : columns[index]; //If field name not available in column collection, it returns null value.
        },

        //Set the empty value to filter input elements
        _clearFilterElementValue: function (column) {
            var proxy = this, columnField = column.field.split('.').join(""),
                element = $("#" + proxy._id + "_" + columnField + "_filterbarcell");
            if (element && element.length) {
                switch (column.filterEditType) {
                    case "stringedit":
                        $(element).val("");
                        break;
                    case "booleanedit":
                        $(element).prop("checked", false);
                        break;
                    case "numericedit":
                        $(element).ejNumericTextbox("instance").option("value", "");
                        break;
                    case "dropdownedit":
                        $(element).ejDropDownList("instance").option("value", "");
                        break;
                    case "datepicker":
                        $(element).ejDatePicker("instance").option("value", "");
                        break;
                    case "datetimepicker":
                        $(element).ejDateTimePicker("instance").option("value", "");
                        break;
                }
            }
        },

        //To maintain the summary row title after hide/show the column using columnChooser.
        _updateSummaryRowTitleCell: function (colgroup, summaryRow) {
            var length = colgroup.length;
            for (var cell = 0; cell < length; cell++) {
                if ($(colgroup[cell]).css('display') == 'none')
                    continue;
                var summaryTitleElement = $(summaryRow).find(".e-summarytitle")[0],
                    currentColumnSummaryTitle = $(summaryRow.childNodes[cell]).find(".e-summarytitle")[0];
                if (currentColumnSummaryTitle)
                    return;
                else
                    $(summaryRow.childNodes[cell]).prepend(summaryTitleElement);
                return;

            }

        },
        //to update the frozen column width on resizing
        _updateFrozenColumnOnResize: function (index) {
            var proxy = this,
                model = proxy.model,
                columns = model.columns;
            var frozenWidth = this._getFrozenColumnWidth();
            if (frozenWidth + 18 > this._gridWidth) {
                var max_width = 0,
                    max_index = -1;
                for (var i = 0; i < proxy._frozenColumnsLength; i++) {
                    if (columns[i].visible == true) {
                        if (max_width < columns[i].width) {
                            max_width = columns[i].width;
                            max_index = i;
                        }
                    }
                }
                //update max column width
                if (columns[index].width < (max_width - model.commonWidth)) {
                    if (columns[max_index].width == max_width) {
                        columns[max_index].width = proxy.columnsWidthCollection[max_index] = columns[max_index].width - columns[index].width;
                    }
                }
                else {
                    //if column doesnot have max width reduce all frozen widths
                    if (model.columns[index].width > model.commonWidth)
                        model.columns[index].width = model.commonWidth;
                    var modifiedFrozenWidth = Math.round(columns[index].width / proxy._frozenColumnsLength);
                    for (var i = 0; i < proxy._frozenColumnsLength; i++) {
                        if (columns[i].isFrozen == true && columns[i].visible == true) {
                            columns[i].width = proxy.columnsWidthCollection[i] = columns[i].width - modifiedFrozenWidth;
                        }
                    }
                }

            }            
        },

        //Show the column by using header text
        // argument headerText is column header text value

        
        showColumn: function (headerText) {
            var proxy = this,
                model = proxy.model,
                column = this.getColumnByHeaderText(headerText),
                index = $.inArray(column, model.columns),
                visibleColumnIndex = $.inArray(headerText, proxy._visibleColumns);
            if (index != -1 && visibleColumnIndex == -1) {
                /* Cancel edited cell before sort the column*/
                proxy._cancelEditState();
                proxy._visibleColumns.push(headerText);
                proxy.model.columns[index].visible = true;
                var headerColgroup = proxy.getHeaderTable().find('colgroup').find("col");
                $(headerColgroup).eq(index).show();
                var headerRows = proxy.getHeaderTable().find("tr").not(".e-stackedHeaderRow").find(".e-headercell");
                $(headerRows).eq(index).removeClass("e-hide");
                if (model.allowFiltering && model.filterSettings.filterType == "filterbar") {
                    var headerrows = proxy.getHeaderTable().find('thead').find("th.e-filterbarcell");
                    $(headerrows).eq(index).removeClass("e-hide");
                }
                if (proxy.model.columns[index].isFrozen == true) {
                    proxy._updateFrozenColumnOnResize(index);                  
                    proxy.setWidthToColumns();
                }               
                var gridrows = proxy.getContentTable().find("colgroup").find("col"),
                    isFrozenTable = true, cellIndex = index, footerRows;
                $(gridrows).eq(index).show();
                gridrows = proxy.getRows();
                footerRows = this._getFooterRows();

                if (this._frozenColumnsLength > 0) {
                    if (index < this._frozenColumnsLength) {
                        gridrows = $(proxy.getRows()[0]);
                        footerRows = $(footerRows[0]);
                        if (proxy._gridRows && $(proxy.getTreeGridRows()[0]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").length > 0) {
                            var tempColSpan = parseInt($(proxy.getTreeGridRows()[0]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan"));
                            $(proxy.getTreeGridRows()[0]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan", tempColSpan + 1);
                        }
                    }
                    else {
                        gridrows = $(proxy.getRows()[1]);
                        footerRows = $(footerRows[1]);
                        isFrozenTable = false;
                        cellIndex = index - this._frozenColumnsLength;
                        if (proxy._gridRows && $(proxy.getTreeGridRows()[1]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").length > 0) {
                            var tempColSpan = parseInt($(proxy.getTreeGridRows()[1]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan"));
                            $(proxy.getTreeGridRows()[1]).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan", tempColSpan + 1);
                        }
                    }
                } else {
                    if (proxy._gridRows && $(proxy.getTreeGridRows()).find(".e-detailscellwrapper").parent(".e-detailsrowcell").length > 0) {
                        var tempColSpan = parseInt($(proxy.getTreeGridRows()).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan"));
                        $(proxy.getTreeGridRows()).find(".e-detailscellwrapper").parent(".e-detailsrowcell").attr("colspan", tempColSpan + 1);
                    }
                }


				//Display the specified column
                gridrows.each(function () {
                    var td = $(this).children("td").eq(cellIndex);
                    $(td).removeClass("e-hide");
                    if (model.showSummaryRow && $(td).hasClass('e-summaryrowcell') && isFrozenTable)
                        proxy._updateSummaryRowTitleCell(headerColgroup, td[0].parentElement);
                });
                //Show the specific column from total summary row.
                if (model.showTotalSummary) {
                    var footerColGroup = proxy._$footertableContent.find("colgroup").find("col");
                    $(footerColGroup).eq(index).show();
                    footerRows.each(function () {
                        var footerSummarytd = $(this).children("td").eq(cellIndex);
                        $(footerSummarytd).removeClass("e-hide");
                        if ($(footerSummarytd).hasClass('e-footersummaryrowcell'))
                            proxy._updateSummaryRowTitleCell(footerColGroup, footerSummarytd[0].parentElement);
                    });
                }
                proxy._addInitTemplate();
                if (model.showTotalSummary && model.collapsibleTotalSummary) {
                    proxy._updateSummaryTitleColumn();
                }
                var gridContent = proxy.getScrollElement();
                if (model.isFromGantt) {
                    proxy._trigger("refreshScrollCss");
                }
                if (model.columnResizeSettings.columnResizeMode == ej.TreeGrid.ColumnResizeMode.FixedColumns && !model.isFromGantt)
                    this._updateTableWidth();
                gridContent.ejScroller("refresh");
                proxy._updateScrollCss();
                proxy._updateHeaderScrollLeft();
                /* update scrollTop in gantt when treegrid horizontal scroller not exist*/
                if (model.isFromGantt && !gridContent.ejScroller("isHScroll")) {
                    gridContent.scrollTop(gridContent.data("ejScroller").scrollTop());
                }
                index = $.inArray(headerText, proxy._hiddenColumns);
                if (index != -1)
                    proxy._hiddenColumns.splice(index, 1);
                if (model.showColumnChooser || model.contextMenuSettings.showContextMenu) {
                    proxy._renderColumnChooserList(true, headerText);
                    proxy._updateColumnMenuVisibility();
                }
                if (model.editSettings.allowEditing && model.editSettings.editMode == "dialogEditing" && (ej.isNullOrUndefined(model.editSettings.dialogEditorTemplateID) || model.editSettings.dialogEditorTemplateID == "")) {
                    proxy._treeGridAddEditDialog();
                } else if (model.editSettings.allowEditing && model.editSettings.editMode == "dialogEditing" && (!ej.isNullOrUndefined(model.editSettings.dialogEditorTemplateID) && model.editSettings.dialogEditorTemplateID != "")) {
                    proxy._treeGridAddEditDialogTemplate();
                }
            }
            if (this.model.showStackedHeader)
                this._refreshStackedHeader();
            //Updating the column properties to Gantt's model.columns
            if (model.isFromGantt)
                proxy.updateToGanttColumns();
        },

        // Get the hidden columns detail in tree grid
        getHiddenColumns: function () {
            var proxy = this,
                model = proxy.model,
                hiddenColumn = proxy._hiddenColumns,
                length = hiddenColumn.length,
                hiddenColumns = [];
            for (var i = 0; i < length; i++)
                hiddenColumns.push(proxy.getColumnByHeaderText(hiddenColumn[i])); //Get the column by using header text
            return hiddenColumns;

        },

        // Get the column details based on the given column index in tree grid
        getColumnByIndex: function (index) {
            var proxy = this,
                model = proxy.model,
                columns = model.columns;
            if (columns.length > index)
                return columns[index];
            return null;
        },

        // Get the visible columns detail in tree grid
        getVisibleColumns: function () {
            var proxy = this,
                model = proxy.model,
                visibleColumn = proxy._visibleColumns,
                length = visibleColumn.length,
                visibleColumns = [];
            for (var i = 0; i < length; i++)
                visibleColumns.push(proxy.getColumnByHeaderText(visibleColumn[i])); //Get the column by using header text
            return visibleColumns;

        },

        _getLastVisibleColumnIndex:function(){
            var proxy = this,
                model = proxy.model,
                columns = model.columns,
                length = columns.length - 1,
                index = -1;
            for (var i = length; i >= 0; i--) {
                if (columns[i].visible != false) {
                    index = i;
                    break;
                }
            }
            return index;
        },
        //Cancel the edit cell or row based on editing.
        cancelEdit: function () {
            if (this._isRowEdit)
                this.cancelRowEditCell();
            else if (this.model.isEdit)
                this.cancelEditCell();
        },

        //Rerender the tree grid content.
        redraw: function () {
            this.resetModelCollections();
            this._clearColumnMenu();
            this._clearContextMenu();
            this._removeDetailsRow();
            this.element.empty();
            /*Remove all events binded in treegrid*/
            this.element.off();
            var matched = jQuery.uaMatch(navigator.userAgent),
                proxy = this, model = this.model;

            proxy._off(proxy.element, "click", proxy._onClick);
            proxy._off(proxy.element, "keydown", proxy._keyDown);
            proxy._off(proxy.element, "click", "#" + proxy._id + "e-gridheader", proxy._onHeaderClick);
            proxy._off(proxy.element, "mousedown touchstart", "#" + proxy._id + "e-gridheader", proxy._headerMouseDown);
            proxy._off($(document), "mousedown touchstart", proxy._mouseDownHandler);
            proxy._off(proxy.element, "mousedown touchstart", ".e-gridcontent", proxy._contentMouseDown);
            proxy._off(proxy.element, "click", proxy._onRecordClick);// ".e-gridcontent",
            proxy._off(proxy.element, "dblclick", ".e-gridcontent > div", proxy._onRecordDoubleClick);

            //Method binding for filtering data.
            if (model.filterSettings.filterBarMode == "immediate") {
                proxy._off(proxy.element, "keyup", ".e-filterbarcell input", proxy._filterBarHandler);
                proxy._off(proxy.element, "click", ".e-filterbarcell .e-checkbox")._off(proxy.element, "click", ".e-filterbarcell .e-checkbox", proxy._filterBarHandler);
            }
            proxy._off(proxy.element, "focus click", ".e-filterbarcell input", proxy._filterBarClose);
            proxy._off(proxy.element, "click", ".e-filterbarcell .e-cancel", proxy._filterBarClose);
            if (proxy.model.showGridCellTooltip && !proxy.model.showGridExpandCellTooltip) {

                if (ej.browserInfo().name == "msie") {
                    proxy._off(proxy.element, "mouseenter", ".e-rowcell", proxy._mouseHover);
                }
                else {
                    proxy._off(proxy.element, "mousemove", ".e-rowcell", proxy._mouseHover);
                }
            }
            else {
                proxy._off(proxy.element, "mouseenter", ".e-rowcell", proxy._mouseHover);
            }
            if (proxy.model.showGridCellTooltip) {

                if (ej.browserInfo().name == "msie") {
                    proxy._off(proxy.element, "mouseenter", ".e-headercelldiv", proxy._headermouseHover);
                }
                else {
                    proxy._off(proxy.element, "mousemove", ".e-headercelldiv", proxy._headermouseHover);
                }
            }
            proxy._off(proxy.element, "mouseleave", ".e-rowcell", proxy._cellMouseLeave);
            proxy._off(proxy.element, "mouseleave", proxy._cellMouseLeave);
            proxy._off(proxy.element, "mouseleave", ".e-headercelldiv", proxy._headerMouseLeave);
            proxy._off(proxy.element, "mouseleave", proxy._headerMouseLeave);

            //MOUSE WHEEL EVENT FOR GANTT CONTROL
            if (model.isFromGantt || this._frozenColumnsLength) {
                proxy._off(proxy.element, "mousewheel DOMMouseScroll", proxy._mouseWheel);
            }

            if (model.enableResize && model.isResponsive && !model.isFromGantt) {
                proxy._off($(window), "resize", proxy._windowResize);
            }
            if (ej.isTouchDevice())
                proxy._off(proxy.element, "doubletap ", ".e-gridcontent", proxy._editdblClickHandler);
            else
                proxy._off(proxy.element, "dblclick ", ".e-gridcontent", proxy._editdblClickHandler);
            //Mouse right click event for tree grid


            if (model.contextMenuSettings.showContextMenu) {
                proxy._off(proxy.element, "keyup contextmenu taphold", this._preventContextMenu);
            }                        
            
            /*Redraw all elements in treegrid toolbar, header,content and summary*/
            this._init();
        },

        // Public method for removing column menu
		clearColumnMenu:function()
        {
            var proxy=this;
            proxy._clearColumnMenu();
		},

		"export": function (action, serverEvent, multipleExport) {
		    var proxy = this,
                model = proxy.model;
		   
		    proxy.contextMenuOperations("Cancel"); // Cancel the edit row or empty newly added row.
		    var modelClone = proxy._getExportModel(model);
		    var attr = { action: action, method: 'post', "data-ajax": "false" };
		    $('form#' + proxy._id + 'export').remove();
		    var form = ej.buildTag('form#'+proxy._id+'export', "", null, attr);
		    if (ej.raiseWebFormsServerEvents) {
		        var args = { model: modelClone, originalEventType: serverEvent };
		        var clientArgs = { model: JSON.stringify(modelClone) };
		        ej.raiseWebFormsServerEvents(serverEvent, args, clientArgs);
		    }
		    else {
		        var treegridObjectArray = {};
		        if (multipleExport) {
		            $('body').find('.e-treegrid').each(function (index, object) {
		                var gridObject = $(object).data('ejTreeGrid');
		                if (!ej.isNullOrUndefined(gridObject)) {
		                    var gridmodel = gridObject.model,
		                        modelClone = proxy._getExportModel(gridmodel);
		                        treegridObjectArray[index] = JSON.stringify(modelClone);
		                        var inputAttr = { name: 'TreeGridModel', type: 'hidden', value: JSON.stringify(modelClone) };
		                        var input = ej.buildTag('input', "", null, inputAttr);
		                        form.append(input);
		                }
		            });
		        }
		        else {
		            var inputAttr = { name: 'TreeGridModel', type: 'hidden', value: JSON.stringify(modelClone) };
		            var input = ej.buildTag('input', "", null, inputAttr);
		            form.append(input);
		            form.append(this);
		        }
		        $('body').append(form);
		        form.submit();
		    }
		    return true;
		},

        //#endregion

        //#region PRIVATE METHODS

		_getExportModel: function (treegridModel) {
		    var proxy = this,
		        model = treegridModel,
		        updatedRecords = model.updatedRecords,
                currentViewData = model.currentViewData,
                flatRecords = model.flatRecords,
                parentRecords = model.parentRecords,
                summaryRowRecords = model.summaryRowRecords,
                selectedItem = model.selectedItem,
                selectedItems = model.selectedItems;
		    // Delete the below internal items in model for avoid the circular reference while extend the model
		    delete model.updatedRecords;
		    delete model.currentViewData;
		    delete model.flatRecords;
		    delete model.parentRecords;
		    delete model.summaryRowRecords;
		    delete model.selectedItem;
		    delete model.selectedItems;
		    var modelClone = $.extend(true, {}, model);
		    model.updatedRecords = updatedRecords;
		    model.currentViewData = currentViewData;
		    model.flatRecords = flatRecords;
		    model.parentRecords = parentRecords;
		    model.selectedItem = selectedItem;
		    model.selectedItems = selectedItems;
		    model.summaryRowRecords = summaryRowRecords;
		    var columns = modelClone.columns,
                columnLength = columns.length,
                stackedHeaderRows = modelClone.stackedHeaderRows,
                filteredColumns = modelClone.filterSettings.filteredColumns,
                filterColumnLength = filteredColumns.length;
		    for (var i = 0; i < columnLength; i++) {
		        if (modelClone.columns[i].editType != undefined) {
		            switch (columns[i].editType) {
		                case "stringedit":
		                case "edittemplate":
		                    columns[i].editType = "string";
		                    break;
		                case "numericedit":
		                    columns[i].editType = "numeric";
		                    break;
		                case "dropdownedit":
		                    columns[i].editType = "dropdown";
		                    break;
		                case "booleanedit":
		                    columns[i].editType = "boolean";
		                    break;
		                default:
		                    break;
		            }
		        }
		        if (columns[i].filterEditType != undefined) {
		            switch (columns[i].filterEditType) {
		                case "stringedit":
		                    columns[i].filterEditType = "string";
		                    break;
		                case "numericedit":
		                    columns[i].filterEditType = "numeric";
		                    break;
		                case "dropdownedit":
		                    columns[i].filterEditType = "dropdown";
		                    break;
		                case "booleanedit":
		                    columns[i].filterEditType = "boolean";
		                    break;
		                default:
		                    break;
		            }
		        }
		    }
		    for (var i = 0; i < filterColumnLength; i++) {
		        if (filteredColumns[i].operator == "equal")
		            filteredColumns[i].operator = "equals";
		        else if (modelClone.filterSettings.filteredColumns[i].operator == "notequal")
		            filteredColumns[i].operator = "notequals";
		    }
		    if (model.showStackedHeader && stackedHeaderRows.length > 0) {
		        for (var row = 0; row < stackedHeaderRows.length; row++) {
		            var sColumn = stackedHeaderRows[row].stackedHeaderColumns;
		            for (var col = 0; col < sColumn.length; col++) {
		                var _column = Array.isArray(sColumn[col].column) ? sColumn[col].column : $.map(sColumn[col].column.split(","), $.trim);
		                sColumn[col].column = _column;
		            }
		        }
		    }
		    if (modelClone.showStackedHeader) {
		        modelClone.stackedHeaderRow = modelClone.stackedHeaderRows;
		        for (var i = 0; i < modelClone.stackedHeaderRow.length; i++) {
		            modelClone.stackedHeaderRow[i].stackedHeaderColumn = modelClone.stackedHeaderRow[i].stackedHeaderColumns;
		            var a = modelClone.stackedHeaderRow[i].stackedHeaderColumn;
		            for (var j = 0; j < a.length; j++) {
		                modelClone.stackedHeaderRow[i].stackedHeaderColumn[j].column = $.isArray(a[j].column) ? a[j].column : a[j].column.split(',');
		            }
		        }
		    }
		    var ignoreOnExport = proxy.ignoreOnExport,
                igonreLength = ignoreOnExport.length;
		    if (proxy.ignoreOnExport) {
		        for (var i = 0; i < igonreLength; i++) {
		            delete modelClone[ignoreOnExport[i]];
		        }
		    }
		    return modelClone;
		},

		_getNonContentHeight: function(){
		    var proxy = this, model = proxy.model,
                height = 0, borderTopWidth = 0;
		    borderTopWidth = proxy.model.isFromGantt ? 0 : 1;
		    height = proxy._$gridHeaderContent.outerHeight() + parseFloat(borderTopWidth);
		    if (proxy.model.toolbarSettings.showToolbar) {
		        height += !ej.isNullOrUndefined($("#" + proxy._id + "_toolbarItems").outerHeight()) ?$("#" + proxy._id + "_toolbarItems").outerHeight():0;
		    }
		    if (model.allowPaging)
		        height += proxy.element.find('.e-pager').outerHeight();		    	    

		    return height;
                
		},
        //CALCULATE THE VIEWPORTHEIGHT
		_getViewPortHeight: function () {
		    var proxy = this, model = proxy.model, height;
		    if (model.sizeSettings.height == "auto") {
		        if (proxy._frozenColumnsLength > 0) {
		            height = $("#" + proxy._id + "e-gridcontent").find(".e-hscrollbar").length == 1 ? $("#" + proxy._id + "movablee-table").height() + 18 : $("#" + proxy._id + "movablee-table").height();
		        }
		        else {
		            height = $("#" + proxy._id + "e-gridcontent").find(".e-hscrollbar").length == 1 ? $("#" + proxy._id + "e-table").height() + 18 : $("#" + proxy._id + "e-table").height();
		        }
		        return height;
		    } else {
		        return (this.element.height() - this._getNonContentHeight());
		    }
		},

        updateViewPortHeight: function () {
            var proxy = this;
            proxy._viewPortHeight = proxy._getViewPortHeight();
        },

        _updateScrollCss: function () {
            var proxy = this,
                model = proxy.model;
            if (!model.isFromGantt) {
                var isVscroll = proxy.isVScroll(),
                    isPaddingExist = proxy._$gridHeaderContent.hasClass("e-scrollcss");
                var isSafari = /Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor);
                if (isSafari)
                    proxy._$gridHeaderContent.removeClass("e-gridheader");
                if (isVscroll) {
                    if (!this.mobileDevice())
                    proxy._$gridHeaderContent.addClass("e-scrollcss");
                    if (model.showTotalSummary && proxy._$totalSummaryRowContainer && proxy._$totalSummaryRowContainer.height() <= model.totalSummaryHeight && proxy._$totalSummaryRowContainer.find(".e-vscrollbar").length == 0) {
                        if (!this.mobileDevice()) {
                            proxy._$totalSummaryRowContainer.addClass("e-scrollcss");                            
                            proxy._$totalSummaryRowContainer.width(proxy._$gridContent.width() - 17);
                        }
                        else
                            proxy._$totalSummaryRowContainer.width(proxy._$gridContent.width());
                    }
                } else {
                    proxy._$gridHeaderContent.removeClass("e-scrollcss");
                    if (model.showTotalSummary && proxy._$totalSummaryRowContainer && proxy._$totalSummaryRowContainer.height() <= model.totalSummaryHeight) {
                        proxy._$totalSummaryRowContainer.removeClass("e-scrollcss");
                        proxy._$totalSummaryRowContainer.width(proxy._$gridContent.width());
                    }
                }
                if (proxy.getScrollElement().hasClass("e-scroller"))
                this._updateHeaderScrollLeft(this.getScrollElement().ejScroller("model.scrollLeft"));
                //update frozenContainer height
                if (this._frozenColumnsLength) {
                    var movableContainerHeight = model.sizeSettings.height == "auto" ? $("#" + proxy._id + "movablee-table").height() : this.getContent().find("#e-movablecontent" + proxy._id).height();
                    if (movableContainerHeight != this.getContent().find("#e-frozencontainer" + proxy._id).height()) {
                        this.getContent().find("#e-frozencontainer" + proxy._id).height(movableContainerHeight);
                    }
                }
                // Tree grid header not properly aligned in safari browser.
                // Because dynamically add or remove any css class it not affected immediately in safari browser
                // So just refresh the tree grid header
                if (isSafari) {
                    proxy._$gridHeaderContent[0].style.width=proxy._gridWidth+"px";
                    proxy._$gridHeaderContent.addClass("e-gridheader");
                }
                    proxy._resizeFilteringElements();
            }
        },

        _updatePagerIndex: function(){
            var proxy = this,
                model = proxy.model,
                expandedRecords = [], endIndex = -1, startIndex = -1,
                updatedRecords = model.updatedRecords;
            if (model.allowPaging) {
                var pageSize = model.pageSettings.pageSize;

                if (model.pageSettings.pageSizeMode === ej.TreeGrid.PageSizeMode.Root) {
                    var rootParentRecords = proxy._isHierarchyFiltering ? proxy._filterParentRecords : model.parentRecords.slice(),
                        index = -1, rootEndIndex = -1, rootStartIndex = -1;
                    proxy._gridRecordsCount = rootParentRecords.length;
                    var totalAvailablePages = proxy._isLoadonDemand == false ? (proxy._gridRecordsCount < 1) ? 0 : (pageSize == 0) ? 0 : Math.ceil(proxy._gridRecordsCount / pageSize) : Math.ceil(proxy._pageRecordCountOnDemand / pageSize);
                    if (proxy._currentPage() > totalAvailablePages)
                        proxy._currentPage(totalAvailablePages);
                    rootEndIndex = ((proxy._currentPage() * pageSize) > proxy._gridRecordsCount)? (proxy._gridRecordsCount) : (proxy._currentPage() * pageSize);
                    rootStartIndex = (proxy._gridRecordsCount <= pageSize) ? 0 : ((proxy._currentPage() * pageSize) - pageSize);                                     
                    endIndex = updatedRecords.indexOf(rootParentRecords[rootEndIndex]);
                    if (rootStartIndex > rootEndIndex)
                        rootStartIndex = rootEndIndex - pageSize;
                    else if (proxy._gridRecordsCount == rootEndIndex)
                        endIndex = updatedRecords.length;
                    startIndex = updatedRecords.indexOf(rootParentRecords[rootStartIndex]);
                    proxy._updatedPageData = (proxy._isHierarchyFiltering && proxy.model.enableVirtualization) ? proxy._updateFilterParent.slice(startIndex, endIndex) : this.getExpandedRecords(updatedRecords.slice(startIndex, endIndex));
                }
                else {
                    expandedRecords = this.getExpandedRecords(updatedRecords);
                    if (model.enableVirtualization) {
                        proxy._gridRecordsCount = proxy._isHierarchyFiltering ? proxy._updateFilterParent.length : updatedRecords.length;
                    }
                    else {                        
                        proxy._gridRecordsCount = expandedRecords.length;                        
                    }
                   
                    var currentTotalPages = (proxy._gridRecordsCount < 1) ? 0 : (pageSize == 0)? 0 : Math.ceil(proxy._gridRecordsCount / pageSize) ;
                    if (proxy._currentPage() > currentTotalPages)
                        proxy._currentPage(currentTotalPages);
                    endIndex = ((proxy._currentPage() * pageSize) > proxy._gridRecordsCount) ? (proxy._gridRecordsCount) : (proxy._currentPage() * pageSize),
                    startIndex = (proxy._gridRecordsCount < pageSize) ? 0 : ((proxy._currentPage() * pageSize) - pageSize);
                    if (startIndex > endIndex)
                        startIndex = endIndex - pageSize;
                    proxy._updatedPageData = (proxy._isHierarchyFiltering && proxy.model.enableVirtualization) ? proxy._updateFilterParent.slice(startIndex, endIndex) : expandedRecords.slice(startIndex, endIndex);
                }
                proxy.updateHeight();
            }
        },

        //UPDATE CURRENT VIEWPORT DATA FROM FLATRECORDS/UPDATED RECORDS
        _updateCurrentViewData: function (requestType) {

            var proxy = this,
                model = proxy.model,
                args = {},
                tMargin,
                isRangeModified = false;

            //CHECK VIRTUALIZATION IS ENABLED OR NOT 
            if (model.enableVirtualization) {

                if (model.allowPaging) {
                    if (requestType != ej.TreeGrid.Actions.Scroll)
                        proxy._updatePagerIndex();
                    proxy.getVisibleRange(requestType);
                    if (model.sizeSettings.height)
                        model.currentViewData = proxy._updatedPageData.slice(proxy._visibleRange.top,
                        proxy._visibleRange.bottom);
                    else
                        model.currentViewData = (proxy._isHierarchyFiltering && proxy.model.enableVirtualization) ? proxy._updateFilterParent : proxy._updatedPageData;
                }

                else {
                    proxy.getVisibleRange(requestType);
                    var record = (proxy._isHierarchyFiltering && proxy.model.enableVirtualization) ? proxy._updateFilterParent : proxy.model.updatedRecords;
                    model.currentViewData = record.slice(proxy._visibleRange.top,
                    proxy._visibleRange.bottom);
                }

                if (model.allowDragAndDrop && proxy._dragMouseDown && proxy._isTouchEvent) {
                    var updatedRecords = proxy.getUpdatedRecords(),
                       draggedItemIndex = updatedRecords.indexOf(proxy._draggedRecord);
                    if (proxy._visibleRange.top > (draggedItemIndex + 1) || proxy._visibleRange.bottom < draggedItemIndex) {
                        if (!proxy._dummyElement) {
                            var cloneElement = proxy._draggedElement.clone();
                            proxy._draggedElement.before(cloneElement)
                            proxy._draggedElement.hide();
                            $(proxy.element).append(proxy._draggedElement);
                            proxy._dummyElement = true;
                        }
                    }
                }

                if (proxy._vScrollDist !== 0) {

                    tMargin = proxy._scrollTop - proxy._offset;
                    if (requestType && requestType == ej.TreeGrid.Actions.Scroll) args.requestType = ej.TreeGrid.Actions.Scroll;
                    else if (requestType && requestType == ej.TreeGrid.Actions.ExpandCollapse) args.requestType = ej.TreeGrid.Actions.ExpandCollapse;

                    else args.requestType = ej.TreeGrid.Actions.Refresh;

                    if (requestType != "expandcollapse")
                        proxy.sendDataRenderingRequest(args);
                if (model.allowTextWrap && model.enableVirtualization && requestType == "scroll"){
                    proxy._updateWrapRowHeights("total,header");
                    proxy._textWrapRowsDatas = proxy._getAvgTextWrapRowHeight("getAvgHeight");
                }
                    isRangeModified = true;

                    if (this._frozenColumnsLength > 0) {
                        proxy._$frozenTableContent.css({ "top": tMargin });

                        proxy._$movableTableContent.css({ "top": tMargin });
                    } else 
                        proxy._$tableContent.css({ "top": tMargin });
                    if (model.allowTextWrap && model.enableVirtualization) {
                        if (proxy._textWrapRowsDatas.isEnd && !proxy._textWrapNoCalculate) {
                            proxy.updateHeight();
                            proxy._textWrapNoCalculate = true;
                        } else if (parseInt(proxy._scrollTop) >= parseInt(proxy.getMaxScrollHeight() - 10) && !proxy._textWrapRowsDatas.isEnd && !proxy._textWrapNoCalculate) {
                            proxy.updateHeight('extendHeight');
                            proxy._textWrapNoCalculate = false;
                        }
                        if (proxy._scrollTop >= (proxy.getMaxScrollHeight() - 10) && requestType != "expandcollapse") {
                            var offsetHeight, maxScrollHeight;
                            maxScrollHeight = proxy.getMaxScrollHeight();
                            if (this._frozenColumnsLength > 0) {
                                offsetHeight = (maxScrollHeight + $("#" + proxy._id + "frozene-table").height()) - $("#" + proxy._id + "e-gridcontainer").height();
                            } else {
                                offsetHeight = (maxScrollHeight + $("#" + proxy._id + "e-table").height()) - $("#" + proxy._id + "e-gridcontainer").height();
                            }
                            tMargin = maxScrollHeight - offsetHeight;
                            if (this._frozenColumnsLength > 0) {
                                proxy._$frozenTableContent.css({ "top": tMargin });
                                proxy._$movableTableContent.css({ "top": tMargin });
                            } else
                                proxy._$tableContent.css({ "top": tMargin });
                        }
                        if (proxy._scrollTop < 30) {
                            proxy._textWrapNoCalculate = false;
                        }
                    }
                }
                proxy._prevRTop = proxy._visibleRange.top;
                proxy._prevRBottom = proxy._visibleRange.bottom;

            } else {
                if (model.allowPaging) {
                    proxy._updatePagerIndex();
                    model.currentViewData = proxy._updatedPageData;
                }
                else
                    model.currentViewData = proxy.model.updatedRecords.slice();
            }


            if (proxy._isEnterKeyPressed) {

                proxy._isEnterKeyPressed = false;
                if (model.allowSelection && model.editSettings.allowEditing) {

                    if (!isRangeModified) proxy._cellEditingDetails.rowIndex += 1;

                    if (!proxy._rowSelectingEventTrigger(this.selectedRowIndex(), proxy._cellEditingDetails.rowIndex)) {

                        proxy.selectRows(proxy._cellEditingDetails.rowIndex);
                        proxy._rowSelectedEventTrigger(proxy._cellEditingDetails.rowIndex);

                    }

                    proxy.cellEdit(proxy._cellEditingDetails.rowIndex, proxy.model.columns[proxy._cellEditingDetails.columnIndex].field);

                }
            }
        },
       
        //finding all parent records in hierarchy filtered data
        _findFilteredParentRecords: function (record) {
            var proxy = this,
                length = record.length, parentRecord = [];
            for (var count = 0; count < length; count++) {
                if (record[count].hasChildRecords)
                    parentRecord.push(record[count])
            }
            return parentRecord
        },
        //GET THE TABLE ROW POSITION
        _getRowPosition: function (y) {
            return Math.ceil((y) / (this.model.rowHeight + this._detailsRowHeight));
        },


        //GET THE COLUMNGROUP FOR HEADER TABLE
        _getMetaColGroup: function () {

            var $colgroup = this.getHeaderTable().find('colgroup').clone();
            return $colgroup;

        },


        //CREATE EMPTY ROW WHILE DATASOURCE OBJECT AS NULL
        _getEmptyTbody: function () {

            var proxy = this,
                $emptyTd = ej.buildTag('td', proxy.model.emptyRecordText, {}, { colSpan: (proxy.model.columns.length - this._hiddenColumns.length) });
            var element = document.createElement("tr");
            element.className = "e-emptyText";
            return $(element).height(30).append($emptyTd);

        },


        //ADD SORTICON TO THE COLUMN HEADER
        _addSortElementToColumn: function (field, direction) {

            var proxy = this, model = this.model,
                column,index;
            if (model.isFromGantt) {
                column = ej.TreeGrid.getColumnByMappingName(proxy.model.columns, field);
                if (ej.isNullOrUndefined(column))
                    column = proxy.getColumnByField(field);
            }
            else
                column = ej.TreeGrid.getColumnByField(proxy.model.columns, field);
            index = $.inArray(column, proxy.model.columns);
            var $headerCellDiv = this.getHeaderTable().find("thead tr:not('.e-stackedHeaderRow')").
                find(".e-headercell").not(".e-detailheadercell").eq(index).find(".e-headercelldiv");
            $headerCellDiv.find(".e-ascending,.e-descending").remove();
            $headerCellDiv.append(proxy._createSortElement().addClass("e-" + direction).addClass("e-icon"));
            $headerCellDiv.parent().attr("aria-sort", direction);
        },


        //CREATE SORT ELEMENT        
        _createSortElement: function () {
            return ej.buildTag('span', "&nbsp;");
        },


        //RENDERED EDITED CELL
        _renderCellEditObject: function (cellEditArgs, $td) {

            var proxy = this,
                $form = ej.buildTag("form.e-treegridform#" + proxy._id + "EditForm", "", {}, {}),
                $cellEditTemplate = proxy._cellEditTemplate,
                $element,
                htmlString,
                cellData = {},
                cellValue,
                columnObject = cellEditArgs.columnObject,
                columnField = columnObject.field.split('.').join(""),
                columnIndex = -1,
            cellValue = cellEditArgs.value;
            if (columnObject.editType == "dropdownedit" && cellValue == false)
                cellValue = cellValue.toString();
            cellData[columnField] = cellValue,
            columnIndex = proxy.getColumnIndexByField(columnObject.field);

            $td.empty();

            $td.addClass("e-validError");

            htmlString = $cellEditTemplate.find("#" + columnField + "_CellEdit").html();
            if (columnObject.field === "predecessor" || columnObject.field === "duration")
                $element = $($.templates(htmlString).render(cellEditArgs.data));
            else
                $element = $($.templates(htmlString).render(cellData));

            if ($element.get(0).tagName == "SELECT") {

                $element.val(cellData[columnField]);
                $element.val() == null && $element.val($element.find("option").first().val());

            }

            if ($element.get(0).tagName == "INPUT" && proxy.model.isFromGantt) {
                if (columnObject.field != "predecessor" && columnObject.field != "duration")
                    $element.val(cellData[columnField]);
            } else if ($element.get(0).tagName == "INPUT") {
                $element.val(cellData[columnField]);
            }

            $form.append($element);

           $td.append($form);

           var args = {};
           args.columnIndex = cellEditArgs.columnIndex;
           args.data = cellEditArgs.data.item;
           args.requestType = "beginEdit";
           proxy._refreshEditForm(args);

            if ($.isFunction($.validator) && !$.isEmptyObject(cellEditArgs.validationRules)) {

                proxy._initValidator();
                proxy.setValidation();

            }
            proxy.model.isEdit = true;

        },

        //get Index of resourceInfo
        getIndexofresourceInfo: function (dataSource) {

            var proxy = this, model = proxy.model,
                resourceIdMapping = model.resourceIdMapping,
                data = proxy._cellEditingDetails.data,
                resourceInfo = data.resourceInfo,
                count = 0,
                length = resourceInfo && resourceInfo.length,
                resourceIndex = [];

            for (count; count < length; count++) {                
                for (var index = 0; index < dataSource.length; index++) {
                    if (dataSource[index][resourceIdMapping] == resourceInfo[count][resourceIdMapping])
                        resourceIndex.push(index)
                }
            }

            return resourceIndex;

        },

        //REFRESH THE EDITED FORM
        _refreshEditForm: function (args) {

            var proxy = this, model = proxy.model, $form, rowHeight, isDialogEdit;
            if (proxy.model.editSettings.allowEditing && (proxy.model.editSettings.editMode == "dialogEditing" || (model.editSettings.editMode.toLowerCase() == "batchediting" && model.editSettings.batchEditSettings.editMode == "dialog"))) {
                $form = $("#" + proxy._id + "EditFormDialog");
                rowHeight = "";
                isDialogEdit = true;
            } else {
                $form = $("#" + proxy._id + "EditForm");
                rowHeight = proxy.model.rowHeight - 5;
            }
            var $frozenForm = $("#" + proxy._id + "EditFrozenForm"),
                elementFocused = false,
                $formElement = $frozenForm.add($form).find("input,select,textarea"),
                percent = 86,
                i = 0,
                length = $formElement.length,
                $element, inputWidth,
                model = proxy.model,
                width,
                params = {},
                value,
                column,
                customParams,
                toformat,
                dateInstance,
                formatVal,
                cellEditType;

            for (i; i < length; i++) {

                $element = $formElement.eq(i);
                cellEditType = $element.attr("data-edittype");
                column = ej.TreeGrid.getColumnByField(model.columns, $element.prop("name"));
                if (ej.isNullOrUndefined(column) && (proxy.model.editSettings.editMode == "dialogEditing" || (model.editSettings.editMode.toLowerCase() == "batchediting" && model.editSettings.batchEditSettings.editMode == "dialog"))) {
                    if (($element).hasClass("e-btn") || (proxy.model.editSettings.editMode == "dialogEditing" && (!ej.isNullOrUndefined(model.editSettings.dialogEditorTemplateID) && model.editSettings.dialogEditorTemplateID != ""))) {
                        return;
                    } else
                        $element.closest("tr").addClass("e-hide");
                } else {
              
                    if ((proxy.model.editSettings.editMode == "dialogEditing" || (model.editSettings.editMode.toLowerCase() == "batchediting" && model.editSettings.batchEditSettings.editMode == "dialog")) && (!ej.isNullOrUndefined(model.editSettings.dialogEditorTemplateID) && model.editSettings.dialogEditorTemplateID != ""))
                        cellEditType = column.editType;
              
                        inputWidth = "100%";

                    switch (cellEditType) {
              
                        case ej.TreeGrid.EditingType.Numeric:
                            params = {};
                            width = inputWidth;
                            value = $element.val();
                            params.width = width;
                            params.locale = model.locale;
                            params.height = rowHeight;
                            params.showSpinButton = true;
                            params.cssClass = model.cssClass;
                  
                        if (value.length)
                           {
                                  params.value = parseFloat(value);
                           }

                        if (model.isFromGantt && column.field === "status") {
                            params.minValue = 0;
                            params.maxValue = 100;
                            params.decimalPlaces = 0;
                        }

                        if (!ej.isNullOrUndefined(column["editParams"]))
                            $.extend(params, column["editParams"]);

                        $element.ejNumericTextbox(params);
                        $element.prop("name", $element.prop("name").replace(proxy._id, ""));
                        break;

                    case ej.TreeGrid.EditingType.DatePicker:
                        params = {};
                        params.width = inputWidth;
                        params.height = rowHeight;
                        params.locale = model.locale;
                        params.cssClass = model.cssClass;
                        params.dateFormat = model.dateFormat;
                        params.enableStrictMode = true;
                        if (model.isFromGantt)
                            params.startDay = model.weekStartDay;
                        if ($element.val().length) params.value = proxy.getDateFromFormat($element.val());

                        if (column["format"] !== undefined && column.format.length > 0) {

                            toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                            formatVal = toformat.exec(column.format);
                            params.dateFormat = formatVal[2];
                            if ($element.val().length) {
                                params.value = ej.format(new Date($element.val()), params.dateFormat, params.locale);
                                $element.val(params.value);
                            }
                        }

                        if (!ej.isNullOrUndefined(column["editParams"]))
                            $.extend(params, column["editParams"]);

                        if (model.dateFormat.toLowerCase().indexOf("hh") == -1) {
                            $element.ejDatePicker(params);
                            dateInstance = $element.ejDatePicker("instance");
                        }
                        else {
                            $element.ejDateTimePicker(params);
                            dateInstance = $element.ejDateTimePicker("instance");
                        }
                        $($element).keydown(function (e) {
                            var popupElement = $('#e-' + $element[0].id);
                            if (popupElement.length > 0 && popupElement.css('display') !== 'none') {
                                if (e.keyCode == 13) {
                                    dateInstance.option("value", ej.parseDate(e.currentTarget.value, dateInstance.model.dateFormat))
                                }
                            }
                        });
                        break;
                    case ej.TreeGrid.EditingType.DateTimePicker:
                        params = {};
                        params.width = inputWidth;
                        params.height = rowHeight;
                        params.locale = model.locale;
                        params.cssClass = model.cssClass;
                        params.displayDefaultDate = true;
                        params.dateTimeFormat = model.dateFormat;
                        params.enableStrictMode = true;
                        if (model.isFromGantt)
                            params.startDay = model.weekStartDay;
                        if ($element.val().length) params.value = proxy.getDateFromFormat($element.val());

                        if (column["format"] !== undefined && column.format.length > 0) {

                            toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                            formatVal = toformat.exec(column.format);
                            params.dateTimeFormat = formatVal[2];
                            if ($element.val().length) {
                                params.value = ej.format(new Date($element.val()), params.dateTimeFormat, params.locale);
                                $element.val(params.value);
                            }
                        }

                        if (!ej.isNullOrUndefined(column["editParams"]))
                            $.extend(params, column["editParams"]);

                            $element.ejDateTimePicker(params);
                        break;
                    case ej.TreeGrid.EditingType.Dropdown:

                        var dataSource, fieldName;

                        if (proxy._isRowEdit)
                        {
                            dataSource = column.dropdownData;
                            fieldName = column.field;
                        }
                        else{
                            dataSource = column.dropdownData;
                            fieldName = column.field;
                        }

                        if (model.isFromGantt && fieldName === "resourceInfo") {
                            params = {};
                            params.width = inputWidth;
                            params.height = rowHeight;
                            params.showCheckbox = true;
                            params.dataSource = dataSource;
                            params.fields = {
                                id: model.resourceIdMapping,
                                text: model.resourceNameMapping,
                                value: model.resourceNameMapping
                            };
                            params.selectedItems = proxy.getIndexofresourceInfo(dataSource);
                            if (!ej.isNullOrUndefined(column["editParams"]))
                                $.extend(params, column["editParams"]);
                            $element.ejDropDownList(params);
                        } else {
                            var controlArgs = {};
                            controlArgs.cssClass = model.cssClass;
                            controlArgs.width = inputWidth;
                            controlArgs.height = rowHeight;
                            controlArgs.dataSource = dataSource;
                            if (!ej.isNullOrUndefined(column["editParams"]))
                                $.extend(controlArgs, column["editParams"]);

                            $element.ejDropDownList(controlArgs);

                            var obj = $element.ejDropDownList("instance");
                            obj._setValue($element.attr("data-cellvalue"));
                           
                        }
                        break;

                    case ej.TreeGrid.EditingType.String:
                        if (proxy.model.editSettings.allowEditing && proxy.model.editSettings.editMode == "dialogEditing") {
                            $element.outerWidth("100%").height(27);
                        } else {
                            $element.outerWidth(inputWidth).height(model.rowHeight - 9);
                        }
                        $element.css({ 'margin': '0px', 'padding': '1px' });
                        break;
                    case ej.TreeGrid.EditingType.Boolean:
                        if (proxy._checkboxSelection && column["nonColumn"]) {                            
                            $element[0].style.display = "none";
                        }
                        else {
                            var controlArgs = {};
                            controlArgs.cssClass = model.cssClass;
                            controlArgs.size = "small";                            

                            if (!ej.isNullOrUndefined(column["editParams"]))
                                $.extend(controlArgs, column["editParams"]);

                            $element.ejCheckBox(controlArgs);
                            ////center align of check box control
                            var parentElement = $element.parent(".e-chkbox-wrap"),
                                formElement = parentElement.parent("form");

                            if (!isDialogEdit) {
                                if (formElement.length > 0)
                                    formElement.css("margin-left", "45%");
                                else
                                    parentElement.css("margin-left", "45%");
                            }
                        }                       
                        break;
                   
                    case ej.TreeGrid.EditingType.Maskedit:
                        var controlArgs = {};
                        controlArgs.locale = model.locale;
                        controlArgs.cssClass = model.cssClass;
                        controlArgs.width = inputWidth;
                        controlArgs.height = rowHeight;
                        if (!ej.isNullOrUndefined(column["editParams"]))
                            $.extend(controlArgs, column["editParams"]);

                        $element.ejMaskEdit(controlArgs);
                        break;
                    case "edittemplate":
                        var temp = { rowdata: args.data, "column": column, element: $element, requestType: args.requestType};
                        var temp1 = column.editTemplate.write;
                        if (!ej.isNullOrUndefined(args) && args.requestType == "add") temp.rowdata = {};
                        if (typeof temp1 == "string")
                            temp1 = ej.util.getObject(temp1, window);
                        temp1(temp);
                        break;
                }

                if (!$element.is(":disabled") && !elementFocused &&
                   (!$element.is(":hidden") || typeof ($element.data("ejDropDownList") || $element.data("ejNumericTextbox") ||
                   $element.data("ejDatePicker") || $element.data("ejCheckBox")) == "object")) {

                    if ((!proxy._isEnterKeyPressed && column == model.columns[args.columnIndex]) || ((!args.columnIndex || args.columnIndex == -1) && !proxy._isEnterKeyPressed)) {

                        proxy._focusElements($element.closest('td'));
                        elementFocused = true;

                    }
                }
                }
        }
            },

        _getRecordIndex: function () {
            var proxy = this,
                model = proxy.model,
                currentViewData, index,
                records = model.allowPaging ? proxy._updatedPageData : proxy.getExpandedRecords(model.updatedRecords);
            proxy.getVisibleRange();
            currentViewData =  records.slice(proxy._visibleRange.top, proxy._visibleRange.bottom); 
            index = currentViewData.indexOf(model.selectedItem);
            return index;
        },
         //INITIALIZE THE VALIDATOR
        _initValidator: function () {
            var proxy = this, elements = this._frozenColumnsLength > 0 ? this.element.find(".e-treegridform") : $("#" + this._id + "EditForm").length > 0 ? $("#" + this._id + "EditForm") : $("#" + this._id + "EditFormDialog");
            for (var i = 0; i < elements.length ; i++) {
                elements.eq(i).validate({
                    ignore: ".e-hide",
                    errorClass: 'e-field-validation-error',
                    errorElement: 'div',
                    wrapper: "div",
                    errorPlacement: function (error, element) {
                        proxy._renderValidator(error, element);
                    },
                });
            }
        },

        _renderValidator: function (error, element) {
            if (element.is(":hidden"))
                element = element.siblings("input:visible");
            if (!element.length)
                return;
            var proxy=this,
                model = proxy.model,
                recordIndex,
                $td = element.closest(".e-rowcell"),
                $container = $(error).addClass("e-error"),
                $tail = ej.buildTag("div.e-errortail");
            $td = $td.length == 0 ? element.closest("td") : $td;
            $td.removeClass(".e-error");
            if (model.editSettings.editMode != "dialogEditing") {
                recordIndex = proxy._getRecordIndex();                
                var recordPosition = (recordIndex + 1) * model.rowHeight;
                if (!model.enableVirtualization) {
                    var expandRecords = proxy.getExpandedRecords(model.updatedRecords);
                    recordIndex = model.allowPaging ? proxy._updatedPageData.indexOf(model.selectedItem) : expandRecords.indexOf(model.selectedItem);
                }
                if (recordIndex == -1) {
                    if (model.editSettings.rowPosition == "bottom")
                        recordIndex = model.updatedRecords.length - 1;
                    else if (model.editSettings.rowPosition == "top")
                        recordIndex = 0;
                    recordPosition = (recordIndex + 1) * model.rowHeight;
                }
                // here 45 is the error container height
                if (proxy._viewPortHeight < recordPosition + 45) {
                    $tail.addClass("e-bottomarrow");
                    var top = recordIndex * model.rowHeight - 45;
                    var operation = "append";
                }
                else {                   
                    $tail.addClass("e-toparrow");
                    var top = (recordIndex + 1) * model.rowHeight;
                    var operation = "prepend";
                }
            }
            else {
                var top = $td.offset().top - $("#" + this._id + "EditFormDialog").offset().top + $td.parent()[0].offsetHeight;
                $tail.addClass("e-toparrow");
                var operation = "prepend";
            }
            $($container).css({ "top": top });
            if (element.parent().hasClass("e-in-wrap"))
                $container.insertAfter(element.closest(".e-widget"));
            else
                $container.insertAfter(element);
            $container[operation]($tail);            
            $container.show("slow");
        },

        setValidation: function () {
            var proxy=this,
                model=proxy.model;
            
            for (var i = 0; i < this.model.columns.length; i++) {
                if (!ej.isNullOrUndefined(model.columns[i]["validationRules"]) && model.columns[i].visible == true) {
                    if (model.editSettings.editMode == ej.TreeGrid.EditMode.RowEditing
                         || model.editSettings.editMode == ej.TreeGrid.EditMode.DialogEditing || proxy.element.find(".e-rowedit").length > 0
						 || proxy.element.find(".e-addedrow").length > 0 || (model.editSettings.editMode == ej.TreeGrid.EditMode.BatchEditing &&
                        (model.editSettings.batchEditSettings.editMode == "dialog" || model.editSettings.batchEditSettings.editMode == "row")))
                        this.setValidationToField(model.columns[i].field, model.columns[i].validationRules);
                    else if ((model.editSettings.editMode == ej.TreeGrid.EditMode.CellEditing ||
                        (model.editSettings.editMode == ej.TreeGrid.EditMode.BatchEditing && model.editSettings.batchEditSettings.editMode == "cell"))
                        && proxy._cellEditingDetails.columnIndex == i) {
                        this.setValidationToField(model.columns[i].field, model.columns[i].validationRules);
                        return;
                    }
                }                
            }
        },

        setValidationToField: function (name, rules) {
            var fName = name, ele, form,proxy=this;
            if (!ej.isNullOrUndefined(name))
                fName = fName.replace(/[^a-z0-9\s_]/gi, ''); 
            var form = $("#" + this._id + "EditForm").length > 0 ? $("#" + this._id + "EditForm") : $("#" + this._id + "EditFormDialog"),
                column = proxy.getColumnByField(name);
            if (!ej.isNullOrUndefined(column) && column.isFrozen)
                var form = $("#" + this._id + "EditFrozenForm").length > 0 ? $("#" + this._id + "EditFrozenForm") : $("#" + this._id + "EditFormDialog").length > 0 ? $("#" + this._id + "EditFormDialog") : $("#" + this._id + "EditForm");

            ele = form.find("#" + this._id + fName).length > 0 ? form.find("#" + this._id + fName) : form.find("#" + fName);
            if (rules["regex"]) {
                rules[name + "regex"] = rules["regex"]; delete rules["regex"];
                $.validator.addMethod(fName + "regex", function (value, element, options) {
                    var ptn = options instanceof RegExp ? options : new RegExp(options);
                    return ptn.test(value);
                }, ej.getObject("messages.regex", rules) || this.getColumnByField(name).headerText + " should match the given pattern");
            }
            !ele.attr("name") && ele.attr("name", name);
            ele.rules("add", rules);
            var validator = $("#" + this._id + "EditForm").length > 0 ? $("#" + this._id + "EditForm").validate() : $("#" + this._id + "EditFormDialog").validate();
            validator.settings.messages[name] = validator.settings.messages[name] || {};
            if (!ej.isNullOrUndefined(rules["required"])) {
                if (!ej.isNullOrUndefined(rules["messages"] && rules["messages"]["required"]))
                    var message = rules["messages"]["required"];
                else
                    var message = $.validator.messages.required;
                if (message.indexOf("This field") == 0)
                    message = message.replace("This field", this.getColumnByField(name).headerText);
                validator.settings.messages[name]["required"] = message;
                if (ele.hasClass("e-datepicker"))
                    ele.ejDatePicker({ watermarkText: "" });
            }
        },

        //SET FOCUS TO EDITED ELEMENT
        _focusElements: function ($currentCell) {
            var proxy = this;

            if ($currentCell.length) {

                $currentCell.focus();
                var $childElem = $currentCell.children();

                if ($childElem[0]) {

                    if ($childElem[0].tagName.toLowerCase() == "select" || 
                        $childElem[0].tagName.toLowerCase() == "input") {

                        $childElem.focus().select();
                        $childElem[0].focus();

                    } else if ($childElem.find(".e-field.e-dropdownlist").length) {

                        $childElem.find(".e-ddl").focus();

                    } else if ($childElem.find(".e-chkbox-wrap.e-widget").length) {

                        $childElem.find(".e-chkbox-wrap.e-widget").focus();

                    }
                    else {
                        if ($childElem.find(".e-datepicker").length <= 0)
                            $childElem.find('input,select').select().focus();
                        else
                            $childElem.find('input,select').select();
                    }
                }
            }

            var contentScrollLeft = proxy.getScrollElement().children('.e-content').scrollLeft(),
                scrollLeft = proxy.getScrollElement().ejScroller("option", "scrollLeft");
            if (proxy.getScrollElement().hasClass("e-scroller") && contentScrollLeft != scrollLeft) {
                if (!ej.isNullOrUndefined(contentScrollLeft))
                proxy.getScrollElement().ejScroller("option", "scrollLeft", contentScrollLeft);
            }
            proxy._updateHeaderScrollLeft(proxy.getScrollElement().children('.e-content').scrollLeft());
        },
        //Set the focus for edit row elements
        _focusElementsForRowEdit: function ($currentCell) {
            if ($currentCell.length) {
                var $childElem = $currentCell.children();
                if ($childElem[0].tagName.toLowerCase() == "select" || $childElem[0].tagName.toLowerCase() == "input") {
                    $childElem.focus().select();
                    $childElem[0].focus();
                }
                else if ($childElem.find(".e-field.e-dropdownlist").length)
                    $childElem[0].focus();
                else if ($childElem.hasClass("e-chkbox-wrap")) {
                    $childElem[0].focus();
                } else {
                    if ($childElem.find(".e-datepicker").length <= 0)
                        $childElem.find('input:visible,select').first().select().focus();
                    else
                        $childElem.find('input,select').select();
                }
            }
        },
        /*Get Total height based on resource child records*/
        _getHeightforResourceView: function (records) {
            var height = 0;
            for (var i = 0; i < records.length; i++) {
                height += this._getTemplateRowHeight(records[i]);
            }
            return height;
        },
        //Get records height based on resource view and normal view
        getRecordsHeight: function () {
            var model = this.model,
                height = 0;
            if (model.viewType == "resourceView") {
                if (model.enableVirtualization)
                    height = this._getHeightforResourceView(model.updatedRecords);
                else
                    height = this._getHeightforResourceView(this.getExpandedRecords(model.updatedRecords));
            } else if (model.enableVirtualization) {

                height = (this._isHierarchyFiltering&&this.model.enableVirtualization) ? this._updateFilterParent.length * model.rowHeight : this.getUpdatedRecords().length * model.rowHeight;
            } else {
                height = model.rowHeight * (model.updatedRecords.length - this.getCollapsedRecordCount());
            }
            return height;
        },
        //UPDATE THE GRID CONTAINER HEIGHT
        //By updatedRecords and CollapsedRecord count length
        updateHeight: function (type) {

            var proxy = this,
                model = this.model,
                height = 0,
                detailsRowHeight = 0;
            if (proxy._isInExpandCollapseAll)
                return true;
            if (proxy._$gridContainer && proxy._$gridContent) {
                if (model.allowPaging && !(proxy.model.allowTextWrap && model.enableVirtualization)) {
                    height =model.sizeSettings.height=="auto"?proxy._getViewPortHeight(): model.rowHeight * proxy._updatedPageData.length;
                }
                else if (model.enableVirtualization) {
                    if (model.sizeSettings.height == "auto") {
                        height = proxy._getViewPortHeight();
                    } else {
                        if (model.allowTextWrap) {
                            if (model.allowPaging && !proxy._textWrapRowsDatas.isEnd) {
                                proxy._textWrapRowsDatas = proxy._getAvgTextWrapRowHeight("getAvgHeight");
                                height = proxy._textWrapRowsDatas.avgHeight * proxy._updatedPageData.length;
                            } else if (proxy._textWrapRowsDatas.isEnd) {
                                height = proxy._getAvgTextWrapRowHeight('updateHeight').height;
                            } else if (type == "extendHeight") {
                                height = $("#" + proxy._id + "e-gridcontainer").height() + ((proxy.model.updatedRecords.length - proxy._visibleRange.bottom) * proxy.model.rowHeight);
                            } else {
                                proxy._textWrapRowsDatas = proxy._getAvgTextWrapRowHeight("getAvgHeight");
                                height = model.sizeSettings.height == "auto" ? proxy._getViewPortHeight() : model.updatedRecords.length * proxy._textWrapRowsDatas.avgHeight;
                            }
                        } else {
                            height = this.getRecordsHeight();
                        }
                    }
                }

                else {
                    height = model.sizeSettings.height == "auto" ? proxy._getViewPortHeight() : this.getRecordsHeight();
                }

                if (model.showDetailsRow && model.detailsTemplate && !model.showDetailsRowInfoColumn&&model.sizeSettings.height!="auto") {
                    detailsRowHeight = proxy._getExpandedDetailsRowHeight();
                }

                height += detailsRowHeight;

                if (height == 0 && (model.currentViewData.length == 0 || model.flatRecords.length == 0))
                    height = 30;
                //To skip Vertical scrollbar
                if (model.allowPaging && !model.sizeSettings.height) {
                    var viewPortHeight;
                    if (model.allowTextWrap && !model.enableVirtualization) {
                        if (proxy._$frozenTableContent.length > 0) {
                            var frozenHeight = viewPortHeight = proxy._$gridContainer.find("#e-frozencontentdiv" + proxy._id).outerHeight(),
                                movableHeight = proxy._$gridContainer.find("#e-movablecontentdiv" + proxy._id).outerHeight();
                            if (movableHeight > frozenHeight)
                                viewPortHeight = proxy._$gridContainer.find("#e-movablecontentdiv" + proxy._id).outerHeight();
                        } else {
                            viewPortHeight = proxy._$gridContainer.find('.e-table').outerHeight();
                        }
                    }
                    else
                        viewPortHeight = height;
                    if (this._frozenColumnsLength > 0) {
                        proxy._$gridContent.css("height", viewPortHeight);
                        if (model.allowPaging && !model.sizeSettings.height) {
                            var scroller = proxy.getScrollElement().ejScroller("instance");
                            scroller.option("height", viewPortHeight);
                        }
                    }
                    else if (proxy.getScrollElement().hasClass("e-scroller")) {
                        if (proxy.getScrollElement().ejScroller("isHScroll")) {
                            viewPortHeight = height + proxy._scrollBarHeight;
                        }
                        proxy.getScrollElement().ejScroller({
                            height: viewPortHeight,//for border-width of gridcontent
                        });
                        
                    }
                    proxy._viewPortHeight = viewPortHeight;
                    proxy._gridHeight = height + proxy._getNonContentHeight();
                    if (proxy._summaryRowsCount > 0 && model.showTotalSummary)
                        proxy._gridHeight += proxy._$totalSummaryRowContainer.outerHeight();
                    proxy.element.height(proxy._gridHeight);                    
                }
                if (proxy.model.allowTextWrap && !proxy.model.enableVirtualization) {
                    proxy._$gridContainer.css({
                        "height": "auto",
                        "width": "auto"
                    });
                    if (this._frozenColumnsLength) {
                        proxy._$gridContainer.find("#e-movablecontentdiv" + proxy._id + ",#e-frozencontentdiv" + proxy._id).css("height", "auto");
                    }
                } else {
                    proxy._$gridContainer.css({
                        "height": height + "px",
                        "width": "auto"
                    });
                    if (this._frozenColumnsLength) {
                        proxy._$gridContainer.find("#e-movablecontentdiv" + proxy._id + ",#e-frozencontentdiv" + proxy._id).css("height", height + "px");
                    }
                }
                if (model.sizeSettings.height == "auto") {
                    if (proxy.getScrollElement().hasClass("e-scroller")) {
                        var scroller = proxy.getScrollElement().ejScroller("instance");
                        scroller.option("height", 0);
                    }
                    proxy._updateContentHeight();
                }
                if (proxy.getScrollElement().hasClass("e-scroller")) {
                    proxy.getScrollElement().ejScroller("refresh");
                    if (proxy._textWrapRowsDatas.isEnd) {
                        proxy._textWrapRowsDatas.isEnd = false;
                    }
                    proxy._updateScrollCss();
                }
            }
        },
        //Method to update last cell border as per records length and column resize mode
        _updateFixedTableBorder: function (action) {
            //Remove fixed column border when no record text displayed
            if (action == "sorting" || action == "dragAndDrop")
                return;
            var contentTable = this._frozenColumnsLength > 0 ? $(this.getContentTable()[1]) : $(this.getContentTable()),
                model = this.model;
            if (!model.isFromGantt && contentTable && contentTable.hasClass("e-fixed-border")) {
                if (model.currentViewData.length > 0 && !contentTable.hasClass("e-tableLastCell"))
                    contentTable.addClass("e-tableLastCell");
                else if (model.currentViewData.length == 0)
                    contentTable.removeClass("e-tableLastCell");
            }
        },
        //check scroller position in virtualization
        _setScrollTop: function (requestType) {

            var proxy = this,
            model = this.model,
            currentPosition = 0,
            top = proxy._scrollTop,
            rowHeight = model.rowHeight,
            length = model.currentViewData.length, id = model.isFromGantt ? proxy._id.replace("ejTreeGrid", "") : proxy._id,
            ganttbody = $("#" + id).find(".e-ganttviewerbodyContianer");

            /* check detail template and its row height */
            if (model.showDetailsRow && model.detailsTemplate && !model.showDetailsRowInfoColumn) {
                rowHeight += proxy._detailsRowHeight;
            }
            if (model.allowPaging && proxy._isNextPage) {
                top = 0;
                proxy._isNextPage = false;
                proxy.getScrollElement().ejScroller("scrollY", top, true);
            }
            if (top !== 0) {
                if(model.enableVirtualization){
                    if ((length * rowHeight) < proxy._viewPortHeight) {
                        if (requestType == "expandcollapse" && model.allowTextWrap && model.enableVirtualization) {
                            top = 0;
                        }else if (length > 0) {
                            currentPosition = top - (proxy._viewPortHeight - ((length - 1) * rowHeight));
                            if (currentPosition < 0)
                                currentPosition = 0;
                        }
                        if (model.isFromGantt)
                            ganttbody.ejScroller("scrollY", currentPosition, true);
                        else
                        proxy.getScrollElement().ejScroller("scrollY", currentPosition, true);
                    }
                }
                else {
                    if (model.isFromGantt)
                        ganttbody.ejScroller("scrollY", top, true);
                    else {
                        if (requestType == "delete") {
                            var updatedRecords = proxy.getUpdatedRecords();
                            currentPosition = (updatedRecords.length * rowHeight) - proxy._viewPortHeight;
                            if (currentPosition < 0)
                                top = 0;
                        }
                        proxy.getScrollElement().ejScroller("scrollY", top, true);
                    }
                }
            }
        },

        // Height Refresh method that used in grid while perform column resize.
        rowHeightRefresh: function () {
            var proxy = this, model = this.model;
            proxy._updateWrapRowHeights(null, "virtualRefresh", null, "resize");
            if (proxy._$frozenTableContent.length > 0) {
                proxy.getScrollElement().ejScroller("refresh");
                var movableScrollTop = proxy.getScrollElement().ejScroller("model.scrollTop");
                proxy._getFrozenScrollElement().scrollTop(movableScrollTop);
            }
        },

        //Update the viewport,total summary container height for every action that affects columns when allowTextWrap is in enable state.
        _updateGridContentHeight: function () {
            var proxy = this, model = this.model;
            if (proxy._$totalSummaryRowContainer) {
                proxy._$totalSummaryRowContainer.ejScroller({ 'height': 'auto' });
                proxy._$footerContainer.css({ 'overflow': 'hidden' });
                if (proxy._$totalSummaryRowContainer.find(".e-footercontainer").height() < model.totalSummaryHeight) {
                    if (proxy.isVScroll())
                        proxy._$totalSummaryRowContainer.addClass("e-scrollcss");
                } else {
                    proxy._$totalSummaryRowContainer.removeClass("e-scrollcss");
                    proxy._$totalSummaryRowContainer.ejScroller({ 'height': model.sizeSettings.height == "auto" ? 0 : model.totalSummaryHeight });
                    proxy._$totalSummaryRowContainer.width(proxy._$gridContent.width());
                    if (model.sizeSettings.height != "auto")
                    proxy._$totalSummaryRowContainer.width('auto');
                }
            }
            if (model.allowPaging && !model.sizeSettings.height) {
                if (proxy._$frozenTableContent.length > 0) {
                    var frozenHeight = proxy._viewPortHeight = proxy._$gridContainer.find("#e-frozencontentdiv" + proxy._id).outerHeight(),
                        movableHeight = proxy._$gridContainer.find("#e-movablecontentdiv" + proxy._id).outerHeight();
                    if (movableHeight > frozenHeight)
                        proxy._viewPortHeight = proxy._$gridContainer.find("#e-movablecontentdiv" + proxy._id).outerHeight();
                } else {
                    proxy._viewPortHeight = proxy._$gridContainer.find('.e-table').outerHeight();
                }
            }
            else {
                proxy._viewPortHeight = proxy._getViewPortHeight();
                if (proxy._$totalSummaryRowContainer)
                    proxy._viewPortHeight = model.sizeSettings.height == "auto" ? proxy._viewPortHeight : proxy._viewPortHeight - proxy._$totalSummaryRowContainer.outerHeight();
            }
            proxy._$gridContent.css({ "height": proxy._viewPortHeight + "px" });
                if (proxy.getScrollElement().hasClass("e-scroller")) {
                    var scroller = proxy.getScrollElement().ejScroller("instance");
                    scroller.option("height", model.sizeSettings.height == "auto" ? 0 : proxy._viewPortHeight);
                }
                if (proxy._frozenColumnsLength) {
                    if (model.sizeSettings.height == "auto")
                        proxy._updateContentHeight();
      
                var movableContainerHeight = this.getContent().find("#e-movablecontent" + proxy._id).height();
                if (movableContainerHeight != this.getContent().find("#e-frozencontainer" + proxy._id).height()) {
                    this.getContent().find("#e-frozencontainer" + proxy._id).height(movableContainerHeight);
                    proxy.getScrollElement().ejScroller("refresh");
                }
            }
            proxy._updateScrollCss();
        },

         
        _updateContentHeight: function () {
            var proxy = this, height;
            height = proxy._getViewPortHeight();
            if ($("#" + proxy._id + "e-gridcontent").find(".e-hscrollbar").length == 1) {
                $("#e-movablecontainer" + proxy._id).css("height", height);
                $("#e-movablecontent" + proxy._id).css("height", height - 18);
                $("#e-movablecontentdiv" + proxy._id).css("height", height - 18)
            }
            else {
                $("#e-movablecontainer" + proxy._id).css("height", height);
                $("#e-movablecontent" + proxy._id).css("height", height)
            }
            $("#" + proxy._id + "e-gridcontent").css("height", height)
            $("#" + proxy._id + "e-gridcontainer").css("height", height)
            $("#" + proxy._id + "e-table").css("top", 0);
            proxy.getScrollElement().ejScroller("refresh");
            proxy._updateScrollCss();
        },
        getChildCount:function(record,count)
        {
            var currentRecord, proxy = this;
            if (!record.hasChildRecords)
                return 0;
            for (var i = 0; i < record.childRecords.length;i++)
            {
                currentRecord= record.childRecords[i];
                count++;
                if(currentRecord.hasChildRecords)
                {
                    count=proxy.getChildCount(currentRecord, count);
                }
            }
            return count;
        },
        //UPDATE THE FILTERED RECORDS FOR ADDING PARENTRECORDS
        _updateFilteredRecords: function (data, isSearching) {

            var proxy = this,
                count = 0,
                length = data.length,
                record,virtualization=proxy.model.enableVirtualization;
            proxy._filteredData = data;
            proxy._flatFilteredRecords = [];
            proxy._filteredRecords = [];
            proxy._filteredGanttRecords = [];
            proxy._filterParentRecords = [];
            proxy._updateFilterParent = [];
            for (count; count < length; count++) {

                record = data[count];
                if ((!isSearching && (proxy.model.filterSettings.filterHierarchyMode == "child" || proxy.model.filterSettings.filterHierarchyMode == "none"))
                    || (isSearching && (proxy.model.searchSettings.searchHierarchyMode == "child" || proxy.model.searchSettings.searchHierarchyMode == "none")))
                    proxy._isHierarchyFiltering = true;
                proxy._addParentRecord(record,isSearching);

                if (!this.model.isFromGantt) {
                    if (record.hasChildRecords && record.childRecords.length > 0) {
                        if (!this._checkChildExsist(record, data, isSearching)) {
                            record.hasFilteredChildRecords = false;
                        }else {
                            record.hasFilteredChildRecords = true;
                        }
                    }
                    if (record.parentItem) {
                        record.parentItem.hasFilteredChildRecords = true;
                    }
                }
            }
            if (data.length != 0 && proxy._isHierarchyFiltering)
            proxy._updateFilterLevel();
         
            if (virtualization)
                proxy._filteredRecords = proxy._isHierarchyFiltering ? proxy._flatFilteredRecords : proxy.getExpandedRecords(proxy._flatFilteredRecords);
            else
                proxy._filteredRecords = proxy._flatFilteredRecords.slice();
            if (data.length != 0 && proxy._isHierarchyFiltering)
                proxy._updateFilterExpandState(proxy._filteredRecords);
        },


        //check whether the filtered records are collapsed or expanded
        _updateFilterExpandState: function (record) {
            var proxy = this,
                length = record.length;
            for (var count = 0; count < length; count++) {
                if ($.inArray(record[count].parentItem, proxy._flatFilteredRecords) != -1) {
                    if (record[count].parentItem.expanded && ($.inArray(record[count].parentItem, proxy._updateFilterParent) != -1)) {
                        proxy._updateFilterParent.push(record[count])
                        record[count].isDisplay = true; // property for render the collapsed state record while hierarchyfiltering
                    }
                    else {
                        if (record[count].isDisplay)
                            record[count].isDisplay = false
                    }
                }
                else {
                    proxy._updateFilterParent.push(record[count])
                    record[count].isDisplay = true;
                }
            }
        },

        //set the filterLevel for filtered records and find zeroth level parentrecords.
        _updateFilterLevel: function () {
            var proxy = this, level = 0,
            record = proxy._flatFilteredRecords,
            length = proxy._flatFilteredRecords.length;
            for (var count = 0; count < length; count++) {
                if ($.inArray(record[count].parentItem, proxy._flatFilteredRecords) != -1)
                    record[count].filterLevel = record[count].parentItem.filterLevel + 1;
                else {
                    record[count].filterLevel = 0;
                    proxy._filterParentRecords.push(record[count])
                }
            }
        },

        /* Check child records of filtered parent records exists or not in updated records*/
        _checkChildExsist: function (record, collection, isSearching) {
            var childRecords = record.childRecords, proxy = this,
                length = childRecords.length, isExsist = false;
            for (var count = 0; count < length; count++) {
                if ((!isSearching && (proxy.model.filterSettings.filterHierarchyMode == "child" || proxy.model.filterSettings.filterHierarchyMode == "both"))
                    || (isSearching && (proxy.model.searchSettings.searchHierarchyMode == "child" || proxy.model.searchSettings.searchHierarchyMode == "both"))) {
                    if ($.inArray(childRecords[count], proxy._flatFilteredRecords) != -1) {
                        isExsist = true;
                        break;
                    }
                    if (!childRecords[count].isSummaryRow)
                        proxy._flatFilteredRecords.push(childRecords[count]);
                    isExsist = true;
                    if (childRecords[count].hasChildRecords)
                        isExsist = this._checkChildExsist(childRecords[count], collection, isSearching);
                }
                else {
                    if ($.inArray(childRecords[count], collection) != -1) {
                        isExsist = true;
                        break;
                    } else if (childRecords[count].hasChildRecords) {
                        isExsist = this._checkChildExsist(childRecords[count], collection, isSearching);
                    }
                }
            }
            return isExsist;
        },

       /* update hasFilteredChildRecords status and clear the filterLevel of all records when clear the filter */
        _clearFilterLevel: function (collection) {
            var count = 0, length = collection.length, currentRecord, proxy = this;
            for (count; count < length; count++) {
                currentRecord = collection[count];
                if (currentRecord.filterLevel || currentRecord.filterLevel == 0) {
                    if (currentRecord.hasChildRecords && !currentRecord.hasFilteredChildRecords)
                        currentRecord.hasFilteredChildRecords = true;
                    delete currentRecord.filterLevel

                }
                if (currentRecord.isDisplay)
                    delete currentRecord.isDisplay
                proxy._isHierarchyFiltering = false;
            }
        },

        /* While clear the filter, update hasFilteredChildRecords status of all records*/
        _updateHasFilteredChildRecordsStatus: function (collection) {
            var count = 0, length = collection.length, currentRecord, proxy = this;
            for (count; count < length; count++) {
                currentRecord = collection[count];
                if (currentRecord.hasChildRecords && !currentRecord.hasFilteredChildRecords)
                    currentRecord.hasFilteredChildRecords = true;
                if (currentRecord.filterLevel > 0) {
                    delete currentRecord.filterLevel
                }
            }
        },
        //ADD PARENTRECORD FOR FILTERED OTH LEVEL ITEMS
        _addParentRecord: function (record,isSearching) {

            var proxy = this;
            if ((proxy.model.filterSettings.filterHierarchyMode == "none" && !isSearching)
                || (proxy.model.searchSettings.searchHierarchyMode == "none" && isSearching)) {
                if (record.parentItem == null) {
                    if ($.inArray(record, proxy._filteredData) != -1) {
                        if ($.inArray(record, proxy._flatFilteredRecords) == -1) {
                            proxy._flatFilteredRecords.push(record);
                            record.hasFilteredChildRecords = true;
                        }
                        return;
                    }
                }
                else {
                    proxy._addParentRecord(record.parentItem, isSearching);
                    if ($.inArray(record.parentItem, proxy._filteredData) != -1 || $.inArray(record.parentItem, proxy._flatFilteredRecords) != -1) {
                        if ($.inArray(record, proxy._flatFilteredRecords) == -1)
                            proxy._flatFilteredRecords.push(record);
                    }
                    else {
                        if ($.inArray(record, proxy._filteredData) != -1)
                            if ($.inArray(record, proxy._flatFilteredRecords) == -1)
                                proxy._flatFilteredRecords.push(record);
                    }
                }
            }
            else {
                if (record.parentItem)
                    if ((proxy.model.filterSettings.filterHierarchyMode == "child" && !isSearching)
                        || (proxy.model.searchSettings.searchHierarchyMode == "child" && isSearching)) {
                        if ($.inArray(record.parentItem, proxy._filteredData) != -1)
                            proxy._addParentRecord(record.parentItem, isSearching);
                    }
                    else
                        proxy._addParentRecord(record.parentItem, isSearching);
                if ($.inArray(record, proxy._flatFilteredRecords) === -1) {
                    proxy._flatFilteredRecords.push(record);
                }
            }

        },


        //UPDATEEXPANDCOLLAPSE FOR SORTED RECORDS
        _updateExpandCollapseForSortedRecords: function (Record, expanded) {

            var proxy = this,
                count = 0,
                length = proxy._sortedRecords.length,
                record,
                index = proxy._sortedRecords.indexOf(Record);

            if (expanded) {

                proxy._addNestedSortRecords(Record, index);

            } else {

                var removedCount = 0;

                for (count = index + 1; count < length; count++) {

                    record = proxy._sortedRecords[count];

                    if (record.level === Record.level) {
                        break;
                    } else if (!proxy.getExpandStatus(record)) {
                        removedCount++;
                    }

                }

                proxy._sortedRecords.splice(index + 1, removedCount);

            }
        },


        //ADD NESTEDSORTRECORDS
        _addNestedSortRecords: function (record, index) {

            var proxy = this,
                childRecords,
                sortColumns = proxy.model.sortSettings.sortedColumns,
                length;

            if (sortColumns.length) {

                length = sortColumns.length - 1;
                proxy._queryManagar.queries = [];

                for (var i = length; i >= 0; i--) {

                    proxy._queryManagar.sortBy(sortColumns[i].field, sortColumns[i].direction);

                }

            }
            if (record.hasChildRecords) {

                var dataManager = ej.DataManager(record.childRecords),
                    count,
                    childrecord;

                childRecords = dataManager.executeLocal(proxy._queryManagar).result;
                length = childRecords.length;

                for (count = 0; count < length; count++) {

                    childrecord = childRecords[count];

                    if (proxy._filteredRecords.length) {

                        if ($.inArray(childrecord, proxy._filteredRecords) !== -1) {
                            proxy._sortedRecords.splice(++index, 0, childrecord);
                        }

                    } else {
                        proxy._sortedRecords.splice(++index, 0, childrecord);
                    }

                    if (childrecord.hasChildRecords && childrecord.expanded) {
                        proxy._addNestedSortRecords(childrecord, index);
                    }
                }
            }
        },

        //UPDATE Edit Settings
        updateEditSettings: function (edit) {

            var proxy = this;

            if (edit) {
                if (edit.editMode) {
                    if (proxy.model.editSettings.editMode === "normal" && edit.editMode === "cellEditing") {
                        proxy.model.editSettings.editMode = edit.editMode;
                        proxy._processEditing();
                    } else {
                        proxy.model.editSettings.editMode = edit.editMode;
                    }
                }
                if (!ej.isNullOrUndefined(edit.allowAdding))
                    proxy.model.editSettings.allowAdding = edit.allowAdding;
                if (!ej.isNullOrUndefined(edit.allowEditing))
                    proxy.model.editSettings.allowEditing = edit.allowEditing;
                if (!ej.isNullOrUndefined(edit.allowDeleting))
                    proxy.model.editSettings.allowDeleting = edit.allowDeleting;
                if (!ej.isNullOrUndefined(edit.beginEditAction))
                    proxy.model.editSettings.beginEditAction = edit.beginEditAction;
                proxy._enableEditingEvents();
            }
        },

        //UPDATE ALTROW
        updateAltRow: function () {

            var proxy = this,
                count = 0,
                currentViewData = proxy.model.updatedRecords,
                length = currentViewData.length,
                record, isAltRow = true;

            for (count = 0; count < length; count++) {
                record = currentViewData[count];
                if (record.isSummaryRow || !proxy.getExpandStatus(record))
                    continue;
                // record.isAltRow = count % 2 == 0 ? false : true;
                record.isAltRow = !isAltRow;
                isAltRow = record.isAltRow;
            }

        },


        
        //COUNT THE NUMBER OF CHILD RECORDS PRESENT IN THE GANTTRECORD
        _getFilteredChildRecordsCount: function (Record) {

            var proxy = this,
                model=proxy.model,
                length = Record&&Record.childRecords && Record.childRecords.length,
                i = 0,
                record;

            for (i = 0; i < length; i++) {

                record = Record.childRecords[i];
                if (model.enableVirtualization)
                {
                    if(proxy.getExpandStatus(record))
                    {
                        proxy._removedCount++;
                    }
                }
                else
                {
                    proxy._removedCount++;
                }
                   
                if (record.childRecords) {
                    proxy._getFilteredChildRecordsCount(record);
                }
            }

            return proxy._removedCount;
        },


        //SORTING THE RECORDS
        _sortingRecords: function (args) {

            var proxy = this,
                model = proxy.model,
                sortcolumns = model.sortSettings.sortedColumns;

            proxy._queryManagar.queries = [];

            if (sortcolumns.length) {

                var length = sortcolumns.length - 1;

                for (var i = length; i >= 0; i--) {
                    var fieldName;
                    if (model.isFromGantt) {
                        var currentColumn = ej.TreeGrid.getColumnByMappingName(proxy.model.columns, sortcolumns[i].field);
                        if (ej.isNullOrUndefined(currentColumn))
                            currentColumn = this.getColumnByField(sortcolumns[i].field);
                        fieldName = currentColumn.field;
                    } else {
                        fieldName = sortcolumns[i].field;
                    }
                    if (model.isFromGantt) {
                            if (fieldName === "resourceInfo")
                                fieldName = "resourceNames";
                            else if (fieldName === "predecessor")
                                fieldName = "predecessorsName";
                    }

                    proxy._queryManagar.sortBy(fieldName, sortcolumns[i].direction);
                }
            }

            var dataManager = new ej.DataManager(model.parentRecords),
                records = dataManager.executeLocal(proxy._queryManagar).result;

            proxy._sortedRecords = [];
            proxy._storedIndex = -1;
            proxy._rowIndex = -1;

            proxy._createSortedRecords(records);
            proxy._tempsortedrecords = proxy._sortedRecords;
            proxy.model.updatedRecords = proxy._sortedRecords;
            if (proxy._isHierarchyFiltering)
                proxy._updateFilterParent = proxy._sortedRecords;
            //Update zeroLevelParentRecords
            if (model.allowPaging && model.pageSettings.pageSizeMode === ej.TreeGrid.PageSizeMode.Root)
                model.parentRecords = proxy._getParentRecords(proxy.model.updatedRecords, proxy, true);

            return true;
        },


        /**
        * Create sorted collection argumented data
        * @param {data} collection of records to sorting
        */
        _createSortedRecords: function (data) {

            var proxy = this, model = proxy.model,
                sortedRecords = proxy._sortedRecords,
                dataManager,
                enableAltRow = proxy.model.enableAltRow,model=this.model;
            data = proxy._spliceSummaryRows(data);
            $.each(data, function (index, record) {
                //Skip the summary record from sorting.
                if (record.isSummaryRow) {
                    var recordIndex = record.parentItem.childRecords.indexOf(record);
                    record.parentItem.childRecords.splice(recordIndex, 1);
                    return;
                }
                if ((proxy._filterString.length > 0 || proxy._searchString.length > 0) || (model.filterSettings.filteredColumns.length > 0)) {

                    if (proxy._filteredRecords.length > 0 && proxy._filteredRecords.indexOf(record) !== -1) {

                        proxy._storedIndex++;
                        proxy._rowIndex++;

                        if (enableAltRow) {

                            record.isAltRow = proxy._rowIndex % 2 == 0 ? false : true;

                        }

                        sortedRecords[proxy._storedIndex] = record;

                    }
                } else {

                    proxy._storedIndex++;
                    proxy._rowIndex++;

                    if (enableAltRow) {

                        record.isAltRow = proxy._rowIndex % 2 == 0 ? false : true;

                    }

                    sortedRecords[proxy._storedIndex] = record;

                }

                if (record.hasChildRecords && record.expanded) {
                    record.childRecords = proxy._spliceSummaryRows(record.childRecords);
                    dataManager = ej.DataManager(record.childRecords);
                    var childRecords = dataManager.executeLocal(proxy._queryManagar).result;
                    proxy._createSortedRecords(childRecords);

                }
                else if (record.hasChildRecords && !record.expanded && !model.enableVirtualization) {
                    record.childRecords = proxy._spliceSummaryRows(record.childRecords);
                    proxy._setChildRecords(record, sortedRecords);
                }
            });
        },

        _setChildRecords:function(record,sortedRecords)
        {
            var proxy = this,
                model = proxy.model,
                enableAltRow = proxy.model.enableAltRow,
                length = record.childRecords.length,
                dataManager;
            dataManager = ej.DataManager(record.childRecords);
            var childRecords = dataManager.executeLocal(proxy._queryManagar).result;
            for(var count=0;count<length;count++)
            {
                if ((proxy._filterString.length > 0 || proxy._searchString.length > 0) || (model.filterSettings.filteredColumns.length > 0)) {

                    if (proxy._filteredRecords.length > 0 && proxy._filteredRecords.indexOf(childRecords[count]) !== -1) {
                        proxy._storedIndex++;
                        if (enableAltRow) {
                            childRecords[count].isAltRow = proxy._storedIndex % 2 == 0 ? false : true;
                        }
                        sortedRecords[proxy._storedIndex] = childRecords[count];
                        if (childRecords[count].hasChildRecords) {
                            this._setChildRecords(childRecords[count], sortedRecords);
                        }
                    }
                } else
                {
                    proxy._storedIndex++;
                    if (enableAltRow) {
                        childRecords[count].isAltRow = proxy._storedIndex % 2 == 0 ? false : true;
                    }
                    sortedRecords[proxy._storedIndex] = childRecords[count];
                    if (childRecords[count].hasChildRecords) {
                        this._setChildRecords(childRecords[count], sortedRecords);
                    }
                }
            }
        },
        //UPDAT THE SORTED RECORDS
        _updateSortedRecords: function (data) {

            var proxy = this,
                count = 0,
                length = data.length,
                record, model = this.model;

            for (count; count < length; count++) {

                record = data[count];

                if (!model.enableVirtualization) {

                    if (proxy._filteredRecords.length > 0) {

                        if ($.inArray(record, proxy._filteredRecords) !== -1 && $.inArray(record, proxy._sortedRecords) === -1) {
                            proxy._sortedRecords.push(record);
                        }

                    } else {

                        if ($.inArray(record, proxy._sortedRecords) === -1) {
                            proxy._sortedRecords.push(record);
                        }

                    }

                    if (record.hasChildRecords && record.childRecords.length > 0) {

                        var dataManager = ej.DataManager(record.childRecords),
                            sortedChildRecords = dataManager.executeLocal(proxy._queryManagar).result;
                        proxy._updateSortedRecords(sortedChildRecords);

                    }
                }
            }
        },


        //REMOVE SORT ICON FORM COLUMN HEADER
        _removeSortElementFromColumn: function (field) {

            var proxy = this,
                column = ej.TreeGrid.getColumnByField(proxy.model.columns, field),
                index = $.inArray(column, proxy.model.columns),
                $headerCellDiv = proxy.getHeaderTable().find("thead").find(".e-headercell").eq(index).find(".e-headercelldiv");

            $headerCellDiv.find(".ascending,.descending").remove();
            $headerCellDiv.parent().removeAttr("aria-sort");
        },


        //ADD EMPTYCOLUMN TO THE TREEGRID
        _addEmptyColumntoGrid: function () {

            var proxy = this;
            $(proxy.element).find('.e-gridheadercontainer table colgroup').append(ej.buildTag('col', "", {
                "width": "auto"
            },
            {}));
            proxy._$gridContainer.find('table colgroup').append(ej.buildTag('col', "", {
                "width": "auto"
            },
            {}));
            $(proxy.element).find('.e-gridheadercontainer table thead tr').append(ej.buildTag('th.e-headercell'));
        },


        //UPDATE THE SCROLLTOP OF THE GRIDCONTAINER
        updateScrollTop: function (y, isFromChart) {

            var args = {},
                proxy = this;

            args.requestType = ej.TreeGrid.Actions.Scroll;
            args.delta = y;

            var isHorizontalScroll = proxy.getScrollElement().ejScroller("isHScroll");

            if (!isHorizontalScroll && this.model.isFromGantt) {
                proxy._$gridContent.scrollTop(y);//grid container
            }
            else
            {
                proxy._$gridContent.scrollTop(0);
            }
            proxy.getScrollElement().ejScroller("scrollY", y, true);
            if (proxy.model.isFromGantt && !isFromChart) {
                proxy._completeAction(args);
               proxy._focusTreeGridElement();
            }
            else proxy._isFromChart = false;
            
        },

        _selectNextCell: function (direction, action) {
            var proxy = this, model = proxy.model,
                columns = model.columns,
                columnLength = columns.length,
                rowElement, cellElement,
                selectingRowIndex,
                currentSelectingRecord,
                $form = $("#" + proxy._id + "EditForm"),
                updatedRecords = proxy.getUpdatedRecords(),
                expandedRecords = model.allowPaging ? updatedRecords : proxy.getExpandedRecords(model.updatedRecords);
            proxy._isShiftKeyNavigation = false;

            switch (direction) {
                case "right":                   
                    if ((proxy._focusingRowIndex >= updatedRecords.length - 1 && proxy._cellIndex >= columnLength - 1)
                        || (proxy._focusingRowIndex == -1 || proxy._cellIndex == -1)) {
                        proxy.element[0].focus();
                        return;
                    }
                    proxy._cellIndex += 1;
                    if (proxy._cellIndex == columnLength) {
                        proxy._cellIndex = 0;
                        var selectedItem = updatedRecords[proxy._rowIndexOfLastSelectedCell];
                        selectingRowIndex = expandedRecords.indexOf(selectedItem);
                        currentSelectingRecord = expandedRecords[selectingRowIndex + 1];
                        //To skip the key Navigation from summary row.
                        if (currentSelectingRecord && currentSelectingRecord.isSummaryRow)
                            currentSelectingRecord = proxy._getNextRecord(selectingRowIndex + 1, expandedRecords);

                        if (!currentSelectingRecord)
                            return;
                        proxy._focusingRowIndex = updatedRecords.indexOf(currentSelectingRecord);
                    }
                    if (proxy._focusingRowIndex >= updatedRecords.length)
                        return;
                    if ((!columns[proxy._cellIndex].visible || !columns[proxy._cellIndex].allowCellSelection) && $form.length <= 0)
                        proxy._cellIndex = proxy.getUpNextVisibleColumnIndex(proxy._cellIndex, action);
                    if ($form.length > 0 && columns[proxy._cellEditingDetails.columnIndex].allowCellSelection)
                        proxy._cellIndex = proxy._cellEditingDetails.columnIndex;
                    var cellInfo = {
                        rowIndex: proxy._focusingRowIndex,
                        cellIndex: proxy._cellIndex
                    };
                    proxy.selectCells([cellInfo]);
                    proxy.updateScrollBar();
                    break;
                case "left":                    
                    proxy._cellIndex -= 1;
                    columnLength = columns.length;

                    if (proxy._cellIndex < 0) {
                        proxy._cellIndex = columnLength - 1;
                        var selectedItem = updatedRecords[proxy._rowIndexOfLastSelectedCell];
                        selectingRowIndex = expandedRecords.indexOf(selectedItem);
                        currentSelectingRecord = expandedRecords[selectingRowIndex - 1];
                        //To skip the key Navigation from summary row.
                        if (currentSelectingRecord && currentSelectingRecord.isSummaryRow)
                            currentSelectingRecord = proxy._getNextRecord(selectingRowIndex - 1, expandedRecords, "upArrow");

                        if (!currentSelectingRecord)
                            return;
                        proxy._focusingRowIndex = updatedRecords.indexOf(currentSelectingRecord);
                    }
                    if (proxy._focusingRowIndex < 0)
                        return;
                    if (proxy._focusingRowIndex >= updatedRecords.length)
                        proxy._focusingRowIndex = updatedRecords.length - 1;
                    if ((!columns[proxy._cellIndex].visible || !columns[proxy._cellIndex].allowCellSelection) && $form.length <= 0)
                        proxy._cellIndex = proxy.getPreviousVisibleColumnIndex(proxy._cellIndex, action);
                    if ($form.length > 0 && columns[proxy._cellEditingDetails.columnIndex].allowCellSelection)
                        proxy._cellIndex = proxy._cellEditingDetails.columnIndex;

                    var cellInfo = {
                        rowIndex: proxy._focusingRowIndex,
                        cellIndex: proxy._cellIndex
                    };
                    proxy.selectCells([cellInfo]);
                    proxy.updateScrollBar();
                    break;
            }
        },
        //MOVE CURRENT CELL FOR KEYBOARD INTERACTION
        _moveCurrentCell: function (direction) {

            var proxy = this,
                rowIndex = proxy._cellEditingDetails.rowIndex,
                columnIndex = proxy._cellEditingDetails.columnIndex,
                model = proxy.model,
                updatedRecords = proxy.getUpdatedRecords();

            if (rowIndex == -1 && columnIndex == -1) return false;

            if (proxy.model.isEdit) {

                proxy.saveCell();
                proxy.model.isEdit = false;

            }
            if (model.enableVirtualization) {
                var record = model.currentViewData[rowIndex];
                proxy._cellEditingDetails.rowIndex = rowIndex = updatedRecords.indexOf(record);
            }
            switch (direction) {

                case "right":
                    var columns = model.columns,
                        columnLength = columns.length,
                        hiddenColumn = proxy.getHiddenColumns(),
                        visibleColumn = $.extend([], columns),
                        nextColumnIndex, newColumnIndex, visibleColumnLength;
                    if(hiddenColumn)
                    hiddenColumn.forEach(function (item) {
                        visibleColumn.splice(visibleColumn.indexOf(item), 1);
                    });
                    newColumnIndex = visibleColumn.indexOf(columns[columnIndex]);
                    visibleColumnLength = visibleColumn.length;
                    if (rowIndex == updatedRecords.length - 1 && newColumnIndex == visibleColumnLength - 1) {
                        return true;
                    }
                    if (newColumnIndex == visibleColumnLength - 1) {
                        nextColumnIndex = 0;
                        while (!columns[nextColumnIndex].visible) {
                            nextColumnIndex++;
                        }
                        proxy._cellEditingDetails.columnIndex = nextColumnIndex;
                        if(proxy._getNextRow(direction, rowIndex, proxy))
                            return true;
                        
                    }
                    else {
                        nextColumnIndex = columnIndex + 1;
                        while (!columns[nextColumnIndex].visible) {
                            nextColumnIndex++;
                        }
                        proxy._cellEditingDetails.columnIndex = nextColumnIndex;
                    }
                    while (model.columns[nextColumnIndex].allowEditing == false || !columns[nextColumnIndex].visible) {
                        if ((nextColumnIndex + 1) == model.columns.length) {
                            proxy._cellEditingDetails.columnIndex = nextColumnIndex = 0;
                            if (proxy._getNextRow(direction, rowIndex, proxy))
                                return true;
                            continue;
                        }
                        proxy._cellEditingDetails.columnIndex = ++nextColumnIndex;
                    }
                    proxy.updateScrollBar();
                    proxy.cellEdit(proxy._cellEditingDetails.rowIndex,
                        model.columns[proxy._cellEditingDetails.columnIndex].field);
                    proxy._editAddTools();
                    break;

                case "left":
                    var columns = model.columns,
                       columnLength = columns.length,
                       hiddenColumn = proxy.getHiddenColumns(),
                       visibleColumn = $.extend([], columns),
                       prevColumnIndex, newColumnIndex, visibleColumnLength;
                    if (hiddenColumn)
                        hiddenColumn.forEach(function (item) {
                            visibleColumn.splice(visibleColumn.indexOf(item), 1);
                        });
                    newColumnIndex = visibleColumn.indexOf(columns[columnIndex]);
                    visibleColumnLength = visibleColumn.length;
                    if ((rowIndex == 0 && newColumnIndex == 0)) return true;
                    if (newColumnIndex == 0) {
                        prevColumnIndex = model.columns.length - 1;
                        while (!columns[prevColumnIndex].visible) {
                            prevColumnIndex--;
                        }
                        proxy._cellEditingDetails.columnIndex = prevColumnIndex;
                        if(proxy._getNextRow(direction, rowIndex, proxy))
                            return true;
                    } else {
                        prevColumnIndex = columnIndex - 1;
                        while (!columns[prevColumnIndex].visible) {
                            prevColumnIndex--;
                        }
                        proxy._cellEditingDetails.columnIndex = prevColumnIndex;
                    }

                    while (model.columns[prevColumnIndex].allowEditing == false || !columns[prevColumnIndex].visible) {

                        if ((prevColumnIndex - 1) == -1) {
                            proxy._cellEditingDetails.columnIndex = prevColumnIndex = columnLength - 1;
                            if (proxy._getNextRow(direction, rowIndex, proxy))
                                return true;
                            continue;
                        }
                        proxy._cellEditingDetails.columnIndex = --prevColumnIndex;
                    }
                    proxy.updateScrollBar();
                    proxy.cellEdit(proxy._cellEditingDetails.rowIndex, model.columns[proxy._cellEditingDetails.columnIndex].field);
                    proxy._editAddTools();
                    break;

                case "up":
                    if (rowIndex == 0) return true;
                    proxy._cellEditingDetails.rowIndex = rowIndex - 1;
                    proxy.selectRows(proxy._cellEditingDetails.rowIndex);
                    proxy._rowSelectedEventTrigger(proxy._cellEditingDetails.rowIndex);
                    proxy.cellEdit(proxy._cellEditingDetails.rowIndex, model.columns[proxy._cellEditingDetails.columnIndex].field);
                    break;

                case "down":
                    if (rowIndex + 1 == updatedRecords.length) {
                        proxy._focusTreeGridElement();
                        proxy._isEnterKeyPressed = true;
                    }
                    if (model.showSummaryRow) {
                        if (rowIndex + 1 == updatedRecords.length - model.summaryRows.length)
                            proxy._isEnterKeyPressed = true;
                    }
                    if (!proxy._isEnterKeyPressed) {
                        if (updatedRecords.length > (rowIndex + 1))
                            if (!model.enableVirtualization) {
                                var currentRecord = updatedRecords[rowIndex],
                                    expandedRecords = model.allowPaging? updatedRecords : proxy.getExpandedRecords(model.updatedRecords),
                                    nextRecord = expandedRecords[expandedRecords.indexOf(currentRecord) + 1];
                                //Skip the summary row from keyboard navigation.
                                if (nextRecord && nextRecord.isSummaryRow)
                                    nextRecord = proxy._getNextRecord(rowIndex + 1, expandedRecords);
                                var index = updatedRecords.indexOf(nextRecord);
                                if ((rowIndex == expandedRecords.length - 1 && columnIndex == model.columns.length - 1) || index == -1) {
                                    return true;
                                }
                                proxy._cellEditingDetails.rowIndex = index;
                            }
                            else {
                                var nextRecord = updatedRecords[rowIndex + 1];
                                //Skip the summary row from keyboard navigation.
                                if (nextRecord && nextRecord.isSummaryRow)
                                    nextRecord = proxy._getNextRecord(rowIndex + 1, updatedRecords);
                                index = updatedRecords.indexOf(nextRecord);
                                if (index == -1)
                                    return true;
                                proxy._cellEditingDetails.rowIndex = index;
                            }
                        if (!proxy._rowSelectingEventTrigger(proxy.selectedRowIndex(), proxy._cellEditingDetails.rowIndex)) {
                            proxy.selectRows(proxy._cellEditingDetails.rowIndex);
                            proxy._rowSelectedEventTrigger(proxy._cellEditingDetails.rowIndex);
                        }
                        proxy.updateScrollBar();
                        var args = {};
                        args.requestType = ej.TreeGrid.Actions.Scroll;
                        args.delta = proxy._$gridContent.children('.e-content').scrollTop();
                        proxy._trigger("actionComplete", args);
                        proxy.cellEdit(proxy._cellEditingDetails.rowIndex, model.columns[proxy._cellEditingDetails.columnIndex].field);
                        proxy._editAddTools();
                    }
                    else
                        proxy._isEnterKeyPressed = false;
                    break;
            }

            return false;

        },
        //To skip the summary record. 
        _getNextRecord: function (index, expandedRecords, action) {
            var nextRecord;
            do {
                nextRecord = expandedRecords[index];
                if (action == "upArrow" || action == "lastRowSelection" || action == "bottomRowSelection" || action=="child" || action == "above")
                    index--;
                else
                    index++;
            } while (nextRecord && nextRecord.isSummaryRow);
            return nextRecord;
        },

        _getNextRow: function (direction, rowIndex, proxy) {
            var cellIndex,
            model = proxy.model,
            index,
            updatedRecords = proxy.getUpdatedRecords();
            if (direction == "right")
                cellIndex = 1;
            else
                cellIndex = -1;

            if (!model.enableVirtualization) {
                var currentRecord = updatedRecords[rowIndex],
                  expandedRecords = model.allowPaging ? updatedRecords : proxy.getExpandedRecords(model.updatedRecords),
                  nextRecord = expandedRecords[expandedRecords.indexOf(currentRecord) + cellIndex];
                //Skip the summary row from keyboard navigation.
                if (nextRecord && nextRecord.isSummaryRow) {
                    var action = cellIndex > 0 ? "" : "lastRowSelection";
                    nextRecord = proxy._getNextRecord(rowIndex + cellIndex, expandedRecords, action);
                }
                if (model.allowPaging && nextRecord) {
                    index = updatedRecords.indexOf(nextRecord);
                    if (index < 0 && cellIndex == 1)
                        proxy.gotoPage(proxy._currentPage() + 1);
                    else if (index < 0 && cellIndex == -1)
                        proxy.gotoPage(proxy._currentPage() - 1);
                }
                index = updatedRecords.indexOf(nextRecord);
                if(index == -1) {
                    return true;
                }
                proxy._cellEditingDetails.rowIndex = index;
            }
            else {
                var nextRecord = updatedRecords[rowIndex + cellIndex];
                //Skip the summary row from keyboard navigation.
                if (nextRecord && nextRecord.isSummaryRow) {
                    var action = cellIndex > 0 ? "" : "lastRowSelection";
                    nextRecord = proxy._getNextRecord(rowIndex + cellIndex, updatedRecords, action);
                }
                if (model.allowPaging && nextRecord) {
                    index = updatedRecords.indexOf(nextRecord);
                    if (index < 0 && cellIndex == 1)
                        proxy.gotoPage(proxy._currentPage() + 1);
                    else if(index < 0 && cellIndex == -1)
                        proxy.gotoPage(proxy._currentPage() - 1);
                }
                index = updatedRecords.indexOf(nextRecord);
                if (index == -1)
                    return true;
                proxy._cellEditingDetails.rowIndex = index;
            }
            if (model.allowSelection && model.selectionSettings.selectionMode == "cell") {
                model.selectedItem = updatedRecords[proxy._cellEditingDetails.rowIndex];
                proxy._rowIndexOfLastSelectedCell = proxy._cellEditingDetails.rowIndex;
            }
            else if (!proxy._rowSelectingEventTrigger(proxy.selectedRowIndex(), proxy._cellEditingDetails.rowIndex)) {
                proxy.selectRows(proxy._cellEditingDetails.rowIndex);
                proxy._rowSelectedEventTrigger(proxy._cellEditingDetails.rowIndex);
            }

        },

        //FIND THE COLUMNWIDTH OF THE TREEGRID COLUMN
        _findColumnsWidth: function (extra) {

            var proxy = this,
                length = proxy.model.columns.length,
                j = proxy.getHeaderTable().find("colgroup").find("col");
            
            for (var i = 0; i < length; i++)
                proxy.columnsWidthCollection[i] = j.eq(i).width();

        },

        //CALCULATE THE TOTAL WIDTH OF THE COLUMNS
        _calculateWidth: function () {

            var j = this.getHeaderTable().find("colgroup").find("col"),
                width = 0;

            for (var i = 0; i < j.length; i++)
                width += j.eq(i).width();

            return width;
        },
        getScrollObject: function () {
            return this.getScrollElement().data("ejScroller");

        },
        //update element height when viewport height is <0
        _updateElementHeight:function()
        {
            var proxy = this;
            proxy._calculateDimensions();
            proxy.updateViewPortHeight();
        },
        /* Get scroller rendered div in treegrid*/
        getScrollElement: function () {
            if (this._frozenColumnsLength > 0)
                return this.element.find("#e-movablecontainer" + this._id);
            else
                return this._$gridContent;
        },

        /* Get scroller rendered frozen div in treegrid*/
        _getFrozenScrollElement: function () {
            if (this._frozenColumnsLength > 0)
                return this.element.find("#e-frozencontainer" + this._id);
            else
                return null;
        },
        /* Get width of all columns before the index or get frozen column width*/
        _getFrozenColumnWidth: function (index) {
            var width = 0,
                index = ej.isNullOrUndefined(index) ? this._frozenColumnsLength : index,
                columns = ej.isNullOrUndefined(index) ? this._frozenColumns : this.model.columns;
            if (index > 0)
            {
                for (var count = 0; count < index; count++) {
                    if (columns[count].visible == true) {
                        width += columns[count] ? this.columnsWidthCollection[count] : 0;
                    }
                }
            }
            return width;
        },
        _renderScroller: function (isFromFreezeColumn) {

            var proxy = this,
            model = proxy.model;
            var containerHeight = model.flatRecords.length * model.rowHeight;
            var contentHeight = proxy._viewPortHeight, autoHide = false;            
            if (model.allowPaging && !model.sizeSettings.height) {
                if (model.allowTextWrap && !model.enableVirtualization) {
                    if (proxy._$frozenTableContent.length > 0) {
                        var frozenHeight = contentHeight = proxy._$gridContainer.find("#e-frozencontentdiv" + proxy._id).outerHeight(),
                            movableHeight = proxy._$gridContainer.find("#e-movablecontentdiv" + proxy._id).outerHeight();
                        if (movableHeight > frozenHeight)
                            contentHeight = proxy._$gridContainer.find("#e-movablecontentdiv" + proxy._id).outerHeight();
                    } else {
                        contentHeight = proxy._$gridContainer.find('.e-table').outerHeight();
                    }
                }
            }
            if (!proxy._$gridContent.hasClass("e-scroller") || (model.allowPaging && !model.sizeSettings.height)) {
                var height = proxy._gridHeight ? contentHeight : "auto", enableTouchScroll = false;
                var width = this._gridWidth, targetPane = null;
                if (this._frozenColumnsLength > 0) {
                    proxy._$gridContent.css("width", width - proxy._totalBorderWidth);
                    width = width - this._getFrozenColumnWidth() - 1;//frozen div border width
                }
                if (!model.isFromGantt) enableTouchScroll = true;
                if (this.mobileDevice() && !model.isFromGantt) {
                    autoHide = true;
                    proxy._scrollBarHeight = 10;
                }

                proxy.getScrollElement().ejScroller({
                    enableTouchScroll: false,
                    autoHide: autoHide,
                    scrollerSize: proxy._scrollBarHeight,
                    height: proxy.model.isFromGantt ? 0 : model.sizeSettings.height == "auto" ? 0 : height,
                    width: proxy.model.isFromGantt ? width : width - proxy._totalBorderWidth,
                    scroll: $.proxy(proxy._onScroll, proxy)
                });
            }
            else {
                proxy.getScrollElement().ejScroller("refresh");
            }
            proxy.getScrollElement().ejScroller("model.keyConfigs", { up: "", down: "", left: "", right: "" });
            if (ej.isNullOrUndefined(isFromFreezeColumn))
                proxy._updateScrollCss();
            var isHorizontalScroll = proxy.getScrollElement().ejScroller("isHScroll");
            if (model.allowPaging && !model.sizeSettings.height && isHorizontalScroll) {
                var scrollHeight = height + proxy._scrollBarHeight;
                proxy.getScrollElement().ejScroller({
                    height: scrollHeight,
                });
                proxy.getScrollElement().ejScroller("refresh");
            }
            if (!this.mobileDevice() && this.getBrowserDetails().browser== "safari" && this._frozenColumnsLength > 0) {
                this.getHeaderContent().find("#e-movableheader" + proxy._id).add(this.getContent().find("#e-movablecontainer" + proxy._id)).css("margin-left", "auto");
                if(this._$totalSummaryRowContainer)
                    this._$totalSummaryRowContainer.find("#e-movablefooter" + proxy._id).css("margin-left", "auto");
            }
            if (this._frozenColumnsLength > 0) {
                proxy._$gridContent.height(height);
                proxy.getContent().find("#e-frozencontainer" + proxy._id).height(proxy.getContent().find("#e-movablecontent" + proxy._id).height());
            }
        },
        

        
        //ALL EVENTS BOUND USING THIS._ON WILL BE UNBIND AUTOMATICALLY
        _destroy: function () {
            var proxy = this,
                model = this.model,
                columns = model.columns;
            proxy.element.off();
            
            proxy._off(proxy.element, "click", proxy._onClick);
            proxy._off(proxy.element, "keydown", proxy._keyDown);
            proxy._off(proxy.element, "click", "#" + proxy._id + "e-gridheader", proxy._onHeaderClick);
            proxy._off(proxy.element, "mousedown touchstart", "#" + proxy._id + "e-gridheader", proxy._headerMouseDown);
            proxy._off($(document), "mousedown touchstart", proxy._mouseDownHandler);
            proxy._off(proxy.element, "mousedown touchstart", ".e-gridcontent", proxy._contentMouseDown);
            proxy._off(proxy.element, "click", proxy._onRecordClick);// ".e-gridcontent",
            proxy._off(proxy.element, "dblclick", ".e-gridcontent > div", proxy._onRecordDoubleClick);

            //Method binding for filtering data.
            if (model.filterSettings.filterBarMode == "immediate") {
                proxy._off(proxy.element, "keyup", ".e-filterbarcell input", proxy._filterBarHandler);
                proxy._off(proxy.element, "click", ".e-filterbarcell .e-checkbox")._off(proxy.element, "click", ".e-filterbarcell .e-checkbox", proxy._filterBarHandler);
            }

            if (ej.isTouchDevice() && this.model.allowPaging)
                proxy._off(this.element, "swipeleft swiperight", ".e-gridcontent div > .e-table", $.proxy(this._swipeAction, this));

            proxy._off(proxy.element, "mousemove", proxy._mouseMove);
            proxy._off(proxy.element, "touchmove", proxy._mouseMove);

            proxy._off(proxy.element, "focus click", ".e-filterbarcell input", proxy._filterBarClose);
            proxy._off(proxy.element, "click", ".e-filterbarcell .e-cancel", proxy._filterBarClose);
            if (proxy.model.showGridCellTooltip && !proxy.model.showGridExpandCellTooltip) {

                if (ej.browserInfo().name == "msie") {
                    proxy._off(proxy.element, "mouseenter", ".e-rowcell", proxy._mouseHover);
                }
                else {
                    proxy._off(proxy.element, "mousemove", ".e-rowcell", proxy._mouseHover);
                }
            }
            else {
                proxy._off(proxy.element, "mouseenter", ".e-rowcell", proxy._mouseHover);
            }
            if (proxy.model.showGridCellTooltip) {

                if (ej.browserInfo().name == "msie") {
                    proxy._off(proxy.element, "mouseenter", ".e-headercelldiv", proxy._headermouseHover);
                }
                else {
                    proxy._off(proxy.element, "mousemove", ".e-headercelldiv", proxy._headermouseHover);
                }
            }
            proxy._off(proxy.element, "mouseleave", ".e-rowcell", proxy._cellMouseLeave);
            proxy._off(proxy.element, "mouseleave", proxy._cellMouseLeave);
            proxy._off(proxy.element, "mouseleave", ".e-headercelldiv", proxy._headerMouseLeave);
            proxy._off(proxy.element, "mouseleave", proxy._headerMouseLeave);
            

            //MOUSE WHEEL EVENT FOR GANTT CONTROL
            if (model.isFromGantt || this._frozenColumnsLength) {
                proxy._off(proxy.element, "mousewheel DOMMouseScroll", proxy._mouseWheel);
            }

            if (model.enableResize && model.isResponsive && !model.isFromGantt) {
                proxy._off($(window), "resize", proxy._windowResize);
            }
            if (ej.isTouchDevice())
                proxy._off(proxy.element, "doubletap ", ".e-gridcontent", proxy._editdblClickHandler);
            else
                proxy._off(proxy.element, "dblclick ", ".e-gridcontent", proxy._editdblClickHandler);
            //Mouse right click event for tree grid


            if (model.contextMenuSettings.showContextMenu) {
                proxy._off(proxy.element, "keyup contextmenu taphold", this._preventContextMenu);
            }
            proxy.getScrollElement().ejScroller("content").stop(true);
            this._clearColumnMenu();
            this._clearContextMenu();
            this._removeDetailsRow();
            $("#" + this._id + "_toolbarItems_Main").remove();
            if (proxy._columnRenameDialog) {
                $("#" + proxy._columnRenameDialog.attr("id") + "_wrapper").clearQueue();
                $("#" + proxy._columnRenameDialog.attr("id") + "_wrapper").stop();
                proxy._columnRenameDialog.data("ejDialog") && proxy._columnRenameDialog.data("ejDialog").destroy();
                $("#" + proxy._columnRenameDialog.attr("id") + "_wrapper").remove();
                $("#" + proxy._id + 'ColumnRenameDialog').remove();
            }
            if (this.model.showColumnChooser) {
                $("#" + proxy._id + "ccDiv_wrapper").clearQueue();
                $("#" + proxy._id + "ccDiv_wrapper").stop();
                $("#" + this._id + "ccDiv").data("ejDialog") && $("#" + this._id + "ccDiv").data("ejDialog").destroy();
                $("#" + proxy._id + "ccDiv_wrapper").remove();
                $("#" + this._id + "ccDiv").remove();
            }
            if (proxy._updateConfirmDialog) {
                $("#" + proxy._updateConfirmDialog.attr("id") + "_wrapper").clearQueue();
                $("#" + proxy._updateConfirmDialog.attr("id") + "_wrapper").stop();
                proxy._updateConfirmDialog.data("ejDialog") && proxy._updateConfirmDialog.data("ejDialog").destroy();
                $("#" + proxy._updateConfirmDialog.attr("id") + "_wrapper").remove();
                $("#" + proxy._id + 'ConfirmDialog').remove();
            }

            //destroying delete confirmation dialog
            if (proxy._confirmDialog) {
                $("#" + proxy._confirmDialog.attr("id") + "_wrapper").clearQueue();
                $("#" + proxy._confirmDialog.attr("id") + "_wrapper").stop();
                proxy._confirmDialog.data("ejDialog") && proxy._confirmDialog.data("ejDialog").destroy();
                $("#" + proxy._confirmDialog.attr("id") + "_wrapper").remove();
                $("#" + proxy._id + '_ConfirmDialog').remove();
            }
            if ($("#" + proxy._id + "_dialogColumnAdd_wrapper").length > 0) {
                $("#" + proxy._id + "_dialogColumnAdd_wrapper").clearQueue();
                $("#" + proxy._id + "_dialogColumnAdd_wrapper").stop();
                $("#" + proxy._id + "_dialogColumnAdd").find('.e-datepicker').ejDatePicker("destroy");
                $("#" + proxy._id + "_dialogColumnAdd").find('.e-datetimepicker').ejDateTimePicker("destroy");
                $("#" + proxy._id + "_dialogColumnAdd").find('.e-numerictextbox').ejNumericTextbox("destroy");
                $("#" + proxy._id + "_dialogColumnAdd").find('.e-dropdownlist').ejDropDownList("destroy");
                $("#" + proxy._id + "_dialogColumnAdd").find('.e-treegrid').ejTreeGrid("destroy");
                $("#" + proxy._id + "_dialogColumnAdd").data("ejDialog") && $("#" + proxy._id + "_dialogColumnAdd").data("ejDialog").destroy();
                $("#" + proxy._id + "_dialogColumnAdd_wrapper").remove();
                $("#" + proxy._id + "_dialogColumnAdd").remove();
            }

            //destroy all widgets in filtterbar
            if (model.allowFiltering && !model.isFromGantt) {
                for (var count = 0 ; count < columns.length; count++) {
                    var currentElement = $("#" + this._id + "_" + columns[count].field.split('.').join("") + "_filterbarcell");
                    currentElement.data("ejWidgets") && $(currentElement).data($(currentElement).data("ejWidgets")[0]).destroy();
                }
            }

            if (proxy.model.allowFiltering && proxy.model.filterSettings.filterType == "menu") {
                var menuFilter = proxy._renderedFilterMenuDialog, filtertype;
                for (var i = 0; i < menuFilter.length; i++) {
                    var str;
                    if (menuFilter[i]) {
                        var index = menuFilter[i].indexOf("edit");
                        filtertype = menuFilter[i];
                        if (index != -1) {
                            var editType = filtertype.slice(0, index);
                            str = editType.charAt(0).toUpperCase() + editType.slice(1);
                        } else {
                            str = filtertype.charAt(0).toUpperCase() + filtertype.slice(1);
                        }
                    }
                    if (str == "String")
                        $("#" + this._id + "filter" + str + "MenuDiv").find('.e-autocomplete').ejAutocomplete("destroy");
                    else if (str == "Datepicker")
                        $("#" + this._id + "filter" + str + "MenuDiv").find('.e-datepicker').ejDatePicker("destroy");
                    else if (str == "Datetimepicker")
                        $("#" + this._id + "filter" + str + "MenuDiv").find('.e-datetimepicker').ejDateTimePicker("destroy");
                    else if (str == "Numeric")
                        $("#" + this._id + "filter" + str + "MenuDiv").find('.e-numerictextbox').ejNumericTextbox("destroy");

                    $("#" + this._id + "filter" + str + "MenuDiv_wrapper").clearQueue();
                    $("#" + this._id + "filter" + str + "MenuDiv_wrapper").stop();
                    $("#" + this._id + "filter" + str + "MenuDiv").find('.e-dropdownlist').ejDropDownList("destroy");
                    $("#" + this._id + "filter" + str + "MenuDiv").data("ejDialog") && $("#" + this._id + "filter" + str + "MenuDiv").data("ejDialog").destroy();
                    $("#" + this._id + "filter" + str + "MenuDiv_wrapper").remove();
                    $("#" + this._id + "filter" + str + "MenuDiv").remove();
                }
            }
            if (proxy._commandColumnLength > 0) {
                for (var i = 0; i < columns.length; i++) {
                    if (columns[i].commands && columns[i].commands.length > 0) {
                        $("#" + this._id + i + "_UnboundTemplate").remove();
                    }
                }
            }
            //Clear excel filtering dialog
            var excelColType = ["number", "string", "date", "datetime","boolean"],
                colTypeLength = excelColType.length;
            for (var i = 0; i < colTypeLength; i++) {
                $("#"+proxy._id+excelColType[i]+"_CustomDrop1_popup_wrapper").clearQueue();
                $("#" + proxy._id + excelColType[i] + "_CustomDrop1_popup_wrapper").stop();
                $("#" + proxy._id + excelColType[i] + "_CustomDrop1").data("ejDropDownList") && $("#" + proxy._id + excelColType[i] + "_CustomDrop1").data("ejDropDownList").destroy();
                $("#" + proxy._id + excelColType[i] + "_CustomDrop2_popup_wrapper").clearQueue();
                $("#" + proxy._id + excelColType[i] + "_CustomDrop2_popup_wrapper").stop();
                $("#" + proxy._id + excelColType[i] + "_CustomDrop2").data("ejDropDownList") && $("#" + proxy._id + excelColType[i] + "_CustomDrop2").data("ejDropDownList").destroy();
                $("#" + proxy._id + excelColType[i] + "_CheckBoxList_WaitingPopup").remove();
                
                switch (excelColType[i]) {
                    case "string":
                        $("#" + proxy._id + excelColType[i] + "_CustomValue1_suggestion").remove();
                        $("#" + proxy._id + excelColType[i] + "_CustomValue2_suggestion").remove();
                        break;
                    case "date":
                        $("#e-" + proxy._id + excelColType[i] + "_CustomValue1").remove();
                        $("#e-" + proxy._id + excelColType[i] + "_CustomValue2").remove();
                        break;
                    case "datetime":
                        $("#" + proxy._id + excelColType[i] + "_CustomValue1_popup").remove();
                        $("#" + proxy._id + excelColType[i] + "_CustomValue2_popup").remove();
                        break;
                
            }
                
            }
            proxy.element.empty().removeClass("e-treegrid-core e-treegrid " + proxy.model.cssClass);  
			proxy.element.data("ejWaitingPopup") && proxy.element.ejWaitingPopup("destroy");            
            for (var i = 0; i < columns.length; i++) {
                if (columns[i].isTemplateColumn) {
                    var headerText = columns[i]['headerText'];
                    if (!ej.isNullOrUndefined(headerText) && !ej.isNullOrUndefined(headerText.match(/(\\|[^0-9A-z-_])/g)))
                        headerText = headerText.replace(/(\\|[^0-9A-z-_])/g, "");
                    $("#" + proxy._id + headerText + $.inArray(columns[i], proxy.model.columns) + "_Template").length > 0 &&
                        $("#" + proxy._id + headerText + $.inArray(columns[i], proxy.model.columns) + "_Template").remove();
                }
                if (columns[i].headerTemplateID) {
                    var idText = this._id + (columns[i].field ? columns[i].field : "") + $.inArray(columns[i], this.model.columns) + "_HeaderTemplate";
                    $("#" + idText).remove();
                }
            }        
             // remove jsrender helpers
            var helpers = $.views.helpers;
            for (var key in helpers) {
                if (key.indexOf(this._id)!=-1) {
                    delete helpers[key];
                }
            }
            proxy._columnChooserList.remove();			
        },

        

        collapseAll: function () {
            var proxy = this,
                model = proxy.model,                
                args = {},
                enableVirtualization = model.enableVirtualization,
                $gridRows = proxy.getRows(),
                $rowElement = null;                        
            if (!proxy.editFormValidate()) return;
            proxy._expandCollapseSettings.state = "collapseAll";
            proxy._expandCollapseSettings.atLevel = "";
            proxy._expandCollapseSettings.level = 0;
            proxy._expandCollapsePages = [];
            //To cancel the cell edit or row edit mode when collapse the all record.
            if (proxy._isRowEdit || proxy.model.isEdit) {
                proxy._isRowEdit ? proxy.cancelRowEditCell() : proxy.cancelEditCell();
                proxy.selectRows(-1);                          
                proxy._cancelSaveTools();
            }
            args.requestType = ej.TreeGrid.Actions.ExpandCollapse;
            //loop excecute for iterate the GanttRecords preseent in the Gantt Control
            proxy._isInExpandCollapseAll = true;                                  
            proxy._collapseAllData();

            if (model.flatRecords.length > 0)
                proxy._refreshTreeGridOnExpandCollapseAll(args);

            proxy._isInExpandCollapseAll = false;
            proxy.updateHeight();            
        },
        _triggerExpandingCollapsingEvent: function (args) {
            var proxy = this, isExpandCollapseEnabeled;
            if (args.expanded) {
                isExpandCollapseEnabeled = proxy._trigger("expanding", args);
            } else {
                isExpandCollapseEnabeled = proxy._trigger("collapsing", args);
            }
            return isExpandCollapseEnabeled
        },
        _collapseAllData: function () {
            var proxy = this, model = proxy.model,
                count, args = {};
            args.requestType = ej.TreeGrid.Actions.ExpandCollapse;
            if (model.allowPaging && model.pageSettings.pageSizeMode == ej.TreeGrid.PageSizeMode.Root && model.enableVirtualization) {
                var pageSize = model.pageSettings.pageSize,
                    pageIndex = proxy._currentPage(),
                    countLength = pageSize * pageIndex,
                    initCount = pageSize * (pageIndex - 1);
                proxy._expandCollapsePages.push(pageIndex);
                for (count = initCount; count < countLength; count++) {
                    var treegridRecord = proxy._isHierarchyFiltering ? proxy._filterParentRecords[count] : proxy.model.parentRecords[count];
                    if (treegridRecord) {
                        args.data = treegridRecord;
                        args.recordIndex = model.updatedRecords.indexOf(treegridRecord);
                        args.expanded = false;
                        if (treegridRecord.hasChildRecords) {
                            if (!proxy._triggerExpandingCollapsingEvent(args)) {
                                proxy._expandCollapseInnerLevelRecord(treegridRecord, args.expanded);
                                ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                            }
                        }
                    }
                }
            }            
            else {
                var parentRecord = proxy._isHierarchyFiltering ? proxy._filterParentRecords : proxy.model.parentRecords;
                for (count = 0; count < parentRecord.length; count++) {
                    var treegridRecord = parentRecord[count];
                    args.data = treegridRecord;
                    args.recordIndex = model.updatedRecords.indexOf(treegridRecord);
                    args.expanded = false;
                    if (treegridRecord.hasChildRecords) {
                        if (!proxy._triggerExpandingCollapsingEvent(args)) {
                            proxy._expandCollapseInnerLevelRecord(treegridRecord, args.expanded);
                            ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                        }
                    }
                }
            }            
        },        
        //populate the context menu with items
        _getContextMenuItems: function () {
            var contextMenuItems = [],
            proxy = this,
            contextMenuLabel = proxy._contextMenuTexts;
            contextMenuItems = [ {
                headerText: contextMenuLabel["addRowText"],
                eventHandler: null,
                isDefault: true,
                disable: false,
                menuId: "Add",
                parentMenuId: null
            },
             {
                 iconClass: "e-edit",
                 headerText: contextMenuLabel["editText"],
                 eventHandler: null,
                 isDefault: true,
                 disable: false,
                 menuId: "Edit",
                 parentMenuId: null
             },
            {
                headerText: contextMenuLabel["deleteText"],
                eventHandler: null,
                isDefault: true,
                disable: false,
                menuId: "Delete",
                parentMenuId: null
            },
            {
                iconClass: "e-save",
                headerText: contextMenuLabel["saveText"],
                eventHandler: null,
                isDefault: true,
                isEdit: true,
                disable: false,
                menuId: "Save",
                parentMenuId: null
            },
             {
                 iconClass: "e-cancel",
                 headerText: contextMenuLabel["cancelText"],
                 eventHandler: null,
                 isDefault: true,
                 isEdit: true,
                 disable: false,
                 menuId: "Cancel",
                 parentMenuId: null
             },
             {
                 iconPath: null,
                 headerText: contextMenuLabel["aboveText"],
                 eventHandler: null,
                 menuId: "Above",
                 parentMenuId: "Add"
             }, {
                 iconPath: null,
                 headerText: contextMenuLabel["belowText"],
                 eventHandler: null,
                 menuId: "Below",
                 parentMenuId: "Add"
             }
            ];
            return contextMenuItems;
        },
         //populate the header context menu with items
        _getHeaderContextMenuItems: function (e) {
            var enableFreeze,
                enableFreezeBefore,
                headerContextMenuItems = [],
                allowSorting,
                columnChooserListIndex,
                proxy = this,
                model = proxy.model,
                $target = $(e.target),
                contextMenuLabel = proxy._columnMenuTexts,
                columnFieldName = $target.closest(".e-headercell").find(".e-headercelldiv").attr("data-ej-mappingname"),
                column = proxy.getColumnByField(columnFieldName);
            if (column == null) {
                return false
            }
             allowSorting = column.allowSorting == undefined ? true : column.allowSorting;
             if (model.allowSorting && allowSorting) {
                      headerContextMenuItems.push({
                          iconClass: "e-columnmenu-ascending",
                          headerText: contextMenuLabel["sortAscendingText"],
                          eventHandler: null,
                          isDefault: false,
                          disable: false,
                          menuId: "contextMenu_SortAscending",
                          parentMenuId: null,

                      }),
                       headerContextMenuItems.push({
                           iconClass: "e-columnmenu-descending",
                           headerText: contextMenuLabel["sortDescendingText"],
                           eventHandler: null,
                           isDefault: false,
                           disable: false,
                           menuId: "contextMenu_SortDescending",
                           parentMenuId: null
                       })

                  }
                  if (model.showColumnChooser || model.contextMenuSettings.showContextMenu) {
                      columnChooserListIndex = headerContextMenuItems.length;
                      headerContextMenuItems.push({
                          iconClass: "e-columnchooser-icon",
                          headerText: contextMenuLabel["columnsText"],
                          eventHandler: null,
                          isDefault: false,
                          disable: false,
                          menuId: "contextMenu_Columns",
                          parentMenuId: null,
                          isExpanderIcon: true
                      })
                  }
                  if (!model.isFromGantt) {
                      if (column.allowFreezing || (proxy._allowFreezingDefault && ej.isNullOrUndefined(column.allowFreezing))) {
                          /*Check all other columns are in frozen*/
                          if (proxy._frozenColumnsLength == model.columns.length - 1 && !column.isFrozen)
                              enableFreeze = true;
                          /*Check frozen column width and container width */
                          var frozenWidth = this._getFrozenColumnWidth(),
                              columnIndex = model.columns.indexOf(column);
                          frozenWidth = frozenWidth + this.columnsWidthCollection[columnIndex] + 18;
                          if (frozenWidth > this._gridWidth)
                              enableFreeze = true;
                          headerContextMenuItems.push({
                              iconClass: "e-freezecolumn-icon",
                              headerText: contextMenuLabel["freezeText"],
                              eventHandler: null,
                              isDefault: false,
                              disable: !(enableFreeze ? false : !column.isFrozen),
                              menuId: "contextMenu_Freeze",
                              parentMenuId: null,

                          }),
                          headerContextMenuItems.push({
                              iconClass: "e-unfreezecolumn-icon",
                              headerText: contextMenuLabel["unfreezeText"],
                              eventHandler: null,
                              isDefault: false,
                              disable: !(column.isFrozen == true),
                              menuId: "contextMenu_Unfreeze",
                              parentMenuId: null,

                          });
                          if (proxy._checkboxSelection && model.columns[0].nonColumn) {
                              if (model.columns.indexOf(column) != 1 && model.columns.indexOf(column) > this._frozenColumnsLength)
                                  enableFreezeBefore = true;
                          }
                          else if (model.columns.indexOf(column) != 0 && model.columns.indexOf(column) > this._frozenColumnsLength)
                              enableFreezeBefore = true;
                          /*Check frozen column width and container width */
                          frozenWidth = this._getFrozenColumnWidth(columnIndex);
                          frozenWidth = frozenWidth + 18;
                          if (frozenWidth > this._gridWidth)
                              enableFreezeBefore = false;
                          headerContextMenuItems.push({
                              iconClass: "e-freezecolumnbefore-icon",
                              headerText: contextMenuLabel["freezePrecedingColumnsText"],
                              eventHandler: null,
                              menuId: "contextMenu_FreezePreceding",
                              isDefault: false,
                              disable: !enableFreezeBefore,
                              parentMenuId: null,

                          })
                      }
                  }
                  return headerContextMenuItems
        },

        //populate sub context menu items
        _getsubContextMenuItems: function () {
            var contextMenuItems = [],
            proxy = this,
            contextMenuLabel = proxy._contextMenuTexts;
            contextMenuItems = [{
                iconPath: null,
                headerText: contextMenuLabel["aboveText"],
                eventHandler: null,
                menuId: "Above",
                parentMenuId: "Add"
            }, {
                iconPath: null,
                headerText: contextMenuLabel["belowText"],
                eventHandler: null,
                menuId: "Below",
                parentMenuId: "Add"
            }
            ];
            return contextMenuItems;
        },
        _clearContextMenu: function () {
            //remove context menu items and header context menu items
            var proxy = this;
            $('.e-tgcontextmenu').remove();
            $('.e-tginnerContextmenu').remove();
            $('.e-tgheaderContextmenu').remove();
            $("#" + proxy._id + "ccDiv").ejDialog("close");
        },
        // create and append a context menu and also bind the events for context menu option
        _renderContextMenu: function (e, index, item, checkEditMenu) {

            var proxy = this,
            model = proxy.model,
                eventArgs = {},
                args = {},
                posx,
				subposX,
                posy,
                subposY,
                contextMenu,
                contextMenuUList,
                subContextMenu,
                subContextMenuUList,
                coord = proxy._getCoordinate(e);
            proxy._contextMenuSelectedIndex = index;
            proxy._contextMenuSelectedItem = item;
            proxy._contextMenuEvent = e;


            if (!checkEditMenu && !this.editFormValidate())
                return;
            if (!e) e = window.event;
            subposX = posx = coord.pageX;
            subposY = posy = coord.pageY;
            
            //Edge detection for context menu
            var treeGridOffset = this.getOffsetRect(proxy.element[0]);
            treeGridOffset.bottom = treeGridOffset.top + this.element[0].offsetHeight;
            treeGridOffset.right = treeGridOffset.left + $(this.element).width();
           
            args.targetElement = e;
            args.item = item;
            args.index = index;
            args.columnIndex = proxy.getCellIndex(e);
            args.requestType = "ContextMenuOpen";
            args.contextMenuItems = proxy._contextMenuItems;
            if (proxy._trigger("contextMenuOpen", args)) return false;
            proxy._activeMenuItemId = null;
            proxy._contextMenuItems = args.contextMenuItems;
            contextMenu = ej.buildTag("div.e-tgcontextmenu e-js", "", {
                'display': 'table',
                'position': 'absolute',
                'z-index': proxy.getMaxZIndex() + 1,
            }, { "id": proxy._id + "_ContextMenu" });
            model.cssClass && (contextMenu.addClass(model.cssClass));
            //Get zero th level menu items
            var parentMenuItems = args.contextMenuItems.filter(function (value) {
                if (value.parentMenuId == null || value.parentMenuId == undefined)
                    return true;
            });

            this._isContextMenuItems = true;
           
            contextMenuUList = ej.buildTag("ul.e-treegrid-contextmenu", $.render[proxy._id + "contextMenuTemplate"](parentMenuItems), {
                'margin': '0px',
                'padding-left': '0px',
                'list-style-type': 'none'
            }, {
                'data-icon': false,
                'data-role': 'list-divider'
            });
            
            
            contextMenu.append(contextMenuUList);
            $(document.body).append(contextMenu);

            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9 && model.isResponsive) 
                proxy._off($(window), "resize", proxy.windowResize);
            var contextMenuHeight = $(contextMenu).outerHeight(),
                contextMenuWidth = $(contextMenu).outerWidth(),
                contextMenuItems = contextMenu.find(".e-menuitem"),
                contextMenuSelectItem = contextMenuItems.eq(0);
            contextMenuItems.outerWidth(contextMenuWidth + 2);
            if (treeGridOffset.left > posx || (treeGridOffset.right < (posx + contextMenuWidth))) {
                if (treeGridOffset.right < (posx + contextMenuWidth)) {
                    posx = posx - contextMenuWidth;
                }
                if (posx < 0) {
                    posx = treeGridOffset.left + 10;
                }
            }
            if (treeGridOffset.bottom < (posy + contextMenuHeight)) {
                var tempPosY = posy - (contextMenuHeight),
                    exceededHeight = (posy + contextMenuHeight) - treeGridOffset.bottom,
                    scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
                if (tempPosY > treeGridOffset.top) {
                    posy = tempPosY;
                } else if ((posy + contextMenuHeight) > (scrollTop + window.innerHeight)) {
                    var extraHeight = (posy + contextMenuHeight) - (scrollTop + window.innerHeight),
                        cTop = posy - extraHeight;
                    if (cTop > 0)
                        posy = parseInt(cTop);
                }
            }         
            contextMenu.css({ 'left': posx + 'px', 'top': posy + 'px', });
            proxy._focusTreeGridElement();
            $(contextMenu).css({ 'height': 'auto' });
            proxy._on(contextMenu, "contextmenu", function (argsE) {
                argsE.preventDefault();
            });
            //click event handlers for contextmenu items and subcontextmenu items
            $(contextMenuItems).click(function () {
                proxy._contextMenuClickHandler(this);
            });

            //Mouseenter and mouse leave handler for contextmenu items and Subcontextmenuitems
            $(contextMenuItems).mouseenter(function () {
                if (!$(this).hasClass("e-disable")) {
                    contextMenu.find(".e-tgcontextmenu-mouseover").removeClass("e-tgcontextmenu-mouseover");
                    $(this).addClass("e-tgcontextmenu-mouseover");
                    proxy._activeMenuItemId = $(this).attr("id");
                    proxy._showSubContextMenu(this, args.contextMenuItems);
                }
            });

            if (proxy.model.allowSelection && proxy.model.selectionSettings.selectionType == "multiple" && this._multiSelectPopup && this._multiSelectPopup.is(":visible")) {
                proxy._clearMultiSelectPopup();
            }

            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9 && model.isResponsive) 
                proxy._on($(window), "resize", proxy.windowResize);
            e.preventDefault();
        },
        //Creating headerContextMenu
        _renderHeaderContextMenu: function (e) {
            var proxy = this,
                model = proxy.model,
                posx,
                subposX,
                subposY,
                posy,
                args = {},
                headerContextMenu,
                headerContextMenuUList,
                columnFieldName, columnListPosX,
                column,
                $target = $(e.target),
                headerContextMenuItems;

            columnFieldName = $target.closest(".e-headercell").find(".e-headercelldiv").attr("data-ej-mappingname"),
            column = proxy.getColumnByField(columnFieldName);
            proxy._contextMenuColumnDetails = column;
            if ((model.isEdit || this._isRowEdit)) {
                if (this.editFormValidate()) {
                    proxy._saveEditedElements();
                }
                else
                    return true;
            }
            var coord = proxy._getCoordinate(e);
            if (!e) e = window.event;
            posx = coord.pageX;
            posy = coord.pageY;
            var treeGridOffset = proxy.getOffsetRect(proxy.element[0]);
            treeGridOffset.bottom = treeGridOffset.top + proxy.element[0].offsetHeight;
            treeGridOffset.right = treeGridOffset.left + $(this.element).width();
            args.targetElement = e;
            args.headerContextMenuItems = proxy._headerContextMenuItems;
            args.columnIndex = proxy.getColumnIndexByField(columnFieldName);
            args.requestType = "ContextMenuOpen";
            if (proxy._trigger("contextMenuOpen", args)) return false;
            args.headerContextMenuItems = proxy._headerContextMenuItems;
            proxy._headerContextMenuItems = args.headerContextMenuItems;
            headerContextMenu = ej.buildTag("div.e-tgheaderContextmenu e-js", "", {
                'display': 'table',
                'position': 'absolute',
                'z-index': proxy.getMaxZIndex() + 1,
            }, { "id": proxy._id + "_headerContextMenu" });
            model.cssClass && (headerContextMenu.addClass(model.cssClass));
            var parentMenuItems = args.headerContextMenuItems.filter(function (value) {
                if (value.parentMenuId == null || value.parentMenuId == undefined)
                    return true;
            });
            this._isContextMenuItems = false;
            headerContextMenuUList = ej.buildTag("ul.e-treegrid-headercontextmenu", $.render[proxy._id + "contextMenuTemplate"](parentMenuItems), {
                'margin': '0px',
                'padding-left': '0px',
                'list-style-type': 'none'
            }, {
                'data-icon': false,
                'data-role': 'list-divider'
            });

            headerContextMenu.append(headerContextMenuUList);
            $(document.body).append(headerContextMenu);
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9 && model.isResponsive)
                proxy._off($(window), "resize", proxy.windowResize);
            var headerContextMenuHeight = $(headerContextMenu).outerHeight(),
                  headerContextMenuWidth = ($(".e-tgheaderContextmenu").outerWidth() + 0.5),
                  headerContextMenuItems = headerContextMenu.find(".e-menuitem"),
                  headerContextMenuSelectItem = headerContextMenuItems.eq(0);
            proxy._activeMenuItemId = $(headerContextMenuSelectItem).attr("id");
            headerContextMenuItems.outerWidth(headerContextMenuWidth);

            if (treeGridOffset.left > posx || (treeGridOffset.right < (posx + headerContextMenuWidth))) {
                if (treeGridOffset.right < (posx + headerContextMenuWidth)) {
                    posx = posx - headerContextMenuWidth;
                }
                if (posx < 0) {
                    posx = treeGridOffset.left + 10;
                }
            }
            if (treeGridOffset.bottom < posy + (headerContextMenuHeight)) {
                var tempPosY = posy - (headerContextMenuHeight);
                if (tempPosY > 0) {
                    posy = tempPosY;
                }
            }

            headerContextMenu.css({ 'left': posx + 'px', 'top': posy + 'px', });
            proxy._focusTreeGridElement();
            $(headerContextMenu).css({ 'height': 'auto' });
            proxy._on(headerContextMenu, "contextmenu", function (argsE) {
                argsE.preventDefault();
            });

            columnListPosX = posx + headerContextMenuWidth;
            proxy._columnListPosX = columnListPosX;
            proxy._headerContextMenuWidth = headerContextMenuWidth;
            proxy._posx = posx;
            proxy._posy = posy;
            proxy._columnMenuPopupY = posy;

            $("#contextMenu_SortAscending").on("click", function () {
                if (model.allowMultiSorting) proxy._multiSortRequest = true;
                if ($(this).find(".e-expander").length == 0) {
                    if (model.isFromGantt)
                        proxy.sortColumn(column.mappingName ? column.mappingName : column.field, ej.sortOrder.Ascending);
                    else
                        proxy.sortColumn(column.field, ej.sortOrder.Ascending);
                    proxy._multiSortRequest = false;
                }
            });

            $("#contextMenu_SortDescending").on("click", function () {
                if (model.allowMultiSorting) proxy._multiSortRequest = true;
                if ($(this).find(".e-expander").length == 0) {
                    if (model.isFromGantt)
                        proxy.sortColumn(column.mappingName ? column.mappingName : column.field, ej.sortOrder.Descending);
                    else
                        proxy.sortColumn(column.field, ej.sortOrder.Descending);
                    proxy._multiSortRequest = false;
                }
            });
            $("#contextMenu_Freeze").click(function () {
                if ($(this).find(".e-expander").length == 0) {
                    if (!$(this).hasClass("e-disable")) {
                        if (proxy._checkboxSelection) {
                            if (model.columns[0].nonColumn && !model.columns[0].isFrozen)
                                model.columns[0]['isFrozen'] = true;
                        }
                        proxy.freezeColumn(column.field, true);
                    }
                }
            });
            $("#contextMenu_Unfreeze").click(function () {
                if ($(this).find(".e-expander").length == 0) {
                    if (!$(this).hasClass("e-disable")) {
                        if (proxy._checkboxSelection && proxy._frozenColumnsLength == 2) {
                            if (model.columns[0].nonColumn && model.columns[0].isFrozen)
                                model.columns[0]['isFrozen'] = false;
                        }
                        proxy.freezeColumn(column.field, false);
                    }
                }
            });
            $("#contextMenu_FreezePreceding").click(function () {
                if ($(this).find(".e-expander").length == 0) {
                    if (!$(this).hasClass("e-disable"))

                        proxy.freezePrecedingColumns(column.field);
                }
            });
            if (!model.isFromGantt) {
                if (proxy.model.isResponsive && $(window).width() <= proxy._responsiveMinWidth)
                    $("#" + proxy._id + "_headerContextMenu").find(".e-expander").removeClass("e-treegridadaptivesubicon");
            }

            $("#contextMenu_Columns").mouseenter("click", function (e) {
                proxy._showColumnChooser(e, treeGridOffset.right, columnListPosX, headerContextMenuWidth, posy, posx, $("#contextMenu_Columns"), true);

            });
            headerContextMenuSelectItem.addClass("e-columnmenuselection");
            //Mouseenter and mouse leave handler for header contextmenu items and Subheadercontextmenuitems
            $(headerContextMenuItems).mouseenter(function () {
                if (!$(this).hasClass("e-disable")) {
                    headerContextMenuItems.removeClass("e-columnmenuselection");
                    $(this).addClass("e-columnmenuselection");
                    proxy._activeMenuItemId = $(this).attr("id");
                    proxy._showSubContextMenu(this, args.headerContextMenuItems);
                }
            });

            $(".e-tgheaderContextmenu .e-menuitem").on("mouseenter click", function (e) {
                var $target = $(e.target)
                var targetid = $target.closest(".e-menuitem").attr("id");
                if (targetid == "contextMenu_Columns") {
                    $(".e-tginnerContextmenu").remove();
                }
                else if (targetid == "contextMenu_SortAscending" || targetid == "contextMenu_SortDescending" || targetid == "contextMenu_Freeze" || targetid == "contextMenu_Unfreeze" || targetid == "contextMenu_FreezePreceding") {
                    $("#" + proxy._id + "ccDiv").ejDialog("close");
                }
                else {
                    $("#" + proxy._id + "ccDiv").ejDialog("close");

                }
            })
            //click event handlers for header contextmenu items and subheadercontextmenu items
            $(headerContextMenuItems).click(function () {
                proxy._contextMenuClickHandler(this);

            })
            if (proxy.model.allowSelection && proxy.model.selectionSettings.selectionType == "multiple" && this._multiSelectPopup && this._multiSelectPopup.is(":visible")) {
                proxy._clearMultiSelectPopup();
            }
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9 && model.isResponsive)
                proxy._on($(window), "resize", proxy.windowResize);

        },

        //Show SubContext menu for selected Menu items
        _showSubContextMenu: function (element, menuItems) {
            var model = this.model,
                proxy = this,
                currentMenuItem = [],
                menuId = $(element).attr("id"),
                subContextMenu, subContextMenuUList, subMenuItems = [], subContextMenuItems;

            subMenuItems = menuItems.filter(function (value) {
                if (value.menuId == menuId)
                    currentMenuItem = value;
                if (value.parentMenuId == menuId)
                    return true;
            });

            if (!currentMenuItem.parentMenuId)
                $(".e-tginnerContextmenu").remove();

            if (currentMenuItem.parentMenuId) {
                this._removeContextMenu(currentMenuItem, menuItems);
            }

            if (subMenuItems.length > 0) {
                subContextMenu = ej.buildTag("div.e-tginnerContextmenu e-js", "", {
                    'display': 'table',
                    'position': 'absolute',
                    'z-index': proxy.getMaxZIndex() + 1,
                }, { "id": this._id + "_SubContextMenu" + menuId });
                model.cssClass && (subContextMenu.addClass(model.cssClass));
                subContextMenuUList = ej.buildTag("ul", $.render[proxy._id + "contextMenuTemplate"](subMenuItems), {
                    'margin': '0px',
                    'padding-left': '0px'
                }, {
                    'data-icon': false,
                    'type': 'none',
                    'data-role': 'list-divider'
                });
                subContextMenu.append(subContextMenuUList);
                $(document.body).append(subContextMenu);
                subContextMenuItems = subContextMenu.find(".e-menuitem");
                var menuWidth = $(subContextMenu).outerWidth();
                subContextMenuItems.outerWidth(menuWidth > 100 ? menuWidth : 100);
                var subMenuOffset = proxy._getSubContextMenuPosition(element, subContextMenu);
                $(subContextMenu).css({ "top": subMenuOffset.top, "left": subMenuOffset.left });
                $(subContextMenuItems).mouseenter(function () {
                    if (!$(this).hasClass("e-disable")) {
                        proxy._showSubContextMenu(this, menuItems);
                        $(this).closest(".e-tginnerContextmenu").find(".e-tgcontextmenu-mouseover").removeClass("e-tgcontextmenu-mouseover");
                        $(this).addClass("e-tgcontextmenu-mouseover");
                        proxy._activeMenuItemId = $(this).attr("id");
                    }
                });
                proxy._on(subContextMenu, "contextmenu", function (argsE) {
                    argsE.preventDefault();
                });
                $(subContextMenuItems).click(function () {
                    proxy._contextMenuClickHandler(this);
                });
                if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9 && model.isResponsive)
                    proxy._on($(window), "resize", proxy.windowResize);
                
            }
        },
        _removeContextMenu: function (menuItem, menuItems) {

            var currentMeuItemContainer = $("#" + this._id + "_SubContextMenu" + menuItem.parentMenuId),
                expandedMenu = $(currentMeuItemContainer).find(".e-tgcontextmenu-mouseover");
            if ($(expandedMenu).length > 0 ) {
                var innerMenu = menuItems.filter(function (value) {
                    if (value.menuId == $(expandedMenu).attr("id"))
                        return true;
                });
                if (innerMenu.length > 0) {
                    var nextLevelItem = menuItems.filter(function (value) {
                        if (value.parentMenuId == innerMenu[0].menuId)
                            return true;
                    });
                    if (nextLevelItem.length > 0)
                        this._removeContextMenu(nextLevelItem[0], menuItems);
                }
                $("#" + this._id + "_SubContextMenu" + $(expandedMenu).attr("id")).remove();
            }
        },
        _getSubContextMenuPosition: function (element, subMenu) {
            var proxy = this, model = this.model, parentElement,
                subContextMenuWidth,
                subContextMenuHeight, contextMenuWidth,posx,posy,
                elementOffset, subMenuOffset = { top: "", left: "" }
            parentElement = this._isContextMenuItems ? $(element).closest(".e-tgcontextmenu") : $(element).closest(".e-tgheaderContextmenu")
            if (parentElement.length == 0)
                parentElement = $(element).closest(".e-tginnerContextmenu");

            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9 && model.isResponsive)
                proxy._off($(window), "resize", proxy.windowResize);

            subContextMenuWidth = $(subMenu).outerWidth(),
            subContextMenuHeight = $(subMenu).height(),
            elementOffset = this.getOffsetRect(element),

            contextMenuWidth = $(parentElement).outerWidth();
            subMenuOffset.top = elementOffset.top - 1;
            subMenuOffset.bottom = elementOffset.top + $(element).outerHeight();
            subMenuOffset.left = elementOffset.left + $(parentElement).width() + 1;
            posx = subMenuOffset.left;

            //Edge detection for context menu
            var treeGridOffset = this.getOffsetRect(this.element[0]);
            treeGridOffset.bottom = treeGridOffset.top + this.element[0].offsetHeight;
            treeGridOffset.right = treeGridOffset.left + $(this.element).width();
            if (treeGridOffset.left > posx || (treeGridOffset.right < (posx + subContextMenuWidth))) {
                if (treeGridOffset.right < (posx + subContextMenuWidth)) {
                    posx = posx - contextMenuWidth - subContextMenuWidth;
                }
                if (posx > 0) {
                    subMenuOffset.left = posx;
                }
            }
            if (treeGridOffset.bottom < subMenuOffset.top + subContextMenuHeight) {
                var tempPosY = subMenuOffset.bottom - subContextMenuHeight,
                    exceededHeight = (subMenuOffset.top + subContextMenuHeight) - treeGridOffset.bottom,
                    scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
                if (tempPosY > treeGridOffset.top) {
                    subMenuOffset.top = tempPosY;
                } else if ((subMenuOffset.top + subContextMenuHeight) > (scrollTop + window.innerHeight)) {
                    var extraHeight = (subMenuOffset.top + subContextMenuHeight) - (scrollTop + window.innerHeight),
                        cTop = subMenuOffset.top - extraHeight;
                    if (cTop > 0)
                        subMenuOffset.top = parseInt(cTop) - 2; //border
                }
            }
            return subMenuOffset;
        },
        _contextMenuClickHandler: function (target)
        {
            var choice = $(target).attr('id'),
                proxy = this;
            if (!$(target).hasClass("e-disable") && $(target).find(".e-expander").length == 0) {
                switch (choice) {
                    case "Delete":
                        proxy.contextMenuOperations("Delete");
                        break;
                    case "Above":
                        proxy.contextMenuOperations("Above");
                        break;
                    case "Below":
                        proxy.contextMenuOperations("Below");
                        break;
                    case "Add":
                        proxy.contextMenuOperations("Add");
                        break;
                    case "Edit":
                        proxy.contextMenuOperations("Edit");
                        break;
                    case "Save":
                        proxy.contextMenuOperations("Save");
                        break;
                    case "Cancel":
                        proxy.contextMenuOperations("Cancel");
                        break;
                    default:
                        proxy.contextMenuOperations(choice);
                        break;
                }
            }
        },


        //Call custom context menu event handlers and custom header context menu event handlers.
        _triggerMenuEventHandler: function (menuId, eventArgs,isFromContextMenu) {
            var proxy = this,
                currentMenuItemCollection, menuItem,
                contextMenuItems = isFromContextMenu ? proxy._contextMenuItems : proxy._headerContextMenuItems;
            if (!ej.isNullOrUndefined(contextMenuItems)) {
                currentMenuItemCollection = contextMenuItems.filter(function (value) {
                    //convert menu id to string if it is given as number
                    if (value.menuId.toString() === menuId)
                        return true;
                });

                if (currentMenuItemCollection.length > 0) {
                    menuItem = currentMenuItemCollection[0];
                    var fn = menuItem.eventHandler;
                    if (fn) {
                        if (typeof fn === "string") {
                            fn = ej.util.getObject(fn, window);
                        }
                        if ($.isFunction(fn)) {
                            var args = ej.event("customContextMenuHandler", this.model, eventArgs);
                            fn.call(this, args);
                        }
                    }

                }
            }
        },

        _createContextMenuTemplate: function () {
            var proxy = this;
            var helpers = {};
            helpers["_" + proxy._id + "getHeaderName"] = $.proxy(proxy._getHeaderName, proxy);

            $.views.helpers(helpers);

            var menuItemList = "<li style='list-style-type:none;margin:0px;'>";
            var listChild = "<div class='e-menuitem {{if disable}}e-disable{{/if}}{{if ~_" + proxy._id + "getHeaderName(#data)}} e-parent-menuitem{{/if}}' id={{:menuId}}  style='display:table;cursor:{{if disable}}default{{else}}pointer{{/if}};min-width:100px;'>" +
                            "{{if iconPath}}" +
                           "<div class='e-icon e-tgcontextmenu-image'" +
                            " style='background-image:{{:iconPath}};background-repeat:no-repeat;'/> " + 
                            "{{else}}" +
                            "<div class='e-icon {{:iconClass}} e-tgcontextmenu-icon'/>" +
                            "{{/if}}" +
                            "<div class='e-tgcontextmenu-label'>" +
                            "<span>{{:headerText}}</span></div>" +
                            "{{if ~_" + proxy._id + "getHeaderName(#data)}}<div class='e-icon e-expander'/> {{/if}}";

            menuItemList += listChild;
            menuItemList += "</div></li>";
            var templates = {};
            templates[proxy._id + "contextMenuTemplate"] = menuItemList;
            $.templates(templates);
        },
        _getHeaderName: function (data) {
            var templatecontextmenuitem = this._isContextMenuItems ? this._contextMenuItems : this._headerContextMenuItems,
                childMenuItems = templatecontextmenuitem.filter(function (value) {
                if (data.menuId != null && data.menuId == value.parentMenuId || data.isExpanderIcon)
                    return true;
            });
            if (childMenuItems.length > 0) {
                return true;
            }
            return false;
        },

        // Remove the speace from column menu name for chaning name to id.

        _getColumnId: function (data) {
            return data.name.replace(/\s/g, "");
        },

        //Change the context menu based on context menu item list.
        _updateContextmenuOption: function (recordIndex) {
            //removing empty string and undefined from contextmenu items.
            Array.prototype.clean = function (deleteValue) {
                for (var i = 0; i < this.length; i++) {
                    if (this[i] == deleteValue) {
                        this.splice(i, 1);
                        i--;
                    }
                }
                return this;
            };
            var proxy = this;
            
            if(proxy._isRowEdit || proxy.model.isEdit)
            {
                //Remove add, delete and edit context menu when row in edit mode.
                proxy._contextMenuItems.splice(0, 3);
            }
            else
            {
                proxy._contextMenuItems.splice(3, 2); //Remove save and cancel when row not in edit mode
                var editSetting = proxy.model.editSettings;
                var contextMenuItems = $.extend(true, [], proxy._contextMenuItems);
                var contextMenuList = proxy.model.contextMenuSettings.contextMenuItems.clean("").clean(undefined);
                var contextMenuItemList = [];
                //removing duplicate conetxt menu items
                $.each(contextMenuList, function (i, el) {
                    if ($.inArray(el.toLowerCase(), contextMenuItemList) === -1) contextMenuItemList.push(el.toLowerCase());
                });
                proxy._contextMenuItems = [];
                if (recordIndex == -1) {
                    if (contextMenuItemList.indexOf("add") != -1 || contextMenuItemList.length==0)
                        proxy._contextMenuItems[0] = contextMenuItems[0];
                    if (!editSetting.allowAdding)
                        proxy._contextMenuItems[0].disable = true;
                    proxy._contextAddMenuIndex = 0;
                }
                //Adding default context menu when user not specify the context menu items.
                else if (contextMenuItemList.length == 0)
                {
                    proxy._contextMenuItems[0] = contextMenuItems[0];
                    if (!editSetting.allowAdding)
                        proxy._contextMenuItems[0].disable = true;
                    proxy._contextAddMenuIndex = 0;
                    proxy._contextMenuItems[1] = contextMenuItems[2];
                    if (!editSetting.allowDeleting)
                        proxy._contextMenuItems[1].disable = true;
                    proxy._contextMenuItems.push.apply(proxy._contextMenuItems, proxy._subContextMenuItems);
                }
                //Change the context menu order based on context menu items order
                else {
                for(var i=0;i<contextMenuItemList.length;i++)
                {
                    var item=contextMenuItemList[i];
                    switch(item.toLowerCase())
                    {
                        case "add":
                            proxy._contextMenuItems[i] = contextMenuItems[0];
                            proxy._contextAddMenuIndex = i;
                            if (!editSetting.allowAdding)
                                proxy._contextMenuItems[i].disable = true;
                            break;
                        case "delete":
                            proxy._contextMenuItems[i] = contextMenuItems[2];
                            if (!editSetting.allowDeleting)
                                proxy._contextMenuItems[i].disable = true;
                            break;
                        case "edit":
                            proxy._contextMenuItems[i] = contextMenuItems[1];
                            if (!editSetting.allowEditing)
                                proxy._contextMenuItems[i].disable = true;
                            break;
                    }
                }
                proxy._contextMenuItems.push.apply(proxy._contextMenuItems, proxy._subContextMenuItems);
                }
            }
        },
        //Assign default value to columns based on column edit type
        _setInitialData:function()
        {
            var eventArgs = {}, proxy = this,
               model = proxy.model, data = [], item, initialData = {};
            for (var i = 0; i < model.columns.length; i++)
            {
                var column = model.columns[i];
                switch(column.editType)
                {
                    case "booleanedit":
                        initialData[column.field] = false;
                        break;
                    case "stringedit":
                        initialData[column.field] = null;
                        break;
                    case "datepicker":
                        initialData[column.field] = ej.format(new Date(), this.model.dateFormat, this.model.locale);
                        break;
                    case "datetimepicker":
                        initialData[column.field] = ej.format(new Date(), "MM/dd/yyyy hh:mm tt", this.model.locale);
                        break;
                    case "numericedit":
                        initialData[column.field] = 0;
                        break;
                    default:
                        initialData[column.field] = null;

            }
            }
            data.push(initialData);
            if (proxy.dataSource() == null || proxy.dataSource().length == 0 || model.flatRecords.length == 0) {
                
                item = proxy._createRecord(data[0], 0, null);
                item.index = 0;
                proxy._addRecord(item, ej.TreeGrid.RowPosition.Top);
                proxy._clearContextMenu();
                this._removeDetailsRow();
            }
        },
        
        // Perform add new row operation
           
        _subContextMenuAction: function (item, index, position, addrow)
        {
            var proxy = this, model = proxy.model,
            eventArgs = {},
            newItem, selectionIndex;

            eventArgs.requestType = "save";
            newItem = jQuery.extend(true, {}, item.item);
            newItem[proxy.model.childMapping] = null;
            if (model.idMapping && model.parentIdMapping && newItem[model.parentIdMapping])
                delete newItem[model.parentIdMapping];

            if (position == "Above") {
                proxy._addRecord(newItem, ej.TreeGrid.RowPosition.Above, null, "contextMenu");
            } else if (position == "Below") {
                proxy._addRecord(newItem, ej.TreeGrid.RowPosition.Below, null, "contextMenu");
            }
            proxy._clearContextMenu();
        },

        _appendEditTemplateRow: function (columns, $targetTr, index, isFrozenTr, addrow) {

            var model = this.model,
                proxy = this,
                rowHeight = proxy.model.rowHeight, $mainTd,
                $form, $frozenForm, $table, $detailCell, visibleColumns = [],
                updatedRecords = proxy.getUpdatedRecords();

            this._editedRowIndex = index;
            $table = ej.buildTag('table.e-table e-zerospace', "", {});
            if (this._frozenColumnsLength > 0) {
                if (isFrozenTr) {
                    $form = ej.buildTag("form.e-treegridform#" + proxy._id + "EditFrozenForm", "", { "margin": "-2px 0px" }, {});
                    $table.append(proxy._$gridHeaderContainer.find("#e-frozenheaderdiv" + proxy._id).find('colgroup').clone());
                } else {
                    $form = ej.buildTag("form.e-treegridform#" + proxy._id + "EditForm", "", { "margin": "-2px 0px" }, {});
                    $table.append(proxy._$gridHeaderContainer.find("#e-movableheaderdiv" + proxy._id).find('colgroup').clone());
                }
            } else {
                $form = ej.buildTag("form.e-treegridform#" + proxy._id + "EditForm", "", { "margin": "-2px 0px" }, {});
                $table.append(proxy.getHeaderTable().find('colgroup').clone());
            }


            if (!isFrozenTr && model.showDetailsRow && model.showDetailsRowInfoColumn && model.detailsTemplate) {
                $detailCell = $targetTr.find("td.e-detailsrowcell");
            }

            $targetTr.empty();
            if (addrow) {
                $targetTr.addClass('e-addedrow');
                if ($targetTr.next('tr').hasClass('e-detailsrow'))
                    $targetTr.next('tr').remove();
            }
            else
                $targetTr.addClass('e-rowedit');

            visibleColumns = columns.filter(function (value) {
                return !(value.visible === false);
            });
            $mainTd = ej.buildTag("td", "", { "padding": "1px" }, { "colspan": $detailCell ? visibleColumns.length + 1 : visibleColumns.length });
            if (model.allowSelection)
                var $tr = ej.buildTag('tr.e-treegridrows e-selectionbackground e-active', { "height": rowHeight }, {});
            else
                var $tr = ej.buildTag('tr.e-treegridrows', { "height": rowHeight }, {});
            var $tbody = ej.buildTag('tbody'),
            $cellEditTemplate = proxy._cellEditTemplate;
            var columnLength = columns.length;
            for (var column = 0; column < columnLength; column++) {
                if (!ej.isNullOrUndefined(column)) {
                    if (columns[column].visible) {
                        var data = {}, columnField = proxy._getFieldValue(columns[column].field, model.columns.indexOf(columns[column])),
                        //Create a html string for column field with specific edit type using cellEditTemplate
                        htmlString = $cellEditTemplate.find("#" + columnField + "_CellEdit").html();
                        var value = proxy._getCustomCellValue(updatedRecords[index], columns[column]["field"]);
                        data[columnField] = value;
                        if (columns[column]["editType"] == "dropdownedit" && data[columns[column]["field"]] == false)
                            data[columnField] = data[columnField].toString();
                        var $element = $($.templates(htmlString).render(data));
                        if (proxy._isCommandColumn(columns[column])) {
                            var $td = ej.buildTag('td.e-rowcell e-unboundcell e-unboundeditedcell', "", { "height": rowHeight, "vertical-align": "middle;", "overflow": "hidden" }, {});
                        }
                        else {
                            var $td = ej.buildTag('td.e-rowcell e-editedcell', "", { "height": rowHeight, "vertical-align": "middle;", "overflow": "hidden" }, {});
                            $td.addClass('e-validError');
                        }
                        if (!proxy._isCommandColumn(columns[column]) && columns[column].allowEditing == false)
                            $element.attr('disabled', true).addClass('e-disable');

                        if ($element.get(0).tagName == "SELECT") {
                            $element.val(data[columns[column]["field"]]);
                            $element.val() == null && $element.val($element.find("option").first().val());
                        }
                        if ($element.get(0).tagName == "INPUT") {
                            $element.val(data[columnField]);
                        }
                        $tr.append($td.append($element));
                        $tbody.append($tr);
                    }
                }
            }
            if ($detailCell) {
                $tr.append($detailCell);
            }
            $table.append($tbody);
            $form.append($table);
            $mainTd.append($form);
            $targetTr.append($mainTd);

        },
        //Create editable row with specific edit type.

        _editRow: function (index, addrow, columnIndex) {
            var proxy = this,
                model = proxy.model,
            rowHeight = model.rowHeight,
            $form, $frozenForm, $table,
            updatedRecords = proxy.getUpdatedRecords(),
            isAddRow = false;

            proxy._editedRowIndex = index;

            var $targetTr = ej.TreeGrid.getRowByIndex(proxy, index);
            if ($targetTr.hasClass("e-summaryrow")) {
                proxy._editAddTools();
                return;
            }
            if (ej.isNullOrUndefined(addrow)) {
                var args = {};
                args.data = updatedRecords[index];
                args.rowElement = $targetTr;
                args.rowIndex = index;
                args.columnIndex = columnIndex;
                isAddRow = false;
                if (proxy._trigger("beginEdit", args)) return false;
            }
            else
                isAddRow = true;
            if (this._frozenColumnsLength > 0) {
                proxy._appendEditTemplateRow(proxy._frozenColumns, $($targetTr[0]), index, true, addrow);
                proxy._appendEditTemplateRow(proxy._unFrozenColumns, $($targetTr[1]), index, false, addrow);
            } else {
                proxy._appendEditTemplateRow(model.columns, $($targetTr), index, false, addrow);
            }
            proxy._isRowEdit = true;
            proxy._editAddTools();
            var args = {};
            if (isAddRow)
            {
                args.data = {};
                args.requestType = "add";
            }
            else
            {
                args.columnIndex = columnIndex;
                args.data = updatedRecords[index];
                args.requestType = "beginEdit";
            }
           
           
            proxy._refreshEditForm(args);
            proxy._updateWrapRowHeights("total,header", null, index, "rowEdit");
            if ($.isFunction($.validator)) {
                proxy._initValidator();
                proxy.setValidation();
            }
            model.selectedItem = updatedRecords[index];
            for(var i=0;i<model.columns.length;i++){
                if (proxy._isCommandColumn(model.columns[i]) && model.columns[i]["isFrozen"]==true) {
                    this._refreshUnboundTemplate($targetTr.find("#" + this._id + "EditFrozenForm"))
                }
                else if (proxy._isCommandColumn(model.columns[i])) {
                    this._refreshUnboundTemplate($targetTr.find("#" + this._id + "EditForm"));
                }
            }            
        },

        //Creating column chooser menu

        _renderColumnChooser: function () {
            var proxy = this,
                $outerDiv = ej.buildTag("div.e-columnSelector", '',"", { id: this._id + "ccDiv" });
            $("#" + proxy._id + "ccDiv_wrapper").remove();
            proxy._renderColumnChooserList(false);
            $outerDiv.append(proxy._columnChooserList);
            $outerDiv.insertAfter(proxy.element);
            $outerDiv.data("columnMenuDialog", "TreeGrid");
            $outerDiv.ejDialog({ showOnInit: false, allowKeyboardNavigation: false, enableResize: false, "enableRTL": false, showHeader: false, width: "auto",allowDraggable: false,
                                 position: { X: 1, Y: 1 }, enableAnimation: false, minWidth:"0px", minHeight:"0px" });
            $("#" + proxy._id + "ccDiv_wrapper").removeClass("e-dialog").removeClass("e-shadow").find("div.e-dialog-scroller").css("height", "100%").removeClass("e-widget-content").addClass("e-treegrid-columnchooser");
        },

        //render filter menu dialog
        _renderFilterMenu: function (filterType) {
            var proxy = this, numeric = 0, srting = 0, datepicker = 0, DropDown = 0, datetimepicker = 0, boolean = 0, column = this.model.columns, dropdownValue;
            if (!filterType) {
                for (var x = 0; x < column.length; x++) {
                    if (column[x].filterEditType == "numericedit" || column[x].editType == "numericedit")
                        numeric++;
                    if (column[x].filterEditType == "stringedit" || column[x].editType == "stringedit")
                        srting++;
                    if (column[x].filterEditType == "datepicker" || column[x].editType == "datepicker")
                        datepicker++;
                    if (column[x].filterEditType == "datetimepicker" || column[x].editType == "datetimepicker")
                        datetimepicker++;
                    if (column[x].filterEditType == "booleanedit" || column[x].editType == "booleanedit")
                        boolean++;
                    if (column[x].filterEditType == "dropdownedit" || column[x].editType == "dropdownedit") {
                        DropDown++;
                        dropdownValue = column[x];
                    }
                }
            }
            if (srting > 0 || filterType == "stringedit") {
                proxy._renderEdittypeFilterMenu("String");
                proxy._renderedFilterMenuDialog.push("stringedit");
            }
            if (numeric > 0 || filterType == "numericedit") {
                proxy._renderEdittypeFilterMenu("Numeric");
                proxy._renderedFilterMenuDialog.push("numericedit");
            }
            if (datepicker > 0 || filterType == "datepicker") {
                proxy._renderEdittypeFilterMenu("Datepicker");
                proxy._renderedFilterMenuDialog.push("datepicker");
            }
            if (datetimepicker > 0 || filterType == "datetimepicker") {
                proxy._renderEdittypeFilterMenu("Datetimepicker");
                proxy._renderedFilterMenuDialog.push("datetimepicker");
            }
            if (DropDown > 0 || filterType == "dropdownedit") {
                proxy._renderEdittypeFilterMenu("Dropdown", dropdownValue);
                proxy._renderedFilterMenuDialog.push("dropdownedit");
            }
            if (boolean > 0 || filterType == "booleanedit") {
                proxy._renderEdittypeFilterMenu("Boolean");
                proxy._renderedFilterMenuDialog.push("booleanedit");
            }
        },

        //render filter menu dialog box depends on its filterEditType
        _renderEdittypeFilterMenu: function (idvalue, dropdownValue) {
            var proxy = this, filterTable,
                $outerDiv = ej.buildTag("div.e-" + proxy._id + "filter" + idvalue + "Selector e-filterMenuDiv e-treegridmenufilterwraper", "", {}, { id: this._id + "filter" + idvalue + "MenuDiv" }),
                localeFilterTexts = proxy._filterMenuTexts;
            if (idvalue == "Dropdown") {
                filterTable = "<div class='e-filter-container'><div class='e-dropdown-filter-container'><input id='" + this._id + "filter" + idvalue + "DropDown'/></div><div class='e-filter-button-container'><div class='e-filter-btn-filter'><button id='" + this._id + "filter" + idvalue + "MenuButton' class='e-filterMenuDiv'>" + localeFilterTexts.filterButton + "</button></div><div class='e-filter-btn-clear'><button id='" + this._id + "filter" + idvalue + "ClearButton' class='e-filterMenuDiv'>" + localeFilterTexts.clearButton + "</button></div></div></div>";
            } else if (idvalue == "Boolean") {
                filterTable = "<div class='e-filter-container'><div class='e-checkbox-filter-container'><span class='e-checkbox-filter-text'>" + localeFilterTexts.filterValue + "</span><div class='e-checkbox-filter-control' style='padding-bottom:14px;padding-left: 48%;'><input id='" + this._id + "filter" + idvalue + "InputBox'/></div><div class='e-filter-button-container'><div class='e-filter-btn-filter'><button id='" + this._id + "filter" + idvalue + "MenuButton' class='e-filterMenuDiv'>" + localeFilterTexts.filterButton + "</button></div><div class='e-filter-btn-clear'><button id='" + this._id + "filter" + idvalue + "ClearButton' class='e-filterMenuDiv'>" + localeFilterTexts.clearButton + "</button></div></div></div>";
            }
            else {
                filterTable = "<div class='e-filter-container'><div class='e-filter-operator'><input id='" + this._id + "filter" + idvalue + "DropDown'/></div><span class='e-filter-text'>" + localeFilterTexts.filterValue + "</span><div class='e-filter-value'><input id='" + this._id + "filter" + idvalue + "InputBox'/></div><div class='e-filter-button-container'><div class='e-filter-btn-filter'><button id='" + this._id + "filter" + idvalue + "MenuButton' class='e-filterMenuDiv'>" + localeFilterTexts.filterButton + "</button></div><div class='e-filter-btn-clear'><button id='" + this._id + "filter" + idvalue + "ClearButton' class='e-filterMenuDiv'>" + localeFilterTexts.clearButton + "</button></div></div></div>";
            }
            $outerDiv.append(filterTable);
            $outerDiv.insertAfter(proxy.element);
            proxy._renderFilterMenuDialog(idvalue + "MenuDiv", idvalue, dropdownValue, localeFilterTexts);
            $outerDiv.data("filter" + idvalue + "MenuDialog", "TreeGrid");
            $outerDiv.ejDialog({
                showOnInit: false, allowKeyboardNavigation: false, enableResize: false, "enableRTL": false, showHeader: false, width: "auto", allowDraggable : false,
                position: { X: 1, Y: 1 }, enableAnimation: false, cssClass: proxy.model.cssClass
            });
            $("#" + proxy._id + "filter" + idvalue + "MenuDiv_wrapper").removeClass("e-dialog").removeClass("e-shadow").find("div.e-dialog-scroller").css({ 'height': 'auto','width':'auto' }).removeClass("e-widget-content");
            $("#" + proxy._id + "filter" + idvalue + "MenuDiv_wrapper").css("outline", "none").addClass("e-treegrid-columnchooser");
        },

        //render filter menu inner components for each dialog box depends on its filterEditType
        _renderFilterMenuDialog: function (idValue, inputIdValue, dropdownValue, localeFilterTexts) {

            var proxy = this, localization, groups, initialtextvalue, field1;
            if (inputIdValue == "String") {
                groups = localeFilterTexts.stringMenuOptions;
                initialtextvalue = "endswith";
                field1 = { value: "value", text: "text" };
            }
            if (inputIdValue == "Numeric" || inputIdValue == "Datepicker" || inputIdValue == "Datetimepicker") {
                groups = localeFilterTexts.numberMenuOptions;
                initialtextvalue = "GreaterThan";
                field1 = { value: "value", text: "text" };
            }
            if (inputIdValue == "Dropdown") {
                groups = dropdownValue.dropdownData;
                if (dropdownValue.editParams)
                    field1 = { value: dropdownValue.editParams.fields.value, text: dropdownValue.editParams.fields.text };
                else
                    field1 = { value: "value", text: "text" };
            }
            if (inputIdValue == "String") {
                $("#" + proxy._id + "filter" + idValue).find('#' + proxy._id + "filter" + inputIdValue + 'InputBox').ejAutocomplete({
                    width: "100%",
                    watermarkText: localeFilterTexts.enterValueText,
                    filterType: initialtextvalue,
                    enableResize:false,
                    enableDistinct: true,
                    locale: proxy.model.locale,
                    cssClass: proxy.model.cssClass
                });
            }
            if (inputIdValue == "Numeric") {
                $("#" + proxy._id + "filter" + idValue).find('#' + proxy._id + "filter" + inputIdValue + 'InputBox').ejNumericTextbox({
                    decimalPlaces: 2,
                    width: "100%",
                    locale: proxy.model.locale,
                });
            }
            if (inputIdValue == "Boolean") {
                $("#" + proxy._id + "filter" + idValue).find('#' + proxy._id + "filter" + inputIdValue + 'InputBox').ejCheckBox({
                    size: "small"
                });
            }
            if (inputIdValue == "Datetimepicker") {
                $("#" + proxy._id + "filter" + idValue).find('#' + proxy._id + "filter" + inputIdValue + 'InputBox').ejDateTimePicker({
                    width: "100%",
                    locale: proxy.model.locale,
                    cssClass: proxy.model.cssClass
                });
            }
            if (inputIdValue == "Datepicker") {
                $("#" + proxy._id + "filter" + idValue).find('#' + proxy._id + "filter" + inputIdValue + 'InputBox').ejDatePicker({
                    width: "100%",
                    locale: proxy.model.locale,
                    cssClass: proxy.model.cssClass
                });
            }
            if (inputIdValue != "Boolean") {
                $("#" + proxy._id + "filter" + idValue).find('#' + proxy._id + "filter" + inputIdValue + 'DropDown').ejDropDownList({
                    dataSource: groups,
                    selectedIndex: 1,
                    fields: field1,
                    select: function (args) {
                        if (inputIdValue == "String") {
                            var suggesionBox = $("#" + proxy._id + "filter" + inputIdValue + "InputBox").data("ejAutocomplete");
                            suggesionBox.option("filterType", args.value);
                        }
                    },
                    cssClass: proxy.model.cssClass,
                    width: "100%"
                });
            }

            $("#" + proxy._id + "filter" + idValue).find('#' + proxy._id + "filter" + inputIdValue + 'MenuButton').ejButton({
                size: "normal",
                width: "100%",
                cssClass: proxy.model.cssClass,
                click: function (args) {
                    var columnFieldName = $.trim(proxy._columnMenuTarget.prev("div.e-headercelldiv").attr("data-ej-mappingname")),
                    column = proxy.getColumnByField(columnFieldName), suggesionBox, dropDown;
                    if (args.e.target.id == proxy._id + "filterStringMenuButton") {
                        suggesionBox = $("#" + proxy._id + "filterStringInputBox").data("ejAutocomplete");
                        dropDown = $("#" + proxy._id + "filterStringMenuDiv").find("#" + proxy._id + "filterStringDropDown").data("ejDropDownList");
                        proxy._performMenuFilter(column, suggesionBox.value(), dropDown.model.value);
                    }
                    if (args.e.target.id == proxy._id + "filterNumericMenuButton") {
                        suggesionBox = $("#" + proxy._id + "filterNumericInputBox").data("ejNumericTextbox");
                        dropDown = $("#" + proxy._id + "filterNumericMenuDiv").find("#" + proxy._id + "filterNumericDropDown").data("ejDropDownList");
                        proxy._performMenuFilter(column, suggesionBox.model.value, dropDown.model.value);
                    }
                    if (args.e.target.id == proxy._id + "filterDropdownMenuButton") {
                        dropDown = $("#" + proxy._id + "filterDropdownMenuDiv").find("#" + proxy._id + "filterDropdownDropDown").data("ejDropDownList");
                        proxy._performMenuFilter(column, dropDown.model.value, "equal");
                    }
                    if (args.e.target.id == proxy._id + "filterDatepickerMenuButton") {
                        suggesionBox = $("#" + proxy._id + "filterDatepickerInputBox").data("ejDatePicker");
                        dropDown = $("#" + proxy._id + "filterDatepickerMenuDiv").find("#" + proxy._id + "filterDatepickerDropDown").data("ejDropDownList");
                        proxy._performMenuFilter(column, suggesionBox.model.value, dropDown.model.value);
                    }
                    if (args.e.target.id == proxy._id + "filterDatetimepickerMenuButton") {
                        suggesionBox = $("#" + proxy._id + "filterDatetimepickerInputBox").data("ejDateTimePicker");
                        dropDown = $("#" + proxy._id + "filterDatetimepickerMenuDiv").find("#" + proxy._id + "filterDatetimepickerDropDown").data("ejDropDownList");
                        proxy._performMenuFilter(column, suggesionBox.model.value, dropDown.model.value);
                    }
                    if (args.e.target.id == proxy._id + "filterBooleanMenuButton") {
                        suggesionBox = $("#" + proxy._id + "filterBooleanInputBox").data("ejCheckBox");
                        if (suggesionBox.model.checkState == "uncheck")
                            proxy._performMenuFilter(column, false, "equal");
                        else if (suggesionBox.model.checkState == "check")
                            proxy._performMenuFilter(column, true, "equal");
                    }
                }
            });

            $("#" + proxy._id + "filter" + idValue).find('#' + proxy._id + "filter" + inputIdValue + 'ClearButton').ejButton({
                size: "normal",
                width: "100%",
                cssClass: proxy.model.cssClass,
                click: function (args) {
                    var columnFieldName = $.trim(proxy._columnMenuTarget.prev("div.e-headercelldiv").attr("data-ej-mappingname")),
                    column = proxy.getColumnByField(columnFieldName), dropDown;
                    if (proxy._isExcelFilter)
                        delete proxy._excelFilter._predicates[0][column.field];
                    if (args.e.target.id == proxy._id + "filterStringClearButton") {
                        dropDown = $("#" + proxy._id + "filterStringMenuDiv").find("#" + proxy._id + "filterStringDropDown").data("ejDropDownList");
                        proxy._performMenuFilter(column, "", dropDown.model.value);
                    }
                    if (args.e.target.id == proxy._id + "filterNumericClearButton") {
                        dropDown = $("#" + proxy._id + "filterNumericMenuDiv").find("#" + proxy._id + "filterNumericDropDown").data("ejDropDownList");
                        proxy._performMenuFilter(column, "", dropDown.model.value);
                    }
                    if (args.e.target.id == proxy._id + "filterDropdownClearButton") {
                        dropDown = $("#" + proxy._id + "filterDropdownMenuDiv").find("#" + proxy._id + "filterDropdownDropDown").data("ejDropDownList");
                        proxy._performMenuFilter(column, "", "equal");
                    }
                    if (args.e.target.id == proxy._id + "filterDatepickerClearButton") {
                        dropDown = $("#" + proxy._id + "filterDatepickerMenuDiv").find("#" + proxy._id + "filterDatepickerDropDown").data("ejDropDownList");
                        proxy._performMenuFilter(column, "", dropDown.model.value);
                    }
                    if (args.e.target.id == proxy._id + "filterDatetimepickerClearButton") {
                        dropDown = $("#" + proxy._id + "filterDatetimepickerMenuDiv").find("#" + proxy._id + "filterDatetimepickerDropDown").data("ejDropDownList");
                        proxy._performMenuFilter(column, "", dropDown.model.value);
                    }
                    if (args.e.target.id == proxy._id + "filterBooleanClearButton") {
                        proxy._performMenuFilter(column, "", "equal");
                    }
                }
            });
        },

        //Render excel type filter menu
        _renderExcelFilter:function()
        {
            var proxy = this,
                model = proxy.model,
                filterSettings = model.filterSettings,
                filterCol = filterSettings.filteredColumns.length != 0 ? filterSettings.filteredColumns[0].field : null,
                filterModel = {
                instance: this,
                showSortOptions: model.allowSorting ? (model.showColumnChooser ? false:true):false,
                allowCaseSensitive: filterSettings.enableCaseSensitivity,
                maxFilterLimit: filterSettings.maxFilterChoices,
                interDeterminateState:true,
                enableComplexBlankFilter: filterSettings.enableComplexBlankFilter,
                blankValue: filterSettings.blankValue,
                allowAccent : true,
                filteredColumns:filterSettings.filteredColumns,
                filterHandler: $.proxy(proxy._filterHandler, proxy),
                cancelHandler: $.proxy(proxy._cancelHandler, proxy),
                initFilterCol: filterCol,
                actionBegin: "actionBegin",
                actionComplete: "actionComplete"
            };
            proxy._excelFilter = new ej.excelFilter(filterModel);
          //  $.extend(proxy._excelFilter, model.filterSettings);
            proxy._isExcelFilter = true;
        },

        //Cancel client side event for excel filter
        _cancelHandler:function(args)
        {
            var proxy = this;
            $("#" + proxy._id).find(".e-filtericon").data("isClicked", false);
            proxy._mediaStatus = false;
            if (proxy.model.showColumnChooser && !proxy._isCloseFilterMenu)
                proxy._clearColumnMenu("cancelHandler");
            proxy._isCloseFilterMenu = false;
        },

        //filter client side event for excel fitler
        _filterHandler:function(args)
        {
            var proxy = this,
                model = proxy.model,
                arg = {}, queryManager;
            arg.requestType = args.action == "sorting" ? args.action : "filtering";
            var filterColumn = model.filterSettings.filteredColumns;
            switch(args.action)
            {
                case "sorting":
                    var column = proxy.getColumnByField(args.sortDetails.field);
                    if (column.allowSorting != false) {
                        if (model.allowMultiSorting) proxy._multiSortRequest = true;
                        proxy.sortColumn(args.sortDetails.field, args.sortDetails.direction);
                        proxy._multiSortRequest = false;
                    }
                    break;
                case "filtering":
                    proxy.clearAllSelection();
                    queryManager = ej.DataManager(model.filterSettings.filteredColumns);
                    var query = new ej.Query().where("field", ej.FilterOperators.equal, args.fieldName),
                        object = queryManager.executeLocal(query);
                    for (var i = 0; i < object.length; i++) {
                        var objectIndex = $.inArray(object[i], model.filterSettings.filteredColumns)
                        if (objectIndex != -1)
                            model.filterSettings.filteredColumns.splice(objectIndex, 1);
                    }
                    ej.merge(model.filterSettings.filteredColumns, args.filterCollection);
                    args.currentFilterCollection = args.filterCollection;
                    arg.currentFilteringColumn = args.fieldName;
                    arg.predicated = args.ejpredicate;
                    var returnValue = proxy.processBindings(arg);
                    if (returnValue)
                        model.filterSettings.filteredColumns = filterColumn;
                    if(proxy._filterIconTarget)
                        proxy._filterIconTarget.target.className = "e-column-filtered-icon e-icon e-filtericon";
                    proxy._filteredColumnValueID.push(args.fieldName);
                    break;

                case "clearfiltering":
                    proxy.clearAllSelection();
                    var filterObj = args.filterDetails;
                    delete proxy._excelFilter._predicates[0][args.fieldName];
                    proxy.filterColumn(filterObj.field, filterObj.operator, filterObj.value, filterObj.predicate);
                    proxy._storePreviousFilteredValue(filterObj.field, filterObj.value, filterObj.operator);
                    if (proxy._filterIconTarget)
                        proxy._filterIconTarget.target.className = "e-column-filter-icon e-icon e-filtericon";
                    if (proxy._filteredColumnValueID.indexOf(args.fieldName) != -1) {
                        var filteredColumnIdIndex = proxy._filteredColumnValueID.indexOf(args.fieldName);
                        proxy._filteredColumnValueID.splice(filteredColumnIdIndex, 1);
                    }
                    break;
            }
            $("#" + proxy._id).find(".e-filtericon").data("isClicked", false);
            proxy._mediaStatus = false;
            if (model.showColumnChooser)
                proxy._clearColumnMenu();
        },
        /*  Creating Column Chooser menu list with column header name
		    argument refresh in boolean data type
		    If it is false, rendering the column chooser list
            If is is true, rerendering the column chooser list
        */

        _renderColumnChooserList: function (refresh, headerText) {
            var proxy = this,
                length = proxy.model.columns.length,
                columns = proxy.model.columns,
                $listBox = ej.buildTag("div", '', { 'margin-left': '0px', "width": "auto" });
            for (var index = 0; index < length; index++) {
                if (proxy.model.treeColumnIndex != index && columns[index].showInColumnChooser ==true ) {
                    var column = columns[index];
                    if (column.nonColumn) continue;
                    if (!ej.isNullOrUndefined(column)) {
                        var $innerDiv = ej.buildTag('div', '',"", { 'class': 'e-columnMenuListDiv' }),
                            styleAttr = {},
                            colValue = ej.isNullOrUndefined(column.headerText) ? column.field : column.headerText,
                            $input = ej.buildTag('input', '', styleAttr, { 'id': proxy._id + "_columnMenu_" + column.field.split('.').join(""), 'value': colValue, 'type': 'checkbox' }),
                            label = ej.buildTag('label', colValue, {"width": "auto" }, { 'for': proxy._id + "_columnMenu_" + column.field.split('.').join("") });
                        $innerDiv.append($input);
                        $innerDiv.append(label);
                        $innerDiv.data("column", column.headerText);
                        $listBox.append($innerDiv);
                        if (column.headerText == headerText)
                            $innerDiv.addClass("e-columnmenuselection");
                        $input.ejCheckBox({
                            checked: !ej.isNullOrUndefined(column.visible) ? column.visible : true,
                            cssClass: proxy.model.cssClass,
                            change: function(args)
                            {
                                var columnName = "";
                                if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9) {
                                    columnName = this.element.closest(".e-columnMenuListDiv").data().column;
                                } else {
                                    columnName = args.model.value;
                                }
                                if (!args.isChecked)
                                    proxy.hideColumn(columnName);
                                else
                                    proxy.showColumn(columnName);
                                proxy._updateWrapRowHeights(null,"virtualRefresh");
                            }
                        });
                    }
                }
            }
            if (!refresh) 
                proxy._columnChooserList = $listBox;
            else {
                proxy._columnChooserList.empty().append($listBox.children());
                proxy._focusTreeGridElement();
            }
            var columnChooserListItem = proxy._columnChooserList.find("div.e-columnMenuListDiv");
            $(columnChooserListItem).mouseenter(function () {
                columnChooserListItem.removeClass("e-columnmenuselection");
                $(this).addClass("e-columnmenuselection");
            });
        },

        //Template for column menu

        _createColumnMenuTemplate:function()
        {
            var proxy = this;
            var columnMenuList = "<li style='list-style-type:none;'>" +
                                 "<div class='e-columnmenuitem{{if enabled==false}} e-disable{{/if}}{{if (menuId =='Columns' || menuId =='Filter')}} e-parent-menuitem{{/if}}' style='display:table;cursor:pointer'" +
                                    " id='" + proxy._id + "_{{:menuId}}Chooser'>" +
                                "<div class='e-icon {{:icon}} e-treegridicon' style='display:inline-block;'></div>" +
                                "<div class='e-menuitem-label' style='display:inline-block;width:auto'>" +
                                "<span>{{:name}}</span></div>" +
                                "{{if (menuId =='Columns' || menuId =='Filter')}}<div class='e-icon e-expander e-treegridicon' style='display:inline-block;float:right;'/> {{/if}}" +
                                "</div>" +
                                "{{if menuId == 'RenameColumn' || menuId == 'SortDescending'}}<hr class='e-menuitem-hr'>{{/if}}" +
                                "</li>";            
            var templates = {};
            templates[proxy._id + "columnMenuTemplate"] = columnMenuList;
            $.templates(templates);
        },

        //render filter menu dialog in a respective position while clicking filter menu icon
        _updateFilterMenuList: function (e) {
            var proxy = this,
               model = proxy.model,
               columnFilterPosX, posY,
               posX,
               containerOffset,
               $target = $(e.target),
               targetWidth = targetHeight = 0,
               targetWidth = $target[0].offsetWidth,
               targetHeight = $target[0].offsetHeight,
               columnFieldName = $.trim($target.prev("div.e-headercelldiv").attr("data-ej-mappingname")), position,
               element, editType, str, index, filtertype,
               column = proxy.getColumnByField(columnFieldName);
            posX = columnFilterPosX = posY = 0;
            proxy._clearFilterMenu();
            proxy._clearColumnMenu("columnmenu");
            proxy._columnMenuTarget = $target;
            proxy._filterIconTarget = e;

            proxy._saveEditedElements();

            position = proxy.getOffsetRect($target[0]);
            position.top = position.top + targetHeight;
            if (!proxy.model.isFromGantt)
                posY = position.top + targetHeight;
            else
                posY = position.top + targetHeight;
            element = !model.isFromGantt ? $(this.element) : $(this.element).closest(".e-gantt"),
            containerOffset = this.getOffsetRect(element[0]);
            containerOffset.bottom = containerOffset.top + element[0].offsetHeight;
            containerOffset.right = containerOffset.left + $(element).width();
            if (column.filterEditType) {
                index = column.filterEditType.indexOf("edit");
                filtertype = column.filterEditType;
            }
            else {
                index = column.editType.indexOf("edit");
                filtertype = column.editType;
            }
            if (index != -1) {
                editType = filtertype.slice(0, index);
                str = editType.charAt(0).toUpperCase() + editType.slice(1);
                proxy._showFilterMenu("filtermenu", "filter" + str, position, targetWidth, containerOffset.right, posX, null, null, column, posY);
            } else {
                str = filtertype.charAt(0).toUpperCase() + filtertype.slice(1);
                proxy._showFilterMenu("filtermenu", "filter" + str, position, targetWidth, containerOffset.right, posX, null, null, column, posY);
            }
            proxy._updatePreviousFilteredValue(column);
        },
        //Method for showing column chooser 
        _showColumnChooser: function (e, container, columnListPosX, columnMenuWidth, posY, posX, columnMenu, isFromColumnmenu) {
            var proxy = this,
                 model = proxy.model,
                 width = $(window).width();
            if (((e.type == "mouseenter" && width > proxy._responsiveMinWidth || isFromColumnmenu) || !proxy.model.isResponsive) || ((e.type == "click" && width <= proxy._responsiveMinWidth && proxy.model.isResponsive)) || model.isFromGantt) {
                if ((width > proxy._responsiveMinWidth || isFromColumnmenu || !proxy.model.isResponsive) || model.isFromGantt) {
                    var evntArgs = {};
                    evntArgs.width = "auto";
                    evntArgs.height = "auto";
                    evntArgs.minWidth = "0px";
                    evntArgs.minHeight = "0px";
                    evntArgs.showHeader = false;
                    evntArgs.position = { X: posX, Y: posY };
                    evntArgs.enableModal = false;
                    evntArgs.isResponsive = false;
                    evntArgs.enableResize = false;
                    evntArgs.cssClass = proxy.model.cssClass;
                    $("#" + proxy._id + "ccDiv_wrapper").addClass("e-treegridadaptivedialog")
                    $("#" + proxy._id + "ccDiv_wrapper").removeClass("e-dialog").removeClass("e-shadow").find("div.e-dialog-scroller").css("height", "100%").removeClass("e-widget-content");
                    $("#" + proxy._id + "ccDiv").ejDialog(evntArgs);
                    $("#" + proxy._id + "ccDiv").css({ 'height': 'auto' });

                    proxy._updateColumnMenuVisibility();
                    var columnchooser = $("#" + proxy._id + "ccDiv").ejDialog("instance"),
                        columnChooserList = $("#" + proxy._id + "ccDiv_wrapper"),
                        columnChooserMenuList = columnChooserList.find("div.e-columnMenuListDiv");
                    columnchooser.open();
                    if (container < columnListPosX + columnChooserList.width()) {
                        columnListPosX = columnListPosX - columnChooserList.width() - columnMenuWidth;
                        
                    }
                    var position = {
                        X: columnListPosX,
                        Y: posY + columnMenu.position().top
                    };
                    columnchooser.option({ "position": position });
                    columnChooserList.css("z-index", proxy.getMaxZIndex() + 1);
                    columnChooserMenuList.removeClass("e-columnmenuselection");
                    columnChooserMenuList.eq(0).addClass("e-columnmenuselection");
                    proxy._focusTreeGridElement();
                    proxy._renderedSubMenuType = "ColumnDesktop";
                } else {
                    proxy._adaptiveColumnChooser();

                }
                if (model.allowFiltering && (model.filterSettings.filterType == "menu" || model.filterSettings.filterType == "excel")) {
                    proxy._isCloseFilterMenu = true;
                    proxy._clearFilterMenu();
                }
            }

        },
        //Creating Column Menu

        _renderColumnMenu: function (e) {
            var proxy = this,
                model = proxy.model,
                posX, columnListPosX, columnFilterPosX, posY,
                $target = $(e.target),
                targetWidth = targetHeight = 0,
                columnMenuItems = [],
                columnChooserListIndex = 0,
                targetWidth = $target[0].offsetWidth,
                targetHeight = $target[0].offsetHeight,
                columnMenuText = proxy._columnMenuTexts,
                columnFieldName = $.trim($target.prev("div.e-headercelldiv").attr("data-ej-mappingname")),
                column = proxy.getColumnByField(columnFieldName),
                filtermenuindex,
                allowSorting = column.allowSorting == undefined ? true : column.allowSorting;
            
            if (proxy._batchEditStarts && !(proxy._confirmDialog).is(":visible")) {
                proxy._batchSaveLostWarning("ColumnMenu");
                proxy._batchTempDetails.menuTarget = e;
                return true;
            }
            posX = columnListPosX = columnFilterPosX = posY = 0;
            proxy._clearColumnMenu("columnmenu");
            proxy._columnMenuTarget = $target;
            /* save edited value before rendering contextmenu on non edited cell*/
            if ((model.isEdit || this._isRowEdit)) {
                if (this.editFormValidate()) {
                    proxy._saveEditedElements();
                }
                else
                    return true;
            }
            

            if (model.showColumnChooser && model.showColumnOptions) {
                var isInsert = proxy._enableDisableInsertLabel();
                columnMenuItems.push({ "name": columnMenuText["insertColumnLeft"], "icon": "e-column-insertleft-icon", "menuId": "ColumnLeft", enabled: isInsert });
                columnMenuItems.push({ "name": columnMenuText["insertColumnRight"], "icon": "e-column-insertright-icon", "menuId": "ColumnRight", enabled: isInsert });
                columnMenuItems.push({ "name": columnMenuText["deleteColumn"], "icon": "e-column-delete-icon", "menuId": "DeleteColumn", enabled: proxy._enableDisableDEL(column) });
                columnMenuItems.push({ "name": columnMenuText["renameColumn"], "icon": "e-column-rename-icon", "menuId": "RenameColumn" });
            }
            if (model.allowFiltering && (ej.isNullOrUndefined(column.allowFiltering) || column.allowFiltering) && (model.filterSettings.filterType == "menu" || model.filterSettings.filterType == "excel")) {
                if (proxy._filteredColumnValueID.indexOf(column.field) != -1) {
                    columnMenuItems.push({ "name": columnMenuText["menuFilter"], "icon": "e-column-filtered-icon", "menuId": "Filter" });
                    filtermenuindex = columnMenuItems.length;
                } else {
                    columnMenuItems.push({ "name": columnMenuText["menuFilter"], "icon": "e-column-filter-icon", "menuId": "Filter" });
                    filtermenuindex = columnMenuItems.length;
                }
            }
            if (model.allowSorting && allowSorting)
            {
                columnMenuItems.push({ "name": columnMenuText["sortAscendingText"], "icon": "e-columnmenu-ascending", "menuId": "SortAscending" });
                columnMenuItems.push({ "name": columnMenuText["sortDescendingText"], "icon": "e-columnmenu-descending", "menuId": "SortDescending" });
            }
            if (model.showColumnChooser) {
                columnChooserListIndex = columnMenuItems.length;
                columnMenuItems.push({ "name": columnMenuText["columnsText"], "icon": "e-columnchooser-icon", "menuId": "Columns" });
            }

            if (!model.isFromGantt) {
                if (column.allowFreezing || (proxy._allowFreezingDefault && ej.isNullOrUndefined(column.allowFreezing))) {
                    var enableFreeze, enableFreezeBefore = false;
                    /*Check all other columns are in frozen*/
                    if (proxy._frozenColumnsLength == model.columns.length - 1 && !column.isFrozen)
                        enableFreeze = true;

                    /*Check frozen column width and container width */
                    var frozenWidth = this._getFrozenColumnWidth(),
                        columnIndex = model.columns.indexOf(column);
                    frozenWidth = frozenWidth + this.columnsWidthCollection[columnIndex] + 18;
                    if (frozenWidth > this._gridWidth)
                        enableFreeze = true;

                    columnMenuItems.push({ "name": columnMenuText["freezeText"], "icon": "e-freezecolumn-icon", "menuId": "FreezeColumns", enabled: enableFreeze ? false : !column.isFrozen });
                    columnMenuItems.push({ "name": columnMenuText["unfreezeText"], "icon": "e-unfreezecolumn-icon", "menuId": "UnfreezeColumns", enabled: (column.isFrozen == true) });
                    if (proxy._checkboxSelection && model.columns[0].nonColumn) {
                        if (model.columns.indexOf(column) != 1 && model.columns.indexOf(column) > this._frozenColumnsLength)
                            enableFreezeBefore = true;
                    }
                    else if (model.columns.indexOf(column) != 0 && model.columns.indexOf(column) > this._frozenColumnsLength)
                        enableFreezeBefore = true;

                    /*Check frozen column width and container width */
                    frozenWidth = this._getFrozenColumnWidth(columnIndex);
                    frozenWidth = frozenWidth + 18;
                    if (frozenWidth > this._gridWidth)
                        enableFreezeBefore = false;
                    columnMenuItems.push({ "name": columnMenuText["freezePrecedingColumnsText"], "icon": "e-freezecolumnbefore-icon", "menuId": "FreezePrecedingColumns", enabled: enableFreezeBefore });
                }
            }
            var position = proxy.getOffsetRect($target[0]);            
            var elementPosition = proxy.getOffsetRect(proxy.element[0]);           
            if (!proxy.model.isFromGantt)
                posY = position.top + targetHeight;
            else
                posY = position.top + targetHeight;            
            proxy._columnChooserListIndex = columnChooserListIndex;
            var $outerDiv = ej.buildTag("div.e-columnmenu e-js", "", {
                "display": "table",
                "position": "absolute", "top": posY, "z-index": 10000//proxy.getMaxZIndex() + 1
            }, { id: proxy._id + "_ColumnMenu" }),
                $outerUl = ej.buildTag("ul.e-treegrid-columnmenu", "", {}, {}),
                $columnMenuList = $.render[proxy._id + "columnMenuTemplate"](columnMenuItems);
            model.cssClass && ($outerDiv.addClass(model.cssClass));
            $outerUl.append($columnMenuList);
            $outerDiv.append($outerUl);
            $(document.body).append($outerDiv);
            var columnMenuHeight = $outerDiv.height(),
                columnMenuWidth = ($outerDiv.outerWidth() + 1);
            posX = position.left + targetWidth - columnMenuWidth;
            if (posX <= elementPosition.left)
                posX = elementPosition.left;
            columnListPosX = posX + columnMenuWidth;
            columnFilterPosX = posX + columnMenuWidth;
            proxy._columnListPosX = columnListPosX;
            proxy._columnFilterPosX = columnFilterPosX;
            proxy._columnMenuPopupY = posY;
            $outerDiv.css({ 'left': posX });
            $outerDiv.find(".e-columnmenuitem").outerWidth(columnMenuWidth);

            //Edge detection for column menu
            var element = !model.isFromGantt ? $(this.element) : $(this.element).closest(".e-gantt"),
                containerOffset = this.getOffsetRect(element[0]);
            containerOffset.bottom = containerOffset.top + element[0].offsetHeight;
            containerOffset.right = containerOffset.left + $(element).width();
            if (!model.isFromGantt) {
                if (proxy.model.isResponsive && $(window).width() <= proxy._responsiveMinWidth)
                    $("#" + proxy._id + "_ColumnMenu").find(".e-expander").addClass("e-treegridadaptivesubicon");
                else
                    $("#" + proxy._id + "_ColumnMenu").find(".e-expander").removeClass("e-treegridadaptivesubicon");
            }

            $("#" + proxy._id + "_ColumnsChooser").on("mouseenter click", function (e) {
                proxy._showColumnChooser(e, containerOffset.right, columnListPosX, columnMenuWidth, posY, posX, $("#" + proxy._id + "_ColumnsChooser"));
                });

            $("#" + proxy._id + "_FilterChooser").on("mouseenter click", function (e) {
                if (((e.type == "mouseenter" && $(window).width() > proxy._responsiveMinWidth) || !proxy.model.isResponsive) || ((e.type == "click" && $(window).width() <= proxy._responsiveMinWidth && proxy.model.isResponsive))) {

                    var index, editType, str, filtertype;
                    proxy._updateColumnMenuVisibility();
                    proxy._checkFilterType(column);
                    if ((model.filterSettings.filterType == "menu" && column.filterType != "excel") || (model.filterSettings.filterType == "excel" && column.filterType == "menu")) {
                        if (column.filterEditType) {
                            index = column.filterEditType.indexOf("edit");
                            filtertype = column.filterEditType;
                        }
                        else {
                            column.editType = (column.editType == "edittemplate") ? "stringedit" : column.editType;
                            index = column.editType.indexOf("edit");
                            filtertype = column.editType;
                        }
                        if (index != -1) {
                            editType = filtertype.slice(0, index);
                            str = editType.charAt(0).toUpperCase() + editType.slice(1);
                            proxy._showFilterMenu("columnchooser", "filter" + str, columnFilterPosX, columnMenuWidth, containerOffset.right, posX, columnChooserListIndex, filtermenuindex, column, posY);
                        } else {
                            str = filtertype.charAt(0).toUpperCase() + filtertype.slice(1);
                            proxy._showFilterMenu("columnchooser", "filter" + str, columnFilterPosX, columnMenuWidth, containerOffset.right, posX, columnChooserListIndex, filtermenuindex, column, posY);
                        }
                        proxy._updatePreviousFilteredValue(column);
                        $("#" + proxy._id + "ccDiv").ejDialog("close");
                    }
                    else {
                        proxy._openExcelFilter(column, columnFilterPosX, posY,containerOffset,columnMenuWidth);
                    }
                }
            });
            $("#" + proxy._id + "_SortAscendingChooser," + "#" + proxy._id + "_SortDescendingChooser," +
              "#" + proxy._id + "_FreezeColumnsChooser," + "#" + proxy._id + "_UnfreezeColumnsChooser," +
              "#" + proxy._id + "_FreezePrecedingColumnsChooser," + "#" + proxy._id + "_ColumnLeftChooser," +
              "#" + proxy._id + "_ColumnRightChooser," + "#" + proxy._id + "_DeleteColumnChooser," +
              "#" + proxy._id + "_RenameColumnChooser").mouseenter(function () {
                $("#" + proxy._id + "ccDiv").ejDialog("close");
                if (model.allowFiltering && (model.filterSettings.filterType == "menu" || model.filterSettings.filterType == "excel")) {
                    proxy._isCloseFilterMenu = true;
                      proxy._clearFilterMenu();
                  }
              });
            $("#" + proxy._id + "_SortAscendingChooser").click(function () {
                if (model.allowMultiSorting)  proxy._multiSortRequest = true;
                if (model.isFromGantt)
                    proxy.sortColumn(column.mappingName ? column.mappingName : column.field, ej.sortOrder.Ascending);
                else
                    proxy.sortColumn(column.field, ej.sortOrder.Ascending);
                proxy._multiSortRequest = false;
            });
            $("#" + proxy._id + "_SortDescendingChooser").click(function () {
                if(model.allowMultiSorting) proxy._multiSortRequest = true;
                if (model.isFromGantt)
                    proxy.sortColumn(column.mappingName ? column.mappingName : column.field, ej.sortOrder.Descending);
                else
                    proxy.sortColumn(column.field, ej.sortOrder.Descending);
                proxy._multiSortRequest = false;
            });
            $("#" + proxy._id + "_FreezeColumnsChooser").click(function () {
                if (!$(this).hasClass("e-disable")) {
                    if (proxy._checkboxSelection) {
                        if (model.columns[0].nonColumn && !model.columns[0].isFrozen)
                            model.columns[0]['isFrozen'] = true;                        
                    }
                    proxy.freezeColumn(column.field, true);
                }
            });
            $("#" + proxy._id + "_UnfreezeColumnsChooser").click(function () {
                if (!$(this).hasClass("e-disable")) {                    
                    if (proxy._checkboxSelection && proxy._frozenColumnsLength == 2) {
                        if (model.columns[0].nonColumn && model.columns[0].isFrozen)
                            model.columns[0]['isFrozen'] = false;                            
                    }
                    proxy.freezeColumn(column.field, false);
                }
            });
            $("#" + proxy._id + "_FreezePrecedingColumnsChooser").click(function () {
                if (!$(this).hasClass("e-disable"))
                    proxy.freezePrecedingColumns(column.field);
            });

            $("#" + proxy._id + "_ColumnLeftChooser").click(function () {
                if (!$(this).hasClass("e-disable"))
                    proxy.insertColumnChooser(column, "left");
                else
                    return false;
            });
            $("#" + proxy._id + "_ColumnRightChooser").click(function () {
                if (!$(this).hasClass("e-disable"))
                    proxy.insertColumnChooser(column, "right");
                else
                    return false;
            });

            $("#" + proxy._id + "_DeleteColumnChooser").click(function () {
                if (!$(this).hasClass("e-disable")) {
                    proxy._targetColumnIndex = model.columns.indexOf(column);
                    proxy._updateConfirmDialog.ejDialog("open");
                    proxy._clearColumnMenu();
                }
                else
                    return false;
            });

            $("#" + proxy._id + "_RenameColumnChooser").click(function () {
                proxy._targetColumnIndex = model.columns.indexOf(column);
                proxy._renderColumnRenameDialog(column);
                proxy._columnRenameDialog.ejDialog("open");
                proxy._clearColumnMenu();
            });

            var columnMenu = $("#" + proxy._id + "_ColumnMenu"),
                columnMenuItem = columnMenu.find("div.e-columnmenuitem");
            columnMenuItem.eq(0).addClass("e-columnmenuselection");
            $(columnMenuItem).mouseenter(function () {
                if (!$(this).hasClass("e-disable")) {
                    columnMenuItem.removeClass("e-columnmenuselection");
                    $(this).addClass("e-columnmenuselection");
                }
            });
        },

        _openExcelFilter: function (column, posX, posY, containerOffset, columnMenuWidth)
        {
            //Calcualte x and y position for display the excel filter
            var proxy = this,
                model = proxy.model,
                windowWidth = $(document).width(), position,
                           colType = column.filterEditType ? column.filterEditType : column.editType,
                           positionX = posX;
            colType = colType.toLowerCase();
            if ((containerOffset.right < positionX + 266) || (windowWidth < positionX + 266)) {
                if ((positionX - columnMenuWidth - 266) > 0)
                    positionX = positionX - columnMenuWidth - 266 - 2;
            }
            else
                positionX = positionX + 2;
            position = {
                X: positionX,
                Y: posY + $("#" + proxy._id + "_FilterChooser").position().top
            };
            switch (colType) {
                case "numericedit":
                    colType = "number";
                    break
                case "stringedit":
                case "maskedit":
                case "dropdownedit":
                    colType = "string";
                    break;
                case "booleanedit":
                    colType = "boolean";
                    break;
                case "datepicker":
                case "datetimepicker":
                    colType = colType.replace("picker", "");
                    break

            }
            if (windowWidth <= proxy._responsiveMinWidth && model.isResponsive && model.enableResize) {
                proxy._renderResponsiveExcelFilter(column, colType);
                proxy._mediaStatus = true;
                proxy._clearColumnMenu();
            }
            else {

                // proxy._clearFilterMenu();
                if ($.inArray(colType, proxy._excelColTypes) == -1) {
                    $("#" + proxy._id + colType + "_excelDlg").remove();
                    $("#" + proxy._id + colType + "_CustomFDlg_wrapper").remove();
                    $("#" + proxy._id + colType + "_CustomFDlg").remove();
                    proxy._excelFilter._openedFltr = null;
                    proxy._excelColTypes.push(colType);
                    proxy._excelFilter.renderDialog(colType);
                }
                var localXFLabel = { True: proxy.localizedLabels.trueText, False: proxy.localizedLabels.falseText },
                    records = [];
                $.grep(proxy.model.flatRecords, function (record) {
                    if (!record.isSummaryRow)
                        records.push(record.item);
                });
                proxy._isCloseFilterMenu = true;
                proxy._excelFilter.openXFDialog({ field: column.field, enableResponsiveRow: true, displayName: column.headerText, dataSource: records, query: "", position: { X: position.X, Y: position.Y }, dimension: { height: $(window).height(), width: $(window).width() }, cssClass: "resFilter", type: colType, format: column.format, localizedStrings: localXFLabel });
                proxy._isCloseFilterMenu = false;
                $("#" + proxy._id + colType + "_CheckBoxList").css("display", "inline-block");
                proxy._customFilter = null;
            }
            $("#" + proxy._id + "ccDiv").ejDialog("close");
        },
        // Method to render adaptive column chooser

        _adaptiveColumnChooser: function () {
            var proxy = this, evntArgs = {}, controlPosition  = proxy.getOffsetRect($("#" + proxy._id)[0]),columnMenuText = proxy._columnMenuTexts;
            evntArgs.cssClass = proxy.model.cssClass,
            evntArgs.enableModal = false,
            evntArgs.enableResize = false;
            evntArgs.enableResize = false,
            evntArgs.contentSelector = "#" + proxy._id,
            evntArgs.rtl = proxy.model.rtl,
            evntArgs.allowDraggable = false;
            evntArgs.showHeader = true;
            evntArgs.minHeight = "50px";
            evntArgs.minWidth = "50px";
                evntArgs.width = $("#" + proxy._id).width() + "px";
                evntArgs.height = $("#" + proxy._id).height() + "px";
                evntArgs.position = { X: controlPosition .left + "px", Y: controlPosition .top + "px" };
                evntArgs.isResponsive = false;
            evntArgs.allowKeyboardNavigation = false;
            evntArgs.title = columnMenuText["columnsText"];
            $("#" + proxy._id + "ccDiv_wrapper").removeClass("e-treegridadaptivedialog");
            $("#" + proxy._id + "ccDiv_wrapper").addClass("e-dialog").addClass("e-shadow").find("div.e-dialog-scroller").css("height", "100%");
            $("#" + proxy._id + "ccDiv_wrapper").find("div.e-dialog-scroller").addClass("e-treegridadaptivedialog");
            $("#" + proxy._id + "ccDiv").ejDialog(evntArgs);
            $("#" + proxy._id + "ccDiv").ejDialog("open");

            $("#" + proxy._id + "ccDiv").css({ 'width': '100%', 'height': '100%' });
            if (proxy.model.isResponsive) {
                var dialogInnerDivHeight = ($("#" + proxy._id).height() - 50) + "px"; // (48px - Dialog box header height) + (2px - excess border of parent div).
                $("#" + proxy._id + "ccDiv_wrapper").css({ 'width': $("#" + proxy._id).width(), 'height': $("#" + proxy._id).height() });
                $("#" + proxy._id + "ccDiv_wrapper").find("div.e-dialog-scroller").removeClass("e-treegridadaptivedialog");
                $("#" + proxy._id + "ccDiv").css({ 'width': '100%', 'height': 'auto' });
                if ($("#" + proxy._id + "ccDiv").height() > $("#" + proxy._id + "ccDiv_wrapper").height() - 48) { // 48px - Dialog box header height
                    $("#" + proxy._id + "ccDiv_wrapper").find("div.e-dialog-scroller").css({ 'height': ($("#" + proxy._id).height() - 48) + "px", 'width': 'auto', 'padding': '0px' }); // 48px - Dialog box header height
                    $("#" + proxy._id + "ccDiv").removeClass("e-columnSelector");
                    $("#" + proxy._id + "ccDiv").ejDialog("refresh");
                } else {
                    $("#" + proxy._id + "ccDiv_wrapper").find("div.e-dialog-scroller").css({ 'height': dialogInnerDivHeight, 'width': 'auto' });
                    $("#" + proxy._id + "ccDiv").css({ 'padding': '8px 16px' });
                }
                $("#" + proxy._id + "ccDiv_wrapper").removeClass("e-shadow");
                $("#" + proxy._id + "ccDiv").removeClass("e-shadow");
            }

            proxy._renderedSubMenuType = "AdaptiveColChooser";
            $("#" + proxy._id + "_ColumnMenu").remove();

        },

        //update previous filtered value for current rendering dialog box depends on its filter edit type
        _updatePreviousFilteredValue: function (column) {
            var proxy = this, suggesionBox, dropDown, dataManager, query, result, fieldIndex, groups = [], field1, filtertype, emptydrop;
            if (column.filterEditType)
                filtertype = column.filterEditType;
            else
                filtertype = column.editType;
            if (filtertype == "stringedit") {
                suggesionBox = $("#" + proxy._id + "filterStringInputBox").data("ejAutocomplete");
                dropDown = $("#" + proxy._id + "filterStringMenuDiv").find("#" + proxy._id + "filterStringDropDown").data("ejDropDownList");
                query = ej.Query().select(column.field);
                dataManager = new ej.DataManager(proxy.model.flatRecords.slice());
                result = dataManager.executeLocal(query);
                suggesionBox.option("dataSource", result);
                if (proxy._filteredColumnValueID.indexOf(column.field) != -1) {
                    fieldIndex = proxy._filteredColumnValueID.indexOf(column.field);
                    if (proxy._filteredColumnValue[fieldIndex].value == "")
                        dropDown.option("value", "startswith");
                    else
                        dropDown.option("value", proxy._filteredColumnValue[fieldIndex].dropdown);
                    suggesionBox.option("value", proxy._filteredColumnValue[fieldIndex].value);
                    $("#" + proxy._id + "filterStringInputBox").val(proxy._filteredColumnValue[fieldIndex].value);
                } else {
                    dropDown.option("value", "startswith");
                    suggesionBox.option("value", null);
                }
            }
            if (filtertype == "numericedit") {
                suggesionBox = $("#" + proxy._id + "filterNumericInputBox").data("ejNumericTextbox");
                dropDown = $("#" + proxy._id + "filterNumericMenuDiv").find("#" + proxy._id + "filterNumericDropDown").data("ejDropDownList");
                if (proxy._filteredColumnValueID.indexOf(column.field) != -1) {
                    fieldIndex = proxy._filteredColumnValueID.indexOf(column.field);
                    if (proxy._filteredColumnValue[fieldIndex].value == "")
                        dropDown.option("value", "lessthan");
                    else
                        dropDown.option("value", proxy._filteredColumnValue[fieldIndex].dropdown);
                    suggesionBox.option("value", proxy._filteredColumnValue[fieldIndex].value);
                    $("#" + proxy._id + "filterNumericInputBox").val(proxy._filteredColumnValue[fieldIndex].value);
                } else {
                    suggesionBox.option("value", null);
                    dropDown.option("value", "lessthan");
                }
            }
            if (filtertype == "datepicker") {
                suggesionBox = $("#" + proxy._id + "filterDatepickerInputBox").data("ejDatePicker");
                dropDown = $("#" + proxy._id + "filterDatepickerMenuDiv").find("#" + proxy._id + "filterDatepickerDropDown").data("ejDropDownList");
                if (proxy._filteredColumnValueID.indexOf(column.field) != -1) {
                    fieldIndex = proxy._filteredColumnValueID.indexOf(column.field);
                    if (proxy._filteredColumnValue[fieldIndex].value == "")
                        dropDown.option("value", "lessthan");
                    else
                        dropDown.option("value", proxy._filteredColumnValue[fieldIndex].dropdown);
                    suggesionBox.option("value", proxy._filteredColumnValue[fieldIndex].value);
                } else {
                    suggesionBox.option("value", null);
                    dropDown.option("value", "lessthan");
                }
                if (column.format) {
                    suggesionBox.option("dateFormat", proxy._getDateFormat(column.format));
                }
            }
            if (filtertype == "datetimepicker") {
                suggesionBox = $("#" + proxy._id + "filterDatetimepickerInputBox").data("ejDateTimePicker");
                dropDown = $("#" + proxy._id + "filterDatetimepickerMenuDiv").find("#" + proxy._id + "filterDatetimepickerDropDown").data("ejDropDownList");
                if (proxy._filteredColumnValueID.indexOf(column.field) != -1) {
                    fieldIndex = proxy._filteredColumnValueID.indexOf(column.field);
                    if (proxy._filteredColumnValue[fieldIndex].value == "")
                        dropDown.option("value", "lessthan");
                    else
                        dropDown.option("value", proxy._filteredColumnValue[fieldIndex].dropdown);
                    suggesionBox.option("value", proxy._filteredColumnValue[fieldIndex].value);
                } else {
                    suggesionBox.option("value", null);
                    dropDown.option("value", "lessthan");
                }
                if (column.format) {
                    suggesionBox.option("dateFormat", proxy._getDateFormat(column.format));
                }
            }
            if (filtertype == "dropdownedit") {
                $.extend(groups, column.dropdownData);
                if (column.editParams) {
                    field1 = { value: column.editParams.fields.value, text: column.editParams.fields.text };
                        emptydrop = {};
                        emptydrop[column.editParams.fields.text] = proxy._dropDownListBlanksText;
                        emptydrop[column.editParams.fields.value] = "(Blanks)";
                } else {
                    field1 = { value: "value", text: "text" };
                    emptydrop = { text: proxy._dropDownListBlanksText, value: "(Blanks)" };
                }
                dropDown = $("#" + proxy._id + "filterDropdownDropDown").data("ejDropDownList");
                if (!ej.isNullOrUndefined(groups) && groups.length != 0) {

                    if (column.allowFilteringBlankContent || ej.isNullOrUndefined(column.allowFilteringBlankContent))
                        groups.unshift(emptydrop);

                    dropDown.option("dataSource", groups);
                }
                else {
                    groups = proxy._dropDownArrayCollection(column, column.field);
                    if (column.allowFilteringBlankContent || ej.isNullOrUndefined(column.allowFilteringBlankContent))
                        groups.unshift(emptydrop);
                    dropDown.option("dataSource", groups);
                }
                dropDown.option("fields", field1);

                if (proxy._filteredColumnValueID.indexOf(column.field) != -1) {
                    fieldIndex = proxy._filteredColumnValueID.indexOf(column.field);
                    dropDown.option("value", proxy._filteredColumnValue[fieldIndex].value);

                } else {
                        dropDown.option("value", null);
                }
            }
            if (filtertype == "booleanedit") {
                var suggesionBox = $("#" + proxy._id + "filterBooleanInputBox").data("ejCheckBox");
                if (proxy._filteredColumnValueID.indexOf(column.field) != -1) {
                    fieldIndex = proxy._filteredColumnValueID.indexOf(column.field);
                    if (proxy._filteredColumnValue[fieldIndex].value == "") {
                        suggesionBox.option("checkState", "uncheck");
                    }
                    else
                        suggesionBox.option("value", proxy._filteredColumnValue[fieldIndex].value);
                } else {
                    suggesionBox.option("selectedIndex", "");
                }
            }
        },

        //perform filter operation
        _performMenuFilter: function (column, suggesionBoxValue, dropDownValue) {
            var proxy = this, filteredColumnIdIndex, filtertype;
            proxy.clearAllSelection();
            if (column.filterEditType)
                filtertype = column.filterEditType;
            else
                filtertype = column.editType;
            if (ej.isNullOrUndefined(suggesionBoxValue)) {
                suggesionBoxValue = "";
            }
            proxy._filterString = suggesionBoxValue;
            if (proxy._filteredColumnValueID.indexOf(column.field) == -1 && suggesionBoxValue.toString() == "") {
                proxy.clearColumnMenu();
                proxy._clearFilterMenu();
            } else {
                if (filtertype == "numericedit" || filtertype == "datepicker" || filtertype == "datetimepicker") {
                    if ((filtertype == "datepicker" || filtertype == "datetimepicker") && (dropDownValue == "equal" || dropDownValue == "notequal"))
                        proxy.filterColumn(column.field, dropDownValue, suggesionBoxValue, "and");
                    else
                        proxy.filterColumn(column.field, dropDownValue, suggesionBoxValue, "and", true);
                }
                else {
                    proxy.filterColumn(column.field, dropDownValue, suggesionBoxValue, "and");
                }
            proxy.clearColumnMenu();
            proxy._clearFilterMenu();
            proxy._cancelSaveTools();
        }

        },

        // Resore the previous filtered values.
        _storePreviousFilteredValue: function (field, suggesionBoxValue, dropDownValue) {
            var proxy = this, filteredColumnIdIndex;
            if (proxy._filteredColumnValueID.indexOf(field) == -1 && (suggesionBoxValue.toString() != "" || suggesionBoxValue.toString() == "false")) {
                proxy._filteredColumnValue.push({ column: field, value: suggesionBoxValue, dropdown: dropDownValue });
                proxy._filteredColumnValueID.push(field);
            } else {
                if (suggesionBoxValue.toString() != "" || suggesionBoxValue.toString() == "false") {
                    filteredColumnIdIndex = proxy._filteredColumnValueID.indexOf(field);
                    proxy._filteredColumnValue[filteredColumnIdIndex].value = suggesionBoxValue;
                    proxy._filteredColumnValue[filteredColumnIdIndex].dropdown = dropDownValue;
                } else {
                    if (proxy._filteredColumnValueID.indexOf(field) != -1) {
                        filteredColumnIdIndex = proxy._filteredColumnValueID.indexOf(field);
                        proxy._filteredColumnValue.splice(filteredColumnIdIndex, 1);
                        proxy._filteredColumnValueID.splice(filteredColumnIdIndex, 1);
                    }
                }
            }
        },

        //render filter menu dialog in a respective position
        _showFilterMenu: function (from, idValue, columnFilterPosX, columnMenuWidth, containerRightOffset, posX, columnChooserListIndex, filtermenuindex, column, posY) {
            if (!this.editFormValidate()) return;
            if (($(window).width() <= this._responsiveMinWidth && this.model.isResponsive) && !this.model.isFromGantt) {
                var proxy = this,
                evntArgs = {},
                controlPosition  = proxy.getOffsetRect($("#" + proxy._id)[0]);
                evntArgs.cssClass = this.model.cssClass;
                evntArgs.enableModal = false;
                evntArgs.isResponsive = false;
                evntArgs.enableRTL = this.model.enableRTL;
                evntArgs.enableResize = false;
                evntArgs.allowDraggable = false;
                evntArgs.minWidth = "50px";
                evntArgs.minHeight = "50px";
                evntArgs.width = $("#" + proxy._id).width() + "px";
                evntArgs.height = $("#" + proxy._id).height() + "px";
                evntArgs.position = { X: controlPosition .left + "px", Y: controlPosition .top + "px" };
                evntArgs.contentSelector = "#" + proxy._id;
                evntArgs.rtl = proxy.model.rtl;
                evntArgs.allowKeyboardNavigation = false;
                evntArgs.showHeader = true;
                evntArgs.title = column.headerText;
                $("#" + proxy._id + idValue + "MenuDiv").removeClass("e-treegridadaptivedialog");
                $("#" + proxy._id + idValue + "MenuDiv").ejDialog(evntArgs);
                $("#" + proxy._id + idValue + "MenuDiv_wrapper").addClass("e-dialog").addClass("e-shadow").find("div.e-dialog-scroller").addClass("e-treegridadaptivewidth");
                $("#" + proxy._id + idValue + "MenuDiv").css({ 'width': '100%','height':'auto' });
                var dialogInnerDivHeight = $("#" + proxy._id).height() - 50 + "px"; // (48px - Dialog box header height) + (2px - excess border of parent div).
                $("#" + proxy._id + idValue + "MenuDiv").ejDialog('open');
                    $("#" + proxy._id + idValue + "MenuDiv_wrapper").find("div.e-dialog-scroller").css({ 'height': dialogInnerDivHeight });
                    $("#" + proxy._id + idValue + "MenuDiv_wrapper").removeClass("e-shadow");
                    $("#" + proxy._id + idValue + "MenuDiv").removeClass("e-shadow");

                    if ($("#" + proxy._id + idValue + "MenuDiv").height() > $("#" + proxy._id + idValue + "MenuDiv_wrapper").height() - 48) { // 48px - Dialog box header height
                        $("#" + proxy._id + idValue + "MenuDiv").ejDialog("refresh");
                    }
                proxy._renderedSubMenuType = "#" + proxy._id + idValue + "MenuDiv";
                $("#" + proxy._id + "_ColumnMenu").remove();
            } else {
                var proxy = this;
                var evntArgs = {};
                evntArgs.width = "auto",
                evntArgs.height = "auto",
                evntArgs.minWidth = "0px",
                evntArgs.minHeight = "0px",
                evntArgs.showHeader = false,
                evntArgs.position = { X: 1, Y: 1 },
                evntArgs.enableModal = false,
                evntArgs.isResponsive = false,
                evntArgs.enableResize = false,
                evntArgs.cssClass = this.model.cssClass;
                $("#" + proxy._id + idValue + "MenuDiv_wrapper").removeClass("e-dialog").removeClass("e-shadow").find("div.e-dialog-scroller").css("height", "100%").removeClass("e-widget-content");
                $("#" + proxy._id + idValue + "MenuDiv").ejDialog(evntArgs);
                var filterMenuDiv, filterMenuDivWrapper, filterMenuPosition;
                filterMenuDiv = $("#" + proxy._id + idValue + "MenuDiv").ejDialog("instance");
                filterMenuDivWrapper = $("#" + proxy._id + idValue + "MenuDiv_wrapper");
                if (from == "columnchooser") {
                    var windowWidth = $(document).width();
                    if ((containerRightOffset < columnFilterPosX + filterMenuDivWrapper.width()) || (windowWidth < columnFilterPosX + filterMenuDivWrapper.width())) {
                        if ((columnFilterPosX - columnMenuWidth - filterMenuDivWrapper.width()) > 0)
                            columnFilterPosX = columnFilterPosX - columnMenuWidth - filterMenuDivWrapper.width();
                    }
                    filterMenuPosition = {
                        X: columnFilterPosX,
                        Y: posY + $("#" + proxy._id + "_FilterChooser").position().top
                    };
                    filterMenuDiv.option({ "position": filterMenuPosition });
                    filterMenuDiv.open();
                } else if (from = "filtermenu") {
                    var position = columnFilterPosX,
                    targetWidth = columnMenuWidth;
                    posX = position.left + targetWidth - filterMenuDivWrapper.width();
                    position.left = posX + filterMenuDivWrapper.width() + 4;
                    if (containerRightOffset < position.left + filterMenuDivWrapper.width()) {
                        position.left = position.left - filterMenuDivWrapper.width() - targetWidth;
                    }
                    filterMenuPosition = {
                        X: position.left,
                        Y: position.top
                    };
                    filterMenuDiv.option({ "position": filterMenuPosition });
                    filterMenuDiv.open();
                }
                proxy._renderedSubMenuType = "#" + proxy._id + idValue + "MenuDivDesktop";
            }
        },

        _clearResponsiveColumnMenu:function(){
            var proxy = this;
            $("div[id$='ccDiv']").each(function () {
                if ($(this).data("columnMenuDialog") == "TreeGrid")
                    $(this).data("ejDialog") && $(this).ejDialog("close");
            });
            $("#" + proxy._id + "ccDiv_wrapper").find("div.e-dialog-scroller").css({ 'padding': '0px' });
            $("#" + proxy._id + "ccDiv").addClass("e-columnSelector");
            $("div[id$='filterStringMenuDiv']").each(function () {
                if ($(this).data("filterStringMenuDialog") == "TreeGrid")
                    $(this).data("ejDialog") && $(this).ejDialog("close");
            });
            $("div[id$='filterNumericMenuDiv']").each(function () {
                if ($(this).data("filterNumericMenuDialog") == "TreeGrid")
                    $(this).data("ejDialog") && $(this).ejDialog("close");
            });
            $("div[id$='filterBooleanMenuDiv']").each(function () {
                if ($(this).data("filterBooleanMenuDialog") == "TreeGrid")
                    $(this).data("ejDialog") && $(this).ejDialog("close");
            });
            $("div[id$='filterDatepickerMenuDiv']").each(function () {
                if ($(this).data("filterDatepickerMenuDialog") == "TreeGrid")
                    $(this).data("ejDialog") && $(this).ejDialog("close");
            });
            $("div[id$='filterDatetimepickerMenuDiv']").each(function () {
                if ($(this).data("filterDatetimepickerMenuDialog") == "TreeGrid")
                    $(this).data("ejDialog") && $(this).ejDialog("close");
            });
            $("div[id$='filterDropdownMenuDiv']").each(function () {
                if ($(this).data("filterDropdownMenuDialog") == "TreeGrid")
                    $(this).data("ejDialog") && $(this).ejDialog("close");
            });
            $("div[id$='ColumnRenameDialog']").each(function () {
                $(this).data("ejDialog") && $(this).ejDialog("close");
            });
            $("div[id$='dialogColumnAdd']").each(function () {
                $(this).data("ejDialog") && $(this).ejDialog("close");
            });

            $("#" + proxy._id).find(".e-filtericon").data("isClicked", false);
        },

        //Clear the column menu and menu list

        _clearColumnMenu:function(args)
        {
            var proxy = this,
                model = proxy.model;
            if (args === "columnmenu" && $(window).width() < proxy._responsiveMinWidth) {
                proxy._clearResponsiveColumnMenu();
            }
            if (model.isResponsive && $(window).width() < proxy._responsiveMinWidth) {
                $("#" + proxy._id + "_ColumnMenu").remove();
                if (proxy._renderedSubMenuType && proxy._renderedSubMenuType.indexOf("AdaptiveColChooser") == -1) {
                    $("div[id$='" + proxy._id + "ccDiv']").each(function () {
                        if ($(this).data("columnMenuDialog") == "TreeGrid")
                            $(this).data("ejDialog") && $(this).ejDialog("close");
                    });
                    $("#" + proxy._id + "ccDiv_wrapper").find("div.e-dialog-scroller").css({'padding': '0px' });
                    $("#" + proxy._id + "ccDiv").addClass("e-columnSelector");
                }
            }
        else{
            $("#" + proxy._id + "_ColumnMenu").remove();
            if (args != "resize") {
                $("div[id$='" + proxy._id + "ccDiv']").each(function () {
                    if ($(this).data("columnMenuDialog") == "TreeGrid")
                        $(this).data("ejDialog") && $(this).ejDialog("close");
                });
                $("#" + proxy._id + "ccDiv_wrapper").find("div.e-dialog-scroller").css({ 'padding': '0px' });
                $("#" + proxy._id + "ccDiv").addClass("e-columnSelector");
                if (args != "resize" && args!="cancelHandler") {
                    if (model.allowFiltering && (model.filterSettings.filterType == "menu" || model.filterSettings.filterType == "excel")) {
                        proxy._clearFilterMenu();
                    }
                }
            }
    }

            $("#" + proxy._id).find(".e-columnicon").data("isClicked", false);
            $("#" + proxy._id).find(".e-filtericon").data("isClicked", false);
        },

        // clear the filter menu dialog and its inner components
        _clearFilterMenu: function () {
            var proxy = this;
            if (proxy.model.allowFiltering) {
                $("div[id$='" + proxy._id + "filterStringMenuDiv']").each(function () {
                    if ($(this).data("filterStringMenuDialog") == "TreeGrid")
                        $(this).data("ejDialog") && $(this).ejDialog("close");
                });
                $("div[id$='" + proxy._id + "filterNumericMenuDiv']").each(function () {
                    if ($(this).data("filterNumericMenuDialog") == "TreeGrid")
                        $(this).data("ejDialog") && $(this).ejDialog("close");
                });
                $("div[id$='" + proxy._id + "filterBooleanMenuDiv']").each(function () {
                    if ($(this).data("filterBooleanMenuDialog") == "TreeGrid")
                        $(this).data("ejDialog") && $(this).ejDialog("close");
                });
                $("div[id$='" + proxy._id + "filterDatepickerMenuDiv']").each(function () {
                    if ($(this).data("filterDatepickerMenuDialog") == "TreeGrid")
                        $(this).data("ejDialog") && $(this).ejDialog("close");
                });
                $("div[id$='" + proxy._id + "filterDatetimepickerMenuDiv']").each(function () {
                    if ($(this).data("filterDatetimepickerMenuDialog") == "TreeGrid")
                        $(this).data("ejDialog") && $(this).ejDialog("close");
                });
                $("div[id$='" + proxy._id + "filterDropdownMenuDiv']").each(function () {
                    if ($(this).data("filterDropdownMenuDialog") == "TreeGrid")
                        $(this).data("ejDialog") && $(this).ejDialog("close");
                });
                $("#" + proxy._id + "filterStringDropDown_popup_list_wrapper").hide();
                $("#" + proxy._id + "filterStringInputBox_suggestion").hide();
                $("#" + proxy._id + "filterNumericDropDown_popup_list_wrapper").hide();
                $("#" + proxy._id + "filterNumericInputBox_suggestion").hide();
                $("#" + proxy._id + "filterDatepickerDropDown_popup_list_wrapper").hide();
                $("#" + proxy._id + "filterDatepickerInputBox_suggestion").hide();
                $("#" + proxy._id + "filterDatetimepickerDropDown_popup_list_wrapper").hide();
                $("#" + proxy._id + "filterDatetimepickerInputBox_suggestion").hide();
                $("#" + proxy._id + "filterDropdownDropDown_popup_list_wrapper").hide();
                $("#" + proxy._id).find(".e-filtericon").data("isClicked", false);
                var datetimepicobj = $("#" + proxy._id + "filterDatetimepickerInputBox").data("ejDateTimePicker");
                if (datetimepicobj)
                    datetimepicobj.hide();
                var datepicobj = $("#" + proxy._id + "filterDatepickerInputBox").data("ejDatePicker");
                if (datepicobj)
                    datepicobj.hide();
                if (proxy._isExcelFilter) {
                    proxy._excelFilter.closeXFDialog();
                    proxy._mediaStatus = false;
                }
            }
        },

        _getDateFormat: function (format) {
            var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm"),
                formatVal = toformat.exec(format),
                dateFormat = formatVal[2];
            return dateFormat;
        },

        //Enabling or disabling delete button of columnchooser
        _enableDisableDEL: function (colItem) {
            var proxy = this, model = proxy.model,
                fieldName = colItem.field,
                columnIndex = model.columns.indexOf(colItem);
            if (model.isFromGantt) {
                if (fieldName == "taskId" || fieldName == "serialNumber" || fieldName == "taskName" || fieldName == "startDate" || fieldName == "endDate" || (fieldName == "duration" && !model.endDateMapping) || columnIndex == model.treeColumnIndex)
                    return false;
                else
                    return true;
            }
            else {
                if (columnIndex == model.treeColumnIndex)
                    return false;
                else
                    return true;
            }
        },

        //Enabling or disabling Insert column label columnchooser
        _enableDisableInsertLabel: function () {
            var proxy = this, model = proxy.model;
            //Block column add operation while frozen columns Width is near to grid width
            if (!model.isFromGantt && proxy._frozenColumnsLength > 0) {
                var frozenWidth = this._getFrozenColumnWidth();
                frozenWidth = frozenWidth + 250;
                if (frozenWidth > this._gridWidth)
                    return false;
                else
                    return true;
            }
            else
                return true;
        },

        //Insert column through column chooser
        insertColumnChooser: function (column, position) {
            var proxy = this, model = proxy.model;
            if ($("#" + proxy._id + "_dialogColumnAdd").length === 0) {
                var $dialogCol = ej.buildTag("div.e-dialog e-dialog-content e-widget-content", "", { display: "none" }, { id: proxy._id + "_dialogColumnAdd" });
                proxy.element.append($dialogCol);
                proxy._on($("#" + proxy._id + "_dialogColumnAdd"),
               "click keypress", "#ColumnAddDialog_" + proxy._id + "_Ok ,#ColumnAddDialog_" + proxy._id + "_Cancel", proxy._buttonClick);
            }
            proxy.renderColumnAddDialog();
            proxy._targetColumnIndex = model.columns.indexOf(column);
            proxy._insertPosition = position;
        },

        // To change the headerText of column
        renameColumn: function (colIndex, name) {
            var proxy = this, model = proxy.model,
                columns = model.columns, args = {};
            args.requestType = "renameColumn";
            args.columnObject = columns[colIndex];
            args.previousName = columns[colIndex].headerText;
            args.currentName = name;          
            if (!proxy._trigger("actionComplete", args)) {
                columns[colIndex].headerText = name;
                proxy._refreshFrozenColumns();
            }
            proxy._updateWrapRowHeights();
            if (model.allowTextWrap || model.headerTextOverflow == "wrap")
                proxy._updateGridContentHeight();
        },

        //Method to render dialog box for renaming column
        _renderColumnRenameDialog: function (columnItem) {
            var proxy = this, columnMenuText = proxy._columnMenuTexts,
                $contentDiv = ej.buildTag('div.e-treegridrenamedialog', "", {}, { 'data-unselectable': 'on' }), controlWidth = $("#" + proxy._id).width(), controlHeight = $("#" + proxy._id).height(),
                $form = ej.buildTag('form', "", { 'height': '100%', 'width': '100%', 'font-size': '14px' }, { id: proxy._id + "ColumnRenameForm", onsubmit: "return false" }),
            $buttons = ej.buildTag('span.e-buttons', "<input class='e-treegrid-rename-dialog-btn-ok' type='button' id=" + proxy._id + 'RenameDialogOK' + " value=" + proxy._okButtonText + " /> "
            + "<input class='e-treegrid-rename-dialog-btn-cancel' type='button' id=" + proxy._id + 'RenameDialogCancel' + " value='" + proxy._cancelButtonText + "' />"),
            btnDiv = ej.buildTag('div', "", {}, { 'class': "e-treegrid-rename-dialog-btn" }),

            $innerTable = ej.buildTag('table', "", { 'outline': 'none', 'width': '100%', 'margin-top': '0px' }, { 'data-unselectable': "on" }),

            $inTr1 = ej.buildTag('tr'),

            $inTd = ej.buildTag('td.e-editLabel', "", { "outline": "none" }, { 'data-unselectable': "on" });
            $inTd.append("<label style='font-weight:normal;'>" + proxy._columnDialogTitle["renameColumn"] + "</label>");

            $inTr1.append($inTd);

            $innerTable.append($inTr1);

            var $inTr2 = ej.buildTag('tr'),
            $inTd2 = ej.buildTag('td.e-editValue'),

            $input = ej.buildTag('input.e-field e-ejinputtext',
                                            "",
                                            {},
                                            {
                                                value: columnItem.headerText,
                                                id: proxy._id + "RenameHeaderText",
                                                name: columnItem.field,
                                                "data-dialog": "RenameHeaderText"
                                            });
            $input.css({ 'margin': '0px', 'padding': '1px 4px 1px 0px' });
            $inTd2.html($input);
            $inTr2.append($inTd2);
            $innerTable.append($inTr2);
            $form.append($innerTable);
            $contentDiv.append($form);

            proxy._columnRenameDialog = ej.buildTag('div', '', '', { 'title': columnMenuText["renameColumn"], 'id': proxy._id + 'ColumnRenameDialog' });
            btnDiv.append($buttons);
            proxy._columnRenameDialog.append($contentDiv).append(btnDiv);
            proxy.element.append(proxy._columnRenameDialog);
            $buttons.find("input").ejButton({
                cssClass: proxy.model.cssClass,
                showRoundedCorner: true,
                size: "normal",
                click: $.proxy(proxy._triggerRenameColumn, proxy)
            });
            if (($(window).width() <= proxy._responsiveMinWidth && proxy.model.isResponsive) && !proxy.model.isFromGantt) {
                if (proxy.model.isResponsive) {
                    var controlPosition = proxy.getOffsetRect($("#" + proxy._id)[0]);
                    $("#" + proxy._id + "ColumnRenameDialog").removeClass("e-treegridadaptivedialog");
                    proxy._columnRenameDialog.ejDialog({ width: controlWidth + "px", height: controlHeight + "px", position: { X: controlPosition.left + "px", Y: controlPosition.top + "px" }, minHeight: "50px", minWidth: "50px", showOnInit: false, allowDraggable: false, enableResize: false, enableModal: false, isResponsive: false, cssClass: this.model.cssClass });
                    $("#" + proxy._id + "ColumnRenameDialog_wrapper").removeClass("e-shadow").addClass("e-treegrid-dialog");
                    $("#" + proxy._id + "ColumnRenameDialog").removeClass("e-shadow");
                }
            } else {
                proxy._columnRenameDialog.ejDialog({ width: "auto", height: "auto", minHeight: 0, minWidth: 240, showOnInit: false, enableResize: false, allowDraggable: true, enableModal: true, isResponsive: true, cssClass: this.model.cssClass });
                $("#" + proxy._id + "ColumnRenameDialog_wrapper").addClass("e-treegrid-dialog");
            }
            $input.focus().select();
        },

        _triggerRenameColumn: function (args) {
            var proxy = this, $elem, text;
            if (args !== undefined && args.model.text == proxy._okButtonText) {
                $elem = proxy._columnRenameDialog.find("#" + proxy._id + "RenameHeaderText");
                text = $elem.val();
                proxy.renameColumn(proxy._targetColumnIndex, text);
                if (this.model.editSettings.allowEditing && this.model.editSettings.editMode == "dialogEditing" && (ej.isNullOrUndefined(proxy.model.editSettings.dialogEditorTemplateID) || proxy.model.editSettings.dialogEditorTemplateID == "")) {
                    proxy._treeGridAddEditDialog();
                } else if (this.model.editSettings.allowEditing && this.model.editSettings.editMode == "dialogEditing" && (!ej.isNullOrUndefined(proxy.model.editSettings.dialogEditorTemplateID) && proxy.model.editSettings.dialogEditorTemplateID != "")) {
                    proxy._treeGridAddEditDialogTemplate();
                }
            }
            proxy._columnRenameDialog.ejDialog("close");
        },

        //To render dialog for adding custom column
        renderColumnAddDialog: function () {

            var proxy = this, model = proxy.model, colDialogFields = model.columnDialogFields,
                args = {}, controlPosition  = proxy.getOffsetRect($("#" + proxy._id)[0]);;

            args.requestType = "openColumnAddDialog";
            if (colDialogFields.length) {
                args.data = {};
                for (var i = 0; i < colDialogFields.length; i++) {
                    var val = colDialogFields[i];
                    args.data[val] = "";
                }
            }
            else args.data = { "field": "", "headerText": "", "editType": "" };

            if (!proxy._trigger("actionBegin", args)) {
                args.requestType = "columnAdd";
                var temp = document.createElement('div');
                $(temp).addClass("e-addedColumn");
                temp.innerHTML = $.render[proxy._id + "_ColumnAddTemplate"](args.data);
                $("#" + proxy._id + "_dialogColumnAdd").html($(temp));
                var evntArgs = {};
                evntArgs.cssClass = this.model.cssClass,
                evntArgs.enableResize = false,
                evntArgs.width = "auto",
                evntArgs.height = "auto",
                evntArgs.contentSelector = "#" + proxy._id,
                evntArgs.rtl = proxy.model.rtl,
                evntArgs.allowKeyboardNavigation = false;
                var title = proxy._columnDialogTitle["insertColumn"];
                evntArgs.title = title;
                if (($(window).width() > proxy._responsiveMinWidth || !proxy.model.isResponsive) || proxy.model.isFromGantt) {
                    evntArgs.enableModal = true,
                    evntArgs.allowDraggable = true,
                    evntArgs.isResponsive = true;
                    $("#" + proxy._id + "_dialogColumnAdd").ejDialog(evntArgs);
                    $("#" + proxy._id + "_dialogColumnAdd").addClass("e-treegridadaptivedialog");
                    $("#" + proxy._id + "_dialogColumnAdd_wrapper").addClass("e-treegridadaptivedialog e-treegrid-dialog");
                    $("#" + proxy._id + "_dialogColumnAdd_wrapper").find("div.e-dialog-scroller").addClass("e-treegridadaptivedialog");
                    $("#" + proxy._id + "_dialogColumnAdd").ejDialog("open");
                    $("#" + proxy._id + "_dialogColumnAdd").find(".e-dropdowntreegrid").css('width', '438px'); // fixed width of dialog dropdown treegrid div.
                }
                if (($(window).width() <= proxy._responsiveMinWidth && proxy.model.isResponsive) && !proxy.model.isFromGantt) {

                    evntArgs.isResponsive = false;
                    evntArgs.enableResize = false;
                    evntArgs.enableModal = false,
                    evntArgs.allowDraggable = false;
                    evntArgs.width = $("#" + proxy._id).width() + "px";
                    evntArgs.height = $("#" + proxy._id).height() + "px";
                    evntArgs.minHeight= "150px";
                    evntArgs.minWidth = "150px";
                    $("#" + proxy._id + "_dialogColumnAdd").removeClass("e-treegridadaptivedialog");
                    $("#" + proxy._id + "_dialogColumnAdd").find(".e-dropdowntreegrid").css({ 'width': ($("#" + proxy._id).width() - 80) + 'px', 'height': '150px' }); // 80px ((28px of $("#" + proxy._id + "_dialogColumnAdd"))+(18px of Hscrollbar)+(30px of $("#" + proxy._id + "ColumnAddForm div"))) get minused in width to place the dropdown dialog treegrid div in absolute position.
                        $("#" + proxy._id + "_dialogColumnAdd").ejDialog(evntArgs);
                        $("#" + proxy._id + "_dialogColumnAdd").ejDialog("open");
                        $("#" + proxy._id + "_dialogColumnAdd_wrapper").removeClass("e-treegridadaptivedialog").addClass("e-treegrid-dialog");
   
                $("#" + proxy._id + "_dialogColumnAdd_wrapper").find("div.e-dialog-scroller").removeClass("e-treegridadaptivedialog");

                    $("#" + proxy._id + "_dialogColumnAdd_wrapper").css({ 'left': controlPosition .left + "px", 'top': controlPosition .top + "px" });
                    $("#" + proxy._id + "_dialogColumnAdd_wrapper").removeClass("e-shadow");
                    $("#" + proxy._id + "_dialogColumnAdd").removeClass("e-shadow");
                    $("#" + proxy._id + "_dialogColumnAdd_wrapper").find("div.e-dialog-scroller").css({ 'height': ($("#" + proxy._id).height() - 50) + "px" }); // (48px - Dialog box header height) + (1px - excess border of parent div).

            }
                proxy._clearColumnMenu();
                proxy._refreshColumnAddForm();
                $("#" + proxy._id + "_dialogColumnAdd").ejDialog("refresh");
            }
        },

        setAddColumnFields: function () {
            var proxy = this,
                model = proxy.model;
            if (model.columnDialogFields.length) {
                proxy._addColumnFields = model.columnDialogFields;
                var tempFields = ["field", "headerText", "editType"];
                //Ensure the above 3 default fields with "model.columnDialogFields"
                for (var i = 0; i < tempFields.length; i++) {
                    if ($.inArray(tempFields[i], proxy._addColumnFields) == -1) {
                        switch (tempFields[i]) {
                            case "field":
                                proxy._addColumnFields.splice(0, 0, tempFields[i]);
                                break;
                            case "headerText":
                                proxy._addColumnFields.splice(1, 0, tempFields[i]);
                                break;
                            case "editType":
                                proxy._addColumnFields.splice(2, 0, tempFields[i]);
                                break;
                        }
                    }
                }
                //Check the "model.columnDialogFields" with allowSorting, allowFiltering and selectionType APIs
                if (model.isFromGantt) {
                    if (!model.allowSorting && proxy._addColumnFields.indexOf("allowSorting") != -1) {
                        proxy._addColumnFields.splice(proxy._addColumnFields.indexOf("allowSorting"), 1);
                    }
                    if (model.selectionSettings.selectionMode == "row" && proxy._addColumnFields.indexOf("allowCellSelection") != -1) {
                        proxy._addColumnFields.splice(proxy._addColumnFields.indexOf("allowCellSelection"), 1);
                    }
                }
                else {
                    if (!model.allowSorting && proxy._addColumnFields.indexOf("allowSorting") != -1) {
                        proxy._addColumnFields.splice(proxy._addColumnFields.indexOf("allowSorting"), 1);
                    }
                    if (!model.allowFiltering && proxy._addColumnFields.indexOf("allowFiltering") != -1) {
                        proxy._addColumnFields.splice(proxy._addColumnFields.indexOf("allowFiltering"), 1);
                    }
                    if (model.selectionSettings.selectionMode == "row" && proxy._addColumnFields.indexOf("allowCellSelection") != -1) {
                        proxy._addColumnFields.splice(proxy._addColumnFields.indexOf("allowCellSelection"), 1);
                    }
                }
                //Move displayAsCheckbox to end o hide this field in column add dialog, if edittype choosed ad boolean then it will be shown
                if (proxy._addColumnFields.indexOf("displayAsCheckbox") != -1) {
                    proxy._addColumnFields.push(proxy._addColumnFields.splice(proxy._addColumnFields.indexOf("displayAsCheckbox"), 1)[0]);
                }

                //Assign appropriate header text to fields
                proxy._addColumnFieldsTxt = [];
                for (var i = 0; i < proxy._addColumnFields.length; i++) {
                    switch (proxy._addColumnFields[i]) {
                        case "field":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["field"]);
                            break;
                        case "headerText":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["headerText"]);
                            break;
                        case "editType":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["editType"]);
                            break;
                        case "filterEditType":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["filterEditType"]);
                            break;
                        case "allowFiltering":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["allowFiltering"]);
                            break;
                        case "allowFilteringBlankContent":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["allowFilteringBlankContent"]);
                            break;
                        case "allowSorting":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["allowSorting"]);
                            break;
                        case "visible":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["visible"]);
                            break;
                        case "width":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["width"]);
                            break;
                        case "textAlign":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["textAlign"]);
                            break;
                        case "headerTextAlign":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["headerTextAlign"]);
                            break;
                        case "isFrozen":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["isFrozen"]);
                            break;
                        case "allowFreezing":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["allowFreezing"]);
                            break;
                        case "allowCellSelection":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["allowCellSelection"]);
                            break;
                        case "showInColumnChooser":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["showInColumnChooser"]);
                            break;
                        case "clipMode":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["clipMode"]);
                            break;
                        case "tooltip":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["tooltip"]);
                            break;
                        case "headerTooltip":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["headerTooltip"]);
                            break;
                        case "displayAsCheckbox":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["displayAsCheckbox"]);
                            break;
                        case "priority":
                            proxy._addColumnFieldsTxt.push(proxy._columnDialogTexts["priority"]);
                            break;
                    }                  
                }
            }
            else {
                proxy._addColumnFields = ["field", "headerText", "editType"];
                proxy._addColumnFieldsTxt = [proxy._columnDialogTexts["field"], proxy._columnDialogTexts["headerText"], proxy._columnDialogTexts["editType"]];
            }
        },

        //Method for creating cell edit type
        setColumnCelEditType: function (columnAttr) {
            var proxy = this,
                model = proxy.model,
                columns = model.columns,
                $input;
            if (columnAttr == "field" || columnAttr == "filterEditType" || columnAttr == "editType" || columnAttr == "textAlign" || columnAttr == "headerTextAlign" || columnAttr == "clipMode") {
                $input = ej.buildTag('input.e-field e-dropdownlist',
                                         "",
                                         {},
                                         {
                                             value: "{{:#data['" + columnAttr + "']}}",
                                             id: proxy._id + columnAttr + "ColumnAdd",
                                             name: columnAttr,
                                            "data-dialog": "ColumnAdd"
                                         });
            }
            else if (columnAttr == "headerText" || columnAttr == "tooltip" || columnAttr == "headerTooltip") {
                $input = ej.buildTag('input.e-field e-ejinputtext',
                                         "",
                                         {},
                                         {
                                             value: "{{:#data['" + columnAttr + "']}}",
                                             id: proxy._id + columnAttr + "ColumnAdd",
                                             name: columnAttr,
                                            "data-dialog": "ColumnAdd"
                                         });
                $input.css({ 'margin': '0px', 'padding': '1px 4px 1px 0px' });
            }
            else if (columnAttr == "allowFiltering" || columnAttr == "allowSorting" || columnAttr == "isFrozen" || columnAttr == "allowFreezing") {
                $input = ' <input' +
                         ' type ="checkbox"' +
                         ' id="' + proxy._id + columnAttr + 'ColumnAdd"' +
                         ' data-dialog ="ColumnAdd"' +
                         ' name="' + columnAttr + '" data-edittype="booleanedit">';
            }
            else if (columnAttr == "allowFilteringBlankContent" || columnAttr == "visible") {
                $input = ' <input' +
                         ' type ="checkbox"' +
                         ' id="' + proxy._id + columnAttr + 'ColumnAdd"' +
                         ' data-dialog = "ColumnAdd"' +
                         ' checked = "checked"' +
                         ' name="' + columnAttr + '" data-edittype="booleanedit">';
            }
            else if (columnAttr == "allowCellSelection") {
                $input = ' <input' +
                         ' type ="checkbox"' +
                         ' id="' + proxy._id + columnAttr + 'ColumnAdd"' +
                         ' data-dialog = "ColumnAdd"' +
                         ' checked = "checked"' +
                         ' name="' + columnAttr + '" data-edittype="booleanedit">';
            }
            else if (columnAttr == "showInColumnChooser" || columnAttr == "displayAsCheckbox") {
                $input = ' <input' +
                         ' type ="checkbox"' +
                         ' id="' + proxy._id + columnAttr + 'ColumnAdd"' +
                         ' data-dialog = "ColumnAdd"' +
                         ' checked = "checked"' +
                         ' name="' + columnAttr + '" data-edittype="booleanedit">';
            }
            else if (columnAttr == "width" || columnAttr == "priority") {
                $input = ej.buildTag('input.e-numerictextbox e-field',
                                         "",
                                         {},
                                         {
                                             type: "text",
                                             value: "{{:#data['" + columnAttr + "']}}",
                                             id: proxy._id + columnAttr + "ColumnAdd",
                                             name: columnAttr,
                                             "data-dialog": "ColumnAdd"
                                         });
                $input.attr("data-edittype", "numericedit")
                $input.css({ 'margin': '0px', 'padding': '1px 4px 1px 0px' });
            }
            return $input;
        },

        //Template for adding custom column through dialog
        columnAddDialogTemplate: function () {

            var proxy = this,
                model = proxy.model,
                columns = model.columns,
                length = columns.length,
                $inputElem;

            if (length == 0)
                return;

            proxy.setAddColumnFields();

            var $tbody = ej.buildTag('div', "", {}, { 'data-unselectable': 'on' }),
            $form = ej.buildTag('form', "", { 'height': '100%', 'width': '100%', 'font-size': '14px' }, { id: proxy._id + "ColumnAddForm" }),
            $table = ej.buildTag('table', "", { width: "100%", "margin-top": "0px" }, { 'data-unselectable': "on" }),
            $tr = ej.buildTag('tr', "", { width: "100%" }),
            $td, $innerTable, $inTr, $inTd, $inTr2, $inTd2;
            for (var i = 0; i < proxy._addColumnFields.length; i++) {
                if ($tr.children("td").length < 2) {
                    $td = ej.buildTag('td.e-add-property-container', "", {}, { 'data-unselectable': "on" });
                    $innerTable = ej.buildTag('table', "", { "width": "100%", "outline": "none", "margin-top": "0px" }, { 'data-unselectable': "on" });

                    $inTr = ej.buildTag('tr');

                    $inTd = ej.buildTag('td.e-editLabel', "", { "outline": "none" }, { 'data-unselectable': "on" });
                    $inTd.append("<label style='font-weight:normal;'>" + proxy._addColumnFieldsTxt[i] + "</label>");

                    $inTr.append($inTd);

                    $innerTable.append($inTr);

                    $inTr2 = ej.buildTag('tr');
                    $inTd2 = ej.buildTag('td.e-editValue');

                    $inputElem = proxy.setColumnCelEditType(proxy._addColumnFields[i]);


                    $inTd2.html($inputElem);

                    $inTr2.append($inTd2);
                    $innerTable.append($inTr2);
                    if (proxy._addColumnFields[i] == "displayAsCheckbox") {
                        $innerTable.addClass("e-display-checkbox-conatiner").css("display","none");
                    }
                    $td.append($innerTable);
                    $tr.append($td);

                }
                else {
                    $table.append($tr);
                    $tr = ej.buildTag('tr');
                    i--;
                }

            }
            $table.append($tr);

          //  Table of Dropdown data for drop down edit type
            var $tr2 = ej.buildTag("tr"),
                $inTr3, $inTd3;

            if (model.showColumnChooser) {

                $td = ej.buildTag('td.e-add-property-container', "", {}, { colspan: 2, 'data-unselectable': "on" });

                $innerTable = ej.buildTag('table#' + proxy._id + 'dropdownDataTable', "", { "width": "100%", "outline": "none" }, { 'data-unselectable': "on" });

                $inTr3 = ej.buildTag('tr');
                $inTd3 = ej.buildTag('td.e-editLabel', "", { "outline": "none" }, { 'data-unselectable': "on" });
                $inTd3.append("<label for='dropdownData' style='font-weight:normal;'>" + proxy._columnDialogTexts["columnsDropdownData"] + "</label>");

                $inTr3.append($inTd3);
                $innerTable.append($inTr3);

                $inTr = ej.buildTag('tr');
                $inTd = ej.buildTag('td.e-editLabel', "", { "outline": "none" }, { 'data-unselectable': "on" });

                $inTd.append("<span class='e-addpre e-icon e-enable e-add-dialog' style='cursor:pointer; width: auto;'>" + proxy._columnDialogTexts["addData"] + "</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='e-deletepre e-icon e-disable e-add-dialog' style='cursor:pointer; width: auto;'>&nbsp;&nbsp;" + proxy._columnDialogTexts["deleteData"] + "</span>");

                $inTr.append($inTd);
                $innerTable.append($inTr);

                $inTr2 = ej.buildTag('tr');
                $inTd2 = ej.buildTag('td.e-editValue');
                if ($("#" + proxy._id).width() <= proxy._responsiveMinWidth) {
                    var dropdownTreegridWidth = ($("#" + proxy._id).width() - 80) + 'px';
                    $inTd3 = ej.buildTag('div.e-dropdowntreegrid', "", { 'width': dropdownTreegridWidth, 'overflow':'hidden' });
                } else {
                    $inTd3 = ej.buildTag('div.e-dropdowntreegrid', "", { 'width': '438px', 'overflow': 'hidden' });
                }
                var $preDiv = ej.buildTag("div#treegrid" + proxy._id + "dropdownData", "", { "width": "100%", "height": "150px" }, {});
                $inTd3.append($preDiv);
                $inTd2.append($inTd3);

                $inTr2.append($inTd2);
                $innerTable.append($inTr2);

                $td.append($innerTable);
                $tr2.append($td);
                $table.append($tr2);
            }


            $form.append($table);

            $tbody = proxy.renderColumnAddDialogButton($form, $tbody);
            $.templates(proxy._id + "_ColumnAddTemplate", $tbody.html());
        },

        //button templates for column add dialog
        renderColumnAddDialogButton: function (form, tbody) {

            var btnId = "ColumnAddDialog_",
                proxy = this,
                model = proxy.model,
                $btnokDiv = ej.buildTag("div.e-add-dialog-btn-ok", "", {}, {}),
                $innerButokDiv = ej.buildTag("div", "", {}, {});
            var okbtn = ej.buildTag('input', "",
                 {
                     'border-radius': '3px'
                 },
                 { type: "button", id: btnId + proxy._id + "_Ok" }),
             okText = proxy._okButtonText;

            okbtn.ejButton(
                {
                    cssClass: model.cssClass,
                    text: okText,
                    width: "100%"
                });

            var $btncanDiv = ej.buildTag("div.e-add-dialog-btn-cancel", "", {}, {}),
            $innerButcanDiv = ej.buildTag("div", "", {}, {});
            var cancelText = proxy._cancelButtonText,
             cancelbtn = ej.buildTag('input', "",
                 {
                     'border-radius': '3px'
                 },
                 {
                     type: "button",
                     id: btnId + proxy._id + "_Cancel"
                 });

            cancelbtn.ejButton(
                {
                    cssClass: model.cssClass,
                    text: cancelText,
                    width: "100%"
                });

                var btnDiv = ej.buildTag('div', "", {}, { 'class': "e-treegrid-add-btn" });

            $innerButokDiv.append(okbtn)
            $btnokDiv.append($innerButokDiv);
            btnDiv.append($btnokDiv);
            $innerButcanDiv.append(cancelbtn)
            $btncanDiv.append($innerButcanDiv);
            btnDiv.append($btncanDiv);
            form.appendTo(tbody);
            btnDiv.appendTo(tbody);

            return tbody;
        },

        //button click event column add dialog
        _buttonClick: function (e) {

            if (e.keyCode != 0 && e.keyCode !== undefined && e.keyCode != 13)
                return true;

            var proxy = this,
                model = proxy.model, treeIndex = model.treeColumnIndex, setFrozen = false,
                dialogId = "ColumnAdd", $element, columnVals = {}, colFields = proxy._addColumnFields, columns = model.columns,
                insertIndex, args = {}, isAlreadyRender,filtertype;

            if (e.target.id == "ColumnAddDialog_" + proxy._id + "_Ok") {
                var formelement = document.getElementById(proxy._id + "ColumnAddForm"), ddl;
                for (var count = 0; count < colFields.length; count++) {
                    var colField = colFields[count];
                    $element = $(formelement).find("#" + proxy._id + colField + dialogId);
                    if (colField == "editType" || colField == "filterEditType" || colField == "textAlign" || colField == "headerTextAlign" || colField == "clipMode") {
                        ddl = $element.data("ejDropDownList");
                        columnVals[colField] = ddl._selectedValue;
                        //To get column's dropdown data if edit type is dropdownedit
                        if (colField == "editType" && columnVals[colField] == "dropdownedit") {
                            var tableTreeGrid = $(formelement).find("#treegrid" + proxy._id + "dropdownData"),
                                tableTreeGridObj = tableTreeGrid.data("ejTreeGrid"),
                                treeData = tableTreeGridObj.model.dataSource;
                            if (treeData.length > 0)
                                columnVals["dropdownData"] = treeData;
                        }
                    }
                    else if (colField == "showInColumnChooser" || colField == "allowCellSelection" || colField == "allowSorting" || colField == "allowFiltering" || colField == "allowFilteringBlankContent" || colField == "visible" || colField == "isFrozen" || colField == "allowFreezing" || colField == "displayAsCheckbox") {
                        var ch = $element.data("ejCheckBox");
                        columnVals[colField] = ch._isChecked;
                    }
                    else if ($element.val() == "" && (colField == "headerText" || colField == "field")) {
                        if (colField == "field")
                            columnVals[colField] = "Column" + (model.columns.length + 1);
                        else if (colField == "headerText")
                            columnVals[colField] = "Column " + (model.columns.length + 1);
                    }
                    else if (colField == "priority") {
                        columnVals[colField] = $element.ejNumericTextbox("getValue");
                    }
                    else
                        columnVals[colField] = $element.val();
                }
                if (proxy._insertPosition == "left")
                    insertIndex = proxy._targetColumnIndex;
                else if (proxy._insertPosition == "right")
                    insertIndex = proxy._targetColumnIndex + 1;
                //To shift and maintain treecolumn index
                if (insertIndex <= treeIndex)
                    model.treeColumnIndex = treeIndex + 1;
                //Inserting new columns between frozen columns
                if (!model.isFromGantt) {
                    if (insertIndex <= proxy._frozenColumnsLength - 1)
                        setFrozen = true;
                }
                //Inserting columns -  left or right
                var newColumnObject = {};
                if (model.isFromGantt) {
                    newColumnObject = {
                        field: columnVals.field,
                        headerText: columnVals.headerText,
                        editType: columnVals.editType,
                        allowSorting: ej.isNullOrUndefined(columnVals.allowSorting) ? null : columnVals.allowSorting,
                        visible: columnVals.visible == false ? false : true,
                        width: columnVals.width ? columnVals.width : 150,
                        textAlign: columnVals.textAlign ? columnVals.textAlign : "left",
                        headerTextAlign: columnVals.headerTextAlign ? columnVals.headerTextAlign : "left",
                        dropdownData: columnVals.dropdownData ? columnVals.dropdownData : null,
                        allowCellSelection: ej.isNullOrUndefined(columnVals.allowCellSelection) ? null : columnVals.allowCellSelection,
                        mappingName: columnVals.field,
                        displayAsCheckbox: columnVals.displayAsCheckbox == false ? false : true,
                        clipMode: columnVals.clipMode ? columnVals.clipMode : "clip",
                        tooltip: columnVals.tooltip,
                        headerTooltip: columnVals.headerTooltip
                    };
                }
                else {
                    newColumnObject = {
                        field: columnVals.field,
                        headerText: columnVals.headerText,
                        editType: columnVals.editType,
                        filterEditType: columnVals.filterEditType ? columnVals.filterEditType : "stringedit",
                        allowFiltering: ej.isNullOrUndefined(columnVals.allowFiltering) ? null : columnVals.allowFiltering,
                        allowFilteringBlankContent: ej.isNullOrUndefined(columnVals.allowFilteringBlankContent) ? null : columnVals.allowFilteringBlankContent,
                        allowSorting: ej.isNullOrUndefined(columnVals.allowSorting) ? null : columnVals.allowSorting,
                        visible: columnVals.visible == false ? false : true,
                        width: columnVals.width ? columnVals.width : 150,
                        textAlign: columnVals.textAlign ? columnVals.textAlign : "left",
                        headerTextAlign: columnVals.headerTextAlign ? columnVals.headerTextAlign : "left",
                        clipMode: columnVals.clipMode ? columnVals.clipMode : "clip",
                        tooltip: columnVals.tooltip,
                        headerTooltip: columnVals.headerTooltip,
                        isFrozen: (columnVals.isFrozen == true || setFrozen == true) ? true : false,
                        allowFreezing: ej.isNullOrUndefined(columnVals.allowFreezing) ? null : columnVals.allowFreezing,
                        dropdownData: columnVals.dropdownData ? columnVals.dropdownData : null,
                        allowCellSelection: ej.isNullOrUndefined(columnVals.allowCellSelection) ? null : columnVals.allowCellSelection,
                        showInColumnChooser: columnVals.showInColumnChooser == false ? false : true,
                        displayAsCheckbox: columnVals.displayAsCheckbox == false ? false : true,
                        priority: columnVals.priority ? columnVals.priority : "",
                    };
                }
                args.requestType = "insertColumn";
                args.columnObject = newColumnObject;
                args.insertIndex = insertIndex;
                if (!proxy._trigger("actionComplete", args)) {
                    columns.splice(args.insertIndex, 0, args.columnObject);
                    proxy._refreshFrozenColumns();
                    proxy._updateWrapRowHeights(null,"virtualRefresh");
                    if (model.isFromGantt)
                        proxy._updateAddEditDialogTemplate();
                }
                $("#" + proxy._id + "_dialogColumnAdd").ejDialog("close");
                if (model.allowFiltering && model.filterSettings.filterType == "menu") {
                    if (args.columnObject.filterEditType)
                        filtertype = args.columnObject.filterEditType;
                    else
                        filtertype = args.columnObject.editType;
                    var isAlreadyRender = proxy._renderedFilterMenuDialog.indexOf(filtertype);
                    if (isAlreadyRender == -1) {
                        proxy._renderFilterMenu(filtertype);
                    }
                }
                if (this.model.editSettings.allowEditing && this.model.editSettings.editMode == "dialogEditing" && (ej.isNullOrUndefined(model.editSettings.dialogEditorTemplateID) || model.editSettings.dialogEditorTemplateID == "")) {
                    proxy._treeGridAddEditDialog();
                } else if (this.model.editSettings.allowEditing && this.model.editSettings.editMode == "dialogEditing" && (!ej.isNullOrUndefined(model.editSettings.dialogEditorTemplateID) && model.editSettings.dialogEditorTemplateID != "")) {
                    proxy._treeGridAddEditDialogTemplate();
                }
            }
            else if (e.target.id == "ColumnAddDialog_" + proxy._id + "_Cancel") {
                $("#" + proxy._id + "_dialogColumnAdd").ejDialog("close");
            }

            if (this.model.editSettings.editMode == "dialogEditing" || (model.editSettings.editMode.toLowerCase() == "batchediting" && model.editSettings.batchEditSettings.editMode == "dialog")) {
                if (e.target.id == "EditFormDialog_" + this._id + "_Save") {
                    if (!proxy.editFormValidate())
                        return true;
                    if (this.element.find(".e-dialogaddrow .e-treegridform").length > 0) {
                        if (proxy.model.allowSelection && proxy.model.selectionSettings.selectionType == "multiple" && this._multiSelectPopup && this._multiSelectPopup.is(":visible")) {
                            proxy._clearMultiSelectPopup();
                        }
                        if (proxy._treegridDialogAddRow()) {
                            proxy._isTreeAddEditDialogSave = true;
                            $("#" + this._id + "_dialogEdit").ejDialog("close");
                        }
                    } else if (this.element.find(".e-dialogeditedrow .e-treegridform").length > 0) {
                        if (!proxy.endEdit()) {
                            proxy._isTreeAddEditDialogSave = true;
                            $("#" + this._id + "_dialogEdit").ejDialog("close");
                        }
                    }
                }
                else if (e.target.id == "EditFormDialog_" + this._id + "_Cancel") {
                    $("#" + this._id + "_dialogEdit").ejDialog("close");
                }
            }

            return false;
        },

        // Method to save the newly added record via Add dialog or Add template dialog
        _treegridDialogAddRow: function () {
            var proxy = this, columns = proxy.model.columns, newItem = {}, value;
            for (var i = 0; i < columns.length; i++) {
                var column = columns[i], fieldName = column["field"];
                if (!ej.isNullOrUndefined(column) && fieldName != "") {
                    if (!proxy._isCommandColumn(column)) {
                        if (proxy._checkboxSelection && column["nonColumn"]) continue;
                        value = proxy.getCurrentEditCellDataForRowEdit(fieldName, column["editType"], i);
                        value = (ej.isNullOrUndefined(value) || (column.editType == ej.TreeGrid.EditingType.Numeric && isNaN(value))) ? null : value;
                        if (fieldName.indexOf(".") != -1)
                            ej.createObject(fieldName, value, newItem);
                        else
                            newItem[fieldName] = value;
                    }
                }
            }
            if (proxy._addRecord(newItem, proxy.model.editSettings.rowPosition, null, "dialog"))
                return true;
            else return false;
        },

        //REFRESH THE EDITED FORM
        _refreshColumnAddForm: function () {
            var proxy = this,
               $form = $("#" + proxy._id + "ColumnAddForm"),
               $formElement = $form.find("input,select"),
               i = 0,
               elementFocused = false,
               length = $formElement.length,
               $element, inputWidth,
               model = proxy.model,
               width,
               params = {},
               value,
               columnPpty,
               customParams,
               toformat,
               formatVal,
               tableTreeGridId,
               dropdownDataTable,
               allColFields = [],
               rowHeight = proxy.model.rowHeight,
               editTypeLocaleText = proxy._editTypeText,
               textAlignLocaleText = proxy._textAlignTypeText,
               clipModeLocaleText = proxy._clipModeText,
               cellEditType;


            for (i; i < length; i++) {

                $element = $formElement.eq(i);
                inputWidth = '100%';

                columnPpty = $element.prop("name");

                if ($element.hasClass("e-dropdownlist")) {
                    if (columnPpty == "field") {
                        var fieldData = [], reqFields = [];

                        if (model.columns.length) {
                            allColFields = $.map(model.columns, function (col) {
                                if (model.isFromGantt)
                                    return col.mappingName ? col.mappingName : col.field;
                                else
                                    return col.field;
                            });
                        }

                        //getting all the fields of datasource
                        if (!proxy._dataSourcefields.length) {
                            proxy._dataSourcefields = $.extend(true, [], allColFields);
                            proxy.getAllDataSourceFields();
                        }
                        //comaparing and taking the non column fields alone for add column dialog - fields
                        for (var k = 0; k < proxy._dataSourcefields.length; k++) {
                            if ($.inArray(proxy._dataSourcefields[k], allColFields) == -1 && proxy._dataSourcefields[k] != model.notesMapping)
                                if ((model.isFromGantt && proxy._dataSourcefields[k] != "serialNumber") || !model.isFromGantt) {
                                    reqFields.push(proxy._dataSourcefields[k]);
                                }
                             }

                        for (var fd = 0; fd < reqFields.length; fd++) {
                            fieldData.push({ "text": reqFields[fd] });
                        }
                        $element.ejDropDownList({
                            width: inputWidth,
                            cssClass: model.cssClass,
                            dataSource: fieldData,
                            fields: {
                                text: "text",
                                value: "text"
                            },
                        });
                    }
                    else if (columnPpty == "editType" || columnPpty == "filterEditType") {
                        var fieldData = [
                            {  "text": editTypeLocaleText['string'], "value": "stringedit" }, {  "text": editTypeLocaleText['numeric'], "value": "numericedit" },
                            {  "text": editTypeLocaleText['datePicker'], "value": "datepicker" }, {  "text": editTypeLocaleText['dateTimePicker'], "value": "datetimepicker" },
                            {  "text": editTypeLocaleText['dropdown'], "value": "dropdownedit" }, {  "text": editTypeLocaleText['boolean'], "value": "booleanedit" }
                        ];
                        $element.ejDropDownList({
                            width: inputWidth,
                            dataSource: fieldData,
                            cssClass: model.cssClass,
                            fields: {
                                text: "text",
                                value: "value"
                            },
                            selectedIndex: 0,
                            change: function (args) {
                                var isRefreshDialog = false;
                                if ($(dropdownDataTable).is(":hidden") == true && args.value == "dropdownedit") {
                                    $(dropdownDataTable).attr("hidden", false);
                                    isRefreshDialog = true;
                                }
                                else if ($(dropdownDataTable).is(":hidden") == false && args.value != "dropdownedit") {
                                    $(dropdownDataTable).attr("hidden", true);
                                    isRefreshDialog = true;
                                }

                                var checkBoxContainer = $("#" + proxy._id + "_dialogColumnAdd").find(".e-display-checkbox-conatiner");
                                if (args.value == "booleanedit" && checkBoxContainer.length > 0 && checkBoxContainer.css("display") == "none") {
                                    checkBoxContainer.css("display", "block");
                                    isRefreshDialog = true;
                                } else if (args.value != "booleanedit" && checkBoxContainer.length > 0 && checkBoxContainer.css("display") == "block") {
                                    checkBoxContainer.css("display", "none");
                                    isRefreshDialog = true;
                                }
                                if (isRefreshDialog) {
                                    $("#" + proxy._id + "_dialogColumnAdd").ejDialog("refresh");
                                }
                            }
                        });
                    }
                    else if (columnPpty == "textAlign" || columnPpty == "headerTextAlign") {
                        var fieldData1 = [
                            {  "text": textAlignLocaleText["left"], "value": "left" }, { "text": textAlignLocaleText["right"], "value": "right" },
                            {  "text": textAlignLocaleText["center"], "value": "center" }];

                        $element.ejDropDownList({
                            width: inputWidth,
                            dataSource: fieldData1,
                            cssClass: model.cssClass,
                            fields: {
                                text: "text",
                                value: "value"
                            },
                            selectedIndex: 0
                        });
                    } else if (columnPpty == "clipMode") {
                        var clipModeData = [
                                                    {  "text": clipModeLocaleText["clip"], "value": "clip" }, {  "text": clipModeLocaleText["ellipsis"], "value": "ellipsis" }];

                        $element.ejDropDownList({
                            width: inputWidth,
                            dataSource: clipModeData,
                            cssClass: model.cssClass,
                            fields: {
                                text: "text",
                                value: "value"
                            },
                            selectedIndex: 0
                        });
                    }
                }
                else if ($element.hasClass("e-numerictextbox")) {
                    value = $element.val();
                    params.width = inputWidth;
                    params.showSpinButton = true;
                    params.cssClass = model.cssClass;
                    if (columnPpty == "width") {
                        params.maxValue = 250;
                        params.minValue = 30;
                        if (value.length)
                            params.value = parseFloat(value);
                        else
                            params.value = 150;
                    }
                    else if (columnPpty == "priority")
                    {
                        params.maxValue = 6;
                        params.minValue = 1;
                        if (value.length)
                            params.value = parseFloat(value);
                        else
                            params.value = null;
                    }
                    $element.ejNumericTextbox(params);
                }
                else if (columnPpty == "showInColumnChooser" || columnPpty == "allowCellSelection" || columnPpty == "allowFiltering" || columnPpty == "allowFilteringBlankContent" || columnPpty == "allowSorting" || columnPpty == "visible" || columnPpty == "isFrozen" || columnPpty == "allowFreezing" || columnPpty == "displayAsCheckbox") {

                    var controlArgs = {};
                    controlArgs.cssClass = model.cssClass;
                    controlArgs.size = "small";
                    $element.ejCheckBox(controlArgs);
                }               

                if (!$element.is(":disabled") && !elementFocused && (!$element.is(":hidden") || typeof $element.data("ejDropDownList") == "object")) {
                    if (!proxy._isEnterKeyPressed) {
                        proxy._focusElements($element.closest('td'));
                        elementFocused = true;
                    }
                }
            }

            tableTreeGridId = "#treegrid" + proxy._id + "dropdownData";
            //Render dropdown data table for column add dialog 
            if ($(tableTreeGridId).length) {
                var ds = [];

                $(tableTreeGridId).ejTreeGrid({
                    dataSource: ds,
                    allowSorting: false,
                    allowAdding: true,
                    columns: [{ headerText: proxy._columnDialogTexts["dropdownTableText"], field: "text", editType: ej.TreeGrid.EditingType.String, width: "150px" },
                              { headerText: proxy._columnDialogTexts["dropdownTableValue"], field: "value", editType: ej.TreeGrid.EditingType.String, width: "150px" }],
                    enableAltRow: true,
                    allowColumnResize: true,
                    cssClass: model.cssClass,
                    enableResize:true,
                    editSettings: {
                        allowAdding: true,
                        allowDeleting: true,
                        allowEditing: true,
                        editMode: "cellEditing",
                    },
                    locale: model.locale,
                    treeColumnIndex: 5,
                    emptyRecordText: "Add values for dropdown",
                    rowSelected: function (args) {
                        if (args.data) {
                            $('.e-deletepre').addClass('e-enable').removeClass('e-disable');
                            $(".e-deletepre").bind("click", $.proxy(proxy._deleteDropDownRow, proxy, $(tableTreeGridId)));
                        }
                    },

                });
                //Hide the dropdown data table while initializing
                dropdownDataTable = $form.find("#" + proxy._id + "dropdownDataTable").parent()[0];
                $(dropdownDataTable).attr("hidden", true);
                //Enable the click event for Add icon
                $(".e-addpre").bind("click", $.proxy(proxy._addDropDownRow, proxy, $(tableTreeGridId)));
            }

        },

        // Add new row for the drop down table
        _addDropDownRow: function (tableTreeGrid, e) {
            var proxy = this, args = {},
                treeGridObj = tableTreeGrid.data("ejTreeGrid"),
                treeData = treeGridObj.model.dataSource,
                dlength = treeData.length,
                item = { text: "Text " + (dlength + 1), value: "Value" + (dlength + 1) };
            treeGridObj.addRow(item, "bottom");
        },
        // delete row from the drop down table
        _deleteDropDownRow: function (tableTreeGrid, e) {
            var proxy = this, args = {},
                treeGridObj = tableTreeGrid.data("ejTreeGrid"),
                treeData = treeGridObj.model.updatedRecords,
                dlength = treeData.length,
                selectedItem = treeGridObj.model.selectedItem;
            if (dlength != 0 && selectedItem) {
                treeGridObj.deleteRow();
                $('.e-deletepre').addClass('e-disable').removeClass('e-enable');
                $(".e-deletepre").unbind("click", $.proxy(proxy._deleteDropDownRow, proxy, tableTreeGrid));
            }

        },

        //get all the fields of the dataSource
        getAllDataSourceFields: function () {
            var proxy = this, model = proxy.model,
                dataSourceCol = model.dataSource;
            for (var d = 0; d < dataSourceCol.length; d++) {
                var jsonData = dataSourceCol[d];
                for (var dsKey in jsonData) {
                    if (dsKey == model.childMapping) {
                        proxy.getChildKeys(jsonData[dsKey]);
                    }
                    else if ($.inArray(dsKey, proxy._dataSourcefields) == -1)
                        if (model.isFromGantt) {
                            if (dsKey != "undefined" && dsKey != model.notesMapping)
                                proxy._dataSourcefields.push(dsKey);
                        }
                        else {
                            if (typeof jsonData[dsKey] != "object" && dsKey != "ejvalue")
                            proxy._dataSourcefields.push(dsKey);
                        }
                }
            }
        },

        //get keys of child from datasource.
        getChildKeys: function (childData) {
            var proxy = this, model = proxy.model;
            if (childData) {
                for (var c = 0; c < childData.length; c++) {
                    var chData = childData[c];
                    for (var childKey in chData)
                        if (childKey == model.childMapping) {
                            proxy.getChildKeys(chData[childKey]);
                        }
                        else if ($.inArray(childKey, proxy._dataSourcefields) == -1) {
                            if (typeof chData[childKey] != "object" && childKey != "ejvalue")
                            proxy._dataSourcefields.push(childKey);
                        }
                }
            }
        },

        //Method to render confirm dialog box while saving and cancelling and deleting
        _renderUpdateConfirmDialog: function () {
            var proxy = this,
                confDelTxt = proxy._confirmDeleteText,
                $contentDiv = ej.buildTag('div.e-content', proxy._deleteColumnText),
                $buttons = ej.buildTag('span.e-buttons', "<input class='e-confirm-dialog-btn-ok' type='button' id=" + proxy._id + 'ConfirmDialogOK' + " value=" + proxy._okButtonText + " /> "
                + "<input class='e-confirm-dialog-btn-cancel' type='button' id=" + proxy._id + 'ConfirmDialogCancel' + " value='" + proxy._cancelButtonText + "' />"),
                btnDiv = ej.buildTag('div', "", {}, { 'class': "e-confirm-dialog-btn" });
            btnDiv.append($buttons);
            proxy._updateConfirmDialog = ej.buildTag('div', '', '', { 'title': confDelTxt, 'id': proxy._id + 'ConfirmDialog' });
            proxy._updateConfirmDialog.append($contentDiv).append(btnDiv);
            proxy.element.append(proxy._updateConfirmDialog);
            $buttons.find("input").ejButton({
                cssClass: proxy.model.cssClass,
                showRoundedCorner: true,
                size: "normal",
                click: $.proxy(proxy._triggerUpdateConfirm, proxy)
            });
            proxy._updateConfirmDialog.ejDialog({ width: "auto", minHeight: 0, minWidth: 0, showOnInit: false, isResponsive: true, enableResize: false, enableModal: true, cssClass: proxy.model.cssClass });
            $("#" + proxy._id + "ConfirmDialog_wrapper").addClass("e-treegrid-dialog");
        },

        _triggerUpdateConfirm: function (args) {
            var proxy = this;
            if (args !== undefined && args.model.text == proxy._okButtonText) {
                if (proxy._updateConfirmDialog.find(".e-content").text() == proxy._deleteColumnText)
                    proxy.deleteColumn(proxy._targetColumnIndex);
            }
            proxy._updateConfirmDialog.ejDialog("close");
        },

        //Method to delete column
        deleteColumn: function (columnIndex) {
            var proxy = this, model = proxy.model, columns = model.columns, deletedColumn,
                sortedColumns = model.sortSettings && model.sortSettings.sortedColumns.length ? model.sortSettings.sortedColumns : null,
                column = columns[columnIndex], args = {};
            if (columnIndex == model.treeColumnIndex || columns[columnIndex].nonColumn) return;
            args.requestType="deleteColumn";
            args.columnObject = column;
            args.deleteIndex = columnIndex;
            if (!proxy._trigger("actionComplete", args)) {
                //Clear filter for deleted column
                if (!model.isFromGantt && model.allowSorting && model.filterSettings.filteredColumns.length > 0)
                    proxy.clearFilter(column.field);
                deletedColumn = columns.splice(columnIndex, 1);
                if (sortedColumns) {
                    var resultCol = $.grep(sortedColumns, function (sCol) {
                        if (model.isFromGantt)
                            return sCol.field == deletedColumn[0].mappingName;
                        else
                            return sCol.field == deletedColumn[0].field;
                    });
                    if (resultCol.length) {
                        sortedColumns.splice(sortedColumns.indexOf(resultCol[0]), 1);
                        proxy.processBindings();
                        if (model.isFromGantt) {
                            args.requestType = "sorting";
                            proxy._trigger("actionComplete", args)
                        }
                    }
                }
                if (columnIndex <= model.treeColumnIndex)
                    model.treeColumnIndex = model.treeColumnIndex - 1;
                if (model.showTotalSummary && model.collapsibleTotalSummary && columnIndex == proxy._summaryColumnIndex) {
                    proxy._summaryColumnIndex = 0;                    
                }
                proxy._refreshFrozenColumns();
                proxy._updateWrapRowHeights(null,"virtualRefresh");
                if (model.isFromGantt)
                    proxy._updateAddEditDialogTemplate();
            }
        },

        //Get the element Left and Top position

        getOffsetRect:function(elem) {
            var box = elem.getBoundingClientRect(),
                body = document.body,
                docElem = document.documentElement,
                scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop,
                scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft,
                clientTop = docElem.clientTop || body.clientTop || 0 ,
                clientLeft = docElem.clientLeft || body.clientLeft || 0 ,
                top  = box.top +  scrollTop - clientTop ,
                left = box.left + scrollLeft- clientLeft;
            return { top: Math.round(top), left: Math.round(left) };
        },
        _moveToNextMenuItem: function (move) {

            var proxy,
              currentMenuItem,
              contextMenu, model = this.model, menuItem, parentMenuId, nextSubContextMenu, subContextMenu,
              nextMenuItem = {};
            if (this._isContextMenuItems || model.isFromGantt) {
                if (model.isFromGantt) {
                    proxy = $("#" + this._id.replace("ejTreeGrid", "")).data("ejGantt");
                    contextMenu = $("#" + this._id.replace("ejTreeGrid", "") + "_ContextMenu");
                }
                else {
                    proxy = this;
                    contextMenu = $("#" + this._id + "_ContextMenu");
                }
                menuItem = proxy._contextMenuItems
            }
            else {
                proxy = this;
                contextMenu = $("#" + this._id + "_headerContextMenu");
                menuItem = proxy._headerContextMenuItems
            }
            currentMenuItem = $("#" + proxy._activeMenuItemId);

            switch (move) {
                case "next":
                    if (currentMenuItem.length == 0) {
                        nextMenuItem = contextMenu.find("div.e-menuitem:not(.e-disable)").first();
                    } else {
                        nextMenuItem = currentMenuItem.closest("li").next("li").find("div.e-menuitem");
                        if (nextMenuItem.length > 0) {
                            if (nextMenuItem.hasClass("e-disable")) {
                                nextMenuItem = this._findContextMenuItem(nextMenuItem, "next");
                            }
                        }
                    }
                    nextSubContextMenu = $("#" + proxy._id + "_SubContextMenu" + proxy._activeMenuItemId);
                    nextSubContextMenu.remove();
                    break;
                case "prev":
                    nextMenuItem = this._findContextMenuItem(currentMenuItem, "prev");
                    nextSubContextMenu = $("#" + proxy._id + "_SubContextMenu" + proxy._activeMenuItemId);
                    nextSubContextMenu.remove();
                    break;
                case "expand":
                    if (currentMenuItem.length > 0) {
                        proxy._showSubContextMenu(currentMenuItem[0], menuItem);
                        subContextMenu = $("#" + proxy._id + "_SubContextMenu" + proxy._activeMenuItemId);
                        if (subContextMenu.length > 0) {
                            nextMenuItem = subContextMenu.find("div.e-menuitem:not(.e-disable)").first();
                        }
                    }
                    break;
                case "collapse":
                    subContextMenu = $(currentMenuItem).closest(".e-tginnerContextmenu");
                    if (subContextMenu.length > 0) {
                        parentMenuId = subContextMenu.attr("id").replace(proxy._id + "_SubContextMenu", "");
                        var nextMenuItem = $("#" + parentMenuId);
                        nextSubContextMenu = $("#" + proxy._id + "_SubContextMenu" + proxy._activeMenuItemId);
                        nextSubContextMenu.remove();
                        subContextMenu.remove();
                    }
                    break;
                case "save":
                    if (currentMenuItem.length > 0) {
                        if ($("#" + proxy._activeMenuItemId).find(".e-expander").length == 0) {
                            if (!model.isFromGantt)
                                proxy.contextMenuOperations(proxy._activeMenuItemId);
                            else
                                proxy._contextMenuClickHandler($("#" + proxy._activeMenuItemId));
                            proxy._clearContextMenu();
                        } else {
                            proxy._showSubContextMenu(currentMenuItem[0],menuItem);
                            subContextMenu = $("#" + proxy._id + "_SubContextMenu" + proxy._activeMenuItemId);
                            if (subContextMenu.length > 0) {
                                nextMenuItem = subContextMenu.find("div.e-menuitem:not(.e-disable)").first();
                            }
                        }
                    }
            }

            if (nextMenuItem.length > 0) {
                var currentClassName = this._isContextMenuItems || model.isFromGantt ? "e-tgcontextmenu-mouseover" : "e-columnmenuselection";
                if ((move == "next" || move == "prev")) 
                    currentMenuItem.removeClass(currentClassName);
                    nextMenuItem.addClass(currentClassName);
                    proxy._activeMenuItemId = $(nextMenuItem).attr("id");

                    
                }
               
        },
        /*Get Next active columnMenu item*/
        _findNextColumnMenuItem: function (item, move,isFromColumnMenu) {
            var proxy = this, nextItem, prevItem;
                nextItem = isFromColumnMenu ? item.closest("li").next("li").find("div.e-columnmenuitem") : item.closest("li").next("li").find("div.e-menuitem ");
            prevItem = isFromColumnMenu ? item.closest("li").prev("li").find("div.e-columnmenuitem") : item.closest("li").prev("li").find("div.e-menuitem");
           
            if (move === "next") {
               
                if (nextItem.length > 0) {
                    if (!nextItem.hasClass("e-disable")) {
                        return nextItem;
                    }
                    else
                        if (isFromColumnMenu) {
                            return proxy._findNextColumnMenuItem(nextItem, "next", true);
                        }
                        else {
                            return proxy._findNextColumnMenuItem(nextItem, "next",false)
                        }
                }
                else
                    return nextItem;
            }
            else {
              
                if (prevItem.length > 0) {
                    if (!prevItem.hasClass("e-disable")) {
                        return prevItem;
                    }
                    else
                        if (isFromColumnMenu) {
                            return proxy._findNextColumnMenuItem(prevItem, "prev", true);
                        }
                        else {
                            return proxy._findNextColumnMenuItem(prevItem, "prev", false);
                        }
                }
                else
                    return prevItem;
            }
        },
        // get concade field value
        _getFieldValue: function (field, columnCount) {

            if (field != "") {
                return field.split('.').join("");
            } else {
                return "TGcolumn" + columnCount;
            }

        },

        // Find the next context menu item to select
        _findContextMenuItem: function (item, move) {
            var proxy = this, nextItem, prevItem;
            if (move === "next") {
                nextItem = item.closest("li").next("li").find("div.e-menuitem");
                if (nextItem.length > 0) {
                    if (!nextItem.hasClass("e-disable")) {
                        return nextItem;
                    }
                    else
                        return proxy._findContextMenuItem(nextItem, "next");
                }
                else
                    return nextItem;
            }
            else {
                prevItem = item.closest("li").prev("li").find("div.e-menuitem");
                if (prevItem.length > 0) {
                    if (!prevItem.hasClass("e-disable")) {
                        return prevItem;
                    }
                    else
                        return proxy._findContextMenuItem(prevItem, "prev");
                }
                else
                    return prevItem;
            }
        },
        updateRecordByIndex: function (index, data) {
            var proxy = this, model = proxy.model,
                updatedRecords = model.updatedRecords, args = {},
                recordIndex = index,
                record = recordIndex > -1 ? updatedRecords.length > 0 ? updatedRecords[recordIndex] : null : null;

            if (proxy._isRowEdit)
                proxy.cancelRowEditCell();
            else if (proxy.model.isEdit)
                proxy.cancelEditCell();

            if (!ej.isNullOrUndefined(record) && !record.isSummaryRow) {
                var item = record.item,
                previousValue = $.extend(true, {}, item),
                columns = $.extend(true, {}, model.columns);
                $.each(data, function (key, value) {
                    var fieldName = key, fieldValue = value;
                    if (!ej.isNullOrUndefined(fieldName)) {
                        var isValidColumn = false;
                        $.each(columns, function (index, column) {
                            if (column.field == fieldName) {
                                isValidColumn = true;
                                delete columns[parseInt(index)];
                                return false;
                            }
                        });

                        if (isValidColumn) {
                            if (model.editSettings.editMode == "batchEditing") {
                                var column = {},
                                    currentValue = ej.copyObject({}, record.item),
                                columnObj = model.columns.filter(function (key) {
                                    if (key.field == fieldName) {
                                        column = key;
                                    }
                                });
                                if (column.editType == ej.TreeGrid.EditingType.DatePicker || column.editType == ej.TreeGrid.EditingType.DateTimePicker) {
                                    fieldValue = ej.parseDate(fieldValue, model.dateFormat, model.locale);
                                }
                                if (proxy._checkModfiedCellValue(ej.getObject(fieldName, currentValue), fieldValue, column)) {
                                    proxy._createBatchEditedFields(record, fieldName, fieldValue, column);
                                    proxy._batchEditStarts = true;
                                    proxy._updateBatchChanges(record.item);
                                }
                            }
                            record = proxy._restoreCustomData(record, fieldValue, fieldName);
                            record.item = proxy._restoreCustomData(record.item, fieldValue, fieldName);
                        }
                    }
                });

            }
            else
                return false;

            var rowIndex = model.currentViewData.indexOf(record);

            if (model.enableVirtualization) {
                if (rowIndex > -1)
                    ej.TreeGrid.refreshRow(proxy, rowIndex);
            } else {
                ej.TreeGrid.refreshRow(proxy, rowIndex);
            }
            if (model.idMapping && model.parentIdMapping) {
                proxy._updateLastInsertedId(record[model.idMapping]);
            }
            args.editType = "rowedit";
            args.previousValue = previousValue;
            args.currentValue = record.item;
            args.rowIndex = recordIndex;

            if (model.showSummaryRow)
                proxy._updateSummaryRow(args);
            if (model.showTotalSummary)
                proxy._updateTotalSummaryRow(args);
            if (model.editSettings.editMode == "batchEditing") {
                proxy._cancelSaveTools();
            }
        },
        _saveEditedElements: function () {
            var proxy = this,
                model = proxy.model;
            if (model.isEdit)
                proxy.saveCell();
            else if (proxy._isRowEdit)
                proxy.saveRow();
        }
    });

    //ENUM FOR EACH ACTION IN TREEGRID
    ej.TreeGrid.Actions = {
        Sorting: "sorting",
        BeginEdit: "beginedit",
        Save: "save",
        Add: "add",
        Delete: "delete",
        Cancel: "cancel",
        Refresh: "refresh",
        Searching: "searching",
        ExpandCollapse: "expandcollapse",
        Selection: "selection",
        rowHover: "rowHover",
        Scroll: "scroll",
        ContextMenuAdd: "contextMenuAdd",
        RefreshDataSource: "refreshDataSource",
        DragAndDrop: "dragAndDrop",
        Paging: "paging",
        Filter: "filtering",
        RowIndexUpdate: "rowIndexUpdate"
    };

    //ENUM FOR SELECTION MODE IN TREEGRID
    ej.TreeGrid.SelectionType = {
        Single: "single",
        Multiple: "multiple",
        Checkbox: "checkbox"
    };

    //ENUM FOR FILTER TYPE IN TREEGRID
    ej.TreeGrid.FilterType = {
        FilterBar: "filterbar",
        Menu: "menu",
        Excel:"excel"
    };


    //ENUM FOR FILTER HIERARCHY MODE IN TREEGRID
    ej.TreeGrid.FilterHierarchyMode = {
        Parent: "parent",
        Child: "child",
        Both: "both",
        None: "none"
    };

    //ENUM FOR SEARCH HIERARCHY MODE IN TREEGRID
    ej.TreeGrid.SearchHierarchyMode = {
        Parent: "parent",
        Child: "child",
        Both: "both",
        None: "none"
    };

    //ENUM FOR HEADERTEXTOVERFLOW IN TREEGRID
    ej.TreeGrid.HeaderTextOverflow = {
        None: "none",
        Wrap:"wrap"
    };

    //ENUM FOR DIFFERENT EDIT MODE IN TREEGRID
    ej.TreeGrid.EditMode = {
        CellEditing: "cellEditing",
        RowEditing: "rowEditing",
        DialogEditing: "dialogEditing",
        BatchEditing: "batchEditing",
    };

    //ENUM FOR DIFFERENT BATCH EDIT MODE IN TREEGRID
    ej.TreeGrid.BatchEditMode = {
        Cell: "cell",
        Row: "row",
        Dialog: "dialog"
    };

    //ENUM FOR DIFFERENT WRAP MODE IN TREEGRID
    ej.TreeGrid.ClipMode = {
        Clip: "clip",
        Ellipsis: "ellipsis"
    };

    //ENUM FOR DIFFERENT PAGE MODE IN TREEGRID
    ej.TreeGrid.PageSizeMode = {
        All: "all",
        Root: "root",
    };

    ej.TreeGrid.PrintMode = {
        AllPages: "allPages",
        CurrentPage: "currentPage",
    };

    //Enum for position of new added row.
    ej.TreeGrid.RowPosition = {
        Top: "top",
        Bottom: "bottom",
        Above: "aboveSelectedRow",
        Below: "belowSelectedRow",
        Child : "child"
    }

    //Enum for Edit Action of TreeGrid.
    ej.TreeGrid.BeginEditAction = {
        DblClick: "dblClick",
        Click: "click"
    };
    /* enum for six different columnEditType for treegrid */
    ej.TreeGrid.EditingType = {
        String: "stringedit",
        Boolean: "booleanedit",
        Numeric: "numericedit",
        Dropdown: "dropdownedit",
        DatePicker: "datepicker",
        DateTimePicker: "datetimepicker",
        Maskedit : "maskedit"
    };
    /* enum for different context menu in treegrid */
    ej.TreeGrid.ContextMenuItems = {
        Add: "add",
        Edit: "edit",
        Delete: "delete",
    };
    //enum for column width mode
    ej.TreeGrid.ColumnResizeMode = {
        Normal: "normal",
        FixedColumns: "fixedcolumns",
        NextColumn: "nextcolumn"
    }
    //commands
    ej.TreeGrid.UnboundType = {
        /** Used to specify unbound type as Edit   */
        Edit: "edit",
        /** Used to specify unbound type as Save   */
        Save: "save",
        /** Used to specify unbound type as Delete   */
        Delete: "delete",
        /** Used to specify unbound type as Cancel   */
        Cancel: "cancel"
    };
    ej.TreeGrid = ej.TreeGrid || {};


    //INITIALIZE THE CELLEDIT ELEMENT FOR DIFFERENT TYPES OF EDITORS
    ej.TreeGrid._initCellEditType = function (instance, $element, id, columnCount, dialogId, isResourceView, ganttColumns) {

        var proxy = instance,
            model = proxy.model,
            columns = isResourceView ? ganttColumns : model.columns,
            column = columns[columnCount],
            dialogId = dialogId ? dialogId : "", splits = (columns[columnCount].field || "").split("."), columnName;

        if (columns[columnCount]["editTemplate"])
            columns[columnCount]["editType"] = "edittemplate";
        else if (ej.isNullOrUndefined(columns[columnCount]["editType"])) {
            column["editType"] = "stringedit";
        }

        if (proxy.model.editSettings.editMode == "dialogEditing") {
            columnName = columns[columnCount].field;
        } else {
            columnName = proxy._getFieldValue(columns[columnCount].field, columnCount);
        }

        switch (column["editType"]) {

            case "stringedit":

                if (model.isFromGantt) {

                    var helpers = {};

                    if (column.field === "predecessor") {
                        helpers["_" + id + "predecessorCell"] = $.proxy(proxy._getPredecessorsValue, proxy);
                    }

                    $.views.helpers(helpers);


                    if (column.field === "predecessor") { //get the predecessor value from item of GanttRecord

                        var $input = ej.buildTag('input.e-field e-ejinputtext',
                                       "", {},
                                       {
                                           value: "{{:~_" + id + "predecessorCell(#data)}}",
                                           id: id + column.field + dialogId,
                                           name: column.field,
                                           "data-dialog": dialogId
                                       });

                    } else if (column.field === "duration") { //get the predecessor value from item of GanttRecord
                        var helpers = {};
                        helpers["_" + id + "getDurationStringValue"] = $.proxy(ej.Gantt._getDurationStringValue, proxy);
                        $.views.helpers(helpers);
                        var $input = ej.buildTag('input.e-field e-ejinputtext',
                                       "", {},
                                       {
                                           value: "{{:~_" + id + "getDurationStringValue(#data)}}",
                                           id: id + column.field + dialogId,
                                           name: column.field,
                                           "data-dialog": dialogId
                                       });

                    }
                    else { /*get the cellValue if the column does not exist in the GanttRecord object and
                           present in the item of GanttRecord*/
                        $input = ej.buildTag('input.e-field e-ejinputtext',
                                            "",
                                            {},
                                            {
                                                value: "{{:~_" + proxy._id + "cellValue(#data,'" + columnName + "')}}",
                                                id: id + columns[columnCount].field + dialogId,
                                                name: columns[columnCount].field,
                                                "data-dialog": dialogId
                                            });

                    }

                } else { /*Get the cellvalue of the normal gridcell*/
                    $input = ej.buildTag('input.e-field e-ejinputtext',
                                          "",
                                          {},
                                          {
                                              value: "{{:~_" + proxy._id + "cellValue(#data,'" + columnName + "')}}",
                                              id: id + proxy._getFieldValue(column.field,columnCount) + dialogId,
                                              name: column.field,
                                              autocomplete: "off",
                                              "data-dialog": dialogId
                                          });
                }
                $input.attr("data-edittype", columns[columnCount].editType);
                $element.html($input);
            
                break;

            case "maskedit":
                $input = ej.buildTag('input.e-field e-maskedit', "", {},
                                         {
                                             value: "{{:~_" + proxy._id + "cellValue(#data,'" + columnName + "')}}",
                                             id: id + proxy._getFieldValue(column.field,columnCount) + dialogId,
                                             name: column.field,
                                             "data-dialog": dialogId
                                         });
                $input.attr("data-edittype", columns[columnCount].editType);
                $element.html($input);
                break;

            case "booleanedit":
                $element.html('{{if true===~_' + proxy._id + 'cellValue(#data,"' + columnName + '")}}' +
                         '<input type ="checkbox" ' +
                         'id="' + id + proxy._getFieldValue(columns[columnCount].field,columnCount) + dialogId +
                         '" data-dialog ="' + dialogId +
                         '" name="' + columns[columnCount].field +
                         '" checked="checked" data-edittype="' + columns[columnCount].editType + '"></input>' +
                         ' {{else}}' +
                         '<input' +
                         ' type ="checkbox"' +
                         ' id="' + id + proxy._getFieldValue(columns[columnCount].field,columnCount) + dialogId +
                         '" data-dialog ="' + dialogId +
                         '" name="' + columns[columnCount].field + '" data-edittype="' + columns[columnCount].editType + '">' +
                         '{{/if}}');

                break;

            case "numericedit":

                var $numericText = ej.buildTag('input.e-numerictextbox e-field', "", {}, {
                    type: "text",
                    value: "{{:~_" + proxy._id + "cellValue(#data,'" + columnName + "')}}",
                    id: id + proxy._getFieldValue(columns[columnCount].field,columnCount) + dialogId,
                    name: columns[columnCount].field,
                    "data-dialog": dialogId
                });
                $numericText.attr("data-edittype", columns[columnCount].editType);
                $element.append($numericText);

                break;

            case "datepicker":

                var $datePicker = ej.buildTag('input.e-datepicker e-field', "",
                                             {},
                                             {
                                                 type: "text",
                                                 value: "{{:~_" + proxy._id + "cellValue(#data,'" + columnName + "')}}",
                                                 id: id + proxy._getFieldValue(columns[columnCount].field,columnCount) + dialogId,
                                                 name: columns[columnCount].field,
                                                 "data-dialog": dialogId
                                             });
                $datePicker.attr("data-edittype", columns[columnCount].editType);
                $element.append($datePicker);

                break;
            case "datetimepicker":

                var $datePicker = ej.buildTag('input.e-datetimepicker e-field', "",
                                             {},
                                             {
                                                 type: "text",
                                                 value: "{{:~_" + proxy._id + "cellValue(#data,'" + columnName + "')}}",
                                                 id: id + proxy._getFieldValue(columns[columnCount].field,columnCount) + dialogId,
                                                 name: columns[columnCount].field,
                                                 "data-dialog": dialogId
                                             });
                $datePicker.attr("data-edittype", columns[columnCount].editType);
                $element.append($datePicker);

                break;
            case "dropdownedit":

                var $dropDownList = ej.buildTag('input.e-field e-dropdownlist',
                    "",
                    {},
                    {
                        type: "text",
                        id: id + proxy._getFieldValue(columns[columnCount].field,columnCount) + dialogId,
                        name: columns[columnCount].field,
                        "data-dialog": dialogId
                    });
                $dropDownList.attr("data-edittype", columns[columnCount].editType)
                    .attr("data-cellvalue", "{{:~_" + proxy._id + "cellValue(#data,'" + columnName + "')}}");
                $element.append($dropDownList);

                break;
            case "edittemplate":
                var temp = columns[columnCount].editTemplate.create;
                if (typeof temp == "string") {
                    var temp1 = ej.util.getObject(temp, window);
                    if (!$.isFunction(temp1)) {
                        if ($(temp).length == 1 && $(temp).get(0).tagName == "SCRIPT")
                            var $edittemplate = $($(temp).html()).attr({ "id": id + proxy._getFieldValue(column.field,columnCount), "name": column.field });
                        else
                            var $edittemplate = $(temp).attr({ "id": id + proxy._getFieldValue(column.field,columnCount), "name": column.field });
                    }
                    else
                        var $edittemplate = $(temp1()).attr({ "id": id + proxy._getFieldValue(column.field,columnCount), "name": column.field });
                }
                else
                    var $edittemplate = $(temp()).attr({ "id": id + proxy._getFieldValue(column.field,columnCount), "name": column.field });
                $edittemplate.attr("data-edittype", columns[columnCount].editType);
                $element.append($edittemplate);
                break;
        }
    };
    
    //Initialize tree grid toolbar item.
    ej.TreeGrid.ToolbarItems = {
        Add: "add",
        Edit: "edit",
        Delete: "delete",
        Update: "update",
        Cancel: "cancel",
        ExpandAll: "expandAll",
        CollapseAll: "collapseAll",
        PdfExport: "pdfExport",
        ExcelExport: "excelExport",
        Print: "print",
        Search: "search"
    };

    //Enum Values of summaryType
    ej.TreeGrid.SummaryType = {
        Sum: "sum",
        Average: "average",
        Maximum: "maximum",
        Minimum: "minimum",
        Count: "count",
        MinimumDate: "minimumDate",
        MaximumDate: "maximumDate",
        TrueCount: "trueCount",
        FalseCount: "falseCount",
        Custom: "custom"
    };

    //Enum Value of selectionMode.
    ej.TreeGrid.SelectionMode = {
        Row: "row",
        Cell: "cell"
    };

    ej.TreeGrid.Locale = ej.TreeGrid.Locale || {};

    ej.TreeGrid.Locale["default"] = ej.TreeGrid.Locale["en-US"] = {
        
        //string to be displayed in Toolbox's tooltip 
        toolboxTooltipTexts: {
            addTool: "Add",
            editTool: "Edit",
            updateTool: "Update",
            deleteTool: "Delete",
            cancelTool: "Cancel",
            expandAllTool: "Expand All",
            collapseAllTool: "Collapse All",
            pdfExportTool: "PDF Export",
            excelExportTool: "Excel Export",
            printTool: "Print",
            searchTool: "Search"
        },
        //string to be displayed in context menu 
        contextMenuTexts: {
            addRowText: "Add Row",
            editText: "Edit",
            deleteText: "Delete",
            saveText: "Save",
            cancelText : "Cancel",
            aboveText: "Above",
            belowText: "Below"
        },
        filterMenuTexts:{
            stringMenuOptions: [{ text: "Starts With", value: "startswith" },
                    { text: "Ends With", value: "endswith" },
                    { text: "Contains", value: "contains" },
                    { text: "Equals", value: "equal" },
                    { text: "Does Not Equal", value: "notequal" }],
            numberMenuOptions: [{ text: "Less Than", value: "lessthan" },
                        { text: "Greater Than", value: "greaterthan" },
                        { text: "Less Than Or Equal To", value: "lessthanorequal" },
                        { text: "Greater Than Or Equal To", value: "greaterthanorequal" },
                        { text: "Equals", value: "equal" },
                        { text: "Does Not Equal", value: "notequal" }],
            filterValue: "Filter Value",
            filterButton: "Filter",
            clearButton: "Clear",
            enterValueText: "enter value",
        },
        //string to be displayed in column menu 
        columnMenuTexts: {
            sortAscendingText: "Sort Ascending",
            sortDescendingText: "Sort Descending",
            columnsText: "Columns",
            freezeText: "Freeze",
            unfreezeText: "Unfreeze",
            freezePrecedingColumnsText: "Freeze Preceding Columns",
            insertColumnLeft: "Insert Column Left",
            insertColumnRight: "Insert Column Right",
            deleteColumn: "Delete Column",
            renameColumn: "Rename Column",
            menuFilter: "Filter"
        },

        //string to display in column add dialog 
        columnDialogTexts: {
            field: "Field",
            headerText: "Header Text",
            editType: "Edit Type",
            filterEditType: "Filter Edit Type",
            allowFiltering: "Allow Filtering",
            allowFilteringBlankContent: "Allow Filtering Blank Content",
            allowSorting: "Allow Sorting",
            visible: "Visible",
            width: "Width",
            textAlign: "Text Alignment",
            headerTextAlign: "Header Text Alignment",
            isFrozen: "Is Frozen",
            allowFreezing: "Allow Freezing",
            columnsDropdownData: "Column Dropdown Data",
            dropdownTableText: "Text",
            dropdownTableValue: "Value",
            addData: "Add",
            deleteData: "Remove",
            allowCellSelection: "Allow Cell Selection",
            showInColumnChooser: "Show In Column Chooser",
            clipMode: "Clip Mode",
            tooltip: "Tooltip",
            headerTooltip: "Header Tooltip",
            displayAsCheckbox: "Display As Checkbox",
            priority:"Priority"
        },

        //string to be displayed in column add dialog title 
        columnDialogTitle: {
            insertColumn: "Insert Column",
            deleteColumn: "Delete Column",
            renameColumn: "Rename Column"
        },

        //String to be display for edittype and filter edit type.
        editTypeTexts: {
            string: "String",
            numeric: "Numeric",
            datePicker: "Date Picker",
            dateTimePicker: "Date Time Picker",
            dropdown: "Dropdown",
            boolean: "Boolean"

        },

        // String to be display for text align type.
        textAlignTypes:{
            right: "Right",
            left: "Left",
            center: "Center"
        },

        // String to be display for clip mode type.
        clipModeTexts:{
            clip: "Clip",
            ellipsis: "Ellipsis"
        },

        //Locale Text for delete confirm dialog
        deleteColumnText: "Are you sure you want to delete this column?",
        deleteRecordText: "Are you sure you want to delete record?",
        okButtonText: "OK",
        cancelButtonText: "Cancel",
        confirmDeleteText: "Confirm Delete",

        //Locale Text for batch edit confirm dialog
        batchSaveConfirmText: "Are you sure you want to save changes?",
        batchSaveLostChangesText: "Unsaved changes will be lost. Are you sure you want to continue?",
        cancelEditText: "Are you sure you want to cancel the changes?",

        //String to be displayed in drop down list for filtering blank items
        dropDownListBlanksText: "(Blanks)",
        //String to be displayed in drop down list to clear filtered items
        dropDownListClearText: "(Clear Filter)",
        //Text to be displayed in drop down list for FALSE value in boolean edit type column
        trueText: "True",
        //Text to be displayed in drop down list for True value in boolean edit type column
        falseText: "False",
        emptyRecord: "No records to display",
    };

    //GET ROW CLASS NAME FOR EXPAND COLLAPSE ACTION
    ej.TreeGrid._getrowClassName = function () {

        var rowClass = "gridrowIndex",
            proxy = this;

        if (proxy.data.parentItem) {

            rowClass += proxy.data.parentItem.index.toString();

        }

        rowClass += "level";
        rowClass += proxy.data.level.toString();
        if (proxy.data.isSummaryRow) {
            rowClass += " ";
            rowClass += "e-summaryrow";
        }
        if (proxy.data.footerSummaryRowRecord) {
            rowClass += " ";
            rowClass += "e-footersummaryrow";
        }
        if (proxy.data.isFirstFooterSummary) {
            rowClass += " ";
            rowClass += "e-firstfootersummaryrow";
        }

        return rowClass;
    };
    ej.TreeGrid._getSummaryRowtdClassName = function () {
        var proxy = this;
        var tdClass = "";
        if (proxy.data.isSummaryRow) {
            tdClass += " ";
            tdClass += "e-summaryrowcell";
        }
        if (proxy.data.footerSummaryRowRecord) {
            tdClass += " ";
            tdClass += "e-footersummaryrowcell";
        }
        return tdClass;
    };

    //GET COLUMN BY FIELD NAME
    ej.TreeGrid.getColumnByField = function (columns, field) {

        var column = 0;

        for (column; column < columns.length; column++) {

            if (columns[column]["field"].split('.').join("") == field.split('.').join("")) break;

        }

        return column == columns.length ? null : columns[column];
    };


    ej.TreeGrid.getColumnByMappingName = function (columns, field) {
        var column = 0;
        for (column; column < columns.length; column++) {
            if (columns[column]["mappingName"] == field) break;
        }
        return column == columns.length ? null : columns[column];
    };

    //EXPAND COLLAPSE THE PARTICULAR RECORD OBJECT
    ej.TreeGrid.sendExpandCollapseRequest = function (element, args) {

        var proxy = element,
             model = proxy.model,
             toolbarItems = model.toolbarSettings.toolbarItems,
             updatedRecords;

        args.requestType = ej.TreeGrid.Actions.ExpandCollapse;
        //To cancel the cell edit or row edit mode when expand the all record.
        if (proxy._isRowEdit) 
            proxy.cancelRowEditCell();
        else if (proxy.model.isEdit)
            proxy.cancelEditCell();

        if (model.enableVirtualization) {

            if (proxy._isFromGantt) {
                if (proxy._isLoadonDemand && !args.data.isChildRetrieved && args.expanded == true) {
                    ej.TreeGrid.expandRowsonDemand(proxy, args.data, args);
                    return;
                }
                else
                    proxy._$treegridHelper.ejTreeGrid("processBindings", args);
            }
            else if (proxy._isLoadonDemand && !args.data.isChildRetrieved && args.expanded == true) {
                ej.TreeGrid.expandRowsonDemand(proxy, args.data, args);
                return;
            }
            else {
                proxy.processBindings(args);
            }
            if (proxy._isFromGantt) {
                if (proxy._isInExpandCollapseAll === false) {
                    if (model.enableAltRow) {
                        proxy._$treegridHelper.ejTreeGrid("updateAltRow");
                    }
                    proxy._$treegridHelper.ejTreeGrid("sendDataRenderingRequest", args);
                    proxy._$treegridHelper.ejTreeGrid("updateHeight");
                    proxy.model.updatedGanttRecords = proxy.getUpdatedRecords();
                    proxy.model.currentViewData = proxy.getCurrentViewData();
                    proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                    proxy._$ganttchartHelper.ejGanttChart("refreshHelper", proxy.model.currentViewData, proxy.model.updatedGanttRecords);
                  
                }
            }
            else {
                if (proxy._isInExpandCollapseAll === false) {
                    if (model.enableAltRow) {
                        proxy.updateAltRow();
                    }
                    proxy.sendDataRenderingRequest(args);
                    proxy._updateWrapRowHeights("total,header");
                    proxy._setScrollTop();
                    proxy.updateHeight();
                }
            }
            
        } else {
            var record = args.data,
                index,
                $row,
                height = 0,
                isModified = record.expanded !== args.expanded;
                index = proxy.model.currentViewData.indexOf(record);
            
                if (proxy._frozenColumnsLength && proxy.getRows()) {
                    $row = $(proxy.getRows()[0][index]).add(proxy.getRows()[1][index]);
                }
                else if (proxy.getRows()) {
                    $row = proxy.getRows() && $(proxy.getRows()[index]);
                }

                if (args.expanded) {
                    record.expanded = args.expanded;
                    if (proxy._isLoadonDemand && !record.isChildRetrieved) {
                        ej.TreeGrid.expandRowsonDemand(proxy, record, args);
                        return;
                    }
                    else
                        $row && ej.TreeGrid.expandRecord(proxy, record, args.expanded, args);
                    if (record.hasFilteredChildRecords) {
                        $row && $row.find(".e-treegridcollapse").removeClass('e-treegridcollapse').addClass('e-treegridexpand');
                        $row && $row.removeClass('e-treegridrowcollapse').addClass('e-treegridrowexpand');
                    }
                    if (model.enableAltRow && proxy._isInExpandCollapseAll === false && !model.allowPaging) {
                        ej.TreeGrid.updateAltRow(proxy, record, index, 1);
                    }
                }
                else {
                    proxy._collapsedRecordCount = 0;//For update alt row
                    $row && ej.TreeGrid.collapseRecord(proxy, record, args.expanded);
                    record.expanded = args.expanded;
                    if (record.hasFilteredChildRecords) {
                        $row && $row.find(".e-treegridexpand").removeClass('e-treegridexpand').addClass('e-treegridcollapse');
                        $row && $row.removeClass('e-treegridrowexpand').addClass('e-treegridrowcollapse');
                    }
                    if (model.enableAltRow && proxy._isInExpandCollapseAll === false && proxy._collapsedRecordCount != 0 && !model.allowPaging)
                        ej.TreeGrid.updateAltRow(proxy, record, index, proxy._collapsedRecordCount);
                }

            var collapsedRecordCount= 0;
            if (proxy._isFromGantt) {
                proxy._$treegridHelper.ejTreeGrid("updateExpandStatus", record, args.expanded);
                proxy._$treegridHelper.ejTreeGrid("updateCollapsedRecordCount");
                collapsedRecordCount =  proxy._$treegridHelper.ejTreeGrid("getCollapsedRecordCount");
            } else {
                proxy.updateExpandStatus(record, args.expanded);
                proxy.updateCollapsedRecordCount();
                collapsedRecordCount = proxy.getCollapsedRecordCount();
            }

            if (model.allowPaging && proxy._isInExpandCollapseAll === false && (args.type == "ejTreeGridcollapsing" || args.type == "ejTreeGridexpanding")) {
                if (!ej.isNullOrUndefined(proxy.getPager())) {
                    proxy.gotoPage();
                }
                if (model.enableAltRow)
                    ej.TreeGrid.updateAltRow(proxy, record, index, 1);
            }

            if (proxy._isFromGantt)
            {
                if (proxy._isInExpandCollapseAll === false) {
                    proxy._totalCollapseRecordCount = collapsedRecordCount;
                    proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                    proxy._$treegridHelper.ejTreeGrid("updateHeight");
                    height = proxy._$treegridHelper.ejTreeGrid("getRecordsHeight");
                    proxy._$ganttchartHelper.ejGanttChart("updateHeight", height);
                    proxy._$ganttchartHelper.ejGanttChart("setCollapsedRecordCount", collapsedRecordCount);
                    proxy._$ganttchartHelper.ejGanttChart("refreshGridLinesTable", proxy.model.updatedRecords.length - collapsedRecordCount);
                }
                
            } else {
                if (proxy._isInExpandCollapseAll === false) {
                    if (model.allowTextWrap && proxy._$frozenTableContent.length > 0) {
                        proxy._updateWrapRowHeights("total,header");
                        proxy._updateScrollCss();
                    } else {
                        proxy.updateHeight();
                    }
                }
            }
        }

        
        if (proxy._isFromGantt && proxy.model.predecessorMapping && proxy._isInExpandCollapseAll === false) {
            proxy._refreshConnectorLines(false, false, true);
        }

        if (proxy._isFromGantt) {
            var treeGrid = proxy._$treegridHelper.ejTreeGrid("instance");
            var chart = proxy._$ganttchartHelper.ejGanttChart("instance");
            var top = treeGrid._$gridContent.ejScroller("option", "scrollTop");
            chart._$bodyContainer.ejScroller("option", "scrollTop", top);
            var isHorizontalScroll = treeGrid.getScrollElement().ejScroller("isHScroll");
            if (!isHorizontalScroll)
                treeGrid.getScrollElement().scrollTop(top);
        }
       
        var argstemp = {};
        argstemp.recordIndex = args.recordIndex;
        argstemp.data = args.data;
        argstemp.requestType = args.requestType;
        argstemp.expanded = args.expanded;
        if (!ej.isNullOrUndefined(argstemp.data.item[model.expandStateMapping])) {
            argstemp.data[model.expandStateMapping] = args.expanded;
            argstemp.data.item[model.expandStateMapping] = args.expanded;
        }
        if (args.expanded) {
            proxy._trigger("expanded", argstemp);
        } else {
            proxy._trigger("collapsed", argstemp);
        }

        var selectItem = proxy.selectedItem();
        if (!proxy._isFromGantt && selectItem && (model.selectedItems.length == 1 || proxy._checkboxSelection)) {
            var expanded = proxy.getExpandStatus(selectItem);
            if (!expanded && !args.expanded) {
                proxy.selectRows(-1);
                proxy.selectedRowIndex(-1);
                selectItem.isSelected = false;
                model.selectedItem = null;
                selectItem = null;
            }
            if (model.allowPaging)
                updatedRecords = proxy._updatedPageData;
            else
                updatedRecords = proxy.model.updatedRecords;
            if (model.enableVirtualization && selectItem && updatedRecords.indexOf(selectItem) !== proxy.selectedRowIndex())
                proxy.selectRows(updatedRecords.indexOf(selectItem));
            proxy._cancelSaveTools();
        }
    };

    ej.TreeGrid.expandRowsonDemand = function (controlObject, parent, expcolargs) {
        var proxy = controlObject, model = proxy.model,         
            queryChildRecords = ej.Query().select(proxy._fieldNamesToQuery),
            flatRecords = model.flatRecords, updatedRecords = model.updatedRecords, args = {};
        if (proxy._isFromGantt) {
            var condition = ej.Predicate(model.parentTaskIdMapping, ej.FilterOperators.equal, parent.item[model.taskIdMapping]),
                idMapping = model.taskIdMapping, parentMapping = model.parentTaskIdMapping;
        }
        else {
            var condition = ej.Predicate(model.parentIdMapping, ej.FilterOperators.equal, parent.item[model.idMapping]),
                idMapping = model.idMapping, parentMapping = model.parentIdMapping;
        }

        if (parent.isChildRetrieved) {
            parent.expanded = true;
            ej.TreeGrid.sendExpandCollapseRequest(proxy, expcolargs);
            return true;
        }
        if (proxy._trigger("actionBegin", expcolargs))
            return true;

        queryChildRecords.where(condition);
        proxy._waitingPopupObj.show();
        queryChildRecords.requiresCount();
        var queryPromise = proxy.dataSource().executeQuery(queryChildRecords);
        queryPromise.done(ej.proxy(function (e) {
            var queriedChildItems = e.result, length = queriedChildItems.length, recordCollection = [], idCollection = [], jsonData = [],
                flatRecordIndex = flatRecords.indexOf(parent), childLength = parent.childRecords && parent.childRecords.length;
            //if (model.isFromGantt)
            //    var ganttObject = $("#" + proxy._id.replace("ejTreeGrid", "")).data("ejGantt");
            for (var index = 0; index < length; index++) {
                if (proxy._isFromGantt) {
                    var expandedChildRecord = proxy._createGanttRecord(queriedChildItems[index], parent.level + 1, parent);
                    if (model.enableWBS) {
                        var parentWBS = parent.WBS;
                        expandedChildRecord["WBS"] = parentWBS + "." + (index + 1);
                    }
                }
                else
                    var expandedChildRecord = proxy._createRecord(queriedChildItems[index], parent.level + 1, parent);
                expandedChildRecord.index = flatRecords.length + recordCollection.length;
                parent.childRecords.push(expandedChildRecord);

                //Update Child Record Info of Queried Child Items.
                if (expandedChildRecord.item[model.hasChildMapping] || proxy._assignedParendIDs.indexOf(expandedChildRecord.item[idMapping]) != -1) {
                    expandedChildRecord.hasChildRecords = true;
                    expandedChildRecord.childRecords = [];
                    expandedChildRecord.isChildRetrieved = false;
                    proxy._allParentItems.push(expandedChildRecord);
                    if (proxy._isFromGantt) {
                        expandedChildRecord.manualStartDate = expandedChildRecord.startDate;
                        expandedChildRecord.manualEndDate = expandedChildRecord.endDate;
                        expandedChildRecord.manualDuration = expandedChildRecord.duration;
                        if(!expandedChildRecord.isAutoSchedule)
                            proxy._updateManualParentItem(expandedChildRecord, null, true);
                    }
                }

                if (expandedChildRecord.item[idMapping])
                    idCollection.push(expandedChildRecord.item[idMapping]);

                recordCollection.push(expandedChildRecord);

                jsonData.push(queriedChildItems[index]);
            }

            //update Task Id Collection.
            proxy._taskIds.splice.apply(proxy._taskIds, [flatRecordIndex + 1, 0].concat(idCollection));
            //update gantt model Id Collection
            if (proxy._isFromGantt)
                model.ids.splice.apply(model.ids, [flatRecordIndex + 1, 0].concat(idCollection.toString().split(",")));
            //Update Record Collections
            flatRecords.splice.apply(flatRecords, [flatRecordIndex + 1, 0].concat(recordCollection));
            //updateJson Data
            if (proxy._isDataManagerUpdate)
                proxy._jsonData.splice.apply(proxy._jsonData, [flatRecordIndex + 1, 0].concat(jsonData));

            parent.isChildRetrieved = true;
            parent.expanded = true;
            var exargs = {
                recordIndex: flatRecordIndex,
                data: parent,
                requestType: "expandcollapse",
                expanded: true
            };
            if (expcolargs && (expcolargs.isExpandingParticularLevelParent || proxy._isInExpandCollapseAll)) {
                ej.TreeGrid.expandMultipleRecordsonDemand(proxy, parent, expcolargs, exargs);
            }
            else {
                proxy._renderExpandedChildRecords(expcolargs);
                proxy._trigger("expanded", exargs);
            }

        })).fail(ej.proxy(function (e) { proxy._triggerFailureEvent(e, proxy); }));          
    };

    ej.TreeGrid.expandMultipleRecordsonDemand = function (controlObject, parent, expcolargs, exargs) {
        var proxy = controlObject;
        if (expcolargs.isExpandingParticularLevelParent) {
            var collapsedParentItems = proxy._allParentItems.filter(function (record) {
                if (record.level == expcolargs.recordLevel && !record.expanded && record.hasChildRecords)
                    return record;
            });

            //Expand, if higher level parent is in collapsed state.
            var targetParentItem = parent.parentItem;
            for (var level = 0; level < expcolargs.recordLevel; level++) {
                if (targetParentItem && targetParentItem.isChildRetrieved)
                    targetParentItem.expanded = true;
                targetParentItem = targetParentItem && targetParentItem.parentItem;
            }
        }
        if (proxy._isInExpandCollapseAll) {
            var collapsedParentItems = proxy._allParentItems.filter(function (record) {
                if (!record.expanded && record.hasChildRecords)
                    return record;
            });
        }
        for (var targetItem = 0; targetItem < collapsedParentItems.length; targetItem++) {
            var exponDemand = {};
            exponDemand.data = collapsedParentItems[targetItem];
            exponDemand.recordIndex = proxy.model.updatedRecords.indexOf(collapsedParentItems[targetItem]);
            exponDemand.expanded = true;
            if (expcolargs.isExpandingParticularLevelParent) {
                exponDemand.recordLevel = expcolargs.recordLevel;
                exponDemand.isExpandingParticularLevelParent = true;
            }
            exponDemand.requestType = ej.TreeGrid.Actions.ExpandCollapse;
            var isExpanded = ej.TreeGrid.expandRowsonDemand(proxy, collapsedParentItems[targetItem], exponDemand);
            if (isExpanded) {
                proxy._allParentItems.splice(proxy._allParentItems.indexOf(collapsedParentItems[targetItem]), 1);                   
                collapsedParentItems.splice(collapsedParentItems.indexOf(collapsedParentItems[targetItem]), 1);
                if (collapsedParentItems.length > 0)
                    targetItem = -1;
            }
            else
                break;
        }
        if (collapsedParentItems.length == 0) {
            proxy._isInExpandCollapseAll = false;
            proxy._renderExpandedChildRecords(expcolargs);
            proxy._trigger("expanded", exargs);
        }
    },    

    //EXPAND THE RECORD
    ej.TreeGrid.expandRecord = function (controlObject, Record, expanded, args) {
  
        var proxy = controlObject,
            rowClassName = ".gridrowIndex" + Record.index.toString() + "level" + (Record.level + 1).toString(),
            detailsRowClassName = ".detailsrowgridrowIndex" + Record.index.toString() + "level" + (Record.level + 1).toString(),
            $rows = $(proxy.element).find(rowClassName),
            count = 0,
            length = $rows.length,
            row,
            index,
            record,
            model = proxy.model,
            $detailRows = $(proxy.element).find(detailsRowClassName),
            $expandedRows = $(proxy.element).find(rowClassName),
            index,
            $gridRows = proxy.getRows(),
            $row = $($gridRows[index]);

            index = model.currentViewData.indexOf(Record);

        if (Record.hasChildRecords && Record.childRecords.length > 0) {
            $row.find(".e-treegridcollapse").removeClass('e-treegridcollapse').addClass('e-treegridexpand');
            $row.removeClass('e-treegridrowcollapse').addClass('e-treegridrowexpand');
        }
        proxy._expandedRecordsCount += (proxy._isFromGantt || proxy._frozenColumnsLength > 0) ? $expandedRows.length / 2 : $expandedRows.length;
        $expandedRows.css({ 'display': 'table-row' });
        $detailRows.filter("tr.e-detailsrowexpanded").css('display', 'table-row');
        if (proxy._isFromGantt || proxy._frozenColumnsLength > 0) {
            length = length / 2;
        }

        for (count; count < length; count++) {
            row = $rows[count];
            index = -1;
            if (proxy._frozenColumnsLength > 0)
                index = $(proxy.getRows()[0]).index(row);
            else
                index = proxy.getRows().index(row);

            if (index !== -1) {
                record = proxy._isFromGantt ? proxy.model.updatedRecords[index] : proxy.model.updatedRecords[index];
                record.isExpanded = true;
                if (record.expanded)
                    ej.TreeGrid.expandRecord(proxy,record, expanded);
            }
        }
    },
    
    //COLLAPSE THE RECORD
    ej.TreeGrid.collapseRecord = function (controlObject, Record, expanded) {

        var proxy = controlObject,
            model = proxy.model,
            rowClassName = ".gridrowIndex" + Record.index.toString() + "level" + (Record.level + 1).toString(),
            detailsRowClassName = ".detailsrowgridrowIndex" + Record.index.toString() + "level" + (Record.level + 1).toString(),
            $rows = $(proxy.element).find(rowClassName),
            count = 0,
            length = $rows.length,
            row,
            index,
            record,
            $detailRows = $(proxy.element).find(detailsRowClassName),
            $collapsedRows = $(proxy.element).find(rowClassName),
        $gridRows = proxy.getRows();

        proxy._collapsedRecordCount += (proxy._isFromGantt || proxy._frozenColumnsLength > 0) ? $collapsedRows.length / 2 : $collapsedRows.length;
        $collapsedRows.css({ 'display': 'none' });
        $detailRows.css({ 'display': 'none' });

        if (proxy._isFromGantt || proxy._frozenColumnsLength > 0) {
            length = length / 2;
        }

        for (count; count < length; count++) {

            row = $rows[count];
            index = -1;
            if (proxy._frozenColumnsLength > 0)
                index = $(proxy.getRows()[0]).index(row);
            else
                index = proxy.getRows().index(row);


            if (index !== -1) {
                record = proxy.getUpdatedRecords()[index];

                if (record.expanded)
                    ej.TreeGrid.collapseRecord(proxy,record, expanded);
            }
        }
    },

    //UPDATE THE ALT ROW FUNCTION
    ej.TreeGrid.updateAltRow = function (controlObject, Record, recordIndex, offset) {

        var proxy = controlObject,
            count = 0,
            model = proxy.model,
            currentViewData = proxy.getUpdatedRecords(),
            length = currentViewData.length,
            isAltRow = Record.isAltRow,
            record,
            $gridRows,
            $gridAllRows = proxy.getRows();

        if (proxy._frozenColumnsLength)
            $gridRows = proxy.getRows()[0];
        else
            $gridRows = proxy.getRows();

        /* for rowTemplate no need set alt row class*/
        if (model.rowTemplateID || model.altRowTemplateID)
            return;

        for (count = recordIndex + offset; count < length; count++) {

            if ($($gridRows[count]).hasClass("e-summaryrow"))
                continue;

            if ($($gridRows[count]).css('display') === "none")
                continue;

            record = currentViewData[count];
            if(count!=0)
            record.isAltRow = !isAltRow;
            isAltRow = record.isAltRow;
            var currentRow = {};
            if (proxy._frozenColumnsLength) {
                currentRow = $($gridAllRows[0][count]).add($gridAllRows[1][count]);
            }
            else
                currentRow = $($gridAllRows[count])
            if (isAltRow) {
                $(currentRow).addClass('e-alt-row');
            }
            else {
                $(currentRow).removeClass('e-alt-row');
            }
        }
    };

    //RERENDERED THE EDITED RECORD
    ej.TreeGrid.refreshRow = function (controlObject, index) {
        var proxy = controlObject,
            model = proxy.model,
            data = proxy.model.currentViewData[index], eventArgs = {},
            currentRefreshingRow, currentFrozenRow;
        if (data) {
            if (proxy._frozenColumnsLength > 0) {
                currentFrozenRow = $(proxy.getRows()[0][index]);
                currentRefreshingRow = $(proxy.getRows()[1][index]);
                if (model.showDetailsRow && model.detailsTemplate && data.isDetailsExpanded) {
                    var detailsRow = currentFrozenRow.next("tr");
                    if (detailsRow.hasClass("e-detailsrow")) {
                        detailsRow.remove();
                        currentRefreshingRow.next("tr").remove();
                    }
                }
                currentFrozenRow.replaceWith($($.render[proxy._id + "_JSONFrozenTemplate"](data)));
                currentRefreshingRow.replaceWith($($.render[proxy._id + "_Template"](data)));
            } else {
                currentRefreshingRow = $(proxy.getRows()[index]);
                if (model.showDetailsRow && model.detailsTemplate && data.isDetailsExpanded) {
                    var detailsRow = currentRefreshingRow.next("tr");
                    if (detailsRow.hasClass("e-detailsrow"))
                        detailsRow.remove();
            }
            if (!model.allowSelection)
                data.isSelected = false;
            currentRefreshingRow.replaceWith($($.render[proxy._id + "_Template"](data)));
            }
            proxy.setGridRows($(proxy.getContentTable().get(0).rows));

            proxy._gridRows = proxy.getContentTable().get(0).rows;
            if (proxy._frozenColumnsLength > 0)
                proxy._gridRows = [proxy._gridRows, proxy.getContentTable().get(1).rows];

            var rowElement = ej.TreeGrid.getRowByIndex(proxy, proxy.getUpdatedRecords().indexOf(model.currentViewData[index]));
            proxy._trigger("refresh");
            proxy._rowEventTrigger(rowElement, data);
        }
    };

    //Return corressponding treegrid rows jquery object
    ej.TreeGrid.getRowByIndex = function (controlObject, from, to) {

        try {
            var proxy;
            if (controlObject.pluginName == "ejTreeGrid")
                proxy = controlObject;
            else
                proxy = controlObject._$treegridHelper.data("ejTreeGrid");

            var $gridRows = proxy.getRows(),
                model = proxy.model,
                updatedRecords = proxy.getUpdatedRecords(),
               // gridRows=proxy._gridRows,
                $row = $();

            if (proxy.model.enableVirtualization) {
                var recordstart = updatedRecords[from];
                from = proxy.model.currentViewData.indexOf(recordstart);
            }

            if (ej.isNullOrUndefined(to)) {
                if (proxy._frozenColumnsLength > 0) {
                    if ($gridRows[0][from]) {
                        $row.push($gridRows[0][from]);
                        $row.push($gridRows[1][from]);
                    }
                    return $row;
                }
                return $($gridRows[from]);
            } else {
                if (proxy.model.enableVirtualization) {
                    var recordend = updatedRecords[to];
                    to = proxy.model.currentViewData.indexOf(recordend);
                }
                if (proxy._frozenColumnsLength > 0) {
                    $row.push($($gridRows[0]).slice(from, to));
                    $row.push($($gridRows[1]).slice(from, to));
                    return $row;
                }
                return $($gridRows.slice(from, to));
            }
        } catch (e) {
            return $();
        }
    }

})(jQuery, Syncfusion);;;;
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    ej.widget("ejAutocomplete", "ej.Autocomplete", {

        element: null,

        model: null,
        validTags: ["input"],
        _ignoreOnPersist: ["fields", "dataSource", "query", "focusIn", "focusOut", "change", "select",
                            "create", "destroy", "open", "close", "actionComplete", "actionSuccess", "actionFailure"],
        _setFirst: false,

        _rootCSS: "e-autocomplete",
        type: "editor",
        angular: {
            require: ['?ngModel', '^?form', '^?ngModelOptions']
        },

        _requiresID: true,

        defaults: {

            dataSource: null,

            query: null,

            fields: {

                text: null,

                key: null,
                //Deprecated
                category: null,

                groupBy: null,

                htmlAttributes: null
            },
            locale: "en-US",
			
			name:null,

            template: null,
            //Deprecated
            allowGrouping: false,

            enableDistinct: false,
			
			ignoreAccent: false,

            allowSorting: true,

            sortOrder: "ascending",

            htmlAttributes: {},

            multiSelectMode: "none",

            delimiterChar: ',',

            allowAddNew: false,

            addNewText: "Add New",

            showRoundedCorner: false,

            readOnly: false,

            cssClass: "",

            watermarkText: null,

            value: "",

            selectValueByKey: null,

            filterType: "startswith",

            caseSensitiveSearch: false,

            showLoadingIcon: true,
			
			showResetIcon : false,

            itemsCount: 0,

            minCharacter: 1,

            delaySuggestionTimeout: 200,

            showPopupButton: false,

            highlightSearch: false,

            enableAutoFill: false,

            enableRTL: false,

            enabled: true,

            visible: true,

            height: "",

            width: "",

            emptyResultText: "No suggestions",

            animateType: "slide",

            showEmptyResultText: true,

            enablePersistence: false,

            popupHeight: "152px",

            popupWidth: "auto",

            autoFocus: false,

            isChangeOnBlur: false,
			
            multiColumnSettings: {
    
                enable:false,
    
                showHeader:true, 
                
                stringFormat:"{0}",

                searchColumnIndices:[],
                         columns:[{
                           field:null,
           
                            headerText:null,
							
							textAlign:"left",
							
							headerTextAlign:"left",
							
							cssClass: "",
							
							type:"string",

                            filterType: "startswith",
                            
                            visible: true
       
                        }]
            },

            validationRules: null,

            validationMessage: null,

            focusIn: null,

            focusOut: null,

            change: null,

            select: null,

            create: null,

            open: null,

            close: null,

            destroy: null,

            actionBegin: null,

            actionComplete: null,

            actionSuccess: null,

            actionFailure: null
        },

        dataTypes: {
            autoFocus: "boolean",
            watermarkText: "string",
            locale: "string",
            cssClass: "string",
            filterType: "enum",
            caseSensitiveSearch: "boolean",
            showLoadingIcon: "boolean",
            template: "string",
            //Deprecated
            allowGrouping: "boolean",
            enableDistinct: "boolean",
            allowSorting: "boolean",
            sortOrder: "enum",
            allowAddNew: "boolean",
            addNewText: "string",
            showRoundedCorner: "boolean",
			showResetIcon:"boolean",
            readOnly: "boolean",
            itemsCount: "number",
            animateType: "enum",
            minCharacter: "number",
            showPopupButton: "boolean",
            highlightSearch: "boolean",
            enableAutoFill: "boolean",
            enableRTL: "boolean",
            multiSelectMode: "enum",
            delimiterChar: "string",
            emptyResultText: "string",
            showEmptyResultText: "boolean",
            enabled: "boolean",
            visible: "boolean",
            enablePersistence: "boolean",
            isChangeOnBlur: "boolean",
            dataSource: "data",
            query: "data",
            fields: "data",
            validationRules: "data",
            validationMessage: "data",
            htmlAttributes: "data",
            multiColumnSettings: "data",
            columns:"data",
            searchColumnIndices:"array"
        },
        observables: ["value", "selectValueByKey"],
        value: ej.util.valueFunction("value"),
        _selectValueByKey:ej.util.valueFunction("selectValueByKey"),
        enable: function () {
            if (!this.model.enabled) {
                this.model.enabled = true;
                this.target.disabled = false;
                this.element.removeClass("e-disable").attr({ "aria-disabled": false });
                this.element.removeAttr("disabled");
                if (this.model.showPopupButton) this.dropdownbutton.removeClass("e-disable").attr({ "aria-disabled": false });
                if (this.model.multiSelectMode == "visualmode") this._ulBox.removeClass("e-disable").attr({ "aria-disabled": false });
                this.wrapper.removeClass('e-disable-wrap');
            }
        },

        disable: function () {
            if (this.model.enabled) {
                this._hideResult();
                this.model.enabled = false;
                this.target.disabled = true;
                this.element.attr("disabled", "disabled");
                this.element.addClass("e-disable").attr({ "aria-disabled": true });
                if (this.model.showPopupButton) this.dropdownbutton.addClass("e-disable").attr({ "aria-disabled": true });
                if (this.model.multiSelectMode == "visualmode" && this._ulBox) this._ulBox.addClass("e-disable").attr({ "aria-disabled": true });
                this.wrapper.addClass('e-disable-wrap');
            }
        },

        clearText: function () {
            if (this.model.multiSelectMode == "visualmode")
                this._deleteBox(this._ulBox.children("li"));
            this.element.val("");
            this._preVal = "";
            this._valueChange();
            if (!this._isFocused) this._focusOutAction();
            this._hideResult()
        },

        getValue: function () {
            var value = this.value();
            return (value == null) ? "" : value; 
        },

        getSelectedItems: function () {
            if (this._isFocused && this.model.multiSelectMode != "visualmode")
                this._updateSelectedItemArray(this.getValue());
            return this._selectedItems;
        },
        _setValue: function (value) {
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            if (typeof value === "object" || (typeof value === "number" && isNaN(value)) || $.trim(value) == "") value = "";
            if (this.model.multiSelectMode == "visualmode")
                this._hiddenInput.val("");
            this.element.val("");
            if (!this._hiddenInput) this._hiddenInput = ej.buildTag("input#" + this.target.id + "_hidden", "", {}, { type: "hidden", "name": this.element.attr("name") }).insertBefore(this.element);
            if (value) {
                if (this.model.multiSelectMode == "visualmode") {
                    this._selectedItems = [];
                    this._modelValue = value;
                    this._deleteBox(this._ulBox.children("li"));
                    var values = value.split(this.model.delimiterChar);
					this.element.width(1).val("").removeAttr('placeholder');
					if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
                        this._createBoxForObjectType(values);
                    }
                    else {
                        this.suggestionListItems = this.model.dataSource;
                        if (this.suggestionListItems && typeof this.suggestionListItems[0] != "object") {
							this._hiddenInput.val(value);
                            for (var i = 0, length = values.length; i < length; i++) {
                                if (values[i]) {
                                    this._ulBox.append(this._createBox(values[i]));
                                    this._selectedItems.push(values[i]);
                                }
                            }
                            }
                        else this._createBoxForObjectType(values);
                    }
                }
                else {
                    this.element.val(value);
                    this._updateSelectedItemArray(value);
                }
            }
            if (this.model.multiSelectMode != "visualmode") this.value(this.element.val());
            this._preVal = this.element.val();
            !this._isWatermark && this._setWatermarkTxt();
            return value;

        },
        _createBoxForObjectType: function (values) {
			var proxy=this, map=this._declareVariable();
            for (var data = 0, length = values.length; data < length; data++) {
                var _val = $.trim(values[data]);
				if(_val != ""){
                if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
                    this._dataQuery = this._getQuery().where(map[0], "equal", _val, false);
                    this._promise = (this.model.dataSource).executeQuery(this._dataQuery);
                    this._promise.done(function (e) {
                        var res = e.result;
                        proxy._strData = res instanceof Array && res.length ? res[0] : _val;
                        if (!ej.isNullOrUndefined(proxy._strData[map[1]]))
                            proxy._selectKeyInit();
                        proxy._selectedItems.push(proxy._strData);
                    }).fail(function (e) {
                        proxy._selectedItems.push(_val);
                    });
                }
                else {
                    this._dataQuery = ej.Query().where(map[0], "equal", _val, false);
                    this._promise = ej.DataManager(this.suggestionListItems).executeLocal(this._dataQuery);
                    this._strData = this._promise instanceof Array && this._promise.length ? this._promise[0] : _val;
                    if (!ej.isNullOrUndefined(this._strData[map[1]])) 
					  this._selectKeyInit();
					this._selectedItems.push(this._strData);
                }
                if (this.model.multiSelectMode == "visualmode")
                    this._ulBox.append(this._createBox(_val));
            }
			}
			
        },

        _selectKeyInit: function () {
            var mapper = this._declareVariable();
            var delimiterChar = this._delimiterChar();
            if (this.model.multiSelectMode == "visualmode")
                this._hiddenInput.val(this._hiddenInput.val() + (!ej.isNullOrUndefined(this._strData[mapper[1]] || this._strData[mapper[0]]) ? (this._strData[mapper[1]] || this._strData[mapper[0]]) + this.model.delimiterChar : ""));
            if (!ej.isNullOrUndefined(this._strData[mapper[1]])) {
                if (this.model.multiSelectMode != "none") {
                    var keyValue = this._selectValueByKey() != null ? (this._selectValueByKey() + this._strData[mapper[1]] + delimiterChar) : this._strData[mapper[1]] + delimiterChar
                    keyValue = keyValue.split(delimiterChar).reduce(function (a, b) { if (a.indexOf(b) < 0) a.push(b); return a; }, []);
                    this._selectValueByKey(keyValue.join(delimiterChar));
                }
                else this._selectValueByKey(this._strData[mapper[1]]);
            }
        },
		    _declareVariable: function () {
		        var mapper = this.model.fields, mapFld = { _key: null, _text: null, _attr: null }, keyText = [];
			 if(!ej.isNullOrUndefined(mapper)){
				mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text" ;
				mapFld._key = (mapper && mapper.key) ? mapper["key"] : "key" ;
				keyText.push(mapFld._text,mapFld._key);
				return keyText;
			 }
		},

       selectValueByKey: function (key) {
            if (!ej.isNullOrUndefined(key)) {
                var proxy = this;
                key = key.toString();
                var result = this.model.multiSelectMode != "none" ? key.split(this.model.delimiterChar) : key.split(",");
                if (Object.prototype.toString.call(result) === '[object Array]') {
                    $.each(result, function (index, value) {
                        proxy._setOperation($.trim(value), "key");
                    });
                }
            }
        },

        selectValueByText: function (text) {
            this._setOperation(text, "text");
        },

        _eventTrigger: function () {
            var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val() == "" ? null : this.element.val();
            this._trigger("select", { isInteraction: true, value: this.value(), text: currValue, key: this._selectValueKey, item: this._selectedItems });
        },

        setValue: function (text) {
            this._setText(text);
        },

        _setOperation: function (source, value) {
            var bindTo = "", promise, dataQuery, proxy = this, list = this.model.dataSource;
            if (ej.isNullOrUndefined(list)) return false;
            if (typeof list[0] == "object" || list instanceof ej.DataManager) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper[value]) ? mapper[value] : value;
            } else if (value == "key")
                return false;
			if(source){
            if (ej.DataManager && list instanceof ej.DataManager) {
                dataQuery = this._getQuery().where(bindTo, "equal", source, !this.model.caseSensitiveSearch);
                promise = (list).executeQuery(dataQuery);
                promise.done(function (e) {
                    proxy._setText(e.result[0]);
                    proxy._eventTrigger();
                });
            }
            else {
                if ((!list || !list.length || list.length < 1)) return false;
                dataQuery = ej.Query().where(bindTo, "equal", source, !this.model.caseSensitiveSearch);
                promise = ej.DataManager(list).executeLocal(dataQuery);
                this._setText(promise[0]);
				this._eventTrigger();
            }
			}
        },

        _setText: function (data) {
            if (!data) return false;
            var currentValue, keyvalue, mapper = this.model.fields;
            if ((typeof this.model.dataSource[0] == "object") || (typeof data == "object")) {
                currentValue = typeof data == "string" ? data : (mapper && mapper["text"]) ? data[mapper["text"]] : data["text"];
                keyvalue = typeof data == "string" ? data : (mapper && mapper["key"]) ? data[mapper["key"]] : data["key"];
            }
            else currentValue = data;
            if (currentValue) {
                if (this.model.multiSelectMode == "visualmode" && this._removeDuplicates(data)) return false;
                this._valueToTextBox(currentValue, data, true);
                var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val();
                this.value(currValue);
				if (this.model.showResetIcon) this._showReset();
            }
           this._selectValueKey = keyvalue;
           this._selectkey.push(keyvalue);
           if (!ej.isNullOrUndefined(keyvalue)) this._selectValueByKey(this._selectkey + this.model.delimiterChar);                
        },

        _textFormateString: function (data, index) {
            var _textFormatString = this.model.multiColumnSettings.stringFormat
			this._columnsIndex();
            if (!ej.isNullOrUndefined(data) && typeof data == "object") {
                for (var i = 0, length = this._columnIndex.length; i < length; i++)
                    _textFormatString = _textFormatString.replace("{" + this._columnIndex[i] + "}", data[this.model.multiColumnSettings.columns[parseInt(this._columnIndex[i])].field]);
            }
            else if (!ej.isNullOrUndefined(data) && typeof data != "object") {
                _textFormatString = _textFormatString.replace("{" + this._columnIndex[0] + "}", data);
            }
            else
                _textFormatString = this._currList[this._activeItem - 1];
            return _textFormatString;
        },

		_columnsIndex: function(){
			var _proxy = this; this._columnIndex = [];
			$.each(this.model.multiColumnSettings.stringFormat.match(/\{.+?\}/g),function (x,n){ 
				  _proxy._columnIndex[x] = n.slice(1,-1)
            });
            this._searchColumnIndex = [];
            $.each(this.model.multiColumnSettings.searchColumnIndices,function (x,m){ 
                _proxy._searchColumnIndex.push(m);
          });
        },
        _valueToTextBox: function (currentValue, data, flag) {
            var delimiterIndex;
         if(!this._addNewTemplate && this.model.multiColumnSettings.enable && typeof data != "string") 
             currentValue = this._textFormateString(data);
         delimiterIndex = this.model.delimiterChar;
         var key = this._getUniqueKey();
         key = key ? key : (this.model.fields && this.model.fields["key"]) ? data[this.model.fields["key"]] : !ej.isNullOrUndefined(data["key"]) ? data["key"] : key;
         if (!this._hiddenInput) this._hiddenInput = ej.buildTag("input#" + this.target.id + "_hidden", "", {}, { type: "hidden", "name": this.element.attr("name") }).insertBefore(this.element);
         if (!(this._hiddenInput.val() == key || key == null) || temp > -1) {
                 if (this.model.multiSelectMode == "none") this._hiddenInput.val(key || currentValue);
                 else this._hiddenInput.val(this._hiddenInput.val() + (key || currentValue) + delimiterIndex);
         }
         if (this.model.multiSelectMode == "visualmode") {
             data = (typeof data == "string" && this._addNewTemplate && data.substr(data.length - this._addNewTemplate.length) == this._addNewTemplate) ? data.replace(this._addNewTemplate, "") : data;
             if (typeof currentValue == "number") currentValue = this._textFormateString(currentValue);
				var temp = currentValue.indexOf(this._addNewTemplate);
                if (this._addNewTemplate) currentValue = currentValue.substr(0, currentValue.length - this._addNewTemplate.length);
                if(!(this._selectValueByKey() == key || key == null) || temp > -1 )					
			        this._selectValueByKey(this._selectValueByKey() != null ? (this._selectValueByKey() + (temp > -1 ? currentValue : key) + delimiterIndex) : (temp > -1 ? currentValue : key) + delimiterIndex);
			    this._modelValue = ej.isNullOrUndefined(this.value()) ? currentValue + delimiterIndex : this.value() + currentValue + delimiterIndex;
                this.element.val("").removeAttr('placeholder').width(1);
                this._ulBox.append(this._createBox(currentValue));
				if(this.model.height!=""){
                $(this._ulBox).parent().css("overflow","auto");	
                if((this.model.showPopupButton)&&(this._ulBox.parent()[0].scrollHeight!=0)) this.dropdownbutton.css("height",this._ulBox.parent()[0].scrollHeight);				
				}
                this._addNewTemplate = null;
            }
            else if (this.model.multiSelectMode == "delimiter") {
                var delimiterIndex = (this.target.value).lastIndexOf(this.model.delimiterChar);
                if (this._typed || this.element.val() == "" || flag || !this.model.showPopupButton) {
                    if (flag)
                        this.element.val(this.element.val() == "" ? (currentValue + this.model.delimiterChar) : (this.element.val() + currentValue + this.model.delimiterChar));
                    else					 
                        delimiterIndex == -1 ? this.element.val(this._queryString.substr(0, delimiterIndex + 1) + currentValue + this.model.delimiterChar):this.element.val(this._queryString.substr(0, delimiterIndex + ((this.model.delimiterChar).length)) + currentValue + this.model.delimiterChar)
                 }
                else {
                    if(!this.model.enableAutoFill || this.showSuggestionBox) {
					if (this._checkDeli())
                        this.element.val(this._queryString.substr(0, delimiterIndex) + this.model.delimiterChar + currentValue + this.model.delimiterChar);
                    else
                        this.element.val(this.element.val() + this.model.delimiterChar);
                    }
					else if(!this._checkDeli()) this.element.val(this.element.val() + this.model.delimiterChar);
				}
                this._typed = false;
            }
            else {
                this.element.val(currentValue);
                this._selectedItems = [];
            }
            this._selectedItems.push(data);
			this._originalval.push(currentValue);
            this._moveCaretToEnd(this.element[0]);
        },

        _removeDuplicates: function (currentValue) {
            if (this._selectedItems.length == 0) return false;
            if (this._selectedItems.indexOf(currentValue) != -1) return true;
        },

        search: function () {
            if (this.model.enabled && this._checkDelimiter()) {
                this._hideResult();
                this._autoFill = false;
                this._queryString = $.trim(this._queryString);
                if (this._queryString.length > 0) this._OnTextEnter();
            }
        },
        setVisible: function (value) {
            if (value)
                this.wrapper.show();
            else
                this.wrapper.hide();
        },

        hide: function () {
            this._hideResult();
        },

        open: function () {
            this._showFullList();
        },

        _changeWatermark: function (text) {
            if (this._isWatermark) this.element.attr("placeholder", text);
            else this._hiddenSpan.text(text);
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            this.suggestionList.removeClass(this.model.cssClass).addClass(skin);
        },
        _setDropdown: function (boolean) {
            this.model.showPopupButton = boolean;
            if (boolean) this._renderDropdown();
            else this._destroyDropdown();
        },
        _changeHeight: function (height) {
            this.wrapper.height(height);
        },
        _changeWidth: function (width) {
            this.wrapper.width(width);
            this._setListWidth();
        },
        _setCulture: function () {
            this._localizedLabels = this._getLocalizedLabels();
            if (!ej.isNullOrUndefined(this._options)) {
                if (!ej.isNullOrUndefined(this._options.addNewText)) this._localizedLabels.addNewText = this._options.addNewText;
                if (!ej.isNullOrUndefined(this._options.emptyResultText)) this._localizedLabels.emptyResultText = this._options.emptyResultText;
                if (!ej.isNullOrUndefined(this._options.watermarkText)) this._localizedLabels.watermarkText = this._options.watermarkText;
            }
            this.model.addNewText = this._localizedLabels.addNewText;
            this.model.emptyResultText = this._localizedLabels.emptyResultText;
            this.model.watermarkText = this._localizedLabels.watermarkText;
        },
        
        _init: function (options) {
            this._options = options;
            this._selectkey=[];
            this._hiddenColumns = [];
            this._setCulture();
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            //deprecated Property Added
            this.model.fields.groupBy = !this.model.fields.groupBy ? this.model.fields.category : this.model.fields.groupBy;
            this._initialize();
            this._render();
            this._wireEvents();
            this.initialRender = false;
            if (this.model.validationRules != null) {
                this._initValidator();
                this._setValidation();
            }
        },

        _initValidator: function () {
            (!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
        },
        _setValidation: function () {
            if (!this.model.validationRules) return;
            var element = this.model.multiSelectMode == "visualmode" ? this._hiddenInput : this.element;
            element.rules("add", this.model.validationRules);
            var validator = this.element.closest("form").data("validator");
            validator = validator ? validator : this.element.closest("form").validate();
            var name = element.attr("name");
            validator.settings.messages[name] = {};
            for (var ruleName in this.model.validationRules) {
                var message = null;
                if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
                    if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
                        message = this.model.validationRules["messages"][ruleName];
                    else {
                        validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
                        for (var msgName in this.model.validationMessage)
                            ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
                    }
                    validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
                }
            }
        },
		_removeDuplicateValue: function(values) {
			return values.split(this.model.delimiterChar).reduce(function (a, b) { if (a.indexOf(b) < 0) a.push(b); return a; }, []).join(this.model.delimiterChar);
		},
        _delimiterChar:function(){
            return (this.model.multiSelectMode != "none" ? this.model.delimiterChar : "");
        },
        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "dataSource": this.model.dataSource = null; break;
                    case "watermarkText": this._changeWatermark(options[option]); break;
                    case "delaySuggestionTimeout": this.model.delaySuggestionTimeout = parseInt(options[option]); break;
                    case "value":
					var optionValue = ej.util.getVal(options[option]);
                        var deli = this._delimiterChar();
                        if (this.model.multiSelectMode != "none") {
                            value = optionValue.substr(optionValue.length - deli.length) == deli ? optionValue : optionValue + deli;
                            optionValue = optionValue == "" ? this.value() : (this.value() ? this.value() : "") + value;
                            if (this.model.multiSelectMode == "visualmode") {
                                optionValue = optionValue.split(deli).reduce(function (a, b) { if (a.indexOf(b) < 0) a.push(b); return a; }, []);
                                optionValue = optionValue.join(deli);
                            }
                        }
                        this.value(this._setValue(optionValue));
                        var data = this.model.dataSource;
                        if (ej.DataManager && data instanceof ej.DataManager) this._loadInitData();
                        else this._setHiddenkeyByValue(data);
                        this._modelValue = this.value()
                        var currValue = this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val();
                        this._changeEvtTrigger(currValue);
                        if (this.model.showResetIcon) this._showReset();
                        break;
                    case "showPopupButton": this._setDropdown(options[option]); break;
                    case "enableRTL": this._RightToLeft(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "readOnly": this._checkReadOnly(options[option]); break;
                    case "delimiterChar": var delchar = this.model.delimiterChar;
                        options[option] = this._validateDelimiter(options[option]);
                        this.model.delimiterChar = options[option];
                        this.element.val(this.value().replace(new RegExp(delchar, 'g'), this.model.delimiterChar));
                        this.value(this.element.val());
                        break;
                    case "validationRules":
                        if (this.model.validationRules != null) {
                            this.element.rules('remove');
                            this.model.validationMessage = null;
                        }
                        this.model.validationRules = options[option];
                        if (this.model.validationRules != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "validationMessage":
                        this.model.validationMessage = options[option];
                        if (this.model.validationRules != null && this.model.validationMessage != null) {
                            this._initValidator();
                            this._setValidation();
                        }
                        break;
                    case "locale":
                        if (ej.Autocomplete.Locale[options[option]]) {
                            this.model.locale = options[option];
                            this._setCulture();
                            this._setWatermark();
                        } else  this.model.locale = options[option];
                        break;
                    case "filterType":
                        var arr = [];
                        for (var key in ej.filterType)
                            if (ej.filterType.hasOwnProperty(key))
                                arr.push(ej.filterType[key]);
                        if (arr.indexOf(options[option]) > -1)
                            this.model.filterType = options[option];
                        else
                            options[option] = this.model.filterType;
                        break;
                    case "multiSelectMode":
                        this.model.multiSelectMode = options[option];
                         var delimiter =this._delimiterChar();
                         if (this.model.multiSelectMode != "none") {
                             var key = this._selectValueByKey(), value = this.value();
                             if (value) {
                                 value = value.substr(value.length - delimiter.length) == delimiter ? value : value + delimiter
                                 this.value(value);
								 if(this.model.multiSelectMode == "visualmode") this.value(this._removeDuplicateValue(this.value()))
                             }
                             if (key) {
                             this._selectValueByKey(key.substr(key.length - delimiter.length) == delimiter ? key : key + delimiter);
							 if(this.model.multiSelectMode == "visualmode") this._selectValueByKey(this._removeDuplicateValue(this._selectValueByKey()));
							 }
						 }
                         else {

                         }
                        if (options[option] == "visualmode") {
                            if (this.model.validationRules != null)
                                this.element.rules('remove');
							if (this.element.val() != "" && this._isWatermark ) this.element.removeAttr("placeholder");                            
                        }
                        else if (this.element.hasClass("e-visual-mode")) 
                            this._destroyBoxModel();
                        this._destroy();
                        this._init();
                        this._setValue(this.value());
                        this._setValidation();
                        if (ej.isNullOrUndefined(this.element.attr("placeholder")) && this._isWatermark)
                            this._setWatermark();
                        break;
                    case "enabled": this._disabled(!options[option]); break;
                    case "visible":
                        this.setVisible(options[option]);
                        break;
                    case "height": this._changeHeight(options[option]); break;
                    case "width": this._changeWidth(options[option]); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "itemsCount ": if (options[option] <= 0 || isNaN(options[option])) options[option] = 0; break;
                    case "popupHeight": this.suggestionList.css({ "max-height": isNaN(options[option]) ? options[option]: options[option] + "px" }); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "selectValueByKey":
                        deli = this._delimiterChar();
                        key = ej.util.getVal(options[option]);
                        this.selectValueByKey(key);
                        var keyValue =   (this.model.multiSelectMode != "none") ? this._selectValueByKey() + options[option]:options[option];
                        keyValue = keyValue.split(deli).reduce(function (a, b) { if (a.indexOf(b) < 0) a.push(b); return a; }, []);
                        keyValue=keyValue.join(deli);
                        options[option] = keyValue.substr(keyValue.length - deli.length) == deli ? keyValue  : keyValue+ deli;
                        break
                    case "htmlAttributes": this._addAttr(options[option]); break;
                    case "emptyResultText":
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options["emptyResultText"] = this.model.emptyResultText = options[option];
                        this._setCulture(); break;
                    case "addNewText":
                        if (ej.isNullOrUndefined(this._options)) this._options = {};
                        this._options["addNewText"] = this.model.emptyResultText = options[option];
                        this._setCulture(); break;
					case "multiColumnSettings":
						if(!ej.isNullOrUndefined(options[option].enable)) this.model.multiColumnSettings.enable = options[option].enable;
						if(!ej.isNullOrUndefined(options[option].showHeader)) this.model.multiColumnSettings.showHeader = options[option].showHeader;
                        if(!ej.isNullOrUndefined(options[option].stringFormat)) this.model.multiColumnSettings.stringFormat = options[option].stringFormat;
                        if(!ej.isNullOrUndefined(options[option].searchColumnIndices)) this.model.multiColumnSettings.searchColumnIndices = options[option].searchColumnIndices;
                        if(!ej.isNullOrUndefined(options[option].columns)) this.model.multiColumnSettings.columns = options[option].columns;
						this.suggestionList.remove();
						this._renderSuggestionList();
						break; 
                    case "showResetIcon": this.model.showResetIcon = options[option];
                        if (options[option] && !ej.isNullOrUndefined(this.value()) && this.value()!="") this._showReset();
						else this._removeReset();
						break;
                }
				this._hideResult();
            }
        },

        _destroy: function () {
            this.element.width("").removeAttr("role aria-label aria-expanded aria-haspopup aria-autocomplete autocomplete placeholder aria-owns aria-disabled disabled");
            this.element.insertAfter(this.wrapper);
            if (this.model.multiSelectMode == "visualmode")
                this.element.removeClass("e-visual-mode").attr("name", this._hiddenInput.attr("name"));
            if (!this.model.enabled) this.element.removeClass('e-disable');
            this.wrapper.remove();
            this.element.removeClass("e-input").val("");
            if (this._isWatermark) this.element.removeAttr("placeholder");
            this._hideResult();
            this.suggestionList.remove();
        },

        _initialize: function () {
            this.value(this.value() === "" ? this.element[0].value : this.value());
            this.element.attr("role", "combobox").attr("aria-label", "Autocomplete textbox").attr("aria-expanded", false).attr("aria-autocomplete", "list");
            if(ej.isNullOrUndefined(this.element.attr('tabindex')))
				this.element.attr("tabindex", 0);
			if (/Edge\/12./i.test(navigator.userAgent)) this.element.addClass('edge-browser');
            this.target = this.element[0];
            this.dropdownbutton = null;
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            this.showSuggestionBox = false;
            this.noresult = true;
            this._queryString = null;
            this.suggLen = 0;
            this._selectedItems = [];
            this._modelValue = "";
            this._activeItem = 0;
			this._originalval = [];
            this.ctrlKeyPressed = false;
            this._isFocused = false;
            this._isOpened = false;
            this._typed = false;
            this._cancelEvent = false;
            this._isWatermark = this._checkWatermarkSupport();
			this._selectedObj = [];
			this.eleClick = false;
        },

        _render: function () {
            this._renderWrapper();
            this._addAttr(this.model.htmlAttributes);
            this._setDimentions();
            this._renderDropdown();
            this._checkProperties();
            this._isWatermark ? this._setWatermark() : this._setWatermarkTxt();
            this._renderSuggestionList();
            this._RightToLeft(this.model.enableRTL);
            this._setRoundedCorner(this.model.showRoundedCorner);
            this.setVisible(this.model.visible);
            this._setListPosition();
        },
        _renderWrapper: function () {
            this.element.addClass("e-input").attr("autocomplete", "off");
			if(this.model.multiSelectMode == "visualmode"){
            this.wrapper = ej.buildTag("div.e-atc e-widget " + this.model.cssClass + "#" + this.target.id + "_wrapper").insertAfter(this.element);
            this.container = ej.buildTag("div.e-in-wrap e-box").append(this.element);
            }else{
            this.wrapper = ej.buildTag("span.e-atc e-widget " + this.model.cssClass + "#" + this.target.id + "_wrapper").insertAfter(this.element);
            this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
            }
            if (document.activeElement == this.element[0]) var focus = true;
            this.wrapper.append(this.container);
            if (!this._isWatermark) {
                this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
                this._hiddenSpan.text(this.model.watermarkText);
                this._hiddenSpan.css("display", "none");
                var proxy = this;
                this._hiddenSpan.click(function (event) {
                    if (!this._isFocused) proxy.element.focus();
                });
            }
            if (focus) this.element.focus();
        },

        _renderDropdown: function () {
            if (this.model.showPopupButton) {
                var span = ej.buildTag("span.e-icon e-search").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                this.dropdownbutton = ej.buildTag("span.e-select#" + this.target.id + "_dropdown").attr((this._isIE8) ? { 'unselectable': 'on' } : {}).append(span);
                this.container.append(this.dropdownbutton).addClass("e-padding");
                if (!this.model.enabled)this.dropdownbutton.addClass("e-disable").attr({ "aria-disabled": true });
                this.dropdownbutton.on("mousedown", $.proxy(this._OnDropdownClick, this));
            }
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "required") proxy.element.attr(key, value);
                if (key == "class") proxy.wrapper.addClass(value);
                else if (key == "name") proxy.element.attr(key, value);
                else if (key == "disabled" && value == "disabled") proxy._disabled(true);
                else if (key == "readOnly" && value === true) proxy._checkReadOnly(true);
                else if (key == "id") {
                    proxy.wrapper.attr(key, value + "_wrapper");
                    proxy.element.attr(key, value);
                }
                else proxy.wrapper.attr(key, value);
            });
        },
        _setDimentions: function () {
            if (this.model.height)
                this.wrapper.height(this.model.height);
            if (this.model.width)
                this.wrapper.width(this.model.width);
        },

        _renderBoxModel: function () {
            this._ulBox = ej.buildTag("ul.e-ul e-boxes");
            var disableClass = this.model.enabled ? "" : "e-disable";
            this._ulBox.addClass(disableClass);
            this._hiddenInput = ej.buildTag("input#" + this.target.id + "_hidden", "", {}, { type: "hidden" }).insertBefore(this.element);
            this._hiddenInput.attr("name", this.element.attr("name"));
            this.element.val("").removeAttr("name").addClass("e-visual-mode");
            if (!this._isWatermark) this.element.width(1);
            this.container.prepend(this._hiddenInput, this._ulBox);
            if(this.model.height!="")
			  this.wrapper.height(this.model.height);
			else 
				this.wrapper.height("auto");
            this._on(this.container, "mousedown", function (e) {
                if (!this.model.enabled) return false;
                var $target = $(e.target);
                if (!$target.is(this.element)) {
                    e.preventDefault();
                    if (!this._isFocused) this.element.focus();
                    if ($target.hasClass("e-options")) {
                        if (!e.ctrlKey && $target.siblings().hasClass("e-active")) this._removeActive();
                        if ($target.hasClass("e-active")) $target.removeClass("e-active");
                        else $target.addClass("e-active");
                    }
                    else this._moveCaretToEnd(this.element[0]);
                }
                if (!e.ctrlKey && ($target.hasClass("e-boxes") || $target.hasClass("e-input"))) this._removeActive();
            });
        },
        _destroyBoxModel: function () {
            this.container.prepend(this.element);
            this.element.attr({ name: this._hiddenInput.attr("name") }).removeAttr("style").removeClass("e-visual-mode");
            this.wrapper.height(this.model.height);
            this._hiddenInput.remove();
			this._hiddenInput = null;
            this._ulBox.remove();
            this._off(this.container, "mousedown");
        },
        _deleteLastBox: function () {
            var items = this._ulBox.children();
            var item = items.last(), flag = item.hasClass("e-active");
            this._removeActive();
            flag ? this._deleteBox(item) : item.addClass("e-active");
        },
        _deleteBox: function (items) {
            for (var i = 0, length = items.length; i < length; i++) {
                var boxes = this._ulBox.children();
                var index = boxes.index(items[i]);
                this._selectedItems.splice(index, 1);

                var deli = this.model.delimiterChar;
                var values = this._hiddenInput.val().split(deli);
                values.splice(index, 1);
                this._hiddenInput.val(values.join(deli));
                this._selectValueByKey(values.join(deli));

                var val = this._modelValue.split(deli);
                val.splice(index, 1);
                this._modelValue = val.join(deli);
                $(items[i]).remove();
				this.deletedItem = $(items)[0].innerText;
            }
            if (this.showSuggestionBox) this._refreshPopup();
            this._valueChange();
            if (this.value() == "" && this.model.height != "") {
                $(this._ulBox).parent().css("overflow", "hidden");
                this.dropdownbutton.css("height", this.model.height);
            }
            if (this._hiddenInput.val() == "")
                this._setWatermark();
        },
        _removeActive: function () {
            this._ulBox.children("li.e-active").removeClass("e-active");
        },
        _adjustWidth: function () {
            var tempSpan = ej.buildTag("span", this.element.val()), wid, minWidth;
            this.container.append(tempSpan);
            minWidth = 30;  //  some additional width for textbox in visualmode
            wid = tempSpan.width() + minWidth;
            if (this.element.width() != wid)
                this.element.width(wid);
            if (this._hiddenInput.val() == "")
                this._setWatermark();
            tempSpan.remove();
        },

        _checkProperties: function () {
            this._checkReadOnly(this.model.readOnly);
            this.model.delimiterChar = this._validateDelimiter(this.model.delimiterChar);
            if (!this.model.enabled) {
                this.model.enabled = true;
                this._disabled(true);
            }
            else if (this.model.enabled && $(this.element).hasClass("e-disable")) {
                this.model.enabled = false;
                this._disabled(false);
            }
            this._checkNameAttr();
            if (this.model.multiSelectMode == "visualmode") this._renderBoxModel();
            if (!ej.isNullOrUndefined(this._selectValueByKey())) {
                var key = this._selectValueByKey().toString();
                if (this.model.multiSelectMode != "none") {
                    key = key.substr(key.length - this.model.delimiterChar.length) == this.model.delimiterChar ? key : key + this.model.delimiterChar;
                    ((this.model.multiSelectMode == "visualmode") ? this._selectValueByKey(null) : this._selectValueByKey(key));
                }
                this.selectValueByKey(key);
				if (this.model.showResetIcon) this._showReset();
            }
            else {
				var value = (!ej.isNullOrUndefined(this.value())) ? this.value().toString() : this.value();
                if (this.model.multiSelectMode != "none" && (!ej.isNullOrUndefined(value) && value !="")) {
                    value = value.substr(value.length - this.model.delimiterChar.length) == this.model.delimiterChar ? value : value + this.model.delimiterChar;
                }
                this.value(this._setValue(value));
				if(value){
                var data = this.model.dataSource;
                if (ej.DataManager && data instanceof ej.DataManager) this._loadInitData(value);
                else this._setHiddenkeyByValue(data); 
				}
                if (this.model.showResetIcon && this.value() != "") this._showReset();
            }
        },

        _loadInitData: function (source) {
		        var results = this.model.dataSource, proxy = this;
		        var mapper = this.model.fields;
		        var bindTo = (mapper && mapper["text"]) ? mapper["text"] : "text";
		        if (this.model.multiSelectMode != "none")
		            source = source.split(this.model.delimiterChar);
		        if (ej.DataManager && results instanceof ej.DataManager) {
		            if (!proxy._trigger("actionBegin", { requestFrom: "default" })) {
		                var queryPromise, queryCollection = this._getQuery();
		                if (typeof (source) == "object") {
		                    for (var k = 0; k < source.length - 1; k++)
		                        queryCollection.queries.push(ej.Predicate(bindTo, "equal", source[k].trim(), !this.model.caseSensitiveSearch));
		                    queryPromise = results.executeQuery((queryCollection));
		                }
		                else
		                    queryPromise = results.executeQuery(this._getQuery().where(bindTo, "equal", source, !this.model.caseSensitiveSearch));
		                queryPromise.done(function (e) {
		                    proxy._trigger("actionSuccess", { e: e, requestFrom: "default" });
		                    if (!e.result || e.result.length > 0) proxy._setHiddenkeyByValue(e.result);
		                });
		            }
		        }
		    },

		    _setHiddenkeyByValue: function (data) {
				if(ej.isNullOrUndefined(this.value())) this.value("");
                var currValue = this.value(), results = data, totalValue = [], dval = [];
		        currValue = (this.model.multiSelectMode == "none") ? currValue : currValue.split(this.model.delimiterChar);
                if (!ej.isNullOrUndefined(results)) {
		            for (var i = 0; i < results.length; i++) {
		                var _text = this._getField(results[i], this.model.fields["text"]);
		                if (typeof (_text) == "number") _text = _text.toString();
		                if (!ej.isNullOrUndefined(this.model.fields["key"])) {
		                    var _key = this._getField(results[i], this.model.fields["key"]);
							if (typeof (currValue) == "string") {
							    if (_text == currValue)
							        this._hiddenInput.val(_key);
							} else {
							    for (var j = 0; j < currValue.length - 1; j++) {
							        if (_text == currValue[j]) {
							            if (this._hiddenInput.val() == "")
							                this._hiddenInput.val(_key);
							            else
							                this._hiddenInput.val(this._hiddenInput.val() + this.model.delimiterChar + _key + this.model.delimiterChar);
							        }
							    }
							}
		                }
		                else if (ej.isNullOrUndefined(this.model.fields["key"])) {
		                    if (typeof (currValue) == "object") {
		                        for (var k = 0; k < currValue.length - 1; k++)
		                            if (_text == currValue[k].trim())
		                                dval.push(_text);
		                        dval = this._removeDuplicateVal(dval);
                                this._hiddenInput.val(dval);
		                    }
		                    else if (_text == currValue) {
		                        this._hiddenInput.val(_text);
		                    }
		                }
		                totalValue.push(_text);
		            }
		            if (typeof (currValue) != "object" && totalValue.indexOf(currValue) == -1) this._hiddenInput.val(currValue);
		        }
		    },
        
        _checkNameAttr: function () {			
           this.model.name = this.element.attr("name") != null ? this.element.attr("name") : (this.model.name != null ? this.model.name : this.element[0].id);
           this.element.attr("name", this.model.name);
        },

        _disabled: function (boolean) {
            if (boolean) this.disable();
            else this.enable();
        },

        _destroyDropdown: function () {
            this.dropdownbutton.off("mousedown", $.proxy(this._OnDropdownClick, this));
            this.dropdownbutton.remove();
            this.dropdownbutton = null;
            this.container.removeClass("e-padding");
        },

        _validateDelimiter: function (deli) {
           if ($.trim(deli).length == deli.length || deli.length != null) {
                var RegEx = /^[a-zA-Z0-9]+$/;
                if (!RegEx.test(deli)) return deli;
            }
            return ",";
        },

        _checkWatermarkSupport: function () {
            return 'placeholder' in document.createElement('input');
        },
        _setWatermark: function () {
            if ((this.model.watermarkText && (this.value() == ""|| ej.isNullOrUndefined(this.value()))) || (this.model.multiSelectMode != "visualmode"))
                this.element.attr("placeholder", this.model.watermarkText).width("");
        },
        _setWatermarkTxt: function () {
            if (this.model.watermarkText != null && $.trim(this.element.val()) == "" && (this.model.multiSelectMode != "visualmode" || $.trim(this._hiddenInput.val()) == "")) {
                var watermark = (this.model.watermarkText != null) ? this.model.watermarkText : this._localizedLabels.watermarkText;
                this._hiddenSpan.css("display", "block").text(watermark);
            }
        },

        _renderSuggestionList: function () {
            var oldWrapper = $("#" + this.element[0].id + "_suggestion").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.suggestionList = ej.buildTag("div.e-atc-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.target.id + "_suggestion", "", { "display": "none" }).attr("role", "listbox");
            this.element.attr("aria-owns", this.target.id + "_suggestion");
            this.popup = this.suggestionList;
            var scrollerDiv = ej.buildTag("div");
			if(this.model.multiColumnSettings.enable) {
				this._tableColumn = ej.buildTag("table","", {"border": 0, "padding": 0, "border-spacing": 0}, { "role": "listbox", "class" : "e-atc-tableContent" });
				this._listEventBind(this._tableColumn,"tr");
                this._headerColGroup = document.createElement("colgroup");				
				if(this.model.multiColumnSettings.showHeader) {
				this._tableHeaderDiv = ej.buildTag("div",{},{},{"class":"e-atc-tableHeader "+((this.model.enableRTL)? "e-atc-tableHeaderRTL" : "e-atc-tableHeaderScroll")});
				var headerDiv = ej.buildTag("div",{},{},{"class":"e-atc-tableHeaderContent e-atc-tableHeaderBorder"}); 
				var tr = document.createElement("tr");
				this._tableHeader = ej.buildTag("table" , "" ,{"border-spacing": "0.25px"},{});
									
                for (var z = 0, length = this.model.multiColumnSettings.columns.length; z < length; z++) {
                    if (this.model.multiColumnSettings.columns[z].visible != false) {
                        var thElement = ej.buildTag("th", (this.model.multiColumnSettings.columns[z].headerText ? this.model.multiColumnSettings.columns[z].headerText : "column" + z), { "text-align": (this.model.multiColumnSettings.columns[z].headerTextAlign ? this.model.multiColumnSettings.columns[z].headerTextAlign : "left") }, { "class": ((z == this.model.multiColumnSettings.columns.length - 1) ? "" : (this.model.enableRTL ? "e-atc-thleft" : "e-atc-thright")) });
                        $(tr).append(thElement);
                        var colElement = document.createElement("col");
                        $(this._headerColGroup).append(colElement);
                    } else {
                        this._hiddenColumns.push(this.model.multiColumnSettings.columns[z]);
                    }
				}
				$(this._tableHeaderDiv).append($(headerDiv).append($(this._tableHeader).append(tr).append(this._headerColGroup)));
				this.suggestionList.append(this._tableHeaderDiv);
				}
				else {
                    for (var z = 0, length = this.model.multiColumnSettings.columns.length; z < length; z++)
                        $(this._headerColGroup).append(document.createElement("col"));
					this._tableColumn.append(this._headerColGroup);
				}
				var scrollerParent = ej.buildTag("div");
				scrollerParent.append(this._tableColumn);
				scrollerDiv.append(scrollerParent);
			}
			else {
                this.ul = ej.buildTag("ul.e-ul").attr("role", "listbox");
				this._listEventBind(this.ul,"li:not('.e-category')");
				scrollerDiv.append(this.ul);
			}
            this.suggestionList.append(scrollerDiv);
            $('body').append(this.suggestionList);
            this._setListWidth();
            this._setListHeight();
			if(this.model.multiColumnSettings.enable) {
				scrollerDiv.ejScroller({ height: 0, width: 0, scrollerSize: 20 });
            this.scrollerObj = scrollerDiv.ejScroller("instance");
			}
			else {
            this.suggestionList.ejScroller({ height: 0, width: 0, scrollerSize: 20 });
            this.scrollerObj = this.suggestionList.ejScroller("instance");
				}
        },

		_listEventBind: function (element,target) {
			element.on({
					mouseenter: $.proxy(this._OnMouseEnter, this),
					mouseleave: $.proxy(this._OnMouseLeave, this),
					click: $.proxy(this._OnMouseClick, this)
				}, target);
		},
		
        _checkEmptyList: function () {
            if (this.model.multiSelectMode == "visualmode") this._removeRepeated();
            if (this.suggestionListItems.length == 0) {
                this.suggestionListItems.push(this.model.emptyResultText);
                this.noresult = true;
            }
            else this.noresult = false;
        },
        _showSuggestionList: function (e) {
            this.suggestionListItems = this.model.enableDistinct ? ej.dataUtil.distinct(this.suggestionListItems, (typeof this.suggestionListItems[0] != "object" ? "" : (this.model.fields && this.model.fields.text) ? this.model.fields["text"] : "text"), true) : this.suggestionListItems;
            if(this.model.itemsCount > 0) this.suggestionListItems = ej.DataManager(this.suggestionListItems).executeLocal(ej.Query().take(this.model.itemsCount));
            this._checkEmptyList();
            this._addNewTemplate = null;
            if (this.noresult && this.model.multiSelectMode == "visualmode" && this.model.allowAddNew && this.element.val() != "" && !this._repeatRemove ) {
                this.noresult = false;
                this.suggestionListItems.pop();
                this._addNewTemplate = "   (" + this.model.addNewText + ")";
                this.suggestionListItems.push(this.element.val() + this._addNewTemplate);
                this._checkEmptyList();
            }

            if (!this.noresult || this.model.showEmptyResultText)
                this._generateSuggestionList(e);
        },

        _generateSuggestionList: function (e) {
            var list = this.suggestionListItems, i, suggList = [];
            (!this.model.multiColumnSettings.enable) ? this.ul.empty() : this._tableColumn.empty() && this.model.multiColumnSettings.showHeader && this._tableHeaderDiv.css("display", "");
            var _proxy = this;
            var fragmentParent = document.createDocumentFragment();
            if (typeof list[0] != "object") {
                if (_proxy.model.multiColumnSettings.enable) {
					var tbodyEle = ej.buildTag("tbody"); 
                    var trColumnEle = ej.buildTag("tr").attr("role", "option").attr((_proxy._isIE8) ? { 'unselectable': 'on' } : {});
                    var tdEle = ej.buildTag("td", {}, {}, { "role": "option" });
                    for (var i = 0, listLength = list.length; listLength > i; i++) {
                        var _txt = (_proxy.model.highlightSearch && !_proxy.noresult) ? _proxy._highlightSuggestion(list[i]) : list[i];
                        var trColumn = trColumnEle.clone();
                        var td = tdEle.clone()
                         $(td).attr((_proxy._isIE8) ? { 'unselectable': 'on' } : {}).attr((list[i] != (list.length - 1)) ? { "class": "e-atc-tdbottom" } : {}).html(_txt);
                        trColumn[0].appendChild(td[0]);
						tbodyEle[0].appendChild(trColumn[0]);
                        fragmentParent.appendChild(tbodyEle[0]);
                        _proxy.model.showEmptyResultText && _proxy.model.emptyResultText == _txt && _proxy.model.multiColumnSettings.showHeader && _proxy._tableHeaderDiv.css("display", "none") && $(td).removeClass("e-atc-tdbottom");
                        
                        if ((_proxy._addNewTemplate) && !ej.isNullOrUndefined(_proxy._tableHeaderDiv))
                            _proxy._tableHeaderDiv.css("display", "none");
                    }
                    _proxy._tableColumn[0].appendChild(fragmentParent);
                }
                else {
                    var liEle = ej.buildTag("li", {}, {}, { "role": "option" }).attr((_proxy._isIE8) ? { 'unselectable': 'on' } : {})
                    for (var i = 0, listLength = list.length; listLength > i; i++) {
                        var _txt = (_proxy.model.highlightSearch && !_proxy.noresult) ? _proxy._highlightSuggestion(list[i]) : list[i];
                        var li = liEle.clone();
                        li[0].innerHTML=_txt;
                        fragmentParent.appendChild(li[0])
                    }
                    _proxy.ul[0].appendChild(fragmentParent);
                }
                this._currList = list;
                this._mapper = { txt: null, key: null };
            }
            else {
                var mapper = this.model.fields, mapFld = { _key: null, _text: null, _attr: null };
                mapFld._key = (mapper && mapper.key) ? mapper["key"] : "key";
                mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
                mapFld._attr = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
                this._mapper = { txt: mapFld._text, key: mapFld._key }, this._currList = [];
                if (this.model.fields.groupBy) {
                    var mapCateg = (mapper && mapper.groupBy) ? mapper["groupBy"] : "groupBy", groupedList, _query;
                    _query = ej.Query().group(mapCateg);
                    this._addSortingQuery(_query, "key");
                    groupedList = ej.DataManager(list).executeLocal(_query);
                    this._swapUnCategorized(groupedList);
                    groupedList.forEach(function (each, i) {
                        if (each.key)
                            if (_proxy.model.multiColumnSettings.enable) {
                                var trColumn = ej.buildTag("tr.e-category").attr("role", "option").attr((_proxy._isIE8) ? { 'unselectable': 'on' } : {});
                                trColumn.append(ej.buildTag("td", each.key).attr("role", "option").attr((_proxy._isIE8) ? { 'unselectable': 'on' } : {}).attr((i != (list.length - 1)) ? { "class": "e-atc-tdbottom" } : {}));
                                _proxy._tableColumn.append(trColumn);
                            }
                            else _proxy.ul.append(ej.buildTag("li.e-category", each.key).attr("role", "option").attr((_proxy._isIE8) ? { 'unselectable': 'on' } : {}));
                        _proxy._generateLi(each.items, mapFld);
                    });
                }
                else this._generateLi(list, mapFld);
            }
            for (var i = 0, listLength = list.length; listLength > i; i++) {
                if (this.model.multiColumnSettings.enable) {
                    var data = this._textFormateString(this._currList[i]);
                    if (data == this.value()) {
                        var activeText = this._getLiTags()[i];
                        $(activeText).addClass('e-activeli');
                    }
                }
                else {
                    var value = this.value().split(this.model.delimiterChar);
                    for (var k = 0; k <= value.length; k++) {
                        if (this._currList[i] == value[k]) {
                            var activeText = this._getLiTags()[i];
                            $(activeText).addClass('e-activeli');
                        }
                    }
                }
            }
            if (this._getLiTags().length > 0) {
				this._showResult(e);
			}

        },

        _swapUnCategorized: function (list) {
            var length = list.length;
            for (var i = 0; i < length; i++) {
                if (!list[i].key) {
                    for (var j = i; j > 0; j--) {
                        list[j] = list[j - 1];
                    }
                    list[j] = list[i];
                    return false;
                }
            }
        },

        _generateLi: function (list, mapFld) {
            var _proxy = this;
            var fragmentParent = document.createDocumentFragment();
            var fragment = document.createDocumentFragment();
            if (_proxy.model.multiColumnSettings.enable) {
                var multiColumnLength = _proxy.model.multiColumnSettings.columns.length;
                this._tableColumn.append(ej.buildTag("tbody"));
                var trEle = ej.buildTag("tr");
                var tdEle = ej.buildTag("td");
                for (var j = 0, listLength = list.length; listLength > j; j++) {
                    var _text = this._getField(list[j],mapFld._text);
                    var _key = this._getField(list[j],mapFld._key);
                    if (!ej.isNullOrUndefined(_text) || _proxy.model.multiColumnSettings.enable) {
                        var fieldAttr = _proxy._getField(list[j]);
                        var tr = trEle.clone();
                        tr[0].className = (j % 2) ? "e-atc-trbgcolor" : "";
                        for (var z = 0; z < multiColumnLength; z++) {
                            if (this.model.multiColumnSettings.columns[z].visible == false) {
                                continue;
                            }
                            var td = tdEle.clone();
                            if(this.model.multiColumnSettings.searchColumnIndices.length !=0)
                            td[0].innerHTML = (_proxy.model.highlightSearch && $.inArray(z, _proxy._searchColumnIndex) > -1) ? _proxy._highlightSuggestion(_proxy._getField(list[j], _proxy.model.multiColumnSettings.columns[z].field).toString()) : _proxy._getField(list[j], _proxy.model.multiColumnSettings.columns[z].field);
                            else
                                td[0].innerHTML = (_proxy.model.highlightSearch && $.inArray(z.toString(), _proxy._columnIndex) > -1) ? ((!ej.isNullOrUndefined(_proxy._getField(list[j], _proxy.model.multiColumnSettings.columns[z].field))) ? _proxy._highlightSuggestion(_proxy._getField(list[j], _proxy.model.multiColumnSettings.columns[z].field).toString()) : _proxy._highlightSuggestion("")) : _proxy._getField(list[j], _proxy.model.multiColumnSettings.columns[z].field);
                            td[0].className = (((j != (list.length - 1)) ? "e-atc-tdbottom " : "") + ((z != (_proxy.model.multiColumnSettings.columns.length - 1)) ? ((_proxy.model.enableRTL) ? "e-atc-tdleft " : "e-atc-tdright ") : ""))+(_proxy.model.multiColumnSettings.columns[z].cssClass ?_proxy.model.multiColumnSettings.columns[z].cssClass:"" );
                            td[0].style.textAlign = (_proxy.model.multiColumnSettings.columns[z].textAlign ? _proxy.model.multiColumnSettings.columns[z].textAlign:"left");
							fragment.appendChild(td[0])
                        }
                        tr[0].appendChild(fragment);
                        if (_key)
                            tr.attr("id", _key);
                        _proxy._setAttributes(_proxy._getField(list[j], mapFld._attr), tr[0]);
                        fragmentParent.appendChild(tr[0]);
                        _proxy._currList = _proxy._currList.concat([list[j]]);
                    }
                }
                $(_proxy._tableColumn).find("tbody")[0].appendChild(fragmentParent);
            }
            else {
				var liEle= $("<li></li>");
                for (var j = 0, listLength = list.length; listLength > j; j++) {
                    var _text = this._getField(list[j],mapFld._text);
                    var _key = this._getField(list[j],mapFld._key);
                    if (!ej.isNullOrUndefined(_text)) {
                        if (_proxy.model.highlightSearch) _text = _proxy._highlightSuggestion(_text);
                        if (_proxy.model.template) _text = _proxy._getTemplatedString(list[j], mapFld._text, _text);
                        var li = liEle.clone();
                        li[0].innerHTML += _text;
                        if (_key)
                             li[0].setAttribute("id", _key);
                        _proxy._setAttributes(_proxy._getField(list[j], mapFld._attr), li[0]);
                        fragmentParent.appendChild(li[0]);
                        _proxy._currList = _proxy._currList.concat([list[j]]);
                    }
                }
                _proxy.ul[0].appendChild(fragmentParent);
            }

        },

        _getLiTags: function () {
            return (!this.model.multiColumnSettings.enable) ? this.ul.children("li:not('.e-category')") :this._tableColumn.find("tbody tr:not('.e-category')") ;
        },

        _getTemplatedString: function (list, searchLabl, searchTxt) {
            var str = this.model.template, start = str.indexOf("${"), end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
                var field = content.replace("${", "").replace("}", "");
                var replace = this._getField(list, field);
                // if highlightSearch is enabled, it replaces the highlighted search text
                if (searchLabl == field) replace = searchTxt;
                if (!replace) replace = "";
                str = str.split(content).join(replace);
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        },

        _getField: function (obj, fieldName) {
            return ej.pvt.getObject(fieldName, obj);
        },

        _setAttributes: function (data, element) {
            if (data) {
                if (typeof data == "string")
                    data = $.parseJSON(data);
                for (var key in data)
                    element.setAttribute(key, data[key]);
            }
        },

        _setListWidth: function () {
            var width = this.model.popupWidth;
            if (width && width != "auto") this.suggestionList.css({ "width": width });
            else this.suggestionList.css({ "width": this.wrapper.width() });
        },

        _setListHeight: function () {
            this.suggestionList.css({ "max-height": this.model.popupHeight });
        },

        _refreshPopup: function () {
            if (this.model.popupWidth == "auto" && Math.floor(this.wrapper.outerWidth()) != Math.floor(this.suggestionList.outerWidth())) {
                this.suggestionList.css({ "width": this.wrapper.width() });
                this._refreshScroller();
            }
            this._setListPosition();
        },

        _showResult: function (e) {
            this._refreshScroller();
            this._refreshPopup();
            if (this._isOpened)
                $(document).on("mousedown", $.proxy(this._OnDocumentClick, this));
            else {
                this.suggestionList.css("display", "none");
                var tis = this;
                clearTimeout(this._typing);
                this._typing = setTimeout(function () {
                    tis.suggestionList[(tis.model.animateType == "slide" ? "slideDown" : "fadeIn")]((tis.model.animateType == "none" ? 0 : 300), function () {
                        $(document).on("mousedown", $.proxy(tis._OnDocumentClick, tis));
                    });
                }, this.model.delaySuggestionTimeout);
                var args = (e != undefined) ? { event: e, isInteraction: true } : { isInteraction: false };
                this._trigger("open", args);
                this.wrapper.addClass("e-active");
            }

            this._isOpened = true;
            this.showSuggestionBox = true;
            var _suggestionListItems = this._getLiTags();
            this._listSize = _suggestionListItems.length;


            $(window).on("resize", $.proxy(this._OnWindowResize, this));
            var scrObj = ej.getScrollableParents(this.wrapper);
            if (scrObj[0] != window)
                this._on(scrObj, "scroll", this._hideResult);
        },

        _hideResult: function (e) {
            if (this.showSuggestionBox) {
                this.showSuggestionBox = false;
                this._activeItem = 0;
                clearTimeout(this._hiding);
                this.element.attr("aria-expanded", false);
                var proxy = this;
                if (this._isOpened) {
                    this.suggestionList.css("display", "none");
                    var args = (e != undefined) ? { event: e, isInteraction: true } : { isInteraction: false };
                    this._trigger("close", args);
                }
                else {
                    this._hiding = setTimeout(function () {
                        if( proxy.model ) proxy.suggestionList[(proxy.model.animateType == "slide" ? "slideUp" : "fadeOut")]((proxy.model.animateType == "none" ? 0 : 100));
                         proxy._activeItem = 0;
                    }, this.model.delaySuggestionTimeout);
                }
                $(document).off("mousedown", $.proxy(this._OnDocumentClick, this));
                $(window).off("resize", $.proxy(this._OnWindowResize, this));
                this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
                this.wrapper.removeClass("e-active");
            }
        },

        _refreshScroller: function () {
            this.suggestionList.css("height", "auto");
            this.suggestionList.find(".e-content , .e-scroller").removeAttr("style");
            
			if(this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) {
			$(this._tableColumn).css("width" ,"auto");
			$(this._tableHeader).css("width" ,"auto");
			}
            this.suggestionList.css("display", "block");
			if(this.model.multiColumnSettings.enable) {
				this.scrollerObj.option("height","auto");
				this._columnBorderAlign();
			}
            var _suggestHeight = this.suggestionList.height() > (parseInt($.isNumeric(this.model.popupHeight) ? this.model.popupHeight : this.model.popupHeight.replace("px", "")) - 4);
            if ( _suggestHeight || (this.model.multiColumnSettings.enable && (( this.suggestionList.height() <= this._tableColumn.height() )|| ( this.suggestionList.width() <= this._tableColumn.width() || (this.model.multiColumnSettings.showHeader && this.suggestionList.width() <= this._tableHeader.width()) )))){
                if( _suggestHeight ) this.scrollerObj.model.height = (this.model.multiColumnSettings.showHeader && this._tableHeader) ? parseInt(this.suggestionList.height()) - parseInt(this._tableHeader.height()) : this.suggestionList.height();
                if(!this.model.multiColumnSettings.enable && this.suggestionList.width() < this.suggestionList.find(".e-ul").width())  this.suggestionList.find(".e-ul").width(this.suggestionList.find(".e-ul").width());
				this.scrollerObj.model.width = this.suggestionList.width();
                this.scrollerObj.refresh();
                this.scrollerObj.option({"enableRTL" : this.model.enableRTL , "scrollTop": 0 , "scrollLeft" : 0 });
				if(this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) this._addThBorder();
                this.suggestionList.addClass("e-scroller")
				if(!this.scrollerObj._vScroll && this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) this._removeThBorder();
            }
            else {
				this.scrollerObj.setModel({height:"auto", width:this.suggestionList.width()});
				this.scrollerObj.refresh();
				if(this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) this._removeThBorder();
			}
            this.suggestionList.css("height", "auto");
            if (this._isIE8)
                this.suggestionList.find('.e-vscroll div, .e-hscroll div').attr("unselectable", "on");
			if(this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) {
		    this.suggestionList.find(".e-content").scroll(ej.proxy(function (e) {
                    this._tableHeader.parent(".e-atc-tableHeaderContent").scrollLeft($(e.currentTarget).scrollLeft());
            }, this));
			if(this.suggestionList.find(".e-content").length > 0) this._tableHeader.parent(".e-atc-tableHeaderContent").scrollLeft(this.model.enableRTL ?  this.suggestionList.find(".e-content")[0].scrollWidth - this.suggestionList.find(".e-content")[0].clientWidth : 0);
			}
        },
		
		_columnBorderAlign : function (){
			if (this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader && this._tableHeaderDiv.css("display") != "none") {
				this._tableWid = (this._tableHeader.outerWidth() > this._tableColumn.outerWidth() ) ? this._tableHeader.outerWidth() : this._tableColumn.outerWidth(); 
				this._tableColumn.find("colgroup").remove();
				$(this._headerColGroup.children).removeAttr("style");
                for (var z = 0, length = this._headerColGroup.children.length; z < length; z++) {
					$(this._headerColGroup.children[z]).css({"width": ( parseInt($(this._tableColumn).find("tr:first td").eq(z).outerWidth()) > parseInt(this._tableHeader.find("tr:first th").eq(z).outerWidth() ) ? $(this._tableColumn).find("tr:first td").eq(z).outerWidth() : this._tableHeader.find("tr:first th").eq(z).outerWidth()) });
				}
				this._tableColumn.append($(this._headerColGroup).clone());
				var wid = (this._tableWid > this.suggestionList.width()) ? this._tableWid : "100%" ;
				$(this._tableColumn).css("width" , wid );
				$( this._tableHeader ).css("width" , wid);
			}
			else if (this.model.multiColumnSettings.enable && !this.model.multiColumnSettings.showHeader ) {
				$(this._tableColumn).css("width" , "auto" );
				this._tableWid = this._tableColumn.outerWidth(); 
				$(this._headerColGroup.children).removeAttr("style");
				var wid = (this._tableWid > this.suggestionList.width()) ? this._tableWid : "100%" ;
				if(wid != "100%") {
                    for (var z = 0, length = this._headerColGroup.children.length; z < length; z++) {
						$(this._headerColGroup.children[z]).css({"width": $(this._tableColumn).find("tr:first td").eq(z).outerWidth() });
					}
					this._tableColumn.append(this._headerColGroup);
				}
				$(this._tableColumn).css("width" , wid );
			}	
			else $(this._tableColumn).css("width","100%");
		},

		_removeThBorder: function(){
			this._tableHeader.parents(".e-atc-tableHeader").removeClass((this.model.enableRTL)? "e-atc-tableHeaderRTL" : "e-atc-tableHeaderScroll");
			this._tableHeader.parent(".e-atc-tableHeaderContent").removeClass("e-atc-tableHeaderBorder");
		},
		
		_addThBorder: function(){
			this._tableHeader.parents(".e-atc-tableHeader").addClass((this.model.enableRTL)? "e-atc-tableHeaderRTL" : "e-atc-tableHeaderScroll").removeClass((this.model.enableRTL)? "e-atc-tableHeaderScroll" : "e-atc-tableHeaderRTL");
			this._tableHeader.parent(".e-atc-tableHeaderContent").addClass("e-atc-tableHeaderBorder");
		},
        _setListPosition: function () {
            var elementObj = this.wrapper, pos = this._getOffset(elementObj), winWidth,
            winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
            winTopHeight = pos.top - $(document).scrollTop(),
            popupHeight = this.suggestionList.outerHeight(),
            popupWidth = this.suggestionList.outerWidth(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial(), popupmargin = 3,
            topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
            winWidth = $(document).scrollLeft() + $(window).width() - left;
            if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.suggestionList.outerWidth() - elementObj.outerWidth();
            this.suggestionList.css({
                "left": left + "px",
                "top": topPos + "px",
                "z-index": maxZ
            });
        },
        _getOffset: function (ele) {
            return ej.util.getOffset(ele);
        },

        _getZindexPartial: function () {
            return ej.util.getZindexPartial(this.element, this.suggestionList);
        },

        _targetFocus: function (e) {
            var minWidth = 30;  //  minimum width for textbox in visualmode
            if (this.model.multiSelectMode == "visualmode")
                this._setWatermarkWidth(minWidth);
            if (!this._isWatermark)
                this._hiddenSpan.css("display", "none");
            this.wrapper.addClass("e-focus");
			this._focusValue = this.model.value;
            this._preVal = this.model.value;
            this._isFocused = true;
            this._trigger("focusIn", { event: e, isInteraction: true, value: this.value() });
        },
        _focusOutAction: function (e) {
			var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val();	
            this._isFocused = false;
            this.wrapper.removeClass("e-focus");
            if (ej.isNullOrUndefined(this.model.fields["key"])) {
                if (this.model.multiSelectMode == "none") {
                    var data = this.model.dataSource;
                    if (ej.DataManager && data instanceof ej.DataManager) this._loadInitData();
                    else this._setHiddenkeyByValue(data);
                }
                else this._hiddenInput.val(currValue);
            }
            if (this._focusValue != this.model.value && !this.model.isChangeOnBlur) {  
			   if(this._hiddenInput.val() == "")
                   this._hiddenInput.val(currValue);			
			this._changeEvtTrigger(currValue, e); }
            else if (this.model.isChangeOnBlur && this._preVal != currValue) {
                this.value(currValue);
                if (this._hiddenInput.val() == "")
                   this._hiddenInput.val(currValue);
                this._changeEvtTrigger(currValue, e);
            }
			else
			     return false;
            if (this.model.showPopupButton) this.dropdownbutton.removeClass('e-active');
            !this._isWatermark && this._setWatermarkTxt();
            this._removeSelection();
			if(this.model.multiSelectMode == "visualmode" && this.model.showResetIcon && this.element.val() != "")
				this._removeReset();
            if (this.model.multiSelectMode == "visualmode") {
                this._removeActive();
                this.element.val("");
                this._setWatermarkWidth(1);
                this._preVal = "";
                this._addNewTemplate = null;
            }
            else {
                if (this.model.multiSelectMode == "delimiter") 
                        this._valueChange(e);
                this._updateSelectedItemArray(this.getValue());
            }
		    if(!ej.isNullOrUndefined(this.value()) && this.value()!="")
			{
				var values = this.value().split(this.model.delimiterChar);
				if(this.model.multiSelectMode == "delimiter" || this.model.multiSelectMode == "none" )
				{
					var result = this._removeDuplicateVal(values); 
					this._keyProcess(result);
				}
			}
			if(this.element.val() == "" && (this.value() == "" || this.value() == null))
				this._selectValueByKey(null);
        },
        _targetBlur: function (e) {
            this._focusOutAction(e);
            this._trigger("focusOut", { event: e, isInteraction: true, value: this.value() });
			this._targetEle();
        },
        _setWatermarkWidth: function (width) {
            this.model.watermarkText && this.element.attr('placeholder') ? this.element.width("") : this.element.val("").width(width);
        },
        _checkDeli: function () {
            var val = this.element.val(), deli = this.model.delimiterChar, last = val.substr(val.length - deli.length, val.length);
            if (last == deli) {
                this.element.val(val.substr(0, val.length - deli.length));
                return true;
            }
            else return false;
        },
        _removeSelection: function () {
            if (this.model.enableAutoFill) {
                this.element.attr("aria-autocomplete", "both");
                var selection = this._getCaretSelection();
                if (selection.end - selection.start != 0 && selection.end - selection.start != this.element.val().length)
                    this.target.value = this.target.value.substr(0, selection.start);
            }
        },

        _removeListHover: function () {
            this._getLiTags().removeClass("e-hover");
        },

        _addListHover: function () {
            var activeItem = $(this._getLiTags()[this._activeItem - 1]);
            activeItem.addClass("e-hover");
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
            activeItem.focus();
        },

        _calcScrollTop: function () {
            var ulH = (this.model.multiColumnSettings.enable) ? ((this.model.multiColumnSettings.showHeader) ? this._tableColumn.outerHeight() + this._tableHeader.outerHeight()  : this._tableColumn.outerHeight() ): this.ul.outerHeight() , li = (!this.model.multiColumnSettings.enable) ? this.ul.find("li") : this._tableColumn.find("tr"), liH = 0, index, top, i;
            index = (!this.model.multiColumnSettings.enable) ? this.ul.find("li.e-hover").index() : this._tableColumn.find("tr.e-hover").index();
            liH = li.eq(1).outerHeight() * index;
            top = liH - ((((this.model.multiColumnSettings.enable) ? this._tableColumn.parent().outerHeight() : this.suggestionList.outerHeight()) - li.eq(index).outerHeight()) / 2);
            return top;
        },

        getActiveText: function () {
			if (this._activeItem > 0) {
				if(this.model.multiColumnSettings.enable) return this._textFormateString(this._currList[this._activeItem -1 ])
				else if (!ej.isNullOrUndefined(this._mapper) && this._mapper.txt) return this._getField(this._currList[this._activeItem - 1], this._mapper.txt);			
				else  return  this._currList[this._activeItem  - 1];
			}
        },

        _getUniqueKey: function () {
            var key = null;
			if(!ej.isNullOrUndefined(this._mapper))
			{
			    if (this._mapper.key) key = this._getField(this._currList[this._activeItem - 1], this._mapper.key);
			    ej.isNullOrUndefined(key) && (key = null);
			}
            return key;
        },

        _setTextBoxValue: function () {
            if (this._activeItem && !this.noresult) {
                var currentValue, selection, val, text;
                currentValue = this.model.multiColumnSettings.enable ? this._textFormateString(this._currList[this._activeItem -1 ]) : this.getActiveText();
                selection = this._getCaretSelection();
                this.suggLen = selection.start;
                val = this.target.value.substr(0, this.suggLen);
                var _deliIndex = (this.target.value).lastIndexOf(this.model.delimiterChar);
				if(_deliIndex == -1) { var query = $.trim(val.substr(_deliIndex + 1, this.suggLen));}
               else				
				var query = $.trim(val.substr(_deliIndex + ((this.model.delimiterChar).length) ,this.suggLen));			
                if (val && (val.toLowerCase() == currentValue.substr(0, this.suggLen).toLowerCase() || query.toLowerCase() == currentValue.substr(0, this.suggLen -( _deliIndex + ((this.model.delimiterChar).length))).toLowerCase())) {
                    if (this.model.multiSelectMode == "delimiter") 
                        text = val + currentValue.substr(query.length, currentValue.length);            
                    else 
                        text = val + currentValue.substr(val.length, currentValue.length);
                    this.element.val(text);
                    this._autofilSelection();
                    if (this.model.multiSelectMode == "visualmode") {
						this._adjustWidth();
						if(this.model.enableAutoFill) this._refreshPopup();
					}
                    if (this.model.autoFocus && !this.noresult) this._addListHover();
                }
                else {
					if (this.model.multiSelectMode == "delimiter" && currentValue && query) this.element.val(this.element.val().replace(query,currentValue))
					else if (currentValue) this.element.val(currentValue)
					this._removeSelection();
				} 
            }
        },

        _enterTextBoxValue: function (e) {
            if (this._activeItem && !this.noresult && !this.model.readOnly) {
                var currentValue = this.getActiveText(), currItem = this._currList[this._activeItem - 1];
                this._preVal = currentValue + ((this.model.multiSelectMode == "delimiter") ? this.model.delimiterChar : "");
                this._valueToTextBox(currentValue, currItem, false);
                var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val() == "" ? null : this.element.val();
                this._trigger("select", { event: e, isInteraction: true, value: currValue, text: currentValue, key: this._getUniqueKey(), item: currItem });
                this._valueChange(e);
                if (this.model.showResetIcon) this._showReset();
            }
            this._isOpened && this._trigger("close", { event: e, isInteraction: true });
        },

        _createBox: function (value) {
            var span = ej.buildTag("span.e-icon e-close");
            var li = ej.buildTag("li.e-options", value).append(span);

            this._on(span, "click", function (e) {
                if (!this.model.enabled) return false;
                this._deleteBox($(e.target).parent());
            });
            return li;
        },

        _addLoadingClass: function () {
            if (this.model.showLoadingIcon)
                this.element.addClass("e-load");
        },

        _removeLoadingClass: function () {
            this.element.removeClass("e-load");
        },


        _highlightSuggestion: function (suggestion) {
            if ($.trim(this._queryString) != "") {
                var caseSensitive, tempQueryString, RegEx, mch, split, query, str;
                caseSensitive = this.model.caseSensitiveSearch ? "g" : "gi";
                query = $.trim(this._queryString);
                query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
                tempQueryString = this.model.filterType == "startswith" ? "^" + query : this.model.filterType == "endswith" ? query + "$" : query;
                RegEx = new RegExp(tempQueryString, caseSensitive);
                if (RegEx.test(suggestion)) {
                    mch = suggestion.match(RegEx);
                    //for IE-8 the regEx doesnt returns the empty string.So manually we replace string to return empty string.
                    str = suggestion.replace(RegEx, "~^");
                    split = str.split("~^");
                    suggestion = "";
                    for (var i = 0, splitlength = split.length; splitlength > i; i++)
                        suggestion += mch[i] ? split[i] + "<span class='e-hilight-txt'>" + mch[i] + "</span>" : split[i];
                }
            }
            return suggestion;
        },

        _RightToLeft: function (value) {
            if (value) {
                this.wrapper.addClass("e-rtl");
                this.suggestionList.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                this.suggestionList.removeClass("e-rtl");
            }
			if(this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) {
					this._tableHeaderDiv.removeClass( value ? "e-atc-tableHeaderRTL" : "e-atc-tableHeaderScroll" );
					this._tableHeader.find("tr :not(th:last)").addClass(value ? "e-atc-thleft" : "e-atc-thright").removeClass(value ? "e-atc-thright" : "e-atc-thleft" );
			}
        },

        _setRoundedCorner: function (value) {
            if (value) {
                this.container.addClass("e-corner");
                this.suggestionList.addClass("e-corner");
            }
            else {
                this.container.removeClass("e-corner");
                this.suggestionList.removeClass("e-corner");
            }
        },

        _checkReadOnly: function (value) {
            this.model.readOnly = value;
            if (this.model.readOnly) {
                this.element.attr({ "readonly": "readonly", "aria-readonly": true });
                this._off(this.element, "keydown", this._OnKeyDown);
                this._off(this.element, "keyup", this._OnKeyUp);
				this._off(this.element, "paste", this._OnPaste);
				this._off(this.element, "keypress", this._onkeyPress);
            }
            else {
                this.element.removeAttr("readonly aria-readonly");
                this._on(this.element, "keydown", this._OnKeyDown);
                this._on(this.element, "keyup", this._OnKeyUp);
			    this._on(this.element, "paste", this._OnPaste);
				this._on(this.element, "keypress", this._onkeyPress);
            }
        },
		_onkeyPress: function (e) {
			if(e.keyCode == 13) this._PreventDefaultAction(e);
		},
		_OnPaste: function (e) {
			var _proxy = this;
			setTimeout(function () {
				 _proxy._OnKeyUp(e);
				}, 0);
		},
        _OnKeyDown: function (e) {
            if (this.model.filterType != "startswith")
                this.model.enableAutoFill = false;

            switch (e.keyCode) {
                case 37:
                case 35:
                case 36:
                    this._removeSelection();
				case 13:
                case 39:
                    break;
                case 38:
                    if (this.showSuggestionBox && this.suggestionList) {
                        this._removeListHover();
                        if (this._activeItem > 1)
                            this._activeItem -= 1;
                        else
                            this._activeItem = this._listSize;
                        this._navigationHover();
                    }
                    this._PreventDefaultAction(e);
                    break;
                case 40:
                    if (this.showSuggestionBox && this.suggestionList) {
                        this._removeListHover();
                        if (this._activeItem < this._listSize)
                            this._activeItem += 1;
                        else
                            this._activeItem = 1;
                        this._navigationHover();
                    } else {
                        if (e.ctrlKey && this.element.val() == "") {
                            this._showFullList(e);
                        }
                        else if (e.ctrlKey) {
                            this._showSuggestionList(e);
                        }
                    }
                    this._PreventDefaultAction(e);
                    break;
				case 33: /* page up */
				case 34:
				    if (this.showSuggestionBox && this.suggestionList) {
						this._removeListHover();             
                        var suggestionH = (this.model.multiColumnSettings.enable) ? this._tableColumn.parent().height() : this.suggestionList.height();
                        var liH = (this.model.multiColumnSettings.enable) ? this._tableColumn.find("tr").outerHeight() : this.ul.children("li").outerHeight();
                        var activeItem = Math.round(suggestionH / liH) != 0 ? Math.round(suggestionH / liH) : this._listSize;
                        this._activeItem = (e.keyCode == 33) ? this._activeItem - activeItem :  this._activeItem + activeItem
						if( this._activeItem < 1) this._activeItem = 1;
						if(this._activeItem > this._listSize ) this._activeItem = this._listSize;
						this._navigationHover();
					}
                        this._PreventDefaultAction(e);
                        break;
                case 8:
                    if ($.trim(this.element.val()) == "") this._isOpened = false;
                    if (this.model.multiSelectMode == "visualmode" && this.element.val() == "") {
                        this._deleteLastBox();
                    }
                    break;
                case 17:
                    this.ctrlKeyPressed = true;
                    break;
                case 9:
                    if (this.showSuggestionBox) {
                        this._queryString = this.element.val();
                        this._enterTextBoxValue(e);
                        this._hideResult(e);
                        this._isOpened = false;
                        this._PreventDefaultAction(e);
                    }
                    break;
                case 27:
                    this._isOpened = false;
                    var _showSuggestionBox = this.showSuggestionBox;
                    this._hideResult(e);
                    this._PreventDefaultAction(e);
                    if (_showSuggestionBox) this._trigger("close", { event: e, isInteraction: true });
                    break;
            }
            if (this.model.multiSelectMode == "visualmode") {
                if (e.keyCode != 17 && e.keyCode != 8 && e.keyCode != 46) this._removeActive();
                this._adjustWidth();
            }
        },


        _PreventDefaultAction: function (e) {

            e.preventDefault();
            if (!this._cancelEvent) {
                e.stopPropagation();
                e.cancelBubble = true;
                e.returnValue = true;
            }

        },
        _bubbleEvent: function (cancelevent) {

            if (typeof cancelevent == "boolean")
                this._cancelEvent = cancelevent;
            return this._cancelEvent;
        },
        _navigationHover: function () {
			this._addListHover();
            if (this.model.enableAutoFill) {
                this.element.attr("aria-autocomplete", "both");
                this._queryString = this.target.value;
                this._setTextBoxValue();
            }
		},


        _OnKeyUp: function (e) {
            this._keyDownComplete(e);
            if (this.ctrlKeyPressed && e.type != "paste") {
                if (e.keyCode == 17)
                    this.ctrlKeyPressed = false;
                return false;
            }

            if ($.trim(this.element.val()) == "" && e.keyCode == 38 && e.keyCode == 40) {
                this._hideResult(e);
                return false;
            }
            if (!this._checkDelimiter()) return false;
            this._queryString = $.trim(this._queryString);

            switch (e.keyCode) {
				case 34:
				case 33:
                case 38:
                case 40:
                case 37:
                case 39:
                case 20:
                case 16:
                case 17:
                case 18:
                case 35:
                case 36:
                case 144:
                case 9:
                case 27: break;

                case 13:
                    e.preventDefault();
                    this._queryString = this.element.val();
                    this._enterTextBoxValue(e);
                    if (this.model.enableAutoFill) {
                        this.element.attr("aria-autocomplete", "both");
                        this.suggLen = this.element.val().length;
                        this._autofilSelection();
                    }
                    this._isOpened = false;
                    this._hideResult(e);
                    break;

                case 46:
                    if (this.model.multiSelectMode == "visualmode" && this.element.val() == "") {
                        this._deleteBox(this._ulBox.children("li.e-active"));
                        break;
                    }
                case 8:
                    if (this._queryString.length >= this.model.minCharacter) {
                        this._autoFill = false;
                        this._OnTextEnter(e);
                    }
                    else {
                        this.noresult = true;
                        this._hideResult(e);
                        if ($.trim(this.element.val()) == "") 
                            this._isOpened = false;
                    }
                    this._typed = true;
                    break;

                default:
                    if (this._queryString.length >= this.model.minCharacter) {
                        this._autoFill = true;
                        this._OnTextEnter(e);
                    }
                    else {
						this.noresult = true;
						this._isOpened = false;
					}
                    this._typed = true;
                    break;
            }
        },

        _getFilteredList: function (list, e) {
            clearTimeout(this.timeDelay);
            if (!ej.isNullOrUndefined(list) && typeof list[0] == "object") {
                var bindTo = (this.model.fields.text) ? this.model.fields["text"] : "text";
                if ( this.model.actionFailure && ej.isNullOrUndefined((ej.DataManager(list).executeLocal(ej.Query().select(bindTo))[0])) )
                    this._trigger("actionFailure", { error: this._localizedLabels["actionFailure"] });
            }
            if (!list || !list.length || list.length < 1) {
                this.suggestionListItems = [];
                if (this.model.actionFailure) this._trigger("actionFailure", { error: this._localizedLabels["actionFailure"] });
            }
            else {
                var tempQuery = ej.Query();
                this._addQuery(tempQuery, typeof list[0] == "object");
                this.suggestionListItems = ej.DataManager(list).executeLocal(tempQuery);
                if (this.model.actionSuccess) this._trigger("actionSuccess");
            }
            this._doneRemaining(e);
            if (this.model.actionComplete)
                this._trigger("actionComplete");
        },

        _performSearch: function (e) {
            if (this.model.actionBegin)
                this._trigger("actionBegin");
            var source = this.model.dataSource;
            if (ej.DataManager && source instanceof ej.DataManager) {
                if (!source.dataSource.offline && !(source.dataSource.json && source.dataSource.json.length > 0)) {
                    window.clearTimeout(this.timer);
                    var proxy = this;
                    this.timer = window.setTimeout(function () {
                        proxy._fetchRemoteDat(source);
                    }, 700);
                }
                else {
					this._getFilteredList(source.dataSource.json, e);
					this._selectedObj.push(source.dataSource.json);
				}
            }
            else this._getFilteredList(source, e);
        },

        _fetchRemoteDat: function (source) {
            var proxy = this, queryPromise, tempQuery = this._getQuery();
            this._addQuery(tempQuery, true);
            queryPromise = source.executeQuery(tempQuery);
            queryPromise.fail(function (e) {
                proxy.suggestionListItems = null;
                proxy._removeLoadingClass();
                proxy._trigger("actionFailure", e);
            }).done(function (e) {
                proxy.suggestionListItems = e.result;
				if(proxy.model.multiSelectMode == "none")
					proxy._selectedObj = e.result;
				else if(proxy.model.multiSelectMode == "delimiter")
					proxy._selectedObj = proxy._selectedObj.concat(e.result);
                proxy._doneRemaining(e);
                proxy._trigger("actionSuccess", e);
            }).always(function (e) {
                proxy._trigger("actionComplete", e);
            });
        },

        _addSortingQuery: function (query, key) {
            if (this.model.allowSorting) {
                var order = (this.model.sortOrder == "descending") ? true : false;
                query.sortBy(key, order);
            }
        },

        _addQuery: function (_query, checkMapper) {
            var bindTo = "";
            var predicate, index;
			this._predicates =[];
            if (checkMapper) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper.text) ? mapper["text"] : "text";
            }
			if (this._queryString) {
            if (this.model.multiColumnSettings.enable) {
				this._columnsIndex();
				if (checkMapper) {
                    var bindTo = [];
                    if(this.model.multiColumnSettings.searchColumnIndices.length !=0){
				    for (var i = 0, length = this._searchColumnIndex.length; i < length; i++) {
				        bindTo.push(this.model.multiColumnSettings.columns[this._searchColumnIndex[i]].field);
				        predicate = this._predicateConvertion(predicate, this.model.multiColumnSettings.columns[this._searchColumnIndex[i]].field, (this.model.multiColumnSettings.columns[this._searchColumnIndex[i]].filterType ? this.model.multiColumnSettings.columns[this._searchColumnIndex[i]].filterType : this.model.filterType), this._queryString, !this.model.caseSensitiveSearch, (this.model.multiColumnSettings.columns[this._searchColumnIndex[i]].type ? this.model.multiColumnSettings.columns[this._searchColumnIndex[i]].type : "string"));
                    }
                }
                else{
                    for (var i = 0, length = this._columnIndex.length; i < length; i++) {
				        bindTo.push(this.model.multiColumnSettings.columns[this._columnIndex[i]].field);
				        predicate = this._predicateConvertion(predicate, this.model.multiColumnSettings.columns[this._columnIndex[i]].field, (this.model.multiColumnSettings.columns[this._columnIndex[i]].filterType ? this.model.multiColumnSettings.columns[this._columnIndex[i]].filterType : this.model.filterType), this._queryString, !this.model.caseSensitiveSearch, (this.model.multiColumnSettings.columns[this._columnIndex[i]].type ? this.model.multiColumnSettings.columns[this._columnIndex[i]].type : "string"));
                    }
                }
				    for (var i = 0; i < _query.queries.length; i++) {
				        if (_query.queries[i].fn == "onWhere") {
				            index = _query.queries.slice(i)[0].e;
				        }
				    }
				    if(ej.isNullOrUndefined(index) && this.model.multiColumnSettings.searchColumnIndices.length !=0)
                        this._predicates.length > 0 && (_query.where(ej.Predicate["or"](this._predicates)));
				    else if (this.model.multiColumnSettings.searchColumnIndices.length !=0)
					    _query.where((index).and(this._predicates));
				    else if (ej.isNullOrUndefined(index))
				        _query.where(predicate);
				    else
				        _query.where((index).and(predicate));
				}
				else _query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch, this.model.ignoreAccent);

            }
            
			else _query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch, this.model.ignoreAccent);
			}
            this._addSortingQuery(_query, bindTo);
        },

		_predicateConvertion: function( predicate, field, filterType, value, casing ,type){
			var _query, accent = this.model.ignoreAccent;
			if(type == "number")
				_query = Number(value);
			else if(type == "boolean") {
				if(value == "true" || value == "yes" || value =="1") _query = true;
				else if(value == "false" || value == "no" || value =="0") _query = false;
			}	
			else if(type =="date")
				_query = new Date(value);
			else _query = value;
			if( (type == "number" && isNaN(_query)) ||(type == "boolean" && _query == undefined ) )
				predicate = predicate;
			else if (this.model.multiColumnSettings.searchColumnIndices.length !=0)
			    this._predicates.push(new ej.Predicate(field, filterType, _query,casing, accent));
			else 
				predicate = predicate != undefined ? predicate["or"]( field, filterType, _query,casing, accent):ej.Predicate( field, filterType, _query,casing, accent);
			return predicate;
		}, 
		
        _getQuery: function () {
            if (ej.isNullOrUndefined(this.model.query)) {
                var column = [], queryManager = ej.Query(), mapper = this.model.fields;
                for (var col in mapper) {
                    if (col !== "tableName" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
                if (!ej.isNullOrUndefined(this.model.dataSource.dataSource.url) && !this.model.dataSource.dataSource.url.match(mapper.tableName + "$"))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            }
            else queryManager = this.model.query.clone();
            return queryManager;
        },

        _OnTextEnter: function (e) {
            var proxy = this;
			if( ej.isDevice() ) {
            clearTimeout(this.timeDelay);
            this.timeDelay = setTimeout(function () {
                proxy._onTextProcess(e);
            }, proxy.model.delaySuggestionTimeout);
			}
			else proxy._onTextProcess(e);
        },
		_onTextProcess: function (e) {
			this._addLoadingClass();
			this.element.attr("aria-expanded", false);
			this._performSearch(e);
			if (this.model.showResetIcon) this._showReset();
		},
        _showReset: function () {
            if (ej.isNullOrUndefined(this.resetSpan)) {
                this.resetSpan = ej.buildTag("span.e-icon e-iclose");
                if (!this.model.showPopupButton) {
                    this.container.append(this.resetSpan).addClass("e-reset");
                }
                else {
                    this.dropdownbutton.before(this.resetSpan);
                    this.container.addClass("e-popup e-reset");
                }
		        this._on(this.resetSpan, "mousedown", this._refreshSearch);
            }          
        },
		
		_targetEle:function(){
			if(this.eleClick){
            this.element[0].focus();
			this.eleClick = false;
			}
		},
		 
		_refreshSearch:function(){
			if(this.model.enabled && !this.model.readOnly)
         {
			this.resetSpan = null;
			this.clearText();			
            this.eleClick = true;
			this._refreshPopup();
		 }
		},
		
		_removeReset:function (){
	        this.resetSpan = this.resetSpan && this.resetSpan[0].remove();		
            this._refreshPopup();			  
		  },

        _doneRemaining: function (e) {
            this._showSuggestionList(e);
            this.element.attr({"aria-expanded": true , "aria-haspopup": true});
            if (this.model.enableAutoFill && this._autoFill && !this.noresult || this.model.autoFocus) {
                this.element.attr("aria-autocomplete", "both");
                this._activeItem = 1;
                this._queryString = this.target.value;
            }
            if (this.model.enableAutoFill && this._autoFill && !this.noresult) this._setTextBoxValue();
            if (this.model.autoFocus && !this.noresult) { this._addListHover(); if (this.wrapper.width() > 0) this.suggestionList.children('div.e-content').css({ "width": this.wrapper.width() }); }
            this._removeLoadingClass();
            if (this.noresult && !this.model.showEmptyResultText)
                this._hideResult(e);
        },

        _removeRepeated: function () {
            var results = this.suggestionListItems;
            if (!results || results.length == 0 || this._selectedItems.length == 0 || ( this.suggestionListItems.length == 1 && this.suggestionListItems[0] == (this.element.val() + this._addNewTemplate)))
                return false;
			this._repeatRemove = false;
			for (var i = 0, length = this._selectedItems.length; i < length; i++) {
			    var index;
			    if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
			        var proxy = this, tempindex = 0;
			        results.forEach(function (data) {
			            if (!ej.isNullOrUndefined(data[proxy.model.fields["text"]]) ? (data[proxy.model.fields["text"]] == proxy._selectedItems[i][proxy.model.fields["text"]]) : true &&
                            !ej.isNullOrUndefined(data[proxy.model.fields["key"]]) ? (data[proxy.model.fields["key"]] == proxy._selectedItems[i][proxy.model.fields["key"]]) : true &&
                            !ej.isNullOrUndefined(data[proxy.model.fields["htmlAttributes"]]) ? (data[proxy.model.fields["htmlAttributes"]] == proxy._selectedItems[i][proxy.model.fields["htmlAttributes"]]) : true &&
                            !ej.isNullOrUndefined(data[proxy.model.fields["groupBy"]]) ? (data[proxy.model.fields["groupBy"]] == proxy._selectedItems[i][proxy.model.fields["groupBy"]]) : true)
			                index = tempindex;
			            tempindex++;
			        });
			    }
			    else{
                 index = results.indexOf(this._selectedItems[i]);
				 if (!isNaN(parseFloat(this._selectedItems[i]))) index = results.indexOf(parseFloat(this._selectedItems[i]));
				}
			    if (index != -1 && !ej.isNullOrUndefined(index)) this.suggestionListItems.splice(index, 1);
				if( this.element.val() == this._selectedItems[i] )this._repeatRemove = true;
            }
        },

        _checkDelimiter: function () {
            this._queryString = this.element.val();
            var _deliIndex = (this.model.multiSelectMode != "delimiter") ? -1 : this._queryString.lastIndexOf(this.model.delimiterChar);


            if (_deliIndex == -1) {
                return true;
            }
            else {
                this._queryString = this._queryString.substr(_deliIndex + ((this.model.delimiterChar).length), this._queryString.length);
                return true;
            }
        },

        _autofilSelection: function () {
            var element = this.element[0], totLen = this.element.val().length;

            if (element.setSelectionRange)
                element.setSelectionRange(this.suggLen, totLen);
            else if (element.createTextRange) {

                element = element.createTextRange();
                element.collapse(true);
                element.moveEnd('character', totLen);
                element.moveStart('character', this.suggLen);
                element.select();
            }
        },

        _OnDropdownClick: function (e) {
            if (this.model.enabled && !this.model.readOnly) {
                e.preventDefault();
                this.dropdownbutton.addClass("e-active");
                this._iconEventBind(this.dropdownbutton, "span");
				if ((e.which && e.which == 1) ||(e.button && e.button == 0)) {
                this._addLoadingClass();
                if (this.showSuggestionBox) {
                    this._hideResult(e);
                    this._isOpened = false;
                    this._removeLoadingClass();
                }
                else this._showFullList(e);
            }
		  }
        },

        _iconEventBind: function (element, target) {
            element.on({
                mouseleave: $.proxy(this._OnMouseIconClick, this)
            }, target);
        },

        _OnMouseIconClick: function (e) {
            this.dropdownbutton.removeClass("e-active");
        },

        _showFullList: function (e) {
            if (!this._isFocused)
                this.element.focus();
            this._queryString = null;
            this._autoFill = false;
            this._performSearch(e);
        },

        _OnMouseEnter: function (e) {
            this._getActiveItemIndex(e);
            if (this.model.showPopupButton) this.dropdownbutton.removeClass('e-active');
        },
        _getActiveItemIndex: function (e) {
            var targetEle = e.target;
            if (this.model.multiColumnSettings.enable && e.target.tagName.toLowerCase() != "tr") targetEle = $(e.target).parents("tr");
            else if (e.target.tagName.toLowerCase() != "li") targetEle = $(e.target).parents("li");
            this._getLiTags().removeClass("e-hover");
            $(targetEle).addClass("e-hover");
            this._queryString = this.element.val();
            this._activeItem = this._getLiTags().index($(targetEle)) + 1;
        },

        _OnMouseLeave: function (e) {
            this._getLiTags().removeClass("e-hover");
            if (this.model.showPopupButton) this.dropdownbutton.removeClass('e-active');
            if (this.model.highlightSearch)
                this._getLiTags().find(".e-hilight-txt").removeClass("e-hover");
        },

         _OnMouseClick: function (e) {
             this._getActiveItemIndex(e);
            if (!this.noresult) {
                this._enterTextBoxValue(e);
                this._isOpened = false;
                this._hideResult(e);
            }
        },
        
        _OnDocumentClick: function (e) {
            if (!$(e.target).is(this.suggestionList) && !$(e.target).parents(".e-atc-popup").is(this.suggestionList) &&
                !$(e.target).is(this.element) && !$(e.target).parents(".e-atc").is(this.wrapper)) {
                this._isOpened = true;
                this._hideResult(e);
            }
            else if ($(e.target).is(this.suggestionList) || $(e.target).parents(".e-atc-popup").is(this.suggestionList))
                e.preventDefault();
        },

        _OnWindowResize: function (e) {
            this._refreshPopup();
        },

		_keyProcess: function (values) {
		    var map = this._declareVariable(), proxy = this;
		    var delimiterIndex;
		    delimiterIndex = this._delimiterChar();
		    if (!ej.isNullOrUndefined(values)){
                for (var data = 0, length = values.length; data < length; data++) {
                    var _val =values[data];
                    if (ej.DataManager && this.model.dataSource instanceof ej.DataManager)
                        proxy._selectValueByKey(null);
                 else {
                        this._dataQuery =this.model.multiColumnSettings.enable ? ej.Query(): ej.Query().where(map[0], this.model.filterType, _val, false);
                        this._promise = ej.DataManager(this.model.dataSource).executeLocal(this._dataQuery);
                        if (!this.model.multiColumnSettings.enable) {
                            if (this._promise instanceof Array && (this._promise.length == 0))
                                this._selectValueByKey() != null ? this._selectValueByKey() : null;
                            else
                                this._getFieldKey(this._promise[0], map[1], delimiterIndex);
                        }
                        else this._formatStringKey(values, map, delimiterIndex)
                    }
                }
			}
		},

		_formatStringKey: function (values, map, delimiterIndex) {
		    this._selectValueByKey(null);
            for (var data = 0, valueLength = values.length; data < valueLength; data++) {
		        if (values[data] != "") {
		            var _val = values[data];
		            var _isExistIndex
                    for (var i = 0, length = this._promise.length; i < length; i++) {
		                if (_val == this._textFormateString(this._promise[i]))
		                    _isExistIndex = i;
		            }
		            if (_isExistIndex) this._getFieldKey(this._promise[_isExistIndex], map[1], delimiterIndex);
		            else
		                this._selectValueByKey() != null ? this._selectValueByKey() : null;
		        }
		    }
		},
		_getFieldKey: function (data, _key, deliIndex) {
		    if (!ej.isNullOrUndefined(this.model.template) && ej.isNullOrUndefined(this._getField(data, _key))) return;
		    if (ej.isNullOrUndefined(this._getField(data, _key))) return;
		    key = this._getField(data, _key).toString();
		    if (this.model.multiSelectMode != "none") {
		        var keyval, splitval, eleVal, key = this._selectValueByKey();
		        var delimiterChar = this.model.delimiterChar;
		        keyval = this._getField(data, _key).toString();
		        if (key != null) {
		            splitval = key.toString().split(deliIndex).filter(function (v) { return v !== "" });
		            if ($.inArray(keyval, splitval) == -1) {
		                splitval.push(keyval);
		                key = splitval.join(delimiterChar) + delimiterChar;
		            }
		            else
		                key = keyval + delimiterChar;
		        }
		        else
		            key = keyval + delimiterChar;
		    }
		    this._selectValueByKey(key);
		},

		_removeDuplicateVal: function (values) {
		    var result = [];
		    $.each(values, function (i, e) {
		        if ($.inArray(e, result) == -1)
		            result.push(e);
		    });
		    if (values.length == 1 && !ej.isNullOrUndefined(this._originalval)) {
		        if ($.inArray(values[0], this._originalval) == -1)
		            this._selectValueByKey(null);
		    }
		    return result;
		},

        _valueChange: function (e) {
            var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val();
            if (this.value() != currValue || (currValue == "" && this.element.val() != "")) {
                this.value(currValue);
                if (ej.isNullOrUndefined(this.model.fields["key"]) || currValue == "" ) this._hiddenInput.val(currValue);
                this._changeEvtTrigger(currValue, e);
            }
			if(this.model.showResetIcon && !currValue){
			this.wrapper.find("span.e-iclose").remove();
			this.resetSpan = null;}
        },
        _changeEvtTrigger: function (currValue, e) {
            var args = (e != undefined) ? { event: e, isInteraction: true, value: currValue } : { isInteraction: false, value: currValue, lastremovedItem : this.deletedItem };			
            if (!this.initialRender) {
				this._trigger("_change", { value: currValue });
                this._trigger("change", args);
            }
        },

        _updateSelectedItemArray: function (value) {
            var  values = [];
            this._selectedItems = [];
            this.suggestionListItems = this.model.dataSource;
            if (this.model.multiSelectMode == "delimiter" && value) {
                values = value.split(this.model.delimiterChar);
                if ((ej.DataManager && this.model.dataSource instanceof ej.DataManager) || ((!ej.isNullOrUndefined(this.suggestionListItems)) && (typeof this.suggestionListItems[0] != "object"))) {
                    for (var i = 0, length = values.length; i < length; i++) {
                        if (values[i]) {
                            var _proxy = this;
							var _objLen = this._selectedObj.length;
							var result = {};
							for (var j = 0; j< _objLen; j++ ){
								if(this._selectedObj[j][_proxy.model.fields.text] == values[i]) {
									result = this._selectedObj[j];
									j = _objLen;
								}
							}
							this._selectedItems.push(!$.isEmptyObject(result) ? result : values[i]);
						}
                    }
                }
                else
                    this._createBoxForObjectType(values);
            }
            else if (this.model.multiSelectMode == "none" && value) {
                values.push(value);
                if ((ej.DataManager && this.model.dataSource instanceof ej.DataManager) || ((!ej.isNullOrUndefined(this.suggestionListItems)) && (typeof this.suggestionListItems[0] != "object"))) {
                    var _proxy = this;
					var result = $.grep(this._selectedObj, function(e){ if(e[_proxy.model.fields.text] == value) return e; });
					this._selectedItems.push(result.length > 0 ? result : value);
				}
                else
                    this._createBoxForObjectType(values);
            }
        },

        _keyDownComplete: function (e) {
            var currValue = this.element.val();
            var prevValue = this.value();
            if (!ej.isNullOrUndefined(this.model.fields["key"])) {
                if ((e.keyCode == 46 || e.keyCode == 8 || e.keyCode == 65) && (this.model.multiSelectMode == "delimiter")) {
                    var data = this.value();
                    var array = data.split(",");
                    var deli = this.model.delimiterChar;
                    var index = array.indexOf(prevValue.replace(/,/g, ''));
                    var values = this._hiddenInput.val().split(deli);
                    this._hiddenInput.val(values.join(deli));
					values.splice(index, 1);
                }
            }
            if (this._preVal != currValue && (!this.model.isChangeOnBlur || (e.keyCode == 13 && !(this._activeItem && !this.noresult && !this.model.readOnly)))) {
                this._preVal = currValue;
                if (this.model.multiSelectMode == "visualmode") this._adjustWidth();
                this._valueChange(e);
            }
        },

        _moveCaretToEnd: function (el) {
            //Chrome Scroll content
            el.scrollLeft = el.scrollWidth;
            //IE Scroll the content
            if (el.createTextRange) {
                var rng = el.createTextRange();
                rng.moveEnd('textedit');
                rng.moveStart('textedit');
                rng.select();
            }
            if (typeof el.selectionStart == "number") {
                el.selectionStart = el.selectionEnd = el.value.length;
            } else if (typeof el.createTextRange != "undefined") {
                var range = el.createTextRange();
                range.collapse(false);
                range.select();
            }
        },

        _getCaretSelection: function () {
            var input = this.element[0], start = 0, end = 0;

            if (!isNaN(input.selectionStart)) {
                start = input.selectionStart;
                end = input.selectionEnd;
                return { start: Math.abs(start), end: Math.abs(end) };
            }

            var bookmark = document.selection.createRange().getBookmark();
            var selection = input.createTextRange();
            selection.moveToBookmark(bookmark);

            var before = input.createTextRange();
            before.collapse(true);
            before.setEndPoint("EndToStart", selection);
            var beforeLength = before.text.length, selLength = selection.text.length;
            return { start: beforeLength, end: beforeLength + selLength };
        },
        _getLocalizedLabels: function () {
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        },
        _wireEvents: function () {
            this._on(this.element, "focus", this._targetFocus);
            this._on(this.element, "blur", this._targetBlur);
        }
    });
    ej.Autocomplete.Locale = ej.Autocomplete.Locale || {};
    ej.Autocomplete.Locale["default"] = ej.Autocomplete.Locale["en-US"] = {
        addNewText: "Add New",
        emptyResultText: "No suggestions",
        actionFailure: "The specified field doesn't exist in given data source",
        watermarkText: ""
    };

    ej.filterType = {
        /**  Supports to search text with startswith  */
        StartsWith: "startswith",
        /**  Supports to search text with contains */
        Contains: "contains",
        /**  Supports to search text with endswith */
        EndsWith: "endswith",
        /**  Supports only for number lessthan only */
        LessThan: "lessthan",
        /**  Supports only for number greaterthan only */
        GreaterThan: "greaterthan",
        /**  Supports only for number lessthanorequal only */
        LessThanOrEqual: "lessthanorequal",
        /**  Supports only for number greaterthanorequal only */
        GreaterThanOrEqual: "greaterthanorequal",
        /**  Supports only for number equal only */
        Equal: "equal",
        /** Supports only for number notequal only */
        NotEqual: "notequal"
    };

    ej.SortOrder = {
        /** Supports to sorts with ascending only */
        Ascending: "ascending",
        /** Supports to sorts with descending only */
        Descending: "descending"
    };

    ej.MultiSelectMode = {
        /** Supports to selection mode with none only */
        None: "none",
        /** Supports to selection mode with delimitter only */
        Delimiter: "delimiter",
        /** Supports to selection mode with visualmode only */
        VisualMode: "visualmode"
    };
    ej.Animation = {
        /** Supports to animation type with none only */
        None: "none",
        /** Supports to animation type with slide only */
        Slide: "slide",
        /** Supports to animation type with fade only */
        Fade: "fade"
    };
	ej.Type = {
		Number: "number",
		String: "string",
		Boolean: "boolean",
		Date: "date"
	}
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to drag the html elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) { 
    ej.widget("ejDraggable", "ej.Draggable", {
        
        element: null,

        
        model: null,
        validTags: ["div", "span", "a"],

        
        defaults: {
            
            scope: 'default', 
            
            handle: null,  
            
            dragArea: null,
            
            clone: false,
            
            distance: 1, 
			
			dragOnTaphold: false,
            
            cursorAt: { top: -1, left: -2 }, 
            
            dragStart: null, 
            
            drag: null, 
            
            dragStop: null, 
			
			create: null,
            
            destroy: null,
            
            autoScroll:false,

            scrollSensitivity: 20,

            scrollSpeed: 20,
            
            helper: function () {
                return $('<div class="e-drag-helper" />').html("draggable").appendTo(document.body);
            }
        },

        
        _init: function () {
            this.handler = function () { },
			this.resizables = {};
            this._wireEvents();
            this._browser = ej.browserInfo();
            this._isIE8 = this._browser.name == "msie" && this._browser.version == "8.0";
            this._isIE9 = this._browser.name == "msie" && this._browser.version == "9.0";
            //e-pinch class enables the touch mode operations in IE browsers
            this._browser.name == "msie" && this.element.addClass("e-pinch");
            this._browser.name == "edge" && this.element.css("touch-action", "none");
        },

        _setModel: function (options) {
            for (var key in options) {
                switch (key) {
                    case "dragArea":
                        this.model.dragArea = options[key];
                        break;
						case "dragOnTaphold":
                        this.model.dragOnTaphold = options[key];
                        break;
                        case "autoScroll":
                        this.model.autoScroll=options[key];
                        break; 
                }
            }
        },
        
        
        _destroy: function () {
            $(document)
                .off(ej.eventType.mouseUp, this._destroyHandler)
                .off(ej.eventType.mouseUp, this._dragStopHandler)
                .off(ej.eventType.mouseMove, this._dragStartHandler)
                .off(ej.eventType.mouseMove, this._dragHandler)
                .off("mouseleave", this._dragMouseOutHandler)
                .off('selectstart', false);

            

            ej.widgetBase.droppables[this.scope] = null;
            
        },

        _initialize: function (e) {
            if( e.target && e.target.nodeName && $( e.target ).closest( "input[type='text'], input[type='checkbox'], textarea, select, option" ).length) return true;
            var ori = e;
			e.preventDefault();
            e = this._getCoordinate(e);
            this.target = $(ori.currentTarget);
            this._initPosition = { x: e.pageX, y: e.pageY };
            
            $(document).on(ej.eventType.mouseMove, this._dragStartHandler).on(ej.eventType.mouseUp, this._destroyHandler);
            if (!this.model.clone) {
                var _offset = this.element.offset();
                this._relXposition = e.pageX - _offset.left;
                this._relYposition = e.pageY - _offset.top;
            }
            $(document.documentElement).trigger(ej.eventType.mouseDown, ori); // The next statement will prevent 'mousedown', so manually trigger it.
           //return false;
        },
        _setDragArea: function () {
            var _dragElement = $(this.model.dragArea)[0]; if (!_dragElement) return;
            var elementArea, elementWidthBound, elementHeightBound, elementArea, direction = ["left", "right", "bottom", "top"], top, left;
            if (!ej.isNullOrUndefined(_dragElement.getBoundingClientRect)) {
                elementArea = _dragElement.getBoundingClientRect();
                elementArea.width ? elementWidthBound = elementArea.width : elementWidthBound = elementArea.right - elementArea.left;
                elementArea.height ? elementHeightBound = elementArea.height : elementHeightBound = elementArea.bottom - elementArea.top;
                for (var j = 0; j < direction.length; j++) {
                    this["border-" + direction[j] + "-width"] = isNaN(parseFloat($($(this.model.dragArea)[0]).css("border-" + direction[j] + "-width"))) ? 0 : parseFloat($($(this.model.dragArea)[0]).css("border-" + direction[j] + "-width"));
                    this["padding-" + direction[j]] = isNaN(parseFloat($($(this.model.dragArea)[0]).css("padding-" + direction[j]))) ? 0 : parseFloat($($(this.model.dragArea)[0]).css("padding-" + direction[j]));
                }
                top = $(this.model.dragArea).offset().top; left = $(this.model.dragArea).offset().left;
            } else {
                elementWidthBound = $(this.model.dragArea).outerWidth();
                elementHeightBound = $(this.model.dragArea).outerHeight();
                for (var j = 0; j < direction.length; j++) {
                    this["border-" + direction[j] + "-width"] = 0;
                    this["padding-" + direction[j]] = 0;
                }
                top = left = 0;
            }
            this._left = ej.isNullOrUndefined($(this.model.dragArea).offset()) ? 0 + this["border-left-width"] + this["padding-left"] : left + this["border-left-width"] + this["padding-left"];
            this._top = ej.isNullOrUndefined($(this.model.dragArea).offset()) ? 0 + this["border-top-width"] + this["padding-top"] : top + this["border-top-width"] + this["padding-top"];
            this._right = left + elementWidthBound - [this["border-right-width"] + this["padding-right"]];
            this._bottom = top + elementHeightBound - [this["border-bottom-width"] + this["padding-bottom"]];
        },
        _dragStart: function (e) {
            var scrollElement;
            if(e.type =="touchmove" || ( e.type =="mousemove" && ((e.buttons !== undefined ? e.buttons : e.which) == 1) || (this._isIE8 || this._isIE9))){
            var ori = e;
            e = this._getCoordinate(e);
            this.margins = {
                left: (parseInt(this.element.css("marginLeft"), 10) || 0),
                top: (parseInt(this.element.css("marginTop"), 10) || 0),
                right: (parseInt(this.element.css("marginRight"), 10) || 0),
                bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)
            };
            this.offset = this.element.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            this.position = this._getMousePosition(ori);
            var x = this._initPosition.x - e.pageX, y = this._initPosition.y - e.pageY;
            var distance = Math.sqrt((x * x) + (y * y));

            if (distance >= this.model.distance) {
			    var ele = this.model.helper({ sender: ori, element: this.target });
				if(!ele || ej.isNullOrUndefined(ele)) return;
                var dragTargetElmnt = this.model.handle = this.helper = ele;
                if (this.model.dragStart) {
                    var currTarget = null;
                    if (ori.type == 'touchmove') {
                        var coor = ori.originalEvent.changedTouches[0];
                        currTarget = document.elementFromPoint(coor.clientX, coor.clientY);
                    }
                    else currTarget = ori.originalEvent.target || ori.target;
					if(this.model.cursorAt["top"] == 0 && this.model.cursorAt["left"] ==0)
						currTarget = this._checkTargetElement(e) || currTarget;   
                    if (this._trigger("dragStart", { event: ori, element: this.element, target: currTarget, currentTarget: this._getCurrTarget(e)})) {
                        this._destroy();
                        return false;
                    }
                }
                if (this.model.dragArea) this._setDragArea();
                else {
                    this._left = this._top = this._right = this._bottom = 0;
                    this["border-top-width"] = this["border-left-width"] = 0;
                }
                
                if (!ej.isNullOrUndefined(dragTargetElmnt) && dragTargetElmnt.length > 0) {
                    var pos = dragTargetElmnt.offsetParent().offset();
                    $(document).off(ej.eventType.mouseMove, this._dragStartHandler).off(ej.eventType.mouseUp, this._destroyHandler)
                        .on(ej.eventType.mouseMove, this._dragHandler).on(ej.eventType.mouseUp, this._dragStopHandler).on("mouseleave", this._dragMouseOutHandler).on("selectstart", false);
                    ej.widgetBase.droppables[this.model.scope] = {
                        draggable: this.element,
                        helper: dragTargetElmnt.css({ position: 'absolute', left: (this.position.left - pos.left), top: (this.position.top - pos.top) }),
                        destroy: this._destroyHandler
                    }
                }
            }
            }
            if(this.model.autoScroll && e.type =="touchmove" || ( e.type =="mousemove" && ((e.buttons !== undefined ? e.buttons : e.which) == 1) || (this._isIE8 || this._isIE9))){
                scrollElement = this._getScrollParent(ori.target);
            }
        },

        _drag: function (e) {
            var left, top, pageX, pageY, scrollElement;
			e.preventDefault();
            this.position = this._getMousePosition(e);
            if (this.position.top < 0)
                this.position.top = 0;
            if ($(document).height() < this.position.top)
                this.position.top = $(document).height();
            if ($(document).width() < this.position.left)
                this.position.left = $(document).width();
            var helperElement = ej.widgetBase.droppables[this.model.scope].helper;
            if (this.model.drag) {
                var currTarget = null;
                if (e.type == 'touchmove') {
                    var coor = e.originalEvent.changedTouches[0];
                    currTarget = document.elementFromPoint(coor.clientX, coor.clientY);
                }
                else currTarget = e.originalEvent.target || e.target;
				if(this.model.cursorAt["top"] == 0 && this.model.cursorAt["left"] ==0 )
                    currTarget = this._checkTargetElement(e)|| currTarget; 
                var eventArgs = { event: e, element: this.target, target: currTarget, currentTarget: this._getCurrTarget(e), position: { left: null, top: null } };
                this._trigger("drag", eventArgs);// Raise the dragging event
            }
            var element = this._checkTargetElement(e);
            if (!ej.isNullOrUndefined(element)) {
                e.target = e.toElement = element;
                element.object._over(e); 
                this._hoverTarget = element; 
            }
            else if (this._hoverTarget) {
                e.target = e.toElement = this._hoverTarget;
                this._hoverTarget.object._out(e);
                this._hoverTarget = null;
            }
            var helperElement = ej.widgetBase.droppables[this.model.scope].helper;
			var pos= helperElement.offsetParent().offset();			 
            pageX = (ej.isNullOrUndefined(e.pageX) || e.pageX === 0 && e.type == "touchmove") ? e.originalEvent.changedTouches[0].pageX : e.pageX;
            pageY = (ej.isNullOrUndefined(e.pageY) || e.pageY === 0 && e.type == "touchmove") ? e.originalEvent.changedTouches[0].pageY : e.pageY;
            if (this.model.dragArea) {
                if (this._pageX != pageX) {
                    if (this._left > this.position.left) left = this._left;
                    else if (this._right < this.position.left + helperElement.outerWidth(true)) left = this._right - helperElement.outerWidth(true);
                    else left = this.position.left;
                }
                if (this._pageY != pageY) {
                    if (this._top > this.position.top) top = this._top;
                    else if (this._bottom < this.position.top + helperElement.outerHeight(true)) top = this._bottom - helperElement.outerHeight(true);
                    else top = this.position.top;
                }
            }
            else {
                left = this.position.left;
                top = this.position.top;
            }
            if (top < 0 || top - [pos.top + this["border-top-width"]] < 0) top = [pos.top + this["border-top-width"]];
            if (left < 0 || left - [pos.left + this["border-left-width"]] < 0) left = [pos.left + this["border-left-width"]];
            left = (eventArgs && eventArgs.position && eventArgs.position.left) ? eventArgs.position.left : left;
            top = (eventArgs && eventArgs.position && eventArgs.position.top) ? eventArgs.position.top : top;
            helperElement.css({ left: (eventArgs && eventArgs.position && eventArgs.position.left) ? left : left - [pos.left + this["border-left-width"]], top: (eventArgs && eventArgs.position && eventArgs.position.top) ? top : top - [pos.top + this["border-top-width"]] });
            this.position.left = left;
            this.position.top = top;
            this._pageX = pageX;
            this._pageY = pageY;

            if(this.model.autoScroll){
               
                if(scrollElement && scrollElement != document && scrollElement.tagName != "HTML"){

                    if($(scrollElement).offset().top + scrollElement.clientHeight - pageY < this.model.scrollSensitivity){
                        scrollElement.scrollTop = scrollElement.scrollTop + this.model.scrollSpeed;
                    } else if(pageY - $(scrollElement).offset().top < this.model.scrollSensitivity){
                        scrollElement.scrollTop = scrollElement.scrollTop - this.model.scrollSpeed;
                    }
                    
                    if($(scrollElement).offset().left + scrollElement.clientWidth - pageX < this.model.scrollSensitivity){
                        scrollElement.scrollLeft = scrollElement.scrollLeft + this.model.scrollSpeed;
                    } else if(pageX - $(scrollElement).offset().left < this.model.scrollSensitivity){
                        scrollElement.scrollLeft = scrollElement.scrollLeft + this.model.scrollSpeed;
                    } 

               }

              else{
                if (pageY - $(document).scrollTop() < this.model.scrollSensitivity) {
                    $(document).scrollTop($(document).scrollTop() - this.model.scrollSpeed);
                } else if ($(window).height() - (pageY - $(document).scrollTop()) < this.model.scrollSensitivity) {
                    $(document).scrollTop($(document).scrollTop() + this.model.scrollSpeed);
                }
                
                if (pageX - $(document).scrollLeft() < this.model.scrollSensitivity) {
                     $(document).scrollLeft($(document).scrollLeft() - this.model.scrollSpeed);
                } else if ($(window).width() - (pageX - $(document).scrollLeft()) < this.model.scrollSensitivity) {
                     $(document).scrollLeft($(document).scrollLeft() + this.model.scrollSpeed);
                }
            }
           
        }
        },

        _dragStop: function (e) {
            if (e.type == 'mouseup' || e.type == 'touchend') 
                this._destroy(e);
            if (this.model.dragStop) {
                var currTarget = null;
                if (e.type == 'touchend') {
                if(this.model.cursorAt["top"] == 0 && this.model.cursorAt["left"] ==0)
				currTarget = e.originalEvent.target || e.target;  
                else{
                    var coor = e.originalEvent.changedTouches[0];
                    currTarget = document.elementFromPoint(coor.clientX, coor.clientY);
                }  
                }
                else currTarget = e.originalEvent.target || e.target;                
                if(this.model.cursorAt["top"] == 0 && this.model.cursorAt["left"] ==0)
                    currTarget = this._checkTargetElement(e) || currTarget;              
                this._trigger("dragStop", { event: e, element: this.target, target: currTarget, currentTarget: this._getCurrTarget(e) });// Raise the dragstop event
            }
            this._dragEnd(e);
        },
        _dragEnd: function (e) {
            var element = this._checkTargetElement(e);
            if (!ej.isNullOrUndefined(element)) {
                e.target = e.toElement = element;
                element.object._drop(e, this.element);
            }
        },

        _dragMouseEnter: function (e) {
            $(document).off("mouseenter", this._dragMouseEnterHandler);
            if (this._isIE9)
                this._dragManualStop(e);
            else if (this._isIE8) {
                if (e.button == 0)
                    this._dragManualStop(e);
            }
            else if (e.buttons == 0)
                this._dragManualStop(e);
        },

        _dragManualStop: function (e) {
            if (this.model.dragStop != null)
                this._trigger("dragStop", { event: e, element: this.target, target: e.originalEvent.target || e.target, currentTarget: this._getCurrTarget(e) });  // Raise the dragstop event
            this._destroy(e);
        },

        _dragMouseOut: function (e) {
            $(document).on("mouseenter", this._dragMouseEnterHandler);
        },

        _checkTargetElement:function(e)
        {
            var target ;
			if (e.type == "touchmove" || e.type == "touchstart" || e.type == "touchend" || e.type=="taphold") {
				var coor = e.originalEvent.changedTouches[0];
				target = document.elementFromPoint(coor.clientX, coor.clientY);
			}
			else
				target = e.target;
            if (this.helper && this._contains(this.helper[0], target)) {
                this.helper.hide();
                target = this._elementUnderCursor(e);
                this.helper.show();
                return this._withDropElement(target);
            }
            return this._withDropElement(target);
        },
        _getCurrTarget: function(e) {
            var target = (e.originalEvent && e.originalEvent.target) || e.target;
            if(!ej.isNullOrUndefined(target.style)){
            var styleVal = target.style.display;
            if (this.element.is(target))
                target.style.display = "none";
			var currTarget = null;
			if((!ej.isNullOrUndefined(e.pageX)) && !(ej.isNullOrUndefined(e.pageY)))
				currTarget = document.elementFromPoint(e.pageX, e.pageY);
            target.style.display = styleVal;
            return currTarget;
            }
        },
        _withDropElement:function(target)
        {
            if (target) {
                var dropObj = $(target).data('ejDroppable');
                if (ej.isNullOrUndefined(dropObj)) dropObj = this._checkParentElement($(target));
                if (!ej.isNullOrUndefined(dropObj)) {
                    return $.extend(target, { object: dropObj });
                }
            }
        },
        _checkParentElement: function (element) {
            var target = $(element).closest('.e-droppable');
            if (target.length > 0) {
                var dropObj = $(target).data('ejDroppable');
                if (!ej.isNullOrUndefined(dropObj)) return dropObj;
            }
        },
        _elementUnderCursor:function(e){
            if(e.type == "touchmove" || e.type == "touchstart" || e.type == "touchend" || e.type=="taphold")
                return document.elementFromPoint(e.originalEvent.changedTouches[0].clientX, e.originalEvent.changedTouches[0].clientY);
            else return document.elementFromPoint(e.clientX, e.clientY);
        },
        _contains:function(parent, child) {
            try {
                return $.contains(parent, child) || parent == child;
            } catch (e) {
                    return false;
                }
        },
        _wireEvents: function () {
			if(ej.isDevice()==true && this.model.dragOnTaphold==true)
            this._on(this.element, "taphold", this._initialize);
		else
            this._on(this.element, ej.eventType.mouseDown, this._initialize);
            this._dragStartHandler = $.proxy(this._dragStart, this);
            this._destroyHandler = $.proxy(this._destroy, this);
            this._dragStopHandler = $.proxy(this._dragStop, this);
            this._dragHandler = $.proxy(this._drag, this);
            this._dragMouseEnterHandler = $.proxy(this._dragMouseEnter, this);
            this._dragMouseOutHandler = $.proxy(this._dragMouseOut, this);
        },
        _getMousePosition: function (event) {
            event = this._getCoordinate(event);
            var pageX = this.model.clone ? event.pageX : event.pageX - this._relXposition;
            var pageY = this.model.clone ? event.pageY : event.pageY - this._relYposition;
            return { left: pageX - [this.margins.left + this.model.cursorAt.left ], top: pageY - [this.margins.top + this.model.cursorAt.top ] };
        },
        _getCoordinate: function (evt) {
            var coor = evt;
            if (evt.type == "touchmove" || evt.type == "touchstart" || evt.type == "touchend" || evt.type== "taphold" && ej.browserInfo().name !="msie")
                coor = evt.originalEvent.changedTouches[0];
            return coor;
        },
        _getScrollParent: function(node){
            if (node && node.scrollHeight > node.clientHeight){
                return node;
            } else if(node && node.parentNode){
                return this._getScrollParent(node.parentNode) ;
            }
        }
    });

})(jQuery, Syncfusion);

/**
* @fileOverview Plugin to drop the html elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) { 
    ej.widget("ejDroppable", "ej.Droppable", {
        
        element: null,        
        model: null,
        validTags: ["div", "span", "a"],
        dropElements : [],
        defaults: {
            
            accept: null,
            
            scope: 'default',
            
            drop: null,
            
            over: null,
            
            out: null,
			
			create: null,
            
            destroy: null
        },

        
        _init: function () {
            this._mouseOver = false;
			this.dropElements.push(this);
        },

        _setModel: function (options) {

        },
        
        
        _destroy: function () {
			 $(this.element).off('mouseup', $.proxy(this._drop, this));
        },

        _over: function (e) {
            if (!this._mouseOver) {
                this._trigger("over", e);
                this._mouseOver = true;
            }
        },
        _out: function (e) {
            if (this._mouseOver) {
                this._trigger("out", e);
                this._mouseOver = false;
            }
        },
        _drop: function (e, dragElement) {
			var _target = e.target; 
			var _parents = $(_target).parents(".e-droppable");
			if($(_target).hasClass("e-droppable")) _parents.push(_target);
			for (var i =0; i< this.dropElements.length; i++ ){
				if ($(_parents).is($(this.dropElements[i].element)))
					this.dropElements[i]._dropEvent.call( this.dropElements[i], e, dragElement );
			}
        },
		_dropEvent : function (e, dragElement){
			var drag = ej.widgetBase.droppables[this.model.scope];
            var isDragged = !ej.isNullOrUndefined(drag.helper) && drag.helper.is(":visible");
			if(isDragged && e.type == "touchend") $(drag.helper).hide();
            var area = this._isDropArea(e);
			if(isDragged && e.type == "touchend") $(drag.helper).show();
            if (drag && !ej.isNullOrUndefined(this.model.drop) && isDragged && area.canDrop) {
                this.model.drop($.extend(e, { dropTarget: area.target , dragElement : dragElement }, true), drag);
            }
		},
        _isDropArea: function (e) {
            // check for touch devices only
            var area = { canDrop: true, target: $(e.target) };
            if (e.type == "touchend") {
                var coor = e.originalEvent.changedTouches[0], _target;
                _target = document.elementFromPoint(coor.clientX, coor.clientY);
                area.canDrop = false;
                var _parents = $(_target).parents();

                for (var i = 0; i < this.element.length; i++) {
                    if ($(_target).is($(this.element[i]))) area = { canDrop: true, target: $(_target) };
                    else for (var j = 0; j < _parents.length; j++) {
                        if ($(this.element[i]).is($(_parents[j]))) {
                            area = { canDrop: true, target: $(_target) };
                            break;
                        }
                    }
                    if (area.canDrop) break;
                }
            }
            return area;
        }
    });

})(jQuery, Syncfusion);

/**
* @fileOverview Plugin to resize the Html elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) { 
    ej.widget("ejResizable", "ej.resizable", {
        
        element: null,        
        model: null,
        validTags: ["div", "span", "a"],
        
        defaults: {
            
            scope: 'default',
            
            handle: null,
            
            distance: 1,
            
            maxHeight: null,
            
            maxWidth: null,
            
            minHeight: 10,
            
            minWidth: 10,
            
            cursorAt: { top: 1, left: 1 },
            
            resizeStart: null,
            
            resize: null,
            
            resizeStop: null,
			
			create: null,
            
            destroy: null,
            
            helper: function () {
                return $('<div class="e-resize-helper" />').html("resizable").appendTo(document.body);
            }
        },
        
        _init: function () {
            this.target = this.element;
            this._browser = ej.browserInfo();
            this._isIE8 = this._browser.name == "msie" && this._browser.version == "8.0";
            this._isIE9 = this._browser.name == "msie" && this._browser.version == "9.0";
            if (this.handle != null) {
                $(this.target).delegate(this.handle, ej.eventType.mouseDown, $.proxy(this._mousedown, this))
                .delegate(this.handle, 'resizestart', this._blockDefaultActions);
            }
            else {
                $(this.target).on(ej.eventType.mouseDown, $.proxy(this._mousedown, this));                                
            }
            this._resizeStartHandler = $.proxy(this._resizeStart, this);
            this._destroyHandler = $.proxy(this._destroy, this);
            this._resizeStopHandler = $.proxy(this._resizeStop, this);
            this._resizeHandler = $.proxy(this._resize, this);
            this._resizeMouseEnterHandler = $.proxy(this._resizeMouseEnter, this);
        },
        _mouseover: function (e) {
            if ($(e.target).hasClass("e-resizable")) {
                $(e.target).css({ cursor: "se-resize" });
                $(this.target).on(ej.eventType.mouseDown, $.proxy(this._mousedown, this));
            }
            else {
                $(this.target).off(ej.eventType.mouseDown);
                $(this.target).css({ cursor: "" });
            }
        },
        _blockDefaultActions: function (e) {
            e.cancelBubble = true;
            e.returnValue = false;
            if (e.preventDefault) e.preventDefault();
            if (e.stopPropagation) e.stopPropagation();
        },
        _setModel: function (options) {

        },
        _mousedown: function (e) {
            var ori = e;
            e = this._getCoordinate(e);
            this.target = $(ori.currentTarget);
            this._initPosition = { x: e.pageX, y: e.pageY };
            this._pageX = e.pageX;
            this._pageY = e.pageY;

            $(document).on(ej.eventType.mouseMove, this._resizeStartHandler).on(ej.eventType.mouseUp, this._destroyHandler);

            $(document.documentElement).trigger(ej.eventType.mouseDown, ori); // The next statement will prevent 'mousedown', so manually trigger it.
            return false;
        },

        _resizeStart: function (e) {
            if ($(e.target).hasClass("e-resizable")) {
                e = this._getCoordinate(e);
                var x = this._initPosition.x - e.pageX, y = this._initPosition.y - e.pageY, _width, _height;
                var distance = Math.sqrt((x * x) + (y * y));
                if (distance >= this.model.distance) {
                    if (this.model.resizeStart != null) 
                        if (this._trigger("resizeStart", { event: e, element: this.target }))  // Raise the resize start event
                            return;
                    var resizeTargetElmnt = this.model.helper({ element: this.target });
                    _width = (e.pageX - this._pageX) + resizeTargetElmnt.outerWidth();
                    _height = (e.pageY - this._pageY) + resizeTargetElmnt.outerHeight();
                    this._pageX = e.pageX;
                    this._pageY = e.pageY;
                    var pos = this.getElementPosition(resizeTargetElmnt);
                    $(document).off(ej.eventType.mouseMove, this._resizeStartHandler).off(ej.eventType.mouseUp, this._destroyHandler)
                        .on(ej.eventType.mouseMove, this._resizeHandler).on(ej.eventType.mouseUp, this._resizeStopHandler).on("mouseenter", this._resizeMouseEnterHandler).on("selectstart", false);
                    ej.widgetBase.resizables[this.scope] = {
                        resizable: this.target,
                        helper: resizeTargetElmnt.css({ width: _width, height: _height }),
                        destroy: this._destroyHandler
                    }
                }
            }
        },

        _resize: function (e) {
            var _width, _height, _diff;
            e = this._getCoordinate(e);
            var pos = this.getElementPosition(ej.widgetBase.resizables[this.scope].helper);
            var resizeTargetElmnt = this.model.helper({ element: this.target });
            _width = (e.pageX - this._pageX) + resizeTargetElmnt.outerWidth();
            _height = (e.pageY - this._pageY) + resizeTargetElmnt.outerHeight();
            this._pageX = e.pageX;
            this._pageY = e.pageY;
            if (_width < this.model.minWidth) {
                _diff = this.model.minWidth - _width;
                _width = this.model.minWidth;
                this._pageX = e.pageX + _diff;
            }
            if (_height < this.model.minHeight) {
                _diff = this.model.minHeight - _height;
                _height = this.model.minHeight;
                this._pageY = e.pageY + _diff;
            }
            if (this.model.maxHeight != null && _height > this.model.maxHeight) {
                _diff = _height - this.model.maxHeight;
                _height = this.model.maxHeight;
                this._pageY = e.pageY - _diff;
            }
            if (this.model.maxWidth != null && _width > this.model.maxWidth) {
                _diff = _width - this.model.maxWidth;
                _width = this.model.maxWidth;
                this._pageX = e.pageX - _diff;
            }
            ej.widgetBase.resizables[this.scope].helper.css({ width: _width, height: _height });
            this._trigger("resize", { element: this.target }) // Raise the resize event
        },

        _resizeStop: function (e) {
            if (this.model.resizeStop != null)
                this._trigger("resizeStop", { element: this.target });  // Raise the resize stop event
            if (e.type == 'mouseup' || e.type == 'touchend')
                this._destroy(e);
        },

        _resizeMouseEnter: function (e) {
            if (this._isIE9)
                this._resizeManualStop(e);
            else if (this._isIE8) {
                if (e.button == 0)
                    this._resizeManualStop(e);
            }
            else if (e.buttons == 0)
                this._resizeManualStop(e);
        },

        _resizeManualStop: function (e) {
            if (this.model.resizeStop != null)
                this._trigger("resizeStop", { element: this.target });  // Raise the resize stop event
            this._destroy(e);
        },

        
        _destroy: function (e) {
            $(document)
                .off(ej.eventType.mouseUp, this._destroyHandler)
                .off(ej.eventType.mouseUp, this._resizeStopHandler)
                .off(ej.eventType.mouseMove, this._resizeStartHandler)
                .off(ej.eventType.mouseMove, this._resizeHandler)
                .off("mouseenter", this._resizeMouseEnterHandler)
                .off('selectstart', false);            
            ej.widgetBase.resizables[this.scope] = null;
            
        },

        getElementPosition: function (elemnt) {
            if (elemnt != null && elemnt.length > 0)
                return {
                    left: elemnt[0].offsetLeft,
                    top: elemnt[0].offsetTop
                };
            else
                return null;
        },
        _getCoordinate: function (evt) {
            var coor = evt;
            if (evt.type == "touchmove" || evt.type == "touchstart" || evt.type == "touchend")
                coor = evt.originalEvent.changedTouches[0];
            return coor;
        }
    });

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Waiting pop elements
* @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) { 
    ej.widget("ejWaitingPopup", "ej.WaitingPopup", {

        element: null,

        model: null,
        validTags: ["div", "span"],
        _setFirst: false,
        _requiresID: true,
        _rootCSS: "e-waitingpopup",


        defaults: {

            showOnInit: false,

            target: null,

            appendTo: null,

            showImage: true,

            htmlAttributes: {},

            cssClass: "",

            text: null,

            template: null,

            create: null,

            destroy: null
        },

        dataTypes: {
            showOnInit: "boolean",
            showImage: "boolean",
            cssClass: "string"
        },
		_isTargetVisible: function(){
			return this.element.css('display') != 'none';
		},
        show: function () {
			if(this._isTargetVisible()){
				this._refreshPanel();
				this.maindiv.css("display", "block");
				this.model.showOnInit = true;
			}
        },

        hide: function () {
			this.maindiv.css("display", "none");
			this.model.showOnInit = false;
        },

        refresh: function () {
            if(this._isTargetVisible())
				this._refreshPanel();
        },

        _setText: function (text) {
            if (text) {
                if (this.popupText) this.popupText.html(text);
                else {
                    this._generateTextTag(text);
                    this._setContentPosition();
                }
            }
            else if (this.popupText) {
                this.popupText.remove();
                this.popupText = null;
            }
        },

        _showImage: function (boolean) {
            if (boolean) {
                this.popupImage = ej.buildTag("span.e-image");
                if (this.popupText) this.popupImage.insertBefore(this.popupText);
                else this.maindiv.append(this.popupImage);
            }
            else if (this.popupImage) {
                this.popupImage.remove();
                this.popupImage = null;
            }
        },

        _setTemplate: function () {
            var template = this.model.template;
            if (typeof template === "string") template = $(template);
            if (typeof template === "object" && typeof template.css === "function")
                this.templateObj = template;
            else
                this.templateObj = ej.buildTag("div", "", { "text-align": "center" }).append(template);

            this.templateObj.css({ "visibility": "visible", "display": "block" });
            this.maindiv.append(this.templateObj);
        },

        _setTheme: function (skin) {
            this.maindiv.removeClass(this.model.cssClass).addClass(skin);
        },



        _init: function () {
			this._initialize();
			this._render();
			this._wireEvents();
        },

        _wireEvents: function () {
            $(window).on('resize', $.proxy(this._resizeHandler, this));
        },
        _unwireEvents: function () {
            $(window).off("resize", $.proxy(this._resizeHandler, this));
        },

        _resizeHandler: function () {
            this.refresh();
         },

        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "text": this._setText(options[option]); break;
                    case "cssClass": this._setTheme(options[option]); break;
                    case "htmlAttributes ": this._addAttr(options[option]); break;
                    case "showOnInit": this._setVisibility(options[option]); break;
                    case "showImage": this._showImage(options[option]); this._setContentPosition(); break;
                    case "target": this.model.target = options[option]; this._setTarget(); this.refresh(); break;
                    case "appendTo": this.model.appendTo = options[option]; this._setTarget();
                        if (!ej.isNullOrUndefined(this.model.appendTo) && this.model.appendTo != "document" && this.model.appendTo != "window")
                            this.maindiv.appendTo($(this.model.appendTo));
                        else
                            $('body').append(this.maindiv);
                        this.refresh(); break;
                    case "template":
                        this.maindiv.empty();
                        if (options[option]) {
                            this.model.template = options[option];
                            this._setTemplate();
                        }
                        else {
                            this.model.template = options[option] = null;
                            this._showImage(this.model.showImage);
                            if (this.model.text) this._generateTextTag(this.model.text);
                        }
                        this._setContentPosition();
                        break;
                }
            }
        },
        _setTarget: function () {
            if (this.model.target == "document") 
                this.targetElement = $(document);
            else if (this.model.target == "window")
                this.targetElement = $(window);
            else
                this.targetElement = this.model.target ? $(this.model.target) : this.element;
        },
        _destroy: function () {
            this.maindiv.remove();
			this._unwireEvents();
        },

        _initialize: function () {
            this.maindiv = null;
            this.popupText = null;
            this.popupImage = null;
            this.templateObj = null;
            this.targetElement = null;
        },


        _render: function () {
            this._setTarget();
            var oldWrapper = $("#" + this.element[0].id + "_WaitingPopup").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.maindiv = ej.buildTag("div.e-waitpopup-pane e-widget " + this.model.cssClass + "#" + this.element[0].id + "_WaitingPopup");
            if (this.model.template) {
                this._setTemplate();
            }
            else {
                this._showImage(this.model.showImage);
                if (this.model.text) {
                    this._generateTextTag(this.model.text);
                }
            }
            if (!ej.isNullOrUndefined(this.model.appendTo) && this.model.appendTo != "document" && this.model.appendTo != "window")
                this.maindiv.appendTo($(this.model.appendTo));
            else
                $('body').append(this.maindiv);
            this._setVisibility(this.model.showOnInit);
            this._addAttr(this.model.htmlAttributes);
        },

        _refreshPanel: function () {
            this.maindiv.width(this.targetElement.outerWidth());
            this.maindiv.height(this.targetElement.outerHeight());
            this._setPanelPosition();
            this._setContentPosition();
        },
        _addAttr: function (htmlAttr) {
            var proxy = this;
            $.map(htmlAttr, function (value, key) {
                if (key == "class") proxy.maindiv.addClass(value);
                else proxy.maindiv.attr(key, value)
            });
        },

        _setPanelPosition: function () {			 
            var location = ej.util.getOffset(this.targetElement);
			if(this.model.appendTo != null && $(this.model.appendTo).length >0) {				
				if ((this.targetElement.css("position") == "relative" || this.targetElement.css("position") == "absolute") && this.targetElement[0] === $(this.model.appendTo)[0] ) {					
					location = {left:0, top:0};														
				}
				else{
					location.left -= this.targetElement.offsetParent().offset().left;
					location.top -= this.targetElement.offsetParent().offset().top;
				}
			}
            this.maindiv.css({
                "position": "absolute",
                "left": Math.ceil(location.left) + "px",
                "top": Math.ceil(location.top) + "px",
                "z-index": this._maxZindex() + 1
            });
        },

        _setContentPosition: function () {
            if (this.model.template == null) {
                var textHeight = 0, imgHeight = 0, targetHeight, top = null;
                targetHeight = this.targetElement.outerHeight();
                if (this.popupText) textHeight = this.popupText.outerHeight();
                if (this.popupImage) imgHeight = this.popupImage.outerHeight();

                if (this.popupImage) {
                    top = Math.ceil((targetHeight - (imgHeight + textHeight)) / 2);
                    this.popupImage.css("top", top + "px");
                }
                if (this.popupText) {
                    if (!top) top = Math.ceil((targetHeight - textHeight) / 2);
                    this.popupText.css("top", top + "px");
                }
            }
            else {
                this.templateObj.css({
                    "position": "relative",
                    "left": Math.ceil((this.targetElement.outerWidth() - this.templateObj.outerWidth()) / 2),
                    "top": Math.ceil((this.targetElement.outerHeight() - this.templateObj.outerHeight()) / 2)
                });
            }
        },

        _generateTextTag: function (text) {
            this.popupText = ej.buildTag("div.e-text", text);
            this.maindiv.append(this.popupText);
        },

        _setVisibility: function (showOnInit) {
            if (showOnInit && this._isTargetVisible()) this.show();
            else this.hide();
        },

        _maxZindex: function () {
            return ej.util.getZindexPartial(this.element);
        }
    });
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.ExcelFilter = ej.ExcelFilter || {};
    ej.excelFilter = function (options) {
		ej.loadLocale("ejExcelFilter");
        this._ctrlInstance = options["instance"];
        this.id = this._ctrlInstance._id;
        this._dialogContainer = null;
        this._showSort = options["showSortOptions"] || false;
        this._interDeterminateState = options["interDeterminateState"] || false;
        this._maxCount = ej.isNullOrUndefined(options["maxFilterLimit"]) ? 1000 : options["maxFilterLimit"];
        this._formatFiltering = true;
        this._locale = this._ctrlInstance.model.locale || "en-US";
        this.localizedLabels = this._getLocalizedLabel();
        this._filterHandler = options["filterHandler"] || null;
        this._searchHandler = this._ctrlInstance.model.searchSettings || null
		this._cancelHandler = options["cancelHandler"] || null;
		this._customFilterHandler = options["customFilterHandler"] || null;
        this._cssClass = options["cssClass"] || null;
        this._matchCase = options["allowCaseSensitive"] || false;
	    this._accent = options["allowAccent"] || false;
        this._title = options["title"] || this.localizedLabels.title;
        this._complexBlankCriteria = options["enableComplexBlankFilter"];
        this._blankValue = options["blankValue"];
        this.fName = options["initFilterCol"] || null;
        this._spliter = options["valueDelimiter"] || ej.ExcelFilter.valueDelimiter;
        this._initialFName = this.fName;
        this._displayName = null;
        this._dataSource = null;
        this._isUrlAdaptor = false;
		this._$tableID = null;
        this._$blankVal = null;
        this._$selectedColors = [];
        this._$enableColor = false;
        this._$filteredByColor = "";
        this._$colType = null;
        this._$key = 0;
        this.filteredColumn = null;
        this.sortedColumns = null;        
        this._chkList = null;
        this._listsWrap = null;
        this._menuWrap = null;
        this._localJSON = null;
        this._actualCount = 0;
        this._totalRcrd = 0;
        this._enableResponsiveRow=false;
        this._searchCount = 0;
        this._currentData = null;
        this._openedFltr = null;
        this._predicates = [];
        this.cFilteredCols = this.fName!=null ? [this.fName] : [];
        this._columnsFiltered = [];
        this.guid = ej.getGuid("excelfilter");
        this._noDlg = [];
        this._sepAftr = ["sortDesc","notequal", "between", "top10","endswith","contains"];
        this._posType = ["number", "date", "datetime", "string", "boolean","guid"];
        this._empties = !this._complexBlankCriteria ? [this.guid] : ["null", "undefined", ""];
        this._reqInProgess = false;
        this._isFiltered = false;
        this._onActionBegin = options["actionBegin"] || null;
        this._onActionComplete = options["actionComplete"] || null;
        this.maxItemOnQuery = 0; /*To prevent OData URI queryString length*/
        this.enableNormalize = true; /*To clean up redundant values after formatting */
        this.enableSelect = false;
        this._onDemandSearch = false;
        this._maxFilterCount = false;
        this._clearSearchValue = false;
		this._islargeData = false;
        this._checkedValue = [];
        this._searchRequest = false;
        this._isIndeterminate = false;
        this._selectAll = "<div class='e-ftrchk'><input type='checkbox' class='e-selectall' value='selectall' class='e-ftrchk' /><label class='e-ftrchk'>(" + this.localizedLabels.SelectAll + ")</label></div>";
        this._blanks = "<div class='e-ftrchk'><input type='checkbox' id='blanks' class='e-ftrchk' value='" + this._empties.join(this._spliter) + "' @@/><label class='e-ftrchk' for='blanks' value=''>(" + this.localizedLabels.Blanks + ")</label></div>";
        this._blank = undefined;
        this._addAtLast = false;
        this._addToFilter = "<div class='e-ftrchk'><input type='checkbox' class='e-addtofilter'/><label class='e-ftrchk'>" + this.localizedLabels.AddToFilter + "</label></div>";
        this._preChkList = [];
        this._checked = null;
        this._add = null;
        this.guidMenuOpt = [
              { id: 1, text: this.localizedLabels.SortNoSmaller, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortNoLarger, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.GuidFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.GuidMenuOptions }];
        this.numberMenuOpt = this.booleanMenuOpt = [
              { id: 1, text: this.localizedLabels.SortNoSmaller, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortNoLarger, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.NumberFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.NumberMenuOptions }];
        this.stringMenuOpt = [
              { id: 1, text: this.localizedLabels.SortTextAscending, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortTextDescending, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.TextFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.StringMenuOptions }];
        this.dateMenuOpt = [
              { id: 1, text: this.localizedLabels.SortDateOldest, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortDateNewest, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.DateFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.DateMenuOptions }];
        this.datetimeMenuOpt = [
              { id: 1, text: this.localizedLabels.SortDateOldest, sprite: "e-sortasc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortAsc" } },
              { id: 2, text: this.localizedLabels.SortDateNewest, sprite: "e-sortdesc e-icon e-fnsort", htmlAttribute: { "ejfnrole": "sortDesc" } },
              { id: 3, text: this.localizedLabels.SortByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 4, text: this.localizedLabels.ClearFilter, sprite: "e-filternone e-icon", htmlAttribute: { "ejfnrole": "clearfilter" } },
              { id: 5, text: this.localizedLabels.FilterByColor, htmlAttribute: { "ejfnrole": "popup" }, child: [] },
              { id: 6, text: this.localizedLabels.DateTimeFilter, htmlAttribute: { "ejfnrole": "filterpopup" }, child: this.localizedLabels.DatetimeMenuOptions }];
        return this;
    };
    ej.excelFilter.prototype = {
        //Helpers to handle (Blanks) value.
        isNotBlank: function (key, global) {
            var e = ej.isNullOrUndefined(key) || (key === ""||key===null);

            if (!global && (key === ""||key===null))/* Handle special case - since "" string sorted before all */
                this._addAtLast = true;

            return !e;
        },   
        _checkBlank: function (key) {         

            if (this.isNotBlank(key))
                return true;
            /*Ensure Blank value added only once */
            var ret = this._blank == undefined && !this._addAtLast;

            if (ret) this._blank = true;            

            return ret;
        },
        _getValueData: function (key, data) {
            var arr = this._empties;

            if (this.isNotBlank(key, true)){
               arr = ej.distinct(data, this._$foreignKey || this.fName, false);
			   if(!(ej.browserInfo().name == "msie" && ej.browserInfo().version == "8.0")){
				for(var dat = 0; dat < arr.length; dat++){
					if((arr[dat] instanceof Date)){
						var temp = {dateString : arr[dat]};
						arr[dat] = JSON.parse(JSON.stringify(temp)).dateString;
						}
					}
			   }
			}

            return arr.join(this._spliter); /*Return value will be set to input element value attr*/
        },
        //Collection to predicate processing
        getPredicate: function (cols, field, updateModel) {
            this._isUrlAdaptor = this._ctrlInstance._dataSource() instanceof ej.DataManager && (this._ctrlInstance._dataSource().adaptor instanceof ej.UrlAdaptor || this._ctrlInstance._dataSource().adaptor instanceof ej.WebMethodAdaptor);
            var c, dis = field != undefined ? [field] : ej.distinct(cols, "field", false), collection, pred = {};
            for (var f = 0, flen = dis.length; f < flen; f++) {
                collection = new ej.DataManager(cols).executeLocal(new ej.Query().where("field", "equal", dis[f]));
                pred[dis[f]] = this.generatePredicate(collection);
                if (updateModel) {
                    this._predicates[this._$key] = this._predicates[this._$key] || {};
                    this._predicates[this._$key][dis[f]] = pred[dis[f]];
                }

            }
            return pred;
        },

        generatePredicate: function (cols) {
            var len = cols ? cols.length : 0, predicate, first;
            if (!len) return;
            first = this._updateDateFilter(cols[0]);
            if(this._isUrlAdaptor && (first.type == "date" || first.type == "datetime"))
                predicate = this._getDatePredicate(first);
            else
                predicate = first.ejpredicate ? first.ejpredicate : ej.Predicate(first.field, first.operator, first.value, first.ignoreCase || !first.matchcase, first.ignoreAccent || !first.accent);
            for (var p = 1; p < len; p++) {
                cols[p] = this._updateDateFilter(cols[p]);
                if (this._isUrlAdaptor && len > 2 && p > 1 && cols[p].predicate == "or"){
                    if (cols[p].type == "date" || cols[p].type == "datetime")                        
                        predicate.predicates.push(this._getDatePredicate(cols[p]));             
                    else
                        predicate.predicates.push(ej.Predicate(cols[p].field, cols[p].operator, cols[p].value, cols[p].ignoreCase || !cols[p].matchcase, cols[p].ignoreAccent || !cols[p].accent));
                }
                else{
                    if (this._isUrlAdaptor && (cols[p].type == "date" || cols[p].type == "datetime"))
                        predicate = predicate[cols[p].predicate](this._getDatePredicate(cols[p]));
                    else
                        predicate = cols[p].ejpredicate ? predicate[cols[p].predicate](cols[p].ejpredicate) : predicate[cols[p].predicate](cols[p].field, cols[p].operator, cols[p].value, cols[p].ignoreCase || !cols[p].matchcase, cols[p].ignoreAccent || !cols[p].accent);
                }
            }
            return predicate || null;
        },
        _getDatePredicate: function(predicate){
            return ej.Predicate(predicate.field, predicate.operator, predicate.value, predicate.ignoreCase || !predicate.matchcase, predicate.ignoreAccent || !predicate.accent);           
        },
        getFilterFrom: function (dm, data) {
            var data = ej.distinct(data, this.fName, false);
                        
            if (this.maxItemOnQuery > 0) data = data.slice(0, this.maxItemOnQuery);
                        
            return ej.UrlAdaptor.prototype.getFiltersFrom(data, new ej.Query().foreignKey(this._$foreignKey)); /*get [or] conditioned ejPredicate*/
        },
        /*Main Dialog*/
        renderDialog: function (type) {
            this._$colType = type;
            var dlgId = this.id + type + "_excelDlg";           
            //if ($("#" + dlgId).length != 0)
            //    return;
            var $dlg = ej.buildTag("div#" + dlgId + ".e-excelfilter e-dlgcontainer e-shadow");
            var $ul = ej.buildTag("ul#" + this.id + type + "_MenuItem");
            var menuData = this._getMenuData(type);
            $ul = this._createLiTag($ul, menuData, false);
            var $searchBox = ej.buildTag("span.e-searchbox e-fields").append(ej.buildTag("input#" + this.id + "_SearchBox.e-ejinputtext e-searchinput", {}, {}, { "type": "text", "placeholder": this.localizedLabels.Search })).append(ej.buildTag("span.e-search e-icon"))
            var $lbox = ej.buildTag("div#" + this.id + type + "_CheckBoxList.e-checkboxlist e-fields").append(ej.buildTag("div"));
            var $btns = this._createBtn();
            var $sBox = ej.buildTag("div.e-searchcontainer");            
            var $status = ej.buildTag("div.e-status e-fields e-hide", this.localizedLabels.CheckBoxStatusMsg);
            $dlg.append($ul);            
            $sBox.append($searchBox);
            $sBox.append($status);
            $sBox.append($lbox);
            $sBox.append($btns);
            $dlg.append($sBox);
            $dlg.appendTo(this._ctrlInstance.element);
            $dlg.css("display", "none");
            this._renderCustomFDlg(type);
            this._dialogContainer = $dlg;
            if(this._cssClass!=null)
                $dlg.addClass(this._cssClass);
            if (!this._showSort) {
                $ul.find(".e-fnsort").closest("li").css("display", "none");
                $ul.find("li.e-separator:first").css("display", "none");
            }
            this._lsitBoxTemplate();
            this._renderSubCtrls(type);
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10)
                ej.ieClearRemover($searchBox.find("input")[0]);
            this._wireEvents();
        },
        _getDeprecatedLocalizedLabel: function (key) {
            if (["Ok", "OK"].indexOf(key) != -1)
                return this.localizedLabels.Ok || this.localizedLabels.OK;
        },
        _renderSubCtrls: function (type) {
            $("#" + this.id + type + "_MenuItem").ejMenu({ orientation: "vertical", width: 266, container: "#" + this.id, click: ej.proxy(this._menuHandler, this), enableRTL: this._ctrlInstance.model.enableRTL, enableSeparator: false });
            $("#" + this.id + type + "_OkBtn").ejButton({ text: this._getDeprecatedLocalizedLabel("OK"), showRoundedCorner: true, width: 60, click: ej.proxy(this._fltrBtnHandler, this), enabled: true });
            $("#" + this.id + type + "_CancelBtn").ejButton({ text: this.localizedLabels.Cancel, showRoundedCorner: true, width: 60, click: ej.proxy(this.closeXFDialog, this) });
            $("#" + this.id + type + "_CheckBoxList").ejScroller({ height: 130, width: 234, scroll: ej.proxy(this._virtualize,this) });
            $("#" + this.id + type + "_CheckBoxList").ejWaitingPopup({ showOnInit: false });
        },
        openXFDialog: function (options) {
			var obj;
            this.fName = options["field"];
            this._dataSource = options["dataSource"];
            this._$colType = options["type"] || "string";
            this._$format = options["format"] || "";
            this._enableResponsiveRow=options["enableResponsiveRow"];
            this.filteredColumn = options["filteredColumns"] || this._ctrlInstance.model.filterSettings.filteredColumns;
            this.sortedColumns = options["sortedColumns"] || this._ctrlInstance.model.sortSettings.sortedColumns;
            this._displayName = options["displayName"];
            this.query = options["query"] || new ej.Query();
            this._$key = options["key"] || 0;
			this._$tableID = options["tableID"];
			this._$blankVal = ej.isNullOrUndefined(this._$tableID) ? this._$blankVal : options["blank"];
            this._$selectedColors = options["selectedColors"] || [];
            this._$enableColor = options["enableColor"] || false;
            this._$filteredByColor = options["filteredByColor"] || this._$filteredByColor;
			this._$foreignField = options["foreignKeyValue"];
			this._$foreignData = options["foreignDataSource"];
			this._$foreignKey = options["foreignKey"];
			this._$foreignKeyType = options["foreignKeyType"];
			if (this._$foreignData instanceof ej.DataManager && (this._$foreignData.adaptor instanceof ej.ODataAdaptor || this._$foreignData.adaptor instanceof ej.ODataV4Adaptor || this._$foreignData.adaptor instanceof ej.WebApiAdaptor))
			    this.maxItemOnQuery = 50;
			$.extend(this.localizedLabels, options["localizedStrings"] || {});
            var args = { requestType : "filterbeforeopen", filterModel : this, columnName:this.fName, columnType: this._$colType };
            if (this._ctrlInstance._trigger(this._onActionBegin, args))
                return;
            if (this._openedFltr == null || !this._openedFltr.is($("#" + this.id + this._$colType + "_excelDlg"))) {
                this.closeXFDialog();
                this._openedFltr = $("#" + this.id + this._$colType + "_excelDlg");
            }
            this._listsWrap = $("#" + this.id + this._$colType + "_CheckBoxList");
            this._menuWrap = $("#" + this.id + this._$colType + "_MenuItem");
            this._searchBox = this._openedFltr.find(".e-searchbox input");
            this._setPosition(this._openedFltr, options["position"]);
            this._openedFltr.addClass(options["cssClass"]);
            this._openedFltr.fadeIn(300, function () {
            });
			var $popups = $("#" + this.id + this._$colType + "_MenuItem").find("li[ejfnrole='popup']");
            if (this._$enableColor) {
                this._createDivTag($popups.eq(0).find(".e-shadow"), this._$selectedColors, false, "sort");
                (this._$filteredByColor == -1 || (this._$filteredByColor.length < 1 || this._$filteredByColor === this.fName)) ? this._createDivTag($popups.eq(1).find(".e-shadow"),this._$selectedColors, false, "filter") : $popups.eq(1).addClass("e-disable-item");
            }    
            else 
                $popups.hide();
            this._isFiltered = this._predicates[this._$key] != undefined && this._predicates[this._$key][this.fName] != undefined;
            this._isFiltered = options["isFiltered"] || this._isFiltered;
            if ((this._$colType == "date" || this._$colType == "datetime") && this._$format == "")
                this._$format = this._$colType == "date" ? "{0:MM/dd/yyyy}" : "{0:MM/dd/yyyy hh:mm:ss}";
            this._processListData();
			obj = this._listsWrap.data("ejScroller");
            
                        
            this._setDisable();
            var args = { requestType: "filterafteropen", filterModel: this, columnName: this.fName, columnType: this._$colType };
            if (this._ctrlInstance._trigger(this._onActionComplete, args))
                return;
        },
        closeXFDialog: function (e) {
            if (e != null) {
                var $target = $(e.target);
                if (!($target.closest("#" + this.id + this._$colType + "_CustomFDlg").length > 0 || $target.closest("#" + this.id + this._$colType + "_excelDlg").length > 0))
                    return;
            }            
            if (this._openedFltr) {
                if (!this._openedFltr.hasClass("e-dlgcustom")) {
                    this._openedFltr.fadeOut(300, function () {
                    });
                    this._listsWrap.ejWaitingPopup("hide");
                }
                else {
                    this._openedFltr.ejDialog("close");
                }
                !ej.isNullOrUndefined(this._cancelHandler) && this._cancelHandler();
                this.resetFilterModel();/*Reset private properties after filter closed*/
                this._ctrlInstance._$fDlgIsOpen = false;
            }
        },
        _setPosition: function (ele, pos) {
            ele.css("position", "absolute");
            ele.css("left", pos["X"]).css("top", pos["Y"]);                      
        },
        _setDisable: function () {
            var $clr = this._menuWrap.find("li[ejfnrole='clearfilter']"), $fltr = this._menuWrap.find("li[ejfnrole='filterpopup']");
            var $sort = this._menuWrap.find("li[ejfnrole *= 'sort']"), $checked = this._listsWrap.find("input").filter(":checked:not(.e-selectall)").length;
            !this._isFiltered ? $clr.addClass("e-disable-item") : $clr.removeClass("e-disable-item");
            if (this._showSort) {
                var sQM = ej.DataManager(this.sortedColumns).executeLocal(new ej.Query().where("field", "equal", this.fName));
                ( sQM.length && sQM[0]["direction"] == "ascending") ? $sort.filter("[ejfnrole='sortAsc']").addClass("e-disable-item") : $sort.filter("[ejfnrole='sortAsc']").removeClass("e-disable-item");
                (sQM.length && sQM[0]["direction"] == "descending") ? $sort.filter("[ejfnrole='sortDesc']").addClass("e-disable-item") : $sort.filter("[ejfnrole ='sortDesc']").removeClass("e-disable-item");
            }
            var $flteredList = $fltr.find(".aschild");
            if (this.cFilteredCols.length != 0 && $.inArray(this.fName,this.cFilteredCols) != -1) {
                for (var f = 0; f < this.filteredColumn.length; f++) {
                    if (this.filteredColumn[f].field == this.fName) {
                        if ($flteredList.find("#ejFiltercheck").length == 0) {
                            $flteredList.append("<input type='checkbox' id='ejFiltercheck' />");
                            $flteredList.find("#ejFiltercheck").ejCheckBox({ checked: true });
                            $flteredList.find("#ejFiltercheck").ejCheckBox("disable");
                        }
                        if ($fltr.find(".e-shadow .e-exceltick").length > 0)
                            $fltr.find(".e-shadow .e-exceltick").remove();
                        if (this.filteredColumn[f].field == this.fName && !ej.isNullOrUndefined(this.filteredColumn[f + 1]) && this.filteredColumn[f + 1].field == this.fName && (this._$foreignField && this.filteredColumn[f + 1].customFilter || !this._$foreignField)) {
                            if (this.filteredColumn[f].operator == "greaterthanorequal" && this.filteredColumn[f + 1].operator == "lessthanorequal")
                                $fltr.find(".e-shadow .e-list[ejvalue=between]").find("a").append("<span class='e-exceltick e-icon' />");
                            else
                                $fltr.find(".e-shadow .e-list[ejvalue=customfilter]").find("a").append("<span class='e-exceltick e-icon' />");
                        }
                        else if (this._$foreignField)
                            $fltr.find(".e-shadow .e-list[ejvalue=" + this.filteredColumn[f].actualFilterOperator + "]").find("a").append("<span class='e-exceltick e-icon' />");
                        else
                            $fltr.find(".e-shadow .e-list[ejvalue=" + this.filteredColumn[f].operator + "]").find("a").append("<span class='e-exceltick e-icon' />");
                        break;
                    }
                }
            }
            else {
                for (var f = 0; f < this.filteredColumn.length; f++) {
                    if (this.filteredColumn[f].field == this.fName) {
                        this._removeTick($fltr,$flteredList);
                        break;
                    }
                }
            }
            if (!this._isFiltered && $flteredList.find("#ejFiltercheck").length != 0) {
                 this._removeTick($fltr,$flteredList);
            }
            if (this._$colType == "boolean")
                this._menuWrap.find("li[aria-haspopup=true]").addClass("e-hide");            
            this._searchBox.val(""); this._searchBox.siblings().addClass("e-search").removeClass("e-cancel");
        },
        _removeTick: function($fltr,$flteredList){
            $flteredList.find("#ejFiltercheck").ejCheckBox("destroy");
            $fltr.find(".aschild #ejFiltercheck").remove();
            $fltr.find(".e-shadow .e-exceltick.e-icon").remove();
        },
        _createBtn: function (isCDlg) {
            var id = isCDlg ? this.id + this._$colType + "Custom" : this.id + this._$colType;
            var $divCon = ej.buildTag("div.e-btncontainer e-fields");
            var $div = ej.buildTag("div");
            $div.append(ej.buildTag("input#" + id + "_OkBtn.e-fltrbtn e-btnsub e-flat", {}, {}, { type: "button" })).append(ej.buildTag("input#" + id + "_CancelBtn.e-fltrbtn e-btncan e-flat", {}, {}, { type: "button" }));
            return $divCon.append($div);
        },
        _menuHandler: function (args) {
            var $ele = $(args.element);
            var role = $ele.attr("ejfnrole");
            var arg = {};
            if (role === "filterbgcolor" || role === "filterfgcolor") {
                var fDetails = { field: this.fName, operation: role, color: $(args.element).css('background-color')};
			    arg = { originalEvent: args.event, action: "filterbycolor", filterDetails: fDetails, tableID: this._$tableID }; 
                this._isFiltered = false;
            }
            else if (role == "clearfilter") {
                var ftrDetails = { field: this.fName, operator: "", value: "", predicate: "or" };
                arg = { originalEvent: args.event, fieldName: this.fName, action: "clearfiltering", filterDetails: ftrDetails, tableID: this._$tableID };
                var indx = $.inArray(this.fName, this.cFilteredCols);
                indx!=-1 && this.cFilteredCols.splice(indx, 1);
				var $cIndx = $.inArray(this.fName, this._columnsFiltered);
                $cIndx!=-1 && this._columnsFiltered.splice($cIndx, 1);
                if (this._initialFName == this.fName)
                    this._initialFName = null;
            }
            else if(role == "popup" || role == "filterpopup") {
                return;
            }
            else if (role == "operator") {
                this._openCustomFilter($ele.attr("ejvalue"));
            }
			else{
                var sOrder, sDetails;
				if(role == "sortAsc" || role == "sortDesc"){
					sOrder = role == "sortAsc" ? "ascending" : "descending";
					sDetails = { field: this.fName, direction: sOrder };
					arg = { originalEvent: args.event, action: "sorting", sortDetails: sDetails, tableID: this._$tableID };
				}
				else{
					sDetails = { field: this.fName, direction: sOrder, operation: role, color: $(args.element).css('background-color')};
					arg = { originalEvent: args.event, action: "sortbycolor", sortDetails: sDetails, tableID: this._$tableID }; 
				}
            }
            if (role != "operator") {
                this._filterHandler(arg);
                this.closeXFDialog();
            }
        },
        _searchBoxFocus: function (e) {
            var $target = $(e.target);
            if ($target.hasClass("e-cancel")) {
                $target.prev().val("");
                $target.next().addClass("e-cancel")
                $target.addClass("e-search");
                $target.prev().trigger("keyup");
            }
            if (e.type == "focusin") {
                $target.next().addClass("e-cancel");
                $target.next().removeClass("e-search");
            }
        },
        _search: function (e) {
            var enterText = e.target.value, args = {}, parsed, operator, $target = $(e.target);
            parsed = (this.getType() != "string" && parseFloat(enterText)) ? parseFloat(enterText) : enterText;
            operator ="contains" ;
            parsed = (parsed == "" || parsed == undefined) ? undefined : parsed;
            if (this._$colType == "boolean") {
                if (parsed != undefined && this.localizedLabels.True.toLocaleLowerCase().indexOf(parsed.toLowerCase()) != -1)
                    parsed = "true";
                else if (parsed != undefined && this.localizedLabels.False.toLocaleLowerCase().indexOf(parsed.toLowerCase()) != -1)
                    parsed = "false";
            }
            if (this._$colType == "date" || this._$colType == "datetime") {
                parsed = ej.parseDate(enterText, this.replacer(this._$format, /{0:|}/g, ""));
                operator = "equal";
                if (this._previousValue == null && parsed == null)
                    return;
            }
            this._previousValue = parsed;
            delay = this._dataSource instanceof ej.DataManager && (this._ctrlInstance._gridRecordsCount > this._ctrlInstance.model.filterSettings.maxFilterChoices) ? 1500 : 0;
            sender = { type: "filterchoicesearch", value: parsed, operator: operator, matchcase: ["date", "datetime"].indexOf(this._$colType) != -1 ? false : this._matchCase, accent: this._accent }
            this._processSearch(sender, delay);
            if ($target.val() == "") {
                $target.next().addClass("e-search");
                $target.next().removeClass("e-cancel");
            } else {
                $target.next().addClass("e-cancel");
                $target.next().removeClass("e-search");
            }
        },
        _processSearch: function (sender, delay) {
            if (!this._alreadySearchProcessed) {
                this._alreadySearchProcessed = true;
                this._startTimer(sender, delay);
            } else {
                this._stopTimer();
                this._startTimer(sender, delay);
            }
        },
        _startTimer: function (sender, delay) {
			proxy = this;
            this._timer = window.setTimeout(
                function () {
                    proxy._processListData(sender);
                }, delay)
        },
        _stopTimer: function () {
            if (this._timer != null)
                window.clearTimeout(this._timer);
        },
        _getLocalizedLabel: function (property) {
            return ej.getLocalizedConstants("ej.ExcelFilter", this._locale);
        },
        _getMenuData: function (type) {
            return type != undefined ? this[type + "MenuOpt"] : [];
        },
		_checkHtmlEncode: function(key){
           var isEncode = !ej.isNullOrUndefined(this._ctrlInstance.getColumnByField) ? this._ctrlInstance.getColumnByField(this.fName).disableHtmlEncode : false;
           var bool = !ej.isNullOrUndefined(isEncode) && isEncode  ? true : false;
           return bool;
        },
        /*CheckBox list*/
        _lsitBoxTemplate: function () {
            var helper = {}, temp = {};            
            helper[this.id + "isNotBlank"] = ej.proxy(this.isNotBlank, this);
            helper[this.id + "checkBlank"] = ej.proxy(this._checkBlank, this);
            helper[this.id + "_getValueData"] = ej.proxy(this._getValueData, this);            
            helper[this.id + "_checkBoxState"] = ej.proxy(this._setCheckState, this);          
            helper[this.id + "_htmlEncode"] = ej.proxy(this._checkHtmlEncode, this);    
            helper[this.id + "_genId"] = this._genCheckID;
            $.views.helpers(helper); 			
            var genID = this.id + this._$colType + "{{:~" + this.id + "_genId()}}";
            temp[this.id + this._$colType + "_listBox_Template"] = "{{if ~" + this.id + "checkBlank(key)}}<div class='e-ftrchk'><input type='checkbox' id='" + genID + "' value='{{html:~" + this.id + "_getValueData(key, items)}}' class='e-ftrchk' {{:~" + this.id + "_checkBoxState(~" + this.id + "_getValueData(key, items))}}/><label class='e-ftrchk' for='" + genID + "'>{{if ~" + this.id + "isNotBlank(key,'true')}} {{if ~" + this.id + "_htmlEncode(key)}} {{>key}} {{else}} {{:key}} {{/if}} {{else}} (Blanks) {{/if}}</label></div>{{/if}}";
            $.templates(temp);
        },
      
        _processListData: function (params) {
            var result, promise, args = {}, query = new ej.Query(), searchQuery = new ej.Query().requiresCount(), evtArgs = {}; this._searchCount = 0;
            var predicates = this._predicates[this._$key], pred;
			if(proxy.query._expands.length)
                query._expands = proxy.query._expands;
			var data = null, columnName = null, localJSON = null, result = null;
			if(ej.isNullOrUndefined(this._$foreignField && this._$foreignData)){
				data = this._dataSource; 
				columnName =  this.fName;
				localJSON = this._localJSON;
			}
			else{
				data = localJSON = this._$foreignData; 
				if(this._dataSource instanceof ej.DataManager && !(data instanceof ej.DataManager))
                    data = ej.DataManager(data);
				columnName = this._$foreignField;
			}
            for (var prop in predicates) {
                if (prop == this.fName)
                    continue;
                var obj = predicates[prop], from = obj["from"];
                if (from)
                    query.skip(from == "top" ? 0 : data.length - (data.length - obj["take"])).take(obj["take"]);
                else
                    pred = pred != undefined ? pred["and"](obj) : obj;
            }
            args.columnName = columnName;           
            query.requiresCount();
            if (this._dataSource instanceof ej.DataManager && !this._dataSource.dataSource.offline && this._ctrlInstance._gridRecordsCount > this._ctrlInstance.model.filterSettings.maxFilterChoices) {
                query.take(this.maxFilterChoices);
                this._onDemandSearch = true;
            }
		    pred && query.where(pred);
            ej.merge(query.queries, this.query.queries) || ej.merge(query._params, this.query._params)
            evtArgs.requestType = params ? params.type : "filterchoicerequest",evtArgs.filterModel = this, evtArgs.query = query, evtArgs.dataSource = data;
            if(evtArgs.requestType == "filterchoicesearch")
				evtArgs.queryParams = params;
			if (this._ctrlInstance._trigger(this._onActionBegin, evtArgs))
                return;
            if (!ej.isNullOrUndefined(this._searchHandler) && this._searchHandler.key.length) {
                var searchDetails = this._searchHandler;
                query.search(searchDetails.key, searchDetails.fields, searchDetails.operator || "contains", searchDetails.ignoreCase || true, searchDetails.ignoreAccent || true);
            }
            if (this.enableSelect)
                query.select(this.fName);
            if (params && params.type == "filterchoicesearch") {
                this._clearSearchValue = ej.isNullOrUndefined(params.value) ? true : false;
                args.type = params.type;
                args.value = params.value;
                if (this._$foreignField) query = searchQuery;
                params.value && query.where(columnName, params.operator, params.value, !params.matchcase, params.accent);
                if (this._dataSource instanceof ej.DataManager && this._ctrlInstance._gridRecordsCount > this._ctrlInstance.model.filterSettings.maxFilterChoices) {
                    this._searchRequest = true;
					var type = this._$colType;
                    var dlgId = this.id + type + "_excelDlg";   
                    if($("#" + dlgId).is(":visible"))
                     this._listsWrap.ejWaitingPopup("show");
                    if (this._$foreignField) {
                        var frKeyData = this._$foreignData instanceof ej.DataManager ? this._$foreignData : ej.DataManager(this._$foreignData);
                        this._dataProcessing(frKeyData, query, args);
                    }
                    else
                        this._dataProcessing(this._dataSource, query, args);
                }
                else
                    this._dataProcessing(ej.DataManager(this._localJSON), query, args);
            }
            else if (!(this._dataSource instanceof ej.DataManager)) {
				var result = [];
                promise = ej.DataManager(this._dataSource).executeLocal(query);
                args.type = "filterchoicerequest";
                if (this._$foreignField)
                    this._filterForeignData(promise, args);
                else {
                    result = promise.result;
                    args.data = this._localJSON = this._currentData = result;
                    this._totalRcrd = promise.count;
                    this._setCheckBoxList(args);
                }
            }
            else {
                proxy = this; args.type = "filterchoicerequest";
                this._listsWrap.ejWaitingPopup("show");
                if (!this._reqInProgess) {
                    this._reqInProgess = true;
					if(this._$foreignField)
                        data = this._dataSource;
                    promise = data.executeQuery(query);
                    promise.done(function (e) {
                        if (proxy._$foreignField)
                            proxy._filterForeignData(e, args);
                        else {
                            result = e.result;
                            args.data = proxy._localJSON = proxy._currentData = result;
                            proxy._totalRcrd = e.count;
                            proxy._listsWrap.ejWaitingPopup("hide");
                            proxy._setCheckBoxList(args);;
                            proxy._reqInProgess = false;
                        }
                    });
                }
            }           
        },
        _dataProcessing: function (dataSource, query, args) {
            var result, promise;
            promise = dataSource.executeQuery(query);
            promise.done(function (e) {
                args.data = proxy._currentData = e.result;
                proxy._totalRcrd = proxy._searchCount = e.result.length;
                proxy._setCheckBoxList(args);
            });
        },
        _filterForeignData: function (fromPromise, args) {
            var custom = typeof args === "boolean", key = this._$foreignKey,
               field = this._$foreignField, type = this._$foreignKeyType,
                result, count, proxy = this, defaults = {}, pred, tmp, actuals, query = new ej.Query(),
                dm = this._$foreignData instanceof ej.DataManager ? this._$foreignData : ej.DataManager(this._$foreignData);
            if (!custom) {
                result = fromPromise.result, count = fromPromise.count;
                if (!!count)
                    query.where(this.getFilterFrom(this._$foreignData, result));
                if (!this._listsWrap.ejWaitingPopup("model.showOnInit"))
                    this._listsWrap.ejWaitingPopup("show");
            }
            else {
                tmp = fromPromise[0], defaults = fromPromise[0], actuals = fromPromise.slice();
                if (!!tmp)
                    this.closeXFDialog();
                pred = new ej.Predicate(field, tmp.operator, tmp.value, !tmp.matchcase, !tmp.accent);
                for (var i = 1, tmp, len = fromPromise.length; i < len; i++) {
                    tmp = fromPromise[i], pred = pred[tmp.predicate](field, tmp.operator, tmp.value, !tmp.matchcase, !tmp.accent);
                }
                query.where(pred);
            }
            query.select([key, field]);
            dm.executeQuery(query).done(function (e) {
                if (!custom) {
                    args.data = proxy._localJSON = proxy._currentData = e.result;
                    proxy._totalRcrd = count;
                    proxy._listsWrap.ejWaitingPopup("hide");
                    proxy._setCheckBoxList(args);
                    proxy._reqInProgess = false;
                } else {
                    var dst = ej.distinct(e.result, key, true), dst = 0 in dst ? dst : [{}];
                    var coll = dst.map(function (val, ind) {
                        return $.extend({}, defaults, { value: val[key], operator: "equal", actuals: actuals, type: type });
                    });
                    proxy.initiateFilter(coll);
                }
            });
        },
        _setCheckBoxList: function (args) {
            var evtArgs = {}, _blank ="", sortedData, flag, blank = this._blanks, $checked;
            evtArgs.requestType = args.type, evtArgs.dataSource = this._dataSource, evtArgs.filterModel = this;
            if (this._currentData.length != 0) {                
                sortedData = this.getDistinct(args.data, args.columnName, true, !!this._$foreignKey);
                flag = this._isFiltered;                
                this._actualCount = sortedData.length; sortedData.length = this._maxCount > this._actualCount ? this._actualCount : this._maxCount;               
                (this._onDemandSearch && this._actualCount == 1000) || this._actualCount >= this._maxCount ? this._openedFltr.find("div.e-status").removeClass("e-hide") : this._openedFltr.find("div.e-status").addClass("e-hide");
                this._islargeData = this._maxCount < this._actualCount ? true : false;
				this._filterdCol = ej.DataManager(this.filteredColumn).executeLocal(ej.Query().where("field", "equal", this.fName));               
				if ((args.type == "filterchoicesearch") && (!ej.isNullOrUndefined(args.value)))
                    this._listsWrap.find("div:first").html([this._selectAll, this._addToFilter, $.render[this.id + this._$colType + "_listBox_Template"](sortedData),  (ej.isNullOrUndefined(args.value) && this._addAtLast) ? this.replacer(blank, /@@/g, this._setCheckState, this._empties.join(this._spliter)) : ""].join(""));                
                else 
                    this._listsWrap.find("div:first").html([this._selectAll, $.render[this.id + this._$colType + "_listBox_Template"](sortedData),  (ej.isNullOrUndefined(args.value) && this._addAtLast) ? this.replacer(blank, /@@/g, this._setCheckState, this._empties.join(this._spliter)) : ""].join(""));                
                this._chkList = this._listsWrap.find("input:checkbox").not(".e-selectall,.e-addtofilter"), $inView = this._chkList.slice(0, 20);
                $inView.ejCheckBox({ change: ej.proxy(this._checkHandler, this) });
                $inView.siblings().height(14).width(14);
                this._listsWrap.find(".e-addtofilter").ejCheckBox({ change: ej.proxy(this._addToFilterHandler, this) });
                this._listsWrap.find(".e-addtofilter").attr("id", this.id + this._$colType + "AddToFilter");
                this._listsWrap.find(".e-selectall").ejCheckBox({ change: ej.proxy(this._selectAllHandler, this), enableTriState: this._interDeterminateState, beforeChange: this._selectAllBeforeHandler });
				this._listsWrap.find(".e-selectall").attr("id",this.id + this._$colType + "SelectAll");
                this._listsWrap.find(".e-selectall,.e-addtofilter").siblings().height(14).width(14);
				this._listsWrap.find(".e-selectall").closest("span").siblings("label").attr("for", this.id + this._$colType + "SelectAll");
            }
            else
            {
                this._listsWrap.find("div").first().html(ej.buildTag("div.e-ftrchk", this.localizedLabels.NoResult, {}, {}));
                this._chkList = this._listsWrap.find("input:checkbox").not(".e-selectall");
            }
            if (!ej.isNullOrUndefined(this._chkList))
                $checked = this._chkList.filter(":checked").length;
            if (this._isFiltered && this._searchRequest && $checked == 0)
                this._checkIsIndeterminate(args.columnName, this.filteredColumn);
            if (!this._isFiltered || this._actualCount == $checked)
                this._listsWrap.find(".e-selectall").ejCheckBox({ checked: true });
            else if ($checked > 0 || this._isIndeterminate && this._interDeterminateState)
                this._listsWrap.find(".e-selectall").ejCheckBox('model.checkState', 'indeterminate');
            $("#" + this.id + this._$colType + "_OkBtn").ejButton({ enabled: $checked != 0 });
            this._listsWrap.ejScroller({ scrollTop: 0 }).ejScroller("refresh");
             if(this._listsWrap.hasClass('e-waitingpopup'))
                this._listsWrap.ejWaitingPopup("hide");
            if (this._ctrlInstance._trigger(this._onActionComplete, evtArgs))
                return;
            this._isIndeterminate = false;
            this._checkedValue = [];
            if (args.type == "filterchoicerequest") {
                this._preChkList = this._chkList;
                this._checked = this._preChkList.filter(":checked");
            }
            if (this._listsWrap.find(".e-addtofilter").length)
                this._add = this._listsWrap.find(".e-addtofilter");
            else
                this._add = null;
        },
        _addToFilterHandler: function (args) {
            $("#" + this.id + this._$colType + "_OkBtn").ejButton({ enabled: args.isChecked || !!this._chkList.filter(":checked").length });
        },
        _checkIsIndeterminate: function (colName, filteredCol) {
            for (var i = 0 ; i < filteredCol.length; i++) {
                if (colName == filteredCol[i].field)
                    this._isIndeterminate = true;
            }
        },
        _createLiTag: function ($ul, menuData, isChild) {
            proxy = this;
            $.each(menuData, function (index, obj) {
                var $li = ej.buildTag("li", {}, {}, obj["htmlAttribute"] || (isChild && { "ejfnrole": "operator", "ejvalue": obj.value }) || {}), $child;
                var apd = (isChild && $.inArray(obj.value,proxy._noDlg)==-1) ? "..." : "";
                var $a = ej.buildTag("a", obj.text + apd, {}, {});
                obj["sprite"] != undefined && $a.append(ej.buildTag("span", {}, {}, { "class": obj["sprite"] }))
                if (obj["child"] != undefined){
                    if(obj.id != 3 && obj.id != 5)
                        $child = proxy._createLiTag(ej.buildTag("ul.e-shadow"), obj["child"], true);
                    else if(obj.id === 3 )
                        $child = proxy._createDivTag(ej.buildTag("ul.e-shadow"), obj["child"], true, "sort");
                    else
                        $child = proxy._createDivTag(ej.buildTag("ul.e-shadow"), obj["child"], true, "filter");
				}
                obj["child"] == undefined ? $ul.append($li.append($a)) : $ul.append($li.append($a).append($child))
                if ($.inArray(obj.value || (obj.htmlAttribute && obj.htmlAttribute.ejfnrole), proxy._sepAftr) != -1)
                    $ul.append(ej.buildTag("li.e-separator"));
            });
            return $ul;
        },
		
		_createDivTag: function ($ul, menuData, isChild, reqType) {
            var $li, $a, $div, bgColor = [], fgColor = [], avble = false, cellcolor = "", fontcolor = "", selCellHdr = "", selCellClr = "", selFontHdr = "", selFontClr = "";
            if (reqType == "sort") {
                cellcolor = this.localizedLabels.SortByCellColor;
                fontcolor = this.localizedLabels.SortByFontColor;
            }
            else{
                cellcolor = this.localizedLabels.FilterByCellColor;
                fontcolor = this.localizedLabels.FilterByFontColor;
            }
			selCellHdr = reqType + "colorhdr";
            selFontHdr = reqType + "fonthdr";
            selCellClr = reqType + "bgcolor";
            selFontClr = reqType + "fgcolor";
            ($ul.length > 0) && $ul.children().remove();
            if(menuData.length > 0){
			    for(var i = 0; i < menuData.length; i++){
				    for(var j = 0; j < bgColor.length; j++){
					    if(bgColor[j] == menuData[i].background){
						    avble = true;
						    break;
					    }
				    }
				    if(!avble && (!ej.isNullOrUndefined(menuData[i].background) && !menuData[i].background.startsWith('#6n'))) 
                        bgColor.push(menuData[i].background);
				    avble = false;
				    for(var j = 0; j < fgColor.length; j++){
					    if(fgColor[j] == menuData[i].foreground){
						    avble = true;
						    break;
					    }
				    }
				    if(!avble && (!ej.isNullOrUndefined(menuData[i].foreground) && !menuData[i].foreground.startsWith('#6n'))) 
                        fgColor.push(menuData[i].foreground);
				    avble = false;
			    }
                if(bgColor.length > 0){
                    $li = ej.buildTag("li.e-list e-bghdrcolor", "", "" , {"ejfnrole": selCellHdr });
                    $a = ej.buildTag("a.e-menulink", cellcolor, {});
                    $li.append($a);
                    $ul.append($li);
			        for(var i = 0; i < bgColor.length; i++){
                        $li = ej.buildTag("li.e-list e-valcolor", {}, {'background-color': bgColor[i]}, {"ejfnrole": selCellClr });
                        $ul.append($li);
			        }
                }
                if(fgColor.length > 0){
			        $li = ej.buildTag("li.e-list e-fghdrcolor", "", "" , {"ejfnrole": selFontHdr });
                    $a = ej.buildTag("a.e-menulink", fontcolor, {});
                    $li.append($a);
                    $ul.append($li);
                    for(var i = 0; i < fgColor.length; i++) {
                        $li = ej.buildTag("li.e-list e-valcolor", {}, {'background-color': fgColor[i]}, {"ejfnrole": selFontClr });
                        $ul.append($li);
                    }
                }
                (bgColor.length < 1 && fgColor.length < 1) ? $ul.parent().addClass("e-disable-item"): $ul.parent().removeClass("e-disable-item");
            }
            else {
                $ul.parent().addClass("e-disable-item");
            }
            return $ul;
        },
		
        _setCheckState: function (value) {           
            var val = value, fobj, splts = value.split(this._spliter), splen = splts.length, flag = false;           
            if (!this._isFiltered || this._searchCount)
                return "checked";
            else {
               
                while (splen--) { /*looped for split values*/
                    val = this.processValue(splts[splen]);

                    //Date and boolean will be checked as iteration due to 
                    if (this._$colType == "date" || this._$colType == "datetime" || this._$colType == "boolean") {
                        for (var i = 0, len = this._filterdCol.length; i < len; i++) {
                            if (this._$colType == "boolean" && val !== this._filterdCol[i].value)
                                continue;
                            if (this._$colType == "date" || this._$colType == "datetime") {
								var filterval = this._filterdCol[i].value;
                                var firstVal = this._$colType == "date" && val instanceof Date ? this._formatting(this._$format, new Date(val.getFullYear(), val.getMonth(), val.getDate()), this._locale) : this._formatting(this._$format, val, this._locale);
                                var secondVal = this._$colType == "date" && filterval instanceof Date ? this._formatting(this._$format, new Date(filterval.getFullYear(), filterval.getMonth(), filterval.getDate()), this._locale) : this._formatting(this._$format, filterval, this._locale);
                                if ((firstVal !== secondVal || this._filterdCol[i].operator != "equal") && !this._maxFilterCount)
                                    continue;
                                else {
                                    if (this._maxFilterCount && (this._onDemandSearch || this._islargeData)) {
                                        if (firstVal == secondVal) {
                                            this._checkedValue.push(firstVal);
                                            return ""
                                        }
                                        else if (this._checkedValue.indexOf(secondVal) == -1 || this._checkedValue.length == this._filterdCol.length)
                                            return "checked";
                                        else
                                            continue;
                                    }
                                }
                            }
                            return "checked";
                        }
                    }
                    else {
                       if (this._$colType == "string" && !ej.isNullOrUndefined(val) && (typeof val == "string")) {
                            if (this._filterdCol[0].value == val.toLowerCase())
                                val = val.toLowerCase();
                        }
                        var fQ = ej.DataManager(this._filterdCol).executeLocal(ej.Query().where("value", "equal", val, this._filterdCol[0].matchcase).where("operator", "equal", "equal"));
                        if (fQ.length != 0) {
                            if (fQ[0].operator == "equal" &&(!ej.isNullOrUndefined(fQ[0].actualFilterOperator) && fQ[0].actualFilterOperator=="equal") && fQ[0].isCustom == true && this._ctrlInstance.model.currentViewData.length > 0)
                                return "checked";
                            else
                                return fQ[0]["isCustom"] === true ? "" : "checked";
                        }
                        else {
                            if ((this._onDemandSearch || this._islargeData) && this._maxFilterCount) {
                                var fltrQury = ej.DataManager(this._filterdCol).executeLocal(ej.Query().where("value", "equal", val).where("operator", "notequal", "equal"));
                                if (fltrQury.length == 0)
                                    return "checked";
                            }
                        }
                    }
                }
            }
        },
        _genCheckID: function () {
            return "CheckBox" + this.getIndex();
        },
        _formatting: function (format, value, locale) {

            if (this._$colType == "date" && format == "")
                format = "{0:MM/dd/yyyy hh:mm:ss}";

            if (this._$colType == "boolean")                 
                return value === "" ? "" : this.localizedLabels[value == true ? "True" : value == false ? "False" : ""];
           
            if (this._formatFiltering || this._$colType == "date") {
                var formatter = this._ctrlInstance.formatting;                
                return format != "" ? formatter(format, value, locale) : value;
            } 
        },
        _updateDateFilter: function (filter) {
            if (filter.type != "date" && !(filter.value instanceof Date))
                return filter;            
            filter.value = filter.value instanceof Date ? filter.value : ej.parseJSON({ val: filter.value }).val;
            return ["equal", "notequal"].indexOf(filter.operator) == -1 ? filter : this._setDateObject(filter);
        },        
        _checkHandler: function (args) {
            $("#" + args.model.id).prop("checked", args.isChecked);
            var $checkedlist = this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall,.e-addtofilter)"), clen = $checkedlist.length;
            var $selectall = this._listsWrap.find(".e-selectall"), canCheck;
            if (clen == this._chkList.length) {
                $selectall.prop("checked", true);
                canCheck = true;
            }
            else if (clen == 0) {
                $selectall.prop("checked", false);
                canCheck = false;
            }
            else if (args.isInteraction)
                $selectall.ejCheckBox('model.checkState', 'indeterminate')
            $selectall.ejCheckBox({ checked: canCheck });
            $("#" + this.id + this._$colType + "_OkBtn").ejButton({ enabled: (clen != 0) || (!ej.isNullOrUndefined(this._add) && this._add.prop("checked")) });
        },
        _selectAllBeforeHandler: function (args) {
            if (args.isChecked) {
                if (this.model.checkState == "indeterminate") {
                    args.cancel = true;
                    this.model.checkState = "uncheck";
                    this.option({ checkState: "check" })
                }
                else
                    this.checkState("uncheck");
            }
        },
        _selectAllHandler: function (args) {
            
            if (args.checkState=="check"){
                this._chkList.filter(":not(:checked)").ejCheckBox({ checked: args.isChecked, change: ej.proxy(this._checkHandler, this) });
                this._chkList.prop("checked", true);
            }
            else if (args.checkState == "uncheck") {
                this._chkList.filter(function () { if ($(this).hasClass("e-checkbox") && $(this).prop("checked")) return this; }).ejCheckBox({ checked: args.isChecked });
                this._chkList.prop("checked", false); this._chkList.removeAttr("checked");
            }
            $("#" + this.id + this._$colType + "_OkBtn").ejButton({ enabled: args.isChecked || (!ej.isNullOrUndefined(this._add )&& this._add.prop("checked")) });
        },
        /*Custom Dialog*/
        _renderCustomFDlg: function (type) {
            var dlgId = this.id + type + "_CustomFDlg";
            if ($("#" + dlgId).length)
                return;
            var $dlg = ej.buildTag("div#" + dlgId + ".e-excelfilter e-dlgcustom");
            $dlg.addClass(this._cssClass);
            this._renderCDlgContent($dlg, type);
            $dlg.ejDialog({ showOnInit: false, enableResize: false, enableModal: true, allowKeyboardNavigation: false, title: this._title, width: 370, content: "#" + this.id, enableRTL: this._ctrlInstance.model.enableRTL, closeIconTooltip: "Close", cssClass: "e-excelfilter e-customDlg" });
			$dlg.ejDialog("refresh");
        },

        _renderCDlgContent: function (content, type) {
            var $div1 = ej.buildTag("div.e-dlgfields",this.localizedLabels.Showrowswhere, {}, {});
            var $id = this.id + this._$colType;
            var $fset = ej.buildTag("fieldset.e-fieldset");
            var $op1 = ej.buildTag("tr.e-fields"), $op2 = ej.buildTag("tr.e-fields"), $op3 = ej.buildTag("tr.e-fields e-top");
            var $dp1 = ej.buildTag("input#" + $id + "_CustomDrop1"), $dp2 = ej.buildTag("input#" + $id + "_CustomDrop2"), $dp3 = ej.buildTag("input#" + $id + "_CustomDrop3");
            var $in1 = ej.buildTag("input#" + $id + "_CustomValue1.e-ejinputtext e-excustmfltr", {}, {}, { "type": "text" }), $in2 = ej.buildTag("input#" + $id + "_CustomValue2.e-ejinputtext e-excustmfltr", {}, {}, { "type": "text" }), $in3 = ej.buildTag("input#" + $id + "_CustomValue3.e-ejinputtext e-excustmfltr", {}, {}, { "type": "text" });
            var $pred = ej.buildTag("tr.e-predicate");
            var radioAnd = ej.buildTag("input#" + $id + "_CustomAndPredicate", {}, {}, { "type": "radio", "name": "predicate" , "value":"and" }), radioOr = ej.buildTag("input#" + $id + "_CustomOrPredicate", {}, {}, { "type": "radio", "name": "predicate", "value":"or" });
            var matchCase = ej.buildTag("input#" + $id + "_CustomMatchPredicate", {}, {}, { "type": "checkbox" });
            content.append($div1);
            var table = ej.buildTag("table.e-optable");

            $op1.append(ej.buildTag("td.e-operator").append($dp1))
                .append(ej.buildTag("td.e-value").append($in1));
            $pred.append(ej.buildTag("td", {}, {}, {}).append(radioAnd).append(ej.buildTag("label.e-caption", this.localizedLabels.PredicateAnd, {}, { "for": $id + "_CustomAndPredicate" }))
                .append(radioOr).append(ej.buildTag("label.e-caption", this.localizedLabels.PredicateOr, {}, { "for": $id + "_CustomOrPredicate" })));
            $op2.append(ej.buildTag("td.e-operator").append($dp2))
                .append(ej.buildTag("td.e-value").append($in2));
            table.append($op1)
            .append($pred)
            .append($op2);
			if(type == "string")
			    $pred.append(ej.buildTag("td", {}, {}, {}).append(matchCase).append(ej.buildTag("label.e-caption", this.localizedLabels.MatchCase, {}, { "for": $id + "_CustomMatchPredicate" })));
            if (type == "number" || type == "guid") {
                $op3.append(ej.buildTag("td.e-operator").append($dp3))
                .append(ej.buildTag("td.e-value").append($in3));
                table.append($op3)
            }
            $fset.append(ej.buildTag("legend"))
                .append(table)
            content.append(ej.buildTag("div.e-dlgfields").append($fset));
            content.append(ej.buildTag("div.e-dlgfields").append(this._createBtn(true)));
            content.appendTo("body");
            var uppertype = type.replace(type.charAt(0), type.charAt(0).toUpperCase());
            $([$dp1, $dp2]).ejDropDownList({ fields: { text: "text", value: "value" }, height: 27, width: 120, enableRTL: this._ctrlInstance.model.enableRTL });
            if (type == "number") {
				$([$dp1, $dp2]).ejDropDownList({ popupWidth: "170px" });
                $([$in1, $in2]).ejNumericTextbox({ showSpinButton: false, height: "27px",decimalPlaces : 2, width: "177px", enableRTL: this._ctrlInstance.model.enableRTL,watermarkText: this.localizedLabels.NumericTextboxWaterMark, focusOut: function(args){ if(this.model.decimalPlaces == 0) this.element.prev(".e-input").val(this.model.value); } });
            }
			else if (type == "guid") {
                $([$dp1, $dp2]).ejDropDownList({ popupWidth: "170px" });
                $($in1).css({"height":"22px","width":"175px" });
                $($in2).css({"height":"22px","width":"177px" });
            }
            else if (type == "date") {
				$([$dp1, $dp2]).ejDropDownList({ popupWidth: "170px" });
				$([$in1, $in2]).ejDatePicker({ "cssClass": this._ctrlInstance.model.cssClass, height: "27px", width: "177px", "enableRTL": this._ctrlInstance.model.enableRTL, watermarkText: this.localizedLabels.DatePickerWaterMark, locale: this._locale });
            }
            else if (type == "datetime") {
                $([$dp1, $dp2]).ejDropDownList({ popupWidth: "170px" });
                $([$in1, $in2]).ejDateTimePicker({ "cssClass": this._ctrlInstance.model.cssClass, height: "27px", width: "177px", "enableRTL": this._ctrlInstance.model.enableRTL, watermarkText: this.localizedLabels.DateTimePickerWaterMark, locale: this._locale });
            }
            else if (type == "string") {
                $([$in1, $in2]).ejAutocomplete({ "cssClass": this._ctrlInstance.model.cssClass, "enableRTL": this._ctrlInstance.model.enableRTL, enableDistinct: true, width: "177px", height: "27px", locale: this._locale });
            }
            $([radioAnd, radioOr]).ejRadioButton({ "cssClass": this._ctrlInstance.model.cssClass, "enableRTL": this._ctrlInstance.model.enableRTL });
            matchCase.ejCheckBox({ });
            $("#" + $id + "Custom_OkBtn").ejButton({ text: this._getDeprecatedLocalizedLabel("OK"), showRoundedCorner: true, width: "23.6%", click: ej.proxy(this._fltrBtnHandler, this), enabled: true });
            $("#" + $id + "Custom_CancelBtn").ejButton({ text: this.localizedLabels.Cancel, showRoundedCorner: true, width: "23.6%", click: ej.proxy(this.closeXFDialog, this) })
        },
                     
        _openCustomFilter: function (operator) {
            var oper = operator != "top10" ? this._$colType : operator, emptyOp = { text: "", value: "" }, query = this.query;
            var type = oper.replace(oper.charAt(0), oper.charAt(0).toUpperCase());
            var id = this.id + this._$colType;
            this.closeXFDialog();
            this._openedFltr = $("#" + id + "_CustomFDlg");
            var args = { requestType: "filterbeforeopen", filterModel: this, columnName: this.fName, columnType: this._$colType, isCustomFilter: true };
            if (this._ctrlInstance._trigger(this._onActionBegin, args))
                return;
            this._openedFltr.ejDialog("open");
            this._openedFltr.ejDialog({open: function(args){
				($("#" + id + "_CustomValue1").hasClass("e-autocomplete") || $("#" + id + "_CustomValue1").hasClass("e-datepicker") || $("#" + id + "_CustomValue1").hasClass("e-datetimepicker")) ? $("#" + id + "_CustomValue1").focus() : $("#" + id + "_CustomValue1").prev().focus();
			}});
            this._openedFltr.find("legend").html(this._displayName);            
            var sl = (["Number","Date"].indexOf(type) != -1) ? 6 : 5;
            var sliced = this.localizedLabels[type + "MenuOptions"].slice(0,sl); sliced.unshift(emptyOp);
            $("#" + id + "_CustomDrop1").ejDropDownList({ dataSource: sliced });
            $("#" + id + "_CustomDrop2").ejDropDownList({ dataSource: sliced });
			if (this._$colType == "number") {
                if(operator == "top10"){
                    this._openedFltr.find(".e-optable tr").not(".e-top").addClass("e-hide");   
                    this._openedFltr.find(".e-optable tr.e-top").removeClass("e-hide");
                    $("#" + id + "_CustomDrop3").ejDropDownList({ dataSource: this.localizedLabels[type + "MenuOptions"] });
                }
                else{                   
                    this._openedFltr.find(".e-optable tr.e-top").addClass("e-hide");
                    this._openedFltr.find(".e-optable tr").not(".e-top").removeClass("e-hide"); 
                }
            }
            else {
                this._openedFltr.find(".e-optable tr.e-top").addClass("e-hide");
                this._openedFltr.find(".e-optable tr").not(".e-top").removeClass("e-hide");
            }
            if(this._$colType == "string"){
				var fName = this._$foreignField ? this._$foreignField : this.fName;
				var data = this._$foreignData && this._$foreignField ? this._$foreignData : this._dataSource;
                this._openedFltr.find(".e-autocomplete").ejAutocomplete({
                    fields: { text: fName }, dataSource: data,query:query, focusIn: function (args) {
                        var type = this.element.closest("td").siblings().find(".e-dropdownlist").ejDropDownList("getSelectedValue");
                        var $matchCase = this.element.closest(".e-dialog-scroller").find(".e-checkbox").prop("checked");
						 this.model.caseSensitiveSearch = $matchCase;
						 this.model.filterType = type == "" ? this.model.filterType : type;
                    }
                });
            }
            if (this._$colType == "date" && this._$format != "")
                this._openedFltr.find(".e-datepicker").ejDatePicker({ dateFormat: this._$format.replace(/{0:|}/g, function () { return "" }), enableStrictMode: true });
            else if (this._$colType == "datetime" && this._$format != "")
                this._openedFltr.find(".e-datetimepicker").ejDateTimePicker({ dateTimeFormat: this._$format.replace(/{0:|}/g, function () { return "" }), enableStrictMode: true });
            this._setFilteredData(id, operator);
			if(!ej.isNullOrUndefined(this._customFilterHandler)) 
				this._customFilterHandler();
            var args = { requestType: "filterafteropen", filterModel: this, columnName: this.fName, columnType: this._$colType, isCustomFilter: true };
            
			if (this._ctrlInstance._trigger(this._onActionComplete, args))
                return;
        },
        
        _setFilteredData: function ($id, op) {
            var indx = $.inArray(this.fName, this.cFilteredCols);
            var fQM = [], optrs = [], fLen;
            var between = ["greaterthanorequal", "lessthanorequal"];
            if (op == "top10")
                return;
            if (indx != -1)
                fQM = ej.DataManager(this.filteredColumn).executeLocal(ej.Query().where("field", "equal", this.fName));
            if (indx != -1 && this._$foreignField)
                fQM = fQM[0]["actuals"];
            if (this._initialFName != null && this._initialFName == this.fName)
                fQM[0]["isCustom"] = true;
            fLen = fQM.length;
            var drops = this._openedFltr.find(".e-dropdownlist"), inputs = this._openedFltr.find(".e-value input.e-ejinputtext.e-input"), $pred = this._openedFltr.find(".e-predicate");            
            if (indx != -1 && fLen && fQM[0]["from"]!=undefined)
                optrs = [op, ""];
			else if(op == "between" && indx != -1 && fLen )
				optrs = [fQM[0]["operator"], !ej.isNullOrUndefined(fQM[1]) ? fQM[1]["operator"] : ""];
            else if (indx != -1 && fLen && fQM[0]["isCustom"])
                optrs = [(op != "customfilter" && indx != -1) ? op : fQM[0]["operator"], op == "customfilter" && fQM[1] ? fQM[1]["operator"] : ""];
			else if(indx == -1 && op == "customfilter") 
                optrs = ["equal", ""];
            else if (op == "between" || op == "customfilter")
                optrs = op != "customfilter" ? between : ["", ""];           
            else
                optrs = [op, ""];
           
            for (var i = 0; i < (indx != -1 ? fLen : 2) ; i++) {
                var opt = /\D*/.exec(optrs[i])[0];
                $(drops[i]).prop("value", opt);
                $(drops[i]).ejDropDownList("setSelectedValue", opt);
				 $(drops[i]).ejDropDownList({ change: function(arg){ 
					this.element.closest(".e-fields").find(".e-autocomplete").val("");
				 }});
				var value = (indx != -1 && fLen && fQM[i]["isCustom"] && (opt == (this._$foreignField ? fQM[i]["actualFilterOperator"] : fQM[i]["operator"]) || opt == "customfilter" || opt == "between")) ? this._$foreignField ? opt != "" ? fQM[i]["actualFilterValue"] : "" : fQM[i]["value"] : "";
                if ($(inputs[i]).hasClass("e-datepicker"))
                    $("#" + inputs[i].id).ejDatePicker("model.value", (indx != -1 && fLen && fQM[i]["isCustom"]) ? fQM[i]["value"] : null);
                else if ($(inputs[i]).hasClass("e-numerictextbox"))
                    $("#" + inputs[i].id).ejNumericTextbox("model.value", value);
                else if ($(inputs[i]).hasClass("e-datetimepicker"))
                    $(inputs[i]).ejDateTimePicker("model.value", value);
                else
                    $(inputs[i]).val(value);
                var $pre = (indx != -1 && fLen && fQM[i]["isCustom"] && fQM[i]["predicate"] != undefined) ? this._$foreignField ? fQM[i]["actualPredicate"] : fQM[i]["predicate"] : "and";
				$pred.find("input[value=" + $pre + "]").ejRadioButton({checked:  true});
				if(this._$colType == "string"){
				    var $match = (indx != -1 && fLen && fQM[i]["isCustom"]) ? fQM[i]["matchcase"] : this._matchCase;
					$pred.find("input.e-js[type='checkbox']").ejCheckBox({checked: $match});
				}
				this._openedFltr.find(".e-value input:visible:eq(0)").select();
            }            
        },
        _setDateObject: function (filterObject) {
            if (filterObject.value != null) {
                var $fltrVal = filterObject.value;
                var $prevObj = $.extend(true, {}, filterObject);
                var $nextObj = $.extend(true, {}, filterObject);                
                var $prevDate = new Date($prevObj.value.setSeconds($prevObj.value.getSeconds() - 1));
                var $nextDate = new Date($nextObj.value.setSeconds($nextObj.value.getSeconds() + 2));
                filterObject.value = new Date(filterObject.value.setSeconds($nextObj.value.getSeconds() - 1));                
                $prevObj.value = $prevDate;
                $nextObj.value = $nextDate;
                if (filterObject.operator == "equal") {
                    $prevObj.operator = "greaterthan";
                    $prevObj.predicate = "and";
                    $nextObj.operator = "lessthan";
                    $nextObj.predicate = "and";
                } else if (filterObject.operator == "notequal") {
                    $prevObj.operator = "lessthanorequal";
                    $prevObj.predicate = "or";
                    $nextObj.operator = "greaterthanorequal";
                    $nextObj.predicate = "or";
                }
                var predicate = ej.Predicate($prevObj.field, $prevObj.operator, $prevObj.value, false);
                predicate = predicate[$nextObj.predicate]($nextObj.field, $nextObj.operator, $nextObj.value, false);
                filterObject.ejpredicate = predicate; filterObject.type = "date";
                return filterObject;
            }
            else
                return filterObject;
        },
        _getCDlgFields: function () {
            var dropDowns = this._openedFltr.find(".e-dropdownlist"), defaults;
            var $match = this._openedFltr.find(".e-checkbox"), matchcase = true,valueColl = [];
            var $inputs = this._openedFltr.find(".e-value input.e-ejinputtext.e-input");
            var $ginputs = this._openedFltr.find(".e-value input"),
                $pred = this._openedFltr.find(".e-predicate  div[aria-checked = true]").find("input[type ='radio']").val()
            $.inArray(this.fName, this.cFilteredCols) == -1 && this.cFilteredCols.push(this.fName);

            for (var i = 0,len = dropDowns.length; i < len; i++) {
                var dvalue = $(dropDowns[i]).ejDropDownList("getSelectedValue"), value;
                if (this._$colType == "number")
                    value = parseFloat($inputs.eq(i).ejNumericTextbox("model.value"));
				if(this._$colType == "guid")
                    value = $ginputs.eq(i).val();
                if (this._$colType == "string") {
                    value = $inputs.eq(i).val();
                    matchcase = $match.is(":checked");
                }
                if (this._$colType == "date") 
                    value = $inputs.eq(i).ejDatePicker("model.value");
                if (this._$colType == "datetime")
                    value = $inputs.eq(i).ejDateTimePicker("model.value");

                defaults = { field: this.fName, predicate: i == 1 ? $pred : "or", matchcase: matchcase, isCustom: true };
                if (dvalue == "top" || dvalue == "bottom") {
                    valueColl.push($.extend(true, { value: "", operator: "notequal", take: value, from: dvalue }, defaults));
                }
                else if (dvalue != "") {
                    if (this._empties.indexOf(value + "") > -1 || (this._$colType == "number" && isNaN(value))) {
                        var cols = this.iterateAndGetCollection(this._empties.join(this._spliter), $.extend({}, defaults, { predicate: dvalue.toLowerCase() === "notequal" ? "and" : "or", operator: dvalue.toLowerCase() }));
                        var pred = this.generatePredicate(cols);
                        valueColl.push($.extend({}, defaults, { ejpredicate: pred, operator: dvalue.toLowerCase() }));
                    }
                    else {
                        var filterObj = {}; $.extend(true, filterObj, { value: value, operator: dvalue.toLowerCase(), isCustom: true, actualFilterOperator: dvalue.toLowerCase(), actualFilterValue: value, actualPredicate: defaults.predicate }, defaults);
                        if (this._$colType == "date")
                            filterObj.type = "date";
                        valueColl.push((this._$colType == "date" && ["equal", "notequal"].indexOf(dvalue.toLowerCase()) != -1) ? this._setDateObject(filterObj) : filterObj);
                    }
                }
                else
                    break;
            }
            if (this._$foreignField == undefined)
                this.initiateFilter(valueColl);
            else 
                this._filterForeignData(valueColl, true);            
        },
      
        _fltrBtnHandler: function (args) {
            var matchcase, valColl = [], arg = {}, predicate, fObj = {}, optr = "", checked = [], unchecked;
            this._maxFilterCount = false;
            if (this._clearSearchValue)
                this._searchCount = 0;
            if (!this._openedFltr.hasClass("e-dlgcustom")) {
                if (!this._isFiltered && this._listsWrap.find(".e-selectall").ejCheckBox("model.checked") && (this._searchCount == 0 || (this._add && this._add.prop("checked"))))
                    return this.closeXFDialog();                                  
                if (this._onDemandSearch || this._islargeData) {
                    if (this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall)").length <= this._listsWrap.find("input.e-ftrchk").filter(":not(:checked):not(.e-selectall)").length || this._listsWrap.find(".e-selectall").ejCheckBox("model.checked")) {
                        checked = this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall)");
                        optr = "equal";
                    }
                    else {
                        checked = this._listsWrap.find("input.e-ftrchk").filter(":not(:checked):not(.e-selectall)");
                        optr = "notequal";
                        this._maxFilterCount = true;
                    }
                }
                else {
                    var chkdata = this._chkList.filter(":checked"), unchkdata = this._chkList.filter(":not(':checked')");
                    if ((this._add && this._add.prop("checked"))) {
                        if (unchkdata.length)
                            unchecked = unchkdata;
                        checked = this._checked.length == 0 ? this._preChkList : this._checked;
                        if (chkdata.length && this._checked.length != 0)
                            ej.merge(checked, chkdata);
                    }
                    else
                        checked = this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall,.e-addtofilter)");
                    optr = this._colType == "string" ? "startswith" : "equal";
                }
                var len = checked.length, cVal, type = this.getType();
                var _isCase = this._colType == "string" ? this._matchCase : true;
	            var _isAccent = this._colType == "string" ? this._accent : true;
                var defaults = this._maxFilterCount ? { field: this.fName, predicate: "and", operator: optr, matchcase: _isCase, accent: _isAccent } : { field: this.fName, predicate: "or", operator: optr, matchcase: _isCase, accent: _isAccent };
                for (var i = 0; i < len; i++) {
                    if (!ej.isNullOrUndefined(unchecked)) {
                        for (var j = 0; j < unchecked.length; j++) {
                            var flag = 0;
                            if (checked[i].value == unchecked[j].value) {
                                flag = 1;
                                break;
                            }
                        }
                    }
                    if (flag)
                        continue;
                    cVal = checked[i].value;
                    if (this.enableNormalize && cVal.indexOf(this._spliter) != -1) {
                        ej.merge(valColl, this.iterateAndGetCollection(cVal, defaults));
                        continue;
                    }
                    cVal = this.processValue(cVal, type);                    
                                        
                    $.extend(true, fObj, { value: cVal }, defaults);
                                                            
                    for (var j = 0; j < valColl.length; j++) {
                        var count = 0;
                        if (valColl[j].value == cVal) {
                            count = 1;
                            break;
                        }
                    }
                    if (count)
                        continue;

                    valColl.push(type == "date" ? this._setDateObject(fObj) : fObj);
                                                             
                    fObj = {};
                }
                var cIndex = $.inArray(this.fName, this.cFilteredCols);
                if(cIndex != -1)
                    this.cFilteredCols.splice(cIndex, 1);
                if (this._isFiltered && this._searchRequest) {
                    this._checkIsIndeterminate(this.fName, this.filteredColumn);
                    if (this._isIndeterminate) {
                        ej.merge(valColl, this.filteredColumn);
                        valColl = ej.distinct(valColl, "value", true);
                        this._searchRequest = false;
                    }          
                }
                this.initiateFilter(valColl);
            }
            else {
                valColl = this._getCDlgFields();
                $.inArray(this.fName, this.cFilteredCols) == -1 && valColl[0] && this.cFilteredCols.push(this.fName);
            }
        },
        initiateFilter: function (valColl) {
            var firstVal = valColl[0], predicate;
            if (!ej.isNullOrUndefined(firstVal)) {
                isTake = firstVal["from"];
                predicate = firstVal["ejpredicate"] ? firstVal["ejpredicate"] : ej.Predicate(firstVal.field, firstVal.operator, firstVal.value, !firstVal.matchcase, !firstVal.accent);
                for (var j = 1, jlen = valColl.length; j < jlen; j++) {
                    predicate = valColl[j].ejpredicate != undefined ? predicate[valColl[j].predicate](valColl[j].ejpredicate) : predicate[valColl[j].predicate](valColl[j].field, valColl[j].operator, valColl[j].value, !valColl[j].matchcase, !valColl[j].accent);
                }
                arg = { action: "filtering", filterCollection: valColl, fieldName: this.fName, ejpredicate: predicate, tableID: this._$tableID};
                if (this._predicates[this._$key] == undefined)
                    this._predicates[this._$key] = {};
                this._predicates[this._$key][this.fName] = !isTake ? predicate : { from: firstVal["from"], take: firstVal["take"] };
                if (!this._openedFltr.hasClass("e-dlgcustom") && this._listsWrap.find(".e-selectall").ejCheckBox("model.checked") && (!this._searchCount || ((this._add && this._add.prop("checked")) && (this._preChkList.filter(":not(':checked')").length == 0 || this._checked.length == 0)) || (valColl.length == this._preChkList.length)) && $.inArray(this.fName, this._columnsFiltered) != -1)
                    arg = { action: "clearfiltering", filterDetails: { field: this.fName, operator: "", predicate: "or", value: "" }, fieldName: this.fName, tableID: this._$tableID }
                if ($.inArray(this.fName, this._columnsFiltered) == -1)
                    this._columnsFiltered.push(this.fName);                
                this._filterHandler(arg);
            }
            this.closeXFDialog();
        },        
		/*Util method to perform formatted group on the inputted json*/
        getDistinct: function (json, field, fullRecord, redundancy) {
		    var lookup = {}, len = json.length, result = [], current, value, fd;

		    while (len--) {
		        current = json[len], value = ej.getObject(field, current), fd = value;
            if (!ej.isNullOrUndefined(current)) {
		        if (this.enableNormalize)
		            fd = this._formatting(this._$format, value, this._locale);

		        current["ejvalue"] = fd;

		        if (redundancy || !(value in lookup))
		            result.push(fullRecord ? current : value);

		        lookup[value] = true;
		    }
         }

		    result = ej.group(ej.mergeSort(result, field), "ejvalue"); /* sort with field and group with ejvalue */

		    return result;
		},
        /*Util method to split string and build filterobject collection */
		iterateAndGetCollection: function (valuestring, defaults) {
		    var splts = valuestring.split(this._spliter), len = splts.length, result = [], value, type = this._ctrlInstance._$colType;
            if (type == "number" || type == "date" || type == "datetime"){
				var index = splts.indexOf("");
				if (index > -1) {
                  splts.splice(index, 1);
                }
			}
		    while (len--) {
		        value = this.processValue(splts[len]);		       

		        result.push($.extend(true, { value: value }, defaults));
		    }

		    return result;
		},
        /*Util method to perform type conversion*/
		processValue: function (val, type/* optional */) {		    
		     type = type || this.getType(); type = this._empties.indexOf(val) != -1 ? "empty" : type; val = val === this.guid ? this._blankValue + "" : val;
		    switch (type) {
		        case "empty":/*Handle blanks*/
		            val = val == "null" ? null : val == "undefined" ? undefined : "";
		            break;
		        case "date":
		        case "datetime":
		            val = new Date(val);
		            break;
		        case "number":
		            val = +val;
		            break;
		        case "boolean":		           
		            val = (!isNaN(val) && typeof (val) == "string") ? ej.parseInt(val) != 0 : val === "true" ? true : false;
		            break;
		    }		    		      
		    return val;
		},
		getType: function () {
		    return !ej.isNullOrUndefined(this._$foreignField) ? this._$foreignKeyType : this._$colType;
		},
		replacer: function (input, pattern, processor, params) {
		    if (typeof processor == "function")
		        processor = processor.call(this, params)
		   return input.replace(pattern, processor);
		},
        _virtualize: function (e) {
            var height = $("#" + this.id + this._$colType + "_CheckBoxList").height();
            var chks = this._chkList.not(".e-checkbox").filter(function () { if (this.offsetTop > e.scrollTop - this.offsetHeight && e.scrollTop + height+70 > this.offsetTop + this.offsetHeight) return this; });
            if (chks.length == 0) return;
            chks.filter(":checked").ejCheckBox({ checked: true }); chks.filter(":not(:checked)").ejCheckBox({ checked: false });
            chks.ejCheckBox({ change: ej.proxy(this._checkHandler, this) });
            var scrollObj = this._listsWrap.ejScroller('instance');            
            scrollObj.refresh();
        },
        /*Method to reset private properties*/
        resetFilterModel: function (destroy) {
            this._blank = undefined;
            this._addAtLast = false;
            this._isFiltered = false;
            this._searchCount = 0;
        },
        resetExcelFilter: function (template) {
            var _i, _type, _id = this.id,_len, _$id;
            this._predicates = [];          
            this.cFilteredCols = [];
            this.resetFilterModel();
            for (_i = 0, _len = this._posType.length; _i < _len; _i++) {
                _type = this._posType[_i], _$id = _id + _type;
                var cDlg = $("#" + _$id + "_CustomFDlg");               
                $("#" + _$id + "_CheckBoxList").ejWaitingPopup("destroy"); $("#" + _$id + "_excelDlg").remove();
                cDlg.find(".e-dropdownlist").ejDropDownList("destroy");
                cDlg.find(".e-button").ejButton("destroy");
                if (_type == "string" || _type == "boolean") cDlg.find(".e-autocomplete").ejAutocomplete("destroy");
                if (_type == "number") cDlg.find(".e-numerictextbox").ejNumericTextbox("destroy");
                if (_type == "date") cDlg.find(".e-datepicker").ejDatePicker("destroy");
                cDlg.ejDialog("destroy");
                $("#" + _$id + "_CustomFDlg").remove();
            }
        },
        _wireEvents: function () {
            this._ctrlInstance._on(this._dialogContainer, "focus click", ".e-searchbox", ej.proxy(this._searchBoxFocus, this));
            this._ctrlInstance._on(this._dialogContainer, "keyup", ".e-searchbox input", ej.proxy(this._search, this));
        }
    };

    ej.ExcelFilter.valueDelimiter = "@|@";
    ej.ExcelFilter.Locale = ej.ExcelFilter.Locale || {};

    ej.ExcelFilter.Locale["default"] = ej.ExcelFilter.Locale["en-US"] = {
        SortNoSmaller: "Sort Smallest to Largest",
        SortNoLarger: "Sort Largest to Smallest",
        SortTextAscending: "Sort A to Z",
        SortTextDescending: "Sort Z to A",
        SortDateOldest: "Sort by Oldest",
        SortDateNewest:"Sort by Newest",
		SortByColor: "Sort By Color",
        SortByCellColor: "Sort by Cell Color",
        SortByFontColor: "Sort by Font Color",
        FilterByColor: "Filter By Color",
		CustomSort: "Custom Sort",
        FilterByCellColor: "Filter by Cell Color",
        FilterByFontColor: "Filter by Font Color",
        ClearFilter: "Clear Filter",
        NumberFilter: "Number Filters",
		GuidFilter: "Guid Filters",
        TextFilter: "Text Filters",
        DateFilter: "Date Filters",
        DateTimeFilter: "Date Time Filters",
        SelectAll: "Select All",
        Blanks: "Blanks",
		Search:"Search",
        Showrowswhere:"Show rows where",
		NumericTextboxWaterMark:"Enter value",
        StringMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Starts With", value: "startswith" }, { text: "Ends With", value: "endswith" }, { text: "Contains", value: "contains" }, { text: "Custom Filter", value: "customfilter" }],
        NumberMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Less Than", value: "lessthan" }, { text: "Less Than Or Equal", value: "lessthanorequal" }, { text: "Greater Than", value: "greaterthan" }, { text: "Greater Than Or Equal", value: "greaterthanorequal" }, { text: "Between", value: "between" }, { text: "Custom Filter", value: "customfilter" }],
        GuidMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Custom Filter", value: "customfilter" }],
		DateMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Less Than", value: "lessthan" }, { text: "Less Than Or Equal", value: "lessthanorequal" }, { text: "Greater Than", value: "greaterthan" }, { text: "Greater Than Or Equal", value: "greaterthanorequal" }, { text: "Between", value: "between" }, { text: "Custom Filter", value: "customfilter" }],
		DatetimeMenuOptions: [{ text: "Equal", value: "equal" }, { text: "Not Equal", value: "notequal" }, { text: "Less Than", value: "lessthan" }, { text: "Less Than Or Equal", value: "lessthanorequal" }, { text: "Greater Than", value: "greaterthan" }, { text: "Greater Than Or Equal", value: "greaterthanorequal" }, { text: "Between", value: "between" }, { text: "Custom Filter", value: "customfilter" }],
		Top10MenuOptions: [{ text: "Top", value: "top" }, { text: "Bottom", value: "bottom" }],
        title:"Custom Filter",
        PredicateAnd: "AND",
        PredicateOr: "OR",
        OK: "OK",
        MatchCase: "Match Case",
        Cancel: "Cancel",
        NoResult: "No Matches Found",
        CheckBoxStatusMsg: "Not all items showing",
        DatePickerWaterMark: "Select date",
        DateTimePickerWaterMark: "Select date time",
		True: "true",
        False: "false",
        AddToFilter: "Add current selection to filter"
    };

})(jQuery, Syncfusion);;